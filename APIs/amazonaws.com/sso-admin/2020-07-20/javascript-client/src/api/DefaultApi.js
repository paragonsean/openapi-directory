/**
 * AWS Single Sign-On Admin
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) helps you securely create, or connect, your workforce identities and manage their access centrally across AWS accounts and applications. IAM Identity Center is the recommended approach for workforce authentication and authorization in AWS, for organizations of any size and type.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide provides information on single sign-on operations which could be used for access management of AWS accounts. For information about IAM Identity Center features, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">IAM Identity Center User Guide</a>.</p> <p>Many operations in the IAM Identity Center APIs rely on identifiers for users and groups, known as principals. For more information about how to work with principals and principal IDs in IAM Identity Center, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/welcome.html\">Identity Store API Reference</a>.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2020-07-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttachCustomerManagedPolicyReferenceToPermissionSetRequest from '../model/AttachCustomerManagedPolicyReferenceToPermissionSetRequest';
import AttachManagedPolicyToPermissionSetRequest from '../model/AttachManagedPolicyToPermissionSetRequest';
import CreateAccountAssignmentRequest from '../model/CreateAccountAssignmentRequest';
import CreateAccountAssignmentResponse from '../model/CreateAccountAssignmentResponse';
import CreateInstanceAccessControlAttributeConfigurationRequest from '../model/CreateInstanceAccessControlAttributeConfigurationRequest';
import CreatePermissionSetRequest from '../model/CreatePermissionSetRequest';
import CreatePermissionSetResponse from '../model/CreatePermissionSetResponse';
import DeleteAccountAssignmentRequest from '../model/DeleteAccountAssignmentRequest';
import DeleteAccountAssignmentResponse from '../model/DeleteAccountAssignmentResponse';
import DeleteInlinePolicyFromPermissionSetRequest from '../model/DeleteInlinePolicyFromPermissionSetRequest';
import DeleteInstanceAccessControlAttributeConfigurationRequest from '../model/DeleteInstanceAccessControlAttributeConfigurationRequest';
import DeletePermissionSetRequest from '../model/DeletePermissionSetRequest';
import DeletePermissionsBoundaryFromPermissionSetRequest from '../model/DeletePermissionsBoundaryFromPermissionSetRequest';
import DescribeAccountAssignmentCreationStatusRequest from '../model/DescribeAccountAssignmentCreationStatusRequest';
import DescribeAccountAssignmentCreationStatusResponse from '../model/DescribeAccountAssignmentCreationStatusResponse';
import DescribeAccountAssignmentDeletionStatusRequest from '../model/DescribeAccountAssignmentDeletionStatusRequest';
import DescribeAccountAssignmentDeletionStatusResponse from '../model/DescribeAccountAssignmentDeletionStatusResponse';
import DescribeInstanceAccessControlAttributeConfigurationRequest from '../model/DescribeInstanceAccessControlAttributeConfigurationRequest';
import DescribeInstanceAccessControlAttributeConfigurationResponse from '../model/DescribeInstanceAccessControlAttributeConfigurationResponse';
import DescribePermissionSetProvisioningStatusRequest from '../model/DescribePermissionSetProvisioningStatusRequest';
import DescribePermissionSetProvisioningStatusResponse from '../model/DescribePermissionSetProvisioningStatusResponse';
import DescribePermissionSetRequest from '../model/DescribePermissionSetRequest';
import DescribePermissionSetResponse from '../model/DescribePermissionSetResponse';
import DetachCustomerManagedPolicyReferenceFromPermissionSetRequest from '../model/DetachCustomerManagedPolicyReferenceFromPermissionSetRequest';
import DetachManagedPolicyFromPermissionSetRequest from '../model/DetachManagedPolicyFromPermissionSetRequest';
import GetInlinePolicyForPermissionSetRequest from '../model/GetInlinePolicyForPermissionSetRequest';
import GetInlinePolicyForPermissionSetResponse from '../model/GetInlinePolicyForPermissionSetResponse';
import GetPermissionsBoundaryForPermissionSetRequest from '../model/GetPermissionsBoundaryForPermissionSetRequest';
import GetPermissionsBoundaryForPermissionSetResponse from '../model/GetPermissionsBoundaryForPermissionSetResponse';
import ListAccountAssignmentCreationStatusRequest from '../model/ListAccountAssignmentCreationStatusRequest';
import ListAccountAssignmentCreationStatusResponse from '../model/ListAccountAssignmentCreationStatusResponse';
import ListAccountAssignmentDeletionStatusRequest from '../model/ListAccountAssignmentDeletionStatusRequest';
import ListAccountAssignmentDeletionStatusResponse from '../model/ListAccountAssignmentDeletionStatusResponse';
import ListAccountAssignmentsRequest from '../model/ListAccountAssignmentsRequest';
import ListAccountAssignmentsResponse from '../model/ListAccountAssignmentsResponse';
import ListAccountsForProvisionedPermissionSetRequest from '../model/ListAccountsForProvisionedPermissionSetRequest';
import ListAccountsForProvisionedPermissionSetResponse from '../model/ListAccountsForProvisionedPermissionSetResponse';
import ListCustomerManagedPolicyReferencesInPermissionSetRequest from '../model/ListCustomerManagedPolicyReferencesInPermissionSetRequest';
import ListCustomerManagedPolicyReferencesInPermissionSetResponse from '../model/ListCustomerManagedPolicyReferencesInPermissionSetResponse';
import ListInstancesRequest from '../model/ListInstancesRequest';
import ListInstancesResponse from '../model/ListInstancesResponse';
import ListManagedPoliciesInPermissionSetRequest from '../model/ListManagedPoliciesInPermissionSetRequest';
import ListManagedPoliciesInPermissionSetResponse from '../model/ListManagedPoliciesInPermissionSetResponse';
import ListPermissionSetProvisioningStatusRequest from '../model/ListPermissionSetProvisioningStatusRequest';
import ListPermissionSetProvisioningStatusResponse from '../model/ListPermissionSetProvisioningStatusResponse';
import ListPermissionSetsProvisionedToAccountRequest from '../model/ListPermissionSetsProvisionedToAccountRequest';
import ListPermissionSetsProvisionedToAccountResponse from '../model/ListPermissionSetsProvisionedToAccountResponse';
import ListPermissionSetsRequest from '../model/ListPermissionSetsRequest';
import ListPermissionSetsResponse from '../model/ListPermissionSetsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ProvisionPermissionSetRequest from '../model/ProvisionPermissionSetRequest';
import ProvisionPermissionSetResponse from '../model/ProvisionPermissionSetResponse';
import PutInlinePolicyToPermissionSetRequest from '../model/PutInlinePolicyToPermissionSetRequest';
import PutPermissionsBoundaryToPermissionSetRequest from '../model/PutPermissionsBoundaryToPermissionSetRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateInstanceAccessControlAttributeConfigurationRequest from '../model/UpdateInstanceAccessControlAttributeConfigurationRequest';
import UpdatePermissionSetRequest from '../model/UpdatePermissionSetRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-07-20
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachCustomerManagedPolicyReferenceToPermissionSet operation.
     * @callback module:api/DefaultApi~attachCustomerManagedPolicyReferenceToPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches the specified customer managed policy to the specified <a>PermissionSet</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AttachCustomerManagedPolicyReferenceToPermissionSetRequest} attachCustomerManagedPolicyReferenceToPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~attachCustomerManagedPolicyReferenceToPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    attachCustomerManagedPolicyReferenceToPermissionSet(xAmzTarget, attachCustomerManagedPolicyReferenceToPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = attachCustomerManagedPolicyReferenceToPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling attachCustomerManagedPolicyReferenceToPermissionSet");
      }
      // verify the required parameter 'attachCustomerManagedPolicyReferenceToPermissionSetRequest' is set
      if (attachCustomerManagedPolicyReferenceToPermissionSetRequest === undefined || attachCustomerManagedPolicyReferenceToPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'attachCustomerManagedPolicyReferenceToPermissionSetRequest' when calling attachCustomerManagedPolicyReferenceToPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.AttachCustomerManagedPolicyReferenceToPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachManagedPolicyToPermissionSet operation.
     * @callback module:api/DefaultApi~attachManagedPolicyToPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Attaches an AWS managed policy ARN to a permission set.</p> <note> <p>If the permission set is already referenced by one or more account assignments, you will need to call <code> <a>ProvisionPermissionSet</a> </code> after this operation. Calling <code>ProvisionPermissionSet</code> applies the corresponding IAM policy updates to all assigned accounts.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/AttachManagedPolicyToPermissionSetRequest} attachManagedPolicyToPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~attachManagedPolicyToPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    attachManagedPolicyToPermissionSet(xAmzTarget, attachManagedPolicyToPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = attachManagedPolicyToPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling attachManagedPolicyToPermissionSet");
      }
      // verify the required parameter 'attachManagedPolicyToPermissionSetRequest' is set
      if (attachManagedPolicyToPermissionSetRequest === undefined || attachManagedPolicyToPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'attachManagedPolicyToPermissionSetRequest' when calling attachManagedPolicyToPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.AttachManagedPolicyToPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccountAssignment operation.
     * @callback module:api/DefaultApi~createAccountAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccountAssignmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns access to a principal for a specified AWS account using a specified permission set.</p> <note> <p>The term <i>principal</i> here refers to a user or group that is defined in IAM Identity Center.</p> </note> <note> <p>As part of a successful <code>CreateAccountAssignment</code> call, the specified permission set will automatically be provisioned to the account in the form of an IAM policy. That policy is attached to the IAM role created in IAM Identity Center. If the permission set is subsequently updated, the corresponding IAM policies attached to roles in your accounts will not be updated automatically. In this case, you must call <code> <a>ProvisionPermissionSet</a> </code> to make these updates.</p> </note> <note> <p> After a successful response, call <code>DescribeAccountAssignmentCreationStatus</code> to describe the status of an assignment creation request. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAccountAssignmentRequest} createAccountAssignmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAccountAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccountAssignmentResponse}
     */
    createAccountAssignment(xAmzTarget, createAccountAssignmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAccountAssignmentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAccountAssignment");
      }
      // verify the required parameter 'createAccountAssignmentRequest' is set
      if (createAccountAssignmentRequest === undefined || createAccountAssignmentRequest === null) {
        throw new Error("Missing the required parameter 'createAccountAssignmentRequest' when calling createAccountAssignment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAccountAssignmentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.CreateAccountAssignment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createInstanceAccessControlAttributeConfiguration operation.
     * @callback module:api/DefaultApi~createInstanceAccessControlAttributeConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Enables the attributes-based access control (ABAC) feature for the specified IAM Identity Center instance. You can also specify new attributes to add to your ABAC configuration during the enabling process. For more information about ABAC, see <a href=\"/singlesignon/latest/userguide/abac.html\">Attribute-Based Access Control</a> in the <i>IAM Identity Center User Guide</i>.</p> <note> <p>After a successful response, call <code>DescribeInstanceAccessControlAttributeConfiguration</code> to validate that <code>InstanceAccessControlAttributeConfiguration</code> was created.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateInstanceAccessControlAttributeConfigurationRequest} createInstanceAccessControlAttributeConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createInstanceAccessControlAttributeConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createInstanceAccessControlAttributeConfiguration(xAmzTarget, createInstanceAccessControlAttributeConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createInstanceAccessControlAttributeConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createInstanceAccessControlAttributeConfiguration");
      }
      // verify the required parameter 'createInstanceAccessControlAttributeConfigurationRequest' is set
      if (createInstanceAccessControlAttributeConfigurationRequest === undefined || createInstanceAccessControlAttributeConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'createInstanceAccessControlAttributeConfigurationRequest' when calling createInstanceAccessControlAttributeConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.CreateInstanceAccessControlAttributeConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermissionSet operation.
     * @callback module:api/DefaultApi~createPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a permission set within a specified IAM Identity Center instance.</p> <note> <p>To grant users and groups access to AWS account resources, use <code> <a>CreateAccountAssignment</a> </code>.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePermissionSetRequest} createPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePermissionSetResponse}
     */
    createPermissionSet(xAmzTarget, createPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPermissionSet");
      }
      // verify the required parameter 'createPermissionSetRequest' is set
      if (createPermissionSetRequest === undefined || createPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'createPermissionSetRequest' when calling createPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.CreatePermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccountAssignment operation.
     * @callback module:api/DefaultApi~deleteAccountAssignmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteAccountAssignmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a principal's access from a specified AWS account using a specified permission set.</p> <note> <p>After a successful response, call <code>DescribeAccountAssignmentCreationStatus</code> to describe the status of an assignment deletion request.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAccountAssignmentRequest} deleteAccountAssignmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAccountAssignmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteAccountAssignmentResponse}
     */
    deleteAccountAssignment(xAmzTarget, deleteAccountAssignmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAccountAssignmentRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAccountAssignment");
      }
      // verify the required parameter 'deleteAccountAssignmentRequest' is set
      if (deleteAccountAssignmentRequest === undefined || deleteAccountAssignmentRequest === null) {
        throw new Error("Missing the required parameter 'deleteAccountAssignmentRequest' when calling deleteAccountAssignment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteAccountAssignmentResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DeleteAccountAssignment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInlinePolicyFromPermissionSet operation.
     * @callback module:api/DefaultApi~deleteInlinePolicyFromPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the inline policy from a specified permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteInlinePolicyFromPermissionSetRequest} deleteInlinePolicyFromPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInlinePolicyFromPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInlinePolicyFromPermissionSet(xAmzTarget, deleteInlinePolicyFromPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteInlinePolicyFromPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteInlinePolicyFromPermissionSet");
      }
      // verify the required parameter 'deleteInlinePolicyFromPermissionSetRequest' is set
      if (deleteInlinePolicyFromPermissionSetRequest === undefined || deleteInlinePolicyFromPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'deleteInlinePolicyFromPermissionSetRequest' when calling deleteInlinePolicyFromPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DeleteInlinePolicyFromPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInstanceAccessControlAttributeConfiguration operation.
     * @callback module:api/DefaultApi~deleteInstanceAccessControlAttributeConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables the attributes-based access control (ABAC) feature for the specified IAM Identity Center instance and deletes all of the attribute mappings that have been configured. Once deleted, any attributes that are received from an identity source and any custom attributes you have previously configured will not be passed. For more information about ABAC, see <a href=\"/singlesignon/latest/userguide/abac.html\">Attribute-Based Access Control</a> in the <i>IAM Identity Center User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteInstanceAccessControlAttributeConfigurationRequest} deleteInstanceAccessControlAttributeConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInstanceAccessControlAttributeConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteInstanceAccessControlAttributeConfiguration(xAmzTarget, deleteInstanceAccessControlAttributeConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteInstanceAccessControlAttributeConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteInstanceAccessControlAttributeConfiguration");
      }
      // verify the required parameter 'deleteInstanceAccessControlAttributeConfigurationRequest' is set
      if (deleteInstanceAccessControlAttributeConfigurationRequest === undefined || deleteInstanceAccessControlAttributeConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteInstanceAccessControlAttributeConfigurationRequest' when calling deleteInstanceAccessControlAttributeConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DeleteInstanceAccessControlAttributeConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSet operation.
     * @callback module:api/DefaultApi~deletePermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePermissionSetRequest} deletePermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePermissionSet(xAmzTarget, deletePermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePermissionSet");
      }
      // verify the required parameter 'deletePermissionSetRequest' is set
      if (deletePermissionSetRequest === undefined || deletePermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'deletePermissionSetRequest' when calling deletePermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DeletePermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionsBoundaryFromPermissionSet operation.
     * @callback module:api/DefaultApi~deletePermissionsBoundaryFromPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the permissions boundary from a specified <a>PermissionSet</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePermissionsBoundaryFromPermissionSetRequest} deletePermissionsBoundaryFromPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePermissionsBoundaryFromPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deletePermissionsBoundaryFromPermissionSet(xAmzTarget, deletePermissionsBoundaryFromPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePermissionsBoundaryFromPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePermissionsBoundaryFromPermissionSet");
      }
      // verify the required parameter 'deletePermissionsBoundaryFromPermissionSetRequest' is set
      if (deletePermissionsBoundaryFromPermissionSetRequest === undefined || deletePermissionsBoundaryFromPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'deletePermissionsBoundaryFromPermissionSetRequest' when calling deletePermissionsBoundaryFromPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DeletePermissionsBoundaryFromPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccountAssignmentCreationStatus operation.
     * @callback module:api/DefaultApi~describeAccountAssignmentCreationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountAssignmentCreationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the status of the assignment creation request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAccountAssignmentCreationStatusRequest} describeAccountAssignmentCreationStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountAssignmentCreationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountAssignmentCreationStatusResponse}
     */
    describeAccountAssignmentCreationStatus(xAmzTarget, describeAccountAssignmentCreationStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAccountAssignmentCreationStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAccountAssignmentCreationStatus");
      }
      // verify the required parameter 'describeAccountAssignmentCreationStatusRequest' is set
      if (describeAccountAssignmentCreationStatusRequest === undefined || describeAccountAssignmentCreationStatusRequest === null) {
        throw new Error("Missing the required parameter 'describeAccountAssignmentCreationStatusRequest' when calling describeAccountAssignmentCreationStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccountAssignmentCreationStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DescribeAccountAssignmentCreationStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAccountAssignmentDeletionStatus operation.
     * @callback module:api/DefaultApi~describeAccountAssignmentDeletionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAccountAssignmentDeletionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the status of the assignment deletion request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAccountAssignmentDeletionStatusRequest} describeAccountAssignmentDeletionStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAccountAssignmentDeletionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAccountAssignmentDeletionStatusResponse}
     */
    describeAccountAssignmentDeletionStatus(xAmzTarget, describeAccountAssignmentDeletionStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAccountAssignmentDeletionStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAccountAssignmentDeletionStatus");
      }
      // verify the required parameter 'describeAccountAssignmentDeletionStatusRequest' is set
      if (describeAccountAssignmentDeletionStatusRequest === undefined || describeAccountAssignmentDeletionStatusRequest === null) {
        throw new Error("Missing the required parameter 'describeAccountAssignmentDeletionStatusRequest' when calling describeAccountAssignmentDeletionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAccountAssignmentDeletionStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DescribeAccountAssignmentDeletionStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInstanceAccessControlAttributeConfiguration operation.
     * @callback module:api/DefaultApi~describeInstanceAccessControlAttributeConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInstanceAccessControlAttributeConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of IAM Identity Center identity store attributes that have been configured to work with attributes-based access control (ABAC) for the specified IAM Identity Center instance. This will not return attributes configured and sent by an external identity provider. For more information about ABAC, see <a href=\"/singlesignon/latest/userguide/abac.html\">Attribute-Based Access Control</a> in the <i>IAM Identity Center User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeInstanceAccessControlAttributeConfigurationRequest} describeInstanceAccessControlAttributeConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeInstanceAccessControlAttributeConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInstanceAccessControlAttributeConfigurationResponse}
     */
    describeInstanceAccessControlAttributeConfiguration(xAmzTarget, describeInstanceAccessControlAttributeConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeInstanceAccessControlAttributeConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeInstanceAccessControlAttributeConfiguration");
      }
      // verify the required parameter 'describeInstanceAccessControlAttributeConfigurationRequest' is set
      if (describeInstanceAccessControlAttributeConfigurationRequest === undefined || describeInstanceAccessControlAttributeConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'describeInstanceAccessControlAttributeConfigurationRequest' when calling describeInstanceAccessControlAttributeConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeInstanceAccessControlAttributeConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DescribeInstanceAccessControlAttributeConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePermissionSet operation.
     * @callback module:api/DefaultApi~describePermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the details of the permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePermissionSetRequest} describePermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePermissionSetResponse}
     */
    describePermissionSet(xAmzTarget, describePermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePermissionSet");
      }
      // verify the required parameter 'describePermissionSetRequest' is set
      if (describePermissionSetRequest === undefined || describePermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'describePermissionSetRequest' when calling describePermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DescribePermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePermissionSetProvisioningStatus operation.
     * @callback module:api/DefaultApi~describePermissionSetProvisioningStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePermissionSetProvisioningStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the status for the given permission set provisioning request.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePermissionSetProvisioningStatusRequest} describePermissionSetProvisioningStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePermissionSetProvisioningStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePermissionSetProvisioningStatusResponse}
     */
    describePermissionSetProvisioningStatus(xAmzTarget, describePermissionSetProvisioningStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePermissionSetProvisioningStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePermissionSetProvisioningStatus");
      }
      // verify the required parameter 'describePermissionSetProvisioningStatusRequest' is set
      if (describePermissionSetProvisioningStatusRequest === undefined || describePermissionSetProvisioningStatusRequest === null) {
        throw new Error("Missing the required parameter 'describePermissionSetProvisioningStatusRequest' when calling describePermissionSetProvisioningStatus");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePermissionSetProvisioningStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DescribePermissionSetProvisioningStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachCustomerManagedPolicyReferenceFromPermissionSet operation.
     * @callback module:api/DefaultApi~detachCustomerManagedPolicyReferenceFromPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detaches the specified customer managed policy from the specified <a>PermissionSet</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DetachCustomerManagedPolicyReferenceFromPermissionSetRequest} detachCustomerManagedPolicyReferenceFromPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~detachCustomerManagedPolicyReferenceFromPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    detachCustomerManagedPolicyReferenceFromPermissionSet(xAmzTarget, detachCustomerManagedPolicyReferenceFromPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = detachCustomerManagedPolicyReferenceFromPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling detachCustomerManagedPolicyReferenceFromPermissionSet");
      }
      // verify the required parameter 'detachCustomerManagedPolicyReferenceFromPermissionSetRequest' is set
      if (detachCustomerManagedPolicyReferenceFromPermissionSetRequest === undefined || detachCustomerManagedPolicyReferenceFromPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'detachCustomerManagedPolicyReferenceFromPermissionSetRequest' when calling detachCustomerManagedPolicyReferenceFromPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DetachCustomerManagedPolicyReferenceFromPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detachManagedPolicyFromPermissionSet operation.
     * @callback module:api/DefaultApi~detachManagedPolicyFromPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detaches the attached AWS managed policy ARN from the specified permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DetachManagedPolicyFromPermissionSetRequest} detachManagedPolicyFromPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~detachManagedPolicyFromPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    detachManagedPolicyFromPermissionSet(xAmzTarget, detachManagedPolicyFromPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = detachManagedPolicyFromPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling detachManagedPolicyFromPermissionSet");
      }
      // verify the required parameter 'detachManagedPolicyFromPermissionSetRequest' is set
      if (detachManagedPolicyFromPermissionSetRequest === undefined || detachManagedPolicyFromPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'detachManagedPolicyFromPermissionSetRequest' when calling detachManagedPolicyFromPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.DetachManagedPolicyFromPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInlinePolicyForPermissionSet operation.
     * @callback module:api/DefaultApi~getInlinePolicyForPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInlinePolicyForPermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains the inline policy assigned to the permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetInlinePolicyForPermissionSetRequest} getInlinePolicyForPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getInlinePolicyForPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInlinePolicyForPermissionSetResponse}
     */
    getInlinePolicyForPermissionSet(xAmzTarget, getInlinePolicyForPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = getInlinePolicyForPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getInlinePolicyForPermissionSet");
      }
      // verify the required parameter 'getInlinePolicyForPermissionSetRequest' is set
      if (getInlinePolicyForPermissionSetRequest === undefined || getInlinePolicyForPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'getInlinePolicyForPermissionSetRequest' when calling getInlinePolicyForPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetInlinePolicyForPermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.GetInlinePolicyForPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissionsBoundaryForPermissionSet operation.
     * @callback module:api/DefaultApi~getPermissionsBoundaryForPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPermissionsBoundaryForPermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtains the permissions boundary for a specified <a>PermissionSet</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetPermissionsBoundaryForPermissionSetRequest} getPermissionsBoundaryForPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPermissionsBoundaryForPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPermissionsBoundaryForPermissionSetResponse}
     */
    getPermissionsBoundaryForPermissionSet(xAmzTarget, getPermissionsBoundaryForPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = getPermissionsBoundaryForPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getPermissionsBoundaryForPermissionSet");
      }
      // verify the required parameter 'getPermissionsBoundaryForPermissionSetRequest' is set
      if (getPermissionsBoundaryForPermissionSetRequest === undefined || getPermissionsBoundaryForPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'getPermissionsBoundaryForPermissionSetRequest' when calling getPermissionsBoundaryForPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPermissionsBoundaryForPermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.GetPermissionsBoundaryForPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountAssignmentCreationStatus operation.
     * @callback module:api/DefaultApi~listAccountAssignmentCreationStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountAssignmentCreationStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the status of the AWS account assignment creation requests for a specified IAM Identity Center instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccountAssignmentCreationStatusRequest} listAccountAssignmentCreationStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccountAssignmentCreationStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountAssignmentCreationStatusResponse}
     */
    listAccountAssignmentCreationStatus(xAmzTarget, listAccountAssignmentCreationStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccountAssignmentCreationStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccountAssignmentCreationStatus");
      }
      // verify the required parameter 'listAccountAssignmentCreationStatusRequest' is set
      if (listAccountAssignmentCreationStatusRequest === undefined || listAccountAssignmentCreationStatusRequest === null) {
        throw new Error("Missing the required parameter 'listAccountAssignmentCreationStatusRequest' when calling listAccountAssignmentCreationStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccountAssignmentCreationStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListAccountAssignmentCreationStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountAssignmentDeletionStatus operation.
     * @callback module:api/DefaultApi~listAccountAssignmentDeletionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountAssignmentDeletionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the status of the AWS account assignment deletion requests for a specified IAM Identity Center instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccountAssignmentDeletionStatusRequest} listAccountAssignmentDeletionStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccountAssignmentDeletionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountAssignmentDeletionStatusResponse}
     */
    listAccountAssignmentDeletionStatus(xAmzTarget, listAccountAssignmentDeletionStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccountAssignmentDeletionStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccountAssignmentDeletionStatus");
      }
      // verify the required parameter 'listAccountAssignmentDeletionStatusRequest' is set
      if (listAccountAssignmentDeletionStatusRequest === undefined || listAccountAssignmentDeletionStatusRequest === null) {
        throw new Error("Missing the required parameter 'listAccountAssignmentDeletionStatusRequest' when calling listAccountAssignmentDeletionStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccountAssignmentDeletionStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListAccountAssignmentDeletionStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountAssignments operation.
     * @callback module:api/DefaultApi~listAccountAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountAssignmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the assignee of the specified AWS account with the specified permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccountAssignmentsRequest} listAccountAssignmentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccountAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountAssignmentsResponse}
     */
    listAccountAssignments(xAmzTarget, listAccountAssignmentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccountAssignmentsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccountAssignments");
      }
      // verify the required parameter 'listAccountAssignmentsRequest' is set
      if (listAccountAssignmentsRequest === undefined || listAccountAssignmentsRequest === null) {
        throw new Error("Missing the required parameter 'listAccountAssignmentsRequest' when calling listAccountAssignments");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccountAssignmentsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListAccountAssignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccountsForProvisionedPermissionSet operation.
     * @callback module:api/DefaultApi~listAccountsForProvisionedPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccountsForProvisionedPermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the AWS accounts where the specified permission set is provisioned.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccountsForProvisionedPermissionSetRequest} listAccountsForProvisionedPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccountsForProvisionedPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccountsForProvisionedPermissionSetResponse}
     */
    listAccountsForProvisionedPermissionSet(xAmzTarget, listAccountsForProvisionedPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccountsForProvisionedPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccountsForProvisionedPermissionSet");
      }
      // verify the required parameter 'listAccountsForProvisionedPermissionSetRequest' is set
      if (listAccountsForProvisionedPermissionSetRequest === undefined || listAccountsForProvisionedPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'listAccountsForProvisionedPermissionSetRequest' when calling listAccountsForProvisionedPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccountsForProvisionedPermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListAccountsForProvisionedPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomerManagedPolicyReferencesInPermissionSet operation.
     * @callback module:api/DefaultApi~listCustomerManagedPolicyReferencesInPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCustomerManagedPolicyReferencesInPermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all customer managed policies attached to a specified <a>PermissionSet</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCustomerManagedPolicyReferencesInPermissionSetRequest} listCustomerManagedPolicyReferencesInPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCustomerManagedPolicyReferencesInPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCustomerManagedPolicyReferencesInPermissionSetResponse}
     */
    listCustomerManagedPolicyReferencesInPermissionSet(xAmzTarget, listCustomerManagedPolicyReferencesInPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCustomerManagedPolicyReferencesInPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCustomerManagedPolicyReferencesInPermissionSet");
      }
      // verify the required parameter 'listCustomerManagedPolicyReferencesInPermissionSetRequest' is set
      if (listCustomerManagedPolicyReferencesInPermissionSetRequest === undefined || listCustomerManagedPolicyReferencesInPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'listCustomerManagedPolicyReferencesInPermissionSetRequest' when calling listCustomerManagedPolicyReferencesInPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCustomerManagedPolicyReferencesInPermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListCustomerManagedPolicyReferencesInPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstances operation.
     * @callback module:api/DefaultApi~listInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the IAM Identity Center instances that the caller has access to.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListInstancesRequest} listInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstancesResponse}
     */
    listInstances(xAmzTarget, listInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listInstancesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listInstances");
      }
      // verify the required parameter 'listInstancesRequest' is set
      if (listInstancesRequest === undefined || listInstancesRequest === null) {
        throw new Error("Missing the required parameter 'listInstancesRequest' when calling listInstances");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListInstancesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagedPoliciesInPermissionSet operation.
     * @callback module:api/DefaultApi~listManagedPoliciesInPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListManagedPoliciesInPermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the AWS managed policy that is attached to a specified permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListManagedPoliciesInPermissionSetRequest} listManagedPoliciesInPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listManagedPoliciesInPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListManagedPoliciesInPermissionSetResponse}
     */
    listManagedPoliciesInPermissionSet(xAmzTarget, listManagedPoliciesInPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = listManagedPoliciesInPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listManagedPoliciesInPermissionSet");
      }
      // verify the required parameter 'listManagedPoliciesInPermissionSetRequest' is set
      if (listManagedPoliciesInPermissionSetRequest === undefined || listManagedPoliciesInPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'listManagedPoliciesInPermissionSetRequest' when calling listManagedPoliciesInPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListManagedPoliciesInPermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListManagedPoliciesInPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissionSetProvisioningStatus operation.
     * @callback module:api/DefaultApi~listPermissionSetProvisioningStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionSetProvisioningStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the status of the permission set provisioning requests for a specified IAM Identity Center instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPermissionSetProvisioningStatusRequest} listPermissionSetProvisioningStatusRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPermissionSetProvisioningStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionSetProvisioningStatusResponse}
     */
    listPermissionSetProvisioningStatus(xAmzTarget, listPermissionSetProvisioningStatusRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPermissionSetProvisioningStatusRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPermissionSetProvisioningStatus");
      }
      // verify the required parameter 'listPermissionSetProvisioningStatusRequest' is set
      if (listPermissionSetProvisioningStatusRequest === undefined || listPermissionSetProvisioningStatusRequest === null) {
        throw new Error("Missing the required parameter 'listPermissionSetProvisioningStatusRequest' when calling listPermissionSetProvisioningStatus");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPermissionSetProvisioningStatusResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListPermissionSetProvisioningStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissionSets operation.
     * @callback module:api/DefaultApi~listPermissionSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the <a>PermissionSet</a>s in an IAM Identity Center instance.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPermissionSetsRequest} listPermissionSetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPermissionSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionSetsResponse}
     */
    listPermissionSets(xAmzTarget, listPermissionSetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPermissionSetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPermissionSets");
      }
      // verify the required parameter 'listPermissionSetsRequest' is set
      if (listPermissionSetsRequest === undefined || listPermissionSetsRequest === null) {
        throw new Error("Missing the required parameter 'listPermissionSetsRequest' when calling listPermissionSets");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPermissionSetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListPermissionSets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissionSetsProvisionedToAccount operation.
     * @callback module:api/DefaultApi~listPermissionSetsProvisionedToAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionSetsProvisionedToAccountResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the permission sets that are provisioned to a specified AWS account.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPermissionSetsProvisionedToAccountRequest} listPermissionSetsProvisionedToAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPermissionSetsProvisionedToAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionSetsProvisionedToAccountResponse}
     */
    listPermissionSetsProvisionedToAccount(xAmzTarget, listPermissionSetsProvisionedToAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPermissionSetsProvisionedToAccountRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPermissionSetsProvisionedToAccount");
      }
      // verify the required parameter 'listPermissionSetsProvisionedToAccountRequest' is set
      if (listPermissionSetsProvisionedToAccountRequest === undefined || listPermissionSetsProvisionedToAccountRequest === null) {
        throw new Error("Missing the required parameter 'listPermissionSetsProvisionedToAccountRequest' when calling listPermissionSetsProvisionedToAccount");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPermissionSetsProvisionedToAccountResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListPermissionSetsProvisionedToAccount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags that are attached to a specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionPermissionSet operation.
     * @callback module:api/DefaultApi~provisionPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisionPermissionSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The process by which a specified permission set is provisioned to the specified target.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ProvisionPermissionSetRequest} provisionPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~provisionPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisionPermissionSetResponse}
     */
    provisionPermissionSet(xAmzTarget, provisionPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = provisionPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling provisionPermissionSet");
      }
      // verify the required parameter 'provisionPermissionSetRequest' is set
      if (provisionPermissionSetRequest === undefined || provisionPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'provisionPermissionSetRequest' when calling provisionPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProvisionPermissionSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.ProvisionPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putInlinePolicyToPermissionSet operation.
     * @callback module:api/DefaultApi~putInlinePolicyToPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Attaches an inline policy to a permission set.</p> <note> <p>If the permission set is already referenced by one or more account assignments, you will need to call <code> <a>ProvisionPermissionSet</a> </code> after this action to apply the corresponding IAM policy updates to all assigned accounts.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutInlinePolicyToPermissionSetRequest} putInlinePolicyToPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putInlinePolicyToPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putInlinePolicyToPermissionSet(xAmzTarget, putInlinePolicyToPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = putInlinePolicyToPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putInlinePolicyToPermissionSet");
      }
      // verify the required parameter 'putInlinePolicyToPermissionSetRequest' is set
      if (putInlinePolicyToPermissionSetRequest === undefined || putInlinePolicyToPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'putInlinePolicyToPermissionSetRequest' when calling putInlinePolicyToPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.PutInlinePolicyToPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putPermissionsBoundaryToPermissionSet operation.
     * @callback module:api/DefaultApi~putPermissionsBoundaryToPermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches an AWS managed or customer managed policy to the specified <a>PermissionSet</a> as a permissions boundary.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutPermissionsBoundaryToPermissionSetRequest} putPermissionsBoundaryToPermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putPermissionsBoundaryToPermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putPermissionsBoundaryToPermissionSet(xAmzTarget, putPermissionsBoundaryToPermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = putPermissionsBoundaryToPermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putPermissionsBoundaryToPermissionSet");
      }
      // verify the required parameter 'putPermissionsBoundaryToPermissionSetRequest' is set
      if (putPermissionsBoundaryToPermissionSetRequest === undefined || putPermissionsBoundaryToPermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'putPermissionsBoundaryToPermissionSetRequest' when calling putPermissionsBoundaryToPermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.PutPermissionsBoundaryToPermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a set of tags with a specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociates a set of tags from a specified resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateInstanceAccessControlAttributeConfiguration operation.
     * @callback module:api/DefaultApi~updateInstanceAccessControlAttributeConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the IAM Identity Center identity store attributes that you can use with the IAM Identity Center instance for attributes-based access control (ABAC). When using an external identity provider as an identity source, you can pass attributes through the SAML assertion as an alternative to configuring attributes from the IAM Identity Center identity store. If a SAML assertion passes any of these attributes, IAM Identity Center replaces the attribute value with the value from the IAM Identity Center identity store. For more information about ABAC, see <a href=\"/singlesignon/latest/userguide/abac.html\">Attribute-Based Access Control</a> in the <i>IAM Identity Center User Guide</i>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateInstanceAccessControlAttributeConfigurationRequest} updateInstanceAccessControlAttributeConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateInstanceAccessControlAttributeConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateInstanceAccessControlAttributeConfiguration(xAmzTarget, updateInstanceAccessControlAttributeConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateInstanceAccessControlAttributeConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateInstanceAccessControlAttributeConfiguration");
      }
      // verify the required parameter 'updateInstanceAccessControlAttributeConfigurationRequest' is set
      if (updateInstanceAccessControlAttributeConfigurationRequest === undefined || updateInstanceAccessControlAttributeConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateInstanceAccessControlAttributeConfigurationRequest' when calling updateInstanceAccessControlAttributeConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.UpdateInstanceAccessControlAttributeConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissionSet operation.
     * @callback module:api/DefaultApi~updatePermissionSetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing permission set.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdatePermissionSetRequest} updatePermissionSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePermissionSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updatePermissionSet(xAmzTarget, updatePermissionSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePermissionSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updatePermissionSet");
      }
      // verify the required parameter 'updatePermissionSetRequest' is set
      if (updatePermissionSetRequest === undefined || updatePermissionSetRequest === null) {
        throw new Error("Missing the required parameter 'updatePermissionSetRequest' when calling updatePermissionSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=SWBExternalService.UpdatePermissionSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
