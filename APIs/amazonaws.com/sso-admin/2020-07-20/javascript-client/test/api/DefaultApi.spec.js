/**
 * AWS Single Sign-On Admin
 * <p>AWS IAM Identity Center (successor to AWS Single Sign-On) helps you securely create, or connect, your workforce identities and manage their access centrally across AWS accounts and applications. IAM Identity Center is the recommended approach for workforce authentication and authorization in AWS, for organizations of any size and type.</p> <note> <p>Although AWS Single Sign-On was renamed, the <code>sso</code> and <code>identitystore</code> API namespaces will continue to retain their original name for backward compatibility purposes. For more information, see <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html#renamed\">IAM Identity Center rename</a>.</p> </note> <p>This reference guide provides information on single sign-on operations which could be used for access management of AWS accounts. For information about IAM Identity Center features, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/userguide/what-is.html\">IAM Identity Center User Guide</a>.</p> <p>Many operations in the IAM Identity Center APIs rely on identifiers for users and groups, known as principals. For more information about how to work with principals and principal IDs in IAM Identity Center, see the <a href=\"https://docs.aws.amazon.com/singlesignon/latest/IdentityStoreAPIReference/welcome.html\">Identity Store API Reference</a>.</p> <note> <p>AWS provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, iOS, Android, and more). The SDKs provide a convenient way to create programmatic access to IAM Identity Center and other AWS services. For more information about the AWS SDKs, including how to download and install them, see <a href=\"http://aws.amazon.com/tools/\">Tools for Amazon Web Services</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2020-07-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSingleSignOnAdmin);
  }
}(this, function(expect, AwsSingleSignOnAdmin) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSingleSignOnAdmin.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('attachCustomerManagedPolicyReferenceToPermissionSet', function() {
      it('should call attachCustomerManagedPolicyReferenceToPermissionSet successfully', function(done) {
        //uncomment below and update the code to test attachCustomerManagedPolicyReferenceToPermissionSet
        //instance.attachCustomerManagedPolicyReferenceToPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachManagedPolicyToPermissionSet', function() {
      it('should call attachManagedPolicyToPermissionSet successfully', function(done) {
        //uncomment below and update the code to test attachManagedPolicyToPermissionSet
        //instance.attachManagedPolicyToPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAccountAssignment', function() {
      it('should call createAccountAssignment successfully', function(done) {
        //uncomment below and update the code to test createAccountAssignment
        //instance.createAccountAssignment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createInstanceAccessControlAttributeConfiguration', function() {
      it('should call createInstanceAccessControlAttributeConfiguration successfully', function(done) {
        //uncomment below and update the code to test createInstanceAccessControlAttributeConfiguration
        //instance.createInstanceAccessControlAttributeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPermissionSet', function() {
      it('should call createPermissionSet successfully', function(done) {
        //uncomment below and update the code to test createPermissionSet
        //instance.createPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccountAssignment', function() {
      it('should call deleteAccountAssignment successfully', function(done) {
        //uncomment below and update the code to test deleteAccountAssignment
        //instance.deleteAccountAssignment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInlinePolicyFromPermissionSet', function() {
      it('should call deleteInlinePolicyFromPermissionSet successfully', function(done) {
        //uncomment below and update the code to test deleteInlinePolicyFromPermissionSet
        //instance.deleteInlinePolicyFromPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInstanceAccessControlAttributeConfiguration', function() {
      it('should call deleteInstanceAccessControlAttributeConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteInstanceAccessControlAttributeConfiguration
        //instance.deleteInstanceAccessControlAttributeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSet', function() {
      it('should call deletePermissionSet successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSet
        //instance.deletePermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionsBoundaryFromPermissionSet', function() {
      it('should call deletePermissionsBoundaryFromPermissionSet successfully', function(done) {
        //uncomment below and update the code to test deletePermissionsBoundaryFromPermissionSet
        //instance.deletePermissionsBoundaryFromPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountAssignmentCreationStatus', function() {
      it('should call describeAccountAssignmentCreationStatus successfully', function(done) {
        //uncomment below and update the code to test describeAccountAssignmentCreationStatus
        //instance.describeAccountAssignmentCreationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAccountAssignmentDeletionStatus', function() {
      it('should call describeAccountAssignmentDeletionStatus successfully', function(done) {
        //uncomment below and update the code to test describeAccountAssignmentDeletionStatus
        //instance.describeAccountAssignmentDeletionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInstanceAccessControlAttributeConfiguration', function() {
      it('should call describeInstanceAccessControlAttributeConfiguration successfully', function(done) {
        //uncomment below and update the code to test describeInstanceAccessControlAttributeConfiguration
        //instance.describeInstanceAccessControlAttributeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePermissionSet', function() {
      it('should call describePermissionSet successfully', function(done) {
        //uncomment below and update the code to test describePermissionSet
        //instance.describePermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePermissionSetProvisioningStatus', function() {
      it('should call describePermissionSetProvisioningStatus successfully', function(done) {
        //uncomment below and update the code to test describePermissionSetProvisioningStatus
        //instance.describePermissionSetProvisioningStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachCustomerManagedPolicyReferenceFromPermissionSet', function() {
      it('should call detachCustomerManagedPolicyReferenceFromPermissionSet successfully', function(done) {
        //uncomment below and update the code to test detachCustomerManagedPolicyReferenceFromPermissionSet
        //instance.detachCustomerManagedPolicyReferenceFromPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachManagedPolicyFromPermissionSet', function() {
      it('should call detachManagedPolicyFromPermissionSet successfully', function(done) {
        //uncomment below and update the code to test detachManagedPolicyFromPermissionSet
        //instance.detachManagedPolicyFromPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInlinePolicyForPermissionSet', function() {
      it('should call getInlinePolicyForPermissionSet successfully', function(done) {
        //uncomment below and update the code to test getInlinePolicyForPermissionSet
        //instance.getInlinePolicyForPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPermissionsBoundaryForPermissionSet', function() {
      it('should call getPermissionsBoundaryForPermissionSet successfully', function(done) {
        //uncomment below and update the code to test getPermissionsBoundaryForPermissionSet
        //instance.getPermissionsBoundaryForPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountAssignmentCreationStatus', function() {
      it('should call listAccountAssignmentCreationStatus successfully', function(done) {
        //uncomment below and update the code to test listAccountAssignmentCreationStatus
        //instance.listAccountAssignmentCreationStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountAssignmentDeletionStatus', function() {
      it('should call listAccountAssignmentDeletionStatus successfully', function(done) {
        //uncomment below and update the code to test listAccountAssignmentDeletionStatus
        //instance.listAccountAssignmentDeletionStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountAssignments', function() {
      it('should call listAccountAssignments successfully', function(done) {
        //uncomment below and update the code to test listAccountAssignments
        //instance.listAccountAssignments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccountsForProvisionedPermissionSet', function() {
      it('should call listAccountsForProvisionedPermissionSet successfully', function(done) {
        //uncomment below and update the code to test listAccountsForProvisionedPermissionSet
        //instance.listAccountsForProvisionedPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listCustomerManagedPolicyReferencesInPermissionSet', function() {
      it('should call listCustomerManagedPolicyReferencesInPermissionSet successfully', function(done) {
        //uncomment below and update the code to test listCustomerManagedPolicyReferencesInPermissionSet
        //instance.listCustomerManagedPolicyReferencesInPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstances', function() {
      it('should call listInstances successfully', function(done) {
        //uncomment below and update the code to test listInstances
        //instance.listInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listManagedPoliciesInPermissionSet', function() {
      it('should call listManagedPoliciesInPermissionSet successfully', function(done) {
        //uncomment below and update the code to test listManagedPoliciesInPermissionSet
        //instance.listManagedPoliciesInPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPermissionSetProvisioningStatus', function() {
      it('should call listPermissionSetProvisioningStatus successfully', function(done) {
        //uncomment below and update the code to test listPermissionSetProvisioningStatus
        //instance.listPermissionSetProvisioningStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPermissionSets', function() {
      it('should call listPermissionSets successfully', function(done) {
        //uncomment below and update the code to test listPermissionSets
        //instance.listPermissionSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPermissionSetsProvisionedToAccount', function() {
      it('should call listPermissionSetsProvisionedToAccount successfully', function(done) {
        //uncomment below and update the code to test listPermissionSetsProvisionedToAccount
        //instance.listPermissionSetsProvisionedToAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('provisionPermissionSet', function() {
      it('should call provisionPermissionSet successfully', function(done) {
        //uncomment below and update the code to test provisionPermissionSet
        //instance.provisionPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putInlinePolicyToPermissionSet', function() {
      it('should call putInlinePolicyToPermissionSet successfully', function(done) {
        //uncomment below and update the code to test putInlinePolicyToPermissionSet
        //instance.putInlinePolicyToPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putPermissionsBoundaryToPermissionSet', function() {
      it('should call putPermissionsBoundaryToPermissionSet successfully', function(done) {
        //uncomment below and update the code to test putPermissionsBoundaryToPermissionSet
        //instance.putPermissionsBoundaryToPermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateInstanceAccessControlAttributeConfiguration', function() {
      it('should call updateInstanceAccessControlAttributeConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateInstanceAccessControlAttributeConfiguration
        //instance.updateInstanceAccessControlAttributeConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePermissionSet', function() {
      it('should call updatePermissionSet successfully', function(done) {
        //uncomment below and update the code to test updatePermissionSet
        //instance.updatePermissionSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
