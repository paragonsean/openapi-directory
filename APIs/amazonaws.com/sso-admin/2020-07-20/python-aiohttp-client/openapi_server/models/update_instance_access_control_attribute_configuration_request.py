# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_instance_access_control_attribute_configuration_request_instance_access_control_attribute_configuration import UpdateInstanceAccessControlAttributeConfigurationRequestInstanceAccessControlAttributeConfiguration
from openapi_server import util


class UpdateInstanceAccessControlAttributeConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_arn: str=None, instance_access_control_attribute_configuration: UpdateInstanceAccessControlAttributeConfigurationRequestInstanceAccessControlAttributeConfiguration=None):
        """UpdateInstanceAccessControlAttributeConfigurationRequest - a model defined in OpenAPI

        :param instance_arn: The instance_arn of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        :param instance_access_control_attribute_configuration: The instance_access_control_attribute_configuration of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        """
        self.openapi_types = {
            'instance_arn': str,
            'instance_access_control_attribute_configuration': UpdateInstanceAccessControlAttributeConfigurationRequestInstanceAccessControlAttributeConfiguration
        }

        self.attribute_map = {
            'instance_arn': 'InstanceArn',
            'instance_access_control_attribute_configuration': 'InstanceAccessControlAttributeConfiguration'
        }

        self._instance_arn = instance_arn
        self._instance_access_control_attribute_configuration = instance_access_control_attribute_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateInstanceAccessControlAttributeConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateInstanceAccessControlAttributeConfigurationRequest of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_arn(self):
        """Gets the instance_arn of this UpdateInstanceAccessControlAttributeConfigurationRequest.


        :return: The instance_arn of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        :rtype: str
        """
        return self._instance_arn

    @instance_arn.setter
    def instance_arn(self, instance_arn):
        """Sets the instance_arn of this UpdateInstanceAccessControlAttributeConfigurationRequest.


        :param instance_arn: The instance_arn of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        :type instance_arn: str
        """
        if instance_arn is None:
            raise ValueError("Invalid value for `instance_arn`, must not be `None`")

        self._instance_arn = instance_arn

    @property
    def instance_access_control_attribute_configuration(self):
        """Gets the instance_access_control_attribute_configuration of this UpdateInstanceAccessControlAttributeConfigurationRequest.


        :return: The instance_access_control_attribute_configuration of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        :rtype: UpdateInstanceAccessControlAttributeConfigurationRequestInstanceAccessControlAttributeConfiguration
        """
        return self._instance_access_control_attribute_configuration

    @instance_access_control_attribute_configuration.setter
    def instance_access_control_attribute_configuration(self, instance_access_control_attribute_configuration):
        """Sets the instance_access_control_attribute_configuration of this UpdateInstanceAccessControlAttributeConfigurationRequest.


        :param instance_access_control_attribute_configuration: The instance_access_control_attribute_configuration of this UpdateInstanceAccessControlAttributeConfigurationRequest.
        :type instance_access_control_attribute_configuration: UpdateInstanceAccessControlAttributeConfigurationRequestInstanceAccessControlAttributeConfiguration
        """
        if instance_access_control_attribute_configuration is None:
            raise ValueError("Invalid value for `instance_access_control_attribute_configuration`, must not be `None`")

        self._instance_access_control_attribute_configuration = instance_access_control_attribute_configuration
