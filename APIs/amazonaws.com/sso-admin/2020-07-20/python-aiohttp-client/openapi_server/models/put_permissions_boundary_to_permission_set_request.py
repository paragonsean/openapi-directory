# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_permissions_boundary_to_permission_set_request_permissions_boundary import PutPermissionsBoundaryToPermissionSetRequestPermissionsBoundary
from openapi_server import util


class PutPermissionsBoundaryToPermissionSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_arn: str=None, permission_set_arn: str=None, permissions_boundary: PutPermissionsBoundaryToPermissionSetRequestPermissionsBoundary=None):
        """PutPermissionsBoundaryToPermissionSetRequest - a model defined in OpenAPI

        :param instance_arn: The instance_arn of this PutPermissionsBoundaryToPermissionSetRequest.
        :param permission_set_arn: The permission_set_arn of this PutPermissionsBoundaryToPermissionSetRequest.
        :param permissions_boundary: The permissions_boundary of this PutPermissionsBoundaryToPermissionSetRequest.
        """
        self.openapi_types = {
            'instance_arn': str,
            'permission_set_arn': str,
            'permissions_boundary': PutPermissionsBoundaryToPermissionSetRequestPermissionsBoundary
        }

        self.attribute_map = {
            'instance_arn': 'InstanceArn',
            'permission_set_arn': 'PermissionSetArn',
            'permissions_boundary': 'PermissionsBoundary'
        }

        self._instance_arn = instance_arn
        self._permission_set_arn = permission_set_arn
        self._permissions_boundary = permissions_boundary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutPermissionsBoundaryToPermissionSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutPermissionsBoundaryToPermissionSetRequest of this PutPermissionsBoundaryToPermissionSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_arn(self):
        """Gets the instance_arn of this PutPermissionsBoundaryToPermissionSetRequest.


        :return: The instance_arn of this PutPermissionsBoundaryToPermissionSetRequest.
        :rtype: str
        """
        return self._instance_arn

    @instance_arn.setter
    def instance_arn(self, instance_arn):
        """Sets the instance_arn of this PutPermissionsBoundaryToPermissionSetRequest.


        :param instance_arn: The instance_arn of this PutPermissionsBoundaryToPermissionSetRequest.
        :type instance_arn: str
        """
        if instance_arn is None:
            raise ValueError("Invalid value for `instance_arn`, must not be `None`")

        self._instance_arn = instance_arn

    @property
    def permission_set_arn(self):
        """Gets the permission_set_arn of this PutPermissionsBoundaryToPermissionSetRequest.


        :return: The permission_set_arn of this PutPermissionsBoundaryToPermissionSetRequest.
        :rtype: str
        """
        return self._permission_set_arn

    @permission_set_arn.setter
    def permission_set_arn(self, permission_set_arn):
        """Sets the permission_set_arn of this PutPermissionsBoundaryToPermissionSetRequest.


        :param permission_set_arn: The permission_set_arn of this PutPermissionsBoundaryToPermissionSetRequest.
        :type permission_set_arn: str
        """
        if permission_set_arn is None:
            raise ValueError("Invalid value for `permission_set_arn`, must not be `None`")

        self._permission_set_arn = permission_set_arn

    @property
    def permissions_boundary(self):
        """Gets the permissions_boundary of this PutPermissionsBoundaryToPermissionSetRequest.


        :return: The permissions_boundary of this PutPermissionsBoundaryToPermissionSetRequest.
        :rtype: PutPermissionsBoundaryToPermissionSetRequestPermissionsBoundary
        """
        return self._permissions_boundary

    @permissions_boundary.setter
    def permissions_boundary(self, permissions_boundary):
        """Sets the permissions_boundary of this PutPermissionsBoundaryToPermissionSetRequest.


        :param permissions_boundary: The permissions_boundary of this PutPermissionsBoundaryToPermissionSetRequest.
        :type permissions_boundary: PutPermissionsBoundaryToPermissionSetRequestPermissionsBoundary
        """
        if permissions_boundary is None:
            raise ValueError("Invalid value for `permissions_boundary`, must not be `None`")

        self._permissions_boundary = permissions_boundary
