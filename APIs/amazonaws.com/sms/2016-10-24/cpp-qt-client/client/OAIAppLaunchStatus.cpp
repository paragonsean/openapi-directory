/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppLaunchStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppLaunchStatus::OAIAppLaunchStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppLaunchStatus::OAIAppLaunchStatus() {
    this->initializeModel();
}

OAIAppLaunchStatus::~OAIAppLaunchStatus() {}

void OAIAppLaunchStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppLaunchStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppLaunchStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("READY_FOR_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::READY_FOR_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::CONFIGURATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION_INVALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::CONFIGURATION_INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_LAUNCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::READY_FOR_LAUNCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::VALIDATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::LAUNCH_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::LAUNCH_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::LAUNCHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTIALLY_LAUNCHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::PARTIALLY_LAUNCHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELTA_LAUNCH_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::DELTA_LAUNCH_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELTA_LAUNCH_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::DELTA_LAUNCH_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::LAUNCH_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATE_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::TERMINATE_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATE_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::TERMINATE_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TERMINATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppLaunchStatus::TERMINATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppLaunchStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppLaunchStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppLaunchStatus::READY_FOR_CONFIGURATION:
            val = "READY_FOR_CONFIGURATION";
            break;
        case eOAIAppLaunchStatus::CONFIGURATION_IN_PROGRESS:
            val = "CONFIGURATION_IN_PROGRESS";
            break;
        case eOAIAppLaunchStatus::CONFIGURATION_INVALID:
            val = "CONFIGURATION_INVALID";
            break;
        case eOAIAppLaunchStatus::READY_FOR_LAUNCH:
            val = "READY_FOR_LAUNCH";
            break;
        case eOAIAppLaunchStatus::VALIDATION_IN_PROGRESS:
            val = "VALIDATION_IN_PROGRESS";
            break;
        case eOAIAppLaunchStatus::LAUNCH_PENDING:
            val = "LAUNCH_PENDING";
            break;
        case eOAIAppLaunchStatus::LAUNCH_IN_PROGRESS:
            val = "LAUNCH_IN_PROGRESS";
            break;
        case eOAIAppLaunchStatus::LAUNCHED:
            val = "LAUNCHED";
            break;
        case eOAIAppLaunchStatus::PARTIALLY_LAUNCHED:
            val = "PARTIALLY_LAUNCHED";
            break;
        case eOAIAppLaunchStatus::DELTA_LAUNCH_IN_PROGRESS:
            val = "DELTA_LAUNCH_IN_PROGRESS";
            break;
        case eOAIAppLaunchStatus::DELTA_LAUNCH_FAILED:
            val = "DELTA_LAUNCH_FAILED";
            break;
        case eOAIAppLaunchStatus::LAUNCH_FAILED:
            val = "LAUNCH_FAILED";
            break;
        case eOAIAppLaunchStatus::TERMINATE_IN_PROGRESS:
            val = "TERMINATE_IN_PROGRESS";
            break;
        case eOAIAppLaunchStatus::TERMINATE_FAILED:
            val = "TERMINATE_FAILED";
            break;
        case eOAIAppLaunchStatus::TERMINATED:
            val = "TERMINATED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppLaunchStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppLaunchStatus::eOAIAppLaunchStatus OAIAppLaunchStatus::getValue() const {
    return m_value;
}

void OAIAppLaunchStatus::setValue(const OAIAppLaunchStatus::eOAIAppLaunchStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppLaunchStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppLaunchStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
