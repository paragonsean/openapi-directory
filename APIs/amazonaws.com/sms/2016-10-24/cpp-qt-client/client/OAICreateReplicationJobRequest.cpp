/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateReplicationJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateReplicationJobRequest::OAICreateReplicationJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateReplicationJobRequest::OAICreateReplicationJobRequest() {
    this->initializeModel();
}

OAICreateReplicationJobRequest::~OAICreateReplicationJobRequest() {}

void OAICreateReplicationJobRequest::initializeModel() {

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_seed_replication_time_isSet = false;
    m_seed_replication_time_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_run_once_isSet = false;
    m_run_once_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_number_of_recent_amis_to_keep_isSet = false;
    m_number_of_recent_amis_to_keep_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAICreateReplicationJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateReplicationJobRequest::fromJsonObject(QJsonObject json) {

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("serverId")]);
    m_server_id_isSet = !json[QString("serverId")].isNull() && m_server_id_isValid;

    m_seed_replication_time_isValid = ::OpenAPI::fromJsonValue(m_seed_replication_time, json[QString("seedReplicationTime")]);
    m_seed_replication_time_isSet = !json[QString("seedReplicationTime")].isNull() && m_seed_replication_time_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_run_once_isValid = ::OpenAPI::fromJsonValue(m_run_once, json[QString("runOnce")]);
    m_run_once_isSet = !json[QString("runOnce")].isNull() && m_run_once_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("licenseType")]);
    m_license_type_isSet = !json[QString("licenseType")].isNull() && m_license_type_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_number_of_recent_amis_to_keep_isValid = ::OpenAPI::fromJsonValue(m_number_of_recent_amis_to_keep, json[QString("numberOfRecentAmisToKeep")]);
    m_number_of_recent_amis_to_keep_isSet = !json[QString("numberOfRecentAmisToKeep")].isNull() && m_number_of_recent_amis_to_keep_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("encrypted")]);
    m_encrypted_isSet = !json[QString("encrypted")].isNull() && m_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAICreateReplicationJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateReplicationJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_server_id_isSet) {
        obj.insert(QString("serverId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_seed_replication_time_isSet) {
        obj.insert(QString("seedReplicationTime"), ::OpenAPI::toJsonValue(m_seed_replication_time));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_run_once_isSet) {
        obj.insert(QString("runOnce"), ::OpenAPI::toJsonValue(m_run_once));
    }
    if (m_license_type.isSet()) {
        obj.insert(QString("licenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_number_of_recent_amis_to_keep_isSet) {
        obj.insert(QString("numberOfRecentAmisToKeep"), ::OpenAPI::toJsonValue(m_number_of_recent_amis_to_keep));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAICreateReplicationJobRequest::getServerId() const {
    return m_server_id;
}
void OAICreateReplicationJobRequest::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAICreateReplicationJobRequest::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAICreateReplicationJobRequest::is_server_id_Valid() const{
    return m_server_id_isValid;
}

QDateTime OAICreateReplicationJobRequest::getSeedReplicationTime() const {
    return m_seed_replication_time;
}
void OAICreateReplicationJobRequest::setSeedReplicationTime(const QDateTime &seed_replication_time) {
    m_seed_replication_time = seed_replication_time;
    m_seed_replication_time_isSet = true;
}

bool OAICreateReplicationJobRequest::is_seed_replication_time_Set() const{
    return m_seed_replication_time_isSet;
}

bool OAICreateReplicationJobRequest::is_seed_replication_time_Valid() const{
    return m_seed_replication_time_isValid;
}

qint32 OAICreateReplicationJobRequest::getFrequency() const {
    return m_frequency;
}
void OAICreateReplicationJobRequest::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAICreateReplicationJobRequest::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAICreateReplicationJobRequest::is_frequency_Valid() const{
    return m_frequency_isValid;
}

bool OAICreateReplicationJobRequest::getRunOnce() const {
    return m_run_once;
}
void OAICreateReplicationJobRequest::setRunOnce(const bool &run_once) {
    m_run_once = run_once;
    m_run_once_isSet = true;
}

bool OAICreateReplicationJobRequest::is_run_once_Set() const{
    return m_run_once_isSet;
}

bool OAICreateReplicationJobRequest::is_run_once_Valid() const{
    return m_run_once_isValid;
}

OAILicenseType OAICreateReplicationJobRequest::getLicenseType() const {
    return m_license_type;
}
void OAICreateReplicationJobRequest::setLicenseType(const OAILicenseType &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAICreateReplicationJobRequest::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAICreateReplicationJobRequest::is_license_type_Valid() const{
    return m_license_type_isValid;
}

QString OAICreateReplicationJobRequest::getRoleName() const {
    return m_role_name;
}
void OAICreateReplicationJobRequest::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAICreateReplicationJobRequest::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAICreateReplicationJobRequest::is_role_name_Valid() const{
    return m_role_name_isValid;
}

QString OAICreateReplicationJobRequest::getDescription() const {
    return m_description;
}
void OAICreateReplicationJobRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateReplicationJobRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateReplicationJobRequest::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAICreateReplicationJobRequest::getNumberOfRecentAmisToKeep() const {
    return m_number_of_recent_amis_to_keep;
}
void OAICreateReplicationJobRequest::setNumberOfRecentAmisToKeep(const qint32 &number_of_recent_amis_to_keep) {
    m_number_of_recent_amis_to_keep = number_of_recent_amis_to_keep;
    m_number_of_recent_amis_to_keep_isSet = true;
}

bool OAICreateReplicationJobRequest::is_number_of_recent_amis_to_keep_Set() const{
    return m_number_of_recent_amis_to_keep_isSet;
}

bool OAICreateReplicationJobRequest::is_number_of_recent_amis_to_keep_Valid() const{
    return m_number_of_recent_amis_to_keep_isValid;
}

bool OAICreateReplicationJobRequest::getEncrypted() const {
    return m_encrypted;
}
void OAICreateReplicationJobRequest::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAICreateReplicationJobRequest::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAICreateReplicationJobRequest::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAICreateReplicationJobRequest::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAICreateReplicationJobRequest::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAICreateReplicationJobRequest::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAICreateReplicationJobRequest::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAICreateReplicationJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seed_replication_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_once_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_recent_amis_to_keep_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateReplicationJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_server_id_isValid && m_seed_replication_time_isValid && true;
}

} // namespace OpenAPI
