/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutAppLaunchConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutAppLaunchConfigurationRequest::OAIPutAppLaunchConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutAppLaunchConfigurationRequest::OAIPutAppLaunchConfigurationRequest() {
    this->initializeModel();
}

OAIPutAppLaunchConfigurationRequest::~OAIPutAppLaunchConfigurationRequest() {}

void OAIPutAppLaunchConfigurationRequest::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_auto_launch_isSet = false;
    m_auto_launch_isValid = false;

    m_server_group_launch_configurations_isSet = false;
    m_server_group_launch_configurations_isValid = false;
}

void OAIPutAppLaunchConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutAppLaunchConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_auto_launch_isValid = ::OpenAPI::fromJsonValue(m_auto_launch, json[QString("autoLaunch")]);
    m_auto_launch_isSet = !json[QString("autoLaunch")].isNull() && m_auto_launch_isValid;

    m_server_group_launch_configurations_isValid = ::OpenAPI::fromJsonValue(m_server_group_launch_configurations, json[QString("serverGroupLaunchConfigurations")]);
    m_server_group_launch_configurations_isSet = !json[QString("serverGroupLaunchConfigurations")].isNull() && m_server_group_launch_configurations_isValid;
}

QString OAIPutAppLaunchConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutAppLaunchConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_auto_launch_isSet) {
        obj.insert(QString("autoLaunch"), ::OpenAPI::toJsonValue(m_auto_launch));
    }
    if (m_server_group_launch_configurations.isSet()) {
        obj.insert(QString("serverGroupLaunchConfigurations"), ::OpenAPI::toJsonValue(m_server_group_launch_configurations));
    }
    return obj;
}

QString OAIPutAppLaunchConfigurationRequest::getAppId() const {
    return m_app_id;
}
void OAIPutAppLaunchConfigurationRequest::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIPutAppLaunchConfigurationRequest::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIPutAppLaunchConfigurationRequest::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIPutAppLaunchConfigurationRequest::getRoleName() const {
    return m_role_name;
}
void OAIPutAppLaunchConfigurationRequest::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIPutAppLaunchConfigurationRequest::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIPutAppLaunchConfigurationRequest::is_role_name_Valid() const{
    return m_role_name_isValid;
}

bool OAIPutAppLaunchConfigurationRequest::getAutoLaunch() const {
    return m_auto_launch;
}
void OAIPutAppLaunchConfigurationRequest::setAutoLaunch(const bool &auto_launch) {
    m_auto_launch = auto_launch;
    m_auto_launch_isSet = true;
}

bool OAIPutAppLaunchConfigurationRequest::is_auto_launch_Set() const{
    return m_auto_launch_isSet;
}

bool OAIPutAppLaunchConfigurationRequest::is_auto_launch_Valid() const{
    return m_auto_launch_isValid;
}

QList OAIPutAppLaunchConfigurationRequest::getServerGroupLaunchConfigurations() const {
    return m_server_group_launch_configurations;
}
void OAIPutAppLaunchConfigurationRequest::setServerGroupLaunchConfigurations(const QList &server_group_launch_configurations) {
    m_server_group_launch_configurations = server_group_launch_configurations;
    m_server_group_launch_configurations_isSet = true;
}

bool OAIPutAppLaunchConfigurationRequest::is_server_group_launch_configurations_Set() const{
    return m_server_group_launch_configurations_isSet;
}

bool OAIPutAppLaunchConfigurationRequest::is_server_group_launch_configurations_Valid() const{
    return m_server_group_launch_configurations_isValid;
}

bool OAIPutAppLaunchConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_launch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_group_launch_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutAppLaunchConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
