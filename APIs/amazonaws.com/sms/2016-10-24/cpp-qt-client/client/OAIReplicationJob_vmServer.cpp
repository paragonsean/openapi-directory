/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationJob_vmServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationJob_vmServer::OAIReplicationJob_vmServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationJob_vmServer::OAIReplicationJob_vmServer() {
    this->initializeModel();
}

OAIReplicationJob_vmServer::~OAIReplicationJob_vmServer() {}

void OAIReplicationJob_vmServer::initializeModel() {

    m_vm_server_address_isSet = false;
    m_vm_server_address_isValid = false;

    m_vm_name_isSet = false;
    m_vm_name_isValid = false;

    m_vm_manager_name_isSet = false;
    m_vm_manager_name_isValid = false;

    m_vm_manager_type_isSet = false;
    m_vm_manager_type_isValid = false;

    m_vm_path_isSet = false;
    m_vm_path_isValid = false;
}

void OAIReplicationJob_vmServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationJob_vmServer::fromJsonObject(QJsonObject json) {

    m_vm_server_address_isValid = ::OpenAPI::fromJsonValue(m_vm_server_address, json[QString("vmServerAddress")]);
    m_vm_server_address_isSet = !json[QString("vmServerAddress")].isNull() && m_vm_server_address_isValid;

    m_vm_name_isValid = ::OpenAPI::fromJsonValue(m_vm_name, json[QString("vmName")]);
    m_vm_name_isSet = !json[QString("vmName")].isNull() && m_vm_name_isValid;

    m_vm_manager_name_isValid = ::OpenAPI::fromJsonValue(m_vm_manager_name, json[QString("vmManagerName")]);
    m_vm_manager_name_isSet = !json[QString("vmManagerName")].isNull() && m_vm_manager_name_isValid;

    m_vm_manager_type_isValid = ::OpenAPI::fromJsonValue(m_vm_manager_type, json[QString("vmManagerType")]);
    m_vm_manager_type_isSet = !json[QString("vmManagerType")].isNull() && m_vm_manager_type_isValid;

    m_vm_path_isValid = ::OpenAPI::fromJsonValue(m_vm_path, json[QString("vmPath")]);
    m_vm_path_isSet = !json[QString("vmPath")].isNull() && m_vm_path_isValid;
}

QString OAIReplicationJob_vmServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationJob_vmServer::asJsonObject() const {
    QJsonObject obj;
    if (m_vm_server_address.isSet()) {
        obj.insert(QString("vmServerAddress"), ::OpenAPI::toJsonValue(m_vm_server_address));
    }
    if (m_vm_name_isSet) {
        obj.insert(QString("vmName"), ::OpenAPI::toJsonValue(m_vm_name));
    }
    if (m_vm_manager_name_isSet) {
        obj.insert(QString("vmManagerName"), ::OpenAPI::toJsonValue(m_vm_manager_name));
    }
    if (m_vm_manager_type.isSet()) {
        obj.insert(QString("vmManagerType"), ::OpenAPI::toJsonValue(m_vm_manager_type));
    }
    if (m_vm_path_isSet) {
        obj.insert(QString("vmPath"), ::OpenAPI::toJsonValue(m_vm_path));
    }
    return obj;
}

OAIVmServer_vmServerAddress OAIReplicationJob_vmServer::getVmServerAddress() const {
    return m_vm_server_address;
}
void OAIReplicationJob_vmServer::setVmServerAddress(const OAIVmServer_vmServerAddress &vm_server_address) {
    m_vm_server_address = vm_server_address;
    m_vm_server_address_isSet = true;
}

bool OAIReplicationJob_vmServer::is_vm_server_address_Set() const{
    return m_vm_server_address_isSet;
}

bool OAIReplicationJob_vmServer::is_vm_server_address_Valid() const{
    return m_vm_server_address_isValid;
}

QString OAIReplicationJob_vmServer::getVmName() const {
    return m_vm_name;
}
void OAIReplicationJob_vmServer::setVmName(const QString &vm_name) {
    m_vm_name = vm_name;
    m_vm_name_isSet = true;
}

bool OAIReplicationJob_vmServer::is_vm_name_Set() const{
    return m_vm_name_isSet;
}

bool OAIReplicationJob_vmServer::is_vm_name_Valid() const{
    return m_vm_name_isValid;
}

QString OAIReplicationJob_vmServer::getVmManagerName() const {
    return m_vm_manager_name;
}
void OAIReplicationJob_vmServer::setVmManagerName(const QString &vm_manager_name) {
    m_vm_manager_name = vm_manager_name;
    m_vm_manager_name_isSet = true;
}

bool OAIReplicationJob_vmServer::is_vm_manager_name_Set() const{
    return m_vm_manager_name_isSet;
}

bool OAIReplicationJob_vmServer::is_vm_manager_name_Valid() const{
    return m_vm_manager_name_isValid;
}

OAIVmManagerType OAIReplicationJob_vmServer::getVmManagerType() const {
    return m_vm_manager_type;
}
void OAIReplicationJob_vmServer::setVmManagerType(const OAIVmManagerType &vm_manager_type) {
    m_vm_manager_type = vm_manager_type;
    m_vm_manager_type_isSet = true;
}

bool OAIReplicationJob_vmServer::is_vm_manager_type_Set() const{
    return m_vm_manager_type_isSet;
}

bool OAIReplicationJob_vmServer::is_vm_manager_type_Valid() const{
    return m_vm_manager_type_isValid;
}

QString OAIReplicationJob_vmServer::getVmPath() const {
    return m_vm_path;
}
void OAIReplicationJob_vmServer::setVmPath(const QString &vm_path) {
    m_vm_path = vm_path;
    m_vm_path_isSet = true;
}

bool OAIReplicationJob_vmServer::is_vm_path_Set() const{
    return m_vm_path_isSet;
}

bool OAIReplicationJob_vmServer::is_vm_path_Valid() const{
    return m_vm_path_isValid;
}

bool OAIReplicationJob_vmServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vm_server_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_manager_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_manager_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationJob_vmServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
