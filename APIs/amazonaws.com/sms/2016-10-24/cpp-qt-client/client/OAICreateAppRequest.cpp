/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppRequest::OAICreateAppRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppRequest::OAICreateAppRequest() {
    this->initializeModel();
}

OAICreateAppRequest::~OAICreateAppRequest() {}

void OAICreateAppRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_server_groups_isSet = false;
    m_server_groups_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAppRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_server_groups_isValid = ::OpenAPI::fromJsonValue(m_server_groups, json[QString("serverGroups")]);
    m_server_groups_isSet = !json[QString("serverGroups")].isNull() && m_server_groups_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateAppRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_server_groups.isSet()) {
        obj.insert(QString("serverGroups"), ::OpenAPI::toJsonValue(m_server_groups));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAppRequest::getName() const {
    return m_name;
}
void OAICreateAppRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAppRequest::getDescription() const {
    return m_description;
}
void OAICreateAppRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAppRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAppRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateAppRequest::getRoleName() const {
    return m_role_name;
}
void OAICreateAppRequest::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAICreateAppRequest::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAICreateAppRequest::is_role_name_Valid() const{
    return m_role_name_isValid;
}

QString OAICreateAppRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateAppRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateAppRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateAppRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateAppRequest::getServerGroups() const {
    return m_server_groups;
}
void OAICreateAppRequest::setServerGroups(const QList &server_groups) {
    m_server_groups = server_groups;
    m_server_groups_isSet = true;
}

bool OAICreateAppRequest::is_server_groups_Set() const{
    return m_server_groups_isSet;
}

bool OAICreateAppRequest::is_server_groups_Valid() const{
    return m_server_groups_isValid;
}

QList OAICreateAppRequest::getTags() const {
    return m_tags;
}
void OAICreateAppRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAppRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
