/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerCatalogStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerCatalogStatus::OAIServerCatalogStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerCatalogStatus::OAIServerCatalogStatus() {
    this->initializeModel();
}

OAIServerCatalogStatus::~OAIServerCatalogStatus() {}

void OAIServerCatalogStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIServerCatalogStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIServerCatalogStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NOT_IMPORTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServerCatalogStatus::NOT_IMPORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IMPORTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServerCatalogStatus::IMPORTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServerCatalogStatus::AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServerCatalogStatus::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServerCatalogStatus::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIServerCatalogStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIServerCatalogStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIServerCatalogStatus::NOT_IMPORTED:
            val = "NOT_IMPORTED";
            break;
        case eOAIServerCatalogStatus::IMPORTING:
            val = "IMPORTING";
            break;
        case eOAIServerCatalogStatus::AVAILABLE:
            val = "AVAILABLE";
            break;
        case eOAIServerCatalogStatus::DELETED:
            val = "DELETED";
            break;
        case eOAIServerCatalogStatus::EXPIRED:
            val = "EXPIRED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIServerCatalogStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIServerCatalogStatus::eOAIServerCatalogStatus OAIServerCatalogStatus::getValue() const {
    return m_value;
}

void OAIServerCatalogStatus::setValue(const OAIServerCatalogStatus::eOAIServerCatalogStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIServerCatalogStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIServerCatalogStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
