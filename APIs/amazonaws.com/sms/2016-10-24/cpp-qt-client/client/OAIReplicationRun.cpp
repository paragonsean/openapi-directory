/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationRun::OAIReplicationRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationRun::OAIReplicationRun() {
    this->initializeModel();
}

OAIReplicationRun::~OAIReplicationRun() {}

void OAIReplicationRun::initializeModel() {

    m_replication_run_id_isSet = false;
    m_replication_run_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_stage_details_isSet = false;
    m_stage_details_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_ami_id_isSet = false;
    m_ami_id_isValid = false;

    m_scheduled_start_time_isSet = false;
    m_scheduled_start_time_isValid = false;

    m_completed_time_isSet = false;
    m_completed_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_kms_key_id_isSet = false;
    m_kms_key_id_isValid = false;
}

void OAIReplicationRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationRun::fromJsonObject(QJsonObject json) {

    m_replication_run_id_isValid = ::OpenAPI::fromJsonValue(m_replication_run_id, json[QString("replicationRunId")]);
    m_replication_run_id_isSet = !json[QString("replicationRunId")].isNull() && m_replication_run_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_stage_details_isValid = ::OpenAPI::fromJsonValue(m_stage_details, json[QString("stageDetails")]);
    m_stage_details_isSet = !json[QString("stageDetails")].isNull() && m_stage_details_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_ami_id_isValid = ::OpenAPI::fromJsonValue(m_ami_id, json[QString("amiId")]);
    m_ami_id_isSet = !json[QString("amiId")].isNull() && m_ami_id_isValid;

    m_scheduled_start_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_start_time, json[QString("scheduledStartTime")]);
    m_scheduled_start_time_isSet = !json[QString("scheduledStartTime")].isNull() && m_scheduled_start_time_isValid;

    m_completed_time_isValid = ::OpenAPI::fromJsonValue(m_completed_time, json[QString("completedTime")]);
    m_completed_time_isSet = !json[QString("completedTime")].isNull() && m_completed_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("encrypted")]);
    m_encrypted_isSet = !json[QString("encrypted")].isNull() && m_encrypted_isValid;

    m_kms_key_id_isValid = ::OpenAPI::fromJsonValue(m_kms_key_id, json[QString("kmsKeyId")]);
    m_kms_key_id_isSet = !json[QString("kmsKeyId")].isNull() && m_kms_key_id_isValid;
}

QString OAIReplicationRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationRun::asJsonObject() const {
    QJsonObject obj;
    if (m_replication_run_id_isSet) {
        obj.insert(QString("replicationRunId"), ::OpenAPI::toJsonValue(m_replication_run_id));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_stage_details.isSet()) {
        obj.insert(QString("stageDetails"), ::OpenAPI::toJsonValue(m_stage_details));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_ami_id_isSet) {
        obj.insert(QString("amiId"), ::OpenAPI::toJsonValue(m_ami_id));
    }
    if (m_scheduled_start_time_isSet) {
        obj.insert(QString("scheduledStartTime"), ::OpenAPI::toJsonValue(m_scheduled_start_time));
    }
    if (m_completed_time_isSet) {
        obj.insert(QString("completedTime"), ::OpenAPI::toJsonValue(m_completed_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encrypted_isSet) {
        obj.insert(QString("encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_kms_key_id_isSet) {
        obj.insert(QString("kmsKeyId"), ::OpenAPI::toJsonValue(m_kms_key_id));
    }
    return obj;
}

QString OAIReplicationRun::getReplicationRunId() const {
    return m_replication_run_id;
}
void OAIReplicationRun::setReplicationRunId(const QString &replication_run_id) {
    m_replication_run_id = replication_run_id;
    m_replication_run_id_isSet = true;
}

bool OAIReplicationRun::is_replication_run_id_Set() const{
    return m_replication_run_id_isSet;
}

bool OAIReplicationRun::is_replication_run_id_Valid() const{
    return m_replication_run_id_isValid;
}

OAIReplicationRunState OAIReplicationRun::getState() const {
    return m_state;
}
void OAIReplicationRun::setState(const OAIReplicationRunState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIReplicationRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIReplicationRun::is_state_Valid() const{
    return m_state_isValid;
}

OAIReplicationRunType OAIReplicationRun::getType() const {
    return m_type;
}
void OAIReplicationRun::setType(const OAIReplicationRunType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReplicationRun::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReplicationRun::is_type_Valid() const{
    return m_type_isValid;
}

OAIReplicationRun_stageDetails OAIReplicationRun::getStageDetails() const {
    return m_stage_details;
}
void OAIReplicationRun::setStageDetails(const OAIReplicationRun_stageDetails &stage_details) {
    m_stage_details = stage_details;
    m_stage_details_isSet = true;
}

bool OAIReplicationRun::is_stage_details_Set() const{
    return m_stage_details_isSet;
}

bool OAIReplicationRun::is_stage_details_Valid() const{
    return m_stage_details_isValid;
}

QString OAIReplicationRun::getStatusMessage() const {
    return m_status_message;
}
void OAIReplicationRun::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIReplicationRun::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIReplicationRun::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIReplicationRun::getAmiId() const {
    return m_ami_id;
}
void OAIReplicationRun::setAmiId(const QString &ami_id) {
    m_ami_id = ami_id;
    m_ami_id_isSet = true;
}

bool OAIReplicationRun::is_ami_id_Set() const{
    return m_ami_id_isSet;
}

bool OAIReplicationRun::is_ami_id_Valid() const{
    return m_ami_id_isValid;
}

QDateTime OAIReplicationRun::getScheduledStartTime() const {
    return m_scheduled_start_time;
}
void OAIReplicationRun::setScheduledStartTime(const QDateTime &scheduled_start_time) {
    m_scheduled_start_time = scheduled_start_time;
    m_scheduled_start_time_isSet = true;
}

bool OAIReplicationRun::is_scheduled_start_time_Set() const{
    return m_scheduled_start_time_isSet;
}

bool OAIReplicationRun::is_scheduled_start_time_Valid() const{
    return m_scheduled_start_time_isValid;
}

QDateTime OAIReplicationRun::getCompletedTime() const {
    return m_completed_time;
}
void OAIReplicationRun::setCompletedTime(const QDateTime &completed_time) {
    m_completed_time = completed_time;
    m_completed_time_isSet = true;
}

bool OAIReplicationRun::is_completed_time_Set() const{
    return m_completed_time_isSet;
}

bool OAIReplicationRun::is_completed_time_Valid() const{
    return m_completed_time_isValid;
}

QString OAIReplicationRun::getDescription() const {
    return m_description;
}
void OAIReplicationRun::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReplicationRun::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReplicationRun::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIReplicationRun::getEncrypted() const {
    return m_encrypted;
}
void OAIReplicationRun::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIReplicationRun::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIReplicationRun::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAIReplicationRun::getKmsKeyId() const {
    return m_kms_key_id;
}
void OAIReplicationRun::setKmsKeyId(const QString &kms_key_id) {
    m_kms_key_id = kms_key_id;
    m_kms_key_id_isSet = true;
}

bool OAIReplicationRun::is_kms_key_id_Set() const{
    return m_kms_key_id_isSet;
}

bool OAIReplicationRun::is_kms_key_id_Valid() const{
    return m_kms_key_id_isValid;
}

bool OAIReplicationRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replication_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ami_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
