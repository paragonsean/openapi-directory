/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppSummary::OAIAppSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppSummary::OAIAppSummary() {
    this->initializeModel();
}

OAIAppSummary::~OAIAppSummary() {}

void OAIAppSummary::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_imported_app_id_isSet = false;
    m_imported_app_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_replication_configuration_status_isSet = false;
    m_replication_configuration_status_isValid = false;

    m_replication_status_isSet = false;
    m_replication_status_isValid = false;

    m_replication_status_message_isSet = false;
    m_replication_status_message_isValid = false;

    m_latest_replication_time_isSet = false;
    m_latest_replication_time_isValid = false;

    m_launch_configuration_status_isSet = false;
    m_launch_configuration_status_isValid = false;

    m_launch_status_isSet = false;
    m_launch_status_isValid = false;

    m_launch_status_message_isSet = false;
    m_launch_status_message_isValid = false;

    m_launch_details_isSet = false;
    m_launch_details_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_total_server_groups_isSet = false;
    m_total_server_groups_isValid = false;

    m_total_servers_isSet = false;
    m_total_servers_isValid = false;
}

void OAIAppSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppSummary::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_imported_app_id_isValid = ::OpenAPI::fromJsonValue(m_imported_app_id, json[QString("importedAppId")]);
    m_imported_app_id_isSet = !json[QString("importedAppId")].isNull() && m_imported_app_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_replication_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_replication_configuration_status, json[QString("replicationConfigurationStatus")]);
    m_replication_configuration_status_isSet = !json[QString("replicationConfigurationStatus")].isNull() && m_replication_configuration_status_isValid;

    m_replication_status_isValid = ::OpenAPI::fromJsonValue(m_replication_status, json[QString("replicationStatus")]);
    m_replication_status_isSet = !json[QString("replicationStatus")].isNull() && m_replication_status_isValid;

    m_replication_status_message_isValid = ::OpenAPI::fromJsonValue(m_replication_status_message, json[QString("replicationStatusMessage")]);
    m_replication_status_message_isSet = !json[QString("replicationStatusMessage")].isNull() && m_replication_status_message_isValid;

    m_latest_replication_time_isValid = ::OpenAPI::fromJsonValue(m_latest_replication_time, json[QString("latestReplicationTime")]);
    m_latest_replication_time_isSet = !json[QString("latestReplicationTime")].isNull() && m_latest_replication_time_isValid;

    m_launch_configuration_status_isValid = ::OpenAPI::fromJsonValue(m_launch_configuration_status, json[QString("launchConfigurationStatus")]);
    m_launch_configuration_status_isSet = !json[QString("launchConfigurationStatus")].isNull() && m_launch_configuration_status_isValid;

    m_launch_status_isValid = ::OpenAPI::fromJsonValue(m_launch_status, json[QString("launchStatus")]);
    m_launch_status_isSet = !json[QString("launchStatus")].isNull() && m_launch_status_isValid;

    m_launch_status_message_isValid = ::OpenAPI::fromJsonValue(m_launch_status_message, json[QString("launchStatusMessage")]);
    m_launch_status_message_isSet = !json[QString("launchStatusMessage")].isNull() && m_launch_status_message_isValid;

    m_launch_details_isValid = ::OpenAPI::fromJsonValue(m_launch_details, json[QString("launchDetails")]);
    m_launch_details_isSet = !json[QString("launchDetails")].isNull() && m_launch_details_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("lastModified")]);
    m_last_modified_isSet = !json[QString("lastModified")].isNull() && m_last_modified_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_total_server_groups_isValid = ::OpenAPI::fromJsonValue(m_total_server_groups, json[QString("totalServerGroups")]);
    m_total_server_groups_isSet = !json[QString("totalServerGroups")].isNull() && m_total_server_groups_isValid;

    m_total_servers_isValid = ::OpenAPI::fromJsonValue(m_total_servers, json[QString("totalServers")]);
    m_total_servers_isSet = !json[QString("totalServers")].isNull() && m_total_servers_isValid;
}

QString OAIAppSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_imported_app_id_isSet) {
        obj.insert(QString("importedAppId"), ::OpenAPI::toJsonValue(m_imported_app_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_replication_configuration_status.isSet()) {
        obj.insert(QString("replicationConfigurationStatus"), ::OpenAPI::toJsonValue(m_replication_configuration_status));
    }
    if (m_replication_status.isSet()) {
        obj.insert(QString("replicationStatus"), ::OpenAPI::toJsonValue(m_replication_status));
    }
    if (m_replication_status_message_isSet) {
        obj.insert(QString("replicationStatusMessage"), ::OpenAPI::toJsonValue(m_replication_status_message));
    }
    if (m_latest_replication_time_isSet) {
        obj.insert(QString("latestReplicationTime"), ::OpenAPI::toJsonValue(m_latest_replication_time));
    }
    if (m_launch_configuration_status.isSet()) {
        obj.insert(QString("launchConfigurationStatus"), ::OpenAPI::toJsonValue(m_launch_configuration_status));
    }
    if (m_launch_status.isSet()) {
        obj.insert(QString("launchStatus"), ::OpenAPI::toJsonValue(m_launch_status));
    }
    if (m_launch_status_message_isSet) {
        obj.insert(QString("launchStatusMessage"), ::OpenAPI::toJsonValue(m_launch_status_message));
    }
    if (m_launch_details.isSet()) {
        obj.insert(QString("launchDetails"), ::OpenAPI::toJsonValue(m_launch_details));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("lastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_total_server_groups_isSet) {
        obj.insert(QString("totalServerGroups"), ::OpenAPI::toJsonValue(m_total_server_groups));
    }
    if (m_total_servers_isSet) {
        obj.insert(QString("totalServers"), ::OpenAPI::toJsonValue(m_total_servers));
    }
    return obj;
}

QString OAIAppSummary::getAppId() const {
    return m_app_id;
}
void OAIAppSummary::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIAppSummary::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIAppSummary::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIAppSummary::getImportedAppId() const {
    return m_imported_app_id;
}
void OAIAppSummary::setImportedAppId(const QString &imported_app_id) {
    m_imported_app_id = imported_app_id;
    m_imported_app_id_isSet = true;
}

bool OAIAppSummary::is_imported_app_id_Set() const{
    return m_imported_app_id_isSet;
}

bool OAIAppSummary::is_imported_app_id_Valid() const{
    return m_imported_app_id_isValid;
}

QString OAIAppSummary::getName() const {
    return m_name;
}
void OAIAppSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAppSummary::getDescription() const {
    return m_description;
}
void OAIAppSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAppSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAppSummary::is_description_Valid() const{
    return m_description_isValid;
}

OAIAppStatus OAIAppSummary::getStatus() const {
    return m_status;
}
void OAIAppSummary::setStatus(const OAIAppStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAppSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAppSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAppSummary::getStatusMessage() const {
    return m_status_message;
}
void OAIAppSummary::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIAppSummary::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIAppSummary::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIAppReplicationConfigurationStatus OAIAppSummary::getReplicationConfigurationStatus() const {
    return m_replication_configuration_status;
}
void OAIAppSummary::setReplicationConfigurationStatus(const OAIAppReplicationConfigurationStatus &replication_configuration_status) {
    m_replication_configuration_status = replication_configuration_status;
    m_replication_configuration_status_isSet = true;
}

bool OAIAppSummary::is_replication_configuration_status_Set() const{
    return m_replication_configuration_status_isSet;
}

bool OAIAppSummary::is_replication_configuration_status_Valid() const{
    return m_replication_configuration_status_isValid;
}

OAIAppReplicationStatus OAIAppSummary::getReplicationStatus() const {
    return m_replication_status;
}
void OAIAppSummary::setReplicationStatus(const OAIAppReplicationStatus &replication_status) {
    m_replication_status = replication_status;
    m_replication_status_isSet = true;
}

bool OAIAppSummary::is_replication_status_Set() const{
    return m_replication_status_isSet;
}

bool OAIAppSummary::is_replication_status_Valid() const{
    return m_replication_status_isValid;
}

QString OAIAppSummary::getReplicationStatusMessage() const {
    return m_replication_status_message;
}
void OAIAppSummary::setReplicationStatusMessage(const QString &replication_status_message) {
    m_replication_status_message = replication_status_message;
    m_replication_status_message_isSet = true;
}

bool OAIAppSummary::is_replication_status_message_Set() const{
    return m_replication_status_message_isSet;
}

bool OAIAppSummary::is_replication_status_message_Valid() const{
    return m_replication_status_message_isValid;
}

QDateTime OAIAppSummary::getLatestReplicationTime() const {
    return m_latest_replication_time;
}
void OAIAppSummary::setLatestReplicationTime(const QDateTime &latest_replication_time) {
    m_latest_replication_time = latest_replication_time;
    m_latest_replication_time_isSet = true;
}

bool OAIAppSummary::is_latest_replication_time_Set() const{
    return m_latest_replication_time_isSet;
}

bool OAIAppSummary::is_latest_replication_time_Valid() const{
    return m_latest_replication_time_isValid;
}

OAIAppLaunchConfigurationStatus OAIAppSummary::getLaunchConfigurationStatus() const {
    return m_launch_configuration_status;
}
void OAIAppSummary::setLaunchConfigurationStatus(const OAIAppLaunchConfigurationStatus &launch_configuration_status) {
    m_launch_configuration_status = launch_configuration_status;
    m_launch_configuration_status_isSet = true;
}

bool OAIAppSummary::is_launch_configuration_status_Set() const{
    return m_launch_configuration_status_isSet;
}

bool OAIAppSummary::is_launch_configuration_status_Valid() const{
    return m_launch_configuration_status_isValid;
}

OAIAppLaunchStatus OAIAppSummary::getLaunchStatus() const {
    return m_launch_status;
}
void OAIAppSummary::setLaunchStatus(const OAIAppLaunchStatus &launch_status) {
    m_launch_status = launch_status;
    m_launch_status_isSet = true;
}

bool OAIAppSummary::is_launch_status_Set() const{
    return m_launch_status_isSet;
}

bool OAIAppSummary::is_launch_status_Valid() const{
    return m_launch_status_isValid;
}

QString OAIAppSummary::getLaunchStatusMessage() const {
    return m_launch_status_message;
}
void OAIAppSummary::setLaunchStatusMessage(const QString &launch_status_message) {
    m_launch_status_message = launch_status_message;
    m_launch_status_message_isSet = true;
}

bool OAIAppSummary::is_launch_status_message_Set() const{
    return m_launch_status_message_isSet;
}

bool OAIAppSummary::is_launch_status_message_Valid() const{
    return m_launch_status_message_isValid;
}

OAIAppSummary_launchDetails OAIAppSummary::getLaunchDetails() const {
    return m_launch_details;
}
void OAIAppSummary::setLaunchDetails(const OAIAppSummary_launchDetails &launch_details) {
    m_launch_details = launch_details;
    m_launch_details_isSet = true;
}

bool OAIAppSummary::is_launch_details_Set() const{
    return m_launch_details_isSet;
}

bool OAIAppSummary::is_launch_details_Valid() const{
    return m_launch_details_isValid;
}

QDateTime OAIAppSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIAppSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAppSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAppSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIAppSummary::getLastModified() const {
    return m_last_modified;
}
void OAIAppSummary::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIAppSummary::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIAppSummary::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAIAppSummary::getRoleName() const {
    return m_role_name;
}
void OAIAppSummary::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIAppSummary::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIAppSummary::is_role_name_Valid() const{
    return m_role_name_isValid;
}

qint32 OAIAppSummary::getTotalServerGroups() const {
    return m_total_server_groups;
}
void OAIAppSummary::setTotalServerGroups(const qint32 &total_server_groups) {
    m_total_server_groups = total_server_groups;
    m_total_server_groups_isSet = true;
}

bool OAIAppSummary::is_total_server_groups_Set() const{
    return m_total_server_groups_isSet;
}

bool OAIAppSummary::is_total_server_groups_Valid() const{
    return m_total_server_groups_isValid;
}

qint32 OAIAppSummary::getTotalServers() const {
    return m_total_servers;
}
void OAIAppSummary::setTotalServers(const qint32 &total_servers) {
    m_total_servers = total_servers;
    m_total_servers_isSet = true;
}

bool OAIAppSummary::is_total_servers_Set() const{
    return m_total_servers_isSet;
}

bool OAIAppSummary::is_total_servers_Valid() const{
    return m_total_servers_isValid;
}

bool OAIAppSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imported_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_replication_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_configuration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_server_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_servers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
