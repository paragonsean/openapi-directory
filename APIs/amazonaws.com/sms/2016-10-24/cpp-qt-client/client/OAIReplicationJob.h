/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplicationJob.h
 *
 * Represents a replication job.
 */

#ifndef OAIReplicationJob_H
#define OAIReplicationJob_H

#include <QJsonObject>

#include "OAILicenseType.h"
#include "OAIReplicationJobState.h"
#include "OAIReplicationJob_vmServer.h"
#include "OAIServerType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReplicationJob_vmServer;

class OAIReplicationJob : public OAIObject {
public:
    OAIReplicationJob();
    OAIReplicationJob(QString json);
    ~OAIReplicationJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReplicationJobId() const;
    void setReplicationJobId(const QString &replication_job_id);
    bool is_replication_job_id_Set() const;
    bool is_replication_job_id_Valid() const;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    OAIServerType getServerType() const;
    void setServerType(const OAIServerType &server_type);
    bool is_server_type_Set() const;
    bool is_server_type_Valid() const;

    OAIReplicationJob_vmServer getVmServer() const;
    void setVmServer(const OAIReplicationJob_vmServer &vm_server);
    bool is_vm_server_Set() const;
    bool is_vm_server_Valid() const;

    QDateTime getSeedReplicationTime() const;
    void setSeedReplicationTime(const QDateTime &seed_replication_time);
    bool is_seed_replication_time_Set() const;
    bool is_seed_replication_time_Valid() const;

    qint32 getFrequency() const;
    void setFrequency(const qint32 &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    bool getRunOnce() const;
    void setRunOnce(const bool &run_once);
    bool is_run_once_Set() const;
    bool is_run_once_Valid() const;

    QDateTime getNextReplicationRunStartTime() const;
    void setNextReplicationRunStartTime(const QDateTime &next_replication_run_start_time);
    bool is_next_replication_run_start_time_Set() const;
    bool is_next_replication_run_start_time_Valid() const;

    OAILicenseType getLicenseType() const;
    void setLicenseType(const OAILicenseType &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    QString getRoleName() const;
    void setRoleName(const QString &role_name);
    bool is_role_name_Set() const;
    bool is_role_name_Valid() const;

    QString getLatestAmiId() const;
    void setLatestAmiId(const QString &latest_ami_id);
    bool is_latest_ami_id_Set() const;
    bool is_latest_ami_id_Valid() const;

    OAIReplicationJobState getState() const;
    void setState(const OAIReplicationJobState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getNumberOfRecentAmisToKeep() const;
    void setNumberOfRecentAmisToKeep(const qint32 &number_of_recent_amis_to_keep);
    bool is_number_of_recent_amis_to_keep_Set() const;
    bool is_number_of_recent_amis_to_keep_Valid() const;

    bool getEncrypted() const;
    void setEncrypted(const bool &encrypted);
    bool is_encrypted_Set() const;
    bool is_encrypted_Valid() const;

    QString getKmsKeyId() const;
    void setKmsKeyId(const QString &kms_key_id);
    bool is_kms_key_id_Set() const;
    bool is_kms_key_id_Valid() const;

    QList getReplicationRunList() const;
    void setReplicationRunList(const QList &replication_run_list);
    bool is_replication_run_list_Set() const;
    bool is_replication_run_list_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_replication_job_id;
    bool m_replication_job_id_isSet;
    bool m_replication_job_id_isValid;

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    OAIServerType m_server_type;
    bool m_server_type_isSet;
    bool m_server_type_isValid;

    OAIReplicationJob_vmServer m_vm_server;
    bool m_vm_server_isSet;
    bool m_vm_server_isValid;

    QDateTime m_seed_replication_time;
    bool m_seed_replication_time_isSet;
    bool m_seed_replication_time_isValid;

    qint32 m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    bool m_run_once;
    bool m_run_once_isSet;
    bool m_run_once_isValid;

    QDateTime m_next_replication_run_start_time;
    bool m_next_replication_run_start_time_isSet;
    bool m_next_replication_run_start_time_isValid;

    OAILicenseType m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    QString m_role_name;
    bool m_role_name_isSet;
    bool m_role_name_isValid;

    QString m_latest_ami_id;
    bool m_latest_ami_id_isSet;
    bool m_latest_ami_id_isValid;

    OAIReplicationJobState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_number_of_recent_amis_to_keep;
    bool m_number_of_recent_amis_to_keep_isSet;
    bool m_number_of_recent_amis_to_keep_isValid;

    bool m_encrypted;
    bool m_encrypted_isSet;
    bool m_encrypted_isValid;

    QString m_kms_key_id;
    bool m_kms_key_id_isSet;
    bool m_kms_key_id_isValid;

    QList m_replication_run_list;
    bool m_replication_run_list_isSet;
    bool m_replication_run_list_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplicationJob)

#endif // OAIReplicationJob_H
