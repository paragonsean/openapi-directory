/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnector::OAIConnector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnector::OAIConnector() {
    this->initializeModel();
}

OAIConnector::~OAIConnector() {}

void OAIConnector::initializeModel() {

    m_connector_id_isSet = false;
    m_connector_id_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_capability_list_isSet = false;
    m_capability_list_isValid = false;

    m_vm_manager_name_isSet = false;
    m_vm_manager_name_isValid = false;

    m_vm_manager_type_isSet = false;
    m_vm_manager_type_isValid = false;

    m_vm_manager_id_isSet = false;
    m_vm_manager_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_associated_on_isSet = false;
    m_associated_on_isValid = false;
}

void OAIConnector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnector::fromJsonObject(QJsonObject json) {

    m_connector_id_isValid = ::OpenAPI::fromJsonValue(m_connector_id, json[QString("connectorId")]);
    m_connector_id_isSet = !json[QString("connectorId")].isNull() && m_connector_id_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_capability_list_isValid = ::OpenAPI::fromJsonValue(m_capability_list, json[QString("capabilityList")]);
    m_capability_list_isSet = !json[QString("capabilityList")].isNull() && m_capability_list_isValid;

    m_vm_manager_name_isValid = ::OpenAPI::fromJsonValue(m_vm_manager_name, json[QString("vmManagerName")]);
    m_vm_manager_name_isSet = !json[QString("vmManagerName")].isNull() && m_vm_manager_name_isValid;

    m_vm_manager_type_isValid = ::OpenAPI::fromJsonValue(m_vm_manager_type, json[QString("vmManagerType")]);
    m_vm_manager_type_isSet = !json[QString("vmManagerType")].isNull() && m_vm_manager_type_isValid;

    m_vm_manager_id_isValid = ::OpenAPI::fromJsonValue(m_vm_manager_id, json[QString("vmManagerId")]);
    m_vm_manager_id_isSet = !json[QString("vmManagerId")].isNull() && m_vm_manager_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_associated_on_isValid = ::OpenAPI::fromJsonValue(m_associated_on, json[QString("associatedOn")]);
    m_associated_on_isSet = !json[QString("associatedOn")].isNull() && m_associated_on_isValid;
}

QString OAIConnector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnector::asJsonObject() const {
    QJsonObject obj;
    if (m_connector_id_isSet) {
        obj.insert(QString("connectorId"), ::OpenAPI::toJsonValue(m_connector_id));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_capability_list.isSet()) {
        obj.insert(QString("capabilityList"), ::OpenAPI::toJsonValue(m_capability_list));
    }
    if (m_vm_manager_name_isSet) {
        obj.insert(QString("vmManagerName"), ::OpenAPI::toJsonValue(m_vm_manager_name));
    }
    if (m_vm_manager_type.isSet()) {
        obj.insert(QString("vmManagerType"), ::OpenAPI::toJsonValue(m_vm_manager_type));
    }
    if (m_vm_manager_id_isSet) {
        obj.insert(QString("vmManagerId"), ::OpenAPI::toJsonValue(m_vm_manager_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_associated_on_isSet) {
        obj.insert(QString("associatedOn"), ::OpenAPI::toJsonValue(m_associated_on));
    }
    return obj;
}

QString OAIConnector::getConnectorId() const {
    return m_connector_id;
}
void OAIConnector::setConnectorId(const QString &connector_id) {
    m_connector_id = connector_id;
    m_connector_id_isSet = true;
}

bool OAIConnector::is_connector_id_Set() const{
    return m_connector_id_isSet;
}

bool OAIConnector::is_connector_id_Valid() const{
    return m_connector_id_isValid;
}

QString OAIConnector::getVersion() const {
    return m_version;
}
void OAIConnector::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConnector::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConnector::is_version_Valid() const{
    return m_version_isValid;
}

OAIConnectorStatus OAIConnector::getStatus() const {
    return m_status;
}
void OAIConnector::setStatus(const OAIConnectorStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConnector::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConnector::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIConnector::getCapabilityList() const {
    return m_capability_list;
}
void OAIConnector::setCapabilityList(const QList &capability_list) {
    m_capability_list = capability_list;
    m_capability_list_isSet = true;
}

bool OAIConnector::is_capability_list_Set() const{
    return m_capability_list_isSet;
}

bool OAIConnector::is_capability_list_Valid() const{
    return m_capability_list_isValid;
}

QString OAIConnector::getVmManagerName() const {
    return m_vm_manager_name;
}
void OAIConnector::setVmManagerName(const QString &vm_manager_name) {
    m_vm_manager_name = vm_manager_name;
    m_vm_manager_name_isSet = true;
}

bool OAIConnector::is_vm_manager_name_Set() const{
    return m_vm_manager_name_isSet;
}

bool OAIConnector::is_vm_manager_name_Valid() const{
    return m_vm_manager_name_isValid;
}

OAIVmManagerType OAIConnector::getVmManagerType() const {
    return m_vm_manager_type;
}
void OAIConnector::setVmManagerType(const OAIVmManagerType &vm_manager_type) {
    m_vm_manager_type = vm_manager_type;
    m_vm_manager_type_isSet = true;
}

bool OAIConnector::is_vm_manager_type_Set() const{
    return m_vm_manager_type_isSet;
}

bool OAIConnector::is_vm_manager_type_Valid() const{
    return m_vm_manager_type_isValid;
}

QString OAIConnector::getVmManagerId() const {
    return m_vm_manager_id;
}
void OAIConnector::setVmManagerId(const QString &vm_manager_id) {
    m_vm_manager_id = vm_manager_id;
    m_vm_manager_id_isSet = true;
}

bool OAIConnector::is_vm_manager_id_Set() const{
    return m_vm_manager_id_isSet;
}

bool OAIConnector::is_vm_manager_id_Valid() const{
    return m_vm_manager_id_isValid;
}

QString OAIConnector::getIpAddress() const {
    return m_ip_address;
}
void OAIConnector::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIConnector::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIConnector::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIConnector::getMacAddress() const {
    return m_mac_address;
}
void OAIConnector::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIConnector::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIConnector::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QDateTime OAIConnector::getAssociatedOn() const {
    return m_associated_on;
}
void OAIConnector::setAssociatedOn(const QDateTime &associated_on) {
    m_associated_on = associated_on;
    m_associated_on_isSet = true;
}

bool OAIConnector::is_associated_on_Set() const{
    return m_associated_on_isSet;
}

bool OAIConnector::is_associated_on_Valid() const{
    return m_associated_on_isValid;
}

bool OAIConnector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capability_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_manager_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_manager_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_manager_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_on_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
