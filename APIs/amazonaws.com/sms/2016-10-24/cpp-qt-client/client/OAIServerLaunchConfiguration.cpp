/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerLaunchConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerLaunchConfiguration::OAIServerLaunchConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerLaunchConfiguration::OAIServerLaunchConfiguration() {
    this->initializeModel();
}

OAIServerLaunchConfiguration::~OAIServerLaunchConfiguration() {}

void OAIServerLaunchConfiguration::initializeModel() {

    m_server_isSet = false;
    m_server_isValid = false;

    m_logical_id_isSet = false;
    m_logical_id_isValid = false;

    m_vpc_isSet = false;
    m_vpc_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;

    m_security_group_isSet = false;
    m_security_group_isValid = false;

    m_ec2_key_name_isSet = false;
    m_ec2_key_name_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_associate_public_ip_address_isSet = false;
    m_associate_public_ip_address_isValid = false;

    m_iam_instance_profile_name_isSet = false;
    m_iam_instance_profile_name_isValid = false;

    m_configure_script_isSet = false;
    m_configure_script_isValid = false;

    m_configure_script_type_isSet = false;
    m_configure_script_type_isValid = false;
}

void OAIServerLaunchConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerLaunchConfiguration::fromJsonObject(QJsonObject json) {

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_logical_id_isValid = ::OpenAPI::fromJsonValue(m_logical_id, json[QString("logicalId")]);
    m_logical_id_isSet = !json[QString("logicalId")].isNull() && m_logical_id_isValid;

    m_vpc_isValid = ::OpenAPI::fromJsonValue(m_vpc, json[QString("vpc")]);
    m_vpc_isSet = !json[QString("vpc")].isNull() && m_vpc_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;

    m_security_group_isValid = ::OpenAPI::fromJsonValue(m_security_group, json[QString("securityGroup")]);
    m_security_group_isSet = !json[QString("securityGroup")].isNull() && m_security_group_isValid;

    m_ec2_key_name_isValid = ::OpenAPI::fromJsonValue(m_ec2_key_name, json[QString("ec2KeyName")]);
    m_ec2_key_name_isSet = !json[QString("ec2KeyName")].isNull() && m_ec2_key_name_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("userData")]);
    m_user_data_isSet = !json[QString("userData")].isNull() && m_user_data_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_associate_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_associate_public_ip_address, json[QString("associatePublicIpAddress")]);
    m_associate_public_ip_address_isSet = !json[QString("associatePublicIpAddress")].isNull() && m_associate_public_ip_address_isValid;

    m_iam_instance_profile_name_isValid = ::OpenAPI::fromJsonValue(m_iam_instance_profile_name, json[QString("iamInstanceProfileName")]);
    m_iam_instance_profile_name_isSet = !json[QString("iamInstanceProfileName")].isNull() && m_iam_instance_profile_name_isValid;

    m_configure_script_isValid = ::OpenAPI::fromJsonValue(m_configure_script, json[QString("configureScript")]);
    m_configure_script_isSet = !json[QString("configureScript")].isNull() && m_configure_script_isValid;

    m_configure_script_type_isValid = ::OpenAPI::fromJsonValue(m_configure_script_type, json[QString("configureScriptType")]);
    m_configure_script_type_isSet = !json[QString("configureScriptType")].isNull() && m_configure_script_type_isValid;
}

QString OAIServerLaunchConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerLaunchConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_server.isSet()) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_logical_id_isSet) {
        obj.insert(QString("logicalId"), ::OpenAPI::toJsonValue(m_logical_id));
    }
    if (m_vpc_isSet) {
        obj.insert(QString("vpc"), ::OpenAPI::toJsonValue(m_vpc));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    if (m_security_group_isSet) {
        obj.insert(QString("securityGroup"), ::OpenAPI::toJsonValue(m_security_group));
    }
    if (m_ec2_key_name_isSet) {
        obj.insert(QString("ec2KeyName"), ::OpenAPI::toJsonValue(m_ec2_key_name));
    }
    if (m_user_data.isSet()) {
        obj.insert(QString("userData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_associate_public_ip_address_isSet) {
        obj.insert(QString("associatePublicIpAddress"), ::OpenAPI::toJsonValue(m_associate_public_ip_address));
    }
    if (m_iam_instance_profile_name_isSet) {
        obj.insert(QString("iamInstanceProfileName"), ::OpenAPI::toJsonValue(m_iam_instance_profile_name));
    }
    if (m_configure_script.isSet()) {
        obj.insert(QString("configureScript"), ::OpenAPI::toJsonValue(m_configure_script));
    }
    if (m_configure_script_type.isSet()) {
        obj.insert(QString("configureScriptType"), ::OpenAPI::toJsonValue(m_configure_script_type));
    }
    return obj;
}

OAIServerLaunchConfiguration_server OAIServerLaunchConfiguration::getServer() const {
    return m_server;
}
void OAIServerLaunchConfiguration::setServer(const OAIServerLaunchConfiguration_server &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIServerLaunchConfiguration::is_server_Set() const{
    return m_server_isSet;
}

bool OAIServerLaunchConfiguration::is_server_Valid() const{
    return m_server_isValid;
}

QString OAIServerLaunchConfiguration::getLogicalId() const {
    return m_logical_id;
}
void OAIServerLaunchConfiguration::setLogicalId(const QString &logical_id) {
    m_logical_id = logical_id;
    m_logical_id_isSet = true;
}

bool OAIServerLaunchConfiguration::is_logical_id_Set() const{
    return m_logical_id_isSet;
}

bool OAIServerLaunchConfiguration::is_logical_id_Valid() const{
    return m_logical_id_isValid;
}

QString OAIServerLaunchConfiguration::getVpc() const {
    return m_vpc;
}
void OAIServerLaunchConfiguration::setVpc(const QString &vpc) {
    m_vpc = vpc;
    m_vpc_isSet = true;
}

bool OAIServerLaunchConfiguration::is_vpc_Set() const{
    return m_vpc_isSet;
}

bool OAIServerLaunchConfiguration::is_vpc_Valid() const{
    return m_vpc_isValid;
}

QString OAIServerLaunchConfiguration::getSubnet() const {
    return m_subnet;
}
void OAIServerLaunchConfiguration::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIServerLaunchConfiguration::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIServerLaunchConfiguration::is_subnet_Valid() const{
    return m_subnet_isValid;
}

QString OAIServerLaunchConfiguration::getSecurityGroup() const {
    return m_security_group;
}
void OAIServerLaunchConfiguration::setSecurityGroup(const QString &security_group) {
    m_security_group = security_group;
    m_security_group_isSet = true;
}

bool OAIServerLaunchConfiguration::is_security_group_Set() const{
    return m_security_group_isSet;
}

bool OAIServerLaunchConfiguration::is_security_group_Valid() const{
    return m_security_group_isValid;
}

QString OAIServerLaunchConfiguration::getEc2KeyName() const {
    return m_ec2_key_name;
}
void OAIServerLaunchConfiguration::setEc2KeyName(const QString &ec2_key_name) {
    m_ec2_key_name = ec2_key_name;
    m_ec2_key_name_isSet = true;
}

bool OAIServerLaunchConfiguration::is_ec2_key_name_Set() const{
    return m_ec2_key_name_isSet;
}

bool OAIServerLaunchConfiguration::is_ec2_key_name_Valid() const{
    return m_ec2_key_name_isValid;
}

OAIServerLaunchConfiguration_userData OAIServerLaunchConfiguration::getUserData() const {
    return m_user_data;
}
void OAIServerLaunchConfiguration::setUserData(const OAIServerLaunchConfiguration_userData &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAIServerLaunchConfiguration::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAIServerLaunchConfiguration::is_user_data_Valid() const{
    return m_user_data_isValid;
}

QString OAIServerLaunchConfiguration::getInstanceType() const {
    return m_instance_type;
}
void OAIServerLaunchConfiguration::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIServerLaunchConfiguration::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIServerLaunchConfiguration::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIServerLaunchConfiguration::getAssociatePublicIpAddress() const {
    return m_associate_public_ip_address;
}
void OAIServerLaunchConfiguration::setAssociatePublicIpAddress(const bool &associate_public_ip_address) {
    m_associate_public_ip_address = associate_public_ip_address;
    m_associate_public_ip_address_isSet = true;
}

bool OAIServerLaunchConfiguration::is_associate_public_ip_address_Set() const{
    return m_associate_public_ip_address_isSet;
}

bool OAIServerLaunchConfiguration::is_associate_public_ip_address_Valid() const{
    return m_associate_public_ip_address_isValid;
}

QString OAIServerLaunchConfiguration::getIamInstanceProfileName() const {
    return m_iam_instance_profile_name;
}
void OAIServerLaunchConfiguration::setIamInstanceProfileName(const QString &iam_instance_profile_name) {
    m_iam_instance_profile_name = iam_instance_profile_name;
    m_iam_instance_profile_name_isSet = true;
}

bool OAIServerLaunchConfiguration::is_iam_instance_profile_name_Set() const{
    return m_iam_instance_profile_name_isSet;
}

bool OAIServerLaunchConfiguration::is_iam_instance_profile_name_Valid() const{
    return m_iam_instance_profile_name_isValid;
}

OAIS3Location OAIServerLaunchConfiguration::getConfigureScript() const {
    return m_configure_script;
}
void OAIServerLaunchConfiguration::setConfigureScript(const OAIS3Location &configure_script) {
    m_configure_script = configure_script;
    m_configure_script_isSet = true;
}

bool OAIServerLaunchConfiguration::is_configure_script_Set() const{
    return m_configure_script_isSet;
}

bool OAIServerLaunchConfiguration::is_configure_script_Valid() const{
    return m_configure_script_isValid;
}

OAIScriptType OAIServerLaunchConfiguration::getConfigureScriptType() const {
    return m_configure_script_type;
}
void OAIServerLaunchConfiguration::setConfigureScriptType(const OAIScriptType &configure_script_type) {
    m_configure_script_type = configure_script_type;
    m_configure_script_type_isSet = true;
}

bool OAIServerLaunchConfiguration::is_configure_script_type_Set() const{
    return m_configure_script_type_isSet;
}

bool OAIServerLaunchConfiguration::is_configure_script_type_Valid() const{
    return m_configure_script_type_isValid;
}

bool OAIServerLaunchConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associate_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iam_instance_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_script.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configure_script_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerLaunchConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
