/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppReplicationStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppReplicationStatus::OAIAppReplicationStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppReplicationStatus::OAIAppReplicationStatus() {
    this->initializeModel();
}

OAIAppReplicationStatus::~OAIAppReplicationStatus() {}

void OAIAppReplicationStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAppReplicationStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAppReplicationStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("READY_FOR_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::READY_FOR_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::CONFIGURATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION_INVALID", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::CONFIGURATION_INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_REPLICATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::READY_FOR_REPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::VALIDATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATION_PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATION_PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTIALLY_REPLICATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::PARTIALLY_REPLICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELTA_REPLICATION_IN_PROGRESS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::DELTA_REPLICATION_IN_PROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELTA_REPLICATED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::DELTA_REPLICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELTA_REPLICATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::DELTA_REPLICATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATION_STOPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATION_STOPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATION_STOP_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATION_STOP_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REPLICATION_STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAppReplicationStatus::REPLICATION_STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAppReplicationStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAppReplicationStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAppReplicationStatus::READY_FOR_CONFIGURATION:
            val = "READY_FOR_CONFIGURATION";
            break;
        case eOAIAppReplicationStatus::CONFIGURATION_IN_PROGRESS:
            val = "CONFIGURATION_IN_PROGRESS";
            break;
        case eOAIAppReplicationStatus::CONFIGURATION_INVALID:
            val = "CONFIGURATION_INVALID";
            break;
        case eOAIAppReplicationStatus::READY_FOR_REPLICATION:
            val = "READY_FOR_REPLICATION";
            break;
        case eOAIAppReplicationStatus::VALIDATION_IN_PROGRESS:
            val = "VALIDATION_IN_PROGRESS";
            break;
        case eOAIAppReplicationStatus::REPLICATION_PENDING:
            val = "REPLICATION_PENDING";
            break;
        case eOAIAppReplicationStatus::REPLICATION_IN_PROGRESS:
            val = "REPLICATION_IN_PROGRESS";
            break;
        case eOAIAppReplicationStatus::REPLICATED:
            val = "REPLICATED";
            break;
        case eOAIAppReplicationStatus::PARTIALLY_REPLICATED:
            val = "PARTIALLY_REPLICATED";
            break;
        case eOAIAppReplicationStatus::DELTA_REPLICATION_IN_PROGRESS:
            val = "DELTA_REPLICATION_IN_PROGRESS";
            break;
        case eOAIAppReplicationStatus::DELTA_REPLICATED:
            val = "DELTA_REPLICATED";
            break;
        case eOAIAppReplicationStatus::DELTA_REPLICATION_FAILED:
            val = "DELTA_REPLICATION_FAILED";
            break;
        case eOAIAppReplicationStatus::REPLICATION_FAILED:
            val = "REPLICATION_FAILED";
            break;
        case eOAIAppReplicationStatus::REPLICATION_STOPPING:
            val = "REPLICATION_STOPPING";
            break;
        case eOAIAppReplicationStatus::REPLICATION_STOP_FAILED:
            val = "REPLICATION_STOP_FAILED";
            break;
        case eOAIAppReplicationStatus::REPLICATION_STOPPED:
            val = "REPLICATION_STOPPED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAppReplicationStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAppReplicationStatus::eOAIAppReplicationStatus OAIAppReplicationStatus::getValue() const {
    return m_value;
}

void OAIAppReplicationStatus::setValue(const OAIAppReplicationStatus::eOAIAppReplicationStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAppReplicationStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIAppReplicationStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
