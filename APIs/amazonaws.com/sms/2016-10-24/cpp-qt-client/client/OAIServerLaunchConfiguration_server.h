/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServerLaunchConfiguration_server.h
 *
 * 
 */

#ifndef OAIServerLaunchConfiguration_server_H
#define OAIServerLaunchConfiguration_server_H

#include <QJsonObject>

#include "OAIReplicationJob_vmServer.h"
#include "OAIServerType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReplicationJob_vmServer;

class OAIServerLaunchConfiguration_server : public OAIObject {
public:
    OAIServerLaunchConfiguration_server();
    OAIServerLaunchConfiguration_server(QString json);
    ~OAIServerLaunchConfiguration_server() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getServerId() const;
    void setServerId(const QString &server_id);
    bool is_server_id_Set() const;
    bool is_server_id_Valid() const;

    OAIServerType getServerType() const;
    void setServerType(const OAIServerType &server_type);
    bool is_server_type_Set() const;
    bool is_server_type_Valid() const;

    OAIReplicationJob_vmServer getVmServer() const;
    void setVmServer(const OAIReplicationJob_vmServer &vm_server);
    bool is_vm_server_Set() const;
    bool is_vm_server_Valid() const;

    QString getReplicationJobId() const;
    void setReplicationJobId(const QString &replication_job_id);
    bool is_replication_job_id_Set() const;
    bool is_replication_job_id_Valid() const;

    bool getReplicationJobTerminated() const;
    void setReplicationJobTerminated(const bool &replication_job_terminated);
    bool is_replication_job_terminated_Set() const;
    bool is_replication_job_terminated_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_server_id;
    bool m_server_id_isSet;
    bool m_server_id_isValid;

    OAIServerType m_server_type;
    bool m_server_type_isSet;
    bool m_server_type_isValid;

    OAIReplicationJob_vmServer m_vm_server;
    bool m_vm_server_isSet;
    bool m_vm_server_isValid;

    QString m_replication_job_id;
    bool m_replication_job_id_isSet;
    bool m_replication_job_id_isValid;

    bool m_replication_job_terminated;
    bool m_replication_job_terminated_isSet;
    bool m_replication_job_terminated_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServerLaunchConfiguration_server)

#endif // OAIServerLaunchConfiguration_server_H
