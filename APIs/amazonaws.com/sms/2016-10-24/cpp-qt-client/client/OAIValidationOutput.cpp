/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidationOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidationOutput::OAIValidationOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidationOutput::OAIValidationOutput() {
    this->initializeModel();
}

OAIValidationOutput::~OAIValidationOutput() {}

void OAIValidationOutput::initializeModel() {

    m_validation_id_isSet = false;
    m_validation_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_latest_validation_time_isSet = false;
    m_latest_validation_time_isValid = false;

    m_app_validation_output_isSet = false;
    m_app_validation_output_isValid = false;

    m_server_validation_output_isSet = false;
    m_server_validation_output_isValid = false;
}

void OAIValidationOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidationOutput::fromJsonObject(QJsonObject json) {

    m_validation_id_isValid = ::OpenAPI::fromJsonValue(m_validation_id, json[QString("validationId")]);
    m_validation_id_isSet = !json[QString("validationId")].isNull() && m_validation_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_latest_validation_time_isValid = ::OpenAPI::fromJsonValue(m_latest_validation_time, json[QString("latestValidationTime")]);
    m_latest_validation_time_isSet = !json[QString("latestValidationTime")].isNull() && m_latest_validation_time_isValid;

    m_app_validation_output_isValid = ::OpenAPI::fromJsonValue(m_app_validation_output, json[QString("appValidationOutput")]);
    m_app_validation_output_isSet = !json[QString("appValidationOutput")].isNull() && m_app_validation_output_isValid;

    m_server_validation_output_isValid = ::OpenAPI::fromJsonValue(m_server_validation_output, json[QString("serverValidationOutput")]);
    m_server_validation_output_isSet = !json[QString("serverValidationOutput")].isNull() && m_server_validation_output_isValid;
}

QString OAIValidationOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidationOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_validation_id_isSet) {
        obj.insert(QString("validationId"), ::OpenAPI::toJsonValue(m_validation_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_latest_validation_time_isSet) {
        obj.insert(QString("latestValidationTime"), ::OpenAPI::toJsonValue(m_latest_validation_time));
    }
    if (m_app_validation_output.isSet()) {
        obj.insert(QString("appValidationOutput"), ::OpenAPI::toJsonValue(m_app_validation_output));
    }
    if (m_server_validation_output.isSet()) {
        obj.insert(QString("serverValidationOutput"), ::OpenAPI::toJsonValue(m_server_validation_output));
    }
    return obj;
}

QString OAIValidationOutput::getValidationId() const {
    return m_validation_id;
}
void OAIValidationOutput::setValidationId(const QString &validation_id) {
    m_validation_id = validation_id;
    m_validation_id_isSet = true;
}

bool OAIValidationOutput::is_validation_id_Set() const{
    return m_validation_id_isSet;
}

bool OAIValidationOutput::is_validation_id_Valid() const{
    return m_validation_id_isValid;
}

QString OAIValidationOutput::getName() const {
    return m_name;
}
void OAIValidationOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIValidationOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIValidationOutput::is_name_Valid() const{
    return m_name_isValid;
}

OAIValidationStatus OAIValidationOutput::getStatus() const {
    return m_status;
}
void OAIValidationOutput::setStatus(const OAIValidationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIValidationOutput::is_status_Set() const{
    return m_status_isSet;
}

bool OAIValidationOutput::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIValidationOutput::getStatusMessage() const {
    return m_status_message;
}
void OAIValidationOutput::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIValidationOutput::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIValidationOutput::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIValidationOutput::getLatestValidationTime() const {
    return m_latest_validation_time;
}
void OAIValidationOutput::setLatestValidationTime(const QDateTime &latest_validation_time) {
    m_latest_validation_time = latest_validation_time;
    m_latest_validation_time_isSet = true;
}

bool OAIValidationOutput::is_latest_validation_time_Set() const{
    return m_latest_validation_time_isSet;
}

bool OAIValidationOutput::is_latest_validation_time_Valid() const{
    return m_latest_validation_time_isValid;
}

OAIValidationOutput_appValidationOutput OAIValidationOutput::getAppValidationOutput() const {
    return m_app_validation_output;
}
void OAIValidationOutput::setAppValidationOutput(const OAIValidationOutput_appValidationOutput &app_validation_output) {
    m_app_validation_output = app_validation_output;
    m_app_validation_output_isSet = true;
}

bool OAIValidationOutput::is_app_validation_output_Set() const{
    return m_app_validation_output_isSet;
}

bool OAIValidationOutput::is_app_validation_output_Valid() const{
    return m_app_validation_output_isValid;
}

OAIValidationOutput_serverValidationOutput OAIValidationOutput::getServerValidationOutput() const {
    return m_server_validation_output;
}
void OAIValidationOutput::setServerValidationOutput(const OAIValidationOutput_serverValidationOutput &server_validation_output) {
    m_server_validation_output = server_validation_output;
    m_server_validation_output_isSet = true;
}

bool OAIValidationOutput::is_server_validation_output_Set() const{
    return m_server_validation_output_isSet;
}

bool OAIValidationOutput::is_server_validation_output_Valid() const{
    return m_server_validation_output_isValid;
}

bool OAIValidationOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_validation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_validation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_validation_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_validation_output.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidationOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
