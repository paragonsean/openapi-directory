/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIServerLaunchConfiguration.h
 *
 * Launch configuration for a server.
 */

#ifndef OAIServerLaunchConfiguration_H
#define OAIServerLaunchConfiguration_H

#include <QJsonObject>

#include "OAIS3Location.h"
#include "OAIScriptType.h"
#include "OAIServerLaunchConfiguration_server.h"
#include "OAIServerLaunchConfiguration_userData.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServerLaunchConfiguration_server;
class OAIServerLaunchConfiguration_userData;
class OAIS3Location;

class OAIServerLaunchConfiguration : public OAIObject {
public:
    OAIServerLaunchConfiguration();
    OAIServerLaunchConfiguration(QString json);
    ~OAIServerLaunchConfiguration() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIServerLaunchConfiguration_server getServer() const;
    void setServer(const OAIServerLaunchConfiguration_server &server);
    bool is_server_Set() const;
    bool is_server_Valid() const;

    QString getLogicalId() const;
    void setLogicalId(const QString &logical_id);
    bool is_logical_id_Set() const;
    bool is_logical_id_Valid() const;

    QString getVpc() const;
    void setVpc(const QString &vpc);
    bool is_vpc_Set() const;
    bool is_vpc_Valid() const;

    QString getSubnet() const;
    void setSubnet(const QString &subnet);
    bool is_subnet_Set() const;
    bool is_subnet_Valid() const;

    QString getSecurityGroup() const;
    void setSecurityGroup(const QString &security_group);
    bool is_security_group_Set() const;
    bool is_security_group_Valid() const;

    QString getEc2KeyName() const;
    void setEc2KeyName(const QString &ec2_key_name);
    bool is_ec2_key_name_Set() const;
    bool is_ec2_key_name_Valid() const;

    OAIServerLaunchConfiguration_userData getUserData() const;
    void setUserData(const OAIServerLaunchConfiguration_userData &user_data);
    bool is_user_data_Set() const;
    bool is_user_data_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    bool getAssociatePublicIpAddress() const;
    void setAssociatePublicIpAddress(const bool &associate_public_ip_address);
    bool is_associate_public_ip_address_Set() const;
    bool is_associate_public_ip_address_Valid() const;

    QString getIamInstanceProfileName() const;
    void setIamInstanceProfileName(const QString &iam_instance_profile_name);
    bool is_iam_instance_profile_name_Set() const;
    bool is_iam_instance_profile_name_Valid() const;

    OAIS3Location getConfigureScript() const;
    void setConfigureScript(const OAIS3Location &configure_script);
    bool is_configure_script_Set() const;
    bool is_configure_script_Valid() const;

    OAIScriptType getConfigureScriptType() const;
    void setConfigureScriptType(const OAIScriptType &configure_script_type);
    bool is_configure_script_type_Set() const;
    bool is_configure_script_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIServerLaunchConfiguration_server m_server;
    bool m_server_isSet;
    bool m_server_isValid;

    QString m_logical_id;
    bool m_logical_id_isSet;
    bool m_logical_id_isValid;

    QString m_vpc;
    bool m_vpc_isSet;
    bool m_vpc_isValid;

    QString m_subnet;
    bool m_subnet_isSet;
    bool m_subnet_isValid;

    QString m_security_group;
    bool m_security_group_isSet;
    bool m_security_group_isValid;

    QString m_ec2_key_name;
    bool m_ec2_key_name_isSet;
    bool m_ec2_key_name_isValid;

    OAIServerLaunchConfiguration_userData m_user_data;
    bool m_user_data_isSet;
    bool m_user_data_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    bool m_associate_public_ip_address;
    bool m_associate_public_ip_address_isSet;
    bool m_associate_public_ip_address_isValid;

    QString m_iam_instance_profile_name;
    bool m_iam_instance_profile_name_isSet;
    bool m_iam_instance_profile_name_isValid;

    OAIS3Location m_configure_script;
    bool m_configure_script_isSet;
    bool m_configure_script_isValid;

    OAIScriptType m_configure_script_type;
    bool m_configure_script_type_isSet;
    bool m_configure_script_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIServerLaunchConfiguration)

#endif // OAIServerLaunchConfiguration_H
