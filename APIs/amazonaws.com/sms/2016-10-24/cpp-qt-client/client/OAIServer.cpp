/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServer::OAIServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServer::OAIServer() {
    this->initializeModel();
}

OAIServer::~OAIServer() {}

void OAIServer::initializeModel() {

    m_server_id_isSet = false;
    m_server_id_isValid = false;

    m_server_type_isSet = false;
    m_server_type_isValid = false;

    m_vm_server_isSet = false;
    m_vm_server_isValid = false;

    m_replication_job_id_isSet = false;
    m_replication_job_id_isValid = false;

    m_replication_job_terminated_isSet = false;
    m_replication_job_terminated_isValid = false;
}

void OAIServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServer::fromJsonObject(QJsonObject json) {

    m_server_id_isValid = ::OpenAPI::fromJsonValue(m_server_id, json[QString("serverId")]);
    m_server_id_isSet = !json[QString("serverId")].isNull() && m_server_id_isValid;

    m_server_type_isValid = ::OpenAPI::fromJsonValue(m_server_type, json[QString("serverType")]);
    m_server_type_isSet = !json[QString("serverType")].isNull() && m_server_type_isValid;

    m_vm_server_isValid = ::OpenAPI::fromJsonValue(m_vm_server, json[QString("vmServer")]);
    m_vm_server_isSet = !json[QString("vmServer")].isNull() && m_vm_server_isValid;

    m_replication_job_id_isValid = ::OpenAPI::fromJsonValue(m_replication_job_id, json[QString("replicationJobId")]);
    m_replication_job_id_isSet = !json[QString("replicationJobId")].isNull() && m_replication_job_id_isValid;

    m_replication_job_terminated_isValid = ::OpenAPI::fromJsonValue(m_replication_job_terminated, json[QString("replicationJobTerminated")]);
    m_replication_job_terminated_isSet = !json[QString("replicationJobTerminated")].isNull() && m_replication_job_terminated_isValid;
}

QString OAIServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServer::asJsonObject() const {
    QJsonObject obj;
    if (m_server_id_isSet) {
        obj.insert(QString("serverId"), ::OpenAPI::toJsonValue(m_server_id));
    }
    if (m_server_type.isSet()) {
        obj.insert(QString("serverType"), ::OpenAPI::toJsonValue(m_server_type));
    }
    if (m_vm_server.isSet()) {
        obj.insert(QString("vmServer"), ::OpenAPI::toJsonValue(m_vm_server));
    }
    if (m_replication_job_id_isSet) {
        obj.insert(QString("replicationJobId"), ::OpenAPI::toJsonValue(m_replication_job_id));
    }
    if (m_replication_job_terminated_isSet) {
        obj.insert(QString("replicationJobTerminated"), ::OpenAPI::toJsonValue(m_replication_job_terminated));
    }
    return obj;
}

QString OAIServer::getServerId() const {
    return m_server_id;
}
void OAIServer::setServerId(const QString &server_id) {
    m_server_id = server_id;
    m_server_id_isSet = true;
}

bool OAIServer::is_server_id_Set() const{
    return m_server_id_isSet;
}

bool OAIServer::is_server_id_Valid() const{
    return m_server_id_isValid;
}

OAIServerType OAIServer::getServerType() const {
    return m_server_type;
}
void OAIServer::setServerType(const OAIServerType &server_type) {
    m_server_type = server_type;
    m_server_type_isSet = true;
}

bool OAIServer::is_server_type_Set() const{
    return m_server_type_isSet;
}

bool OAIServer::is_server_type_Valid() const{
    return m_server_type_isValid;
}

OAIReplicationJob_vmServer OAIServer::getVmServer() const {
    return m_vm_server;
}
void OAIServer::setVmServer(const OAIReplicationJob_vmServer &vm_server) {
    m_vm_server = vm_server;
    m_vm_server_isSet = true;
}

bool OAIServer::is_vm_server_Set() const{
    return m_vm_server_isSet;
}

bool OAIServer::is_vm_server_Valid() const{
    return m_vm_server_isValid;
}

QString OAIServer::getReplicationJobId() const {
    return m_replication_job_id;
}
void OAIServer::setReplicationJobId(const QString &replication_job_id) {
    m_replication_job_id = replication_job_id;
    m_replication_job_id_isSet = true;
}

bool OAIServer::is_replication_job_id_Set() const{
    return m_replication_job_id_isSet;
}

bool OAIServer::is_replication_job_id_Valid() const{
    return m_replication_job_id_isValid;
}

bool OAIServer::getReplicationJobTerminated() const {
    return m_replication_job_terminated;
}
void OAIServer::setReplicationJobTerminated(const bool &replication_job_terminated) {
    m_replication_job_terminated = replication_job_terminated;
    m_replication_job_terminated_isSet = true;
}

bool OAIServer::is_replication_job_terminated_Set() const{
    return m_replication_job_terminated_isSet;
}

bool OAIServer::is_replication_job_terminated_Valid() const{
    return m_replication_job_terminated_isValid;
}

bool OAIServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_server.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_job_terminated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
