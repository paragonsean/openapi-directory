/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmManagerType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmManagerType::OAIVmManagerType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmManagerType::OAIVmManagerType() {
    this->initializeModel();
}

OAIVmManagerType::~OAIVmManagerType() {}

void OAIVmManagerType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVmManagerType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVmManagerType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VSPHERE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVmManagerType::VSPHERE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SCVMM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVmManagerType::SCVMM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("HYPERV-MANAGER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVmManagerType::HYPERV_MANAGER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVmManagerType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVmManagerType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVmManagerType::VSPHERE:
            val = "VSPHERE";
            break;
        case eOAIVmManagerType::SCVMM:
            val = "SCVMM";
            break;
        case eOAIVmManagerType::HYPERV_MANAGER:
            val = "HYPERV-MANAGER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVmManagerType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVmManagerType::eOAIVmManagerType OAIVmManagerType::getValue() const {
    return m_value;
}

void OAIVmManagerType::setValue(const OAIVmManagerType::eOAIVmManagerType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVmManagerType::isSet() const {
    
    return m_value_isSet;
}

bool OAIVmManagerType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
