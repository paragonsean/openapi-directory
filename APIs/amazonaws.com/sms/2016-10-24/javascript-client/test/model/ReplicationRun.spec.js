/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsServerMigrationService);
  }
}(this, function(expect, AwsServerMigrationService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsServerMigrationService.ReplicationRun();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReplicationRun', function() {
    it('should create an instance of ReplicationRun', function() {
      // uncomment below and update the code to test ReplicationRun
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be.a(AwsServerMigrationService.ReplicationRun);
    });

    it('should have the property replicationRunId (base name: "replicationRunId")', function() {
      // uncomment below and update the code to test the property replicationRunId
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property stageDetails (base name: "stageDetails")', function() {
      // uncomment below and update the code to test the property stageDetails
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property statusMessage (base name: "statusMessage")', function() {
      // uncomment below and update the code to test the property statusMessage
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property amiId (base name: "amiId")', function() {
      // uncomment below and update the code to test the property amiId
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property scheduledStartTime (base name: "scheduledStartTime")', function() {
      // uncomment below and update the code to test the property scheduledStartTime
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property completedTime (base name: "completedTime")', function() {
      // uncomment below and update the code to test the property completedTime
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property encrypted (base name: "encrypted")', function() {
      // uncomment below and update the code to test the property encrypted
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

    it('should have the property kmsKeyId (base name: "kmsKeyId")', function() {
      // uncomment below and update the code to test the property kmsKeyId
      //var instance = new AwsServerMigrationService.ReplicationRun();
      //expect(instance).to.be();
    });

  });

}));
