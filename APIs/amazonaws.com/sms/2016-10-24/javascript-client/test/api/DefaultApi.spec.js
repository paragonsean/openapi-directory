/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsServerMigrationService);
  }
}(this, function(expect, AwsServerMigrationService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsServerMigrationService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createApp', function() {
      it('should call createApp successfully', function(done) {
        //uncomment below and update the code to test createApp
        //instance.createApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReplicationJob', function() {
      it('should call createReplicationJob successfully', function(done) {
        //uncomment below and update the code to test createReplicationJob
        //instance.createReplicationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApp', function() {
      it('should call deleteApp successfully', function(done) {
        //uncomment below and update the code to test deleteApp
        //instance.deleteApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppLaunchConfiguration', function() {
      it('should call deleteAppLaunchConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteAppLaunchConfiguration
        //instance.deleteAppLaunchConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppReplicationConfiguration', function() {
      it('should call deleteAppReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteAppReplicationConfiguration
        //instance.deleteAppReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppValidationConfiguration', function() {
      it('should call deleteAppValidationConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteAppValidationConfiguration
        //instance.deleteAppValidationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReplicationJob', function() {
      it('should call deleteReplicationJob successfully', function(done) {
        //uncomment below and update the code to test deleteReplicationJob
        //instance.deleteReplicationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteServerCatalog', function() {
      it('should call deleteServerCatalog successfully', function(done) {
        //uncomment below and update the code to test deleteServerCatalog
        //instance.deleteServerCatalog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateConnector', function() {
      it('should call disassociateConnector successfully', function(done) {
        //uncomment below and update the code to test disassociateConnector
        //instance.disassociateConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateChangeSet', function() {
      it('should call generateChangeSet successfully', function(done) {
        //uncomment below and update the code to test generateChangeSet
        //instance.generateChangeSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateTemplate', function() {
      it('should call generateTemplate successfully', function(done) {
        //uncomment below and update the code to test generateTemplate
        //instance.generateTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApp', function() {
      it('should call getApp successfully', function(done) {
        //uncomment below and update the code to test getApp
        //instance.getApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppLaunchConfiguration', function() {
      it('should call getAppLaunchConfiguration successfully', function(done) {
        //uncomment below and update the code to test getAppLaunchConfiguration
        //instance.getAppLaunchConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppReplicationConfiguration', function() {
      it('should call getAppReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test getAppReplicationConfiguration
        //instance.getAppReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppValidationConfiguration', function() {
      it('should call getAppValidationConfiguration successfully', function(done) {
        //uncomment below and update the code to test getAppValidationConfiguration
        //instance.getAppValidationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppValidationOutput', function() {
      it('should call getAppValidationOutput successfully', function(done) {
        //uncomment below and update the code to test getAppValidationOutput
        //instance.getAppValidationOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getConnectors', function() {
      it('should call getConnectors successfully', function(done) {
        //uncomment below and update the code to test getConnectors
        //instance.getConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReplicationJobs', function() {
      it('should call getReplicationJobs successfully', function(done) {
        //uncomment below and update the code to test getReplicationJobs
        //instance.getReplicationJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReplicationRuns', function() {
      it('should call getReplicationRuns successfully', function(done) {
        //uncomment below and update the code to test getReplicationRuns
        //instance.getReplicationRuns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServers', function() {
      it('should call getServers successfully', function(done) {
        //uncomment below and update the code to test getServers
        //instance.getServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importAppCatalog', function() {
      it('should call importAppCatalog successfully', function(done) {
        //uncomment below and update the code to test importAppCatalog
        //instance.importAppCatalog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importServerCatalog', function() {
      it('should call importServerCatalog successfully', function(done) {
        //uncomment below and update the code to test importServerCatalog
        //instance.importServerCatalog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('launchApp', function() {
      it('should call launchApp successfully', function(done) {
        //uncomment below and update the code to test launchApp
        //instance.launchApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApps', function() {
      it('should call listApps successfully', function(done) {
        //uncomment below and update the code to test listApps
        //instance.listApps(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyAppValidationOutput', function() {
      it('should call notifyAppValidationOutput successfully', function(done) {
        //uncomment below and update the code to test notifyAppValidationOutput
        //instance.notifyAppValidationOutput(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAppLaunchConfiguration', function() {
      it('should call putAppLaunchConfiguration successfully', function(done) {
        //uncomment below and update the code to test putAppLaunchConfiguration
        //instance.putAppLaunchConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAppReplicationConfiguration', function() {
      it('should call putAppReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test putAppReplicationConfiguration
        //instance.putAppReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAppValidationConfiguration', function() {
      it('should call putAppValidationConfiguration successfully', function(done) {
        //uncomment below and update the code to test putAppValidationConfiguration
        //instance.putAppValidationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startAppReplication', function() {
      it('should call startAppReplication successfully', function(done) {
        //uncomment below and update the code to test startAppReplication
        //instance.startAppReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startOnDemandAppReplication', function() {
      it('should call startOnDemandAppReplication successfully', function(done) {
        //uncomment below and update the code to test startOnDemandAppReplication
        //instance.startOnDemandAppReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startOnDemandReplicationRun', function() {
      it('should call startOnDemandReplicationRun successfully', function(done) {
        //uncomment below and update the code to test startOnDemandReplicationRun
        //instance.startOnDemandReplicationRun(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopAppReplication', function() {
      it('should call stopAppReplication successfully', function(done) {
        //uncomment below and update the code to test stopAppReplication
        //instance.stopAppReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('terminateApp', function() {
      it('should call terminateApp successfully', function(done) {
        //uncomment below and update the code to test terminateApp
        //instance.terminateApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApp', function() {
      it('should call updateApp successfully', function(done) {
        //uncomment below and update the code to test updateApp
        //instance.updateApp(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReplicationJob', function() {
      it('should call updateReplicationJob successfully', function(done) {
        //uncomment below and update the code to test updateReplicationJob
        //instance.updateReplicationJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
