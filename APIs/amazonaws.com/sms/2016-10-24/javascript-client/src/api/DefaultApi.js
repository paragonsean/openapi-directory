/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAppRequest from '../model/CreateAppRequest';
import CreateAppResponse from '../model/CreateAppResponse';
import CreateReplicationJobRequest from '../model/CreateReplicationJobRequest';
import CreateReplicationJobResponse from '../model/CreateReplicationJobResponse';
import DeleteAppLaunchConfigurationRequest from '../model/DeleteAppLaunchConfigurationRequest';
import DeleteAppReplicationConfigurationRequest from '../model/DeleteAppReplicationConfigurationRequest';
import DeleteAppRequest from '../model/DeleteAppRequest';
import DeleteAppValidationConfigurationRequest from '../model/DeleteAppValidationConfigurationRequest';
import DeleteReplicationJobRequest from '../model/DeleteReplicationJobRequest';
import DisassociateConnectorRequest from '../model/DisassociateConnectorRequest';
import GenerateChangeSetRequest from '../model/GenerateChangeSetRequest';
import GenerateChangeSetResponse from '../model/GenerateChangeSetResponse';
import GenerateTemplateRequest from '../model/GenerateTemplateRequest';
import GenerateTemplateResponse from '../model/GenerateTemplateResponse';
import GetAppLaunchConfigurationRequest from '../model/GetAppLaunchConfigurationRequest';
import GetAppLaunchConfigurationResponse from '../model/GetAppLaunchConfigurationResponse';
import GetAppReplicationConfigurationRequest from '../model/GetAppReplicationConfigurationRequest';
import GetAppReplicationConfigurationResponse from '../model/GetAppReplicationConfigurationResponse';
import GetAppRequest from '../model/GetAppRequest';
import GetAppResponse from '../model/GetAppResponse';
import GetAppValidationConfigurationRequest from '../model/GetAppValidationConfigurationRequest';
import GetAppValidationConfigurationResponse from '../model/GetAppValidationConfigurationResponse';
import GetAppValidationOutputRequest from '../model/GetAppValidationOutputRequest';
import GetAppValidationOutputResponse from '../model/GetAppValidationOutputResponse';
import GetConnectorsRequest from '../model/GetConnectorsRequest';
import GetConnectorsResponse from '../model/GetConnectorsResponse';
import GetReplicationJobsRequest from '../model/GetReplicationJobsRequest';
import GetReplicationJobsResponse from '../model/GetReplicationJobsResponse';
import GetReplicationRunsRequest from '../model/GetReplicationRunsRequest';
import GetReplicationRunsResponse from '../model/GetReplicationRunsResponse';
import GetServersRequest from '../model/GetServersRequest';
import GetServersResponse from '../model/GetServersResponse';
import ImportAppCatalogRequest from '../model/ImportAppCatalogRequest';
import LaunchAppRequest from '../model/LaunchAppRequest';
import ListAppsRequest from '../model/ListAppsRequest';
import ListAppsResponse from '../model/ListAppsResponse';
import NotifyAppValidationOutputRequest from '../model/NotifyAppValidationOutputRequest';
import PutAppLaunchConfigurationRequest from '../model/PutAppLaunchConfigurationRequest';
import PutAppReplicationConfigurationRequest from '../model/PutAppReplicationConfigurationRequest';
import PutAppValidationConfigurationRequest from '../model/PutAppValidationConfigurationRequest';
import StartAppReplicationRequest from '../model/StartAppReplicationRequest';
import StartOnDemandAppReplicationRequest from '../model/StartOnDemandAppReplicationRequest';
import StartOnDemandReplicationRunRequest from '../model/StartOnDemandReplicationRunRequest';
import StartOnDemandReplicationRunResponse from '../model/StartOnDemandReplicationRunResponse';
import StopAppReplicationRequest from '../model/StopAppReplicationRequest';
import TerminateAppRequest from '../model/TerminateAppRequest';
import UpdateAppRequest from '../model/UpdateAppRequest';
import UpdateAppResponse from '../model/UpdateAppResponse';
import UpdateReplicationJobRequest from '../model/UpdateReplicationJobRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-10-24
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApp operation.
     * @callback module:api/DefaultApi~createAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an application. An application consists of one or more server groups. Each server group contain one or more servers.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAppRequest} createAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppResponse}
     */
    createApp(xAmzTarget, createAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createApp");
      }
      // verify the required parameter 'createAppRequest' is set
      if (createAppRequest === undefined || createAppRequest === null) {
        throw new Error("Missing the required parameter 'createAppRequest' when calling createApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReplicationJob operation.
     * @callback module:api/DefaultApi~createReplicationJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReplicationJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a replication job. The replication job schedules periodic replication runs to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image (AMI).
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateReplicationJobRequest} createReplicationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReplicationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReplicationJobResponse}
     */
    createReplicationJob(xAmzTarget, createReplicationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createReplicationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createReplicationJob");
      }
      // verify the required parameter 'createReplicationJobRequest' is set
      if (createReplicationJobRequest === undefined || createReplicationJobRequest === null) {
        throw new Error("Missing the required parameter 'createReplicationJobRequest' when calling createReplicationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReplicationJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.CreateReplicationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApp operation.
     * @callback module:api/DefaultApi~deleteAppCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified application. Optionally deletes the launched stack associated with the application and all Server Migration Service replication jobs for servers in the application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppRequest} deleteAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApp(xAmzTarget, deleteAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteApp");
      }
      // verify the required parameter 'deleteAppRequest' is set
      if (deleteAppRequest === undefined || deleteAppRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppRequest' when calling deleteApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppLaunchConfiguration operation.
     * @callback module:api/DefaultApi~deleteAppLaunchConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the launch configuration for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppLaunchConfigurationRequest} deleteAppLaunchConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppLaunchConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAppLaunchConfiguration(xAmzTarget, deleteAppLaunchConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppLaunchConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAppLaunchConfiguration");
      }
      // verify the required parameter 'deleteAppLaunchConfigurationRequest' is set
      if (deleteAppLaunchConfigurationRequest === undefined || deleteAppLaunchConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppLaunchConfigurationRequest' when calling deleteAppLaunchConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppLaunchConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppReplicationConfiguration operation.
     * @callback module:api/DefaultApi~deleteAppReplicationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the replication configuration for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppReplicationConfigurationRequest} deleteAppReplicationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppReplicationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAppReplicationConfiguration(xAmzTarget, deleteAppReplicationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppReplicationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAppReplicationConfiguration");
      }
      // verify the required parameter 'deleteAppReplicationConfigurationRequest' is set
      if (deleteAppReplicationConfigurationRequest === undefined || deleteAppReplicationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppReplicationConfigurationRequest' when calling deleteAppReplicationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppReplicationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppValidationConfiguration operation.
     * @callback module:api/DefaultApi~deleteAppValidationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the validation configuration for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAppValidationConfigurationRequest} deleteAppValidationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppValidationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAppValidationConfiguration(xAmzTarget, deleteAppValidationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAppValidationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAppValidationConfiguration");
      }
      // verify the required parameter 'deleteAppValidationConfigurationRequest' is set
      if (deleteAppValidationConfigurationRequest === undefined || deleteAppValidationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'deleteAppValidationConfigurationRequest' when calling deleteAppValidationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteAppValidationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReplicationJob operation.
     * @callback module:api/DefaultApi~deleteReplicationJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes the specified replication job.</p> <p>After you delete a replication job, there are no further replication runs. Amazon Web Services deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created by the replication runs are not deleted.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteReplicationJobRequest} deleteReplicationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReplicationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteReplicationJob(xAmzTarget, deleteReplicationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteReplicationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteReplicationJob");
      }
      // verify the required parameter 'deleteReplicationJobRequest' is set
      if (deleteReplicationJobRequest === undefined || deleteReplicationJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteReplicationJobRequest' when calling deleteReplicationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteReplicationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServerCatalog operation.
     * @callback module:api/DefaultApi~deleteServerCatalogCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all servers from your server catalog.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteServerCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteServerCatalog(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteServerCatalog");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteServerCatalog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DeleteServerCatalog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateConnector operation.
     * @callback module:api/DefaultApi~disassociateConnectorCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disassociates the specified connector from Server Migration Service.</p> <p>After you disassociate a connector, it is no longer available to support replication jobs.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DisassociateConnectorRequest} disassociateConnectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateConnectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateConnector(xAmzTarget, disassociateConnectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = disassociateConnectorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling disassociateConnector");
      }
      // verify the required parameter 'disassociateConnectorRequest' is set
      if (disassociateConnectorRequest === undefined || disassociateConnectorRequest === null) {
        throw new Error("Missing the required parameter 'disassociateConnectorRequest' when calling disassociateConnector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.DisassociateConnector', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateChangeSet operation.
     * @callback module:api/DefaultApi~generateChangeSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateChangeSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a target change set for a currently launched stack and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GenerateChangeSetRequest} generateChangeSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~generateChangeSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateChangeSetResponse}
     */
    generateChangeSet(xAmzTarget, generateChangeSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateChangeSetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling generateChangeSet");
      }
      // verify the required parameter 'generateChangeSetRequest' is set
      if (generateChangeSetRequest === undefined || generateChangeSetRequest === null) {
        throw new Error("Missing the required parameter 'generateChangeSetRequest' when calling generateChangeSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateChangeSetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateChangeSet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateTemplate operation.
     * @callback module:api/DefaultApi~generateTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates an CloudFormation template based on the current launch configuration and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GenerateTemplateRequest} generateTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~generateTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateTemplateResponse}
     */
    generateTemplate(xAmzTarget, generateTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = generateTemplateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling generateTemplate");
      }
      // verify the required parameter 'generateTemplateRequest' is set
      if (generateTemplateRequest === undefined || generateTemplateRequest === null) {
        throw new Error("Missing the required parameter 'generateTemplateRequest' when calling generateTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenerateTemplateResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GenerateTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/DefaultApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve information about the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAppRequest} getAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppResponse}
     */
    getApp(xAmzTarget, getAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getApp");
      }
      // verify the required parameter 'getAppRequest' is set
      if (getAppRequest === undefined || getAppRequest === null) {
        throw new Error("Missing the required parameter 'getAppRequest' when calling getApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAppResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppLaunchConfiguration operation.
     * @callback module:api/DefaultApi~getAppLaunchConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppLaunchConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the application launch configuration associated with the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAppLaunchConfigurationRequest} getAppLaunchConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppLaunchConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppLaunchConfigurationResponse}
     */
    getAppLaunchConfiguration(xAmzTarget, getAppLaunchConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAppLaunchConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAppLaunchConfiguration");
      }
      // verify the required parameter 'getAppLaunchConfigurationRequest' is set
      if (getAppLaunchConfigurationRequest === undefined || getAppLaunchConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getAppLaunchConfigurationRequest' when calling getAppLaunchConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAppLaunchConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppLaunchConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppReplicationConfiguration operation.
     * @callback module:api/DefaultApi~getAppReplicationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppReplicationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the application replication configuration associated with the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAppReplicationConfigurationRequest} getAppReplicationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppReplicationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppReplicationConfigurationResponse}
     */
    getAppReplicationConfiguration(xAmzTarget, getAppReplicationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAppReplicationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAppReplicationConfiguration");
      }
      // verify the required parameter 'getAppReplicationConfigurationRequest' is set
      if (getAppReplicationConfigurationRequest === undefined || getAppReplicationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getAppReplicationConfigurationRequest' when calling getAppReplicationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAppReplicationConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppReplicationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppValidationConfiguration operation.
     * @callback module:api/DefaultApi~getAppValidationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppValidationConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about a configuration for validating an application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAppValidationConfigurationRequest} getAppValidationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppValidationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppValidationConfigurationResponse}
     */
    getAppValidationConfiguration(xAmzTarget, getAppValidationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAppValidationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAppValidationConfiguration");
      }
      // verify the required parameter 'getAppValidationConfigurationRequest' is set
      if (getAppValidationConfigurationRequest === undefined || getAppValidationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getAppValidationConfigurationRequest' when calling getAppValidationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAppValidationConfigurationResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppValidationOutput operation.
     * @callback module:api/DefaultApi~getAppValidationOutputCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppValidationOutputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves output from validating an application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAppValidationOutputRequest} getAppValidationOutputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppValidationOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppValidationOutputResponse}
     */
    getAppValidationOutput(xAmzTarget, getAppValidationOutputRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAppValidationOutputRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAppValidationOutput");
      }
      // verify the required parameter 'getAppValidationOutputRequest' is set
      if (getAppValidationOutputRequest === undefined || getAppValidationOutputRequest === null) {
        throw new Error("Missing the required parameter 'getAppValidationOutputRequest' when calling getAppValidationOutput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAppValidationOutputResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetAppValidationOutput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConnectors operation.
     * @callback module:api/DefaultApi~getConnectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetConnectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the connectors registered with the Server Migration Service.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetConnectorsRequest} getConnectorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getConnectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetConnectorsResponse}
     */
    getConnectors(xAmzTarget, getConnectorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getConnectorsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getConnectors");
      }
      // verify the required parameter 'getConnectorsRequest' is set
      if (getConnectorsRequest === undefined || getConnectorsRequest === null) {
        throw new Error("Missing the required parameter 'getConnectorsRequest' when calling getConnectors");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetConnectorsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetConnectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplicationJobs operation.
     * @callback module:api/DefaultApi~getReplicationJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReplicationJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the specified replication job or all of your replication jobs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetReplicationJobsRequest} getReplicationJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getReplicationJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReplicationJobsResponse}
     */
    getReplicationJobs(xAmzTarget, getReplicationJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getReplicationJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getReplicationJobs");
      }
      // verify the required parameter 'getReplicationJobsRequest' is set
      if (getReplicationJobsRequest === undefined || getReplicationJobsRequest === null) {
        throw new Error("Missing the required parameter 'getReplicationJobsRequest' when calling getReplicationJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetReplicationJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplicationRuns operation.
     * @callback module:api/DefaultApi~getReplicationRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReplicationRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the replication runs for the specified replication job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetReplicationRunsRequest} getReplicationRunsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getReplicationRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReplicationRunsResponse}
     */
    getReplicationRuns(xAmzTarget, getReplicationRunsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getReplicationRunsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getReplicationRuns");
      }
      // verify the required parameter 'getReplicationRunsRequest' is set
      if (getReplicationRunsRequest === undefined || getReplicationRunsRequest === null) {
        throw new Error("Missing the required parameter 'getReplicationRunsRequest' when calling getReplicationRuns");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetReplicationRunsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetReplicationRuns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServers operation.
     * @callback module:api/DefaultApi~getServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetServersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the servers in your server catalog.</p> <p>Before you can describe your servers, you must import them using <a>ImportServerCatalog</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetServersRequest} getServersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetServersResponse}
     */
    getServers(xAmzTarget, getServersRequest, opts, callback) {
      opts = opts || {};
      let postBody = getServersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getServers");
      }
      // verify the required parameter 'getServersRequest' is set
      if (getServersRequest === undefined || getServersRequest === null) {
        throw new Error("Missing the required parameter 'getServersRequest' when calling getServers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetServersResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.GetServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importAppCatalog operation.
     * @callback module:api/DefaultApi~importAppCatalogCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows application import from Migration Hub.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ImportAppCatalogRequest} importAppCatalogRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importAppCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    importAppCatalog(xAmzTarget, importAppCatalogRequest, opts, callback) {
      opts = opts || {};
      let postBody = importAppCatalogRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importAppCatalog");
      }
      // verify the required parameter 'importAppCatalogRequest' is set
      if (importAppCatalogRequest === undefined || importAppCatalogRequest === null) {
        throw new Error("Missing the required parameter 'importAppCatalogRequest' when calling importAppCatalog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportAppCatalog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importServerCatalog operation.
     * @callback module:api/DefaultApi~importServerCatalogCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Gathers a complete list of on-premises servers. Connectors must be installed and monitoring all servers to import.</p> <p>This call returns immediately, but might take additional time to retrieve all the servers.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~importServerCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    importServerCatalog(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling importServerCatalog");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importServerCatalog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ImportServerCatalog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the launchApp operation.
     * @callback module:api/DefaultApi~launchAppCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Launches the specified application as a stack in CloudFormation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/LaunchAppRequest} launchAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~launchAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    launchApp(xAmzTarget, launchAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = launchAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling launchApp");
      }
      // verify the required parameter 'launchAppRequest' is set
      if (launchAppRequest === undefined || launchAppRequest === null) {
        throw new Error("Missing the required parameter 'launchAppRequest' when calling launchApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.LaunchApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApps operation.
     * @callback module:api/DefaultApi~listAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves summaries for all applications.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAppsRequest} listAppsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppsResponse}
     */
    listApps(xAmzTarget, listAppsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAppsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listApps");
      }
      // verify the required parameter 'listAppsRequest' is set
      if (listAppsRequest === undefined || listAppsRequest === null) {
        throw new Error("Missing the required parameter 'listAppsRequest' when calling listApps");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAppsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.ListApps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notifyAppValidationOutput operation.
     * @callback module:api/DefaultApi~notifyAppValidationOutputCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides information to Server Migration Service about whether application validation is successful.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/NotifyAppValidationOutputRequest} notifyAppValidationOutputRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~notifyAppValidationOutputCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    notifyAppValidationOutput(xAmzTarget, notifyAppValidationOutputRequest, opts, callback) {
      opts = opts || {};
      let postBody = notifyAppValidationOutputRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling notifyAppValidationOutput");
      }
      // verify the required parameter 'notifyAppValidationOutputRequest' is set
      if (notifyAppValidationOutputRequest === undefined || notifyAppValidationOutputRequest === null) {
        throw new Error("Missing the required parameter 'notifyAppValidationOutputRequest' when calling notifyAppValidationOutput");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.NotifyAppValidationOutput', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAppLaunchConfiguration operation.
     * @callback module:api/DefaultApi~putAppLaunchConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the launch configuration for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutAppLaunchConfigurationRequest} putAppLaunchConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAppLaunchConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAppLaunchConfiguration(xAmzTarget, putAppLaunchConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAppLaunchConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putAppLaunchConfiguration");
      }
      // verify the required parameter 'putAppLaunchConfigurationRequest' is set
      if (putAppLaunchConfigurationRequest === undefined || putAppLaunchConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putAppLaunchConfigurationRequest' when calling putAppLaunchConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppLaunchConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAppReplicationConfiguration operation.
     * @callback module:api/DefaultApi~putAppReplicationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the replication configuration for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutAppReplicationConfigurationRequest} putAppReplicationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAppReplicationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAppReplicationConfiguration(xAmzTarget, putAppReplicationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAppReplicationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putAppReplicationConfiguration");
      }
      // verify the required parameter 'putAppReplicationConfigurationRequest' is set
      if (putAppReplicationConfigurationRequest === undefined || putAppReplicationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putAppReplicationConfigurationRequest' when calling putAppReplicationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppReplicationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAppValidationConfiguration operation.
     * @callback module:api/DefaultApi~putAppValidationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a validation configuration for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/PutAppValidationConfigurationRequest} putAppValidationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAppValidationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putAppValidationConfiguration(xAmzTarget, putAppValidationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAppValidationConfigurationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling putAppValidationConfiguration");
      }
      // verify the required parameter 'putAppValidationConfigurationRequest' is set
      if (putAppValidationConfigurationRequest === undefined || putAppValidationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'putAppValidationConfigurationRequest' when calling putAppValidationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.PutAppValidationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAppReplication operation.
     * @callback module:api/DefaultApi~startAppReplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts replicating the specified application by creating replication jobs for each server in the application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartAppReplicationRequest} startAppReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAppReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startAppReplication(xAmzTarget, startAppReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAppReplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startAppReplication");
      }
      // verify the required parameter 'startAppReplicationRequest' is set
      if (startAppReplicationRequest === undefined || startAppReplicationRequest === null) {
        throw new Error("Missing the required parameter 'startAppReplicationRequest' when calling startAppReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartAppReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startOnDemandAppReplication operation.
     * @callback module:api/DefaultApi~startOnDemandAppReplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an on-demand replication run for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartOnDemandAppReplicationRequest} startOnDemandAppReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startOnDemandAppReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startOnDemandAppReplication(xAmzTarget, startOnDemandAppReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startOnDemandAppReplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startOnDemandAppReplication");
      }
      // verify the required parameter 'startOnDemandAppReplicationRequest' is set
      if (startOnDemandAppReplicationRequest === undefined || startOnDemandAppReplicationRequest === null) {
        throw new Error("Missing the required parameter 'startOnDemandAppReplicationRequest' when calling startOnDemandAppReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandAppReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startOnDemandReplicationRun operation.
     * @callback module:api/DefaultApi~startOnDemandReplicationRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartOnDemandReplicationRunResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Starts an on-demand replication run for the specified replication job. This replication run starts immediately. This replication run is in addition to the ones already scheduled.</p> <p>There is a limit on the number of on-demand replications runs that you can request in a 24-hour period.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StartOnDemandReplicationRunRequest} startOnDemandReplicationRunRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startOnDemandReplicationRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartOnDemandReplicationRunResponse}
     */
    startOnDemandReplicationRun(xAmzTarget, startOnDemandReplicationRunRequest, opts, callback) {
      opts = opts || {};
      let postBody = startOnDemandReplicationRunRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling startOnDemandReplicationRun");
      }
      // verify the required parameter 'startOnDemandReplicationRunRequest' is set
      if (startOnDemandReplicationRunRequest === undefined || startOnDemandReplicationRunRequest === null) {
        throw new Error("Missing the required parameter 'startOnDemandReplicationRunRequest' when calling startOnDemandReplicationRun");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartOnDemandReplicationRunResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StartOnDemandReplicationRun', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopAppReplication operation.
     * @callback module:api/DefaultApi~stopAppReplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops replicating the specified application by deleting the replication job for each server in the application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopAppReplicationRequest} stopAppReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopAppReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    stopAppReplication(xAmzTarget, stopAppReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopAppReplicationRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopAppReplication");
      }
      // verify the required parameter 'stopAppReplicationRequest' is set
      if (stopAppReplicationRequest === undefined || stopAppReplicationRequest === null) {
        throw new Error("Missing the required parameter 'stopAppReplicationRequest' when calling stopAppReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.StopAppReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateApp operation.
     * @callback module:api/DefaultApi~terminateAppCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Terminates the stack for the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TerminateAppRequest} terminateAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~terminateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    terminateApp(xAmzTarget, terminateAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = terminateAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling terminateApp");
      }
      // verify the required parameter 'terminateAppRequest' is set
      if (terminateAppRequest === undefined || terminateAppRequest === null) {
        throw new Error("Missing the required parameter 'terminateAppRequest' when calling terminateApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.TerminateApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/DefaultApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified application.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAppRequest} updateAppRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppResponse}
     */
    updateApp(xAmzTarget, updateAppRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateApp");
      }
      // verify the required parameter 'updateAppRequest' is set
      if (updateAppRequest === undefined || updateAppRequest === null) {
        throw new Error("Missing the required parameter 'updateAppRequest' when calling updateApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateApp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReplicationJob operation.
     * @callback module:api/DefaultApi~updateReplicationJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified settings for the specified replication job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateReplicationJobRequest} updateReplicationJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReplicationJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateReplicationJob(xAmzTarget, updateReplicationJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateReplicationJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateReplicationJob");
      }
      // verify the required parameter 'updateReplicationJobRequest' is set
      if (updateReplicationJobRequest === undefined || updateReplicationJobRequest === null) {
        throw new Error("Missing the required parameter 'updateReplicationJobRequest' when calling updateReplicationJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSServerMigrationService_V2016_10_24.UpdateReplicationJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
