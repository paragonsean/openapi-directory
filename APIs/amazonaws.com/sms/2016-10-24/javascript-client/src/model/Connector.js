/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConnectorStatus from './ConnectorStatus';
import VmManagerType from './VmManagerType';

/**
 * The Connector model module.
 * @module model/Connector
 * @version 2016-10-24
 */
class Connector {
    /**
     * Constructs a new <code>Connector</code>.
     * Represents a connector.
     * @alias module:model/Connector
     */
    constructor() { 
        
        Connector.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Connector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Connector} obj Optional instance to populate.
     * @return {module:model/Connector} The populated <code>Connector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Connector();

            if (data.hasOwnProperty('connectorId')) {
                obj['connectorId'] = ApiClient.convertToType(data['connectorId'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], ConnectorStatus);
            }
            if (data.hasOwnProperty('capabilityList')) {
                obj['capabilityList'] = ApiClient.convertToType(data['capabilityList'], Array);
            }
            if (data.hasOwnProperty('vmManagerName')) {
                obj['vmManagerName'] = ApiClient.convertToType(data['vmManagerName'], 'String');
            }
            if (data.hasOwnProperty('vmManagerType')) {
                obj['vmManagerType'] = ApiClient.convertToType(data['vmManagerType'], VmManagerType);
            }
            if (data.hasOwnProperty('vmManagerId')) {
                obj['vmManagerId'] = ApiClient.convertToType(data['vmManagerId'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], 'String');
            }
            if (data.hasOwnProperty('associatedOn')) {
                obj['associatedOn'] = ApiClient.convertToType(data['associatedOn'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Connector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Connector</code>.
     */
    static validateJSON(data) {
        // validate the optional field `connectorId`
        if (data['connectorId']) { // data not null
          String.validateJSON(data['connectorId']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          String.validateJSON(data['version']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ConnectorStatus.validateJSON(data['status']);
        }
        // validate the optional field `capabilityList`
        if (data['capabilityList']) { // data not null
          Array.validateJSON(data['capabilityList']);
        }
        // validate the optional field `vmManagerName`
        if (data['vmManagerName']) { // data not null
          String.validateJSON(data['vmManagerName']);
        }
        // validate the optional field `vmManagerType`
        if (data['vmManagerType']) { // data not null
          VmManagerType.validateJSON(data['vmManagerType']);
        }
        // validate the optional field `vmManagerId`
        if (data['vmManagerId']) { // data not null
          String.validateJSON(data['vmManagerId']);
        }
        // validate the optional field `ipAddress`
        if (data['ipAddress']) { // data not null
          String.validateJSON(data['ipAddress']);
        }
        // validate the optional field `macAddress`
        if (data['macAddress']) { // data not null
          String.validateJSON(data['macAddress']);
        }
        // validate the optional field `associatedOn`
        if (data['associatedOn']) { // data not null
          Date.validateJSON(data['associatedOn']);
        }

        return true;
    }


}



/**
 * @member {String} connectorId
 */
Connector.prototype['connectorId'] = undefined;

/**
 * @member {String} version
 */
Connector.prototype['version'] = undefined;

/**
 * @member {module:model/ConnectorStatus} status
 */
Connector.prototype['status'] = undefined;

/**
 * @member {Array} capabilityList
 */
Connector.prototype['capabilityList'] = undefined;

/**
 * @member {String} vmManagerName
 */
Connector.prototype['vmManagerName'] = undefined;

/**
 * @member {module:model/VmManagerType} vmManagerType
 */
Connector.prototype['vmManagerType'] = undefined;

/**
 * @member {String} vmManagerId
 */
Connector.prototype['vmManagerId'] = undefined;

/**
 * @member {String} ipAddress
 */
Connector.prototype['ipAddress'] = undefined;

/**
 * @member {String} macAddress
 */
Connector.prototype['macAddress'] = undefined;

/**
 * @member {Date} associatedOn
 */
Connector.prototype['associatedOn'] = undefined;






export default Connector;

