/**
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3Location from './S3Location';
import ScriptType from './ScriptType';
import ServerLaunchConfigurationServer from './ServerLaunchConfigurationServer';
import ServerLaunchConfigurationUserData from './ServerLaunchConfigurationUserData';

/**
 * The ServerLaunchConfiguration model module.
 * @module model/ServerLaunchConfiguration
 * @version 2016-10-24
 */
class ServerLaunchConfiguration {
    /**
     * Constructs a new <code>ServerLaunchConfiguration</code>.
     * Launch configuration for a server.
     * @alias module:model/ServerLaunchConfiguration
     */
    constructor() { 
        
        ServerLaunchConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServerLaunchConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerLaunchConfiguration} obj Optional instance to populate.
     * @return {module:model/ServerLaunchConfiguration} The populated <code>ServerLaunchConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerLaunchConfiguration();

            if (data.hasOwnProperty('server')) {
                obj['server'] = ServerLaunchConfigurationServer.constructFromObject(data['server']);
            }
            if (data.hasOwnProperty('logicalId')) {
                obj['logicalId'] = ApiClient.convertToType(data['logicalId'], 'String');
            }
            if (data.hasOwnProperty('vpc')) {
                obj['vpc'] = ApiClient.convertToType(data['vpc'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
            if (data.hasOwnProperty('securityGroup')) {
                obj['securityGroup'] = ApiClient.convertToType(data['securityGroup'], 'String');
            }
            if (data.hasOwnProperty('ec2KeyName')) {
                obj['ec2KeyName'] = ApiClient.convertToType(data['ec2KeyName'], 'String');
            }
            if (data.hasOwnProperty('userData')) {
                obj['userData'] = ServerLaunchConfigurationUserData.constructFromObject(data['userData']);
            }
            if (data.hasOwnProperty('instanceType')) {
                obj['instanceType'] = ApiClient.convertToType(data['instanceType'], 'String');
            }
            if (data.hasOwnProperty('associatePublicIpAddress')) {
                obj['associatePublicIpAddress'] = ApiClient.convertToType(data['associatePublicIpAddress'], 'Boolean');
            }
            if (data.hasOwnProperty('iamInstanceProfileName')) {
                obj['iamInstanceProfileName'] = ApiClient.convertToType(data['iamInstanceProfileName'], 'String');
            }
            if (data.hasOwnProperty('configureScript')) {
                obj['configureScript'] = S3Location.constructFromObject(data['configureScript']);
            }
            if (data.hasOwnProperty('configureScriptType')) {
                obj['configureScriptType'] = ApiClient.convertToType(data['configureScriptType'], ScriptType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerLaunchConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerLaunchConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `server`
        if (data['server']) { // data not null
          ServerLaunchConfigurationServer.validateJSON(data['server']);
        }
        // validate the optional field `logicalId`
        if (data['logicalId']) { // data not null
          String.validateJSON(data['logicalId']);
        }
        // validate the optional field `vpc`
        if (data['vpc']) { // data not null
          String.validateJSON(data['vpc']);
        }
        // validate the optional field `subnet`
        if (data['subnet']) { // data not null
          String.validateJSON(data['subnet']);
        }
        // validate the optional field `securityGroup`
        if (data['securityGroup']) { // data not null
          String.validateJSON(data['securityGroup']);
        }
        // validate the optional field `ec2KeyName`
        if (data['ec2KeyName']) { // data not null
          String.validateJSON(data['ec2KeyName']);
        }
        // validate the optional field `userData`
        if (data['userData']) { // data not null
          ServerLaunchConfigurationUserData.validateJSON(data['userData']);
        }
        // validate the optional field `instanceType`
        if (data['instanceType']) { // data not null
          String.validateJSON(data['instanceType']);
        }
        // validate the optional field `associatePublicIpAddress`
        if (data['associatePublicIpAddress']) { // data not null
          Boolean.validateJSON(data['associatePublicIpAddress']);
        }
        // validate the optional field `iamInstanceProfileName`
        if (data['iamInstanceProfileName']) { // data not null
          String.validateJSON(data['iamInstanceProfileName']);
        }
        // validate the optional field `configureScript`
        if (data['configureScript']) { // data not null
          S3Location.validateJSON(data['configureScript']);
        }
        // validate the optional field `configureScriptType`
        if (data['configureScriptType']) { // data not null
          ScriptType.validateJSON(data['configureScriptType']);
        }

        return true;
    }


}



/**
 * @member {module:model/ServerLaunchConfigurationServer} server
 */
ServerLaunchConfiguration.prototype['server'] = undefined;

/**
 * @member {String} logicalId
 */
ServerLaunchConfiguration.prototype['logicalId'] = undefined;

/**
 * @member {String} vpc
 */
ServerLaunchConfiguration.prototype['vpc'] = undefined;

/**
 * @member {String} subnet
 */
ServerLaunchConfiguration.prototype['subnet'] = undefined;

/**
 * @member {String} securityGroup
 */
ServerLaunchConfiguration.prototype['securityGroup'] = undefined;

/**
 * @member {String} ec2KeyName
 */
ServerLaunchConfiguration.prototype['ec2KeyName'] = undefined;

/**
 * @member {module:model/ServerLaunchConfigurationUserData} userData
 */
ServerLaunchConfiguration.prototype['userData'] = undefined;

/**
 * @member {String} instanceType
 */
ServerLaunchConfiguration.prototype['instanceType'] = undefined;

/**
 * @member {Boolean} associatePublicIpAddress
 */
ServerLaunchConfiguration.prototype['associatePublicIpAddress'] = undefined;

/**
 * @member {String} iamInstanceProfileName
 */
ServerLaunchConfiguration.prototype['iamInstanceProfileName'] = undefined;

/**
 * @member {module:model/S3Location} configureScript
 */
ServerLaunchConfiguration.prototype['configureScript'] = undefined;

/**
 * @member {module:model/ScriptType} configureScriptType
 */
ServerLaunchConfiguration.prototype['configureScriptType'] = undefined;






export default ServerLaunchConfiguration;

