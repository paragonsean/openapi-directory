/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReplicationRunStageDetails;
import org.openapitools.client.model.ReplicationRunState;
import org.openapitools.client.model.ReplicationRunType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a replication run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:47.146770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationRun {
  public static final String SERIALIZED_NAME_REPLICATION_RUN_ID = "replicationRunId";
  @SerializedName(SERIALIZED_NAME_REPLICATION_RUN_ID)
  private String replicationRunId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private ReplicationRunState state;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ReplicationRunType type;

  public static final String SERIALIZED_NAME_STAGE_DETAILS = "stageDetails";
  @SerializedName(SERIALIZED_NAME_STAGE_DETAILS)
  private ReplicationRunStageDetails stageDetails;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_AMI_ID = "amiId";
  @SerializedName(SERIALIZED_NAME_AMI_ID)
  private String amiId;

  public static final String SERIALIZED_NAME_SCHEDULED_START_TIME = "scheduledStartTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_START_TIME)
  private OffsetDateTime scheduledStartTime;

  public static final String SERIALIZED_NAME_COMPLETED_TIME = "completedTime";
  @SerializedName(SERIALIZED_NAME_COMPLETED_TIME)
  private OffsetDateTime completedTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENCRYPTED = "encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "kmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public ReplicationRun() {
  }

  public ReplicationRun replicationRunId(String replicationRunId) {
    this.replicationRunId = replicationRunId;
    return this;
  }

  /**
   * Get replicationRunId
   * @return replicationRunId
   */
  @javax.annotation.Nullable
  public String getReplicationRunId() {
    return replicationRunId;
  }

  public void setReplicationRunId(String replicationRunId) {
    this.replicationRunId = replicationRunId;
  }


  public ReplicationRun state(ReplicationRunState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public ReplicationRunState getState() {
    return state;
  }

  public void setState(ReplicationRunState state) {
    this.state = state;
  }


  public ReplicationRun type(ReplicationRunType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ReplicationRunType getType() {
    return type;
  }

  public void setType(ReplicationRunType type) {
    this.type = type;
  }


  public ReplicationRun stageDetails(ReplicationRunStageDetails stageDetails) {
    this.stageDetails = stageDetails;
    return this;
  }

  /**
   * Get stageDetails
   * @return stageDetails
   */
  @javax.annotation.Nullable
  public ReplicationRunStageDetails getStageDetails() {
    return stageDetails;
  }

  public void setStageDetails(ReplicationRunStageDetails stageDetails) {
    this.stageDetails = stageDetails;
  }


  public ReplicationRun statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public ReplicationRun amiId(String amiId) {
    this.amiId = amiId;
    return this;
  }

  /**
   * Get amiId
   * @return amiId
   */
  @javax.annotation.Nullable
  public String getAmiId() {
    return amiId;
  }

  public void setAmiId(String amiId) {
    this.amiId = amiId;
  }


  public ReplicationRun scheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
    return this;
  }

  /**
   * Get scheduledStartTime
   * @return scheduledStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getScheduledStartTime() {
    return scheduledStartTime;
  }

  public void setScheduledStartTime(OffsetDateTime scheduledStartTime) {
    this.scheduledStartTime = scheduledStartTime;
  }


  public ReplicationRun completedTime(OffsetDateTime completedTime) {
    this.completedTime = completedTime;
    return this;
  }

  /**
   * Get completedTime
   * @return completedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCompletedTime() {
    return completedTime;
  }

  public void setCompletedTime(OffsetDateTime completedTime) {
    this.completedTime = completedTime;
  }


  public ReplicationRun description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReplicationRun encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

  /**
   * Get encrypted
   * @return encrypted
   */
  @javax.annotation.Nullable
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public ReplicationRun kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationRun replicationRun = (ReplicationRun) o;
    return Objects.equals(this.replicationRunId, replicationRun.replicationRunId) &&
        Objects.equals(this.state, replicationRun.state) &&
        Objects.equals(this.type, replicationRun.type) &&
        Objects.equals(this.stageDetails, replicationRun.stageDetails) &&
        Objects.equals(this.statusMessage, replicationRun.statusMessage) &&
        Objects.equals(this.amiId, replicationRun.amiId) &&
        Objects.equals(this.scheduledStartTime, replicationRun.scheduledStartTime) &&
        Objects.equals(this.completedTime, replicationRun.completedTime) &&
        Objects.equals(this.description, replicationRun.description) &&
        Objects.equals(this.encrypted, replicationRun.encrypted) &&
        Objects.equals(this.kmsKeyId, replicationRun.kmsKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replicationRunId, state, type, stageDetails, statusMessage, amiId, scheduledStartTime, completedTime, description, encrypted, kmsKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationRun {\n");
    sb.append("    replicationRunId: ").append(toIndentedString(replicationRunId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    stageDetails: ").append(toIndentedString(stageDetails)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    amiId: ").append(toIndentedString(amiId)).append("\n");
    sb.append("    scheduledStartTime: ").append(toIndentedString(scheduledStartTime)).append("\n");
    sb.append("    completedTime: ").append(toIndentedString(completedTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("replicationRunId");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("stageDetails");
    openapiFields.add("statusMessage");
    openapiFields.add("amiId");
    openapiFields.add("scheduledStartTime");
    openapiFields.add("completedTime");
    openapiFields.add("description");
    openapiFields.add("encrypted");
    openapiFields.add("kmsKeyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationRun is not found in the empty JSON string", ReplicationRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `replicationRunId`
      if (jsonObj.get("replicationRunId") != null && !jsonObj.get("replicationRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("replicationRunId"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        ReplicationRunState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        ReplicationRunType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `stageDetails`
      if (jsonObj.get("stageDetails") != null && !jsonObj.get("stageDetails").isJsonNull()) {
        ReplicationRunStageDetails.validateJsonElement(jsonObj.get("stageDetails"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `amiId`
      if (jsonObj.get("amiId") != null && !jsonObj.get("amiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("amiId"));
      }
      // validate the optional field `scheduledStartTime`
      if (jsonObj.get("scheduledStartTime") != null && !jsonObj.get("scheduledStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("scheduledStartTime"));
      }
      // validate the optional field `completedTime`
      if (jsonObj.get("completedTime") != null && !jsonObj.get("completedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("completedTime"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `encrypted`
      if (jsonObj.get("encrypted") != null && !jsonObj.get("encrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("encrypted"));
      }
      // validate the optional field `kmsKeyId`
      if (jsonObj.get("kmsKeyId") != null && !jsonObj.get("kmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("kmsKeyId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationRun.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationRun>() {
           @Override
           public void write(JsonWriter out, ReplicationRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationRun
   * @throws IOException if the JSON string is invalid with respect to ReplicationRun
   */
  public static ReplicationRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationRun.class);
  }

  /**
   * Convert an instance of ReplicationRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

