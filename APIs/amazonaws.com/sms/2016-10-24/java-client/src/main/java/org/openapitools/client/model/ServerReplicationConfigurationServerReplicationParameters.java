/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LicenseType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServerReplicationConfigurationServerReplicationParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:47.146770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerReplicationConfigurationServerReplicationParameters {
  public static final String SERIALIZED_NAME_SEED_TIME = "seedTime";
  @SerializedName(SERIALIZED_NAME_SEED_TIME)
  private OffsetDateTime seedTime;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency;

  public static final String SERIALIZED_NAME_RUN_ONCE = "runOnce";
  @SerializedName(SERIALIZED_NAME_RUN_ONCE)
  private Boolean runOnce;

  public static final String SERIALIZED_NAME_LICENSE_TYPE = "licenseType";
  @SerializedName(SERIALIZED_NAME_LICENSE_TYPE)
  private LicenseType licenseType;

  public static final String SERIALIZED_NAME_NUMBER_OF_RECENT_AMIS_TO_KEEP = "numberOfRecentAmisToKeep";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RECENT_AMIS_TO_KEEP)
  private Integer numberOfRecentAmisToKeep;

  public static final String SERIALIZED_NAME_ENCRYPTED = "encrypted";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED)
  private Boolean encrypted;

  public static final String SERIALIZED_NAME_KMS_KEY_ID = "kmsKeyId";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ID)
  private String kmsKeyId;

  public ServerReplicationConfigurationServerReplicationParameters() {
  }

  public ServerReplicationConfigurationServerReplicationParameters seedTime(OffsetDateTime seedTime) {
    this.seedTime = seedTime;
    return this;
  }

  /**
   * Get seedTime
   * @return seedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSeedTime() {
    return seedTime;
  }

  public void setSeedTime(OffsetDateTime seedTime) {
    this.seedTime = seedTime;
  }


  public ServerReplicationConfigurationServerReplicationParameters frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Get frequency
   * @return frequency
   */
  @javax.annotation.Nullable
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }


  public ServerReplicationConfigurationServerReplicationParameters runOnce(Boolean runOnce) {
    this.runOnce = runOnce;
    return this;
  }

  /**
   * Get runOnce
   * @return runOnce
   */
  @javax.annotation.Nullable
  public Boolean getRunOnce() {
    return runOnce;
  }

  public void setRunOnce(Boolean runOnce) {
    this.runOnce = runOnce;
  }


  public ServerReplicationConfigurationServerReplicationParameters licenseType(LicenseType licenseType) {
    this.licenseType = licenseType;
    return this;
  }

  /**
   * Get licenseType
   * @return licenseType
   */
  @javax.annotation.Nullable
  public LicenseType getLicenseType() {
    return licenseType;
  }

  public void setLicenseType(LicenseType licenseType) {
    this.licenseType = licenseType;
  }


  public ServerReplicationConfigurationServerReplicationParameters numberOfRecentAmisToKeep(Integer numberOfRecentAmisToKeep) {
    this.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep;
    return this;
  }

  /**
   * Get numberOfRecentAmisToKeep
   * @return numberOfRecentAmisToKeep
   */
  @javax.annotation.Nullable
  public Integer getNumberOfRecentAmisToKeep() {
    return numberOfRecentAmisToKeep;
  }

  public void setNumberOfRecentAmisToKeep(Integer numberOfRecentAmisToKeep) {
    this.numberOfRecentAmisToKeep = numberOfRecentAmisToKeep;
  }


  public ServerReplicationConfigurationServerReplicationParameters encrypted(Boolean encrypted) {
    this.encrypted = encrypted;
    return this;
  }

  /**
   * Get encrypted
   * @return encrypted
   */
  @javax.annotation.Nullable
  public Boolean getEncrypted() {
    return encrypted;
  }

  public void setEncrypted(Boolean encrypted) {
    this.encrypted = encrypted;
  }


  public ServerReplicationConfigurationServerReplicationParameters kmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
    return this;
  }

  /**
   * Get kmsKeyId
   * @return kmsKeyId
   */
  @javax.annotation.Nullable
  public String getKmsKeyId() {
    return kmsKeyId;
  }

  public void setKmsKeyId(String kmsKeyId) {
    this.kmsKeyId = kmsKeyId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerReplicationConfigurationServerReplicationParameters serverReplicationConfigurationServerReplicationParameters = (ServerReplicationConfigurationServerReplicationParameters) o;
    return Objects.equals(this.seedTime, serverReplicationConfigurationServerReplicationParameters.seedTime) &&
        Objects.equals(this.frequency, serverReplicationConfigurationServerReplicationParameters.frequency) &&
        Objects.equals(this.runOnce, serverReplicationConfigurationServerReplicationParameters.runOnce) &&
        Objects.equals(this.licenseType, serverReplicationConfigurationServerReplicationParameters.licenseType) &&
        Objects.equals(this.numberOfRecentAmisToKeep, serverReplicationConfigurationServerReplicationParameters.numberOfRecentAmisToKeep) &&
        Objects.equals(this.encrypted, serverReplicationConfigurationServerReplicationParameters.encrypted) &&
        Objects.equals(this.kmsKeyId, serverReplicationConfigurationServerReplicationParameters.kmsKeyId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(seedTime, frequency, runOnce, licenseType, numberOfRecentAmisToKeep, encrypted, kmsKeyId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerReplicationConfigurationServerReplicationParameters {\n");
    sb.append("    seedTime: ").append(toIndentedString(seedTime)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    runOnce: ").append(toIndentedString(runOnce)).append("\n");
    sb.append("    licenseType: ").append(toIndentedString(licenseType)).append("\n");
    sb.append("    numberOfRecentAmisToKeep: ").append(toIndentedString(numberOfRecentAmisToKeep)).append("\n");
    sb.append("    encrypted: ").append(toIndentedString(encrypted)).append("\n");
    sb.append("    kmsKeyId: ").append(toIndentedString(kmsKeyId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("seedTime");
    openapiFields.add("frequency");
    openapiFields.add("runOnce");
    openapiFields.add("licenseType");
    openapiFields.add("numberOfRecentAmisToKeep");
    openapiFields.add("encrypted");
    openapiFields.add("kmsKeyId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerReplicationConfigurationServerReplicationParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerReplicationConfigurationServerReplicationParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerReplicationConfigurationServerReplicationParameters is not found in the empty JSON string", ServerReplicationConfigurationServerReplicationParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerReplicationConfigurationServerReplicationParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerReplicationConfigurationServerReplicationParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `seedTime`
      if (jsonObj.get("seedTime") != null && !jsonObj.get("seedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("seedTime"));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("frequency"));
      }
      // validate the optional field `runOnce`
      if (jsonObj.get("runOnce") != null && !jsonObj.get("runOnce").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("runOnce"));
      }
      // validate the optional field `licenseType`
      if (jsonObj.get("licenseType") != null && !jsonObj.get("licenseType").isJsonNull()) {
        LicenseType.validateJsonElement(jsonObj.get("licenseType"));
      }
      // validate the optional field `numberOfRecentAmisToKeep`
      if (jsonObj.get("numberOfRecentAmisToKeep") != null && !jsonObj.get("numberOfRecentAmisToKeep").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("numberOfRecentAmisToKeep"));
      }
      // validate the optional field `encrypted`
      if (jsonObj.get("encrypted") != null && !jsonObj.get("encrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("encrypted"));
      }
      // validate the optional field `kmsKeyId`
      if (jsonObj.get("kmsKeyId") != null && !jsonObj.get("kmsKeyId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("kmsKeyId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerReplicationConfigurationServerReplicationParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerReplicationConfigurationServerReplicationParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerReplicationConfigurationServerReplicationParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerReplicationConfigurationServerReplicationParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerReplicationConfigurationServerReplicationParameters>() {
           @Override
           public void write(JsonWriter out, ServerReplicationConfigurationServerReplicationParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerReplicationConfigurationServerReplicationParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerReplicationConfigurationServerReplicationParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerReplicationConfigurationServerReplicationParameters
   * @throws IOException if the JSON string is invalid with respect to ServerReplicationConfigurationServerReplicationParameters
   */
  public static ServerReplicationConfigurationServerReplicationParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerReplicationConfigurationServerReplicationParameters.class);
  }

  /**
   * Convert an instance of ServerReplicationConfigurationServerReplicationParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

