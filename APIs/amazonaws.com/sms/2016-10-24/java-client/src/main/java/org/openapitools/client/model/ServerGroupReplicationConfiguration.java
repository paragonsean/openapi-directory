/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication configuration for a server group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:47.146770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerGroupReplicationConfiguration {
  public static final String SERIALIZED_NAME_SERVER_GROUP_ID = "serverGroupId";
  @SerializedName(SERIALIZED_NAME_SERVER_GROUP_ID)
  private String serverGroupId;

  public static final String SERIALIZED_NAME_SERVER_REPLICATION_CONFIGURATIONS = "serverReplicationConfigurations";
  @SerializedName(SERIALIZED_NAME_SERVER_REPLICATION_CONFIGURATIONS)
  private List serverReplicationConfigurations;

  public ServerGroupReplicationConfiguration() {
  }

  public ServerGroupReplicationConfiguration serverGroupId(String serverGroupId) {
    this.serverGroupId = serverGroupId;
    return this;
  }

  /**
   * Get serverGroupId
   * @return serverGroupId
   */
  @javax.annotation.Nullable
  public String getServerGroupId() {
    return serverGroupId;
  }

  public void setServerGroupId(String serverGroupId) {
    this.serverGroupId = serverGroupId;
  }


  public ServerGroupReplicationConfiguration serverReplicationConfigurations(List serverReplicationConfigurations) {
    this.serverReplicationConfigurations = serverReplicationConfigurations;
    return this;
  }

  /**
   * Get serverReplicationConfigurations
   * @return serverReplicationConfigurations
   */
  @javax.annotation.Nullable
  public List getServerReplicationConfigurations() {
    return serverReplicationConfigurations;
  }

  public void setServerReplicationConfigurations(List serverReplicationConfigurations) {
    this.serverReplicationConfigurations = serverReplicationConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerGroupReplicationConfiguration serverGroupReplicationConfiguration = (ServerGroupReplicationConfiguration) o;
    return Objects.equals(this.serverGroupId, serverGroupReplicationConfiguration.serverGroupId) &&
        Objects.equals(this.serverReplicationConfigurations, serverGroupReplicationConfiguration.serverReplicationConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serverGroupId, serverReplicationConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerGroupReplicationConfiguration {\n");
    sb.append("    serverGroupId: ").append(toIndentedString(serverGroupId)).append("\n");
    sb.append("    serverReplicationConfigurations: ").append(toIndentedString(serverReplicationConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("serverGroupId");
    openapiFields.add("serverReplicationConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerGroupReplicationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerGroupReplicationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerGroupReplicationConfiguration is not found in the empty JSON string", ServerGroupReplicationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerGroupReplicationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerGroupReplicationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `serverGroupId`
      if (jsonObj.get("serverGroupId") != null && !jsonObj.get("serverGroupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("serverGroupId"));
      }
      // validate the optional field `serverReplicationConfigurations`
      if (jsonObj.get("serverReplicationConfigurations") != null && !jsonObj.get("serverReplicationConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("serverReplicationConfigurations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerGroupReplicationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerGroupReplicationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerGroupReplicationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerGroupReplicationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerGroupReplicationConfiguration>() {
           @Override
           public void write(JsonWriter out, ServerGroupReplicationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerGroupReplicationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerGroupReplicationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerGroupReplicationConfiguration
   * @throws IOException if the JSON string is invalid with respect to ServerGroupReplicationConfiguration
   */
  public static ServerGroupReplicationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerGroupReplicationConfiguration.class);
  }

  /**
   * Convert an instance of ServerGroupReplicationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

