/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3Location;
import org.openapitools.client.model.ScriptType;
import org.openapitools.client.model.ServerLaunchConfigurationServer;
import org.openapitools.client.model.ServerLaunchConfigurationUserData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Launch configuration for a server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:47.146770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServerLaunchConfiguration {
  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private ServerLaunchConfigurationServer server;

  public static final String SERIALIZED_NAME_LOGICAL_ID = "logicalId";
  @SerializedName(SERIALIZED_NAME_LOGICAL_ID)
  private String logicalId;

  public static final String SERIALIZED_NAME_VPC = "vpc";
  @SerializedName(SERIALIZED_NAME_VPC)
  private String vpc;

  public static final String SERIALIZED_NAME_SUBNET = "subnet";
  @SerializedName(SERIALIZED_NAME_SUBNET)
  private String subnet;

  public static final String SERIALIZED_NAME_SECURITY_GROUP = "securityGroup";
  @SerializedName(SERIALIZED_NAME_SECURITY_GROUP)
  private String securityGroup;

  public static final String SERIALIZED_NAME_EC2_KEY_NAME = "ec2KeyName";
  @SerializedName(SERIALIZED_NAME_EC2_KEY_NAME)
  private String ec2KeyName;

  public static final String SERIALIZED_NAME_USER_DATA = "userData";
  @SerializedName(SERIALIZED_NAME_USER_DATA)
  private ServerLaunchConfigurationUserData userData;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_ASSOCIATE_PUBLIC_IP_ADDRESS = "associatePublicIpAddress";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_PUBLIC_IP_ADDRESS)
  private Boolean associatePublicIpAddress;

  public static final String SERIALIZED_NAME_IAM_INSTANCE_PROFILE_NAME = "iamInstanceProfileName";
  @SerializedName(SERIALIZED_NAME_IAM_INSTANCE_PROFILE_NAME)
  private String iamInstanceProfileName;

  public static final String SERIALIZED_NAME_CONFIGURE_SCRIPT = "configureScript";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_SCRIPT)
  private S3Location configureScript;

  public static final String SERIALIZED_NAME_CONFIGURE_SCRIPT_TYPE = "configureScriptType";
  @SerializedName(SERIALIZED_NAME_CONFIGURE_SCRIPT_TYPE)
  private ScriptType configureScriptType;

  public ServerLaunchConfiguration() {
  }

  public ServerLaunchConfiguration server(ServerLaunchConfigurationServer server) {
    this.server = server;
    return this;
  }

  /**
   * Get server
   * @return server
   */
  @javax.annotation.Nullable
  public ServerLaunchConfigurationServer getServer() {
    return server;
  }

  public void setServer(ServerLaunchConfigurationServer server) {
    this.server = server;
  }


  public ServerLaunchConfiguration logicalId(String logicalId) {
    this.logicalId = logicalId;
    return this;
  }

  /**
   * Get logicalId
   * @return logicalId
   */
  @javax.annotation.Nullable
  public String getLogicalId() {
    return logicalId;
  }

  public void setLogicalId(String logicalId) {
    this.logicalId = logicalId;
  }


  public ServerLaunchConfiguration vpc(String vpc) {
    this.vpc = vpc;
    return this;
  }

  /**
   * Get vpc
   * @return vpc
   */
  @javax.annotation.Nullable
  public String getVpc() {
    return vpc;
  }

  public void setVpc(String vpc) {
    this.vpc = vpc;
  }


  public ServerLaunchConfiguration subnet(String subnet) {
    this.subnet = subnet;
    return this;
  }

  /**
   * Get subnet
   * @return subnet
   */
  @javax.annotation.Nullable
  public String getSubnet() {
    return subnet;
  }

  public void setSubnet(String subnet) {
    this.subnet = subnet;
  }


  public ServerLaunchConfiguration securityGroup(String securityGroup) {
    this.securityGroup = securityGroup;
    return this;
  }

  /**
   * Get securityGroup
   * @return securityGroup
   */
  @javax.annotation.Nullable
  public String getSecurityGroup() {
    return securityGroup;
  }

  public void setSecurityGroup(String securityGroup) {
    this.securityGroup = securityGroup;
  }


  public ServerLaunchConfiguration ec2KeyName(String ec2KeyName) {
    this.ec2KeyName = ec2KeyName;
    return this;
  }

  /**
   * Get ec2KeyName
   * @return ec2KeyName
   */
  @javax.annotation.Nullable
  public String getEc2KeyName() {
    return ec2KeyName;
  }

  public void setEc2KeyName(String ec2KeyName) {
    this.ec2KeyName = ec2KeyName;
  }


  public ServerLaunchConfiguration userData(ServerLaunchConfigurationUserData userData) {
    this.userData = userData;
    return this;
  }

  /**
   * Get userData
   * @return userData
   */
  @javax.annotation.Nullable
  public ServerLaunchConfigurationUserData getUserData() {
    return userData;
  }

  public void setUserData(ServerLaunchConfigurationUserData userData) {
    this.userData = userData;
  }


  public ServerLaunchConfiguration instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public ServerLaunchConfiguration associatePublicIpAddress(Boolean associatePublicIpAddress) {
    this.associatePublicIpAddress = associatePublicIpAddress;
    return this;
  }

  /**
   * Get associatePublicIpAddress
   * @return associatePublicIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getAssociatePublicIpAddress() {
    return associatePublicIpAddress;
  }

  public void setAssociatePublicIpAddress(Boolean associatePublicIpAddress) {
    this.associatePublicIpAddress = associatePublicIpAddress;
  }


  public ServerLaunchConfiguration iamInstanceProfileName(String iamInstanceProfileName) {
    this.iamInstanceProfileName = iamInstanceProfileName;
    return this;
  }

  /**
   * Get iamInstanceProfileName
   * @return iamInstanceProfileName
   */
  @javax.annotation.Nullable
  public String getIamInstanceProfileName() {
    return iamInstanceProfileName;
  }

  public void setIamInstanceProfileName(String iamInstanceProfileName) {
    this.iamInstanceProfileName = iamInstanceProfileName;
  }


  public ServerLaunchConfiguration configureScript(S3Location configureScript) {
    this.configureScript = configureScript;
    return this;
  }

  /**
   * Get configureScript
   * @return configureScript
   */
  @javax.annotation.Nullable
  public S3Location getConfigureScript() {
    return configureScript;
  }

  public void setConfigureScript(S3Location configureScript) {
    this.configureScript = configureScript;
  }


  public ServerLaunchConfiguration configureScriptType(ScriptType configureScriptType) {
    this.configureScriptType = configureScriptType;
    return this;
  }

  /**
   * Get configureScriptType
   * @return configureScriptType
   */
  @javax.annotation.Nullable
  public ScriptType getConfigureScriptType() {
    return configureScriptType;
  }

  public void setConfigureScriptType(ScriptType configureScriptType) {
    this.configureScriptType = configureScriptType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerLaunchConfiguration serverLaunchConfiguration = (ServerLaunchConfiguration) o;
    return Objects.equals(this.server, serverLaunchConfiguration.server) &&
        Objects.equals(this.logicalId, serverLaunchConfiguration.logicalId) &&
        Objects.equals(this.vpc, serverLaunchConfiguration.vpc) &&
        Objects.equals(this.subnet, serverLaunchConfiguration.subnet) &&
        Objects.equals(this.securityGroup, serverLaunchConfiguration.securityGroup) &&
        Objects.equals(this.ec2KeyName, serverLaunchConfiguration.ec2KeyName) &&
        Objects.equals(this.userData, serverLaunchConfiguration.userData) &&
        Objects.equals(this.instanceType, serverLaunchConfiguration.instanceType) &&
        Objects.equals(this.associatePublicIpAddress, serverLaunchConfiguration.associatePublicIpAddress) &&
        Objects.equals(this.iamInstanceProfileName, serverLaunchConfiguration.iamInstanceProfileName) &&
        Objects.equals(this.configureScript, serverLaunchConfiguration.configureScript) &&
        Objects.equals(this.configureScriptType, serverLaunchConfiguration.configureScriptType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(server, logicalId, vpc, subnet, securityGroup, ec2KeyName, userData, instanceType, associatePublicIpAddress, iamInstanceProfileName, configureScript, configureScriptType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerLaunchConfiguration {\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    logicalId: ").append(toIndentedString(logicalId)).append("\n");
    sb.append("    vpc: ").append(toIndentedString(vpc)).append("\n");
    sb.append("    subnet: ").append(toIndentedString(subnet)).append("\n");
    sb.append("    securityGroup: ").append(toIndentedString(securityGroup)).append("\n");
    sb.append("    ec2KeyName: ").append(toIndentedString(ec2KeyName)).append("\n");
    sb.append("    userData: ").append(toIndentedString(userData)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    associatePublicIpAddress: ").append(toIndentedString(associatePublicIpAddress)).append("\n");
    sb.append("    iamInstanceProfileName: ").append(toIndentedString(iamInstanceProfileName)).append("\n");
    sb.append("    configureScript: ").append(toIndentedString(configureScript)).append("\n");
    sb.append("    configureScriptType: ").append(toIndentedString(configureScriptType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("server");
    openapiFields.add("logicalId");
    openapiFields.add("vpc");
    openapiFields.add("subnet");
    openapiFields.add("securityGroup");
    openapiFields.add("ec2KeyName");
    openapiFields.add("userData");
    openapiFields.add("instanceType");
    openapiFields.add("associatePublicIpAddress");
    openapiFields.add("iamInstanceProfileName");
    openapiFields.add("configureScript");
    openapiFields.add("configureScriptType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerLaunchConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServerLaunchConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerLaunchConfiguration is not found in the empty JSON string", ServerLaunchConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerLaunchConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerLaunchConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `server`
      if (jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) {
        ServerLaunchConfigurationServer.validateJsonElement(jsonObj.get("server"));
      }
      // validate the optional field `logicalId`
      if (jsonObj.get("logicalId") != null && !jsonObj.get("logicalId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("logicalId"));
      }
      // validate the optional field `vpc`
      if (jsonObj.get("vpc") != null && !jsonObj.get("vpc").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vpc"));
      }
      // validate the optional field `subnet`
      if (jsonObj.get("subnet") != null && !jsonObj.get("subnet").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subnet"));
      }
      // validate the optional field `securityGroup`
      if (jsonObj.get("securityGroup") != null && !jsonObj.get("securityGroup").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("securityGroup"));
      }
      // validate the optional field `ec2KeyName`
      if (jsonObj.get("ec2KeyName") != null && !jsonObj.get("ec2KeyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2KeyName"));
      }
      // validate the optional field `userData`
      if (jsonObj.get("userData") != null && !jsonObj.get("userData").isJsonNull()) {
        ServerLaunchConfigurationUserData.validateJsonElement(jsonObj.get("userData"));
      }
      // validate the optional field `instanceType`
      if (jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("instanceType"));
      }
      // validate the optional field `associatePublicIpAddress`
      if (jsonObj.get("associatePublicIpAddress") != null && !jsonObj.get("associatePublicIpAddress").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("associatePublicIpAddress"));
      }
      // validate the optional field `iamInstanceProfileName`
      if (jsonObj.get("iamInstanceProfileName") != null && !jsonObj.get("iamInstanceProfileName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("iamInstanceProfileName"));
      }
      // validate the optional field `configureScript`
      if (jsonObj.get("configureScript") != null && !jsonObj.get("configureScript").isJsonNull()) {
        S3Location.validateJsonElement(jsonObj.get("configureScript"));
      }
      // validate the optional field `configureScriptType`
      if (jsonObj.get("configureScriptType") != null && !jsonObj.get("configureScriptType").isJsonNull()) {
        ScriptType.validateJsonElement(jsonObj.get("configureScriptType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerLaunchConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerLaunchConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerLaunchConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerLaunchConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerLaunchConfiguration>() {
           @Override
           public void write(JsonWriter out, ServerLaunchConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerLaunchConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerLaunchConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerLaunchConfiguration
   * @throws IOException if the JSON string is invalid with respect to ServerLaunchConfiguration
   */
  public static ServerLaunchConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerLaunchConfiguration.class);
  }

  /**
   * Convert an instance of ServerLaunchConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

