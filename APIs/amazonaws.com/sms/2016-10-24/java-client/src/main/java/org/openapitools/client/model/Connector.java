/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConnectorStatus;
import org.openapitools.client.model.VmManagerType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:23:47.146770-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Connector {
  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  private String connectorId;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ConnectorStatus status;

  public static final String SERIALIZED_NAME_CAPABILITY_LIST = "capabilityList";
  @SerializedName(SERIALIZED_NAME_CAPABILITY_LIST)
  private List capabilityList;

  public static final String SERIALIZED_NAME_VM_MANAGER_NAME = "vmManagerName";
  @SerializedName(SERIALIZED_NAME_VM_MANAGER_NAME)
  private String vmManagerName;

  public static final String SERIALIZED_NAME_VM_MANAGER_TYPE = "vmManagerType";
  @SerializedName(SERIALIZED_NAME_VM_MANAGER_TYPE)
  private VmManagerType vmManagerType;

  public static final String SERIALIZED_NAME_VM_MANAGER_ID = "vmManagerId";
  @SerializedName(SERIALIZED_NAME_VM_MANAGER_ID)
  private String vmManagerId;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_ASSOCIATED_ON = "associatedOn";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_ON)
  private OffsetDateTime associatedOn;

  public Connector() {
  }

  public Connector connectorId(String connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nullable
  public String getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(String connectorId) {
    this.connectorId = connectorId;
  }


  public Connector version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public Connector status(ConnectorStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ConnectorStatus getStatus() {
    return status;
  }

  public void setStatus(ConnectorStatus status) {
    this.status = status;
  }


  public Connector capabilityList(List capabilityList) {
    this.capabilityList = capabilityList;
    return this;
  }

  /**
   * Get capabilityList
   * @return capabilityList
   */
  @javax.annotation.Nullable
  public List getCapabilityList() {
    return capabilityList;
  }

  public void setCapabilityList(List capabilityList) {
    this.capabilityList = capabilityList;
  }


  public Connector vmManagerName(String vmManagerName) {
    this.vmManagerName = vmManagerName;
    return this;
  }

  /**
   * Get vmManagerName
   * @return vmManagerName
   */
  @javax.annotation.Nullable
  public String getVmManagerName() {
    return vmManagerName;
  }

  public void setVmManagerName(String vmManagerName) {
    this.vmManagerName = vmManagerName;
  }


  public Connector vmManagerType(VmManagerType vmManagerType) {
    this.vmManagerType = vmManagerType;
    return this;
  }

  /**
   * Get vmManagerType
   * @return vmManagerType
   */
  @javax.annotation.Nullable
  public VmManagerType getVmManagerType() {
    return vmManagerType;
  }

  public void setVmManagerType(VmManagerType vmManagerType) {
    this.vmManagerType = vmManagerType;
  }


  public Connector vmManagerId(String vmManagerId) {
    this.vmManagerId = vmManagerId;
    return this;
  }

  /**
   * Get vmManagerId
   * @return vmManagerId
   */
  @javax.annotation.Nullable
  public String getVmManagerId() {
    return vmManagerId;
  }

  public void setVmManagerId(String vmManagerId) {
    this.vmManagerId = vmManagerId;
  }


  public Connector ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Connector macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * Get macAddress
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public Connector associatedOn(OffsetDateTime associatedOn) {
    this.associatedOn = associatedOn;
    return this;
  }

  /**
   * Get associatedOn
   * @return associatedOn
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAssociatedOn() {
    return associatedOn;
  }

  public void setAssociatedOn(OffsetDateTime associatedOn) {
    this.associatedOn = associatedOn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connector connector = (Connector) o;
    return Objects.equals(this.connectorId, connector.connectorId) &&
        Objects.equals(this.version, connector.version) &&
        Objects.equals(this.status, connector.status) &&
        Objects.equals(this.capabilityList, connector.capabilityList) &&
        Objects.equals(this.vmManagerName, connector.vmManagerName) &&
        Objects.equals(this.vmManagerType, connector.vmManagerType) &&
        Objects.equals(this.vmManagerId, connector.vmManagerId) &&
        Objects.equals(this.ipAddress, connector.ipAddress) &&
        Objects.equals(this.macAddress, connector.macAddress) &&
        Objects.equals(this.associatedOn, connector.associatedOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, version, status, capabilityList, vmManagerName, vmManagerType, vmManagerId, ipAddress, macAddress, associatedOn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connector {\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    capabilityList: ").append(toIndentedString(capabilityList)).append("\n");
    sb.append("    vmManagerName: ").append(toIndentedString(vmManagerName)).append("\n");
    sb.append("    vmManagerType: ").append(toIndentedString(vmManagerType)).append("\n");
    sb.append("    vmManagerId: ").append(toIndentedString(vmManagerId)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    associatedOn: ").append(toIndentedString(associatedOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorId");
    openapiFields.add("version");
    openapiFields.add("status");
    openapiFields.add("capabilityList");
    openapiFields.add("vmManagerName");
    openapiFields.add("vmManagerType");
    openapiFields.add("vmManagerId");
    openapiFields.add("ipAddress");
    openapiFields.add("macAddress");
    openapiFields.add("associatedOn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Connector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connector is not found in the empty JSON string", Connector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `connectorId`
      if (jsonObj.get("connectorId") != null && !jsonObj.get("connectorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("connectorId"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ConnectorStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `capabilityList`
      if (jsonObj.get("capabilityList") != null && !jsonObj.get("capabilityList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("capabilityList"));
      }
      // validate the optional field `vmManagerName`
      if (jsonObj.get("vmManagerName") != null && !jsonObj.get("vmManagerName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vmManagerName"));
      }
      // validate the optional field `vmManagerType`
      if (jsonObj.get("vmManagerType") != null && !jsonObj.get("vmManagerType").isJsonNull()) {
        VmManagerType.validateJsonElement(jsonObj.get("vmManagerType"));
      }
      // validate the optional field `vmManagerId`
      if (jsonObj.get("vmManagerId") != null && !jsonObj.get("vmManagerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vmManagerId"));
      }
      // validate the optional field `ipAddress`
      if (jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ipAddress"));
      }
      // validate the optional field `macAddress`
      if (jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("macAddress"));
      }
      // validate the optional field `associatedOn`
      if (jsonObj.get("associatedOn") != null && !jsonObj.get("associatedOn").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("associatedOn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connector.class));

       return (TypeAdapter<T>) new TypeAdapter<Connector>() {
           @Override
           public void write(JsonWriter out, Connector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Connector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Connector
   * @throws IOException if the JSON string is invalid with respect to Connector
   */
  public static Connector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connector.class);
  }

  /**
   * Convert an instance of Connector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

