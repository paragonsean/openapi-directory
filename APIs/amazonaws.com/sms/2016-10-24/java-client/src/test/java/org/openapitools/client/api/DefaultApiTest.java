/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateAppRequest;
import org.openapitools.client.model.CreateAppResponse;
import org.openapitools.client.model.CreateReplicationJobRequest;
import org.openapitools.client.model.CreateReplicationJobResponse;
import org.openapitools.client.model.DeleteAppLaunchConfigurationRequest;
import org.openapitools.client.model.DeleteAppReplicationConfigurationRequest;
import org.openapitools.client.model.DeleteAppRequest;
import org.openapitools.client.model.DeleteAppValidationConfigurationRequest;
import org.openapitools.client.model.DeleteReplicationJobRequest;
import org.openapitools.client.model.DisassociateConnectorRequest;
import org.openapitools.client.model.GenerateChangeSetRequest;
import org.openapitools.client.model.GenerateChangeSetResponse;
import org.openapitools.client.model.GenerateTemplateRequest;
import org.openapitools.client.model.GenerateTemplateResponse;
import org.openapitools.client.model.GetAppLaunchConfigurationRequest;
import org.openapitools.client.model.GetAppLaunchConfigurationResponse;
import org.openapitools.client.model.GetAppReplicationConfigurationRequest;
import org.openapitools.client.model.GetAppReplicationConfigurationResponse;
import org.openapitools.client.model.GetAppRequest;
import org.openapitools.client.model.GetAppResponse;
import org.openapitools.client.model.GetAppValidationConfigurationRequest;
import org.openapitools.client.model.GetAppValidationConfigurationResponse;
import org.openapitools.client.model.GetAppValidationOutputRequest;
import org.openapitools.client.model.GetAppValidationOutputResponse;
import org.openapitools.client.model.GetConnectorsRequest;
import org.openapitools.client.model.GetConnectorsResponse;
import org.openapitools.client.model.GetReplicationJobsRequest;
import org.openapitools.client.model.GetReplicationJobsResponse;
import org.openapitools.client.model.GetReplicationRunsRequest;
import org.openapitools.client.model.GetReplicationRunsResponse;
import org.openapitools.client.model.GetServersRequest;
import org.openapitools.client.model.GetServersResponse;
import org.openapitools.client.model.ImportAppCatalogRequest;
import org.openapitools.client.model.LaunchAppRequest;
import org.openapitools.client.model.ListAppsRequest;
import org.openapitools.client.model.ListAppsResponse;
import org.openapitools.client.model.NotifyAppValidationOutputRequest;
import org.openapitools.client.model.PutAppLaunchConfigurationRequest;
import org.openapitools.client.model.PutAppReplicationConfigurationRequest;
import org.openapitools.client.model.PutAppValidationConfigurationRequest;
import org.openapitools.client.model.StartAppReplicationRequest;
import org.openapitools.client.model.StartOnDemandAppReplicationRequest;
import org.openapitools.client.model.StartOnDemandReplicationRunRequest;
import org.openapitools.client.model.StartOnDemandReplicationRunResponse;
import org.openapitools.client.model.StopAppReplicationRequest;
import org.openapitools.client.model.TerminateAppRequest;
import org.openapitools.client.model.UpdateAppRequest;
import org.openapitools.client.model.UpdateAppResponse;
import org.openapitools.client.model.UpdateReplicationJobRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an application. An application consists of one or more server groups. Each server group contain one or more servers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        String xAmzTarget = null;
        CreateAppRequest createAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAppResponse response = api.createApp(xAmzTarget, createAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a replication job. The replication job schedules periodic replication runs to replicate your server to Amazon Web Services. Each replication run creates an Amazon Machine Image (AMI).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplicationJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateReplicationJobRequest createReplicationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReplicationJobResponse response = api.createReplicationJob(xAmzTarget, createReplicationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified application. Optionally deletes the launched stack associated with the application and all Server Migration Service replication jobs for servers in the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppRequest deleteAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApp(xAmzTarget, deleteAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the launch configuration for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppLaunchConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppLaunchConfigurationRequest deleteAppLaunchConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAppLaunchConfiguration(xAmzTarget, deleteAppLaunchConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the replication configuration for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppReplicationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppReplicationConfigurationRequest deleteAppReplicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAppReplicationConfiguration(xAmzTarget, deleteAppReplicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the validation configuration for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppValidationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        DeleteAppValidationConfigurationRequest deleteAppValidationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteAppValidationConfiguration(xAmzTarget, deleteAppValidationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the specified replication job.&lt;/p&gt; &lt;p&gt;After you delete a replication job, there are no further replication runs. Amazon Web Services deletes the contents of the Amazon S3 bucket used to store Server Migration Service artifacts. The AMIs created by the replication runs are not deleted.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplicationJobTest() throws ApiException {
        String xAmzTarget = null;
        DeleteReplicationJobRequest deleteReplicationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReplicationJob(xAmzTarget, deleteReplicationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes all servers from your server catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServerCatalogTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteServerCatalog(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disassociates the specified connector from Server Migration Service.&lt;/p&gt; &lt;p&gt;After you disassociate a connector, it is no longer available to support replication jobs.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateConnectorTest() throws ApiException {
        String xAmzTarget = null;
        DisassociateConnectorRequest disassociateConnectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateConnector(xAmzTarget, disassociateConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Generates a target change set for a currently launched stack and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateChangeSetTest() throws ApiException {
        String xAmzTarget = null;
        GenerateChangeSetRequest generateChangeSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GenerateChangeSetResponse response = api.generateChangeSet(xAmzTarget, generateChangeSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Generates an CloudFormation template based on the current launch configuration and writes it to an Amazon S3 object in the customer’s Amazon S3 bucket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateTemplateTest() throws ApiException {
        String xAmzTarget = null;
        GenerateTemplateRequest generateTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GenerateTemplateResponse response = api.generateTemplate(xAmzTarget, generateTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve information about the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        String xAmzTarget = null;
        GetAppRequest getAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppResponse response = api.getApp(xAmzTarget, getAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the application launch configuration associated with the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppLaunchConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetAppLaunchConfigurationRequest getAppLaunchConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppLaunchConfigurationResponse response = api.getAppLaunchConfiguration(xAmzTarget, getAppLaunchConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the application replication configuration associated with the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppReplicationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetAppReplicationConfigurationRequest getAppReplicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppReplicationConfigurationResponse response = api.getAppReplicationConfiguration(xAmzTarget, getAppReplicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about a configuration for validating an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppValidationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        GetAppValidationConfigurationRequest getAppValidationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppValidationConfigurationResponse response = api.getAppValidationConfiguration(xAmzTarget, getAppValidationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves output from validating an application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppValidationOutputTest() throws ApiException {
        String xAmzTarget = null;
        GetAppValidationOutputRequest getAppValidationOutputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppValidationOutputResponse response = api.getAppValidationOutput(xAmzTarget, getAppValidationOutputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the connectors registered with the Server Migration Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorsTest() throws ApiException {
        String xAmzTarget = null;
        GetConnectorsRequest getConnectorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetConnectorsResponse response = api.getConnectors(xAmzTarget, getConnectorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the specified replication job or all of your replication jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicationJobsTest() throws ApiException {
        String xAmzTarget = null;
        GetReplicationJobsRequest getReplicationJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetReplicationJobsResponse response = api.getReplicationJobs(xAmzTarget, getReplicationJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Describes the replication runs for the specified replication job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicationRunsTest() throws ApiException {
        String xAmzTarget = null;
        GetReplicationRunsRequest getReplicationRunsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetReplicationRunsResponse response = api.getReplicationRuns(xAmzTarget, getReplicationRunsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Describes the servers in your server catalog.&lt;/p&gt; &lt;p&gt;Before you can describe your servers, you must import them using &lt;a&gt;ImportServerCatalog&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServersTest() throws ApiException {
        String xAmzTarget = null;
        GetServersRequest getServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetServersResponse response = api.getServers(xAmzTarget, getServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Allows application import from Migration Hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importAppCatalogTest() throws ApiException {
        String xAmzTarget = null;
        ImportAppCatalogRequest importAppCatalogRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.importAppCatalog(xAmzTarget, importAppCatalogRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Gathers a complete list of on-premises servers. Connectors must be installed and monitoring all servers to import.&lt;/p&gt; &lt;p&gt;This call returns immediately, but might take additional time to retrieve all the servers.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importServerCatalogTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.importServerCatalog(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Launches the specified application as a stack in CloudFormation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void launchAppTest() throws ApiException {
        String xAmzTarget = null;
        LaunchAppRequest launchAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.launchApp(xAmzTarget, launchAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves summaries for all applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppsTest() throws ApiException {
        String xAmzTarget = null;
        ListAppsRequest listAppsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListAppsResponse response = api.listApps(xAmzTarget, listAppsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Provides information to Server Migration Service about whether application validation is successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notifyAppValidationOutputTest() throws ApiException {
        String xAmzTarget = null;
        NotifyAppValidationOutputRequest notifyAppValidationOutputRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.notifyAppValidationOutput(xAmzTarget, notifyAppValidationOutputRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the launch configuration for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAppLaunchConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutAppLaunchConfigurationRequest putAppLaunchConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAppLaunchConfiguration(xAmzTarget, putAppLaunchConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates the replication configuration for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAppReplicationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutAppReplicationConfigurationRequest putAppReplicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAppReplicationConfiguration(xAmzTarget, putAppReplicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates or updates a validation configuration for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putAppValidationConfigurationTest() throws ApiException {
        String xAmzTarget = null;
        PutAppValidationConfigurationRequest putAppValidationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putAppValidationConfiguration(xAmzTarget, putAppValidationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts replicating the specified application by creating replication jobs for each server in the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAppReplicationTest() throws ApiException {
        String xAmzTarget = null;
        StartAppReplicationRequest startAppReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startAppReplication(xAmzTarget, startAppReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an on-demand replication run for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startOnDemandAppReplicationTest() throws ApiException {
        String xAmzTarget = null;
        StartOnDemandAppReplicationRequest startOnDemandAppReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startOnDemandAppReplication(xAmzTarget, startOnDemandAppReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Starts an on-demand replication run for the specified replication job. This replication run starts immediately. This replication run is in addition to the ones already scheduled.&lt;/p&gt; &lt;p&gt;There is a limit on the number of on-demand replications runs that you can request in a 24-hour period.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startOnDemandReplicationRunTest() throws ApiException {
        String xAmzTarget = null;
        StartOnDemandReplicationRunRequest startOnDemandReplicationRunRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartOnDemandReplicationRunResponse response = api.startOnDemandReplicationRun(xAmzTarget, startOnDemandReplicationRunRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops replicating the specified application by deleting the replication job for each server in the application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopAppReplicationTest() throws ApiException {
        String xAmzTarget = null;
        StopAppReplicationRequest stopAppReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopAppReplication(xAmzTarget, stopAppReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Terminates the stack for the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateAppTest() throws ApiException {
        String xAmzTarget = null;
        TerminateAppRequest terminateAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.terminateApp(xAmzTarget, terminateAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppTest() throws ApiException {
        String xAmzTarget = null;
        UpdateAppRequest updateAppRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAppResponse response = api.updateApp(xAmzTarget, updateAppRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified settings for the specified replication job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReplicationJobTest() throws ApiException {
        String xAmzTarget = null;
        UpdateReplicationJobRequest updateReplicationJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateReplicationJob(xAmzTarget, updateReplicationJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
