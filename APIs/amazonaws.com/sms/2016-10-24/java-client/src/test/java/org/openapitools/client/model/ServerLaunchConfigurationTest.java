/*
 * AWS Server Migration Service
 * <important> <p> <b>Product update</b> </p> <p>We recommend <a href=\"http://aws.amazon.com/application-migration-service\">Amazon Web Services Application Migration Service</a> (Amazon Web Services MGN) as the primary migration service for lift-and-shift migrations. If Amazon Web Services MGN is unavailable in a specific Amazon Web Services Region, you can use the Server Migration Service APIs through March 2023.</p> </important> <p>Server Migration Service (Server Migration Service) makes it easier and faster for you to migrate your on-premises workloads to Amazon Web Services. To learn more about Server Migration Service, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/server-migration-service/\">Server Migration Service product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/server-migration-service/latest/userguide/\">Server Migration Service User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-10-24
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3Location;
import org.openapitools.client.model.ScriptType;
import org.openapitools.client.model.ServerLaunchConfigurationServer;
import org.openapitools.client.model.ServerLaunchConfigurationUserData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ServerLaunchConfiguration
 */
public class ServerLaunchConfigurationTest {
    private final ServerLaunchConfiguration model = new ServerLaunchConfiguration();

    /**
     * Model tests for ServerLaunchConfiguration
     */
    @Test
    public void testServerLaunchConfiguration() {
        // TODO: test ServerLaunchConfiguration
    }

    /**
     * Test the property 'server'
     */
    @Test
    public void serverTest() {
        // TODO: test server
    }

    /**
     * Test the property 'logicalId'
     */
    @Test
    public void logicalIdTest() {
        // TODO: test logicalId
    }

    /**
     * Test the property 'vpc'
     */
    @Test
    public void vpcTest() {
        // TODO: test vpc
    }

    /**
     * Test the property 'subnet'
     */
    @Test
    public void subnetTest() {
        // TODO: test subnet
    }

    /**
     * Test the property 'securityGroup'
     */
    @Test
    public void securityGroupTest() {
        // TODO: test securityGroup
    }

    /**
     * Test the property 'ec2KeyName'
     */
    @Test
    public void ec2KeyNameTest() {
        // TODO: test ec2KeyName
    }

    /**
     * Test the property 'userData'
     */
    @Test
    public void userDataTest() {
        // TODO: test userData
    }

    /**
     * Test the property 'instanceType'
     */
    @Test
    public void instanceTypeTest() {
        // TODO: test instanceType
    }

    /**
     * Test the property 'associatePublicIpAddress'
     */
    @Test
    public void associatePublicIpAddressTest() {
        // TODO: test associatePublicIpAddress
    }

    /**
     * Test the property 'iamInstanceProfileName'
     */
    @Test
    public void iamInstanceProfileNameTest() {
        // TODO: test iamInstanceProfileName
    }

    /**
     * Test the property 'configureScript'
     */
    @Test
    public void configureScriptTest() {
        // TODO: test configureScript
    }

    /**
     * Test the property 'configureScriptType'
     */
    @Test
    public void configureScriptTypeTest() {
        // TODO: test configureScriptType
    }

}
