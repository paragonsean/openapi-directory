# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_type import LicenseType
from openapi_server import util


class UpdateReplicationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replication_job_id: str=None, frequency: int=None, next_replication_run_start_time: datetime=None, license_type: LicenseType=None, role_name: str=None, description: str=None, number_of_recent_amis_to_keep: int=None, encrypted: bool=None, kms_key_id: str=None):
        """UpdateReplicationJobRequest - a model defined in OpenAPI

        :param replication_job_id: The replication_job_id of this UpdateReplicationJobRequest.
        :param frequency: The frequency of this UpdateReplicationJobRequest.
        :param next_replication_run_start_time: The next_replication_run_start_time of this UpdateReplicationJobRequest.
        :param license_type: The license_type of this UpdateReplicationJobRequest.
        :param role_name: The role_name of this UpdateReplicationJobRequest.
        :param description: The description of this UpdateReplicationJobRequest.
        :param number_of_recent_amis_to_keep: The number_of_recent_amis_to_keep of this UpdateReplicationJobRequest.
        :param encrypted: The encrypted of this UpdateReplicationJobRequest.
        :param kms_key_id: The kms_key_id of this UpdateReplicationJobRequest.
        """
        self.openapi_types = {
            'replication_job_id': str,
            'frequency': int,
            'next_replication_run_start_time': datetime,
            'license_type': LicenseType,
            'role_name': str,
            'description': str,
            'number_of_recent_amis_to_keep': int,
            'encrypted': bool,
            'kms_key_id': str
        }

        self.attribute_map = {
            'replication_job_id': 'replicationJobId',
            'frequency': 'frequency',
            'next_replication_run_start_time': 'nextReplicationRunStartTime',
            'license_type': 'licenseType',
            'role_name': 'roleName',
            'description': 'description',
            'number_of_recent_amis_to_keep': 'numberOfRecentAmisToKeep',
            'encrypted': 'encrypted',
            'kms_key_id': 'kmsKeyId'
        }

        self._replication_job_id = replication_job_id
        self._frequency = frequency
        self._next_replication_run_start_time = next_replication_run_start_time
        self._license_type = license_type
        self._role_name = role_name
        self._description = description
        self._number_of_recent_amis_to_keep = number_of_recent_amis_to_keep
        self._encrypted = encrypted
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateReplicationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateReplicationJobRequest of this UpdateReplicationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replication_job_id(self):
        """Gets the replication_job_id of this UpdateReplicationJobRequest.


        :return: The replication_job_id of this UpdateReplicationJobRequest.
        :rtype: str
        """
        return self._replication_job_id

    @replication_job_id.setter
    def replication_job_id(self, replication_job_id):
        """Sets the replication_job_id of this UpdateReplicationJobRequest.


        :param replication_job_id: The replication_job_id of this UpdateReplicationJobRequest.
        :type replication_job_id: str
        """
        if replication_job_id is None:
            raise ValueError("Invalid value for `replication_job_id`, must not be `None`")

        self._replication_job_id = replication_job_id

    @property
    def frequency(self):
        """Gets the frequency of this UpdateReplicationJobRequest.


        :return: The frequency of this UpdateReplicationJobRequest.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this UpdateReplicationJobRequest.


        :param frequency: The frequency of this UpdateReplicationJobRequest.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def next_replication_run_start_time(self):
        """Gets the next_replication_run_start_time of this UpdateReplicationJobRequest.


        :return: The next_replication_run_start_time of this UpdateReplicationJobRequest.
        :rtype: datetime
        """
        return self._next_replication_run_start_time

    @next_replication_run_start_time.setter
    def next_replication_run_start_time(self, next_replication_run_start_time):
        """Sets the next_replication_run_start_time of this UpdateReplicationJobRequest.


        :param next_replication_run_start_time: The next_replication_run_start_time of this UpdateReplicationJobRequest.
        :type next_replication_run_start_time: datetime
        """

        self._next_replication_run_start_time = next_replication_run_start_time

    @property
    def license_type(self):
        """Gets the license_type of this UpdateReplicationJobRequest.


        :return: The license_type of this UpdateReplicationJobRequest.
        :rtype: LicenseType
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this UpdateReplicationJobRequest.


        :param license_type: The license_type of this UpdateReplicationJobRequest.
        :type license_type: LicenseType
        """

        self._license_type = license_type

    @property
    def role_name(self):
        """Gets the role_name of this UpdateReplicationJobRequest.


        :return: The role_name of this UpdateReplicationJobRequest.
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this UpdateReplicationJobRequest.


        :param role_name: The role_name of this UpdateReplicationJobRequest.
        :type role_name: str
        """

        self._role_name = role_name

    @property
    def description(self):
        """Gets the description of this UpdateReplicationJobRequest.


        :return: The description of this UpdateReplicationJobRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateReplicationJobRequest.


        :param description: The description of this UpdateReplicationJobRequest.
        :type description: str
        """

        self._description = description

    @property
    def number_of_recent_amis_to_keep(self):
        """Gets the number_of_recent_amis_to_keep of this UpdateReplicationJobRequest.


        :return: The number_of_recent_amis_to_keep of this UpdateReplicationJobRequest.
        :rtype: int
        """
        return self._number_of_recent_amis_to_keep

    @number_of_recent_amis_to_keep.setter
    def number_of_recent_amis_to_keep(self, number_of_recent_amis_to_keep):
        """Sets the number_of_recent_amis_to_keep of this UpdateReplicationJobRequest.


        :param number_of_recent_amis_to_keep: The number_of_recent_amis_to_keep of this UpdateReplicationJobRequest.
        :type number_of_recent_amis_to_keep: int
        """

        self._number_of_recent_amis_to_keep = number_of_recent_amis_to_keep

    @property
    def encrypted(self):
        """Gets the encrypted of this UpdateReplicationJobRequest.


        :return: The encrypted of this UpdateReplicationJobRequest.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this UpdateReplicationJobRequest.


        :param encrypted: The encrypted of this UpdateReplicationJobRequest.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this UpdateReplicationJobRequest.


        :return: The kms_key_id of this UpdateReplicationJobRequest.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this UpdateReplicationJobRequest.


        :param kms_key_id: The kms_key_id of this UpdateReplicationJobRequest.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
