# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connector_status import ConnectorStatus
from openapi_server.models.vm_manager_type import VmManagerType
from openapi_server import util


class Connector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connector_id: str=None, version: str=None, status: ConnectorStatus=None, capability_list: List=None, vm_manager_name: str=None, vm_manager_type: VmManagerType=None, vm_manager_id: str=None, ip_address: str=None, mac_address: str=None, associated_on: datetime=None):
        """Connector - a model defined in OpenAPI

        :param connector_id: The connector_id of this Connector.
        :param version: The version of this Connector.
        :param status: The status of this Connector.
        :param capability_list: The capability_list of this Connector.
        :param vm_manager_name: The vm_manager_name of this Connector.
        :param vm_manager_type: The vm_manager_type of this Connector.
        :param vm_manager_id: The vm_manager_id of this Connector.
        :param ip_address: The ip_address of this Connector.
        :param mac_address: The mac_address of this Connector.
        :param associated_on: The associated_on of this Connector.
        """
        self.openapi_types = {
            'connector_id': str,
            'version': str,
            'status': ConnectorStatus,
            'capability_list': List,
            'vm_manager_name': str,
            'vm_manager_type': VmManagerType,
            'vm_manager_id': str,
            'ip_address': str,
            'mac_address': str,
            'associated_on': datetime
        }

        self.attribute_map = {
            'connector_id': 'connectorId',
            'version': 'version',
            'status': 'status',
            'capability_list': 'capabilityList',
            'vm_manager_name': 'vmManagerName',
            'vm_manager_type': 'vmManagerType',
            'vm_manager_id': 'vmManagerId',
            'ip_address': 'ipAddress',
            'mac_address': 'macAddress',
            'associated_on': 'associatedOn'
        }

        self._connector_id = connector_id
        self._version = version
        self._status = status
        self._capability_list = capability_list
        self._vm_manager_name = vm_manager_name
        self._vm_manager_type = vm_manager_type
        self._vm_manager_id = vm_manager_id
        self._ip_address = ip_address
        self._mac_address = mac_address
        self._associated_on = associated_on

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connector of this Connector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connector_id(self):
        """Gets the connector_id of this Connector.


        :return: The connector_id of this Connector.
        :rtype: str
        """
        return self._connector_id

    @connector_id.setter
    def connector_id(self, connector_id):
        """Sets the connector_id of this Connector.


        :param connector_id: The connector_id of this Connector.
        :type connector_id: str
        """

        self._connector_id = connector_id

    @property
    def version(self):
        """Gets the version of this Connector.


        :return: The version of this Connector.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Connector.


        :param version: The version of this Connector.
        :type version: str
        """

        self._version = version

    @property
    def status(self):
        """Gets the status of this Connector.


        :return: The status of this Connector.
        :rtype: ConnectorStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Connector.


        :param status: The status of this Connector.
        :type status: ConnectorStatus
        """

        self._status = status

    @property
    def capability_list(self):
        """Gets the capability_list of this Connector.


        :return: The capability_list of this Connector.
        :rtype: List
        """
        return self._capability_list

    @capability_list.setter
    def capability_list(self, capability_list):
        """Sets the capability_list of this Connector.


        :param capability_list: The capability_list of this Connector.
        :type capability_list: List
        """

        self._capability_list = capability_list

    @property
    def vm_manager_name(self):
        """Gets the vm_manager_name of this Connector.


        :return: The vm_manager_name of this Connector.
        :rtype: str
        """
        return self._vm_manager_name

    @vm_manager_name.setter
    def vm_manager_name(self, vm_manager_name):
        """Sets the vm_manager_name of this Connector.


        :param vm_manager_name: The vm_manager_name of this Connector.
        :type vm_manager_name: str
        """

        self._vm_manager_name = vm_manager_name

    @property
    def vm_manager_type(self):
        """Gets the vm_manager_type of this Connector.


        :return: The vm_manager_type of this Connector.
        :rtype: VmManagerType
        """
        return self._vm_manager_type

    @vm_manager_type.setter
    def vm_manager_type(self, vm_manager_type):
        """Sets the vm_manager_type of this Connector.


        :param vm_manager_type: The vm_manager_type of this Connector.
        :type vm_manager_type: VmManagerType
        """

        self._vm_manager_type = vm_manager_type

    @property
    def vm_manager_id(self):
        """Gets the vm_manager_id of this Connector.


        :return: The vm_manager_id of this Connector.
        :rtype: str
        """
        return self._vm_manager_id

    @vm_manager_id.setter
    def vm_manager_id(self, vm_manager_id):
        """Sets the vm_manager_id of this Connector.


        :param vm_manager_id: The vm_manager_id of this Connector.
        :type vm_manager_id: str
        """

        self._vm_manager_id = vm_manager_id

    @property
    def ip_address(self):
        """Gets the ip_address of this Connector.


        :return: The ip_address of this Connector.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Connector.


        :param ip_address: The ip_address of this Connector.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this Connector.


        :return: The mac_address of this Connector.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Connector.


        :param mac_address: The mac_address of this Connector.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def associated_on(self):
        """Gets the associated_on of this Connector.


        :return: The associated_on of this Connector.
        :rtype: datetime
        """
        return self._associated_on

    @associated_on.setter
    def associated_on(self, associated_on):
        """Sets the associated_on of this Connector.


        :param associated_on: The associated_on of this Connector.
        :type associated_on: datetime
        """

        self._associated_on = associated_on
