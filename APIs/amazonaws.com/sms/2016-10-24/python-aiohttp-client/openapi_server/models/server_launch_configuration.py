# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_location import S3Location
from openapi_server.models.script_type import ScriptType
from openapi_server.models.server_launch_configuration_server import ServerLaunchConfigurationServer
from openapi_server.models.server_launch_configuration_user_data import ServerLaunchConfigurationUserData
from openapi_server import util


class ServerLaunchConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, server: ServerLaunchConfigurationServer=None, logical_id: str=None, vpc: str=None, subnet: str=None, security_group: str=None, ec2_key_name: str=None, user_data: ServerLaunchConfigurationUserData=None, instance_type: str=None, associate_public_ip_address: bool=None, iam_instance_profile_name: str=None, configure_script: S3Location=None, configure_script_type: ScriptType=None):
        """ServerLaunchConfiguration - a model defined in OpenAPI

        :param server: The server of this ServerLaunchConfiguration.
        :param logical_id: The logical_id of this ServerLaunchConfiguration.
        :param vpc: The vpc of this ServerLaunchConfiguration.
        :param subnet: The subnet of this ServerLaunchConfiguration.
        :param security_group: The security_group of this ServerLaunchConfiguration.
        :param ec2_key_name: The ec2_key_name of this ServerLaunchConfiguration.
        :param user_data: The user_data of this ServerLaunchConfiguration.
        :param instance_type: The instance_type of this ServerLaunchConfiguration.
        :param associate_public_ip_address: The associate_public_ip_address of this ServerLaunchConfiguration.
        :param iam_instance_profile_name: The iam_instance_profile_name of this ServerLaunchConfiguration.
        :param configure_script: The configure_script of this ServerLaunchConfiguration.
        :param configure_script_type: The configure_script_type of this ServerLaunchConfiguration.
        """
        self.openapi_types = {
            'server': ServerLaunchConfigurationServer,
            'logical_id': str,
            'vpc': str,
            'subnet': str,
            'security_group': str,
            'ec2_key_name': str,
            'user_data': ServerLaunchConfigurationUserData,
            'instance_type': str,
            'associate_public_ip_address': bool,
            'iam_instance_profile_name': str,
            'configure_script': S3Location,
            'configure_script_type': ScriptType
        }

        self.attribute_map = {
            'server': 'server',
            'logical_id': 'logicalId',
            'vpc': 'vpc',
            'subnet': 'subnet',
            'security_group': 'securityGroup',
            'ec2_key_name': 'ec2KeyName',
            'user_data': 'userData',
            'instance_type': 'instanceType',
            'associate_public_ip_address': 'associatePublicIpAddress',
            'iam_instance_profile_name': 'iamInstanceProfileName',
            'configure_script': 'configureScript',
            'configure_script_type': 'configureScriptType'
        }

        self._server = server
        self._logical_id = logical_id
        self._vpc = vpc
        self._subnet = subnet
        self._security_group = security_group
        self._ec2_key_name = ec2_key_name
        self._user_data = user_data
        self._instance_type = instance_type
        self._associate_public_ip_address = associate_public_ip_address
        self._iam_instance_profile_name = iam_instance_profile_name
        self._configure_script = configure_script
        self._configure_script_type = configure_script_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerLaunchConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerLaunchConfiguration of this ServerLaunchConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def server(self):
        """Gets the server of this ServerLaunchConfiguration.


        :return: The server of this ServerLaunchConfiguration.
        :rtype: ServerLaunchConfigurationServer
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ServerLaunchConfiguration.


        :param server: The server of this ServerLaunchConfiguration.
        :type server: ServerLaunchConfigurationServer
        """

        self._server = server

    @property
    def logical_id(self):
        """Gets the logical_id of this ServerLaunchConfiguration.


        :return: The logical_id of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._logical_id

    @logical_id.setter
    def logical_id(self, logical_id):
        """Sets the logical_id of this ServerLaunchConfiguration.


        :param logical_id: The logical_id of this ServerLaunchConfiguration.
        :type logical_id: str
        """

        self._logical_id = logical_id

    @property
    def vpc(self):
        """Gets the vpc of this ServerLaunchConfiguration.


        :return: The vpc of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._vpc

    @vpc.setter
    def vpc(self, vpc):
        """Sets the vpc of this ServerLaunchConfiguration.


        :param vpc: The vpc of this ServerLaunchConfiguration.
        :type vpc: str
        """

        self._vpc = vpc

    @property
    def subnet(self):
        """Gets the subnet of this ServerLaunchConfiguration.


        :return: The subnet of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this ServerLaunchConfiguration.


        :param subnet: The subnet of this ServerLaunchConfiguration.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def security_group(self):
        """Gets the security_group of this ServerLaunchConfiguration.


        :return: The security_group of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._security_group

    @security_group.setter
    def security_group(self, security_group):
        """Sets the security_group of this ServerLaunchConfiguration.


        :param security_group: The security_group of this ServerLaunchConfiguration.
        :type security_group: str
        """

        self._security_group = security_group

    @property
    def ec2_key_name(self):
        """Gets the ec2_key_name of this ServerLaunchConfiguration.


        :return: The ec2_key_name of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._ec2_key_name

    @ec2_key_name.setter
    def ec2_key_name(self, ec2_key_name):
        """Sets the ec2_key_name of this ServerLaunchConfiguration.


        :param ec2_key_name: The ec2_key_name of this ServerLaunchConfiguration.
        :type ec2_key_name: str
        """

        self._ec2_key_name = ec2_key_name

    @property
    def user_data(self):
        """Gets the user_data of this ServerLaunchConfiguration.


        :return: The user_data of this ServerLaunchConfiguration.
        :rtype: ServerLaunchConfigurationUserData
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this ServerLaunchConfiguration.


        :param user_data: The user_data of this ServerLaunchConfiguration.
        :type user_data: ServerLaunchConfigurationUserData
        """

        self._user_data = user_data

    @property
    def instance_type(self):
        """Gets the instance_type of this ServerLaunchConfiguration.


        :return: The instance_type of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ServerLaunchConfiguration.


        :param instance_type: The instance_type of this ServerLaunchConfiguration.
        :type instance_type: str
        """

        self._instance_type = instance_type

    @property
    def associate_public_ip_address(self):
        """Gets the associate_public_ip_address of this ServerLaunchConfiguration.


        :return: The associate_public_ip_address of this ServerLaunchConfiguration.
        :rtype: bool
        """
        return self._associate_public_ip_address

    @associate_public_ip_address.setter
    def associate_public_ip_address(self, associate_public_ip_address):
        """Sets the associate_public_ip_address of this ServerLaunchConfiguration.


        :param associate_public_ip_address: The associate_public_ip_address of this ServerLaunchConfiguration.
        :type associate_public_ip_address: bool
        """

        self._associate_public_ip_address = associate_public_ip_address

    @property
    def iam_instance_profile_name(self):
        """Gets the iam_instance_profile_name of this ServerLaunchConfiguration.


        :return: The iam_instance_profile_name of this ServerLaunchConfiguration.
        :rtype: str
        """
        return self._iam_instance_profile_name

    @iam_instance_profile_name.setter
    def iam_instance_profile_name(self, iam_instance_profile_name):
        """Sets the iam_instance_profile_name of this ServerLaunchConfiguration.


        :param iam_instance_profile_name: The iam_instance_profile_name of this ServerLaunchConfiguration.
        :type iam_instance_profile_name: str
        """

        self._iam_instance_profile_name = iam_instance_profile_name

    @property
    def configure_script(self):
        """Gets the configure_script of this ServerLaunchConfiguration.


        :return: The configure_script of this ServerLaunchConfiguration.
        :rtype: S3Location
        """
        return self._configure_script

    @configure_script.setter
    def configure_script(self, configure_script):
        """Sets the configure_script of this ServerLaunchConfiguration.


        :param configure_script: The configure_script of this ServerLaunchConfiguration.
        :type configure_script: S3Location
        """

        self._configure_script = configure_script

    @property
    def configure_script_type(self):
        """Gets the configure_script_type of this ServerLaunchConfiguration.


        :return: The configure_script_type of this ServerLaunchConfiguration.
        :rtype: ScriptType
        """
        return self._configure_script_type

    @configure_script_type.setter
    def configure_script_type(self, configure_script_type):
        """Sets the configure_script_type of this ServerLaunchConfiguration.


        :param configure_script_type: The configure_script_type of this ServerLaunchConfiguration.
        :type configure_script_type: ScriptType
        """

        self._configure_script_type = configure_script_type
