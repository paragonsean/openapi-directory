# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_run_stage_details import ReplicationRunStageDetails
from openapi_server.models.replication_run_state import ReplicationRunState
from openapi_server.models.replication_run_type import ReplicationRunType
from openapi_server import util


class ReplicationRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replication_run_id: str=None, state: ReplicationRunState=None, type: ReplicationRunType=None, stage_details: ReplicationRunStageDetails=None, status_message: str=None, ami_id: str=None, scheduled_start_time: datetime=None, completed_time: datetime=None, description: str=None, encrypted: bool=None, kms_key_id: str=None):
        """ReplicationRun - a model defined in OpenAPI

        :param replication_run_id: The replication_run_id of this ReplicationRun.
        :param state: The state of this ReplicationRun.
        :param type: The type of this ReplicationRun.
        :param stage_details: The stage_details of this ReplicationRun.
        :param status_message: The status_message of this ReplicationRun.
        :param ami_id: The ami_id of this ReplicationRun.
        :param scheduled_start_time: The scheduled_start_time of this ReplicationRun.
        :param completed_time: The completed_time of this ReplicationRun.
        :param description: The description of this ReplicationRun.
        :param encrypted: The encrypted of this ReplicationRun.
        :param kms_key_id: The kms_key_id of this ReplicationRun.
        """
        self.openapi_types = {
            'replication_run_id': str,
            'state': ReplicationRunState,
            'type': ReplicationRunType,
            'stage_details': ReplicationRunStageDetails,
            'status_message': str,
            'ami_id': str,
            'scheduled_start_time': datetime,
            'completed_time': datetime,
            'description': str,
            'encrypted': bool,
            'kms_key_id': str
        }

        self.attribute_map = {
            'replication_run_id': 'replicationRunId',
            'state': 'state',
            'type': 'type',
            'stage_details': 'stageDetails',
            'status_message': 'statusMessage',
            'ami_id': 'amiId',
            'scheduled_start_time': 'scheduledStartTime',
            'completed_time': 'completedTime',
            'description': 'description',
            'encrypted': 'encrypted',
            'kms_key_id': 'kmsKeyId'
        }

        self._replication_run_id = replication_run_id
        self._state = state
        self._type = type
        self._stage_details = stage_details
        self._status_message = status_message
        self._ami_id = ami_id
        self._scheduled_start_time = scheduled_start_time
        self._completed_time = completed_time
        self._description = description
        self._encrypted = encrypted
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicationRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicationRun of this ReplicationRun.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replication_run_id(self):
        """Gets the replication_run_id of this ReplicationRun.


        :return: The replication_run_id of this ReplicationRun.
        :rtype: str
        """
        return self._replication_run_id

    @replication_run_id.setter
    def replication_run_id(self, replication_run_id):
        """Sets the replication_run_id of this ReplicationRun.


        :param replication_run_id: The replication_run_id of this ReplicationRun.
        :type replication_run_id: str
        """

        self._replication_run_id = replication_run_id

    @property
    def state(self):
        """Gets the state of this ReplicationRun.


        :return: The state of this ReplicationRun.
        :rtype: ReplicationRunState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ReplicationRun.


        :param state: The state of this ReplicationRun.
        :type state: ReplicationRunState
        """

        self._state = state

    @property
    def type(self):
        """Gets the type of this ReplicationRun.


        :return: The type of this ReplicationRun.
        :rtype: ReplicationRunType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReplicationRun.


        :param type: The type of this ReplicationRun.
        :type type: ReplicationRunType
        """

        self._type = type

    @property
    def stage_details(self):
        """Gets the stage_details of this ReplicationRun.


        :return: The stage_details of this ReplicationRun.
        :rtype: ReplicationRunStageDetails
        """
        return self._stage_details

    @stage_details.setter
    def stage_details(self, stage_details):
        """Sets the stage_details of this ReplicationRun.


        :param stage_details: The stage_details of this ReplicationRun.
        :type stage_details: ReplicationRunStageDetails
        """

        self._stage_details = stage_details

    @property
    def status_message(self):
        """Gets the status_message of this ReplicationRun.


        :return: The status_message of this ReplicationRun.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ReplicationRun.


        :param status_message: The status_message of this ReplicationRun.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def ami_id(self):
        """Gets the ami_id of this ReplicationRun.


        :return: The ami_id of this ReplicationRun.
        :rtype: str
        """
        return self._ami_id

    @ami_id.setter
    def ami_id(self, ami_id):
        """Sets the ami_id of this ReplicationRun.


        :param ami_id: The ami_id of this ReplicationRun.
        :type ami_id: str
        """

        self._ami_id = ami_id

    @property
    def scheduled_start_time(self):
        """Gets the scheduled_start_time of this ReplicationRun.


        :return: The scheduled_start_time of this ReplicationRun.
        :rtype: datetime
        """
        return self._scheduled_start_time

    @scheduled_start_time.setter
    def scheduled_start_time(self, scheduled_start_time):
        """Sets the scheduled_start_time of this ReplicationRun.


        :param scheduled_start_time: The scheduled_start_time of this ReplicationRun.
        :type scheduled_start_time: datetime
        """

        self._scheduled_start_time = scheduled_start_time

    @property
    def completed_time(self):
        """Gets the completed_time of this ReplicationRun.


        :return: The completed_time of this ReplicationRun.
        :rtype: datetime
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this ReplicationRun.


        :param completed_time: The completed_time of this ReplicationRun.
        :type completed_time: datetime
        """

        self._completed_time = completed_time

    @property
    def description(self):
        """Gets the description of this ReplicationRun.


        :return: The description of this ReplicationRun.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ReplicationRun.


        :param description: The description of this ReplicationRun.
        :type description: str
        """

        self._description = description

    @property
    def encrypted(self):
        """Gets the encrypted of this ReplicationRun.


        :return: The encrypted of this ReplicationRun.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ReplicationRun.


        :param encrypted: The encrypted of this ReplicationRun.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this ReplicationRun.


        :return: The kms_key_id of this ReplicationRun.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this ReplicationRun.


        :param kms_key_id: The kms_key_id of this ReplicationRun.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
