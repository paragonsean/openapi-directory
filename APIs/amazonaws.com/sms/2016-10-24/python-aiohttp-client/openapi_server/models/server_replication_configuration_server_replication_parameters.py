# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_type import LicenseType
from openapi_server import util


class ServerReplicationConfigurationServerReplicationParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, seed_time: datetime=None, frequency: int=None, run_once: bool=None, license_type: LicenseType=None, number_of_recent_amis_to_keep: int=None, encrypted: bool=None, kms_key_id: str=None):
        """ServerReplicationConfigurationServerReplicationParameters - a model defined in OpenAPI

        :param seed_time: The seed_time of this ServerReplicationConfigurationServerReplicationParameters.
        :param frequency: The frequency of this ServerReplicationConfigurationServerReplicationParameters.
        :param run_once: The run_once of this ServerReplicationConfigurationServerReplicationParameters.
        :param license_type: The license_type of this ServerReplicationConfigurationServerReplicationParameters.
        :param number_of_recent_amis_to_keep: The number_of_recent_amis_to_keep of this ServerReplicationConfigurationServerReplicationParameters.
        :param encrypted: The encrypted of this ServerReplicationConfigurationServerReplicationParameters.
        :param kms_key_id: The kms_key_id of this ServerReplicationConfigurationServerReplicationParameters.
        """
        self.openapi_types = {
            'seed_time': datetime,
            'frequency': int,
            'run_once': bool,
            'license_type': LicenseType,
            'number_of_recent_amis_to_keep': int,
            'encrypted': bool,
            'kms_key_id': str
        }

        self.attribute_map = {
            'seed_time': 'seedTime',
            'frequency': 'frequency',
            'run_once': 'runOnce',
            'license_type': 'licenseType',
            'number_of_recent_amis_to_keep': 'numberOfRecentAmisToKeep',
            'encrypted': 'encrypted',
            'kms_key_id': 'kmsKeyId'
        }

        self._seed_time = seed_time
        self._frequency = frequency
        self._run_once = run_once
        self._license_type = license_type
        self._number_of_recent_amis_to_keep = number_of_recent_amis_to_keep
        self._encrypted = encrypted
        self._kms_key_id = kms_key_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerReplicationConfigurationServerReplicationParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerReplicationConfiguration_serverReplicationParameters of this ServerReplicationConfigurationServerReplicationParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seed_time(self):
        """Gets the seed_time of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The seed_time of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: datetime
        """
        return self._seed_time

    @seed_time.setter
    def seed_time(self, seed_time):
        """Sets the seed_time of this ServerReplicationConfigurationServerReplicationParameters.


        :param seed_time: The seed_time of this ServerReplicationConfigurationServerReplicationParameters.
        :type seed_time: datetime
        """

        self._seed_time = seed_time

    @property
    def frequency(self):
        """Gets the frequency of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The frequency of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ServerReplicationConfigurationServerReplicationParameters.


        :param frequency: The frequency of this ServerReplicationConfigurationServerReplicationParameters.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def run_once(self):
        """Gets the run_once of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The run_once of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: bool
        """
        return self._run_once

    @run_once.setter
    def run_once(self, run_once):
        """Sets the run_once of this ServerReplicationConfigurationServerReplicationParameters.


        :param run_once: The run_once of this ServerReplicationConfigurationServerReplicationParameters.
        :type run_once: bool
        """

        self._run_once = run_once

    @property
    def license_type(self):
        """Gets the license_type of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The license_type of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: LicenseType
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ServerReplicationConfigurationServerReplicationParameters.


        :param license_type: The license_type of this ServerReplicationConfigurationServerReplicationParameters.
        :type license_type: LicenseType
        """

        self._license_type = license_type

    @property
    def number_of_recent_amis_to_keep(self):
        """Gets the number_of_recent_amis_to_keep of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The number_of_recent_amis_to_keep of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: int
        """
        return self._number_of_recent_amis_to_keep

    @number_of_recent_amis_to_keep.setter
    def number_of_recent_amis_to_keep(self, number_of_recent_amis_to_keep):
        """Sets the number_of_recent_amis_to_keep of this ServerReplicationConfigurationServerReplicationParameters.


        :param number_of_recent_amis_to_keep: The number_of_recent_amis_to_keep of this ServerReplicationConfigurationServerReplicationParameters.
        :type number_of_recent_amis_to_keep: int
        """

        self._number_of_recent_amis_to_keep = number_of_recent_amis_to_keep

    @property
    def encrypted(self):
        """Gets the encrypted of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The encrypted of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this ServerReplicationConfigurationServerReplicationParameters.


        :param encrypted: The encrypted of this ServerReplicationConfigurationServerReplicationParameters.
        :type encrypted: bool
        """

        self._encrypted = encrypted

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this ServerReplicationConfigurationServerReplicationParameters.


        :return: The kms_key_id of this ServerReplicationConfigurationServerReplicationParameters.
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this ServerReplicationConfigurationServerReplicationParameters.


        :param kms_key_id: The kms_key_id of this ServerReplicationConfigurationServerReplicationParameters.
        :type kms_key_id: str
        """

        self._kms_key_id = kms_key_id
