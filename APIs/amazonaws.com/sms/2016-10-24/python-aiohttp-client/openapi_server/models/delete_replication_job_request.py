# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteReplicationJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, replication_job_id: str=None):
        """DeleteReplicationJobRequest - a model defined in OpenAPI

        :param replication_job_id: The replication_job_id of this DeleteReplicationJobRequest.
        """
        self.openapi_types = {
            'replication_job_id': str
        }

        self.attribute_map = {
            'replication_job_id': 'replicationJobId'
        }

        self._replication_job_id = replication_job_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteReplicationJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteReplicationJobRequest of this DeleteReplicationJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def replication_job_id(self):
        """Gets the replication_job_id of this DeleteReplicationJobRequest.


        :return: The replication_job_id of this DeleteReplicationJobRequest.
        :rtype: str
        """
        return self._replication_job_id

    @replication_job_id.setter
    def replication_job_id(self, replication_job_id):
        """Sets the replication_job_id of this DeleteReplicationJobRequest.


        :param replication_job_id: The replication_job_id of this DeleteReplicationJobRequest.
        :type replication_job_id: str
        """
        if replication_job_id is None:
            raise ValueError("Invalid value for `replication_job_id`, must not be `None`")

        self._replication_job_id = replication_job_id
