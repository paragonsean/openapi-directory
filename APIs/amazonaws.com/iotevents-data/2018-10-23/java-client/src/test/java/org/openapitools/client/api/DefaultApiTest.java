/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchAcknowledgeAlarmRequest;
import org.openapitools.client.model.BatchAcknowledgeAlarmResponse;
import org.openapitools.client.model.BatchDeleteDetectorRequest;
import org.openapitools.client.model.BatchDeleteDetectorResponse;
import org.openapitools.client.model.BatchDisableAlarmRequest;
import org.openapitools.client.model.BatchDisableAlarmResponse;
import org.openapitools.client.model.BatchEnableAlarmRequest;
import org.openapitools.client.model.BatchEnableAlarmResponse;
import org.openapitools.client.model.BatchPutMessageRequest;
import org.openapitools.client.model.BatchPutMessageResponse;
import org.openapitools.client.model.BatchResetAlarmRequest;
import org.openapitools.client.model.BatchResetAlarmResponse;
import org.openapitools.client.model.BatchSnoozeAlarmRequest;
import org.openapitools.client.model.BatchSnoozeAlarmResponse;
import org.openapitools.client.model.BatchUpdateDetectorRequest;
import org.openapitools.client.model.BatchUpdateDetectorResponse;
import org.openapitools.client.model.DescribeAlarmResponse;
import org.openapitools.client.model.DescribeDetectorResponse;
import org.openapitools.client.model.ListAlarmsResponse;
import org.openapitools.client.model.ListDetectorsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Acknowledges one or more alarms. The alarms change to the &lt;code&gt;ACKNOWLEDGED&lt;/code&gt; state after you acknowledge them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchAcknowledgeAlarmTest() throws ApiException {
        BatchAcknowledgeAlarmRequest batchAcknowledgeAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchAcknowledgeAlarmResponse response = api.batchAcknowledgeAlarm(batchAcknowledgeAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes one or more detectors that were created. When a detector is deleted, its state will be cleared and the detector will be removed from the list of detectors. The deleted detector will no longer appear if referenced in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_ListDetectors.html\&quot;&gt;ListDetectors&lt;/a&gt; API call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDeleteDetectorTest() throws ApiException {
        BatchDeleteDetectorRequest batchDeleteDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDeleteDetectorResponse response = api.batchDeleteDetector(batchDeleteDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables one or more alarms. The alarms change to the &lt;code&gt;DISABLED&lt;/code&gt; state after you disable them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchDisableAlarmTest() throws ApiException {
        BatchDisableAlarmRequest batchDisableAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchDisableAlarmResponse response = api.batchDisableAlarm(batchDisableAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables one or more alarms. The alarms change to the &lt;code&gt;NORMAL&lt;/code&gt; state after you enable them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchEnableAlarmTest() throws ApiException {
        BatchEnableAlarmRequest batchEnableAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchEnableAlarmResponse response = api.batchEnableAlarm(batchEnableAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends a set of messages to the IoT Events system. Each message payload is transformed into the input you specify (&lt;code&gt;\&quot;inputName\&quot;&lt;/code&gt;) and ingested into any detectors that monitor that input. If multiple messages are sent, the order in which the messages are processed isn&#39;t guaranteed. To guarantee ordering, you must send messages one at a time and wait for a successful response.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchPutMessageTest() throws ApiException {
        BatchPutMessageRequest batchPutMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchPutMessageResponse response = api.batchPutMessage(batchPutMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Resets one or more alarms. The alarms return to the &lt;code&gt;NORMAL&lt;/code&gt; state after you reset them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchResetAlarmTest() throws ApiException {
        BatchResetAlarmRequest batchResetAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchResetAlarmResponse response = api.batchResetAlarm(batchResetAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Changes one or more alarms to the snooze mode. The alarms change to the &lt;code&gt;SNOOZE_DISABLED&lt;/code&gt; state after you set them to the snooze mode.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchSnoozeAlarmTest() throws ApiException {
        BatchSnoozeAlarmRequest batchSnoozeAlarmRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchSnoozeAlarmResponse response = api.batchSnoozeAlarm(batchSnoozeAlarmRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the state, variable values, and timer settings of one or more detectors (instances) of a specified detector model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchUpdateDetectorTest() throws ApiException {
        BatchUpdateDetectorRequest batchUpdateDetectorRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchUpdateDetectorResponse response = api.batchUpdateDetector(batchUpdateDetectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves information about an alarm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAlarmTest() throws ApiException {
        String alarmModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String keyValue = null;
        DescribeAlarmResponse response = api.describeAlarm(alarmModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, keyValue);
        // TODO: test validations
    }

    /**
     * Returns information about the specified detector (instance).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDetectorTest() throws ApiException {
        String detectorModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String keyValue = null;
        DescribeDetectorResponse response = api.describeDetector(detectorModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, keyValue);
        // TODO: test validations
    }

    /**
     * Lists one or more alarms. The operation returns only the metadata associated with each alarm.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlarmsTest() throws ApiException {
        String alarmModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String nextToken = null;
        Integer maxResults = null;
        ListAlarmsResponse response = api.listAlarms(alarmModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults);
        // TODO: test validations
    }

    /**
     * Lists detectors (the instances of a detector model).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDetectorsTest() throws ApiException {
        String detectorModelName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String stateName = null;
        String nextToken = null;
        Integer maxResults = null;
        ListDetectorsResponse response = api.listDetectors(detectorModelName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, stateName, nextToken, maxResults);
        // TODO: test validations
    }

}
