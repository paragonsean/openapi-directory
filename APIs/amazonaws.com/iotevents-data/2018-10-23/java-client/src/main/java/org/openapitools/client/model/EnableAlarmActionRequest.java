/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information needed to enable the alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EnableAlarmActionRequest {
  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private String requestId;

  public static final String SERIALIZED_NAME_ALARM_MODEL_NAME = "alarmModelName";
  @SerializedName(SERIALIZED_NAME_ALARM_MODEL_NAME)
  private String alarmModelName;

  public static final String SERIALIZED_NAME_KEY_VALUE = "keyValue";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE)
  private String keyValue;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public EnableAlarmActionRequest() {
  }

  public EnableAlarmActionRequest requestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  /**
   * Get requestId
   * @return requestId
   */
  @javax.annotation.Nonnull
  public String getRequestId() {
    return requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }


  public EnableAlarmActionRequest alarmModelName(String alarmModelName) {
    this.alarmModelName = alarmModelName;
    return this;
  }

  /**
   * Get alarmModelName
   * @return alarmModelName
   */
  @javax.annotation.Nonnull
  public String getAlarmModelName() {
    return alarmModelName;
  }

  public void setAlarmModelName(String alarmModelName) {
    this.alarmModelName = alarmModelName;
  }


  public EnableAlarmActionRequest keyValue(String keyValue) {
    this.keyValue = keyValue;
    return this;
  }

  /**
   * Get keyValue
   * @return keyValue
   */
  @javax.annotation.Nullable
  public String getKeyValue() {
    return keyValue;
  }

  public void setKeyValue(String keyValue) {
    this.keyValue = keyValue;
  }


  public EnableAlarmActionRequest note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnableAlarmActionRequest enableAlarmActionRequest = (EnableAlarmActionRequest) o;
    return Objects.equals(this.requestId, enableAlarmActionRequest.requestId) &&
        Objects.equals(this.alarmModelName, enableAlarmActionRequest.alarmModelName) &&
        Objects.equals(this.keyValue, enableAlarmActionRequest.keyValue) &&
        Objects.equals(this.note, enableAlarmActionRequest.note);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requestId, alarmModelName, keyValue, note);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnableAlarmActionRequest {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    alarmModelName: ").append(toIndentedString(alarmModelName)).append("\n");
    sb.append("    keyValue: ").append(toIndentedString(keyValue)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requestId");
    openapiFields.add("alarmModelName");
    openapiFields.add("keyValue");
    openapiFields.add("note");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("requestId");
    openapiRequiredFields.add("alarmModelName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnableAlarmActionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnableAlarmActionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnableAlarmActionRequest is not found in the empty JSON string", EnableAlarmActionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnableAlarmActionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnableAlarmActionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EnableAlarmActionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `requestId`
      String.validateJsonElement(jsonObj.get("requestId"));
      // validate the required field `alarmModelName`
      String.validateJsonElement(jsonObj.get("alarmModelName"));
      // validate the optional field `keyValue`
      if (jsonObj.get("keyValue") != null && !jsonObj.get("keyValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("keyValue"));
      }
      // validate the optional field `note`
      if (jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("note"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnableAlarmActionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnableAlarmActionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnableAlarmActionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnableAlarmActionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EnableAlarmActionRequest>() {
           @Override
           public void write(JsonWriter out, EnableAlarmActionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnableAlarmActionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnableAlarmActionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnableAlarmActionRequest
   * @throws IOException if the JSON string is invalid with respect to EnableAlarmActionRequest
   */
  public static EnableAlarmActionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnableAlarmActionRequest.class);
  }

  /**
   * Convert an instance of EnableAlarmActionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

