/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CustomerActionAcknowledgeActionConfiguration;
import org.openapitools.client.model.CustomerActionDisableActionConfiguration;
import org.openapitools.client.model.CustomerActionEnableActionConfiguration;
import org.openapitools.client.model.CustomerActionName;
import org.openapitools.client.model.CustomerActionResetActionConfiguration;
import org.openapitools.client.model.CustomerActionSnoozeActionConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlarmStateCustomerAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlarmStateCustomerAction {
  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private CustomerActionName actionName;

  public static final String SERIALIZED_NAME_SNOOZE_ACTION_CONFIGURATION = "snoozeActionConfiguration";
  @SerializedName(SERIALIZED_NAME_SNOOZE_ACTION_CONFIGURATION)
  private CustomerActionSnoozeActionConfiguration snoozeActionConfiguration;

  public static final String SERIALIZED_NAME_ENABLE_ACTION_CONFIGURATION = "enableActionConfiguration";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACTION_CONFIGURATION)
  private CustomerActionEnableActionConfiguration enableActionConfiguration;

  public static final String SERIALIZED_NAME_DISABLE_ACTION_CONFIGURATION = "disableActionConfiguration";
  @SerializedName(SERIALIZED_NAME_DISABLE_ACTION_CONFIGURATION)
  private CustomerActionDisableActionConfiguration disableActionConfiguration;

  public static final String SERIALIZED_NAME_ACKNOWLEDGE_ACTION_CONFIGURATION = "acknowledgeActionConfiguration";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGE_ACTION_CONFIGURATION)
  private CustomerActionAcknowledgeActionConfiguration acknowledgeActionConfiguration;

  public static final String SERIALIZED_NAME_RESET_ACTION_CONFIGURATION = "resetActionConfiguration";
  @SerializedName(SERIALIZED_NAME_RESET_ACTION_CONFIGURATION)
  private CustomerActionResetActionConfiguration resetActionConfiguration;

  public AlarmStateCustomerAction() {
  }

  public AlarmStateCustomerAction actionName(CustomerActionName actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Get actionName
   * @return actionName
   */
  @javax.annotation.Nullable
  public CustomerActionName getActionName() {
    return actionName;
  }

  public void setActionName(CustomerActionName actionName) {
    this.actionName = actionName;
  }


  public AlarmStateCustomerAction snoozeActionConfiguration(CustomerActionSnoozeActionConfiguration snoozeActionConfiguration) {
    this.snoozeActionConfiguration = snoozeActionConfiguration;
    return this;
  }

  /**
   * Get snoozeActionConfiguration
   * @return snoozeActionConfiguration
   */
  @javax.annotation.Nullable
  public CustomerActionSnoozeActionConfiguration getSnoozeActionConfiguration() {
    return snoozeActionConfiguration;
  }

  public void setSnoozeActionConfiguration(CustomerActionSnoozeActionConfiguration snoozeActionConfiguration) {
    this.snoozeActionConfiguration = snoozeActionConfiguration;
  }


  public AlarmStateCustomerAction enableActionConfiguration(CustomerActionEnableActionConfiguration enableActionConfiguration) {
    this.enableActionConfiguration = enableActionConfiguration;
    return this;
  }

  /**
   * Get enableActionConfiguration
   * @return enableActionConfiguration
   */
  @javax.annotation.Nullable
  public CustomerActionEnableActionConfiguration getEnableActionConfiguration() {
    return enableActionConfiguration;
  }

  public void setEnableActionConfiguration(CustomerActionEnableActionConfiguration enableActionConfiguration) {
    this.enableActionConfiguration = enableActionConfiguration;
  }


  public AlarmStateCustomerAction disableActionConfiguration(CustomerActionDisableActionConfiguration disableActionConfiguration) {
    this.disableActionConfiguration = disableActionConfiguration;
    return this;
  }

  /**
   * Get disableActionConfiguration
   * @return disableActionConfiguration
   */
  @javax.annotation.Nullable
  public CustomerActionDisableActionConfiguration getDisableActionConfiguration() {
    return disableActionConfiguration;
  }

  public void setDisableActionConfiguration(CustomerActionDisableActionConfiguration disableActionConfiguration) {
    this.disableActionConfiguration = disableActionConfiguration;
  }


  public AlarmStateCustomerAction acknowledgeActionConfiguration(CustomerActionAcknowledgeActionConfiguration acknowledgeActionConfiguration) {
    this.acknowledgeActionConfiguration = acknowledgeActionConfiguration;
    return this;
  }

  /**
   * Get acknowledgeActionConfiguration
   * @return acknowledgeActionConfiguration
   */
  @javax.annotation.Nullable
  public CustomerActionAcknowledgeActionConfiguration getAcknowledgeActionConfiguration() {
    return acknowledgeActionConfiguration;
  }

  public void setAcknowledgeActionConfiguration(CustomerActionAcknowledgeActionConfiguration acknowledgeActionConfiguration) {
    this.acknowledgeActionConfiguration = acknowledgeActionConfiguration;
  }


  public AlarmStateCustomerAction resetActionConfiguration(CustomerActionResetActionConfiguration resetActionConfiguration) {
    this.resetActionConfiguration = resetActionConfiguration;
    return this;
  }

  /**
   * Get resetActionConfiguration
   * @return resetActionConfiguration
   */
  @javax.annotation.Nullable
  public CustomerActionResetActionConfiguration getResetActionConfiguration() {
    return resetActionConfiguration;
  }

  public void setResetActionConfiguration(CustomerActionResetActionConfiguration resetActionConfiguration) {
    this.resetActionConfiguration = resetActionConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmStateCustomerAction alarmStateCustomerAction = (AlarmStateCustomerAction) o;
    return Objects.equals(this.actionName, alarmStateCustomerAction.actionName) &&
        Objects.equals(this.snoozeActionConfiguration, alarmStateCustomerAction.snoozeActionConfiguration) &&
        Objects.equals(this.enableActionConfiguration, alarmStateCustomerAction.enableActionConfiguration) &&
        Objects.equals(this.disableActionConfiguration, alarmStateCustomerAction.disableActionConfiguration) &&
        Objects.equals(this.acknowledgeActionConfiguration, alarmStateCustomerAction.acknowledgeActionConfiguration) &&
        Objects.equals(this.resetActionConfiguration, alarmStateCustomerAction.resetActionConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, snoozeActionConfiguration, enableActionConfiguration, disableActionConfiguration, acknowledgeActionConfiguration, resetActionConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmStateCustomerAction {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    snoozeActionConfiguration: ").append(toIndentedString(snoozeActionConfiguration)).append("\n");
    sb.append("    enableActionConfiguration: ").append(toIndentedString(enableActionConfiguration)).append("\n");
    sb.append("    disableActionConfiguration: ").append(toIndentedString(disableActionConfiguration)).append("\n");
    sb.append("    acknowledgeActionConfiguration: ").append(toIndentedString(acknowledgeActionConfiguration)).append("\n");
    sb.append("    resetActionConfiguration: ").append(toIndentedString(resetActionConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("snoozeActionConfiguration");
    openapiFields.add("enableActionConfiguration");
    openapiFields.add("disableActionConfiguration");
    openapiFields.add("acknowledgeActionConfiguration");
    openapiFields.add("resetActionConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlarmStateCustomerAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlarmStateCustomerAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlarmStateCustomerAction is not found in the empty JSON string", AlarmStateCustomerAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlarmStateCustomerAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlarmStateCustomerAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `actionName`
      if (jsonObj.get("actionName") != null && !jsonObj.get("actionName").isJsonNull()) {
        CustomerActionName.validateJsonElement(jsonObj.get("actionName"));
      }
      // validate the optional field `snoozeActionConfiguration`
      if (jsonObj.get("snoozeActionConfiguration") != null && !jsonObj.get("snoozeActionConfiguration").isJsonNull()) {
        CustomerActionSnoozeActionConfiguration.validateJsonElement(jsonObj.get("snoozeActionConfiguration"));
      }
      // validate the optional field `enableActionConfiguration`
      if (jsonObj.get("enableActionConfiguration") != null && !jsonObj.get("enableActionConfiguration").isJsonNull()) {
        CustomerActionEnableActionConfiguration.validateJsonElement(jsonObj.get("enableActionConfiguration"));
      }
      // validate the optional field `disableActionConfiguration`
      if (jsonObj.get("disableActionConfiguration") != null && !jsonObj.get("disableActionConfiguration").isJsonNull()) {
        CustomerActionDisableActionConfiguration.validateJsonElement(jsonObj.get("disableActionConfiguration"));
      }
      // validate the optional field `acknowledgeActionConfiguration`
      if (jsonObj.get("acknowledgeActionConfiguration") != null && !jsonObj.get("acknowledgeActionConfiguration").isJsonNull()) {
        CustomerActionAcknowledgeActionConfiguration.validateJsonElement(jsonObj.get("acknowledgeActionConfiguration"));
      }
      // validate the optional field `resetActionConfiguration`
      if (jsonObj.get("resetActionConfiguration") != null && !jsonObj.get("resetActionConfiguration").isJsonNull()) {
        CustomerActionResetActionConfiguration.validateJsonElement(jsonObj.get("resetActionConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlarmStateCustomerAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlarmStateCustomerAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlarmStateCustomerAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlarmStateCustomerAction.class));

       return (TypeAdapter<T>) new TypeAdapter<AlarmStateCustomerAction>() {
           @Override
           public void write(JsonWriter out, AlarmStateCustomerAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlarmStateCustomerAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlarmStateCustomerAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlarmStateCustomerAction
   * @throws IOException if the JSON string is invalid with respect to AlarmStateCustomerAction
   */
  public static AlarmStateCustomerAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlarmStateCustomerAction.class);
  }

  /**
   * Convert an instance of AlarmStateCustomerAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

