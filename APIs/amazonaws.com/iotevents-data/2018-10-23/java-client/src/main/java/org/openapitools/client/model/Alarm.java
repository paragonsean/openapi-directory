/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AlarmAlarmState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about an alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Alarm {
  public static final String SERIALIZED_NAME_ALARM_MODEL_NAME = "alarmModelName";
  @SerializedName(SERIALIZED_NAME_ALARM_MODEL_NAME)
  private String alarmModelName;

  public static final String SERIALIZED_NAME_ALARM_MODEL_VERSION = "alarmModelVersion";
  @SerializedName(SERIALIZED_NAME_ALARM_MODEL_VERSION)
  private String alarmModelVersion;

  public static final String SERIALIZED_NAME_KEY_VALUE = "keyValue";
  @SerializedName(SERIALIZED_NAME_KEY_VALUE)
  private String keyValue;

  public static final String SERIALIZED_NAME_ALARM_STATE = "alarmState";
  @SerializedName(SERIALIZED_NAME_ALARM_STATE)
  private AlarmAlarmState alarmState;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATE_TIME = "lastUpdateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_TIME)
  private OffsetDateTime lastUpdateTime;

  public Alarm() {
  }

  public Alarm alarmModelName(String alarmModelName) {
    this.alarmModelName = alarmModelName;
    return this;
  }

  /**
   * Get alarmModelName
   * @return alarmModelName
   */
  @javax.annotation.Nullable
  public String getAlarmModelName() {
    return alarmModelName;
  }

  public void setAlarmModelName(String alarmModelName) {
    this.alarmModelName = alarmModelName;
  }


  public Alarm alarmModelVersion(String alarmModelVersion) {
    this.alarmModelVersion = alarmModelVersion;
    return this;
  }

  /**
   * Get alarmModelVersion
   * @return alarmModelVersion
   */
  @javax.annotation.Nullable
  public String getAlarmModelVersion() {
    return alarmModelVersion;
  }

  public void setAlarmModelVersion(String alarmModelVersion) {
    this.alarmModelVersion = alarmModelVersion;
  }


  public Alarm keyValue(String keyValue) {
    this.keyValue = keyValue;
    return this;
  }

  /**
   * Get keyValue
   * @return keyValue
   */
  @javax.annotation.Nullable
  public String getKeyValue() {
    return keyValue;
  }

  public void setKeyValue(String keyValue) {
    this.keyValue = keyValue;
  }


  public Alarm alarmState(AlarmAlarmState alarmState) {
    this.alarmState = alarmState;
    return this;
  }

  /**
   * Get alarmState
   * @return alarmState
   */
  @javax.annotation.Nullable
  public AlarmAlarmState getAlarmState() {
    return alarmState;
  }

  public void setAlarmState(AlarmAlarmState alarmState) {
    this.alarmState = alarmState;
  }


  public Alarm severity(Integer severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public Alarm creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Alarm lastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
    return this;
  }

  /**
   * Get lastUpdateTime
   * @return lastUpdateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdateTime() {
    return lastUpdateTime;
  }

  public void setLastUpdateTime(OffsetDateTime lastUpdateTime) {
    this.lastUpdateTime = lastUpdateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alarm alarm = (Alarm) o;
    return Objects.equals(this.alarmModelName, alarm.alarmModelName) &&
        Objects.equals(this.alarmModelVersion, alarm.alarmModelVersion) &&
        Objects.equals(this.keyValue, alarm.keyValue) &&
        Objects.equals(this.alarmState, alarm.alarmState) &&
        Objects.equals(this.severity, alarm.severity) &&
        Objects.equals(this.creationTime, alarm.creationTime) &&
        Objects.equals(this.lastUpdateTime, alarm.lastUpdateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alarmModelName, alarmModelVersion, keyValue, alarmState, severity, creationTime, lastUpdateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alarm {\n");
    sb.append("    alarmModelName: ").append(toIndentedString(alarmModelName)).append("\n");
    sb.append("    alarmModelVersion: ").append(toIndentedString(alarmModelVersion)).append("\n");
    sb.append("    keyValue: ").append(toIndentedString(keyValue)).append("\n");
    sb.append("    alarmState: ").append(toIndentedString(alarmState)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdateTime: ").append(toIndentedString(lastUpdateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alarmModelName");
    openapiFields.add("alarmModelVersion");
    openapiFields.add("keyValue");
    openapiFields.add("alarmState");
    openapiFields.add("severity");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Alarm
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alarm.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alarm is not found in the empty JSON string", Alarm.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Alarm.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alarm` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alarmModelName`
      if (jsonObj.get("alarmModelName") != null && !jsonObj.get("alarmModelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("alarmModelName"));
      }
      // validate the optional field `alarmModelVersion`
      if (jsonObj.get("alarmModelVersion") != null && !jsonObj.get("alarmModelVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("alarmModelVersion"));
      }
      // validate the optional field `keyValue`
      if (jsonObj.get("keyValue") != null && !jsonObj.get("keyValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("keyValue"));
      }
      // validate the optional field `alarmState`
      if (jsonObj.get("alarmState") != null && !jsonObj.get("alarmState").isJsonNull()) {
        AlarmAlarmState.validateJsonElement(jsonObj.get("alarmState"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdateTime`
      if (jsonObj.get("lastUpdateTime") != null && !jsonObj.get("lastUpdateTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdateTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alarm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alarm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alarm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alarm.class));

       return (TypeAdapter<T>) new TypeAdapter<Alarm>() {
           @Override
           public void write(JsonWriter out, Alarm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alarm read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Alarm given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Alarm
   * @throws IOException if the JSON string is invalid with respect to Alarm
   */
  public static Alarm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alarm.class);
  }

  /**
   * Convert an instance of Alarm to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

