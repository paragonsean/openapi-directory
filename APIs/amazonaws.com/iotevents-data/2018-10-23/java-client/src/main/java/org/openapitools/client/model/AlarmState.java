/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlarmStateCustomerAction;
import org.openapitools.client.model.AlarmStateName;
import org.openapitools.client.model.AlarmStateRuleEvaluation;
import org.openapitools.client.model.AlarmStateSystemEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about the current state of the alarm.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlarmState {
  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private AlarmStateName stateName;

  public static final String SERIALIZED_NAME_RULE_EVALUATION = "ruleEvaluation";
  @SerializedName(SERIALIZED_NAME_RULE_EVALUATION)
  private AlarmStateRuleEvaluation ruleEvaluation;

  public static final String SERIALIZED_NAME_CUSTOMER_ACTION = "customerAction";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACTION)
  private AlarmStateCustomerAction customerAction;

  public static final String SERIALIZED_NAME_SYSTEM_EVENT = "systemEvent";
  @SerializedName(SERIALIZED_NAME_SYSTEM_EVENT)
  private AlarmStateSystemEvent systemEvent;

  public AlarmState() {
  }

  public AlarmState stateName(AlarmStateName stateName) {
    this.stateName = stateName;
    return this;
  }

  /**
   * Get stateName
   * @return stateName
   */
  @javax.annotation.Nullable
  public AlarmStateName getStateName() {
    return stateName;
  }

  public void setStateName(AlarmStateName stateName) {
    this.stateName = stateName;
  }


  public AlarmState ruleEvaluation(AlarmStateRuleEvaluation ruleEvaluation) {
    this.ruleEvaluation = ruleEvaluation;
    return this;
  }

  /**
   * Get ruleEvaluation
   * @return ruleEvaluation
   */
  @javax.annotation.Nullable
  public AlarmStateRuleEvaluation getRuleEvaluation() {
    return ruleEvaluation;
  }

  public void setRuleEvaluation(AlarmStateRuleEvaluation ruleEvaluation) {
    this.ruleEvaluation = ruleEvaluation;
  }


  public AlarmState customerAction(AlarmStateCustomerAction customerAction) {
    this.customerAction = customerAction;
    return this;
  }

  /**
   * Get customerAction
   * @return customerAction
   */
  @javax.annotation.Nullable
  public AlarmStateCustomerAction getCustomerAction() {
    return customerAction;
  }

  public void setCustomerAction(AlarmStateCustomerAction customerAction) {
    this.customerAction = customerAction;
  }


  public AlarmState systemEvent(AlarmStateSystemEvent systemEvent) {
    this.systemEvent = systemEvent;
    return this;
  }

  /**
   * Get systemEvent
   * @return systemEvent
   */
  @javax.annotation.Nullable
  public AlarmStateSystemEvent getSystemEvent() {
    return systemEvent;
  }

  public void setSystemEvent(AlarmStateSystemEvent systemEvent) {
    this.systemEvent = systemEvent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmState alarmState = (AlarmState) o;
    return Objects.equals(this.stateName, alarmState.stateName) &&
        Objects.equals(this.ruleEvaluation, alarmState.ruleEvaluation) &&
        Objects.equals(this.customerAction, alarmState.customerAction) &&
        Objects.equals(this.systemEvent, alarmState.systemEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stateName, ruleEvaluation, customerAction, systemEvent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmState {\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    ruleEvaluation: ").append(toIndentedString(ruleEvaluation)).append("\n");
    sb.append("    customerAction: ").append(toIndentedString(customerAction)).append("\n");
    sb.append("    systemEvent: ").append(toIndentedString(systemEvent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stateName");
    openapiFields.add("ruleEvaluation");
    openapiFields.add("customerAction");
    openapiFields.add("systemEvent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlarmState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlarmState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlarmState is not found in the empty JSON string", AlarmState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlarmState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlarmState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `stateName`
      if (jsonObj.get("stateName") != null && !jsonObj.get("stateName").isJsonNull()) {
        AlarmStateName.validateJsonElement(jsonObj.get("stateName"));
      }
      // validate the optional field `ruleEvaluation`
      if (jsonObj.get("ruleEvaluation") != null && !jsonObj.get("ruleEvaluation").isJsonNull()) {
        AlarmStateRuleEvaluation.validateJsonElement(jsonObj.get("ruleEvaluation"));
      }
      // validate the optional field `customerAction`
      if (jsonObj.get("customerAction") != null && !jsonObj.get("customerAction").isJsonNull()) {
        AlarmStateCustomerAction.validateJsonElement(jsonObj.get("customerAction"));
      }
      // validate the optional field `systemEvent`
      if (jsonObj.get("systemEvent") != null && !jsonObj.get("systemEvent").isJsonNull()) {
        AlarmStateSystemEvent.validateJsonElement(jsonObj.get("systemEvent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlarmState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlarmState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlarmState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlarmState.class));

       return (TypeAdapter<T>) new TypeAdapter<AlarmState>() {
           @Override
           public void write(JsonWriter out, AlarmState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlarmState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlarmState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlarmState
   * @throws IOException if the JSON string is invalid with respect to AlarmState
   */
  public static AlarmState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlarmState.class);
  }

  /**
   * Convert an instance of AlarmState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

