/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchPutMessageResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchPutMessageResponse {
  public static final String SERIALIZED_NAME_BATCH_PUT_MESSAGE_ERROR_ENTRIES = "BatchPutMessageErrorEntries";
  @SerializedName(SERIALIZED_NAME_BATCH_PUT_MESSAGE_ERROR_ENTRIES)
  private List batchPutMessageErrorEntries;

  public BatchPutMessageResponse() {
  }

  public BatchPutMessageResponse batchPutMessageErrorEntries(List batchPutMessageErrorEntries) {
    this.batchPutMessageErrorEntries = batchPutMessageErrorEntries;
    return this;
  }

  /**
   * Get batchPutMessageErrorEntries
   * @return batchPutMessageErrorEntries
   */
  @javax.annotation.Nullable
  public List getBatchPutMessageErrorEntries() {
    return batchPutMessageErrorEntries;
  }

  public void setBatchPutMessageErrorEntries(List batchPutMessageErrorEntries) {
    this.batchPutMessageErrorEntries = batchPutMessageErrorEntries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchPutMessageResponse batchPutMessageResponse = (BatchPutMessageResponse) o;
    return Objects.equals(this.batchPutMessageErrorEntries, batchPutMessageResponse.batchPutMessageErrorEntries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchPutMessageErrorEntries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchPutMessageResponse {\n");
    sb.append("    batchPutMessageErrorEntries: ").append(toIndentedString(batchPutMessageErrorEntries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BatchPutMessageErrorEntries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchPutMessageResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchPutMessageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchPutMessageResponse is not found in the empty JSON string", BatchPutMessageResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchPutMessageResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchPutMessageResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BatchPutMessageErrorEntries`
      if (jsonObj.get("BatchPutMessageErrorEntries") != null && !jsonObj.get("BatchPutMessageErrorEntries").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BatchPutMessageErrorEntries"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchPutMessageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchPutMessageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchPutMessageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchPutMessageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchPutMessageResponse>() {
           @Override
           public void write(JsonWriter out, BatchPutMessageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchPutMessageResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchPutMessageResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchPutMessageResponse
   * @throws IOException if the JSON string is invalid with respect to BatchPutMessageResponse
   */
  public static BatchPutMessageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchPutMessageResponse.class);
  }

  /**
   * Convert an instance of BatchPutMessageResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

