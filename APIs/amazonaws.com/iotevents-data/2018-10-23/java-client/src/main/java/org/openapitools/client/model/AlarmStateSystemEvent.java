/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EventType;
import org.openapitools.client.model.SystemEventStateChangeConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AlarmStateSystemEvent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlarmStateSystemEvent {
  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventType eventType;

  public static final String SERIALIZED_NAME_STATE_CHANGE_CONFIGURATION = "stateChangeConfiguration";
  @SerializedName(SERIALIZED_NAME_STATE_CHANGE_CONFIGURATION)
  private SystemEventStateChangeConfiguration stateChangeConfiguration;

  public AlarmStateSystemEvent() {
  }

  public AlarmStateSystemEvent eventType(EventType eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public EventType getEventType() {
    return eventType;
  }

  public void setEventType(EventType eventType) {
    this.eventType = eventType;
  }


  public AlarmStateSystemEvent stateChangeConfiguration(SystemEventStateChangeConfiguration stateChangeConfiguration) {
    this.stateChangeConfiguration = stateChangeConfiguration;
    return this;
  }

  /**
   * Get stateChangeConfiguration
   * @return stateChangeConfiguration
   */
  @javax.annotation.Nullable
  public SystemEventStateChangeConfiguration getStateChangeConfiguration() {
    return stateChangeConfiguration;
  }

  public void setStateChangeConfiguration(SystemEventStateChangeConfiguration stateChangeConfiguration) {
    this.stateChangeConfiguration = stateChangeConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlarmStateSystemEvent alarmStateSystemEvent = (AlarmStateSystemEvent) o;
    return Objects.equals(this.eventType, alarmStateSystemEvent.eventType) &&
        Objects.equals(this.stateChangeConfiguration, alarmStateSystemEvent.stateChangeConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventType, stateChangeConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlarmStateSystemEvent {\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    stateChangeConfiguration: ").append(toIndentedString(stateChangeConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventType");
    openapiFields.add("stateChangeConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlarmStateSystemEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlarmStateSystemEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlarmStateSystemEvent is not found in the empty JSON string", AlarmStateSystemEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlarmStateSystemEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlarmStateSystemEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventType`
      if (jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) {
        EventType.validateJsonElement(jsonObj.get("eventType"));
      }
      // validate the optional field `stateChangeConfiguration`
      if (jsonObj.get("stateChangeConfiguration") != null && !jsonObj.get("stateChangeConfiguration").isJsonNull()) {
        SystemEventStateChangeConfiguration.validateJsonElement(jsonObj.get("stateChangeConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlarmStateSystemEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlarmStateSystemEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlarmStateSystemEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlarmStateSystemEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AlarmStateSystemEvent>() {
           @Override
           public void write(JsonWriter out, AlarmStateSystemEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlarmStateSystemEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlarmStateSystemEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlarmStateSystemEvent
   * @throws IOException if the JSON string is invalid with respect to AlarmStateSystemEvent
   */
  public static AlarmStateSystemEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlarmStateSystemEvent.class);
  }

  /**
   * Convert an instance of AlarmStateSystemEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

