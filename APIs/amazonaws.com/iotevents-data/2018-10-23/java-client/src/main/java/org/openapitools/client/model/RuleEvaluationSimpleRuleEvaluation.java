/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ComparisonOperator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RuleEvaluationSimpleRuleEvaluation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleEvaluationSimpleRuleEvaluation {
  public static final String SERIALIZED_NAME_INPUT_PROPERTY_VALUE = "inputPropertyValue";
  @SerializedName(SERIALIZED_NAME_INPUT_PROPERTY_VALUE)
  private String inputPropertyValue;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private ComparisonOperator operator;

  public static final String SERIALIZED_NAME_THRESHOLD_VALUE = "thresholdValue";
  @SerializedName(SERIALIZED_NAME_THRESHOLD_VALUE)
  private String thresholdValue;

  public RuleEvaluationSimpleRuleEvaluation() {
  }

  public RuleEvaluationSimpleRuleEvaluation inputPropertyValue(String inputPropertyValue) {
    this.inputPropertyValue = inputPropertyValue;
    return this;
  }

  /**
   * Get inputPropertyValue
   * @return inputPropertyValue
   */
  @javax.annotation.Nullable
  public String getInputPropertyValue() {
    return inputPropertyValue;
  }

  public void setInputPropertyValue(String inputPropertyValue) {
    this.inputPropertyValue = inputPropertyValue;
  }


  public RuleEvaluationSimpleRuleEvaluation operator(ComparisonOperator operator) {
    this.operator = operator;
    return this;
  }

  /**
   * Get operator
   * @return operator
   */
  @javax.annotation.Nullable
  public ComparisonOperator getOperator() {
    return operator;
  }

  public void setOperator(ComparisonOperator operator) {
    this.operator = operator;
  }


  public RuleEvaluationSimpleRuleEvaluation thresholdValue(String thresholdValue) {
    this.thresholdValue = thresholdValue;
    return this;
  }

  /**
   * Get thresholdValue
   * @return thresholdValue
   */
  @javax.annotation.Nullable
  public String getThresholdValue() {
    return thresholdValue;
  }

  public void setThresholdValue(String thresholdValue) {
    this.thresholdValue = thresholdValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleEvaluationSimpleRuleEvaluation ruleEvaluationSimpleRuleEvaluation = (RuleEvaluationSimpleRuleEvaluation) o;
    return Objects.equals(this.inputPropertyValue, ruleEvaluationSimpleRuleEvaluation.inputPropertyValue) &&
        Objects.equals(this.operator, ruleEvaluationSimpleRuleEvaluation.operator) &&
        Objects.equals(this.thresholdValue, ruleEvaluationSimpleRuleEvaluation.thresholdValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputPropertyValue, operator, thresholdValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleEvaluationSimpleRuleEvaluation {\n");
    sb.append("    inputPropertyValue: ").append(toIndentedString(inputPropertyValue)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    thresholdValue: ").append(toIndentedString(thresholdValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputPropertyValue");
    openapiFields.add("operator");
    openapiFields.add("thresholdValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleEvaluationSimpleRuleEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleEvaluationSimpleRuleEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleEvaluationSimpleRuleEvaluation is not found in the empty JSON string", RuleEvaluationSimpleRuleEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleEvaluationSimpleRuleEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleEvaluationSimpleRuleEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `inputPropertyValue`
      if (jsonObj.get("inputPropertyValue") != null && !jsonObj.get("inputPropertyValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("inputPropertyValue"));
      }
      // validate the optional field `operator`
      if (jsonObj.get("operator") != null && !jsonObj.get("operator").isJsonNull()) {
        ComparisonOperator.validateJsonElement(jsonObj.get("operator"));
      }
      // validate the optional field `thresholdValue`
      if (jsonObj.get("thresholdValue") != null && !jsonObj.get("thresholdValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("thresholdValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleEvaluationSimpleRuleEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleEvaluationSimpleRuleEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleEvaluationSimpleRuleEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleEvaluationSimpleRuleEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleEvaluationSimpleRuleEvaluation>() {
           @Override
           public void write(JsonWriter out, RuleEvaluationSimpleRuleEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleEvaluationSimpleRuleEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleEvaluationSimpleRuleEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleEvaluationSimpleRuleEvaluation
   * @throws IOException if the JSON string is invalid with respect to RuleEvaluationSimpleRuleEvaluation
   */
  public static RuleEvaluationSimpleRuleEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleEvaluationSimpleRuleEvaluation.class);
  }

  /**
   * Convert an instance of RuleEvaluationSimpleRuleEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

