/*
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SnoozeAlarmActionRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchSnoozeAlarmRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:38.480686-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchSnoozeAlarmRequest {
  public static final String SERIALIZED_NAME_SNOOZE_ACTION_REQUESTS = "snoozeActionRequests";
  @SerializedName(SERIALIZED_NAME_SNOOZE_ACTION_REQUESTS)
  private List<SnoozeAlarmActionRequest> snoozeActionRequests = new ArrayList<>();

  public BatchSnoozeAlarmRequest() {
  }

  public BatchSnoozeAlarmRequest snoozeActionRequests(List<SnoozeAlarmActionRequest> snoozeActionRequests) {
    this.snoozeActionRequests = snoozeActionRequests;
    return this;
  }

  public BatchSnoozeAlarmRequest addSnoozeActionRequestsItem(SnoozeAlarmActionRequest snoozeActionRequestsItem) {
    if (this.snoozeActionRequests == null) {
      this.snoozeActionRequests = new ArrayList<>();
    }
    this.snoozeActionRequests.add(snoozeActionRequestsItem);
    return this;
  }

  /**
   * The list of snooze action requests. You can specify up to 10 requests per operation.
   * @return snoozeActionRequests
   */
  @javax.annotation.Nonnull
  public List<SnoozeAlarmActionRequest> getSnoozeActionRequests() {
    return snoozeActionRequests;
  }

  public void setSnoozeActionRequests(List<SnoozeAlarmActionRequest> snoozeActionRequests) {
    this.snoozeActionRequests = snoozeActionRequests;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchSnoozeAlarmRequest batchSnoozeAlarmRequest = (BatchSnoozeAlarmRequest) o;
    return Objects.equals(this.snoozeActionRequests, batchSnoozeAlarmRequest.snoozeActionRequests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(snoozeActionRequests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchSnoozeAlarmRequest {\n");
    sb.append("    snoozeActionRequests: ").append(toIndentedString(snoozeActionRequests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("snoozeActionRequests");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("snoozeActionRequests");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchSnoozeAlarmRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchSnoozeAlarmRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchSnoozeAlarmRequest is not found in the empty JSON string", BatchSnoozeAlarmRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchSnoozeAlarmRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchSnoozeAlarmRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchSnoozeAlarmRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("snoozeActionRequests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `snoozeActionRequests` to be an array in the JSON string but got `%s`", jsonObj.get("snoozeActionRequests").toString()));
      }

      JsonArray jsonArraysnoozeActionRequests = jsonObj.getAsJsonArray("snoozeActionRequests");
      // validate the required field `snoozeActionRequests` (array)
      for (int i = 0; i < jsonArraysnoozeActionRequests.size(); i++) {
        SnoozeAlarmActionRequest.validateJsonElement(jsonArraysnoozeActionRequests.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchSnoozeAlarmRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchSnoozeAlarmRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchSnoozeAlarmRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchSnoozeAlarmRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchSnoozeAlarmRequest>() {
           @Override
           public void write(JsonWriter out, BatchSnoozeAlarmRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchSnoozeAlarmRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchSnoozeAlarmRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchSnoozeAlarmRequest
   * @throws IOException if the JSON string is invalid with respect to BatchSnoozeAlarmRequest
   */
  public static BatchSnoozeAlarmRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchSnoozeAlarmRequest.class);
  }

  /**
   * Convert an instance of BatchSnoozeAlarmRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

