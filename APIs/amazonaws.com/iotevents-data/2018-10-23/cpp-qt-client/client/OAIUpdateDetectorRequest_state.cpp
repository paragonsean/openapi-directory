/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDetectorRequest_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDetectorRequest_state::OAIUpdateDetectorRequest_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDetectorRequest_state::OAIUpdateDetectorRequest_state() {
    this->initializeModel();
}

OAIUpdateDetectorRequest_state::~OAIUpdateDetectorRequest_state() {}

void OAIUpdateDetectorRequest_state::initializeModel() {

    m_state_name_isSet = false;
    m_state_name_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;

    m_timers_isSet = false;
    m_timers_isValid = false;
}

void OAIUpdateDetectorRequest_state::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDetectorRequest_state::fromJsonObject(QJsonObject json) {

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;

    m_timers_isValid = ::OpenAPI::fromJsonValue(m_timers, json[QString("timers")]);
    m_timers_isSet = !json[QString("timers")].isNull() && m_timers_isValid;
}

QString OAIUpdateDetectorRequest_state::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDetectorRequest_state::asJsonObject() const {
    QJsonObject obj;
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    if (m_variables.isSet()) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    if (m_timers.isSet()) {
        obj.insert(QString("timers"), ::OpenAPI::toJsonValue(m_timers));
    }
    return obj;
}

QString OAIUpdateDetectorRequest_state::getStateName() const {
    return m_state_name;
}
void OAIUpdateDetectorRequest_state::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIUpdateDetectorRequest_state::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIUpdateDetectorRequest_state::is_state_name_Valid() const{
    return m_state_name_isValid;
}

QList OAIUpdateDetectorRequest_state::getVariables() const {
    return m_variables;
}
void OAIUpdateDetectorRequest_state::setVariables(const QList &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIUpdateDetectorRequest_state::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIUpdateDetectorRequest_state::is_variables_Valid() const{
    return m_variables_isValid;
}

QList OAIUpdateDetectorRequest_state::getTimers() const {
    return m_timers;
}
void OAIUpdateDetectorRequest_state::setTimers(const QList &timers) {
    m_timers = timers;
    m_timers_isSet = true;
}

bool OAIUpdateDetectorRequest_state::is_timers_Set() const{
    return m_timers_isSet;
}

bool OAIUpdateDetectorRequest_state::is_timers_Valid() const{
    return m_timers_isValid;
}

bool OAIUpdateDetectorRequest_state::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDetectorRequest_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_name_isValid && m_variables_isValid && m_timers_isValid && true;
}

} // namespace OpenAPI
