/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchEnableAlarmRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchEnableAlarmRequest::OAIBatchEnableAlarmRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchEnableAlarmRequest::OAIBatchEnableAlarmRequest() {
    this->initializeModel();
}

OAIBatchEnableAlarmRequest::~OAIBatchEnableAlarmRequest() {}

void OAIBatchEnableAlarmRequest::initializeModel() {

    m_enable_action_requests_isSet = false;
    m_enable_action_requests_isValid = false;
}

void OAIBatchEnableAlarmRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchEnableAlarmRequest::fromJsonObject(QJsonObject json) {

    m_enable_action_requests_isValid = ::OpenAPI::fromJsonValue(m_enable_action_requests, json[QString("enableActionRequests")]);
    m_enable_action_requests_isSet = !json[QString("enableActionRequests")].isNull() && m_enable_action_requests_isValid;
}

QString OAIBatchEnableAlarmRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchEnableAlarmRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_action_requests.isSet()) {
        obj.insert(QString("enableActionRequests"), ::OpenAPI::toJsonValue(m_enable_action_requests));
    }
    return obj;
}

QList OAIBatchEnableAlarmRequest::getEnableActionRequests() const {
    return m_enable_action_requests;
}
void OAIBatchEnableAlarmRequest::setEnableActionRequests(const QList &enable_action_requests) {
    m_enable_action_requests = enable_action_requests;
    m_enable_action_requests_isSet = true;
}

bool OAIBatchEnableAlarmRequest::is_enable_action_requests_Set() const{
    return m_enable_action_requests_isSet;
}

bool OAIBatchEnableAlarmRequest::is_enable_action_requests_Valid() const{
    return m_enable_action_requests_isValid;
}

bool OAIBatchEnableAlarmRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_action_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchEnableAlarmRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_action_requests_isValid && true;
}

} // namespace OpenAPI
