/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAcknowledgeAlarm_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAcknowledgeAlarm_request::OAIBatchAcknowledgeAlarm_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAcknowledgeAlarm_request::OAIBatchAcknowledgeAlarm_request() {
    this->initializeModel();
}

OAIBatchAcknowledgeAlarm_request::~OAIBatchAcknowledgeAlarm_request() {}

void OAIBatchAcknowledgeAlarm_request::initializeModel() {

    m_acknowledge_action_requests_isSet = false;
    m_acknowledge_action_requests_isValid = false;
}

void OAIBatchAcknowledgeAlarm_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAcknowledgeAlarm_request::fromJsonObject(QJsonObject json) {

    m_acknowledge_action_requests_isValid = ::OpenAPI::fromJsonValue(m_acknowledge_action_requests, json[QString("acknowledgeActionRequests")]);
    m_acknowledge_action_requests_isSet = !json[QString("acknowledgeActionRequests")].isNull() && m_acknowledge_action_requests_isValid;
}

QString OAIBatchAcknowledgeAlarm_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAcknowledgeAlarm_request::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledge_action_requests.size() > 0) {
        obj.insert(QString("acknowledgeActionRequests"), ::OpenAPI::toJsonValue(m_acknowledge_action_requests));
    }
    return obj;
}

QList<OAIAcknowledgeAlarmActionRequest> OAIBatchAcknowledgeAlarm_request::getAcknowledgeActionRequests() const {
    return m_acknowledge_action_requests;
}
void OAIBatchAcknowledgeAlarm_request::setAcknowledgeActionRequests(const QList<OAIAcknowledgeAlarmActionRequest> &acknowledge_action_requests) {
    m_acknowledge_action_requests = acknowledge_action_requests;
    m_acknowledge_action_requests_isSet = true;
}

bool OAIBatchAcknowledgeAlarm_request::is_acknowledge_action_requests_Set() const{
    return m_acknowledge_action_requests_isSet;
}

bool OAIBatchAcknowledgeAlarm_request::is_acknowledge_action_requests_Valid() const{
    return m_acknowledge_action_requests_isValid;
}

bool OAIBatchAcknowledgeAlarm_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledge_action_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAcknowledgeAlarm_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acknowledge_action_requests_isValid && true;
}

} // namespace OpenAPI
