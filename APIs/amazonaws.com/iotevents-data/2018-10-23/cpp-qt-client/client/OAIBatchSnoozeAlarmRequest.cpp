/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchSnoozeAlarmRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchSnoozeAlarmRequest::OAIBatchSnoozeAlarmRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchSnoozeAlarmRequest::OAIBatchSnoozeAlarmRequest() {
    this->initializeModel();
}

OAIBatchSnoozeAlarmRequest::~OAIBatchSnoozeAlarmRequest() {}

void OAIBatchSnoozeAlarmRequest::initializeModel() {

    m_snooze_action_requests_isSet = false;
    m_snooze_action_requests_isValid = false;
}

void OAIBatchSnoozeAlarmRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchSnoozeAlarmRequest::fromJsonObject(QJsonObject json) {

    m_snooze_action_requests_isValid = ::OpenAPI::fromJsonValue(m_snooze_action_requests, json[QString("snoozeActionRequests")]);
    m_snooze_action_requests_isSet = !json[QString("snoozeActionRequests")].isNull() && m_snooze_action_requests_isValid;
}

QString OAIBatchSnoozeAlarmRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchSnoozeAlarmRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_snooze_action_requests.isSet()) {
        obj.insert(QString("snoozeActionRequests"), ::OpenAPI::toJsonValue(m_snooze_action_requests));
    }
    return obj;
}

QList OAIBatchSnoozeAlarmRequest::getSnoozeActionRequests() const {
    return m_snooze_action_requests;
}
void OAIBatchSnoozeAlarmRequest::setSnoozeActionRequests(const QList &snooze_action_requests) {
    m_snooze_action_requests = snooze_action_requests;
    m_snooze_action_requests_isSet = true;
}

bool OAIBatchSnoozeAlarmRequest::is_snooze_action_requests_Set() const{
    return m_snooze_action_requests_isSet;
}

bool OAIBatchSnoozeAlarmRequest::is_snooze_action_requests_Valid() const{
    return m_snooze_action_requests_isValid;
}

bool OAIBatchSnoozeAlarmRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snooze_action_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchSnoozeAlarmRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snooze_action_requests_isValid && true;
}

} // namespace OpenAPI
