/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarmStateName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarmStateName::OAIAlarmStateName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarmStateName::OAIAlarmStateName() {
    this->initializeModel();
}

OAIAlarmStateName::~OAIAlarmStateName() {}

void OAIAlarmStateName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAlarmStateName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAlarmStateName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmStateName::DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NORMAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmStateName::NORMAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmStateName::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACKNOWLEDGED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmStateName::ACKNOWLEDGED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNOOZE_DISABLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmStateName::SNOOZE_DISABLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LATCHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAlarmStateName::LATCHED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAlarmStateName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAlarmStateName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAlarmStateName::DISABLED:
            val = "DISABLED";
            break;
        case eOAIAlarmStateName::NORMAL:
            val = "NORMAL";
            break;
        case eOAIAlarmStateName::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIAlarmStateName::ACKNOWLEDGED:
            val = "ACKNOWLEDGED";
            break;
        case eOAIAlarmStateName::SNOOZE_DISABLED:
            val = "SNOOZE_DISABLED";
            break;
        case eOAIAlarmStateName::LATCHED:
            val = "LATCHED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAlarmStateName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAlarmStateName::eOAIAlarmStateName OAIAlarmStateName::getValue() const {
    return m_value;
}

void OAIAlarmStateName::setValue(const OAIAlarmStateName::eOAIAlarmStateName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAlarmStateName::isSet() const {
    
    return m_value_isSet;
}

bool OAIAlarmStateName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
