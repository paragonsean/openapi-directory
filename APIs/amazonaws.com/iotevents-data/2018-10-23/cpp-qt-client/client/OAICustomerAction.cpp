/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerAction::OAICustomerAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerAction::OAICustomerAction() {
    this->initializeModel();
}

OAICustomerAction::~OAICustomerAction() {}

void OAICustomerAction::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_snooze_action_configuration_isSet = false;
    m_snooze_action_configuration_isValid = false;

    m_enable_action_configuration_isSet = false;
    m_enable_action_configuration_isValid = false;

    m_disable_action_configuration_isSet = false;
    m_disable_action_configuration_isValid = false;

    m_acknowledge_action_configuration_isSet = false;
    m_acknowledge_action_configuration_isValid = false;

    m_reset_action_configuration_isSet = false;
    m_reset_action_configuration_isValid = false;
}

void OAICustomerAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerAction::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_snooze_action_configuration_isValid = ::OpenAPI::fromJsonValue(m_snooze_action_configuration, json[QString("snoozeActionConfiguration")]);
    m_snooze_action_configuration_isSet = !json[QString("snoozeActionConfiguration")].isNull() && m_snooze_action_configuration_isValid;

    m_enable_action_configuration_isValid = ::OpenAPI::fromJsonValue(m_enable_action_configuration, json[QString("enableActionConfiguration")]);
    m_enable_action_configuration_isSet = !json[QString("enableActionConfiguration")].isNull() && m_enable_action_configuration_isValid;

    m_disable_action_configuration_isValid = ::OpenAPI::fromJsonValue(m_disable_action_configuration, json[QString("disableActionConfiguration")]);
    m_disable_action_configuration_isSet = !json[QString("disableActionConfiguration")].isNull() && m_disable_action_configuration_isValid;

    m_acknowledge_action_configuration_isValid = ::OpenAPI::fromJsonValue(m_acknowledge_action_configuration, json[QString("acknowledgeActionConfiguration")]);
    m_acknowledge_action_configuration_isSet = !json[QString("acknowledgeActionConfiguration")].isNull() && m_acknowledge_action_configuration_isValid;

    m_reset_action_configuration_isValid = ::OpenAPI::fromJsonValue(m_reset_action_configuration, json[QString("resetActionConfiguration")]);
    m_reset_action_configuration_isSet = !json[QString("resetActionConfiguration")].isNull() && m_reset_action_configuration_isValid;
}

QString OAICustomerAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name.isSet()) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_snooze_action_configuration.isSet()) {
        obj.insert(QString("snoozeActionConfiguration"), ::OpenAPI::toJsonValue(m_snooze_action_configuration));
    }
    if (m_enable_action_configuration.isSet()) {
        obj.insert(QString("enableActionConfiguration"), ::OpenAPI::toJsonValue(m_enable_action_configuration));
    }
    if (m_disable_action_configuration.isSet()) {
        obj.insert(QString("disableActionConfiguration"), ::OpenAPI::toJsonValue(m_disable_action_configuration));
    }
    if (m_acknowledge_action_configuration.isSet()) {
        obj.insert(QString("acknowledgeActionConfiguration"), ::OpenAPI::toJsonValue(m_acknowledge_action_configuration));
    }
    if (m_reset_action_configuration.isSet()) {
        obj.insert(QString("resetActionConfiguration"), ::OpenAPI::toJsonValue(m_reset_action_configuration));
    }
    return obj;
}

OAICustomerActionName OAICustomerAction::getActionName() const {
    return m_action_name;
}
void OAICustomerAction::setActionName(const OAICustomerActionName &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAICustomerAction::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAICustomerAction::is_action_name_Valid() const{
    return m_action_name_isValid;
}

OAICustomerAction_snoozeActionConfiguration OAICustomerAction::getSnoozeActionConfiguration() const {
    return m_snooze_action_configuration;
}
void OAICustomerAction::setSnoozeActionConfiguration(const OAICustomerAction_snoozeActionConfiguration &snooze_action_configuration) {
    m_snooze_action_configuration = snooze_action_configuration;
    m_snooze_action_configuration_isSet = true;
}

bool OAICustomerAction::is_snooze_action_configuration_Set() const{
    return m_snooze_action_configuration_isSet;
}

bool OAICustomerAction::is_snooze_action_configuration_Valid() const{
    return m_snooze_action_configuration_isValid;
}

OAICustomerAction_enableActionConfiguration OAICustomerAction::getEnableActionConfiguration() const {
    return m_enable_action_configuration;
}
void OAICustomerAction::setEnableActionConfiguration(const OAICustomerAction_enableActionConfiguration &enable_action_configuration) {
    m_enable_action_configuration = enable_action_configuration;
    m_enable_action_configuration_isSet = true;
}

bool OAICustomerAction::is_enable_action_configuration_Set() const{
    return m_enable_action_configuration_isSet;
}

bool OAICustomerAction::is_enable_action_configuration_Valid() const{
    return m_enable_action_configuration_isValid;
}

OAICustomerAction_disableActionConfiguration OAICustomerAction::getDisableActionConfiguration() const {
    return m_disable_action_configuration;
}
void OAICustomerAction::setDisableActionConfiguration(const OAICustomerAction_disableActionConfiguration &disable_action_configuration) {
    m_disable_action_configuration = disable_action_configuration;
    m_disable_action_configuration_isSet = true;
}

bool OAICustomerAction::is_disable_action_configuration_Set() const{
    return m_disable_action_configuration_isSet;
}

bool OAICustomerAction::is_disable_action_configuration_Valid() const{
    return m_disable_action_configuration_isValid;
}

OAICustomerAction_acknowledgeActionConfiguration OAICustomerAction::getAcknowledgeActionConfiguration() const {
    return m_acknowledge_action_configuration;
}
void OAICustomerAction::setAcknowledgeActionConfiguration(const OAICustomerAction_acknowledgeActionConfiguration &acknowledge_action_configuration) {
    m_acknowledge_action_configuration = acknowledge_action_configuration;
    m_acknowledge_action_configuration_isSet = true;
}

bool OAICustomerAction::is_acknowledge_action_configuration_Set() const{
    return m_acknowledge_action_configuration_isSet;
}

bool OAICustomerAction::is_acknowledge_action_configuration_Valid() const{
    return m_acknowledge_action_configuration_isValid;
}

OAICustomerAction_resetActionConfiguration OAICustomerAction::getResetActionConfiguration() const {
    return m_reset_action_configuration;
}
void OAICustomerAction::setResetActionConfiguration(const OAICustomerAction_resetActionConfiguration &reset_action_configuration) {
    m_reset_action_configuration = reset_action_configuration;
    m_reset_action_configuration_isSet = true;
}

bool OAICustomerAction::is_reset_action_configuration_Set() const{
    return m_reset_action_configuration_isSet;
}

bool OAICustomerAction::is_reset_action_configuration_Valid() const{
    return m_reset_action_configuration_isValid;
}

bool OAICustomerAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snooze_action_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_action_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_action_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_acknowledge_action_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_action_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
