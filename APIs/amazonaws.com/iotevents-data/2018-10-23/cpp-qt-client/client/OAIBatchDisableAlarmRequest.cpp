/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDisableAlarmRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDisableAlarmRequest::OAIBatchDisableAlarmRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDisableAlarmRequest::OAIBatchDisableAlarmRequest() {
    this->initializeModel();
}

OAIBatchDisableAlarmRequest::~OAIBatchDisableAlarmRequest() {}

void OAIBatchDisableAlarmRequest::initializeModel() {

    m_disable_action_requests_isSet = false;
    m_disable_action_requests_isValid = false;
}

void OAIBatchDisableAlarmRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDisableAlarmRequest::fromJsonObject(QJsonObject json) {

    m_disable_action_requests_isValid = ::OpenAPI::fromJsonValue(m_disable_action_requests, json[QString("disableActionRequests")]);
    m_disable_action_requests_isSet = !json[QString("disableActionRequests")].isNull() && m_disable_action_requests_isValid;
}

QString OAIBatchDisableAlarmRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDisableAlarmRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_action_requests.isSet()) {
        obj.insert(QString("disableActionRequests"), ::OpenAPI::toJsonValue(m_disable_action_requests));
    }
    return obj;
}

QList OAIBatchDisableAlarmRequest::getDisableActionRequests() const {
    return m_disable_action_requests;
}
void OAIBatchDisableAlarmRequest::setDisableActionRequests(const QList &disable_action_requests) {
    m_disable_action_requests = disable_action_requests;
    m_disable_action_requests_isSet = true;
}

bool OAIBatchDisableAlarmRequest::is_disable_action_requests_Set() const{
    return m_disable_action_requests_isSet;
}

bool OAIBatchDisableAlarmRequest::is_disable_action_requests_Valid() const{
    return m_disable_action_requests_isValid;
}

bool OAIBatchDisableAlarmRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_action_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDisableAlarmRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_disable_action_requests_isValid && true;
}

} // namespace OpenAPI
