/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDetectorResponse_detector.h
 *
 * 
 */

#ifndef OAIDescribeDetectorResponse_detector_H
#define OAIDescribeDetectorResponse_detector_H

#include <QJsonObject>

#include "OAIDetector_state.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDetector_state;

class OAIDescribeDetectorResponse_detector : public OAIObject {
public:
    OAIDescribeDetectorResponse_detector();
    OAIDescribeDetectorResponse_detector(QString json);
    ~OAIDescribeDetectorResponse_detector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetectorModelName() const;
    void setDetectorModelName(const QString &detector_model_name);
    bool is_detector_model_name_Set() const;
    bool is_detector_model_name_Valid() const;

    QString getKeyValue() const;
    void setKeyValue(const QString &key_value);
    bool is_key_value_Set() const;
    bool is_key_value_Valid() const;

    QString getDetectorModelVersion() const;
    void setDetectorModelVersion(const QString &detector_model_version);
    bool is_detector_model_version_Set() const;
    bool is_detector_model_version_Valid() const;

    OAIDetector_state getState() const;
    void setState(const OAIDetector_state &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getLastUpdateTime() const;
    void setLastUpdateTime(const QDateTime &last_update_time);
    bool is_last_update_time_Set() const;
    bool is_last_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_detector_model_name;
    bool m_detector_model_name_isSet;
    bool m_detector_model_name_isValid;

    QString m_key_value;
    bool m_key_value_isSet;
    bool m_key_value_isValid;

    QString m_detector_model_version;
    bool m_detector_model_version_isSet;
    bool m_detector_model_version_isValid;

    OAIDetector_state m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_last_update_time;
    bool m_last_update_time_isSet;
    bool m_last_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDetectorResponse_detector)

#endif // OAIDescribeDetectorResponse_detector_H
