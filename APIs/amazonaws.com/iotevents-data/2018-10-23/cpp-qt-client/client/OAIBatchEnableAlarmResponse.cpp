/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchEnableAlarmResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchEnableAlarmResponse::OAIBatchEnableAlarmResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchEnableAlarmResponse::OAIBatchEnableAlarmResponse() {
    this->initializeModel();
}

OAIBatchEnableAlarmResponse::~OAIBatchEnableAlarmResponse() {}

void OAIBatchEnableAlarmResponse::initializeModel() {

    m_error_entries_isSet = false;
    m_error_entries_isValid = false;
}

void OAIBatchEnableAlarmResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchEnableAlarmResponse::fromJsonObject(QJsonObject json) {

    m_error_entries_isValid = ::OpenAPI::fromJsonValue(m_error_entries, json[QString("errorEntries")]);
    m_error_entries_isSet = !json[QString("errorEntries")].isNull() && m_error_entries_isValid;
}

QString OAIBatchEnableAlarmResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchEnableAlarmResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_entries.isSet()) {
        obj.insert(QString("errorEntries"), ::OpenAPI::toJsonValue(m_error_entries));
    }
    return obj;
}

QList OAIBatchEnableAlarmResponse::getErrorEntries() const {
    return m_error_entries;
}
void OAIBatchEnableAlarmResponse::setErrorEntries(const QList &error_entries) {
    m_error_entries = error_entries;
    m_error_entries_isSet = true;
}

bool OAIBatchEnableAlarmResponse::is_error_entries_Set() const{
    return m_error_entries_isSet;
}

bool OAIBatchEnableAlarmResponse::is_error_entries_Valid() const{
    return m_error_entries_isValid;
}

bool OAIBatchEnableAlarmResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchEnableAlarmResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
