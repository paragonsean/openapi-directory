/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteDetectorErrorEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteDetectorErrorEntry::OAIBatchDeleteDetectorErrorEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteDetectorErrorEntry::OAIBatchDeleteDetectorErrorEntry() {
    this->initializeModel();
}

OAIBatchDeleteDetectorErrorEntry::~OAIBatchDeleteDetectorErrorEntry() {}

void OAIBatchDeleteDetectorErrorEntry::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;
}

void OAIBatchDeleteDetectorErrorEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteDetectorErrorEntry::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;
}

QString OAIBatchDeleteDetectorErrorEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteDetectorErrorEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_error_code.isSet()) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    return obj;
}

QString OAIBatchDeleteDetectorErrorEntry::getMessageId() const {
    return m_message_id;
}
void OAIBatchDeleteDetectorErrorEntry::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIBatchDeleteDetectorErrorEntry::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIBatchDeleteDetectorErrorEntry::is_message_id_Valid() const{
    return m_message_id_isValid;
}

OAIErrorCode OAIBatchDeleteDetectorErrorEntry::getErrorCode() const {
    return m_error_code;
}
void OAIBatchDeleteDetectorErrorEntry::setErrorCode(const OAIErrorCode &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIBatchDeleteDetectorErrorEntry::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIBatchDeleteDetectorErrorEntry::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIBatchDeleteDetectorErrorEntry::getErrorMessage() const {
    return m_error_message;
}
void OAIBatchDeleteDetectorErrorEntry::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIBatchDeleteDetectorErrorEntry::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIBatchDeleteDetectorErrorEntry::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIBatchDeleteDetectorErrorEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteDetectorErrorEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
