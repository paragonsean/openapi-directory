/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage_timestamp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage_timestamp::OAIMessage_timestamp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage_timestamp::OAIMessage_timestamp() {
    this->initializeModel();
}

OAIMessage_timestamp::~OAIMessage_timestamp() {}

void OAIMessage_timestamp::initializeModel() {

    m_time_in_millis_isSet = false;
    m_time_in_millis_isValid = false;
}

void OAIMessage_timestamp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage_timestamp::fromJsonObject(QJsonObject json) {

    m_time_in_millis_isValid = ::OpenAPI::fromJsonValue(m_time_in_millis, json[QString("timeInMillis")]);
    m_time_in_millis_isSet = !json[QString("timeInMillis")].isNull() && m_time_in_millis_isValid;
}

QString OAIMessage_timestamp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage_timestamp::asJsonObject() const {
    QJsonObject obj;
    if (m_time_in_millis_isSet) {
        obj.insert(QString("timeInMillis"), ::OpenAPI::toJsonValue(m_time_in_millis));
    }
    return obj;
}

qint32 OAIMessage_timestamp::getTimeInMillis() const {
    return m_time_in_millis;
}
void OAIMessage_timestamp::setTimeInMillis(const qint32 &time_in_millis) {
    m_time_in_millis = time_in_millis;
    m_time_in_millis_isSet = true;
}

bool OAIMessage_timestamp::is_time_in_millis_Set() const{
    return m_time_in_millis_isSet;
}

bool OAIMessage_timestamp::is_time_in_millis_Valid() const{
    return m_time_in_millis_isValid;
}

bool OAIMessage_timestamp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage_timestamp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
