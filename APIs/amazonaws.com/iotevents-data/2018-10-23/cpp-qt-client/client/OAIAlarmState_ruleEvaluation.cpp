/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarmState_ruleEvaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarmState_ruleEvaluation::OAIAlarmState_ruleEvaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarmState_ruleEvaluation::OAIAlarmState_ruleEvaluation() {
    this->initializeModel();
}

OAIAlarmState_ruleEvaluation::~OAIAlarmState_ruleEvaluation() {}

void OAIAlarmState_ruleEvaluation::initializeModel() {

    m_simple_rule_evaluation_isSet = false;
    m_simple_rule_evaluation_isValid = false;
}

void OAIAlarmState_ruleEvaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlarmState_ruleEvaluation::fromJsonObject(QJsonObject json) {

    m_simple_rule_evaluation_isValid = ::OpenAPI::fromJsonValue(m_simple_rule_evaluation, json[QString("simpleRuleEvaluation")]);
    m_simple_rule_evaluation_isSet = !json[QString("simpleRuleEvaluation")].isNull() && m_simple_rule_evaluation_isValid;
}

QString OAIAlarmState_ruleEvaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlarmState_ruleEvaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_simple_rule_evaluation.isSet()) {
        obj.insert(QString("simpleRuleEvaluation"), ::OpenAPI::toJsonValue(m_simple_rule_evaluation));
    }
    return obj;
}

OAIRuleEvaluation_simpleRuleEvaluation OAIAlarmState_ruleEvaluation::getSimpleRuleEvaluation() const {
    return m_simple_rule_evaluation;
}
void OAIAlarmState_ruleEvaluation::setSimpleRuleEvaluation(const OAIRuleEvaluation_simpleRuleEvaluation &simple_rule_evaluation) {
    m_simple_rule_evaluation = simple_rule_evaluation;
    m_simple_rule_evaluation_isSet = true;
}

bool OAIAlarmState_ruleEvaluation::is_simple_rule_evaluation_Set() const{
    return m_simple_rule_evaluation_isSet;
}

bool OAIAlarmState_ruleEvaluation::is_simple_rule_evaluation_Valid() const{
    return m_simple_rule_evaluation_isValid;
}

bool OAIAlarmState_ruleEvaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_simple_rule_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlarmState_ruleEvaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
