/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarmState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarmState::OAIAlarmState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarmState::OAIAlarmState() {
    this->initializeModel();
}

OAIAlarmState::~OAIAlarmState() {}

void OAIAlarmState::initializeModel() {

    m_state_name_isSet = false;
    m_state_name_isValid = false;

    m_rule_evaluation_isSet = false;
    m_rule_evaluation_isValid = false;

    m_customer_action_isSet = false;
    m_customer_action_isValid = false;

    m_system_event_isSet = false;
    m_system_event_isValid = false;
}

void OAIAlarmState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlarmState::fromJsonObject(QJsonObject json) {

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;

    m_rule_evaluation_isValid = ::OpenAPI::fromJsonValue(m_rule_evaluation, json[QString("ruleEvaluation")]);
    m_rule_evaluation_isSet = !json[QString("ruleEvaluation")].isNull() && m_rule_evaluation_isValid;

    m_customer_action_isValid = ::OpenAPI::fromJsonValue(m_customer_action, json[QString("customerAction")]);
    m_customer_action_isSet = !json[QString("customerAction")].isNull() && m_customer_action_isValid;

    m_system_event_isValid = ::OpenAPI::fromJsonValue(m_system_event, json[QString("systemEvent")]);
    m_system_event_isSet = !json[QString("systemEvent")].isNull() && m_system_event_isValid;
}

QString OAIAlarmState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlarmState::asJsonObject() const {
    QJsonObject obj;
    if (m_state_name.isSet()) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    if (m_rule_evaluation.isSet()) {
        obj.insert(QString("ruleEvaluation"), ::OpenAPI::toJsonValue(m_rule_evaluation));
    }
    if (m_customer_action.isSet()) {
        obj.insert(QString("customerAction"), ::OpenAPI::toJsonValue(m_customer_action));
    }
    if (m_system_event.isSet()) {
        obj.insert(QString("systemEvent"), ::OpenAPI::toJsonValue(m_system_event));
    }
    return obj;
}

OAIAlarmStateName OAIAlarmState::getStateName() const {
    return m_state_name;
}
void OAIAlarmState::setStateName(const OAIAlarmStateName &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIAlarmState::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIAlarmState::is_state_name_Valid() const{
    return m_state_name_isValid;
}

OAIAlarmState_ruleEvaluation OAIAlarmState::getRuleEvaluation() const {
    return m_rule_evaluation;
}
void OAIAlarmState::setRuleEvaluation(const OAIAlarmState_ruleEvaluation &rule_evaluation) {
    m_rule_evaluation = rule_evaluation;
    m_rule_evaluation_isSet = true;
}

bool OAIAlarmState::is_rule_evaluation_Set() const{
    return m_rule_evaluation_isSet;
}

bool OAIAlarmState::is_rule_evaluation_Valid() const{
    return m_rule_evaluation_isValid;
}

OAIAlarmState_customerAction OAIAlarmState::getCustomerAction() const {
    return m_customer_action;
}
void OAIAlarmState::setCustomerAction(const OAIAlarmState_customerAction &customer_action) {
    m_customer_action = customer_action;
    m_customer_action_isSet = true;
}

bool OAIAlarmState::is_customer_action_Set() const{
    return m_customer_action_isSet;
}

bool OAIAlarmState::is_customer_action_Valid() const{
    return m_customer_action_isValid;
}

OAIAlarmState_systemEvent OAIAlarmState::getSystemEvent() const {
    return m_system_event;
}
void OAIAlarmState::setSystemEvent(const OAIAlarmState_systemEvent &system_event) {
    m_system_event = system_event;
    m_system_event_isSet = true;
}

bool OAIAlarmState::is_system_event_Set() const{
    return m_system_event_isSet;
}

bool OAIAlarmState::is_system_event_Valid() const{
    return m_system_event_isValid;
}

bool OAIAlarmState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_evaluation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_event.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlarmState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
