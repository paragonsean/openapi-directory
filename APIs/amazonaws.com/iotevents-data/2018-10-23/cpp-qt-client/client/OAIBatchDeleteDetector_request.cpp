/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDeleteDetector_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDeleteDetector_request::OAIBatchDeleteDetector_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDeleteDetector_request::OAIBatchDeleteDetector_request() {
    this->initializeModel();
}

OAIBatchDeleteDetector_request::~OAIBatchDeleteDetector_request() {}

void OAIBatchDeleteDetector_request::initializeModel() {

    m_detectors_isSet = false;
    m_detectors_isValid = false;
}

void OAIBatchDeleteDetector_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDeleteDetector_request::fromJsonObject(QJsonObject json) {

    m_detectors_isValid = ::OpenAPI::fromJsonValue(m_detectors, json[QString("detectors")]);
    m_detectors_isSet = !json[QString("detectors")].isNull() && m_detectors_isValid;
}

QString OAIBatchDeleteDetector_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDeleteDetector_request::asJsonObject() const {
    QJsonObject obj;
    if (m_detectors.size() > 0) {
        obj.insert(QString("detectors"), ::OpenAPI::toJsonValue(m_detectors));
    }
    return obj;
}

QList<OAIDeleteDetectorRequest> OAIBatchDeleteDetector_request::getDetectors() const {
    return m_detectors;
}
void OAIBatchDeleteDetector_request::setDetectors(const QList<OAIDeleteDetectorRequest> &detectors) {
    m_detectors = detectors;
    m_detectors_isSet = true;
}

bool OAIBatchDeleteDetector_request::is_detectors_Set() const{
    return m_detectors_isSet;
}

bool OAIBatchDeleteDetector_request::is_detectors_Valid() const{
    return m_detectors_isValid;
}

bool OAIBatchDeleteDetector_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detectors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDeleteDetector_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detectors_isValid && true;
}

} // namespace OpenAPI
