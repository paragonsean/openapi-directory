/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetector::OAIDetector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetector::OAIDetector() {
    this->initializeModel();
}

OAIDetector::~OAIDetector() {}

void OAIDetector::initializeModel() {

    m_detector_model_name_isSet = false;
    m_detector_model_name_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_detector_model_version_isSet = false;
    m_detector_model_version_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;
}

void OAIDetector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetector::fromJsonObject(QJsonObject json) {

    m_detector_model_name_isValid = ::OpenAPI::fromJsonValue(m_detector_model_name, json[QString("detectorModelName")]);
    m_detector_model_name_isSet = !json[QString("detectorModelName")].isNull() && m_detector_model_name_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_detector_model_version_isValid = ::OpenAPI::fromJsonValue(m_detector_model_version, json[QString("detectorModelVersion")]);
    m_detector_model_version_isSet = !json[QString("detectorModelVersion")].isNull() && m_detector_model_version_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;
}

QString OAIDetector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetector::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_model_name_isSet) {
        obj.insert(QString("detectorModelName"), ::OpenAPI::toJsonValue(m_detector_model_name));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_detector_model_version_isSet) {
        obj.insert(QString("detectorModelVersion"), ::OpenAPI::toJsonValue(m_detector_model_version));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    return obj;
}

QString OAIDetector::getDetectorModelName() const {
    return m_detector_model_name;
}
void OAIDetector::setDetectorModelName(const QString &detector_model_name) {
    m_detector_model_name = detector_model_name;
    m_detector_model_name_isSet = true;
}

bool OAIDetector::is_detector_model_name_Set() const{
    return m_detector_model_name_isSet;
}

bool OAIDetector::is_detector_model_name_Valid() const{
    return m_detector_model_name_isValid;
}

QString OAIDetector::getKeyValue() const {
    return m_key_value;
}
void OAIDetector::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIDetector::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIDetector::is_key_value_Valid() const{
    return m_key_value_isValid;
}

QString OAIDetector::getDetectorModelVersion() const {
    return m_detector_model_version;
}
void OAIDetector::setDetectorModelVersion(const QString &detector_model_version) {
    m_detector_model_version = detector_model_version;
    m_detector_model_version_isSet = true;
}

bool OAIDetector::is_detector_model_version_Set() const{
    return m_detector_model_version_isSet;
}

bool OAIDetector::is_detector_model_version_Valid() const{
    return m_detector_model_version_isValid;
}

OAIDetector_state OAIDetector::getState() const {
    return m_state;
}
void OAIDetector::setState(const OAIDetector_state &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDetector::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDetector::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIDetector::getCreationTime() const {
    return m_creation_time;
}
void OAIDetector::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDetector::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDetector::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDetector::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIDetector::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIDetector::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIDetector::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

bool OAIDetector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
