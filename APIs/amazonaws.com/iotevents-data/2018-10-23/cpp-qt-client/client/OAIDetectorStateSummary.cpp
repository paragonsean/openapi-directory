/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectorStateSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectorStateSummary::OAIDetectorStateSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectorStateSummary::OAIDetectorStateSummary() {
    this->initializeModel();
}

OAIDetectorStateSummary::~OAIDetectorStateSummary() {}

void OAIDetectorStateSummary::initializeModel() {

    m_state_name_isSet = false;
    m_state_name_isValid = false;
}

void OAIDetectorStateSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectorStateSummary::fromJsonObject(QJsonObject json) {

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;
}

QString OAIDetectorStateSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectorStateSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    return obj;
}

QString OAIDetectorStateSummary::getStateName() const {
    return m_state_name;
}
void OAIDetectorStateSummary::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIDetectorStateSummary::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIDetectorStateSummary::is_state_name_Valid() const{
    return m_state_name_isValid;
}

bool OAIDetectorStateSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectorStateSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
