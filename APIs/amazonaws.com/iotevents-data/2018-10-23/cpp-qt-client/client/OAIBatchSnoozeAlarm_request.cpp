/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchSnoozeAlarm_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchSnoozeAlarm_request::OAIBatchSnoozeAlarm_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchSnoozeAlarm_request::OAIBatchSnoozeAlarm_request() {
    this->initializeModel();
}

OAIBatchSnoozeAlarm_request::~OAIBatchSnoozeAlarm_request() {}

void OAIBatchSnoozeAlarm_request::initializeModel() {

    m_snooze_action_requests_isSet = false;
    m_snooze_action_requests_isValid = false;
}

void OAIBatchSnoozeAlarm_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchSnoozeAlarm_request::fromJsonObject(QJsonObject json) {

    m_snooze_action_requests_isValid = ::OpenAPI::fromJsonValue(m_snooze_action_requests, json[QString("snoozeActionRequests")]);
    m_snooze_action_requests_isSet = !json[QString("snoozeActionRequests")].isNull() && m_snooze_action_requests_isValid;
}

QString OAIBatchSnoozeAlarm_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchSnoozeAlarm_request::asJsonObject() const {
    QJsonObject obj;
    if (m_snooze_action_requests.size() > 0) {
        obj.insert(QString("snoozeActionRequests"), ::OpenAPI::toJsonValue(m_snooze_action_requests));
    }
    return obj;
}

QList<OAISnoozeAlarmActionRequest> OAIBatchSnoozeAlarm_request::getSnoozeActionRequests() const {
    return m_snooze_action_requests;
}
void OAIBatchSnoozeAlarm_request::setSnoozeActionRequests(const QList<OAISnoozeAlarmActionRequest> &snooze_action_requests) {
    m_snooze_action_requests = snooze_action_requests;
    m_snooze_action_requests_isSet = true;
}

bool OAIBatchSnoozeAlarm_request::is_snooze_action_requests_Set() const{
    return m_snooze_action_requests_isSet;
}

bool OAIBatchSnoozeAlarm_request::is_snooze_action_requests_Valid() const{
    return m_snooze_action_requests_isValid;
}

bool OAIBatchSnoozeAlarm_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snooze_action_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchSnoozeAlarm_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_snooze_action_requests_isValid && true;
}

} // namespace OpenAPI
