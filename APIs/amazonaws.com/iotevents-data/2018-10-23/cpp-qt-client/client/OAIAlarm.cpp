/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlarm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlarm::OAIAlarm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlarm::OAIAlarm() {
    this->initializeModel();
}

OAIAlarm::~OAIAlarm() {}

void OAIAlarm::initializeModel() {

    m_alarm_model_name_isSet = false;
    m_alarm_model_name_isValid = false;

    m_alarm_model_version_isSet = false;
    m_alarm_model_version_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_alarm_state_isSet = false;
    m_alarm_state_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_update_time_isSet = false;
    m_last_update_time_isValid = false;
}

void OAIAlarm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlarm::fromJsonObject(QJsonObject json) {

    m_alarm_model_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_name, json[QString("alarmModelName")]);
    m_alarm_model_name_isSet = !json[QString("alarmModelName")].isNull() && m_alarm_model_name_isValid;

    m_alarm_model_version_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_version, json[QString("alarmModelVersion")]);
    m_alarm_model_version_isSet = !json[QString("alarmModelVersion")].isNull() && m_alarm_model_version_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_alarm_state_isValid = ::OpenAPI::fromJsonValue(m_alarm_state, json[QString("alarmState")]);
    m_alarm_state_isSet = !json[QString("alarmState")].isNull() && m_alarm_state_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_update_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_time, json[QString("lastUpdateTime")]);
    m_last_update_time_isSet = !json[QString("lastUpdateTime")].isNull() && m_last_update_time_isValid;
}

QString OAIAlarm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlarm::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_model_name_isSet) {
        obj.insert(QString("alarmModelName"), ::OpenAPI::toJsonValue(m_alarm_model_name));
    }
    if (m_alarm_model_version_isSet) {
        obj.insert(QString("alarmModelVersion"), ::OpenAPI::toJsonValue(m_alarm_model_version));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_alarm_state.isSet()) {
        obj.insert(QString("alarmState"), ::OpenAPI::toJsonValue(m_alarm_state));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_update_time_isSet) {
        obj.insert(QString("lastUpdateTime"), ::OpenAPI::toJsonValue(m_last_update_time));
    }
    return obj;
}

QString OAIAlarm::getAlarmModelName() const {
    return m_alarm_model_name;
}
void OAIAlarm::setAlarmModelName(const QString &alarm_model_name) {
    m_alarm_model_name = alarm_model_name;
    m_alarm_model_name_isSet = true;
}

bool OAIAlarm::is_alarm_model_name_Set() const{
    return m_alarm_model_name_isSet;
}

bool OAIAlarm::is_alarm_model_name_Valid() const{
    return m_alarm_model_name_isValid;
}

QString OAIAlarm::getAlarmModelVersion() const {
    return m_alarm_model_version;
}
void OAIAlarm::setAlarmModelVersion(const QString &alarm_model_version) {
    m_alarm_model_version = alarm_model_version;
    m_alarm_model_version_isSet = true;
}

bool OAIAlarm::is_alarm_model_version_Set() const{
    return m_alarm_model_version_isSet;
}

bool OAIAlarm::is_alarm_model_version_Valid() const{
    return m_alarm_model_version_isValid;
}

QString OAIAlarm::getKeyValue() const {
    return m_key_value;
}
void OAIAlarm::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIAlarm::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIAlarm::is_key_value_Valid() const{
    return m_key_value_isValid;
}

OAIAlarm_alarmState OAIAlarm::getAlarmState() const {
    return m_alarm_state;
}
void OAIAlarm::setAlarmState(const OAIAlarm_alarmState &alarm_state) {
    m_alarm_state = alarm_state;
    m_alarm_state_isSet = true;
}

bool OAIAlarm::is_alarm_state_Set() const{
    return m_alarm_state_isSet;
}

bool OAIAlarm::is_alarm_state_Valid() const{
    return m_alarm_state_isValid;
}

qint32 OAIAlarm::getSeverity() const {
    return m_severity;
}
void OAIAlarm::setSeverity(const qint32 &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIAlarm::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIAlarm::is_severity_Valid() const{
    return m_severity_isValid;
}

QDateTime OAIAlarm::getCreationTime() const {
    return m_creation_time;
}
void OAIAlarm::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAlarm::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAlarm::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIAlarm::getLastUpdateTime() const {
    return m_last_update_time;
}
void OAIAlarm::setLastUpdateTime(const QDateTime &last_update_time) {
    m_last_update_time = last_update_time;
    m_last_update_time_isSet = true;
}

bool OAIAlarm::is_last_update_time_Set() const{
    return m_last_update_time_isSet;
}

bool OAIAlarm::is_last_update_time_Valid() const{
    return m_last_update_time_isValid;
}

bool OAIAlarm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_model_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlarm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
