/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateDetectorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateDetectorRequest::OAIBatchUpdateDetectorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateDetectorRequest::OAIBatchUpdateDetectorRequest() {
    this->initializeModel();
}

OAIBatchUpdateDetectorRequest::~OAIBatchUpdateDetectorRequest() {}

void OAIBatchUpdateDetectorRequest::initializeModel() {

    m_detectors_isSet = false;
    m_detectors_isValid = false;
}

void OAIBatchUpdateDetectorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateDetectorRequest::fromJsonObject(QJsonObject json) {

    m_detectors_isValid = ::OpenAPI::fromJsonValue(m_detectors, json[QString("detectors")]);
    m_detectors_isSet = !json[QString("detectors")].isNull() && m_detectors_isValid;
}

QString OAIBatchUpdateDetectorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateDetectorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_detectors.isSet()) {
        obj.insert(QString("detectors"), ::OpenAPI::toJsonValue(m_detectors));
    }
    return obj;
}

QList OAIBatchUpdateDetectorRequest::getDetectors() const {
    return m_detectors;
}
void OAIBatchUpdateDetectorRequest::setDetectors(const QList &detectors) {
    m_detectors = detectors;
    m_detectors_isSet = true;
}

bool OAIBatchUpdateDetectorRequest::is_detectors_Set() const{
    return m_detectors_isSet;
}

bool OAIBatchUpdateDetectorRequest::is_detectors_Valid() const{
    return m_detectors_isValid;
}

bool OAIBatchUpdateDetectorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detectors.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateDetectorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detectors_isValid && true;
}

} // namespace OpenAPI
