/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchEnableAlarm_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchEnableAlarm_request::OAIBatchEnableAlarm_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchEnableAlarm_request::OAIBatchEnableAlarm_request() {
    this->initializeModel();
}

OAIBatchEnableAlarm_request::~OAIBatchEnableAlarm_request() {}

void OAIBatchEnableAlarm_request::initializeModel() {

    m_enable_action_requests_isSet = false;
    m_enable_action_requests_isValid = false;
}

void OAIBatchEnableAlarm_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchEnableAlarm_request::fromJsonObject(QJsonObject json) {

    m_enable_action_requests_isValid = ::OpenAPI::fromJsonValue(m_enable_action_requests, json[QString("enableActionRequests")]);
    m_enable_action_requests_isSet = !json[QString("enableActionRequests")].isNull() && m_enable_action_requests_isValid;
}

QString OAIBatchEnableAlarm_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchEnableAlarm_request::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_action_requests.size() > 0) {
        obj.insert(QString("enableActionRequests"), ::OpenAPI::toJsonValue(m_enable_action_requests));
    }
    return obj;
}

QList<OAIEnableAlarmActionRequest> OAIBatchEnableAlarm_request::getEnableActionRequests() const {
    return m_enable_action_requests;
}
void OAIBatchEnableAlarm_request::setEnableActionRequests(const QList<OAIEnableAlarmActionRequest> &enable_action_requests) {
    m_enable_action_requests = enable_action_requests;
    m_enable_action_requests_isSet = true;
}

bool OAIBatchEnableAlarm_request::is_enable_action_requests_Set() const{
    return m_enable_action_requests_isSet;
}

bool OAIBatchEnableAlarm_request::is_enable_action_requests_Valid() const{
    return m_enable_action_requests_isValid;
}

bool OAIBatchEnableAlarm_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_action_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchEnableAlarm_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_action_requests_isValid && true;
}

} // namespace OpenAPI
