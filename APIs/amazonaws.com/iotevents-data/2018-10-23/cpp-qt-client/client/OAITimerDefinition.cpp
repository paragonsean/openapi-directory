/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimerDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimerDefinition::OAITimerDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimerDefinition::OAITimerDefinition() {
    this->initializeModel();
}

OAITimerDefinition::~OAITimerDefinition() {}

void OAITimerDefinition::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_seconds_isSet = false;
    m_seconds_isValid = false;
}

void OAITimerDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimerDefinition::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_seconds_isValid = ::OpenAPI::fromJsonValue(m_seconds, json[QString("seconds")]);
    m_seconds_isSet = !json[QString("seconds")].isNull() && m_seconds_isValid;
}

QString OAITimerDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimerDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_seconds_isSet) {
        obj.insert(QString("seconds"), ::OpenAPI::toJsonValue(m_seconds));
    }
    return obj;
}

QString OAITimerDefinition::getName() const {
    return m_name;
}
void OAITimerDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITimerDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAITimerDefinition::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAITimerDefinition::getSeconds() const {
    return m_seconds;
}
void OAITimerDefinition::setSeconds(const qint32 &seconds) {
    m_seconds = seconds;
    m_seconds_isSet = true;
}

bool OAITimerDefinition::is_seconds_Set() const{
    return m_seconds_isSet;
}

bool OAITimerDefinition::is_seconds_Valid() const{
    return m_seconds_isValid;
}

bool OAITimerDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimerDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_seconds_isValid && true;
}

} // namespace OpenAPI
