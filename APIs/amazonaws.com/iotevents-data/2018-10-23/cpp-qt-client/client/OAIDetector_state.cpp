/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetector_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetector_state::OAIDetector_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetector_state::OAIDetector_state() {
    this->initializeModel();
}

OAIDetector_state::~OAIDetector_state() {}

void OAIDetector_state::initializeModel() {

    m_state_name_isSet = false;
    m_state_name_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;

    m_timers_isSet = false;
    m_timers_isValid = false;
}

void OAIDetector_state::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetector_state::fromJsonObject(QJsonObject json) {

    m_state_name_isValid = ::OpenAPI::fromJsonValue(m_state_name, json[QString("stateName")]);
    m_state_name_isSet = !json[QString("stateName")].isNull() && m_state_name_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("variables")]);
    m_variables_isSet = !json[QString("variables")].isNull() && m_variables_isValid;

    m_timers_isValid = ::OpenAPI::fromJsonValue(m_timers, json[QString("timers")]);
    m_timers_isSet = !json[QString("timers")].isNull() && m_timers_isValid;
}

QString OAIDetector_state::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetector_state::asJsonObject() const {
    QJsonObject obj;
    if (m_state_name_isSet) {
        obj.insert(QString("stateName"), ::OpenAPI::toJsonValue(m_state_name));
    }
    if (m_variables.isSet()) {
        obj.insert(QString("variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    if (m_timers.isSet()) {
        obj.insert(QString("timers"), ::OpenAPI::toJsonValue(m_timers));
    }
    return obj;
}

QString OAIDetector_state::getStateName() const {
    return m_state_name;
}
void OAIDetector_state::setStateName(const QString &state_name) {
    m_state_name = state_name;
    m_state_name_isSet = true;
}

bool OAIDetector_state::is_state_name_Set() const{
    return m_state_name_isSet;
}

bool OAIDetector_state::is_state_name_Valid() const{
    return m_state_name_isValid;
}

QList OAIDetector_state::getVariables() const {
    return m_variables;
}
void OAIDetector_state::setVariables(const QList &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIDetector_state::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIDetector_state::is_variables_Valid() const{
    return m_variables_isValid;
}

QList OAIDetector_state::getTimers() const {
    return m_timers;
}
void OAIDetector_state::setTimers(const QList &timers) {
    m_timers = timers;
    m_timers_isSet = true;
}

bool OAIDetector_state::is_timers_Set() const{
    return m_timers_isSet;
}

bool OAIDetector_state::is_timers_Valid() const{
    return m_timers_isValid;
}

bool OAIDetector_state::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetector_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_name_isValid && m_variables_isValid && m_timers_isValid && true;
}

} // namespace OpenAPI
