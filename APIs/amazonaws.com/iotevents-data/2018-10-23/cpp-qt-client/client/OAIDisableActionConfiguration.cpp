/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisableActionConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisableActionConfiguration::OAIDisableActionConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisableActionConfiguration::OAIDisableActionConfiguration() {
    this->initializeModel();
}

OAIDisableActionConfiguration::~OAIDisableActionConfiguration() {}

void OAIDisableActionConfiguration::initializeModel() {

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAIDisableActionConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisableActionConfiguration::fromJsonObject(QJsonObject json) {

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;
}

QString OAIDisableActionConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisableActionConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAIDisableActionConfiguration::getNote() const {
    return m_note;
}
void OAIDisableActionConfiguration::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIDisableActionConfiguration::is_note_Set() const{
    return m_note_isSet;
}

bool OAIDisableActionConfiguration::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIDisableActionConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisableActionConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
