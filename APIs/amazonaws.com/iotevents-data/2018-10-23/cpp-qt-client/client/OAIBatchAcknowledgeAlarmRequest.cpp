/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAcknowledgeAlarmRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAcknowledgeAlarmRequest::OAIBatchAcknowledgeAlarmRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAcknowledgeAlarmRequest::OAIBatchAcknowledgeAlarmRequest() {
    this->initializeModel();
}

OAIBatchAcknowledgeAlarmRequest::~OAIBatchAcknowledgeAlarmRequest() {}

void OAIBatchAcknowledgeAlarmRequest::initializeModel() {

    m_acknowledge_action_requests_isSet = false;
    m_acknowledge_action_requests_isValid = false;
}

void OAIBatchAcknowledgeAlarmRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAcknowledgeAlarmRequest::fromJsonObject(QJsonObject json) {

    m_acknowledge_action_requests_isValid = ::OpenAPI::fromJsonValue(m_acknowledge_action_requests, json[QString("acknowledgeActionRequests")]);
    m_acknowledge_action_requests_isSet = !json[QString("acknowledgeActionRequests")].isNull() && m_acknowledge_action_requests_isValid;
}

QString OAIBatchAcknowledgeAlarmRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAcknowledgeAlarmRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledge_action_requests.isSet()) {
        obj.insert(QString("acknowledgeActionRequests"), ::OpenAPI::toJsonValue(m_acknowledge_action_requests));
    }
    return obj;
}

QList OAIBatchAcknowledgeAlarmRequest::getAcknowledgeActionRequests() const {
    return m_acknowledge_action_requests;
}
void OAIBatchAcknowledgeAlarmRequest::setAcknowledgeActionRequests(const QList &acknowledge_action_requests) {
    m_acknowledge_action_requests = acknowledge_action_requests;
    m_acknowledge_action_requests_isSet = true;
}

bool OAIBatchAcknowledgeAlarmRequest::is_acknowledge_action_requests_Set() const{
    return m_acknowledge_action_requests_isSet;
}

bool OAIBatchAcknowledgeAlarmRequest::is_acknowledge_action_requests_Valid() const{
    return m_acknowledge_action_requests_isValid;
}

bool OAIBatchAcknowledgeAlarmRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledge_action_requests.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAcknowledgeAlarmRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acknowledge_action_requests_isValid && true;
}

} // namespace OpenAPI
