/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAlarmsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAlarmsResponse::OAIListAlarmsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAlarmsResponse::OAIListAlarmsResponse() {
    this->initializeModel();
}

OAIListAlarmsResponse::~OAIListAlarmsResponse() {}

void OAIListAlarmsResponse::initializeModel() {

    m_alarm_summaries_isSet = false;
    m_alarm_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAlarmsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAlarmsResponse::fromJsonObject(QJsonObject json) {

    m_alarm_summaries_isValid = ::OpenAPI::fromJsonValue(m_alarm_summaries, json[QString("alarmSummaries")]);
    m_alarm_summaries_isSet = !json[QString("alarmSummaries")].isNull() && m_alarm_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAlarmsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAlarmsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm_summaries.isSet()) {
        obj.insert(QString("alarmSummaries"), ::OpenAPI::toJsonValue(m_alarm_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAlarmsResponse::getAlarmSummaries() const {
    return m_alarm_summaries;
}
void OAIListAlarmsResponse::setAlarmSummaries(const QList &alarm_summaries) {
    m_alarm_summaries = alarm_summaries;
    m_alarm_summaries_isSet = true;
}

bool OAIListAlarmsResponse::is_alarm_summaries_Set() const{
    return m_alarm_summaries_isSet;
}

bool OAIListAlarmsResponse::is_alarm_summaries_Valid() const{
    return m_alarm_summaries_isValid;
}

QString OAIListAlarmsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAlarmsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAlarmsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAlarmsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAlarmsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAlarmsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
