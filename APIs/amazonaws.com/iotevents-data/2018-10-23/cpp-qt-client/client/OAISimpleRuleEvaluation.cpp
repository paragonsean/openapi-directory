/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISimpleRuleEvaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISimpleRuleEvaluation::OAISimpleRuleEvaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISimpleRuleEvaluation::OAISimpleRuleEvaluation() {
    this->initializeModel();
}

OAISimpleRuleEvaluation::~OAISimpleRuleEvaluation() {}

void OAISimpleRuleEvaluation::initializeModel() {

    m_input_property_value_isSet = false;
    m_input_property_value_isValid = false;

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_threshold_value_isSet = false;
    m_threshold_value_isValid = false;
}

void OAISimpleRuleEvaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISimpleRuleEvaluation::fromJsonObject(QJsonObject json) {

    m_input_property_value_isValid = ::OpenAPI::fromJsonValue(m_input_property_value, json[QString("inputPropertyValue")]);
    m_input_property_value_isSet = !json[QString("inputPropertyValue")].isNull() && m_input_property_value_isValid;

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_threshold_value_isValid = ::OpenAPI::fromJsonValue(m_threshold_value, json[QString("thresholdValue")]);
    m_threshold_value_isSet = !json[QString("thresholdValue")].isNull() && m_threshold_value_isValid;
}

QString OAISimpleRuleEvaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISimpleRuleEvaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_input_property_value_isSet) {
        obj.insert(QString("inputPropertyValue"), ::OpenAPI::toJsonValue(m_input_property_value));
    }
    if (m_r_operator.isSet()) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_threshold_value_isSet) {
        obj.insert(QString("thresholdValue"), ::OpenAPI::toJsonValue(m_threshold_value));
    }
    return obj;
}

QString OAISimpleRuleEvaluation::getInputPropertyValue() const {
    return m_input_property_value;
}
void OAISimpleRuleEvaluation::setInputPropertyValue(const QString &input_property_value) {
    m_input_property_value = input_property_value;
    m_input_property_value_isSet = true;
}

bool OAISimpleRuleEvaluation::is_input_property_value_Set() const{
    return m_input_property_value_isSet;
}

bool OAISimpleRuleEvaluation::is_input_property_value_Valid() const{
    return m_input_property_value_isValid;
}

OAIComparisonOperator OAISimpleRuleEvaluation::getROperator() const {
    return m_r_operator;
}
void OAISimpleRuleEvaluation::setROperator(const OAIComparisonOperator &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAISimpleRuleEvaluation::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAISimpleRuleEvaluation::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAISimpleRuleEvaluation::getThresholdValue() const {
    return m_threshold_value;
}
void OAISimpleRuleEvaluation::setThresholdValue(const QString &threshold_value) {
    m_threshold_value = threshold_value;
    m_threshold_value_isSet = true;
}

bool OAISimpleRuleEvaluation::is_threshold_value_Set() const{
    return m_threshold_value_isSet;
}

bool OAISimpleRuleEvaluation::is_threshold_value_Valid() const{
    return m_threshold_value_isValid;
}

bool OAISimpleRuleEvaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_input_property_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISimpleRuleEvaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
