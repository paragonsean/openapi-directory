/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemEvent::OAISystemEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemEvent::OAISystemEvent() {
    this->initializeModel();
}

OAISystemEvent::~OAISystemEvent() {}

void OAISystemEvent::initializeModel() {

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_state_change_configuration_isSet = false;
    m_state_change_configuration_isValid = false;
}

void OAISystemEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemEvent::fromJsonObject(QJsonObject json) {

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_state_change_configuration_isValid = ::OpenAPI::fromJsonValue(m_state_change_configuration, json[QString("stateChangeConfiguration")]);
    m_state_change_configuration_isSet = !json[QString("stateChangeConfiguration")].isNull() && m_state_change_configuration_isValid;
}

QString OAISystemEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type.isSet()) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_state_change_configuration.isSet()) {
        obj.insert(QString("stateChangeConfiguration"), ::OpenAPI::toJsonValue(m_state_change_configuration));
    }
    return obj;
}

OAIEventType OAISystemEvent::getEventType() const {
    return m_event_type;
}
void OAISystemEvent::setEventType(const OAIEventType &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAISystemEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAISystemEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

OAISystemEvent_stateChangeConfiguration OAISystemEvent::getStateChangeConfiguration() const {
    return m_state_change_configuration;
}
void OAISystemEvent::setStateChangeConfiguration(const OAISystemEvent_stateChangeConfiguration &state_change_configuration) {
    m_state_change_configuration = state_change_configuration;
    m_state_change_configuration_isSet = true;
}

bool OAISystemEvent::is_state_change_configuration_Set() const{
    return m_state_change_configuration_isSet;
}

bool OAISystemEvent::is_state_change_configuration_Valid() const{
    return m_state_change_configuration_isValid;
}

bool OAISystemEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_change_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
