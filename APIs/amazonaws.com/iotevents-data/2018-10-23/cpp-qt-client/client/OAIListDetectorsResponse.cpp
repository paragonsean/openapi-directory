/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDetectorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDetectorsResponse::OAIListDetectorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDetectorsResponse::OAIListDetectorsResponse() {
    this->initializeModel();
}

OAIListDetectorsResponse::~OAIListDetectorsResponse() {}

void OAIListDetectorsResponse::initializeModel() {

    m_detector_summaries_isSet = false;
    m_detector_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDetectorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDetectorsResponse::fromJsonObject(QJsonObject json) {

    m_detector_summaries_isValid = ::OpenAPI::fromJsonValue(m_detector_summaries, json[QString("detectorSummaries")]);
    m_detector_summaries_isSet = !json[QString("detectorSummaries")].isNull() && m_detector_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDetectorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDetectorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detector_summaries.isSet()) {
        obj.insert(QString("detectorSummaries"), ::OpenAPI::toJsonValue(m_detector_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDetectorsResponse::getDetectorSummaries() const {
    return m_detector_summaries;
}
void OAIListDetectorsResponse::setDetectorSummaries(const QList &detector_summaries) {
    m_detector_summaries = detector_summaries;
    m_detector_summaries_isSet = true;
}

bool OAIListDetectorsResponse::is_detector_summaries_Set() const{
    return m_detector_summaries_isSet;
}

bool OAIListDetectorsResponse::is_detector_summaries_Valid() const{
    return m_detector_summaries_isValid;
}

QString OAIListDetectorsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDetectorsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDetectorsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDetectorsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDetectorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDetectorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
