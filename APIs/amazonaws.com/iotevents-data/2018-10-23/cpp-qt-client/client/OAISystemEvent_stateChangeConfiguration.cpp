/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemEvent_stateChangeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemEvent_stateChangeConfiguration::OAISystemEvent_stateChangeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemEvent_stateChangeConfiguration::OAISystemEvent_stateChangeConfiguration() {
    this->initializeModel();
}

OAISystemEvent_stateChangeConfiguration::~OAISystemEvent_stateChangeConfiguration() {}

void OAISystemEvent_stateChangeConfiguration::initializeModel() {

    m_trigger_type_isSet = false;
    m_trigger_type_isValid = false;
}

void OAISystemEvent_stateChangeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemEvent_stateChangeConfiguration::fromJsonObject(QJsonObject json) {

    m_trigger_type_isValid = ::OpenAPI::fromJsonValue(m_trigger_type, json[QString("triggerType")]);
    m_trigger_type_isSet = !json[QString("triggerType")].isNull() && m_trigger_type_isValid;
}

QString OAISystemEvent_stateChangeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemEvent_stateChangeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_trigger_type.isSet()) {
        obj.insert(QString("triggerType"), ::OpenAPI::toJsonValue(m_trigger_type));
    }
    return obj;
}

OAITriggerType OAISystemEvent_stateChangeConfiguration::getTriggerType() const {
    return m_trigger_type;
}
void OAISystemEvent_stateChangeConfiguration::setTriggerType(const OAITriggerType &trigger_type) {
    m_trigger_type = trigger_type;
    m_trigger_type_isSet = true;
}

bool OAISystemEvent_stateChangeConfiguration::is_trigger_type_Set() const{
    return m_trigger_type_isSet;
}

bool OAISystemEvent_stateChangeConfiguration::is_trigger_type_Valid() const{
    return m_trigger_type_isValid;
}

bool OAISystemEvent_stateChangeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trigger_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemEvent_stateChangeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
