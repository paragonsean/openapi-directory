/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCode::OAIErrorCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCode::OAIErrorCode() {
    this->initializeModel();
}

OAIErrorCode::~OAIErrorCode() {}

void OAIErrorCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ResourceNotFoundException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::RESOURCENOTFOUNDEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidRequestException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INVALIDREQUESTEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InternalFailureException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::INTERNALFAILUREEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ServiceUnavailableException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::SERVICEUNAVAILABLEEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ThrottlingException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCode::THROTTLINGEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCode::RESOURCENOTFOUNDEXCEPTION:
            val = "ResourceNotFoundException";
            break;
        case eOAIErrorCode::INVALIDREQUESTEXCEPTION:
            val = "InvalidRequestException";
            break;
        case eOAIErrorCode::INTERNALFAILUREEXCEPTION:
            val = "InternalFailureException";
            break;
        case eOAIErrorCode::SERVICEUNAVAILABLEEXCEPTION:
            val = "ServiceUnavailableException";
            break;
        case eOAIErrorCode::THROTTLINGEXCEPTION:
            val = "ThrottlingException";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCode::eOAIErrorCode OAIErrorCode::getValue() const {
    return m_value;
}

void OAIErrorCode::setValue(const OAIErrorCode::eOAIErrorCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
