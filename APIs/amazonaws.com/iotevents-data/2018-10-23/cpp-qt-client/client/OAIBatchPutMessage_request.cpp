/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPutMessage_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPutMessage_request::OAIBatchPutMessage_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPutMessage_request::OAIBatchPutMessage_request() {
    this->initializeModel();
}

OAIBatchPutMessage_request::~OAIBatchPutMessage_request() {}

void OAIBatchPutMessage_request::initializeModel() {

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIBatchPutMessage_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPutMessage_request::fromJsonObject(QJsonObject json) {

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIBatchPutMessage_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPutMessage_request::asJsonObject() const {
    QJsonObject obj;
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QList<OAIMessage> OAIBatchPutMessage_request::getMessages() const {
    return m_messages;
}
void OAIBatchPutMessage_request::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIBatchPutMessage_request::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIBatchPutMessage_request::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIBatchPutMessage_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPutMessage_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && true;
}

} // namespace OpenAPI
