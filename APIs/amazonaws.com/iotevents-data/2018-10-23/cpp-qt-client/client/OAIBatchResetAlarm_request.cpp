/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchResetAlarm_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchResetAlarm_request::OAIBatchResetAlarm_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchResetAlarm_request::OAIBatchResetAlarm_request() {
    this->initializeModel();
}

OAIBatchResetAlarm_request::~OAIBatchResetAlarm_request() {}

void OAIBatchResetAlarm_request::initializeModel() {

    m_reset_action_requests_isSet = false;
    m_reset_action_requests_isValid = false;
}

void OAIBatchResetAlarm_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchResetAlarm_request::fromJsonObject(QJsonObject json) {

    m_reset_action_requests_isValid = ::OpenAPI::fromJsonValue(m_reset_action_requests, json[QString("resetActionRequests")]);
    m_reset_action_requests_isSet = !json[QString("resetActionRequests")].isNull() && m_reset_action_requests_isValid;
}

QString OAIBatchResetAlarm_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchResetAlarm_request::asJsonObject() const {
    QJsonObject obj;
    if (m_reset_action_requests.size() > 0) {
        obj.insert(QString("resetActionRequests"), ::OpenAPI::toJsonValue(m_reset_action_requests));
    }
    return obj;
}

QList<OAIResetAlarmActionRequest> OAIBatchResetAlarm_request::getResetActionRequests() const {
    return m_reset_action_requests;
}
void OAIBatchResetAlarm_request::setResetActionRequests(const QList<OAIResetAlarmActionRequest> &reset_action_requests) {
    m_reset_action_requests = reset_action_requests;
    m_reset_action_requests_isSet = true;
}

bool OAIBatchResetAlarm_request::is_reset_action_requests_Set() const{
    return m_reset_action_requests_isSet;
}

bool OAIBatchResetAlarm_request::is_reset_action_requests_Valid() const{
    return m_reset_action_requests_isValid;
}

bool OAIBatchResetAlarm_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reset_action_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchResetAlarm_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reset_action_requests_isValid && true;
}

} // namespace OpenAPI
