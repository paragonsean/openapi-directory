/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStateChangeConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStateChangeConfiguration::OAIStateChangeConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStateChangeConfiguration::OAIStateChangeConfiguration() {
    this->initializeModel();
}

OAIStateChangeConfiguration::~OAIStateChangeConfiguration() {}

void OAIStateChangeConfiguration::initializeModel() {

    m_trigger_type_isSet = false;
    m_trigger_type_isValid = false;
}

void OAIStateChangeConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStateChangeConfiguration::fromJsonObject(QJsonObject json) {

    m_trigger_type_isValid = ::OpenAPI::fromJsonValue(m_trigger_type, json[QString("triggerType")]);
    m_trigger_type_isSet = !json[QString("triggerType")].isNull() && m_trigger_type_isValid;
}

QString OAIStateChangeConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStateChangeConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_trigger_type.isSet()) {
        obj.insert(QString("triggerType"), ::OpenAPI::toJsonValue(m_trigger_type));
    }
    return obj;
}

OAITriggerType OAIStateChangeConfiguration::getTriggerType() const {
    return m_trigger_type;
}
void OAIStateChangeConfiguration::setTriggerType(const OAITriggerType &trigger_type) {
    m_trigger_type = trigger_type;
    m_trigger_type_isSet = true;
}

bool OAIStateChangeConfiguration::is_trigger_type_Set() const{
    return m_trigger_type_isSet;
}

bool OAIStateChangeConfiguration::is_trigger_type_Valid() const{
    return m_trigger_type_isValid;
}

bool OAIStateChangeConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_trigger_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStateChangeConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
