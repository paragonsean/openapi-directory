/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAlarm_alarmState.h
 *
 * 
 */

#ifndef OAIAlarm_alarmState_H
#define OAIAlarm_alarmState_H

#include <QJsonObject>

#include "OAIAlarmStateName.h"
#include "OAIAlarmState_customerAction.h"
#include "OAIAlarmState_ruleEvaluation.h"
#include "OAIAlarmState_systemEvent.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAlarmState_ruleEvaluation;
class OAIAlarmState_customerAction;
class OAIAlarmState_systemEvent;

class OAIAlarm_alarmState : public OAIObject {
public:
    OAIAlarm_alarmState();
    OAIAlarm_alarmState(QString json);
    ~OAIAlarm_alarmState() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAlarmStateName getStateName() const;
    void setStateName(const OAIAlarmStateName &state_name);
    bool is_state_name_Set() const;
    bool is_state_name_Valid() const;

    OAIAlarmState_ruleEvaluation getRuleEvaluation() const;
    void setRuleEvaluation(const OAIAlarmState_ruleEvaluation &rule_evaluation);
    bool is_rule_evaluation_Set() const;
    bool is_rule_evaluation_Valid() const;

    OAIAlarmState_customerAction getCustomerAction() const;
    void setCustomerAction(const OAIAlarmState_customerAction &customer_action);
    bool is_customer_action_Set() const;
    bool is_customer_action_Valid() const;

    OAIAlarmState_systemEvent getSystemEvent() const;
    void setSystemEvent(const OAIAlarmState_systemEvent &system_event);
    bool is_system_event_Set() const;
    bool is_system_event_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAlarmStateName m_state_name;
    bool m_state_name_isSet;
    bool m_state_name_isValid;

    OAIAlarmState_ruleEvaluation m_rule_evaluation;
    bool m_rule_evaluation_isSet;
    bool m_rule_evaluation_isValid;

    OAIAlarmState_customerAction m_customer_action;
    bool m_customer_action_isSet;
    bool m_customer_action_isValid;

    OAIAlarmState_systemEvent m_system_event;
    bool m_system_event_isSet;
    bool m_system_event_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAlarm_alarmState)

#endif // OAIAlarm_alarmState_H
