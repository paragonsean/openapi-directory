/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnoozeAlarmActionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnoozeAlarmActionRequest::OAISnoozeAlarmActionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnoozeAlarmActionRequest::OAISnoozeAlarmActionRequest() {
    this->initializeModel();
}

OAISnoozeAlarmActionRequest::~OAISnoozeAlarmActionRequest() {}

void OAISnoozeAlarmActionRequest::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_alarm_model_name_isSet = false;
    m_alarm_model_name_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_snooze_duration_isSet = false;
    m_snooze_duration_isValid = false;
}

void OAISnoozeAlarmActionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnoozeAlarmActionRequest::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_alarm_model_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_name, json[QString("alarmModelName")]);
    m_alarm_model_name_isSet = !json[QString("alarmModelName")].isNull() && m_alarm_model_name_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_snooze_duration_isValid = ::OpenAPI::fromJsonValue(m_snooze_duration, json[QString("snoozeDuration")]);
    m_snooze_duration_isSet = !json[QString("snoozeDuration")].isNull() && m_snooze_duration_isValid;
}

QString OAISnoozeAlarmActionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnoozeAlarmActionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_alarm_model_name_isSet) {
        obj.insert(QString("alarmModelName"), ::OpenAPI::toJsonValue(m_alarm_model_name));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_snooze_duration_isSet) {
        obj.insert(QString("snoozeDuration"), ::OpenAPI::toJsonValue(m_snooze_duration));
    }
    return obj;
}

QString OAISnoozeAlarmActionRequest::getRequestId() const {
    return m_request_id;
}
void OAISnoozeAlarmActionRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAISnoozeAlarmActionRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAISnoozeAlarmActionRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAISnoozeAlarmActionRequest::getAlarmModelName() const {
    return m_alarm_model_name;
}
void OAISnoozeAlarmActionRequest::setAlarmModelName(const QString &alarm_model_name) {
    m_alarm_model_name = alarm_model_name;
    m_alarm_model_name_isSet = true;
}

bool OAISnoozeAlarmActionRequest::is_alarm_model_name_Set() const{
    return m_alarm_model_name_isSet;
}

bool OAISnoozeAlarmActionRequest::is_alarm_model_name_Valid() const{
    return m_alarm_model_name_isValid;
}

QString OAISnoozeAlarmActionRequest::getKeyValue() const {
    return m_key_value;
}
void OAISnoozeAlarmActionRequest::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAISnoozeAlarmActionRequest::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAISnoozeAlarmActionRequest::is_key_value_Valid() const{
    return m_key_value_isValid;
}

QString OAISnoozeAlarmActionRequest::getNote() const {
    return m_note;
}
void OAISnoozeAlarmActionRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAISnoozeAlarmActionRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAISnoozeAlarmActionRequest::is_note_Valid() const{
    return m_note_isValid;
}

qint32 OAISnoozeAlarmActionRequest::getSnoozeDuration() const {
    return m_snooze_duration;
}
void OAISnoozeAlarmActionRequest::setSnoozeDuration(const qint32 &snooze_duration) {
    m_snooze_duration = snooze_duration;
    m_snooze_duration_isSet = true;
}

bool OAISnoozeAlarmActionRequest::is_snooze_duration_Set() const{
    return m_snooze_duration_isSet;
}

bool OAISnoozeAlarmActionRequest::is_snooze_duration_Valid() const{
    return m_snooze_duration_isValid;
}

bool OAISnoozeAlarmActionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snooze_duration_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnoozeAlarmActionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && m_alarm_model_name_isValid && m_snooze_duration_isValid && true;
}

} // namespace OpenAPI
