/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteDetectorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteDetectorRequest::OAIDeleteDetectorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteDetectorRequest::OAIDeleteDetectorRequest() {
    this->initializeModel();
}

OAIDeleteDetectorRequest::~OAIDeleteDetectorRequest() {}

void OAIDeleteDetectorRequest::initializeModel() {

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_detector_model_name_isSet = false;
    m_detector_model_name_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;
}

void OAIDeleteDetectorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteDetectorRequest::fromJsonObject(QJsonObject json) {

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_detector_model_name_isValid = ::OpenAPI::fromJsonValue(m_detector_model_name, json[QString("detectorModelName")]);
    m_detector_model_name_isSet = !json[QString("detectorModelName")].isNull() && m_detector_model_name_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;
}

QString OAIDeleteDetectorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteDetectorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_detector_model_name_isSet) {
        obj.insert(QString("detectorModelName"), ::OpenAPI::toJsonValue(m_detector_model_name));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    return obj;
}

QString OAIDeleteDetectorRequest::getMessageId() const {
    return m_message_id;
}
void OAIDeleteDetectorRequest::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIDeleteDetectorRequest::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIDeleteDetectorRequest::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIDeleteDetectorRequest::getDetectorModelName() const {
    return m_detector_model_name;
}
void OAIDeleteDetectorRequest::setDetectorModelName(const QString &detector_model_name) {
    m_detector_model_name = detector_model_name;
    m_detector_model_name_isSet = true;
}

bool OAIDeleteDetectorRequest::is_detector_model_name_Set() const{
    return m_detector_model_name_isSet;
}

bool OAIDeleteDetectorRequest::is_detector_model_name_Valid() const{
    return m_detector_model_name_isValid;
}

QString OAIDeleteDetectorRequest::getKeyValue() const {
    return m_key_value;
}
void OAIDeleteDetectorRequest::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIDeleteDetectorRequest::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIDeleteDetectorRequest::is_key_value_Valid() const{
    return m_key_value_isValid;
}

bool OAIDeleteDetectorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detector_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteDetectorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_id_isValid && m_detector_model_name_isValid && true;
}

} // namespace OpenAPI
