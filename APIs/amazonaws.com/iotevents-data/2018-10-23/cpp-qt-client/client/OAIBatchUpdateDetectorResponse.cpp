/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchUpdateDetectorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchUpdateDetectorResponse::OAIBatchUpdateDetectorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchUpdateDetectorResponse::OAIBatchUpdateDetectorResponse() {
    this->initializeModel();
}

OAIBatchUpdateDetectorResponse::~OAIBatchUpdateDetectorResponse() {}

void OAIBatchUpdateDetectorResponse::initializeModel() {

    m_batch_update_detector_error_entries_isSet = false;
    m_batch_update_detector_error_entries_isValid = false;
}

void OAIBatchUpdateDetectorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchUpdateDetectorResponse::fromJsonObject(QJsonObject json) {

    m_batch_update_detector_error_entries_isValid = ::OpenAPI::fromJsonValue(m_batch_update_detector_error_entries, json[QString("batchUpdateDetectorErrorEntries")]);
    m_batch_update_detector_error_entries_isSet = !json[QString("batchUpdateDetectorErrorEntries")].isNull() && m_batch_update_detector_error_entries_isValid;
}

QString OAIBatchUpdateDetectorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchUpdateDetectorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_update_detector_error_entries.isSet()) {
        obj.insert(QString("batchUpdateDetectorErrorEntries"), ::OpenAPI::toJsonValue(m_batch_update_detector_error_entries));
    }
    return obj;
}

QList OAIBatchUpdateDetectorResponse::getBatchUpdateDetectorErrorEntries() const {
    return m_batch_update_detector_error_entries;
}
void OAIBatchUpdateDetectorResponse::setBatchUpdateDetectorErrorEntries(const QList &batch_update_detector_error_entries) {
    m_batch_update_detector_error_entries = batch_update_detector_error_entries;
    m_batch_update_detector_error_entries_isSet = true;
}

bool OAIBatchUpdateDetectorResponse::is_batch_update_detector_error_entries_Set() const{
    return m_batch_update_detector_error_entries_isSet;
}

bool OAIBatchUpdateDetectorResponse::is_batch_update_detector_error_entries_Valid() const{
    return m_batch_update_detector_error_entries_isValid;
}

bool OAIBatchUpdateDetectorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_update_detector_error_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchUpdateDetectorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
