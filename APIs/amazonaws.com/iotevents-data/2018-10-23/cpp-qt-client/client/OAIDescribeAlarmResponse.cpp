/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAlarmResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAlarmResponse::OAIDescribeAlarmResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAlarmResponse::OAIDescribeAlarmResponse() {
    this->initializeModel();
}

OAIDescribeAlarmResponse::~OAIDescribeAlarmResponse() {}

void OAIDescribeAlarmResponse::initializeModel() {

    m_alarm_isSet = false;
    m_alarm_isValid = false;
}

void OAIDescribeAlarmResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAlarmResponse::fromJsonObject(QJsonObject json) {

    m_alarm_isValid = ::OpenAPI::fromJsonValue(m_alarm, json[QString("alarm")]);
    m_alarm_isSet = !json[QString("alarm")].isNull() && m_alarm_isValid;
}

QString OAIDescribeAlarmResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAlarmResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_alarm.isSet()) {
        obj.insert(QString("alarm"), ::OpenAPI::toJsonValue(m_alarm));
    }
    return obj;
}

OAIDescribeAlarmResponse_alarm OAIDescribeAlarmResponse::getAlarm() const {
    return m_alarm;
}
void OAIDescribeAlarmResponse::setAlarm(const OAIDescribeAlarmResponse_alarm &alarm) {
    m_alarm = alarm;
    m_alarm_isSet = true;
}

bool OAIDescribeAlarmResponse::is_alarm_Set() const{
    return m_alarm_isSet;
}

bool OAIDescribeAlarmResponse::is_alarm_Valid() const{
    return m_alarm_isValid;
}

bool OAIDescribeAlarmResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alarm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAlarmResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
