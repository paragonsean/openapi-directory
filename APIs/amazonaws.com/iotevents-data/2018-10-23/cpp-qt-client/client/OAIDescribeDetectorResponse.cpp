/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDetectorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDetectorResponse::OAIDescribeDetectorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDetectorResponse::OAIDescribeDetectorResponse() {
    this->initializeModel();
}

OAIDescribeDetectorResponse::~OAIDescribeDetectorResponse() {}

void OAIDescribeDetectorResponse::initializeModel() {

    m_detector_isSet = false;
    m_detector_isValid = false;
}

void OAIDescribeDetectorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDetectorResponse::fromJsonObject(QJsonObject json) {

    m_detector_isValid = ::OpenAPI::fromJsonValue(m_detector, json[QString("detector")]);
    m_detector_isSet = !json[QString("detector")].isNull() && m_detector_isValid;
}

QString OAIDescribeDetectorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDetectorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detector.isSet()) {
        obj.insert(QString("detector"), ::OpenAPI::toJsonValue(m_detector));
    }
    return obj;
}

OAIDescribeDetectorResponse_detector OAIDescribeDetectorResponse::getDetector() const {
    return m_detector;
}
void OAIDescribeDetectorResponse::setDetector(const OAIDescribeDetectorResponse_detector &detector) {
    m_detector = detector;
    m_detector_isSet = true;
}

bool OAIDescribeDetectorResponse::is_detector_Set() const{
    return m_detector_isSet;
}

bool OAIDescribeDetectorResponse::is_detector_Valid() const{
    return m_detector_isValid;
}

bool OAIDescribeDetectorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDetectorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
