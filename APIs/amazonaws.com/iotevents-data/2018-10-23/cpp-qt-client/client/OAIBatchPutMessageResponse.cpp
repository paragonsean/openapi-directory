/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchPutMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchPutMessageResponse::OAIBatchPutMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchPutMessageResponse::OAIBatchPutMessageResponse() {
    this->initializeModel();
}

OAIBatchPutMessageResponse::~OAIBatchPutMessageResponse() {}

void OAIBatchPutMessageResponse::initializeModel() {

    m_batch_put_message_error_entries_isSet = false;
    m_batch_put_message_error_entries_isValid = false;
}

void OAIBatchPutMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchPutMessageResponse::fromJsonObject(QJsonObject json) {

    m_batch_put_message_error_entries_isValid = ::OpenAPI::fromJsonValue(m_batch_put_message_error_entries, json[QString("BatchPutMessageErrorEntries")]);
    m_batch_put_message_error_entries_isSet = !json[QString("BatchPutMessageErrorEntries")].isNull() && m_batch_put_message_error_entries_isValid;
}

QString OAIBatchPutMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchPutMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_put_message_error_entries.isSet()) {
        obj.insert(QString("BatchPutMessageErrorEntries"), ::OpenAPI::toJsonValue(m_batch_put_message_error_entries));
    }
    return obj;
}

QList OAIBatchPutMessageResponse::getBatchPutMessageErrorEntries() const {
    return m_batch_put_message_error_entries;
}
void OAIBatchPutMessageResponse::setBatchPutMessageErrorEntries(const QList &batch_put_message_error_entries) {
    m_batch_put_message_error_entries = batch_put_message_error_entries;
    m_batch_put_message_error_entries_isSet = true;
}

bool OAIBatchPutMessageResponse::is_batch_put_message_error_entries_Set() const{
    return m_batch_put_message_error_entries_isSet;
}

bool OAIBatchPutMessageResponse::is_batch_put_message_error_entries_Valid() const{
    return m_batch_put_message_error_entries_isValid;
}

bool OAIBatchPutMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_put_message_error_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchPutMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
