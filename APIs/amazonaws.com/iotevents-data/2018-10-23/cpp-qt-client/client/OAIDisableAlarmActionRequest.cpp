/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisableAlarmActionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisableAlarmActionRequest::OAIDisableAlarmActionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisableAlarmActionRequest::OAIDisableAlarmActionRequest() {
    this->initializeModel();
}

OAIDisableAlarmActionRequest::~OAIDisableAlarmActionRequest() {}

void OAIDisableAlarmActionRequest::initializeModel() {

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_alarm_model_name_isSet = false;
    m_alarm_model_name_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;
}

void OAIDisableAlarmActionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisableAlarmActionRequest::fromJsonObject(QJsonObject json) {

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_alarm_model_name_isValid = ::OpenAPI::fromJsonValue(m_alarm_model_name, json[QString("alarmModelName")]);
    m_alarm_model_name_isSet = !json[QString("alarmModelName")].isNull() && m_alarm_model_name_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;
}

QString OAIDisableAlarmActionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisableAlarmActionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_alarm_model_name_isSet) {
        obj.insert(QString("alarmModelName"), ::OpenAPI::toJsonValue(m_alarm_model_name));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    return obj;
}

QString OAIDisableAlarmActionRequest::getRequestId() const {
    return m_request_id;
}
void OAIDisableAlarmActionRequest::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIDisableAlarmActionRequest::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIDisableAlarmActionRequest::is_request_id_Valid() const{
    return m_request_id_isValid;
}

QString OAIDisableAlarmActionRequest::getAlarmModelName() const {
    return m_alarm_model_name;
}
void OAIDisableAlarmActionRequest::setAlarmModelName(const QString &alarm_model_name) {
    m_alarm_model_name = alarm_model_name;
    m_alarm_model_name_isSet = true;
}

bool OAIDisableAlarmActionRequest::is_alarm_model_name_Set() const{
    return m_alarm_model_name_isSet;
}

bool OAIDisableAlarmActionRequest::is_alarm_model_name_Valid() const{
    return m_alarm_model_name_isValid;
}

QString OAIDisableAlarmActionRequest::getKeyValue() const {
    return m_key_value;
}
void OAIDisableAlarmActionRequest::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAIDisableAlarmActionRequest::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAIDisableAlarmActionRequest::is_key_value_Valid() const{
    return m_key_value_isValid;
}

QString OAIDisableAlarmActionRequest::getNote() const {
    return m_note;
}
void OAIDisableAlarmActionRequest::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIDisableAlarmActionRequest::is_note_Set() const{
    return m_note_isSet;
}

bool OAIDisableAlarmActionRequest::is_note_Valid() const{
    return m_note_isValid;
}

bool OAIDisableAlarmActionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alarm_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisableAlarmActionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_request_id_isValid && m_alarm_model_name_isValid && true;
}

} // namespace OpenAPI
