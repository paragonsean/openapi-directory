/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsIoTEventsData);
  }
}(this, function(expect, AwsIoTEventsData) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsIoTEventsData.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchAcknowledgeAlarm', function() {
      it('should call batchAcknowledgeAlarm successfully', function(done) {
        //uncomment below and update the code to test batchAcknowledgeAlarm
        //instance.batchAcknowledgeAlarm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeleteDetector', function() {
      it('should call batchDeleteDetector successfully', function(done) {
        //uncomment below and update the code to test batchDeleteDetector
        //instance.batchDeleteDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDisableAlarm', function() {
      it('should call batchDisableAlarm successfully', function(done) {
        //uncomment below and update the code to test batchDisableAlarm
        //instance.batchDisableAlarm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchEnableAlarm', function() {
      it('should call batchEnableAlarm successfully', function(done) {
        //uncomment below and update the code to test batchEnableAlarm
        //instance.batchEnableAlarm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchPutMessage', function() {
      it('should call batchPutMessage successfully', function(done) {
        //uncomment below and update the code to test batchPutMessage
        //instance.batchPutMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchResetAlarm', function() {
      it('should call batchResetAlarm successfully', function(done) {
        //uncomment below and update the code to test batchResetAlarm
        //instance.batchResetAlarm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchSnoozeAlarm', function() {
      it('should call batchSnoozeAlarm successfully', function(done) {
        //uncomment below and update the code to test batchSnoozeAlarm
        //instance.batchSnoozeAlarm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateDetector', function() {
      it('should call batchUpdateDetector successfully', function(done) {
        //uncomment below and update the code to test batchUpdateDetector
        //instance.batchUpdateDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAlarm', function() {
      it('should call describeAlarm successfully', function(done) {
        //uncomment below and update the code to test describeAlarm
        //instance.describeAlarm(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDetector', function() {
      it('should call describeDetector successfully', function(done) {
        //uncomment below and update the code to test describeDetector
        //instance.describeDetector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAlarms', function() {
      it('should call listAlarms successfully', function(done) {
        //uncomment below and update the code to test listAlarms
        //instance.listAlarms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDetectors', function() {
      it('should call listDetectors successfully', function(done) {
        //uncomment below and update the code to test listDetectors
        //instance.listDetectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
