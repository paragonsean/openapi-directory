/**
 * AWS IoT Events Data
 * <p>IoT Events monitors your equipment or device fleets for failures or changes in operation, and triggers actions when such events occur. You can use IoT Events Data API commands to send inputs to detectors, list detectors, and view or update a detector's status.</p> <p> For more information, see <a href=\"https://docs.aws.amazon.com/iotevents/latest/developerguide/what-is-iotevents.html\">What is IoT Events?</a> in the <i>IoT Events Developer Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-10-23
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchAcknowledgeAlarmRequest from '../model/BatchAcknowledgeAlarmRequest';
import BatchAcknowledgeAlarmResponse from '../model/BatchAcknowledgeAlarmResponse';
import BatchDeleteDetectorRequest from '../model/BatchDeleteDetectorRequest';
import BatchDeleteDetectorResponse from '../model/BatchDeleteDetectorResponse';
import BatchDisableAlarmRequest from '../model/BatchDisableAlarmRequest';
import BatchDisableAlarmResponse from '../model/BatchDisableAlarmResponse';
import BatchEnableAlarmRequest from '../model/BatchEnableAlarmRequest';
import BatchEnableAlarmResponse from '../model/BatchEnableAlarmResponse';
import BatchPutMessageRequest from '../model/BatchPutMessageRequest';
import BatchPutMessageResponse from '../model/BatchPutMessageResponse';
import BatchResetAlarmRequest from '../model/BatchResetAlarmRequest';
import BatchResetAlarmResponse from '../model/BatchResetAlarmResponse';
import BatchSnoozeAlarmRequest from '../model/BatchSnoozeAlarmRequest';
import BatchSnoozeAlarmResponse from '../model/BatchSnoozeAlarmResponse';
import BatchUpdateDetectorRequest from '../model/BatchUpdateDetectorRequest';
import BatchUpdateDetectorResponse from '../model/BatchUpdateDetectorResponse';
import DescribeAlarmResponse from '../model/DescribeAlarmResponse';
import DescribeDetectorResponse from '../model/DescribeDetectorResponse';
import ListAlarmsResponse from '../model/ListAlarmsResponse';
import ListDetectorsResponse from '../model/ListDetectorsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-10-23
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchAcknowledgeAlarm operation.
     * @callback module:api/DefaultApi~batchAcknowledgeAlarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchAcknowledgeAlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledges one or more alarms. The alarms change to the <code>ACKNOWLEDGED</code> state after you acknowledge them.
     * @param {module:model/BatchAcknowledgeAlarmRequest} batchAcknowledgeAlarmRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchAcknowledgeAlarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchAcknowledgeAlarmResponse}
     */
    batchAcknowledgeAlarm(batchAcknowledgeAlarmRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchAcknowledgeAlarmRequest;
      // verify the required parameter 'batchAcknowledgeAlarmRequest' is set
      if (batchAcknowledgeAlarmRequest === undefined || batchAcknowledgeAlarmRequest === null) {
        throw new Error("Missing the required parameter 'batchAcknowledgeAlarmRequest' when calling batchAcknowledgeAlarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchAcknowledgeAlarmResponse;
      return this.apiClient.callApi(
        '/alarms/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDeleteDetector operation.
     * @callback module:api/DefaultApi~batchDeleteDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes one or more detectors that were created. When a detector is deleted, its state will be cleared and the detector will be removed from the list of detectors. The deleted detector will no longer appear if referenced in the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_iotevents-data_ListDetectors.html\">ListDetectors</a> API call.
     * @param {module:model/BatchDeleteDetectorRequest} batchDeleteDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDeleteDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteDetectorResponse}
     */
    batchDeleteDetector(batchDeleteDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDeleteDetectorRequest;
      // verify the required parameter 'batchDeleteDetectorRequest' is set
      if (batchDeleteDetectorRequest === undefined || batchDeleteDetectorRequest === null) {
        throw new Error("Missing the required parameter 'batchDeleteDetectorRequest' when calling batchDeleteDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDeleteDetectorResponse;
      return this.apiClient.callApi(
        '/detectors/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchDisableAlarm operation.
     * @callback module:api/DefaultApi~batchDisableAlarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDisableAlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables one or more alarms. The alarms change to the <code>DISABLED</code> state after you disable them.
     * @param {module:model/BatchDisableAlarmRequest} batchDisableAlarmRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchDisableAlarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDisableAlarmResponse}
     */
    batchDisableAlarm(batchDisableAlarmRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchDisableAlarmRequest;
      // verify the required parameter 'batchDisableAlarmRequest' is set
      if (batchDisableAlarmRequest === undefined || batchDisableAlarmRequest === null) {
        throw new Error("Missing the required parameter 'batchDisableAlarmRequest' when calling batchDisableAlarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchDisableAlarmResponse;
      return this.apiClient.callApi(
        '/alarms/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchEnableAlarm operation.
     * @callback module:api/DefaultApi~batchEnableAlarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchEnableAlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables one or more alarms. The alarms change to the <code>NORMAL</code> state after you enable them.
     * @param {module:model/BatchEnableAlarmRequest} batchEnableAlarmRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchEnableAlarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchEnableAlarmResponse}
     */
    batchEnableAlarm(batchEnableAlarmRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchEnableAlarmRequest;
      // verify the required parameter 'batchEnableAlarmRequest' is set
      if (batchEnableAlarmRequest === undefined || batchEnableAlarmRequest === null) {
        throw new Error("Missing the required parameter 'batchEnableAlarmRequest' when calling batchEnableAlarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchEnableAlarmResponse;
      return this.apiClient.callApi(
        '/alarms/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchPutMessage operation.
     * @callback module:api/DefaultApi~batchPutMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchPutMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a set of messages to the IoT Events system. Each message payload is transformed into the input you specify (<code>\"inputName\"</code>) and ingested into any detectors that monitor that input. If multiple messages are sent, the order in which the messages are processed isn't guaranteed. To guarantee ordering, you must send messages one at a time and wait for a successful response.
     * @param {module:model/BatchPutMessageRequest} batchPutMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchPutMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchPutMessageResponse}
     */
    batchPutMessage(batchPutMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchPutMessageRequest;
      // verify the required parameter 'batchPutMessageRequest' is set
      if (batchPutMessageRequest === undefined || batchPutMessageRequest === null) {
        throw new Error("Missing the required parameter 'batchPutMessageRequest' when calling batchPutMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchPutMessageResponse;
      return this.apiClient.callApi(
        '/inputs/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchResetAlarm operation.
     * @callback module:api/DefaultApi~batchResetAlarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchResetAlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets one or more alarms. The alarms return to the <code>NORMAL</code> state after you reset them.
     * @param {module:model/BatchResetAlarmRequest} batchResetAlarmRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchResetAlarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchResetAlarmResponse}
     */
    batchResetAlarm(batchResetAlarmRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchResetAlarmRequest;
      // verify the required parameter 'batchResetAlarmRequest' is set
      if (batchResetAlarmRequest === undefined || batchResetAlarmRequest === null) {
        throw new Error("Missing the required parameter 'batchResetAlarmRequest' when calling batchResetAlarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchResetAlarmResponse;
      return this.apiClient.callApi(
        '/alarms/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchSnoozeAlarm operation.
     * @callback module:api/DefaultApi~batchSnoozeAlarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchSnoozeAlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes one or more alarms to the snooze mode. The alarms change to the <code>SNOOZE_DISABLED</code> state after you set them to the snooze mode.
     * @param {module:model/BatchSnoozeAlarmRequest} batchSnoozeAlarmRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchSnoozeAlarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchSnoozeAlarmResponse}
     */
    batchSnoozeAlarm(batchSnoozeAlarmRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchSnoozeAlarmRequest;
      // verify the required parameter 'batchSnoozeAlarmRequest' is set
      if (batchSnoozeAlarmRequest === undefined || batchSnoozeAlarmRequest === null) {
        throw new Error("Missing the required parameter 'batchSnoozeAlarmRequest' when calling batchSnoozeAlarm");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchSnoozeAlarmResponse;
      return this.apiClient.callApi(
        '/alarms/snooze', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchUpdateDetector operation.
     * @callback module:api/DefaultApi~batchUpdateDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchUpdateDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the state, variable values, and timer settings of one or more detectors (instances) of a specified detector model.
     * @param {module:model/BatchUpdateDetectorRequest} batchUpdateDetectorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchUpdateDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchUpdateDetectorResponse}
     */
    batchUpdateDetector(batchUpdateDetectorRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchUpdateDetectorRequest;
      // verify the required parameter 'batchUpdateDetectorRequest' is set
      if (batchUpdateDetectorRequest === undefined || batchUpdateDetectorRequest === null) {
        throw new Error("Missing the required parameter 'batchUpdateDetectorRequest' when calling batchUpdateDetector");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchUpdateDetectorResponse;
      return this.apiClient.callApi(
        '/detectors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAlarm operation.
     * @callback module:api/DefaultApi~describeAlarmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAlarmResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about an alarm.
     * @param {String} alarmModelName The name of the alarm model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [keyValue] The value of the key used as a filter to select only the alarms associated with the <a href=\"https://docs.aws.amazon.com/iotevents/latest/apireference/API_CreateAlarmModel.html#iotevents-CreateAlarmModel-request-key\">key</a>.
     * @param {module:api/DefaultApi~describeAlarmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAlarmResponse}
     */
    describeAlarm(alarmModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alarmModelName' is set
      if (alarmModelName === undefined || alarmModelName === null) {
        throw new Error("Missing the required parameter 'alarmModelName' when calling describeAlarm");
      }

      let pathParams = {
        'alarmModelName': alarmModelName
      };
      let queryParams = {
        'keyValue': opts['keyValue']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAlarmResponse;
      return this.apiClient.callApi(
        '/alarms/{alarmModelName}/keyValues/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDetector operation.
     * @callback module:api/DefaultApi~describeDetectorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDetectorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified detector (instance).
     * @param {String} detectorModelName The name of the detector model whose detectors (instances) you want information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [keyValue] A filter used to limit results to detectors (instances) created because of the given key ID.
     * @param {module:api/DefaultApi~describeDetectorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDetectorResponse}
     */
    describeDetector(detectorModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorModelName' is set
      if (detectorModelName === undefined || detectorModelName === null) {
        throw new Error("Missing the required parameter 'detectorModelName' when calling describeDetector");
      }

      let pathParams = {
        'detectorModelName': detectorModelName
      };
      let queryParams = {
        'keyValue': opts['keyValue']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDetectorResponse;
      return this.apiClient.callApi(
        '/detectors/{detectorModelName}/keyValues/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAlarms operation.
     * @callback module:api/DefaultApi~listAlarmsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAlarmsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists one or more alarms. The operation returns only the metadata associated with each alarm.
     * @param {String} alarmModelName The name of the alarm model.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listAlarmsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAlarmsResponse}
     */
    listAlarms(alarmModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'alarmModelName' is set
      if (alarmModelName === undefined || alarmModelName === null) {
        throw new Error("Missing the required parameter 'alarmModelName' when calling listAlarms");
      }

      let pathParams = {
        'alarmModelName': alarmModelName
      };
      let queryParams = {
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAlarmsResponse;
      return this.apiClient.callApi(
        '/alarms/{alarmModelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDetectors operation.
     * @callback module:api/DefaultApi~listDetectorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDetectorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists detectors (the instances of a detector model).
     * @param {String} detectorModelName The name of the detector model whose detectors (instances) are listed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [stateName] A filter that limits results to those detectors (instances) in the given state.
     * @param {String} [nextToken] The token that you can use to return the next set of results.
     * @param {Number} [maxResults] The maximum number of results to be returned per request.
     * @param {module:api/DefaultApi~listDetectorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDetectorsResponse}
     */
    listDetectors(detectorModelName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'detectorModelName' is set
      if (detectorModelName === undefined || detectorModelName === null) {
        throw new Error("Missing the required parameter 'detectorModelName' when calling listDetectors");
      }

      let pathParams = {
        'detectorModelName': detectorModelName
      };
      let queryParams = {
        'stateName': opts['stateName'],
        'nextToken': opts['nextToken'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDetectorsResponse;
      return this.apiClient.callApi(
        '/detectors/{detectorModelName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
