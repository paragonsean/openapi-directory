# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detector_state import DetectorState
from openapi_server import util


class Detector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detector_model_name: str=None, key_value: str=None, detector_model_version: str=None, state: DetectorState=None, creation_time: datetime=None, last_update_time: datetime=None):
        """Detector - a model defined in OpenAPI

        :param detector_model_name: The detector_model_name of this Detector.
        :param key_value: The key_value of this Detector.
        :param detector_model_version: The detector_model_version of this Detector.
        :param state: The state of this Detector.
        :param creation_time: The creation_time of this Detector.
        :param last_update_time: The last_update_time of this Detector.
        """
        self.openapi_types = {
            'detector_model_name': str,
            'key_value': str,
            'detector_model_version': str,
            'state': DetectorState,
            'creation_time': datetime,
            'last_update_time': datetime
        }

        self.attribute_map = {
            'detector_model_name': 'detectorModelName',
            'key_value': 'keyValue',
            'detector_model_version': 'detectorModelVersion',
            'state': 'state',
            'creation_time': 'creationTime',
            'last_update_time': 'lastUpdateTime'
        }

        self._detector_model_name = detector_model_name
        self._key_value = key_value
        self._detector_model_version = detector_model_version
        self._state = state
        self._creation_time = creation_time
        self._last_update_time = last_update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Detector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Detector of this Detector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detector_model_name(self):
        """Gets the detector_model_name of this Detector.


        :return: The detector_model_name of this Detector.
        :rtype: str
        """
        return self._detector_model_name

    @detector_model_name.setter
    def detector_model_name(self, detector_model_name):
        """Sets the detector_model_name of this Detector.


        :param detector_model_name: The detector_model_name of this Detector.
        :type detector_model_name: str
        """

        self._detector_model_name = detector_model_name

    @property
    def key_value(self):
        """Gets the key_value of this Detector.


        :return: The key_value of this Detector.
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this Detector.


        :param key_value: The key_value of this Detector.
        :type key_value: str
        """

        self._key_value = key_value

    @property
    def detector_model_version(self):
        """Gets the detector_model_version of this Detector.


        :return: The detector_model_version of this Detector.
        :rtype: str
        """
        return self._detector_model_version

    @detector_model_version.setter
    def detector_model_version(self, detector_model_version):
        """Sets the detector_model_version of this Detector.


        :param detector_model_version: The detector_model_version of this Detector.
        :type detector_model_version: str
        """

        self._detector_model_version = detector_model_version

    @property
    def state(self):
        """Gets the state of this Detector.


        :return: The state of this Detector.
        :rtype: DetectorState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Detector.


        :param state: The state of this Detector.
        :type state: DetectorState
        """

        self._state = state

    @property
    def creation_time(self):
        """Gets the creation_time of this Detector.


        :return: The creation_time of this Detector.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Detector.


        :param creation_time: The creation_time of this Detector.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this Detector.


        :return: The last_update_time of this Detector.
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this Detector.


        :param last_update_time: The last_update_time of this Detector.
        :type last_update_time: datetime
        """

        self._last_update_time = last_update_time
