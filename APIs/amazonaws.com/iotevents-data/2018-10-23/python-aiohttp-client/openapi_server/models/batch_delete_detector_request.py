# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete_detector_request import DeleteDetectorRequest
from openapi_server import util


class BatchDeleteDetectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detectors: List[DeleteDetectorRequest]=None):
        """BatchDeleteDetectorRequest - a model defined in OpenAPI

        :param detectors: The detectors of this BatchDeleteDetectorRequest.
        """
        self.openapi_types = {
            'detectors': List[DeleteDetectorRequest]
        }

        self.attribute_map = {
            'detectors': 'detectors'
        }

        self._detectors = detectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchDeleteDetectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchDeleteDetector_request of this BatchDeleteDetectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detectors(self):
        """Gets the detectors of this BatchDeleteDetectorRequest.

        The list of one or more detectors to be deleted.

        :return: The detectors of this BatchDeleteDetectorRequest.
        :rtype: List[DeleteDetectorRequest]
        """
        return self._detectors

    @detectors.setter
    def detectors(self, detectors):
        """Sets the detectors of this BatchDeleteDetectorRequest.

        The list of one or more detectors to be deleted.

        :param detectors: The detectors of this BatchDeleteDetectorRequest.
        :type detectors: List[DeleteDetectorRequest]
        """
        if detectors is None:
            raise ValueError("Invalid value for `detectors`, must not be `None`")
        if detectors is not None and len(detectors) < 1:
            raise ValueError("Invalid value for `detectors`, number of items must be greater than or equal to `1`")

        self._detectors = detectors
