# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_detector_request_state import UpdateDetectorRequestState
from openapi_server import util


class UpdateDetectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_id: str=None, detector_model_name: str=None, key_value: str=None, state: UpdateDetectorRequestState=None):
        """UpdateDetectorRequest - a model defined in OpenAPI

        :param message_id: The message_id of this UpdateDetectorRequest.
        :param detector_model_name: The detector_model_name of this UpdateDetectorRequest.
        :param key_value: The key_value of this UpdateDetectorRequest.
        :param state: The state of this UpdateDetectorRequest.
        """
        self.openapi_types = {
            'message_id': str,
            'detector_model_name': str,
            'key_value': str,
            'state': UpdateDetectorRequestState
        }

        self.attribute_map = {
            'message_id': 'messageId',
            'detector_model_name': 'detectorModelName',
            'key_value': 'keyValue',
            'state': 'state'
        }

        self._message_id = message_id
        self._detector_model_name = detector_model_name
        self._key_value = key_value
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDetectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDetectorRequest of this UpdateDetectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self):
        """Gets the message_id of this UpdateDetectorRequest.


        :return: The message_id of this UpdateDetectorRequest.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this UpdateDetectorRequest.


        :param message_id: The message_id of this UpdateDetectorRequest.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def detector_model_name(self):
        """Gets the detector_model_name of this UpdateDetectorRequest.


        :return: The detector_model_name of this UpdateDetectorRequest.
        :rtype: str
        """
        return self._detector_model_name

    @detector_model_name.setter
    def detector_model_name(self, detector_model_name):
        """Sets the detector_model_name of this UpdateDetectorRequest.


        :param detector_model_name: The detector_model_name of this UpdateDetectorRequest.
        :type detector_model_name: str
        """
        if detector_model_name is None:
            raise ValueError("Invalid value for `detector_model_name`, must not be `None`")

        self._detector_model_name = detector_model_name

    @property
    def key_value(self):
        """Gets the key_value of this UpdateDetectorRequest.


        :return: The key_value of this UpdateDetectorRequest.
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this UpdateDetectorRequest.


        :param key_value: The key_value of this UpdateDetectorRequest.
        :type key_value: str
        """

        self._key_value = key_value

    @property
    def state(self):
        """Gets the state of this UpdateDetectorRequest.


        :return: The state of this UpdateDetectorRequest.
        :rtype: UpdateDetectorRequestState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateDetectorRequest.


        :param state: The state of this UpdateDetectorRequest.
        :type state: UpdateDetectorRequestState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
