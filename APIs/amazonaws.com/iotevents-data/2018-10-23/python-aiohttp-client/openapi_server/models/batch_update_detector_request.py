# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_detector_request import UpdateDetectorRequest
from openapi_server import util


class BatchUpdateDetectorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detectors: List[UpdateDetectorRequest]=None):
        """BatchUpdateDetectorRequest - a model defined in OpenAPI

        :param detectors: The detectors of this BatchUpdateDetectorRequest.
        """
        self.openapi_types = {
            'detectors': List[UpdateDetectorRequest]
        }

        self.attribute_map = {
            'detectors': 'detectors'
        }

        self._detectors = detectors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateDetectorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateDetector_request of this BatchUpdateDetectorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detectors(self):
        """Gets the detectors of this BatchUpdateDetectorRequest.

        The list of detectors (instances) to update, along with the values to update.

        :return: The detectors of this BatchUpdateDetectorRequest.
        :rtype: List[UpdateDetectorRequest]
        """
        return self._detectors

    @detectors.setter
    def detectors(self, detectors):
        """Sets the detectors of this BatchUpdateDetectorRequest.

        The list of detectors (instances) to update, along with the values to update.

        :param detectors: The detectors of this BatchUpdateDetectorRequest.
        :type detectors: List[UpdateDetectorRequest]
        """
        if detectors is None:
            raise ValueError("Invalid value for `detectors`, must not be `None`")
        if detectors is not None and len(detectors) < 1:
            raise ValueError("Invalid value for `detectors`, number of items must be greater than or equal to `1`")

        self._detectors = detectors
