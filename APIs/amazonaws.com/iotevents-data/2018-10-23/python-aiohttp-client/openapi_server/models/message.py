# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_timestamp import MessageTimestamp
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_id: str=None, input_name: str=None, payload: str=None, timestamp: MessageTimestamp=None):
        """Message - a model defined in OpenAPI

        :param message_id: The message_id of this Message.
        :param input_name: The input_name of this Message.
        :param payload: The payload of this Message.
        :param timestamp: The timestamp of this Message.
        """
        self.openapi_types = {
            'message_id': str,
            'input_name': str,
            'payload': str,
            'timestamp': MessageTimestamp
        }

        self.attribute_map = {
            'message_id': 'messageId',
            'input_name': 'inputName',
            'payload': 'payload',
            'timestamp': 'timestamp'
        }

        self._message_id = message_id
        self._input_name = input_name
        self._payload = payload
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_id(self):
        """Gets the message_id of this Message.


        :return: The message_id of this Message.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Message.


        :param message_id: The message_id of this Message.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def input_name(self):
        """Gets the input_name of this Message.


        :return: The input_name of this Message.
        :rtype: str
        """
        return self._input_name

    @input_name.setter
    def input_name(self, input_name):
        """Sets the input_name of this Message.


        :param input_name: The input_name of this Message.
        :type input_name: str
        """
        if input_name is None:
            raise ValueError("Invalid value for `input_name`, must not be `None`")

        self._input_name = input_name

    @property
    def payload(self):
        """Gets the payload of this Message.


        :return: The payload of this Message.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Message.


        :param payload: The payload of this Message.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload

    @property
    def timestamp(self):
        """Gets the timestamp of this Message.


        :return: The timestamp of this Message.
        :rtype: MessageTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Message.


        :param timestamp: The timestamp of this Message.
        :type timestamp: MessageTimestamp
        """

        self._timestamp = timestamp
