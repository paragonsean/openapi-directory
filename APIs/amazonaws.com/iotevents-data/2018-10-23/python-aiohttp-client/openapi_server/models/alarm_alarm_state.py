# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alarm_state_customer_action import AlarmStateCustomerAction
from openapi_server.models.alarm_state_name import AlarmStateName
from openapi_server.models.alarm_state_rule_evaluation import AlarmStateRuleEvaluation
from openapi_server.models.alarm_state_system_event import AlarmStateSystemEvent
from openapi_server import util


class AlarmAlarmState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_name: AlarmStateName=None, rule_evaluation: AlarmStateRuleEvaluation=None, customer_action: AlarmStateCustomerAction=None, system_event: AlarmStateSystemEvent=None):
        """AlarmAlarmState - a model defined in OpenAPI

        :param state_name: The state_name of this AlarmAlarmState.
        :param rule_evaluation: The rule_evaluation of this AlarmAlarmState.
        :param customer_action: The customer_action of this AlarmAlarmState.
        :param system_event: The system_event of this AlarmAlarmState.
        """
        self.openapi_types = {
            'state_name': AlarmStateName,
            'rule_evaluation': AlarmStateRuleEvaluation,
            'customer_action': AlarmStateCustomerAction,
            'system_event': AlarmStateSystemEvent
        }

        self.attribute_map = {
            'state_name': 'stateName',
            'rule_evaluation': 'ruleEvaluation',
            'customer_action': 'customerAction',
            'system_event': 'systemEvent'
        }

        self._state_name = state_name
        self._rule_evaluation = rule_evaluation
        self._customer_action = customer_action
        self._system_event = system_event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlarmAlarmState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Alarm_alarmState of this AlarmAlarmState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_name(self):
        """Gets the state_name of this AlarmAlarmState.


        :return: The state_name of this AlarmAlarmState.
        :rtype: AlarmStateName
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this AlarmAlarmState.


        :param state_name: The state_name of this AlarmAlarmState.
        :type state_name: AlarmStateName
        """

        self._state_name = state_name

    @property
    def rule_evaluation(self):
        """Gets the rule_evaluation of this AlarmAlarmState.


        :return: The rule_evaluation of this AlarmAlarmState.
        :rtype: AlarmStateRuleEvaluation
        """
        return self._rule_evaluation

    @rule_evaluation.setter
    def rule_evaluation(self, rule_evaluation):
        """Sets the rule_evaluation of this AlarmAlarmState.


        :param rule_evaluation: The rule_evaluation of this AlarmAlarmState.
        :type rule_evaluation: AlarmStateRuleEvaluation
        """

        self._rule_evaluation = rule_evaluation

    @property
    def customer_action(self):
        """Gets the customer_action of this AlarmAlarmState.


        :return: The customer_action of this AlarmAlarmState.
        :rtype: AlarmStateCustomerAction
        """
        return self._customer_action

    @customer_action.setter
    def customer_action(self, customer_action):
        """Sets the customer_action of this AlarmAlarmState.


        :param customer_action: The customer_action of this AlarmAlarmState.
        :type customer_action: AlarmStateCustomerAction
        """

        self._customer_action = customer_action

    @property
    def system_event(self):
        """Gets the system_event of this AlarmAlarmState.


        :return: The system_event of this AlarmAlarmState.
        :rtype: AlarmStateSystemEvent
        """
        return self._system_event

    @system_event.setter
    def system_event(self, system_event):
        """Sets the system_event of this AlarmAlarmState.


        :param system_event: The system_event of this AlarmAlarmState.
        :type system_event: AlarmStateSystemEvent
        """

        self._system_event = system_event
