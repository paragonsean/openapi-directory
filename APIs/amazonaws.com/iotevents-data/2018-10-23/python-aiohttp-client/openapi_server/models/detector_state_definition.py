# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectorStateDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_name: str=None, variables: List=None, timers: List=None):
        """DetectorStateDefinition - a model defined in OpenAPI

        :param state_name: The state_name of this DetectorStateDefinition.
        :param variables: The variables of this DetectorStateDefinition.
        :param timers: The timers of this DetectorStateDefinition.
        """
        self.openapi_types = {
            'state_name': str,
            'variables': List,
            'timers': List
        }

        self.attribute_map = {
            'state_name': 'stateName',
            'variables': 'variables',
            'timers': 'timers'
        }

        self._state_name = state_name
        self._variables = variables
        self._timers = timers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectorStateDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectorStateDefinition of this DetectorStateDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_name(self):
        """Gets the state_name of this DetectorStateDefinition.


        :return: The state_name of this DetectorStateDefinition.
        :rtype: str
        """
        return self._state_name

    @state_name.setter
    def state_name(self, state_name):
        """Sets the state_name of this DetectorStateDefinition.


        :param state_name: The state_name of this DetectorStateDefinition.
        :type state_name: str
        """
        if state_name is None:
            raise ValueError("Invalid value for `state_name`, must not be `None`")

        self._state_name = state_name

    @property
    def variables(self):
        """Gets the variables of this DetectorStateDefinition.


        :return: The variables of this DetectorStateDefinition.
        :rtype: List
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this DetectorStateDefinition.


        :param variables: The variables of this DetectorStateDefinition.
        :type variables: List
        """
        if variables is None:
            raise ValueError("Invalid value for `variables`, must not be `None`")

        self._variables = variables

    @property
    def timers(self):
        """Gets the timers of this DetectorStateDefinition.


        :return: The timers of this DetectorStateDefinition.
        :rtype: List
        """
        return self._timers

    @timers.setter
    def timers(self, timers):
        """Sets the timers of this DetectorStateDefinition.


        :param timers: The timers of this DetectorStateDefinition.
        :type timers: List
        """
        if timers is None:
            raise ValueError("Invalid value for `timers`, must not be `None`")

        self._timers = timers
