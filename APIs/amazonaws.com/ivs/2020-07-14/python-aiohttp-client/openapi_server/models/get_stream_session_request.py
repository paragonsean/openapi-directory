# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetStreamSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, stream_id: str=None):
        """GetStreamSessionRequest - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this GetStreamSessionRequest.
        :param stream_id: The stream_id of this GetStreamSessionRequest.
        """
        self.openapi_types = {
            'channel_arn': str,
            'stream_id': str
        }

        self.attribute_map = {
            'channel_arn': 'channelArn',
            'stream_id': 'streamId'
        }

        self._channel_arn = channel_arn
        self._stream_id = stream_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetStreamSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetStreamSession_request of this GetStreamSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this GetStreamSessionRequest.

        ARN of the channel resource

        :return: The channel_arn of this GetStreamSessionRequest.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this GetStreamSessionRequest.

        ARN of the channel resource

        :param channel_arn: The channel_arn of this GetStreamSessionRequest.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")
        if channel_arn is not None and len(channel_arn) > 128:
            raise ValueError("Invalid value for `channel_arn`, length must be less than or equal to `128`")
        if channel_arn is not None and len(channel_arn) < 1:
            raise ValueError("Invalid value for `channel_arn`, length must be greater than or equal to `1`")
        if channel_arn is not None and not re.search(r'^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$', channel_arn):
            raise ValueError("Invalid value for `channel_arn`, must be a follow pattern or equal to `/^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$/`")

        self._channel_arn = channel_arn

    @property
    def stream_id(self):
        """Gets the stream_id of this GetStreamSessionRequest.

        Unique identifier for a live or previously live stream in the specified channel. If no <code>streamId</code> is provided, this returns the most recent stream session for the channel, if it exists.

        :return: The stream_id of this GetStreamSessionRequest.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this GetStreamSessionRequest.

        Unique identifier for a live or previously live stream in the specified channel. If no <code>streamId</code> is provided, this returns the most recent stream session for the channel, if it exists.

        :param stream_id: The stream_id of this GetStreamSessionRequest.
        :type stream_id: str
        """
        if stream_id is not None and len(stream_id) > 26:
            raise ValueError("Invalid value for `stream_id`, length must be less than or equal to `26`")
        if stream_id is not None and len(stream_id) < 26:
            raise ValueError("Invalid value for `stream_id`, length must be greater than or equal to `26`")
        if stream_id is not None and not re.search(r'^st-[a-zA-Z0-9]+$', stream_id):
            raise ValueError("Invalid value for `stream_id`, must be a follow pattern or equal to `/^st-[a-zA-Z0-9]+$/`")

        self._stream_id = stream_id
