# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteRecordingConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None):
        """DeleteRecordingConfigurationRequest - a model defined in OpenAPI

        :param arn: The arn of this DeleteRecordingConfigurationRequest.
        """
        self.openapi_types = {
            'arn': str
        }

        self.attribute_map = {
            'arn': 'arn'
        }

        self._arn = arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteRecordingConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteRecordingConfiguration_request of this DeleteRecordingConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this DeleteRecordingConfigurationRequest.

        ARN of the recording configuration to be deleted.

        :return: The arn of this DeleteRecordingConfigurationRequest.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this DeleteRecordingConfigurationRequest.

        ARN of the recording configuration to be deleted.

        :param arn: The arn of this DeleteRecordingConfigurationRequest.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")
        if arn is not None and len(arn) > 128:
            raise ValueError("Invalid value for `arn`, length must be less than or equal to `128`")
        if arn is not None and len(arn) < 0:
            raise ValueError("Invalid value for `arn`, length must be greater than or equal to `0`")
        if arn is not None and not re.search(r'^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration\/[a-zA-Z0-9-]+$', arn):
            raise ValueError("Invalid value for `arn`, must be a follow pattern or equal to `/^arn:aws:ivs:[a-z0-9-]+:[0-9]+:recording-configuration\/[a-zA-Z0-9-]+$/`")

        self._arn = arn
