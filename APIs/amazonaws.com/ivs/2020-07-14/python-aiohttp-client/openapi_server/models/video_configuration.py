# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avc_level: str=None, avc_profile: str=None, codec: str=None, encoder: str=None, target_bitrate: int=None, target_framerate: int=None, video_height: int=None, video_width: int=None):
        """VideoConfiguration - a model defined in OpenAPI

        :param avc_level: The avc_level of this VideoConfiguration.
        :param avc_profile: The avc_profile of this VideoConfiguration.
        :param codec: The codec of this VideoConfiguration.
        :param encoder: The encoder of this VideoConfiguration.
        :param target_bitrate: The target_bitrate of this VideoConfiguration.
        :param target_framerate: The target_framerate of this VideoConfiguration.
        :param video_height: The video_height of this VideoConfiguration.
        :param video_width: The video_width of this VideoConfiguration.
        """
        self.openapi_types = {
            'avc_level': str,
            'avc_profile': str,
            'codec': str,
            'encoder': str,
            'target_bitrate': int,
            'target_framerate': int,
            'video_height': int,
            'video_width': int
        }

        self.attribute_map = {
            'avc_level': 'avcLevel',
            'avc_profile': 'avcProfile',
            'codec': 'codec',
            'encoder': 'encoder',
            'target_bitrate': 'targetBitrate',
            'target_framerate': 'targetFramerate',
            'video_height': 'videoHeight',
            'video_width': 'videoWidth'
        }

        self._avc_level = avc_level
        self._avc_profile = avc_profile
        self._codec = codec
        self._encoder = encoder
        self._target_bitrate = target_bitrate
        self._target_framerate = target_framerate
        self._video_height = video_height
        self._video_width = video_width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoConfiguration of this VideoConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avc_level(self):
        """Gets the avc_level of this VideoConfiguration.


        :return: The avc_level of this VideoConfiguration.
        :rtype: str
        """
        return self._avc_level

    @avc_level.setter
    def avc_level(self, avc_level):
        """Sets the avc_level of this VideoConfiguration.


        :param avc_level: The avc_level of this VideoConfiguration.
        :type avc_level: str
        """

        self._avc_level = avc_level

    @property
    def avc_profile(self):
        """Gets the avc_profile of this VideoConfiguration.


        :return: The avc_profile of this VideoConfiguration.
        :rtype: str
        """
        return self._avc_profile

    @avc_profile.setter
    def avc_profile(self, avc_profile):
        """Sets the avc_profile of this VideoConfiguration.


        :param avc_profile: The avc_profile of this VideoConfiguration.
        :type avc_profile: str
        """

        self._avc_profile = avc_profile

    @property
    def codec(self):
        """Gets the codec of this VideoConfiguration.


        :return: The codec of this VideoConfiguration.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this VideoConfiguration.


        :param codec: The codec of this VideoConfiguration.
        :type codec: str
        """

        self._codec = codec

    @property
    def encoder(self):
        """Gets the encoder of this VideoConfiguration.


        :return: The encoder of this VideoConfiguration.
        :rtype: str
        """
        return self._encoder

    @encoder.setter
    def encoder(self, encoder):
        """Sets the encoder of this VideoConfiguration.


        :param encoder: The encoder of this VideoConfiguration.
        :type encoder: str
        """

        self._encoder = encoder

    @property
    def target_bitrate(self):
        """Gets the target_bitrate of this VideoConfiguration.


        :return: The target_bitrate of this VideoConfiguration.
        :rtype: int
        """
        return self._target_bitrate

    @target_bitrate.setter
    def target_bitrate(self, target_bitrate):
        """Sets the target_bitrate of this VideoConfiguration.


        :param target_bitrate: The target_bitrate of this VideoConfiguration.
        :type target_bitrate: int
        """

        self._target_bitrate = target_bitrate

    @property
    def target_framerate(self):
        """Gets the target_framerate of this VideoConfiguration.


        :return: The target_framerate of this VideoConfiguration.
        :rtype: int
        """
        return self._target_framerate

    @target_framerate.setter
    def target_framerate(self, target_framerate):
        """Sets the target_framerate of this VideoConfiguration.


        :param target_framerate: The target_framerate of this VideoConfiguration.
        :type target_framerate: int
        """

        self._target_framerate = target_framerate

    @property
    def video_height(self):
        """Gets the video_height of this VideoConfiguration.


        :return: The video_height of this VideoConfiguration.
        :rtype: int
        """
        return self._video_height

    @video_height.setter
    def video_height(self, video_height):
        """Sets the video_height of this VideoConfiguration.


        :param video_height: The video_height of this VideoConfiguration.
        :type video_height: int
        """

        self._video_height = video_height

    @property
    def video_width(self):
        """Gets the video_width of this VideoConfiguration.


        :return: The video_width of this VideoConfiguration.
        :rtype: int
        """
        return self._video_width

    @video_width.setter
    def video_width(self, video_width):
        """Sets the video_width of this VideoConfiguration.


        :param video_width: The video_width of this VideoConfiguration.
        :type video_width: int
        """

        self._video_width = video_width
