# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arns: List[str]=None):
        """BatchGetChannelRequest - a model defined in OpenAPI

        :param arns: The arns of this BatchGetChannelRequest.
        """
        self.openapi_types = {
            'arns': List[str]
        }

        self.attribute_map = {
            'arns': 'arns'
        }

        self._arns = arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetChannel_request of this BatchGetChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arns(self):
        """Gets the arns of this BatchGetChannelRequest.

        Array of ARNs, one per channel.

        :return: The arns of this BatchGetChannelRequest.
        :rtype: List[str]
        """
        return self._arns

    @arns.setter
    def arns(self, arns):
        """Sets the arns of this BatchGetChannelRequest.

        Array of ARNs, one per channel.

        :param arns: The arns of this BatchGetChannelRequest.
        :type arns: List[str]
        """
        if arns is None:
            raise ValueError("Invalid value for `arns`, must not be `None`")
        if arns is not None and len(arns) > 50:
            raise ValueError("Invalid value for `arns`, number of items must be less than or equal to `50`")
        if arns is not None and len(arns) < 1:
            raise ValueError("Invalid value for `arns`, number of items must be greater than or equal to `1`")

        self._arns = arns
