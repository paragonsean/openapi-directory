# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_health import StreamHealth
from openapi_server.models.stream_state import StreamState
from openapi_server import util


class Stream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, health: StreamHealth=None, playback_url: str=None, start_time: datetime=None, state: StreamState=None, stream_id: str=None, viewer_count: int=None):
        """Stream - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this Stream.
        :param health: The health of this Stream.
        :param playback_url: The playback_url of this Stream.
        :param start_time: The start_time of this Stream.
        :param state: The state of this Stream.
        :param stream_id: The stream_id of this Stream.
        :param viewer_count: The viewer_count of this Stream.
        """
        self.openapi_types = {
            'channel_arn': str,
            'health': StreamHealth,
            'playback_url': str,
            'start_time': datetime,
            'state': StreamState,
            'stream_id': str,
            'viewer_count': int
        }

        self.attribute_map = {
            'channel_arn': 'channelArn',
            'health': 'health',
            'playback_url': 'playbackUrl',
            'start_time': 'startTime',
            'state': 'state',
            'stream_id': 'streamId',
            'viewer_count': 'viewerCount'
        }

        self._channel_arn = channel_arn
        self._health = health
        self._playback_url = playback_url
        self._start_time = start_time
        self._state = state
        self._stream_id = stream_id
        self._viewer_count = viewer_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stream':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stream of this Stream.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this Stream.


        :return: The channel_arn of this Stream.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this Stream.


        :param channel_arn: The channel_arn of this Stream.
        :type channel_arn: str
        """

        self._channel_arn = channel_arn

    @property
    def health(self):
        """Gets the health of this Stream.


        :return: The health of this Stream.
        :rtype: StreamHealth
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this Stream.


        :param health: The health of this Stream.
        :type health: StreamHealth
        """

        self._health = health

    @property
    def playback_url(self):
        """Gets the playback_url of this Stream.


        :return: The playback_url of this Stream.
        :rtype: str
        """
        return self._playback_url

    @playback_url.setter
    def playback_url(self, playback_url):
        """Sets the playback_url of this Stream.


        :param playback_url: The playback_url of this Stream.
        :type playback_url: str
        """

        self._playback_url = playback_url

    @property
    def start_time(self):
        """Gets the start_time of this Stream.


        :return: The start_time of this Stream.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Stream.


        :param start_time: The start_time of this Stream.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Stream.


        :return: The state of this Stream.
        :rtype: StreamState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Stream.


        :param state: The state of this Stream.
        :type state: StreamState
        """

        self._state = state

    @property
    def stream_id(self):
        """Gets the stream_id of this Stream.


        :return: The stream_id of this Stream.
        :rtype: str
        """
        return self._stream_id

    @stream_id.setter
    def stream_id(self, stream_id):
        """Sets the stream_id of this Stream.


        :param stream_id: The stream_id of this Stream.
        :type stream_id: str
        """

        self._stream_id = stream_id

    @property
    def viewer_count(self):
        """Gets the viewer_count of this Stream.


        :return: The viewer_count of this Stream.
        :rtype: int
        """
        return self._viewer_count

    @viewer_count.setter
    def viewer_count(self, viewer_count):
        """Sets the viewer_count of this Stream.


        :param viewer_count: The viewer_count of this Stream.
        :type viewer_count: int
        """

        self._viewer_count = viewer_count
