# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListRecordingConfigurationsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, recording_configurations: List=None):
        """ListRecordingConfigurationsResponse - a model defined in OpenAPI

        :param next_token: The next_token of this ListRecordingConfigurationsResponse.
        :param recording_configurations: The recording_configurations of this ListRecordingConfigurationsResponse.
        """
        self.openapi_types = {
            'next_token': str,
            'recording_configurations': List
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'recording_configurations': 'recordingConfigurations'
        }

        self._next_token = next_token
        self._recording_configurations = recording_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRecordingConfigurationsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRecordingConfigurationsResponse of this ListRecordingConfigurationsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListRecordingConfigurationsResponse.


        :return: The next_token of this ListRecordingConfigurationsResponse.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListRecordingConfigurationsResponse.


        :param next_token: The next_token of this ListRecordingConfigurationsResponse.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def recording_configurations(self):
        """Gets the recording_configurations of this ListRecordingConfigurationsResponse.


        :return: The recording_configurations of this ListRecordingConfigurationsResponse.
        :rtype: List
        """
        return self._recording_configurations

    @recording_configurations.setter
    def recording_configurations(self, recording_configurations):
        """Sets the recording_configurations of this ListRecordingConfigurationsResponse.


        :param recording_configurations: The recording_configurations of this ListRecordingConfigurationsResponse.
        :type recording_configurations: List
        """
        if recording_configurations is None:
            raise ValueError("Invalid value for `recording_configurations`, must not be `None`")

        self._recording_configurations = recording_configurations
