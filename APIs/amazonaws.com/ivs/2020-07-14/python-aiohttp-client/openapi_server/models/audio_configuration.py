# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: int=None, codec: str=None, sample_rate: int=None, target_bitrate: int=None):
        """AudioConfiguration - a model defined in OpenAPI

        :param channels: The channels of this AudioConfiguration.
        :param codec: The codec of this AudioConfiguration.
        :param sample_rate: The sample_rate of this AudioConfiguration.
        :param target_bitrate: The target_bitrate of this AudioConfiguration.
        """
        self.openapi_types = {
            'channels': int,
            'codec': str,
            'sample_rate': int,
            'target_bitrate': int
        }

        self.attribute_map = {
            'channels': 'channels',
            'codec': 'codec',
            'sample_rate': 'sampleRate',
            'target_bitrate': 'targetBitrate'
        }

        self._channels = channels
        self._codec = codec
        self._sample_rate = sample_rate
        self._target_bitrate = target_bitrate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioConfiguration of this AudioConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this AudioConfiguration.


        :return: The channels of this AudioConfiguration.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this AudioConfiguration.


        :param channels: The channels of this AudioConfiguration.
        :type channels: int
        """

        self._channels = channels

    @property
    def codec(self):
        """Gets the codec of this AudioConfiguration.


        :return: The codec of this AudioConfiguration.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this AudioConfiguration.


        :param codec: The codec of this AudioConfiguration.
        :type codec: str
        """

        self._codec = codec

    @property
    def sample_rate(self):
        """Gets the sample_rate of this AudioConfiguration.


        :return: The sample_rate of this AudioConfiguration.
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this AudioConfiguration.


        :param sample_rate: The sample_rate of this AudioConfiguration.
        :type sample_rate: int
        """

        self._sample_rate = sample_rate

    @property
    def target_bitrate(self):
        """Gets the target_bitrate of this AudioConfiguration.


        :return: The target_bitrate of this AudioConfiguration.
        :rtype: int
        """
        return self._target_bitrate

    @target_bitrate.setter
    def target_bitrate(self, target_bitrate):
        """Sets the target_bitrate of this AudioConfiguration.


        :param target_bitrate: The target_bitrate of this AudioConfiguration.
        :type target_bitrate: int
        """

        self._target_bitrate = target_bitrate
