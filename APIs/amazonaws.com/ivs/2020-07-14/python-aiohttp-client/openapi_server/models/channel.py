# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_latency_mode import ChannelLatencyMode
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.transcode_preset import TranscodePreset
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, authorized: bool=None, ingest_endpoint: str=None, insecure_ingest: bool=None, latency_mode: ChannelLatencyMode=None, name: str=None, playback_url: str=None, preset: TranscodePreset=None, recording_configuration_arn: str=None, tags: Dict=None, type: ChannelType=None):
        """Channel - a model defined in OpenAPI

        :param arn: The arn of this Channel.
        :param authorized: The authorized of this Channel.
        :param ingest_endpoint: The ingest_endpoint of this Channel.
        :param insecure_ingest: The insecure_ingest of this Channel.
        :param latency_mode: The latency_mode of this Channel.
        :param name: The name of this Channel.
        :param playback_url: The playback_url of this Channel.
        :param preset: The preset of this Channel.
        :param recording_configuration_arn: The recording_configuration_arn of this Channel.
        :param tags: The tags of this Channel.
        :param type: The type of this Channel.
        """
        self.openapi_types = {
            'arn': str,
            'authorized': bool,
            'ingest_endpoint': str,
            'insecure_ingest': bool,
            'latency_mode': ChannelLatencyMode,
            'name': str,
            'playback_url': str,
            'preset': TranscodePreset,
            'recording_configuration_arn': str,
            'tags': Dict,
            'type': ChannelType
        }

        self.attribute_map = {
            'arn': 'arn',
            'authorized': 'authorized',
            'ingest_endpoint': 'ingestEndpoint',
            'insecure_ingest': 'insecureIngest',
            'latency_mode': 'latencyMode',
            'name': 'name',
            'playback_url': 'playbackUrl',
            'preset': 'preset',
            'recording_configuration_arn': 'recordingConfigurationArn',
            'tags': 'tags',
            'type': 'type'
        }

        self._arn = arn
        self._authorized = authorized
        self._ingest_endpoint = ingest_endpoint
        self._insecure_ingest = insecure_ingest
        self._latency_mode = latency_mode
        self._name = name
        self._playback_url = playback_url
        self._preset = preset
        self._recording_configuration_arn = recording_configuration_arn
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Channel.


        :return: The arn of this Channel.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Channel.


        :param arn: The arn of this Channel.
        :type arn: str
        """

        self._arn = arn

    @property
    def authorized(self):
        """Gets the authorized of this Channel.


        :return: The authorized of this Channel.
        :rtype: bool
        """
        return self._authorized

    @authorized.setter
    def authorized(self, authorized):
        """Sets the authorized of this Channel.


        :param authorized: The authorized of this Channel.
        :type authorized: bool
        """

        self._authorized = authorized

    @property
    def ingest_endpoint(self):
        """Gets the ingest_endpoint of this Channel.


        :return: The ingest_endpoint of this Channel.
        :rtype: str
        """
        return self._ingest_endpoint

    @ingest_endpoint.setter
    def ingest_endpoint(self, ingest_endpoint):
        """Sets the ingest_endpoint of this Channel.


        :param ingest_endpoint: The ingest_endpoint of this Channel.
        :type ingest_endpoint: str
        """

        self._ingest_endpoint = ingest_endpoint

    @property
    def insecure_ingest(self):
        """Gets the insecure_ingest of this Channel.


        :return: The insecure_ingest of this Channel.
        :rtype: bool
        """
        return self._insecure_ingest

    @insecure_ingest.setter
    def insecure_ingest(self, insecure_ingest):
        """Sets the insecure_ingest of this Channel.


        :param insecure_ingest: The insecure_ingest of this Channel.
        :type insecure_ingest: bool
        """

        self._insecure_ingest = insecure_ingest

    @property
    def latency_mode(self):
        """Gets the latency_mode of this Channel.


        :return: The latency_mode of this Channel.
        :rtype: ChannelLatencyMode
        """
        return self._latency_mode

    @latency_mode.setter
    def latency_mode(self, latency_mode):
        """Sets the latency_mode of this Channel.


        :param latency_mode: The latency_mode of this Channel.
        :type latency_mode: ChannelLatencyMode
        """

        self._latency_mode = latency_mode

    @property
    def name(self):
        """Gets the name of this Channel.


        :return: The name of this Channel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Channel.


        :param name: The name of this Channel.
        :type name: str
        """

        self._name = name

    @property
    def playback_url(self):
        """Gets the playback_url of this Channel.


        :return: The playback_url of this Channel.
        :rtype: str
        """
        return self._playback_url

    @playback_url.setter
    def playback_url(self, playback_url):
        """Sets the playback_url of this Channel.


        :param playback_url: The playback_url of this Channel.
        :type playback_url: str
        """

        self._playback_url = playback_url

    @property
    def preset(self):
        """Gets the preset of this Channel.


        :return: The preset of this Channel.
        :rtype: TranscodePreset
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this Channel.


        :param preset: The preset of this Channel.
        :type preset: TranscodePreset
        """

        self._preset = preset

    @property
    def recording_configuration_arn(self):
        """Gets the recording_configuration_arn of this Channel.


        :return: The recording_configuration_arn of this Channel.
        :rtype: str
        """
        return self._recording_configuration_arn

    @recording_configuration_arn.setter
    def recording_configuration_arn(self, recording_configuration_arn):
        """Sets the recording_configuration_arn of this Channel.


        :param recording_configuration_arn: The recording_configuration_arn of this Channel.
        :type recording_configuration_arn: str
        """

        self._recording_configuration_arn = recording_configuration_arn

    @property
    def tags(self):
        """Gets the tags of this Channel.


        :return: The tags of this Channel.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Channel.


        :param tags: The tags of this Channel.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Channel.


        :return: The type of this Channel.
        :rtype: ChannelType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Channel.


        :param type: The type of this Channel.
        :type type: ChannelType
        """

        self._type = type
