# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateStreamKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, tags: Dict[str, str]=None):
        """CreateStreamKeyRequest - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this CreateStreamKeyRequest.
        :param tags: The tags of this CreateStreamKeyRequest.
        """
        self.openapi_types = {
            'channel_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'channel_arn': 'channelArn',
            'tags': 'tags'
        }

        self._channel_arn = channel_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateStreamKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateStreamKey_request of this CreateStreamKeyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this CreateStreamKeyRequest.

        ARN of the channel for which to create the stream key.

        :return: The channel_arn of this CreateStreamKeyRequest.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this CreateStreamKeyRequest.

        ARN of the channel for which to create the stream key.

        :param channel_arn: The channel_arn of this CreateStreamKeyRequest.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")
        if channel_arn is not None and len(channel_arn) > 128:
            raise ValueError("Invalid value for `channel_arn`, length must be less than or equal to `128`")
        if channel_arn is not None and len(channel_arn) < 1:
            raise ValueError("Invalid value for `channel_arn`, length must be greater than or equal to `1`")
        if channel_arn is not None and not re.search(r'^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$', channel_arn):
            raise ValueError("Invalid value for `channel_arn`, must be a follow pattern or equal to `/^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$/`")

        self._channel_arn = channel_arn

    @property
    def tags(self):
        """Gets the tags of this CreateStreamKeyRequest.

        Array of 1-50 maps, each of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a> for more information, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS has no service-specific constraints beyond what is documented there.

        :return: The tags of this CreateStreamKeyRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateStreamKeyRequest.

        Array of 1-50 maps, each of the form <code>string:string (key:value)</code>. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a> for more information, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS has no service-specific constraints beyond what is documented there.

        :param tags: The tags of this CreateStreamKeyRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
