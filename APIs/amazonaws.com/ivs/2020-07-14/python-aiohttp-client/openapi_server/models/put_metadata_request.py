# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PutMetadataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, metadata: str=None):
        """PutMetadataRequest - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this PutMetadataRequest.
        :param metadata: The metadata of this PutMetadataRequest.
        """
        self.openapi_types = {
            'channel_arn': str,
            'metadata': str
        }

        self.attribute_map = {
            'channel_arn': 'channelArn',
            'metadata': 'metadata'
        }

        self._channel_arn = channel_arn
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMetadataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMetadata_request of this PutMetadataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this PutMetadataRequest.

        ARN of the channel into which metadata is inserted. This channel must have an active stream.

        :return: The channel_arn of this PutMetadataRequest.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this PutMetadataRequest.

        ARN of the channel into which metadata is inserted. This channel must have an active stream.

        :param channel_arn: The channel_arn of this PutMetadataRequest.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")
        if channel_arn is not None and len(channel_arn) > 128:
            raise ValueError("Invalid value for `channel_arn`, length must be less than or equal to `128`")
        if channel_arn is not None and len(channel_arn) < 1:
            raise ValueError("Invalid value for `channel_arn`, length must be greater than or equal to `1`")
        if channel_arn is not None and not re.search(r'^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$', channel_arn):
            raise ValueError("Invalid value for `channel_arn`, must be a follow pattern or equal to `/^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$/`")

        self._channel_arn = channel_arn

    @property
    def metadata(self):
        """Gets the metadata of this PutMetadataRequest.

        Metadata to insert into the stream. Maximum: 1 KB per request.

        :return: The metadata of this PutMetadataRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PutMetadataRequest.

        Metadata to insert into the stream. Maximum: 1 KB per request.

        :param metadata: The metadata of this PutMetadataRequest.
        :type metadata: str
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")
        if metadata is not None and len(metadata) < 1:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `1`")

        self._metadata = metadata
