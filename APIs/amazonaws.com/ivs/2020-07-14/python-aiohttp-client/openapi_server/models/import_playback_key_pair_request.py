# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ImportPlaybackKeyPairRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, public_key_material: str=None, tags: Dict[str, str]=None):
        """ImportPlaybackKeyPairRequest - a model defined in OpenAPI

        :param name: The name of this ImportPlaybackKeyPairRequest.
        :param public_key_material: The public_key_material of this ImportPlaybackKeyPairRequest.
        :param tags: The tags of this ImportPlaybackKeyPairRequest.
        """
        self.openapi_types = {
            'name': str,
            'public_key_material': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'name': 'name',
            'public_key_material': 'publicKeyMaterial',
            'tags': 'tags'
        }

        self._name = name
        self._public_key_material = public_key_material
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportPlaybackKeyPairRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportPlaybackKeyPair_request of this ImportPlaybackKeyPairRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ImportPlaybackKeyPairRequest.

        Playback-key-pair name. The value does not need to be unique.

        :return: The name of this ImportPlaybackKeyPairRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ImportPlaybackKeyPairRequest.

        Playback-key-pair name. The value does not need to be unique.

        :param name: The name of this ImportPlaybackKeyPairRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'^[a-zA-Z0-9-_]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]*$/`")

        self._name = name

    @property
    def public_key_material(self):
        """Gets the public_key_material of this ImportPlaybackKeyPairRequest.

        The public portion of a customer-generated key pair.

        :return: The public_key_material of this ImportPlaybackKeyPairRequest.
        :rtype: str
        """
        return self._public_key_material

    @public_key_material.setter
    def public_key_material(self, public_key_material):
        """Sets the public_key_material of this ImportPlaybackKeyPairRequest.

        The public portion of a customer-generated key pair.

        :param public_key_material: The public_key_material of this ImportPlaybackKeyPairRequest.
        :type public_key_material: str
        """
        if public_key_material is None:
            raise ValueError("Invalid value for `public_key_material`, must not be `None`")

        self._public_key_material = public_key_material

    @property
    def tags(self):
        """Gets the tags of this ImportPlaybackKeyPairRequest.

        Any tags provided with the request are added to the playback key pair tags. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a> for more information, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS has no service-specific constraints beyond what is documented there.

        :return: The tags of this ImportPlaybackKeyPairRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ImportPlaybackKeyPairRequest.

        Any tags provided with the request are added to the playback key pair tags. See <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services Resources</a> for more information, including restrictions that apply to tags and \"Tag naming limits and requirements\"; Amazon IVS has no service-specific constraints beyond what is documented there.

        :param tags: The tags of this ImportPlaybackKeyPairRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
