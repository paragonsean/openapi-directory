# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartViewerSessionRevocationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_arn: str=None, viewer_id: str=None, viewer_session_versions_less_than_or_equal_to: int=None):
        """StartViewerSessionRevocationRequest - a model defined in OpenAPI

        :param channel_arn: The channel_arn of this StartViewerSessionRevocationRequest.
        :param viewer_id: The viewer_id of this StartViewerSessionRevocationRequest.
        :param viewer_session_versions_less_than_or_equal_to: The viewer_session_versions_less_than_or_equal_to of this StartViewerSessionRevocationRequest.
        """
        self.openapi_types = {
            'channel_arn': str,
            'viewer_id': str,
            'viewer_session_versions_less_than_or_equal_to': int
        }

        self.attribute_map = {
            'channel_arn': 'channelArn',
            'viewer_id': 'viewerId',
            'viewer_session_versions_less_than_or_equal_to': 'viewerSessionVersionsLessThanOrEqualTo'
        }

        self._channel_arn = channel_arn
        self._viewer_id = viewer_id
        self._viewer_session_versions_less_than_or_equal_to = viewer_session_versions_less_than_or_equal_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartViewerSessionRevocationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartViewerSessionRevocation_request of this StartViewerSessionRevocationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_arn(self):
        """Gets the channel_arn of this StartViewerSessionRevocationRequest.

        The ARN of the channel associated with the viewer session to revoke.

        :return: The channel_arn of this StartViewerSessionRevocationRequest.
        :rtype: str
        """
        return self._channel_arn

    @channel_arn.setter
    def channel_arn(self, channel_arn):
        """Sets the channel_arn of this StartViewerSessionRevocationRequest.

        The ARN of the channel associated with the viewer session to revoke.

        :param channel_arn: The channel_arn of this StartViewerSessionRevocationRequest.
        :type channel_arn: str
        """
        if channel_arn is None:
            raise ValueError("Invalid value for `channel_arn`, must not be `None`")
        if channel_arn is not None and len(channel_arn) > 128:
            raise ValueError("Invalid value for `channel_arn`, length must be less than or equal to `128`")
        if channel_arn is not None and len(channel_arn) < 1:
            raise ValueError("Invalid value for `channel_arn`, length must be greater than or equal to `1`")
        if channel_arn is not None and not re.search(r'^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$', channel_arn):
            raise ValueError("Invalid value for `channel_arn`, must be a follow pattern or equal to `/^arn:aws:[is]vs:[a-z0-9-]+:[0-9]+:channel\/[a-zA-Z0-9-]+$/`")

        self._channel_arn = channel_arn

    @property
    def viewer_id(self):
        """Gets the viewer_id of this StartViewerSessionRevocationRequest.

        The ID of the viewer associated with the viewer session to revoke. Do not use this field for personally identifying, confidential, or sensitive information.

        :return: The viewer_id of this StartViewerSessionRevocationRequest.
        :rtype: str
        """
        return self._viewer_id

    @viewer_id.setter
    def viewer_id(self, viewer_id):
        """Sets the viewer_id of this StartViewerSessionRevocationRequest.

        The ID of the viewer associated with the viewer session to revoke. Do not use this field for personally identifying, confidential, or sensitive information.

        :param viewer_id: The viewer_id of this StartViewerSessionRevocationRequest.
        :type viewer_id: str
        """
        if viewer_id is None:
            raise ValueError("Invalid value for `viewer_id`, must not be `None`")
        if viewer_id is not None and len(viewer_id) > 40:
            raise ValueError("Invalid value for `viewer_id`, length must be less than or equal to `40`")
        if viewer_id is not None and len(viewer_id) < 1:
            raise ValueError("Invalid value for `viewer_id`, length must be greater than or equal to `1`")

        self._viewer_id = viewer_id

    @property
    def viewer_session_versions_less_than_or_equal_to(self):
        """Gets the viewer_session_versions_less_than_or_equal_to of this StartViewerSessionRevocationRequest.

        An optional filter on which versions of the viewer session to revoke. All versions less than or equal to the specified version will be revoked. Default: 0.

        :return: The viewer_session_versions_less_than_or_equal_to of this StartViewerSessionRevocationRequest.
        :rtype: int
        """
        return self._viewer_session_versions_less_than_or_equal_to

    @viewer_session_versions_less_than_or_equal_to.setter
    def viewer_session_versions_less_than_or_equal_to(self, viewer_session_versions_less_than_or_equal_to):
        """Sets the viewer_session_versions_less_than_or_equal_to of this StartViewerSessionRevocationRequest.

        An optional filter on which versions of the viewer session to revoke. All versions less than or equal to the specified version will be revoked. Default: 0.

        :param viewer_session_versions_less_than_or_equal_to: The viewer_session_versions_less_than_or_equal_to of this StartViewerSessionRevocationRequest.
        :type viewer_session_versions_less_than_or_equal_to: int
        """
        if viewer_session_versions_less_than_or_equal_to is not None and viewer_session_versions_less_than_or_equal_to < 0:
            raise ValueError("Invalid value for `viewer_session_versions_less_than_or_equal_to`, must be a value greater than or equal to `0`")

        self._viewer_session_versions_less_than_or_equal_to = viewer_session_versions_less_than_or_equal_to
