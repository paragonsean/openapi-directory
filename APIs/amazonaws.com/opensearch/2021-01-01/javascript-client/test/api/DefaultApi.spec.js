/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonOpenSearchService);
  }
}(this, function(expect, AmazonOpenSearchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonOpenSearchService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('acceptInboundConnection', function() {
      it('should call acceptInboundConnection successfully', function(done) {
        //uncomment below and update the code to test acceptInboundConnection
        //instance.acceptInboundConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTags', function() {
      it('should call addTags successfully', function(done) {
        //uncomment below and update the code to test addTags
        //instance.addTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associatePackage', function() {
      it('should call associatePackage successfully', function(done) {
        //uncomment below and update the code to test associatePackage
        //instance.associatePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizeVpcEndpointAccess', function() {
      it('should call authorizeVpcEndpointAccess successfully', function(done) {
        //uncomment below and update the code to test authorizeVpcEndpointAccess
        //instance.authorizeVpcEndpointAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelServiceSoftwareUpdate', function() {
      it('should call cancelServiceSoftwareUpdate successfully', function(done) {
        //uncomment below and update the code to test cancelServiceSoftwareUpdate
        //instance.cancelServiceSoftwareUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDomain', function() {
      it('should call createDomain successfully', function(done) {
        //uncomment below and update the code to test createDomain
        //instance.createDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOutboundConnection', function() {
      it('should call createOutboundConnection successfully', function(done) {
        //uncomment below and update the code to test createOutboundConnection
        //instance.createOutboundConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPackage', function() {
      it('should call createPackage successfully', function(done) {
        //uncomment below and update the code to test createPackage
        //instance.createPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcEndpoint', function() {
      it('should call createVpcEndpoint successfully', function(done) {
        //uncomment below and update the code to test createVpcEndpoint
        //instance.createVpcEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDomain', function() {
      it('should call deleteDomain successfully', function(done) {
        //uncomment below and update the code to test deleteDomain
        //instance.deleteDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteInboundConnection', function() {
      it('should call deleteInboundConnection successfully', function(done) {
        //uncomment below and update the code to test deleteInboundConnection
        //instance.deleteInboundConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteOutboundConnection', function() {
      it('should call deleteOutboundConnection successfully', function(done) {
        //uncomment below and update the code to test deleteOutboundConnection
        //instance.deleteOutboundConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePackage', function() {
      it('should call deletePackage successfully', function(done) {
        //uncomment below and update the code to test deletePackage
        //instance.deletePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcEndpoint', function() {
      it('should call deleteVpcEndpoint successfully', function(done) {
        //uncomment below and update the code to test deleteVpcEndpoint
        //instance.deleteVpcEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomain', function() {
      it('should call describeDomain successfully', function(done) {
        //uncomment below and update the code to test describeDomain
        //instance.describeDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainAutoTunes', function() {
      it('should call describeDomainAutoTunes successfully', function(done) {
        //uncomment below and update the code to test describeDomainAutoTunes
        //instance.describeDomainAutoTunes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainChangeProgress', function() {
      it('should call describeDomainChangeProgress successfully', function(done) {
        //uncomment below and update the code to test describeDomainChangeProgress
        //instance.describeDomainChangeProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainConfig', function() {
      it('should call describeDomainConfig successfully', function(done) {
        //uncomment below and update the code to test describeDomainConfig
        //instance.describeDomainConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainHealth', function() {
      it('should call describeDomainHealth successfully', function(done) {
        //uncomment below and update the code to test describeDomainHealth
        //instance.describeDomainHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomainNodes', function() {
      it('should call describeDomainNodes successfully', function(done) {
        //uncomment below and update the code to test describeDomainNodes
        //instance.describeDomainNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDomains', function() {
      it('should call describeDomains successfully', function(done) {
        //uncomment below and update the code to test describeDomains
        //instance.describeDomains(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDryRunProgress', function() {
      it('should call describeDryRunProgress successfully', function(done) {
        //uncomment below and update the code to test describeDryRunProgress
        //instance.describeDryRunProgress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInboundConnections', function() {
      it('should call describeInboundConnections successfully', function(done) {
        //uncomment below and update the code to test describeInboundConnections
        //instance.describeInboundConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeInstanceTypeLimits', function() {
      it('should call describeInstanceTypeLimits successfully', function(done) {
        //uncomment below and update the code to test describeInstanceTypeLimits
        //instance.describeInstanceTypeLimits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeOutboundConnections', function() {
      it('should call describeOutboundConnections successfully', function(done) {
        //uncomment below and update the code to test describeOutboundConnections
        //instance.describeOutboundConnections(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describePackages', function() {
      it('should call describePackages successfully', function(done) {
        //uncomment below and update the code to test describePackages
        //instance.describePackages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservedInstanceOfferings', function() {
      it('should call describeReservedInstanceOfferings successfully', function(done) {
        //uncomment below and update the code to test describeReservedInstanceOfferings
        //instance.describeReservedInstanceOfferings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReservedInstances', function() {
      it('should call describeReservedInstances successfully', function(done) {
        //uncomment below and update the code to test describeReservedInstances
        //instance.describeReservedInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVpcEndpoints', function() {
      it('should call describeVpcEndpoints successfully', function(done) {
        //uncomment below and update the code to test describeVpcEndpoints
        //instance.describeVpcEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('dissociatePackage', function() {
      it('should call dissociatePackage successfully', function(done) {
        //uncomment below and update the code to test dissociatePackage
        //instance.dissociatePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompatibleVersions', function() {
      it('should call getCompatibleVersions successfully', function(done) {
        //uncomment below and update the code to test getCompatibleVersions
        //instance.getCompatibleVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPackageVersionHistory', function() {
      it('should call getPackageVersionHistory successfully', function(done) {
        //uncomment below and update the code to test getPackageVersionHistory
        //instance.getPackageVersionHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUpgradeHistory', function() {
      it('should call getUpgradeHistory successfully', function(done) {
        //uncomment below and update the code to test getUpgradeHistory
        //instance.getUpgradeHistory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUpgradeStatus', function() {
      it('should call getUpgradeStatus successfully', function(done) {
        //uncomment below and update the code to test getUpgradeStatus
        //instance.getUpgradeStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomainNames', function() {
      it('should call listDomainNames successfully', function(done) {
        //uncomment below and update the code to test listDomainNames
        //instance.listDomainNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDomainsForPackage', function() {
      it('should call listDomainsForPackage successfully', function(done) {
        //uncomment below and update the code to test listDomainsForPackage
        //instance.listDomainsForPackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listInstanceTypeDetails', function() {
      it('should call listInstanceTypeDetails successfully', function(done) {
        //uncomment below and update the code to test listInstanceTypeDetails
        //instance.listInstanceTypeDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPackagesForDomain', function() {
      it('should call listPackagesForDomain successfully', function(done) {
        //uncomment below and update the code to test listPackagesForDomain
        //instance.listPackagesForDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listScheduledActions', function() {
      it('should call listScheduledActions successfully', function(done) {
        //uncomment below and update the code to test listScheduledActions
        //instance.listScheduledActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTags', function() {
      it('should call listTags successfully', function(done) {
        //uncomment below and update the code to test listTags
        //instance.listTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVersions', function() {
      it('should call listVersions successfully', function(done) {
        //uncomment below and update the code to test listVersions
        //instance.listVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcEndpointAccess', function() {
      it('should call listVpcEndpointAccess successfully', function(done) {
        //uncomment below and update the code to test listVpcEndpointAccess
        //instance.listVpcEndpointAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcEndpoints', function() {
      it('should call listVpcEndpoints successfully', function(done) {
        //uncomment below and update the code to test listVpcEndpoints
        //instance.listVpcEndpoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVpcEndpointsForDomain', function() {
      it('should call listVpcEndpointsForDomain successfully', function(done) {
        //uncomment below and update the code to test listVpcEndpointsForDomain
        //instance.listVpcEndpointsForDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('purchaseReservedInstanceOffering', function() {
      it('should call purchaseReservedInstanceOffering successfully', function(done) {
        //uncomment below and update the code to test purchaseReservedInstanceOffering
        //instance.purchaseReservedInstanceOffering(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rejectInboundConnection', function() {
      it('should call rejectInboundConnection successfully', function(done) {
        //uncomment below and update the code to test rejectInboundConnection
        //instance.rejectInboundConnection(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTags', function() {
      it('should call removeTags successfully', function(done) {
        //uncomment below and update the code to test removeTags
        //instance.removeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeVpcEndpointAccess', function() {
      it('should call revokeVpcEndpointAccess successfully', function(done) {
        //uncomment below and update the code to test revokeVpcEndpointAccess
        //instance.revokeVpcEndpointAccess(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startServiceSoftwareUpdate', function() {
      it('should call startServiceSoftwareUpdate successfully', function(done) {
        //uncomment below and update the code to test startServiceSoftwareUpdate
        //instance.startServiceSoftwareUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDomainConfig', function() {
      it('should call updateDomainConfig successfully', function(done) {
        //uncomment below and update the code to test updateDomainConfig
        //instance.updateDomainConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePackage', function() {
      it('should call updatePackage successfully', function(done) {
        //uncomment below and update the code to test updatePackage
        //instance.updatePackage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateScheduledAction', function() {
      it('should call updateScheduledAction successfully', function(done) {
        //uncomment below and update the code to test updateScheduledAction
        //instance.updateScheduledAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVpcEndpoint', function() {
      it('should call updateVpcEndpoint successfully', function(done) {
        //uncomment below and update the code to test updateVpcEndpoint
        //instance.updateVpcEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgradeDomain', function() {
      it('should call upgradeDomain successfully', function(done) {
        //uncomment below and update the code to test upgradeDomain
        //instance.upgradeDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
