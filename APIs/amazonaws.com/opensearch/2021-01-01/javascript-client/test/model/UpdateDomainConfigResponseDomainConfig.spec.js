/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonOpenSearchService);
  }
}(this, function(expect, AmazonOpenSearchService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateDomainConfigResponseDomainConfig', function() {
    it('should create an instance of UpdateDomainConfigResponseDomainConfig', function() {
      // uncomment below and update the code to test UpdateDomainConfigResponseDomainConfig
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be.a(AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig);
    });

    it('should have the property engineVersion (base name: "EngineVersion")', function() {
      // uncomment below and update the code to test the property engineVersion
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property clusterConfig (base name: "ClusterConfig")', function() {
      // uncomment below and update the code to test the property clusterConfig
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property eBSOptions (base name: "EBSOptions")', function() {
      // uncomment below and update the code to test the property eBSOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property accessPolicies (base name: "AccessPolicies")', function() {
      // uncomment below and update the code to test the property accessPolicies
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property snapshotOptions (base name: "SnapshotOptions")', function() {
      // uncomment below and update the code to test the property snapshotOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property vPCOptions (base name: "VPCOptions")', function() {
      // uncomment below and update the code to test the property vPCOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property cognitoOptions (base name: "CognitoOptions")', function() {
      // uncomment below and update the code to test the property cognitoOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property encryptionAtRestOptions (base name: "EncryptionAtRestOptions")', function() {
      // uncomment below and update the code to test the property encryptionAtRestOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property nodeToNodeEncryptionOptions (base name: "NodeToNodeEncryptionOptions")', function() {
      // uncomment below and update the code to test the property nodeToNodeEncryptionOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property advancedOptions (base name: "AdvancedOptions")', function() {
      // uncomment below and update the code to test the property advancedOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property logPublishingOptions (base name: "LogPublishingOptions")', function() {
      // uncomment below and update the code to test the property logPublishingOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property domainEndpointOptions (base name: "DomainEndpointOptions")', function() {
      // uncomment below and update the code to test the property domainEndpointOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property advancedSecurityOptions (base name: "AdvancedSecurityOptions")', function() {
      // uncomment below and update the code to test the property advancedSecurityOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property autoTuneOptions (base name: "AutoTuneOptions")', function() {
      // uncomment below and update the code to test the property autoTuneOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property changeProgressDetails (base name: "ChangeProgressDetails")', function() {
      // uncomment below and update the code to test the property changeProgressDetails
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property offPeakWindowOptions (base name: "OffPeakWindowOptions")', function() {
      // uncomment below and update the code to test the property offPeakWindowOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

    it('should have the property softwareUpdateOptions (base name: "SoftwareUpdateOptions")', function() {
      // uncomment below and update the code to test the property softwareUpdateOptions
      //var instance = new AmazonOpenSearchService.UpdateDomainConfigResponseDomainConfig();
      //expect(instance).to.be();
    });

  });

}));
