/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcceptInboundConnectionResponse from '../model/AcceptInboundConnectionResponse';
import AddTagsRequest from '../model/AddTagsRequest';
import AssociatePackageResponse from '../model/AssociatePackageResponse';
import AuthorizeVpcEndpointAccessRequest from '../model/AuthorizeVpcEndpointAccessRequest';
import AuthorizeVpcEndpointAccessResponse from '../model/AuthorizeVpcEndpointAccessResponse';
import CancelServiceSoftwareUpdateRequest from '../model/CancelServiceSoftwareUpdateRequest';
import CancelServiceSoftwareUpdateResponse from '../model/CancelServiceSoftwareUpdateResponse';
import CreateDomainRequest from '../model/CreateDomainRequest';
import CreateDomainResponse from '../model/CreateDomainResponse';
import CreateOutboundConnectionRequest from '../model/CreateOutboundConnectionRequest';
import CreateOutboundConnectionResponse from '../model/CreateOutboundConnectionResponse';
import CreatePackageRequest from '../model/CreatePackageRequest';
import CreatePackageResponse from '../model/CreatePackageResponse';
import CreateVpcEndpointRequest from '../model/CreateVpcEndpointRequest';
import CreateVpcEndpointResponse from '../model/CreateVpcEndpointResponse';
import DeleteDomainResponse from '../model/DeleteDomainResponse';
import DeleteInboundConnectionResponse from '../model/DeleteInboundConnectionResponse';
import DeleteOutboundConnectionResponse from '../model/DeleteOutboundConnectionResponse';
import DeletePackageResponse from '../model/DeletePackageResponse';
import DeleteVpcEndpointResponse from '../model/DeleteVpcEndpointResponse';
import DescribeDomainAutoTunesRequest from '../model/DescribeDomainAutoTunesRequest';
import DescribeDomainAutoTunesResponse from '../model/DescribeDomainAutoTunesResponse';
import DescribeDomainChangeProgressResponse from '../model/DescribeDomainChangeProgressResponse';
import DescribeDomainConfigResponse from '../model/DescribeDomainConfigResponse';
import DescribeDomainHealthResponse from '../model/DescribeDomainHealthResponse';
import DescribeDomainNodesResponse from '../model/DescribeDomainNodesResponse';
import DescribeDomainResponse from '../model/DescribeDomainResponse';
import DescribeDomainsRequest from '../model/DescribeDomainsRequest';
import DescribeDomainsResponse from '../model/DescribeDomainsResponse';
import DescribeDryRunProgressResponse from '../model/DescribeDryRunProgressResponse';
import DescribeInboundConnectionsRequest from '../model/DescribeInboundConnectionsRequest';
import DescribeInboundConnectionsResponse from '../model/DescribeInboundConnectionsResponse';
import DescribeInstanceTypeLimitsResponse from '../model/DescribeInstanceTypeLimitsResponse';
import DescribeOutboundConnectionsRequest from '../model/DescribeOutboundConnectionsRequest';
import DescribeOutboundConnectionsResponse from '../model/DescribeOutboundConnectionsResponse';
import DescribePackagesRequest from '../model/DescribePackagesRequest';
import DescribePackagesResponse from '../model/DescribePackagesResponse';
import DescribeReservedInstanceOfferingsResponse from '../model/DescribeReservedInstanceOfferingsResponse';
import DescribeReservedInstancesResponse from '../model/DescribeReservedInstancesResponse';
import DescribeVpcEndpointsRequest from '../model/DescribeVpcEndpointsRequest';
import DescribeVpcEndpointsResponse from '../model/DescribeVpcEndpointsResponse';
import DissociatePackageResponse from '../model/DissociatePackageResponse';
import GetCompatibleVersionsResponse from '../model/GetCompatibleVersionsResponse';
import GetPackageVersionHistoryResponse from '../model/GetPackageVersionHistoryResponse';
import GetUpgradeHistoryResponse from '../model/GetUpgradeHistoryResponse';
import GetUpgradeStatusResponse from '../model/GetUpgradeStatusResponse';
import ListDomainNamesResponse from '../model/ListDomainNamesResponse';
import ListDomainsForPackageResponse from '../model/ListDomainsForPackageResponse';
import ListInstanceTypeDetailsResponse from '../model/ListInstanceTypeDetailsResponse';
import ListPackagesForDomainResponse from '../model/ListPackagesForDomainResponse';
import ListScheduledActionsResponse from '../model/ListScheduledActionsResponse';
import ListTagsResponse from '../model/ListTagsResponse';
import ListVersionsResponse from '../model/ListVersionsResponse';
import ListVpcEndpointAccessResponse from '../model/ListVpcEndpointAccessResponse';
import ListVpcEndpointsForDomainResponse from '../model/ListVpcEndpointsForDomainResponse';
import ListVpcEndpointsResponse from '../model/ListVpcEndpointsResponse';
import PurchaseReservedInstanceOfferingRequest from '../model/PurchaseReservedInstanceOfferingRequest';
import PurchaseReservedInstanceOfferingResponse from '../model/PurchaseReservedInstanceOfferingResponse';
import RejectInboundConnectionResponse from '../model/RejectInboundConnectionResponse';
import RemoveTagsRequest from '../model/RemoveTagsRequest';
import RevokeVpcEndpointAccessRequest from '../model/RevokeVpcEndpointAccessRequest';
import StartServiceSoftwareUpdateRequest from '../model/StartServiceSoftwareUpdateRequest';
import StartServiceSoftwareUpdateResponse from '../model/StartServiceSoftwareUpdateResponse';
import UpdateDomainConfigRequest from '../model/UpdateDomainConfigRequest';
import UpdateDomainConfigResponse from '../model/UpdateDomainConfigResponse';
import UpdatePackageRequest from '../model/UpdatePackageRequest';
import UpdatePackageResponse from '../model/UpdatePackageResponse';
import UpdateScheduledActionRequest from '../model/UpdateScheduledActionRequest';
import UpdateScheduledActionResponse from '../model/UpdateScheduledActionResponse';
import UpdateVpcEndpointRequest from '../model/UpdateVpcEndpointRequest';
import UpdateVpcEndpointResponse from '../model/UpdateVpcEndpointResponse';
import UpgradeDomainRequest from '../model/UpgradeDomainRequest';
import UpgradeDomainResponse from '../model/UpgradeDomainResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-01-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptInboundConnection operation.
     * @callback module:api/DefaultApi~acceptInboundConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcceptInboundConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the destination Amazon OpenSearch Service domain owner to accept an inbound cross-cluster search connection request. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html\">Cross-cluster search for Amazon OpenSearch Service</a>.
     * @param {String} connectionId The ID of the inbound connection to accept.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acceptInboundConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcceptInboundConnectionResponse}
     */
    acceptInboundConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling acceptInboundConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AcceptInboundConnectionResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/accept', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTags operation.
     * @callback module:api/DefaultApi~addTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches tags to an existing Amazon OpenSearch Service domain. Tags are a set of case-sensitive key-value pairs. A domain can have up to 10 tags. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-awsresourcetagging.html\">Tagging Amazon OpenSearch Service domains</a>.
     * @param {module:model/AddTagsRequest} addTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTags(addTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = addTagsRequest;
      // verify the required parameter 'addTagsRequest' is set
      if (addTagsRequest === undefined || addTagsRequest === null) {
        throw new Error("Missing the required parameter 'addTagsRequest' when calling addTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2021-01-01/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associatePackage operation.
     * @callback module:api/DefaultApi~associatePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssociatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a package with an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {String} packageID Internal ID of the package to associate with a domain. Use <code>DescribePackages</code> to find this value. 
     * @param {String} domainName Name of the domain to associate the package with.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associatePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssociatePackageResponse}
     */
    associatePackage(packageID, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling associatePackage");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling associatePackage");
      }

      let pathParams = {
        'PackageID': packageID,
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssociatePackageResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/associate/{PackageID}/{DomainName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the authorizeVpcEndpointAccess operation.
     * @callback module:api/DefaultApi~authorizeVpcEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthorizeVpcEndpointAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides access to an Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
     * @param {String} domainName The name of the OpenSearch Service domain to provide access to.
     * @param {module:model/AuthorizeVpcEndpointAccessRequest} authorizeVpcEndpointAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~authorizeVpcEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthorizeVpcEndpointAccessResponse}
     */
    authorizeVpcEndpointAccess(domainName, authorizeVpcEndpointAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = authorizeVpcEndpointAccessRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling authorizeVpcEndpointAccess");
      }
      // verify the required parameter 'authorizeVpcEndpointAccessRequest' is set
      if (authorizeVpcEndpointAccessRequest === undefined || authorizeVpcEndpointAccessRequest === null) {
        throw new Error("Missing the required parameter 'authorizeVpcEndpointAccessRequest' when calling authorizeVpcEndpointAccess");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthorizeVpcEndpointAccessResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/authorizeVpcEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelServiceSoftwareUpdate operation.
     * @callback module:api/DefaultApi~cancelServiceSoftwareUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelServiceSoftwareUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a scheduled service software update for an Amazon OpenSearch Service domain. You can only perform this operation before the <code>AutomatedUpdateDate</code> and when the domain's <code>UpdateStatus</code> is <code>PENDING_UPDATE</code>. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html\">Service software updates in Amazon OpenSearch Service</a>.
     * @param {module:model/CancelServiceSoftwareUpdateRequest} cancelServiceSoftwareUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelServiceSoftwareUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelServiceSoftwareUpdateResponse}
     */
    cancelServiceSoftwareUpdate(cancelServiceSoftwareUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelServiceSoftwareUpdateRequest;
      // verify the required parameter 'cancelServiceSoftwareUpdateRequest' is set
      if (cancelServiceSoftwareUpdateRequest === undefined || cancelServiceSoftwareUpdateRequest === null) {
        throw new Error("Missing the required parameter 'cancelServiceSoftwareUpdateRequest' when calling cancelServiceSoftwareUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CancelServiceSoftwareUpdateResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/serviceSoftwareUpdate/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDomain operation.
     * @callback module:api/DefaultApi~createDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html\">Creating and managing Amazon OpenSearch Service domains</a>.
     * @param {module:model/CreateDomainRequest} createDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainResponse}
     */
    createDomain(createDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDomainRequest;
      // verify the required parameter 'createDomainRequest' is set
      if (createDomainRequest === undefined || createDomainRequest === null) {
        throw new Error("Missing the required parameter 'createDomainRequest' when calling createDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDomainResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOutboundConnection operation.
     * @callback module:api/DefaultApi~createOutboundConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateOutboundConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new cross-cluster search connection from a source Amazon OpenSearch Service domain to a destination domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html\">Cross-cluster search for Amazon OpenSearch Service</a>.
     * @param {module:model/CreateOutboundConnectionRequest} createOutboundConnectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createOutboundConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateOutboundConnectionResponse}
     */
    createOutboundConnection(createOutboundConnectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createOutboundConnectionRequest;
      // verify the required parameter 'createOutboundConnectionRequest' is set
      if (createOutboundConnectionRequest === undefined || createOutboundConnectionRequest === null) {
        throw new Error("Missing the required parameter 'createOutboundConnectionRequest' when calling createOutboundConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateOutboundConnectionResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/outboundConnection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPackage operation.
     * @callback module:api/DefaultApi~createPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a package for use with Amazon OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {module:model/CreatePackageRequest} createPackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePackageResponse}
     */
    createPackage(createPackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPackageRequest;
      // verify the required parameter 'createPackageRequest' is set
      if (createPackageRequest === undefined || createPackageRequest === null) {
        throw new Error("Missing the required parameter 'createPackageRequest' when calling createPackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePackageResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcEndpoint operation.
     * @callback module:api/DefaultApi~createVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Amazon OpenSearch Service-managed VPC endpoint.
     * @param {module:model/CreateVpcEndpointRequest} createVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcEndpointResponse}
     */
    createVpcEndpoint(createVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVpcEndpointRequest;
      // verify the required parameter 'createVpcEndpointRequest' is set
      if (createVpcEndpointRequest === undefined || createVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'createVpcEndpointRequest' when calling createVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVpcEndpointResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/vpcEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomain operation.
     * @callback module:api/DefaultApi~deleteDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon OpenSearch Service domain and all of its data. You can't recover a domain after you delete it.
     * @param {String} domainName The name of the domain you want to permanently delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteDomainResponse}
     */
    deleteDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteDomainResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInboundConnection operation.
     * @callback module:api/DefaultApi~deleteInboundConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteInboundConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the destination Amazon OpenSearch Service domain owner to delete an existing inbound cross-cluster search connection. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html\">Cross-cluster search for Amazon OpenSearch Service</a>.
     * @param {String} connectionId The ID of the inbound connection to permanently delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteInboundConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteInboundConnectionResponse}
     */
    deleteInboundConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling deleteInboundConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteInboundConnectionResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteOutboundConnection operation.
     * @callback module:api/DefaultApi~deleteOutboundConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteOutboundConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the source Amazon OpenSearch Service domain owner to delete an existing outbound cross-cluster search connection. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html\">Cross-cluster search for Amazon OpenSearch Service</a>.
     * @param {String} connectionId The ID of the outbound connection you want to permanently delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteOutboundConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteOutboundConnectionResponse}
     */
    deleteOutboundConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling deleteOutboundConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteOutboundConnectionResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/outboundConnection/{ConnectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePackage operation.
     * @callback module:api/DefaultApi~deletePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon OpenSearch Service package. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {String} packageID The internal ID of the package you want to delete. Use <code>DescribePackages</code> to find this value.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletePackageResponse}
     */
    deletePackage(packageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling deletePackage");
      }

      let pathParams = {
        'PackageID': packageID
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletePackageResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/{PackageID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcEndpoint operation.
     * @callback module:api/DefaultApi~deleteVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Amazon OpenSearch Service-managed interface VPC endpoint.
     * @param {String} vpcEndpointId The unique identifier of the endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVpcEndpointResponse}
     */
    deleteVpcEndpoint(vpcEndpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vpcEndpointId' is set
      if (vpcEndpointId === undefined || vpcEndpointId === null) {
        throw new Error("Missing the required parameter 'vpcEndpointId' when calling deleteVpcEndpoint");
      }

      let pathParams = {
        'VpcEndpointId': vpcEndpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteVpcEndpointResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/vpcEndpoints/{VpcEndpointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomain operation.
     * @callback module:api/DefaultApi~describeDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the domain configuration for the specified Amazon OpenSearch Service domain, including the domain ID, domain service endpoint, and domain ARN.
     * @param {String} domainName The name of the domain that you want information about.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainResponse}
     */
    describeDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDomainResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainAutoTunes operation.
     * @callback module:api/DefaultApi~describeDomainAutoTunesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainAutoTunesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of optimizations that Auto-Tune has made to an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html\">Auto-Tune for Amazon OpenSearch Service</a>.
     * @param {String} domainName Name of the domain that you want Auto-Tune details about.
     * @param {module:model/DescribeDomainAutoTunesRequest} describeDomainAutoTunesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeDomainAutoTunesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainAutoTunesResponse}
     */
    describeDomainAutoTunes(domainName, describeDomainAutoTunesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDomainAutoTunesRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainAutoTunes");
      }
      // verify the required parameter 'describeDomainAutoTunesRequest' is set
      if (describeDomainAutoTunesRequest === undefined || describeDomainAutoTunesRequest === null) {
        throw new Error("Missing the required parameter 'describeDomainAutoTunesRequest' when calling describeDomainAutoTunes");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDomainAutoTunesResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/autoTunes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainChangeProgress operation.
     * @callback module:api/DefaultApi~describeDomainChangeProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainChangeProgressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the current blue/green deployment happening on an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes.html\">Making configuration changes in Amazon OpenSearch Service</a>.
     * @param {String} domainName The name of the domain to get progress information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [changeid] The specific change ID for which you want to get progress information. If omitted, the request returns information about the most recent configuration change.
     * @param {module:api/DefaultApi~describeDomainChangeProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainChangeProgressResponse}
     */
    describeDomainChangeProgress(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainChangeProgress");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'changeid': opts['changeid']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDomainChangeProgressResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/progress', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainConfig operation.
     * @callback module:api/DefaultApi~describeDomainConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the configuration of an Amazon OpenSearch Service domain.
     * @param {String} domainName Name of the OpenSearch Service domain configuration that you want to describe.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainConfigResponse}
     */
    describeDomainConfig(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainConfig");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDomainConfigResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainHealth operation.
     * @callback module:api/DefaultApi~describeDomainHealthCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainHealthResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about domain and node health, the standby Availability Zone, number of nodes per Availability Zone, and shard count per node.
     * @param {String} domainName The name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainHealthCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainHealthResponse}
     */
    describeDomainHealth(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainHealth");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDomainHealthResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/health', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomainNodes operation.
     * @callback module:api/DefaultApi~describeDomainNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainNodesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about domain and nodes, including data nodes, master nodes, ultrawarm nodes, Availability Zone(s), standby nodes, node configurations, and node states.
     * @param {String} domainName The name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainNodesResponse}
     */
    describeDomainNodes(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDomainNodes");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDomainNodesResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDomains operation.
     * @callback module:api/DefaultApi~describeDomainsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDomainsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns domain configuration information about the specified Amazon OpenSearch Service domains.
     * @param {module:model/DescribeDomainsRequest} describeDomainsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDomainsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDomainsResponse}
     */
    describeDomains(describeDomainsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDomainsRequest;
      // verify the required parameter 'describeDomainsRequest' is set
      if (describeDomainsRequest === undefined || describeDomainsRequest === null) {
        throw new Error("Missing the required parameter 'describeDomainsRequest' when calling describeDomains");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDomainsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain-info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDryRunProgress operation.
     * @callback module:api/DefaultApi~describeDryRunProgressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDryRunProgressResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the progress of a pre-update dry run analysis on an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#dryrun\">Determining whether a change will cause a blue/green deployment</a>.
     * @param {String} domainName The name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dryRunId] The unique identifier of the dry run.
     * @param {Boolean} [loadDryRunConfig] Whether to include the configuration of the dry run in the response. The configuration specifies the updates that you're planning to make on the domain.
     * @param {module:api/DefaultApi~describeDryRunProgressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDryRunProgressResponse}
     */
    describeDryRunProgress(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling describeDryRunProgress");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'dryRunId': opts['dryRunId'],
        'loadDryRunConfig': opts['loadDryRunConfig']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDryRunProgressResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/dryRun', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInboundConnections operation.
     * @callback module:api/DefaultApi~describeInboundConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInboundConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the inbound cross-cluster search connections for a destination (remote) Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html\">Cross-cluster search for Amazon OpenSearch Service</a>.
     * @param {module:model/DescribeInboundConnectionsRequest} describeInboundConnectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeInboundConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInboundConnectionsResponse}
     */
    describeInboundConnections(describeInboundConnectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeInboundConnectionsRequest;
      // verify the required parameter 'describeInboundConnectionsRequest' is set
      if (describeInboundConnectionsRequest === undefined || describeInboundConnectionsRequest === null) {
        throw new Error("Missing the required parameter 'describeInboundConnectionsRequest' when calling describeInboundConnections");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeInboundConnectionsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/inboundConnection/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeInstanceTypeLimits operation.
     * @callback module:api/DefaultApi~describeInstanceTypeLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeInstanceTypeLimitsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the instance count, storage, and master node limits for a given OpenSearch or Elasticsearch version and instance type.
     * @param {module:model/String} instanceType The OpenSearch Service instance type for which you need limit information.
     * @param {String} engineVersion Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [domainName] The name of the domain. Only specify if you need the limits for an existing domain.
     * @param {module:api/DefaultApi~describeInstanceTypeLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeInstanceTypeLimitsResponse}
     */
    describeInstanceTypeLimits(instanceType, engineVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'instanceType' is set
      if (instanceType === undefined || instanceType === null) {
        throw new Error("Missing the required parameter 'instanceType' when calling describeInstanceTypeLimits");
      }
      // verify the required parameter 'engineVersion' is set
      if (engineVersion === undefined || engineVersion === null) {
        throw new Error("Missing the required parameter 'engineVersion' when calling describeInstanceTypeLimits");
      }

      let pathParams = {
        'InstanceType': instanceType,
        'EngineVersion': engineVersion
      };
      let queryParams = {
        'domainName': opts['domainName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeInstanceTypeLimitsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/instanceTypeLimits/{EngineVersion}/{InstanceType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeOutboundConnections operation.
     * @callback module:api/DefaultApi~describeOutboundConnectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeOutboundConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the outbound cross-cluster connections for a local (source) Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html\">Cross-cluster search for Amazon OpenSearch Service</a>.
     * @param {module:model/DescribeOutboundConnectionsRequest} describeOutboundConnectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeOutboundConnectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeOutboundConnectionsResponse}
     */
    describeOutboundConnections(describeOutboundConnectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeOutboundConnectionsRequest;
      // verify the required parameter 'describeOutboundConnectionsRequest' is set
      if (describeOutboundConnectionsRequest === undefined || describeOutboundConnectionsRequest === null) {
        throw new Error("Missing the required parameter 'describeOutboundConnectionsRequest' when calling describeOutboundConnections");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeOutboundConnectionsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/outboundConnection/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePackages operation.
     * @callback module:api/DefaultApi~describePackagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePackagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes all packages available to OpenSearch Service. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {module:model/DescribePackagesRequest} describePackagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describePackagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePackagesResponse}
     */
    describePackages(describePackagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePackagesRequest;
      // verify the required parameter 'describePackagesRequest' is set
      if (describePackagesRequest === undefined || describePackagesRequest === null) {
        throw new Error("Missing the required parameter 'describePackagesRequest' when calling describePackages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePackagesResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservedInstanceOfferings operation.
     * @callback module:api/DefaultApi~describeReservedInstanceOfferingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedInstanceOfferingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the available Amazon OpenSearch Service Reserved Instance offerings for a given Region. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ri.html\">Reserved Instances in Amazon OpenSearch Service</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [offeringId] The Reserved Instance identifier filter value. Use this parameter to show only the available instance types that match the specified reservation identifier.
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>DescribeReservedInstanceOfferings</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>DescribeReservedInstanceOfferings</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~describeReservedInstanceOfferingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedInstanceOfferingsResponse}
     */
    describeReservedInstanceOfferings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offeringId': opts['offeringId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReservedInstanceOfferingsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/reservedInstanceOfferings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReservedInstances operation.
     * @callback module:api/DefaultApi~describeReservedInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReservedInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the Amazon OpenSearch Service instances that you have reserved in a given Region. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/ri.html\">Reserved Instances in Amazon OpenSearch Service</a>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [reservationId] The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved OpenSearch instance ID.
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>DescribeReservedInstances</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>DescribeReservedInstances</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~describeReservedInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReservedInstancesResponse}
     */
    describeReservedInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'reservationId': opts['reservationId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeReservedInstancesResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/reservedInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVpcEndpoints operation.
     * @callback module:api/DefaultApi~describeVpcEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVpcEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes one or more Amazon OpenSearch Service-managed VPC endpoints.
     * @param {module:model/DescribeVpcEndpointsRequest} describeVpcEndpointsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeVpcEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVpcEndpointsResponse}
     */
    describeVpcEndpoints(describeVpcEndpointsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeVpcEndpointsRequest;
      // verify the required parameter 'describeVpcEndpointsRequest' is set
      if (describeVpcEndpointsRequest === undefined || describeVpcEndpointsRequest === null) {
        throw new Error("Missing the required parameter 'describeVpcEndpointsRequest' when calling describeVpcEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeVpcEndpointsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/vpcEndpoints/describe', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dissociatePackage operation.
     * @callback module:api/DefaultApi~dissociatePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DissociatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a package from the specified Amazon OpenSearch Service domain. The package can't be in use with any OpenSearch index for the dissociation to succeed. The package is still available in OpenSearch Service for association later. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {String} packageID Internal ID of the package to dissociate from the domain. Use <code>ListPackagesForDomain</code> to find this value.
     * @param {String} domainName Name of the domain to dissociate the package from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~dissociatePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DissociatePackageResponse}
     */
    dissociatePackage(packageID, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling dissociatePackage");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling dissociatePackage");
      }

      let pathParams = {
        'PackageID': packageID,
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DissociatePackageResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/dissociate/{PackageID}/{DomainName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompatibleVersions operation.
     * @callback module:api/DefaultApi~getCompatibleVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCompatibleVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a map of OpenSearch or Elasticsearch versions and the versions you can upgrade them to.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [domainName] The name of an existing domain. Provide this parameter to limit the results to a single domain.
     * @param {module:api/DefaultApi~getCompatibleVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCompatibleVersionsResponse}
     */
    getCompatibleVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'domainName': opts['domainName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCompatibleVersionsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/compatibleVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPackageVersionHistory operation.
     * @callback module:api/DefaultApi~getPackageVersionHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPackageVersionHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Amazon OpenSearch Service package versions, along with their creation time, commit message, and plugin properties (if the package is a zip plugin package). For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {String} packageID The unique identifier of the package.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>GetPackageVersionHistory</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>GetPackageVersionHistory</code> operations, which returns results in the next page. 
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getPackageVersionHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPackageVersionHistoryResponse}
     */
    getPackageVersionHistory(packageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling getPackageVersionHistory");
      }

      let pathParams = {
        'PackageID': packageID
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPackageVersionHistoryResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/{PackageID}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpgradeHistory operation.
     * @callback module:api/DefaultApi~getUpgradeHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUpgradeHistoryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the complete history of the last 10 upgrades performed on an Amazon OpenSearch Service domain.
     * @param {String} domainName The name of an existing domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>GetUpgradeHistory</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>GetUpgradeHistory</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getUpgradeHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUpgradeHistoryResponse}
     */
    getUpgradeHistory(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getUpgradeHistory");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUpgradeHistoryResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/upgradeDomain/{DomainName}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpgradeStatus operation.
     * @callback module:api/DefaultApi~getUpgradeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetUpgradeStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the most recent status of the last upgrade or upgrade eligibility check performed on an Amazon OpenSearch Service domain.
     * @param {String} domainName The domain of the domain to get upgrade status information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getUpgradeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetUpgradeStatusResponse}
     */
    getUpgradeStatus(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getUpgradeStatus");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetUpgradeStatusResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/upgradeDomain/{DomainName}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomainNames operation.
     * @callback module:api/DefaultApi~listDomainNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the names of all Amazon OpenSearch Service domains owned by the current user in the active Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:model/String} [engineType] Filters the output by domain engine type.
     * @param {module:api/DefaultApi~listDomainNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainNamesResponse}
     */
    listDomainNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'engineType': opts['engineType']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainNamesResponse;
      return this.apiClient.callApi(
        '/2021-01-01/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDomainsForPackage operation.
     * @callback module:api/DefaultApi~listDomainsForPackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDomainsForPackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all Amazon OpenSearch Service domains associated with a given package. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {String} packageID The unique identifier of the package for which to list associated domains.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>ListDomainsForPackage</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListDomainsForPackage</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDomainsForPackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDomainsForPackageResponse}
     */
    listDomainsForPackage(packageID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'packageID' is set
      if (packageID === undefined || packageID === null) {
        throw new Error("Missing the required parameter 'packageID' when calling listDomainsForPackage");
      }

      let pathParams = {
        'PackageID': packageID
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDomainsForPackageResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/{PackageID}/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstanceTypeDetails operation.
     * @callback module:api/DefaultApi~listInstanceTypeDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInstanceTypeDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all instance types and available features for a given OpenSearch or Elasticsearch version.
     * @param {String} engineVersion The version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [domainName] The name of the domain.
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>ListInstanceTypeDetails</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListInstanceTypeDetails</code> operations, which returns results in the next page.
     * @param {Boolean} [retrieveAZs] An optional parameter that specifies the Availability Zones for the domain.
     * @param {String} [instanceType] An optional parameter that lists information for a given instance type.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listInstanceTypeDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInstanceTypeDetailsResponse}
     */
    listInstanceTypeDetails(engineVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'engineVersion' is set
      if (engineVersion === undefined || engineVersion === null) {
        throw new Error("Missing the required parameter 'engineVersion' when calling listInstanceTypeDetails");
      }

      let pathParams = {
        'EngineVersion': engineVersion
      };
      let queryParams = {
        'domainName': opts['domainName'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'retrieveAZs': opts['retrieveAZs'],
        'instanceType': opts['instanceType'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInstanceTypeDetailsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/instanceTypeDetails/{EngineVersion}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPackagesForDomain operation.
     * @callback module:api/DefaultApi~listPackagesForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPackagesForDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all packages associated with an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {String} domainName The name of the domain for which you want to list associated packages.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>ListPackagesForDomain</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListPackagesForDomain</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listPackagesForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPackagesForDomainResponse}
     */
    listPackagesForDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listPackagesForDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPackagesForDomainResponse;
      return this.apiClient.callApi(
        '/2021-01-01/domain/{DomainName}/packages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listScheduledActions operation.
     * @callback module:api/DefaultApi~listScheduledActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListScheduledActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a list of configuration changes that are scheduled for a domain. These changes can be <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html\">service software updates</a> or <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html#auto-tune-types\">blue/green Auto-Tune enhancements</a>.
     * @param {String} domainName The name of the domain.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>ListScheduledActions</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListScheduledActions</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listScheduledActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListScheduledActionsResponse}
     */
    listScheduledActions(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listScheduledActions");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListScheduledActionsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/scheduledActions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTags operation.
     * @callback module:api/DefaultApi~listTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all resource tags for an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-awsresourcetagging.html\">Tagging Amazon OpenSearch Service domains</a>.
     * @param {String} arn Amazon Resource Name (ARN) for the domain to view tags for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsResponse}
     */
    listTags(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling listTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'arn': arn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/tags/#arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVersions operation.
     * @callback module:api/DefaultApi~listVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all versions of OpenSearch and Elasticsearch that Amazon OpenSearch Service supports.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.
     * @param {String} [nextToken] If your initial <code>ListVersions</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListVersions</code> operations, which returns results in the next page.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVersionsResponse}
     */
    listVersions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVersionsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpointAccess operation.
     * @callback module:api/DefaultApi~listVpcEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointAccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves information about each Amazon Web Services principal that is allowed to access a given Amazon OpenSearch Service domain through the use of an interface VPC endpoint.
     * @param {String} domainName The name of the OpenSearch Service domain to retrieve access information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] If your initial <code>ListVpcEndpointAccess</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListVpcEndpointAccess</code> operations, which returns results in the next page.
     * @param {module:api/DefaultApi~listVpcEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointAccessResponse}
     */
    listVpcEndpointAccess(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listVpcEndpointAccess");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointAccessResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/listVpcEndpointAccess', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpoints operation.
     * @callback module:api/DefaultApi~listVpcEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Amazon OpenSearch Service-managed VPC endpoints in the current Amazon Web Services account and Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] If your initial <code>ListVpcEndpoints</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListVpcEndpoints</code> operations, which returns results in the next page.
     * @param {module:api/DefaultApi~listVpcEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointsResponse}
     */
    listVpcEndpoints(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointsResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/vpcEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpointsForDomain operation.
     * @callback module:api/DefaultApi~listVpcEndpointsForDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointsForDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all Amazon OpenSearch Service-managed VPC endpoints associated with a particular domain.
     * @param {String} domainName The name of the domain to list associated VPC endpoints for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [nextToken] If your initial <code>ListEndpointsForDomain</code> operation returns a <code>nextToken</code>, you can include the returned <code>nextToken</code> in subsequent <code>ListEndpointsForDomain</code> operations, which returns results in the next page.
     * @param {module:api/DefaultApi~listVpcEndpointsForDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointsForDomainResponse}
     */
    listVpcEndpointsForDomain(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling listVpcEndpointsForDomain");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointsForDomainResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/vpcEndpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the purchaseReservedInstanceOffering operation.
     * @callback module:api/DefaultApi~purchaseReservedInstanceOfferingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PurchaseReservedInstanceOfferingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to purchase Amazon OpenSearch Service Reserved Instances.
     * @param {module:model/PurchaseReservedInstanceOfferingRequest} purchaseReservedInstanceOfferingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~purchaseReservedInstanceOfferingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PurchaseReservedInstanceOfferingResponse}
     */
    purchaseReservedInstanceOffering(purchaseReservedInstanceOfferingRequest, opts, callback) {
      opts = opts || {};
      let postBody = purchaseReservedInstanceOfferingRequest;
      // verify the required parameter 'purchaseReservedInstanceOfferingRequest' is set
      if (purchaseReservedInstanceOfferingRequest === undefined || purchaseReservedInstanceOfferingRequest === null) {
        throw new Error("Missing the required parameter 'purchaseReservedInstanceOfferingRequest' when calling purchaseReservedInstanceOffering");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PurchaseReservedInstanceOfferingResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/purchaseReservedInstanceOffering', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rejectInboundConnection operation.
     * @callback module:api/DefaultApi~rejectInboundConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RejectInboundConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the remote Amazon OpenSearch Service domain owner to reject an inbound cross-cluster connection request.
     * @param {String} connectionId The unique identifier of the inbound connection to reject.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~rejectInboundConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RejectInboundConnectionResponse}
     */
    rejectInboundConnection(connectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'connectionId' is set
      if (connectionId === undefined || connectionId === null) {
        throw new Error("Missing the required parameter 'connectionId' when calling rejectInboundConnection");
      }

      let pathParams = {
        'ConnectionId': connectionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RejectInboundConnectionResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/cc/inboundConnection/{ConnectionId}/reject', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTags operation.
     * @callback module:api/DefaultApi~removeTagsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified set of tags from an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains.html#managedomains-awsresorcetagging\"> Tagging Amazon OpenSearch Service domains</a>.
     * @param {module:model/RemoveTagsRequest} removeTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeTagsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTags(removeTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeTagsRequest;
      // verify the required parameter 'removeTagsRequest' is set
      if (removeTagsRequest === undefined || removeTagsRequest === null) {
        throw new Error("Missing the required parameter 'removeTagsRequest' when calling removeTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/2021-01-01/tags-removal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeVpcEndpointAccess operation.
     * @callback module:api/DefaultApi~revokeVpcEndpointAccessCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes access to an Amazon OpenSearch Service domain that was provided through an interface VPC endpoint.
     * @param {String} domainName The name of the OpenSearch Service domain.
     * @param {module:model/RevokeVpcEndpointAccessRequest} revokeVpcEndpointAccessRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeVpcEndpointAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    revokeVpcEndpointAccess(domainName, revokeVpcEndpointAccessRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokeVpcEndpointAccessRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling revokeVpcEndpointAccess");
      }
      // verify the required parameter 'revokeVpcEndpointAccessRequest' is set
      if (revokeVpcEndpointAccessRequest === undefined || revokeVpcEndpointAccessRequest === null) {
        throw new Error("Missing the required parameter 'revokeVpcEndpointAccessRequest' when calling revokeVpcEndpointAccess");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/revokeVpcEndpointAccess', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startServiceSoftwareUpdate operation.
     * @callback module:api/DefaultApi~startServiceSoftwareUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartServiceSoftwareUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedules a service software update for an Amazon OpenSearch Service domain. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html\">Service software updates in Amazon OpenSearch Service</a>.
     * @param {module:model/StartServiceSoftwareUpdateRequest} startServiceSoftwareUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startServiceSoftwareUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartServiceSoftwareUpdateResponse}
     */
    startServiceSoftwareUpdate(startServiceSoftwareUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = startServiceSoftwareUpdateRequest;
      // verify the required parameter 'startServiceSoftwareUpdateRequest' is set
      if (startServiceSoftwareUpdateRequest === undefined || startServiceSoftwareUpdateRequest === null) {
        throw new Error("Missing the required parameter 'startServiceSoftwareUpdateRequest' when calling startServiceSoftwareUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartServiceSoftwareUpdateResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/serviceSoftwareUpdate/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainConfig operation.
     * @callback module:api/DefaultApi~updateDomainConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the cluster configuration of the specified Amazon OpenSearch Service domain.sl
     * @param {String} domainName The name of the domain that you're updating.
     * @param {module:model/UpdateDomainConfigRequest} updateDomainConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainConfigResponse}
     */
    updateDomainConfig(domainName, updateDomainConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainConfigRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateDomainConfig");
      }
      // verify the required parameter 'updateDomainConfigRequest' is set
      if (updateDomainConfigRequest === undefined || updateDomainConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainConfigRequest' when calling updateDomainConfig");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainConfigResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/config', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePackage operation.
     * @callback module:api/DefaultApi~updatePackageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatePackageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a package for use with Amazon OpenSearch Service domains. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/custom-packages.html\">Custom packages for Amazon OpenSearch Service</a>.
     * @param {module:model/UpdatePackageRequest} updatePackageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updatePackageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatePackageResponse}
     */
    updatePackage(updatePackageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updatePackageRequest;
      // verify the required parameter 'updatePackageRequest' is set
      if (updatePackageRequest === undefined || updatePackageRequest === null) {
        throw new Error("Missing the required parameter 'updatePackageRequest' when calling updatePackage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatePackageResponse;
      return this.apiClient.callApi(
        '/2021-01-01/packages/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateScheduledAction operation.
     * @callback module:api/DefaultApi~updateScheduledActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateScheduledActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reschedules a planned domain configuration change for a later time. This change can be a scheduled <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html\">service software update</a> or a <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html#auto-tune-types\">blue/green Auto-Tune enhancement</a>.
     * @param {String} domainName The name of the domain to reschedule an action for.
     * @param {module:model/UpdateScheduledActionRequest} updateScheduledActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateScheduledActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateScheduledActionResponse}
     */
    updateScheduledAction(domainName, updateScheduledActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateScheduledActionRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateScheduledAction");
      }
      // verify the required parameter 'updateScheduledActionRequest' is set
      if (updateScheduledActionRequest === undefined || updateScheduledActionRequest === null) {
        throw new Error("Missing the required parameter 'updateScheduledActionRequest' when calling updateScheduledAction");
      }

      let pathParams = {
        'DomainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateScheduledActionResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/domain/{DomainName}/scheduledAction/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVpcEndpoint operation.
     * @callback module:api/DefaultApi~updateVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies an Amazon OpenSearch Service-managed interface VPC endpoint.
     * @param {module:model/UpdateVpcEndpointRequest} updateVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVpcEndpointResponse}
     */
    updateVpcEndpoint(updateVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVpcEndpointRequest;
      // verify the required parameter 'updateVpcEndpointRequest' is set
      if (updateVpcEndpointRequest === undefined || updateVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateVpcEndpointRequest' when calling updateVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVpcEndpointResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/vpcEndpoints/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upgradeDomain operation.
     * @callback module:api/DefaultApi~upgradeDomainCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpgradeDomainResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to either upgrade your Amazon OpenSearch Service domain or perform an upgrade eligibility check to a compatible version of OpenSearch or Elasticsearch.
     * @param {module:model/UpgradeDomainRequest} upgradeDomainRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~upgradeDomainCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpgradeDomainResponse}
     */
    upgradeDomain(upgradeDomainRequest, opts, callback) {
      opts = opts || {};
      let postBody = upgradeDomainRequest;
      // verify the required parameter 'upgradeDomainRequest' is set
      if (upgradeDomainRequest === undefined || upgradeDomainRequest === null) {
        throw new Error("Missing the required parameter 'upgradeDomainRequest' when calling upgradeDomain");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpgradeDomainResponse;
      return this.apiClient.callApi(
        '/2021-01-01/opensearch/upgradeDomain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
