/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StorageType model module.
 * @module model/StorageType
 * @version 2021-01-01
 */
class StorageType {
    /**
     * Constructs a new <code>StorageType</code>.
     * A list of storage types for an Amazon OpenSearch Service domain that are available for a given intance type.
     * @alias module:model/StorageType
     */
    constructor() { 
        
        StorageType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StorageType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StorageType} obj Optional instance to populate.
     * @return {module:model/StorageType} The populated <code>StorageType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StorageType();

            if (data.hasOwnProperty('StorageTypeName')) {
                obj['StorageTypeName'] = ApiClient.convertToType(data['StorageTypeName'], 'String');
            }
            if (data.hasOwnProperty('StorageSubTypeName')) {
                obj['StorageSubTypeName'] = ApiClient.convertToType(data['StorageSubTypeName'], 'String');
            }
            if (data.hasOwnProperty('StorageTypeLimits')) {
                obj['StorageTypeLimits'] = ApiClient.convertToType(data['StorageTypeLimits'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StorageType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StorageType</code>.
     */
    static validateJSON(data) {
        // validate the optional field `StorageTypeName`
        if (data['StorageTypeName']) { // data not null
          String.validateJSON(data['StorageTypeName']);
        }
        // validate the optional field `StorageSubTypeName`
        if (data['StorageSubTypeName']) { // data not null
          String.validateJSON(data['StorageSubTypeName']);
        }
        // validate the optional field `StorageTypeLimits`
        if (data['StorageTypeLimits']) { // data not null
          Array.validateJSON(data['StorageTypeLimits']);
        }

        return true;
    }


}



/**
 * @member {String} StorageTypeName
 */
StorageType.prototype['StorageTypeName'] = undefined;

/**
 * @member {String} StorageSubTypeName
 */
StorageType.prototype['StorageSubTypeName'] = undefined;

/**
 * @member {Array} StorageTypeLimits
 */
StorageType.prototype['StorageTypeLimits'] = undefined;






export default StorageType;

