/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodeStatus from './NodeStatus';
import NodeType from './NodeType';
import OpenSearchPartitionInstanceType from './OpenSearchPartitionInstanceType';
import VolumeType from './VolumeType';

/**
 * The DomainNodesStatus model module.
 * @module model/DomainNodesStatus
 * @version 2021-01-01
 */
class DomainNodesStatus {
    /**
     * Constructs a new <code>DomainNodesStatus</code>.
     * Container for information about nodes on the domain.
     * @alias module:model/DomainNodesStatus
     */
    constructor() { 
        
        DomainNodesStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DomainNodesStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DomainNodesStatus} obj Optional instance to populate.
     * @return {module:model/DomainNodesStatus} The populated <code>DomainNodesStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DomainNodesStatus();

            if (data.hasOwnProperty('NodeId')) {
                obj['NodeId'] = ApiClient.convertToType(data['NodeId'], 'String');
            }
            if (data.hasOwnProperty('NodeType')) {
                obj['NodeType'] = ApiClient.convertToType(data['NodeType'], NodeType);
            }
            if (data.hasOwnProperty('AvailabilityZone')) {
                obj['AvailabilityZone'] = ApiClient.convertToType(data['AvailabilityZone'], 'String');
            }
            if (data.hasOwnProperty('InstanceType')) {
                obj['InstanceType'] = ApiClient.convertToType(data['InstanceType'], OpenSearchPartitionInstanceType);
            }
            if (data.hasOwnProperty('NodeStatus')) {
                obj['NodeStatus'] = ApiClient.convertToType(data['NodeStatus'], NodeStatus);
            }
            if (data.hasOwnProperty('StorageType')) {
                obj['StorageType'] = ApiClient.convertToType(data['StorageType'], 'String');
            }
            if (data.hasOwnProperty('StorageVolumeType')) {
                obj['StorageVolumeType'] = ApiClient.convertToType(data['StorageVolumeType'], VolumeType);
            }
            if (data.hasOwnProperty('StorageSize')) {
                obj['StorageSize'] = ApiClient.convertToType(data['StorageSize'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DomainNodesStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DomainNodesStatus</code>.
     */
    static validateJSON(data) {
        // validate the optional field `NodeId`
        if (data['NodeId']) { // data not null
          String.validateJSON(data['NodeId']);
        }
        // validate the optional field `NodeType`
        if (data['NodeType']) { // data not null
          NodeType.validateJSON(data['NodeType']);
        }
        // validate the optional field `AvailabilityZone`
        if (data['AvailabilityZone']) { // data not null
          String.validateJSON(data['AvailabilityZone']);
        }
        // validate the optional field `InstanceType`
        if (data['InstanceType']) { // data not null
          OpenSearchPartitionInstanceType.validateJSON(data['InstanceType']);
        }
        // validate the optional field `NodeStatus`
        if (data['NodeStatus']) { // data not null
          NodeStatus.validateJSON(data['NodeStatus']);
        }
        // validate the optional field `StorageType`
        if (data['StorageType']) { // data not null
          String.validateJSON(data['StorageType']);
        }
        // validate the optional field `StorageVolumeType`
        if (data['StorageVolumeType']) { // data not null
          VolumeType.validateJSON(data['StorageVolumeType']);
        }
        // validate the optional field `StorageSize`
        if (data['StorageSize']) { // data not null
          String.validateJSON(data['StorageSize']);
        }

        return true;
    }


}



/**
 * @member {String} NodeId
 */
DomainNodesStatus.prototype['NodeId'] = undefined;

/**
 * @member {module:model/NodeType} NodeType
 */
DomainNodesStatus.prototype['NodeType'] = undefined;

/**
 * @member {String} AvailabilityZone
 */
DomainNodesStatus.prototype['AvailabilityZone'] = undefined;

/**
 * @member {module:model/OpenSearchPartitionInstanceType} InstanceType
 */
DomainNodesStatus.prototype['InstanceType'] = undefined;

/**
 * @member {module:model/NodeStatus} NodeStatus
 */
DomainNodesStatus.prototype['NodeStatus'] = undefined;

/**
 * @member {String} StorageType
 */
DomainNodesStatus.prototype['StorageType'] = undefined;

/**
 * @member {module:model/VolumeType} StorageVolumeType
 */
DomainNodesStatus.prototype['StorageVolumeType'] = undefined;

/**
 * @member {String} StorageSize
 */
DomainNodesStatus.prototype['StorageSize'] = undefined;






export default DomainNodesStatus;

