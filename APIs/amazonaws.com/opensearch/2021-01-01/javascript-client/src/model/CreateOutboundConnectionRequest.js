/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateOutboundConnectionRequestConnectionProperties from './CreateOutboundConnectionRequestConnectionProperties';
import CreateOutboundConnectionRequestLocalDomainInfo from './CreateOutboundConnectionRequestLocalDomainInfo';

/**
 * The CreateOutboundConnectionRequest model module.
 * @module model/CreateOutboundConnectionRequest
 * @version 2021-01-01
 */
class CreateOutboundConnectionRequest {
    /**
     * Constructs a new <code>CreateOutboundConnectionRequest</code>.
     * @alias module:model/CreateOutboundConnectionRequest
     * @param localDomainInfo {module:model/CreateOutboundConnectionRequestLocalDomainInfo} 
     * @param remoteDomainInfo {module:model/CreateOutboundConnectionRequestLocalDomainInfo} 
     * @param connectionAlias {String} Name of the connection.
     */
    constructor(localDomainInfo, remoteDomainInfo, connectionAlias) { 
        
        CreateOutboundConnectionRequest.initialize(this, localDomainInfo, remoteDomainInfo, connectionAlias);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, localDomainInfo, remoteDomainInfo, connectionAlias) { 
        obj['LocalDomainInfo'] = localDomainInfo;
        obj['RemoteDomainInfo'] = remoteDomainInfo;
        obj['ConnectionAlias'] = connectionAlias;
    }

    /**
     * Constructs a <code>CreateOutboundConnectionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateOutboundConnectionRequest} obj Optional instance to populate.
     * @return {module:model/CreateOutboundConnectionRequest} The populated <code>CreateOutboundConnectionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateOutboundConnectionRequest();

            if (data.hasOwnProperty('LocalDomainInfo')) {
                obj['LocalDomainInfo'] = CreateOutboundConnectionRequestLocalDomainInfo.constructFromObject(data['LocalDomainInfo']);
            }
            if (data.hasOwnProperty('RemoteDomainInfo')) {
                obj['RemoteDomainInfo'] = CreateOutboundConnectionRequestLocalDomainInfo.constructFromObject(data['RemoteDomainInfo']);
            }
            if (data.hasOwnProperty('ConnectionAlias')) {
                obj['ConnectionAlias'] = ApiClient.convertToType(data['ConnectionAlias'], 'String');
            }
            if (data.hasOwnProperty('ConnectionMode')) {
                obj['ConnectionMode'] = ApiClient.convertToType(data['ConnectionMode'], 'String');
            }
            if (data.hasOwnProperty('ConnectionProperties')) {
                obj['ConnectionProperties'] = CreateOutboundConnectionRequestConnectionProperties.constructFromObject(data['ConnectionProperties']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateOutboundConnectionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateOutboundConnectionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateOutboundConnectionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LocalDomainInfo`
        if (data['LocalDomainInfo']) { // data not null
          CreateOutboundConnectionRequestLocalDomainInfo.validateJSON(data['LocalDomainInfo']);
        }
        // validate the optional field `RemoteDomainInfo`
        if (data['RemoteDomainInfo']) { // data not null
          CreateOutboundConnectionRequestLocalDomainInfo.validateJSON(data['RemoteDomainInfo']);
        }
        // ensure the json data is a string
        if (data['ConnectionAlias'] && !(typeof data['ConnectionAlias'] === 'string' || data['ConnectionAlias'] instanceof String)) {
            throw new Error("Expected the field `ConnectionAlias` to be a primitive type in the JSON string but got " + data['ConnectionAlias']);
        }
        // ensure the json data is a string
        if (data['ConnectionMode'] && !(typeof data['ConnectionMode'] === 'string' || data['ConnectionMode'] instanceof String)) {
            throw new Error("Expected the field `ConnectionMode` to be a primitive type in the JSON string but got " + data['ConnectionMode']);
        }
        // validate the optional field `ConnectionProperties`
        if (data['ConnectionProperties']) { // data not null
          CreateOutboundConnectionRequestConnectionProperties.validateJSON(data['ConnectionProperties']);
        }

        return true;
    }


}

CreateOutboundConnectionRequest.RequiredProperties = ["LocalDomainInfo", "RemoteDomainInfo", "ConnectionAlias"];

/**
 * @member {module:model/CreateOutboundConnectionRequestLocalDomainInfo} LocalDomainInfo
 */
CreateOutboundConnectionRequest.prototype['LocalDomainInfo'] = undefined;

/**
 * @member {module:model/CreateOutboundConnectionRequestLocalDomainInfo} RemoteDomainInfo
 */
CreateOutboundConnectionRequest.prototype['RemoteDomainInfo'] = undefined;

/**
 * Name of the connection.
 * @member {String} ConnectionAlias
 */
CreateOutboundConnectionRequest.prototype['ConnectionAlias'] = undefined;

/**
 * <p>The connection mode for the cross-cluster connection.</p> <ul> <li> <p> <b>DIRECT</b> - Used for cross-cluster search or cross-cluster replication.</p> </li> <li> <p> <b>VPC_ENDPOINT</b> - Used for remote reindex between Amazon OpenSearch Service VPC domains.</p> </li> </ul>
 * @member {module:model/CreateOutboundConnectionRequest.ConnectionModeEnum} ConnectionMode
 */
CreateOutboundConnectionRequest.prototype['ConnectionMode'] = undefined;

/**
 * @member {module:model/CreateOutboundConnectionRequestConnectionProperties} ConnectionProperties
 */
CreateOutboundConnectionRequest.prototype['ConnectionProperties'] = undefined;





/**
 * Allowed values for the <code>ConnectionMode</code> property.
 * @enum {String}
 * @readonly
 */
CreateOutboundConnectionRequest['ConnectionModeEnum'] = {

    /**
     * value: "DIRECT"
     * @const
     */
    "DIRECT": "DIRECT",

    /**
     * value: "VPC_ENDPOINT"
     * @const
     */
    "VPC_ENDPOINT": "VPC_ENDPOINT"
};



export default CreateOutboundConnectionRequest;

