/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DomainHealth from './DomainHealth';
import DomainState from './DomainState';
import MasterNodeStatus from './MasterNodeStatus';

/**
 * The DescribeDomainHealthResponse model module.
 * @module model/DescribeDomainHealthResponse
 * @version 2021-01-01
 */
class DescribeDomainHealthResponse {
    /**
     * Constructs a new <code>DescribeDomainHealthResponse</code>.
     * The result of a &lt;code&gt;DescribeDomainHealth&lt;/code&gt; request. Contains health information for the requested domain.
     * @alias module:model/DescribeDomainHealthResponse
     */
    constructor() { 
        
        DescribeDomainHealthResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeDomainHealthResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDomainHealthResponse} obj Optional instance to populate.
     * @return {module:model/DescribeDomainHealthResponse} The populated <code>DescribeDomainHealthResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDomainHealthResponse();

            if (data.hasOwnProperty('DomainState')) {
                obj['DomainState'] = ApiClient.convertToType(data['DomainState'], DomainState);
            }
            if (data.hasOwnProperty('AvailabilityZoneCount')) {
                obj['AvailabilityZoneCount'] = ApiClient.convertToType(data['AvailabilityZoneCount'], 'String');
            }
            if (data.hasOwnProperty('ActiveAvailabilityZoneCount')) {
                obj['ActiveAvailabilityZoneCount'] = ApiClient.convertToType(data['ActiveAvailabilityZoneCount'], 'String');
            }
            if (data.hasOwnProperty('StandByAvailabilityZoneCount')) {
                obj['StandByAvailabilityZoneCount'] = ApiClient.convertToType(data['StandByAvailabilityZoneCount'], 'String');
            }
            if (data.hasOwnProperty('DataNodeCount')) {
                obj['DataNodeCount'] = ApiClient.convertToType(data['DataNodeCount'], 'String');
            }
            if (data.hasOwnProperty('DedicatedMaster')) {
                obj['DedicatedMaster'] = ApiClient.convertToType(data['DedicatedMaster'], 'Boolean');
            }
            if (data.hasOwnProperty('MasterEligibleNodeCount')) {
                obj['MasterEligibleNodeCount'] = ApiClient.convertToType(data['MasterEligibleNodeCount'], 'String');
            }
            if (data.hasOwnProperty('WarmNodeCount')) {
                obj['WarmNodeCount'] = ApiClient.convertToType(data['WarmNodeCount'], 'String');
            }
            if (data.hasOwnProperty('MasterNode')) {
                obj['MasterNode'] = ApiClient.convertToType(data['MasterNode'], MasterNodeStatus);
            }
            if (data.hasOwnProperty('ClusterHealth')) {
                obj['ClusterHealth'] = ApiClient.convertToType(data['ClusterHealth'], DomainHealth);
            }
            if (data.hasOwnProperty('TotalShards')) {
                obj['TotalShards'] = ApiClient.convertToType(data['TotalShards'], 'String');
            }
            if (data.hasOwnProperty('TotalUnAssignedShards')) {
                obj['TotalUnAssignedShards'] = ApiClient.convertToType(data['TotalUnAssignedShards'], 'String');
            }
            if (data.hasOwnProperty('EnvironmentInformation')) {
                obj['EnvironmentInformation'] = ApiClient.convertToType(data['EnvironmentInformation'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDomainHealthResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDomainHealthResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DomainState`
        if (data['DomainState']) { // data not null
          DomainState.validateJSON(data['DomainState']);
        }
        // validate the optional field `AvailabilityZoneCount`
        if (data['AvailabilityZoneCount']) { // data not null
          String.validateJSON(data['AvailabilityZoneCount']);
        }
        // validate the optional field `ActiveAvailabilityZoneCount`
        if (data['ActiveAvailabilityZoneCount']) { // data not null
          String.validateJSON(data['ActiveAvailabilityZoneCount']);
        }
        // validate the optional field `StandByAvailabilityZoneCount`
        if (data['StandByAvailabilityZoneCount']) { // data not null
          String.validateJSON(data['StandByAvailabilityZoneCount']);
        }
        // validate the optional field `DataNodeCount`
        if (data['DataNodeCount']) { // data not null
          String.validateJSON(data['DataNodeCount']);
        }
        // validate the optional field `DedicatedMaster`
        if (data['DedicatedMaster']) { // data not null
          Boolean.validateJSON(data['DedicatedMaster']);
        }
        // validate the optional field `MasterEligibleNodeCount`
        if (data['MasterEligibleNodeCount']) { // data not null
          String.validateJSON(data['MasterEligibleNodeCount']);
        }
        // validate the optional field `WarmNodeCount`
        if (data['WarmNodeCount']) { // data not null
          String.validateJSON(data['WarmNodeCount']);
        }
        // validate the optional field `MasterNode`
        if (data['MasterNode']) { // data not null
          MasterNodeStatus.validateJSON(data['MasterNode']);
        }
        // validate the optional field `ClusterHealth`
        if (data['ClusterHealth']) { // data not null
          DomainHealth.validateJSON(data['ClusterHealth']);
        }
        // validate the optional field `TotalShards`
        if (data['TotalShards']) { // data not null
          String.validateJSON(data['TotalShards']);
        }
        // validate the optional field `TotalUnAssignedShards`
        if (data['TotalUnAssignedShards']) { // data not null
          String.validateJSON(data['TotalUnAssignedShards']);
        }
        // validate the optional field `EnvironmentInformation`
        if (data['EnvironmentInformation']) { // data not null
          Array.validateJSON(data['EnvironmentInformation']);
        }

        return true;
    }


}



/**
 * @member {module:model/DomainState} DomainState
 */
DescribeDomainHealthResponse.prototype['DomainState'] = undefined;

/**
 * @member {String} AvailabilityZoneCount
 */
DescribeDomainHealthResponse.prototype['AvailabilityZoneCount'] = undefined;

/**
 * @member {String} ActiveAvailabilityZoneCount
 */
DescribeDomainHealthResponse.prototype['ActiveAvailabilityZoneCount'] = undefined;

/**
 * @member {String} StandByAvailabilityZoneCount
 */
DescribeDomainHealthResponse.prototype['StandByAvailabilityZoneCount'] = undefined;

/**
 * @member {String} DataNodeCount
 */
DescribeDomainHealthResponse.prototype['DataNodeCount'] = undefined;

/**
 * @member {Boolean} DedicatedMaster
 */
DescribeDomainHealthResponse.prototype['DedicatedMaster'] = undefined;

/**
 * @member {String} MasterEligibleNodeCount
 */
DescribeDomainHealthResponse.prototype['MasterEligibleNodeCount'] = undefined;

/**
 * @member {String} WarmNodeCount
 */
DescribeDomainHealthResponse.prototype['WarmNodeCount'] = undefined;

/**
 * @member {module:model/MasterNodeStatus} MasterNode
 */
DescribeDomainHealthResponse.prototype['MasterNode'] = undefined;

/**
 * @member {module:model/DomainHealth} ClusterHealth
 */
DescribeDomainHealthResponse.prototype['ClusterHealth'] = undefined;

/**
 * @member {String} TotalShards
 */
DescribeDomainHealthResponse.prototype['TotalShards'] = undefined;

/**
 * @member {String} TotalUnAssignedShards
 */
DescribeDomainHealthResponse.prototype['TotalUnAssignedShards'] = undefined;

/**
 * @member {Array} EnvironmentInformation
 */
DescribeDomainHealthResponse.prototype['EnvironmentInformation'] = undefined;






export default DescribeDomainHealthResponse;

