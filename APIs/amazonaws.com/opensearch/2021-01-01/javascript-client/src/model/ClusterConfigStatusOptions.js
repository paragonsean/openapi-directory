/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterConfig from './ClusterConfig';
import CreateDomainRequestClusterConfigColdStorageOptions from './CreateDomainRequestClusterConfigColdStorageOptions';
import CreateDomainRequestClusterConfigZoneAwarenessConfig from './CreateDomainRequestClusterConfigZoneAwarenessConfig';
import OpenSearchPartitionInstanceType from './OpenSearchPartitionInstanceType';
import OpenSearchWarmPartitionInstanceType from './OpenSearchWarmPartitionInstanceType';

/**
 * The ClusterConfigStatusOptions model module.
 * @module model/ClusterConfigStatusOptions
 * @version 2021-01-01
 */
class ClusterConfigStatusOptions {
    /**
     * Constructs a new <code>ClusterConfigStatusOptions</code>.
     * @alias module:model/ClusterConfigStatusOptions
     * @implements module:model/ClusterConfig
     */
    constructor() { 
        ClusterConfig.initialize(this);
        ClusterConfigStatusOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterConfigStatusOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterConfigStatusOptions} obj Optional instance to populate.
     * @return {module:model/ClusterConfigStatusOptions} The populated <code>ClusterConfigStatusOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterConfigStatusOptions();
            ClusterConfig.constructFromObject(data, obj);

            if (data.hasOwnProperty('InstanceType')) {
                obj['InstanceType'] = ApiClient.convertToType(data['InstanceType'], OpenSearchPartitionInstanceType);
            }
            if (data.hasOwnProperty('InstanceCount')) {
                obj['InstanceCount'] = ApiClient.convertToType(data['InstanceCount'], 'Number');
            }
            if (data.hasOwnProperty('DedicatedMasterEnabled')) {
                obj['DedicatedMasterEnabled'] = ApiClient.convertToType(data['DedicatedMasterEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ZoneAwarenessEnabled')) {
                obj['ZoneAwarenessEnabled'] = ApiClient.convertToType(data['ZoneAwarenessEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('ZoneAwarenessConfig')) {
                obj['ZoneAwarenessConfig'] = CreateDomainRequestClusterConfigZoneAwarenessConfig.constructFromObject(data['ZoneAwarenessConfig']);
            }
            if (data.hasOwnProperty('DedicatedMasterType')) {
                obj['DedicatedMasterType'] = ApiClient.convertToType(data['DedicatedMasterType'], OpenSearchPartitionInstanceType);
            }
            if (data.hasOwnProperty('DedicatedMasterCount')) {
                obj['DedicatedMasterCount'] = ApiClient.convertToType(data['DedicatedMasterCount'], 'Number');
            }
            if (data.hasOwnProperty('WarmEnabled')) {
                obj['WarmEnabled'] = ApiClient.convertToType(data['WarmEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('WarmType')) {
                obj['WarmType'] = ApiClient.convertToType(data['WarmType'], OpenSearchWarmPartitionInstanceType);
            }
            if (data.hasOwnProperty('WarmCount')) {
                obj['WarmCount'] = ApiClient.convertToType(data['WarmCount'], 'Number');
            }
            if (data.hasOwnProperty('ColdStorageOptions')) {
                obj['ColdStorageOptions'] = CreateDomainRequestClusterConfigColdStorageOptions.constructFromObject(data['ColdStorageOptions']);
            }
            if (data.hasOwnProperty('MultiAZWithStandbyEnabled')) {
                obj['MultiAZWithStandbyEnabled'] = ApiClient.convertToType(data['MultiAZWithStandbyEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterConfigStatusOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterConfigStatusOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `InstanceType`
        if (data['InstanceType']) { // data not null
          OpenSearchPartitionInstanceType.validateJSON(data['InstanceType']);
        }
        // validate the optional field `InstanceCount`
        if (data['InstanceCount']) { // data not null
          Number.validateJSON(data['InstanceCount']);
        }
        // validate the optional field `DedicatedMasterEnabled`
        if (data['DedicatedMasterEnabled']) { // data not null
          Boolean.validateJSON(data['DedicatedMasterEnabled']);
        }
        // validate the optional field `ZoneAwarenessEnabled`
        if (data['ZoneAwarenessEnabled']) { // data not null
          Boolean.validateJSON(data['ZoneAwarenessEnabled']);
        }
        // validate the optional field `ZoneAwarenessConfig`
        if (data['ZoneAwarenessConfig']) { // data not null
          CreateDomainRequestClusterConfigZoneAwarenessConfig.validateJSON(data['ZoneAwarenessConfig']);
        }
        // validate the optional field `DedicatedMasterType`
        if (data['DedicatedMasterType']) { // data not null
          OpenSearchPartitionInstanceType.validateJSON(data['DedicatedMasterType']);
        }
        // validate the optional field `DedicatedMasterCount`
        if (data['DedicatedMasterCount']) { // data not null
          Number.validateJSON(data['DedicatedMasterCount']);
        }
        // validate the optional field `WarmEnabled`
        if (data['WarmEnabled']) { // data not null
          Boolean.validateJSON(data['WarmEnabled']);
        }
        // validate the optional field `WarmType`
        if (data['WarmType']) { // data not null
          OpenSearchWarmPartitionInstanceType.validateJSON(data['WarmType']);
        }
        // validate the optional field `WarmCount`
        if (data['WarmCount']) { // data not null
          Number.validateJSON(data['WarmCount']);
        }
        // validate the optional field `ColdStorageOptions`
        if (data['ColdStorageOptions']) { // data not null
          CreateDomainRequestClusterConfigColdStorageOptions.validateJSON(data['ColdStorageOptions']);
        }
        // validate the optional field `MultiAZWithStandbyEnabled`
        if (data['MultiAZWithStandbyEnabled']) { // data not null
          Boolean.validateJSON(data['MultiAZWithStandbyEnabled']);
        }

        return true;
    }


}



/**
 * @member {module:model/OpenSearchPartitionInstanceType} InstanceType
 */
ClusterConfigStatusOptions.prototype['InstanceType'] = undefined;

/**
 * @member {Number} InstanceCount
 */
ClusterConfigStatusOptions.prototype['InstanceCount'] = undefined;

/**
 * @member {Boolean} DedicatedMasterEnabled
 */
ClusterConfigStatusOptions.prototype['DedicatedMasterEnabled'] = undefined;

/**
 * @member {Boolean} ZoneAwarenessEnabled
 */
ClusterConfigStatusOptions.prototype['ZoneAwarenessEnabled'] = undefined;

/**
 * @member {module:model/CreateDomainRequestClusterConfigZoneAwarenessConfig} ZoneAwarenessConfig
 */
ClusterConfigStatusOptions.prototype['ZoneAwarenessConfig'] = undefined;

/**
 * @member {module:model/OpenSearchPartitionInstanceType} DedicatedMasterType
 */
ClusterConfigStatusOptions.prototype['DedicatedMasterType'] = undefined;

/**
 * @member {Number} DedicatedMasterCount
 */
ClusterConfigStatusOptions.prototype['DedicatedMasterCount'] = undefined;

/**
 * @member {Boolean} WarmEnabled
 */
ClusterConfigStatusOptions.prototype['WarmEnabled'] = undefined;

/**
 * @member {module:model/OpenSearchWarmPartitionInstanceType} WarmType
 */
ClusterConfigStatusOptions.prototype['WarmType'] = undefined;

/**
 * @member {Number} WarmCount
 */
ClusterConfigStatusOptions.prototype['WarmCount'] = undefined;

/**
 * @member {module:model/CreateDomainRequestClusterConfigColdStorageOptions} ColdStorageOptions
 */
ClusterConfigStatusOptions.prototype['ColdStorageOptions'] = undefined;

/**
 * @member {Boolean} MultiAZWithStandbyEnabled
 */
ClusterConfigStatusOptions.prototype['MultiAZWithStandbyEnabled'] = undefined;


// Implement ClusterConfig interface:
/**
 * @member {module:model/OpenSearchPartitionInstanceType} InstanceType
 */
ClusterConfig.prototype['InstanceType'] = undefined;
/**
 * @member {Number} InstanceCount
 */
ClusterConfig.prototype['InstanceCount'] = undefined;
/**
 * @member {Boolean} DedicatedMasterEnabled
 */
ClusterConfig.prototype['DedicatedMasterEnabled'] = undefined;
/**
 * @member {Boolean} ZoneAwarenessEnabled
 */
ClusterConfig.prototype['ZoneAwarenessEnabled'] = undefined;
/**
 * @member {module:model/CreateDomainRequestClusterConfigZoneAwarenessConfig} ZoneAwarenessConfig
 */
ClusterConfig.prototype['ZoneAwarenessConfig'] = undefined;
/**
 * @member {module:model/OpenSearchPartitionInstanceType} DedicatedMasterType
 */
ClusterConfig.prototype['DedicatedMasterType'] = undefined;
/**
 * @member {Number} DedicatedMasterCount
 */
ClusterConfig.prototype['DedicatedMasterCount'] = undefined;
/**
 * @member {Boolean} WarmEnabled
 */
ClusterConfig.prototype['WarmEnabled'] = undefined;
/**
 * @member {module:model/OpenSearchWarmPartitionInstanceType} WarmType
 */
ClusterConfig.prototype['WarmType'] = undefined;
/**
 * @member {Number} WarmCount
 */
ClusterConfig.prototype['WarmCount'] = undefined;
/**
 * @member {module:model/CreateDomainRequestClusterConfigColdStorageOptions} ColdStorageOptions
 */
ClusterConfig.prototype['ColdStorageOptions'] = undefined;
/**
 * @member {Boolean} MultiAZWithStandbyEnabled
 */
ClusterConfig.prototype['MultiAZWithStandbyEnabled'] = undefined;




export default ClusterConfigStatusOptions;

