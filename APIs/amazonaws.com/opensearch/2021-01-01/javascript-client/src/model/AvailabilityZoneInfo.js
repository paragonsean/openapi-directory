/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ZoneStatus from './ZoneStatus';

/**
 * The AvailabilityZoneInfo model module.
 * @module model/AvailabilityZoneInfo
 * @version 2021-01-01
 */
class AvailabilityZoneInfo {
    /**
     * Constructs a new <code>AvailabilityZoneInfo</code>.
     * Information about an Availability Zone on a domain.
     * @alias module:model/AvailabilityZoneInfo
     */
    constructor() { 
        
        AvailabilityZoneInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AvailabilityZoneInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailabilityZoneInfo} obj Optional instance to populate.
     * @return {module:model/AvailabilityZoneInfo} The populated <code>AvailabilityZoneInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailabilityZoneInfo();

            if (data.hasOwnProperty('AvailabilityZoneName')) {
                obj['AvailabilityZoneName'] = ApiClient.convertToType(data['AvailabilityZoneName'], 'String');
            }
            if (data.hasOwnProperty('ZoneStatus')) {
                obj['ZoneStatus'] = ApiClient.convertToType(data['ZoneStatus'], ZoneStatus);
            }
            if (data.hasOwnProperty('ConfiguredDataNodeCount')) {
                obj['ConfiguredDataNodeCount'] = ApiClient.convertToType(data['ConfiguredDataNodeCount'], 'String');
            }
            if (data.hasOwnProperty('AvailableDataNodeCount')) {
                obj['AvailableDataNodeCount'] = ApiClient.convertToType(data['AvailableDataNodeCount'], 'String');
            }
            if (data.hasOwnProperty('TotalShards')) {
                obj['TotalShards'] = ApiClient.convertToType(data['TotalShards'], 'String');
            }
            if (data.hasOwnProperty('TotalUnAssignedShards')) {
                obj['TotalUnAssignedShards'] = ApiClient.convertToType(data['TotalUnAssignedShards'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailabilityZoneInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailabilityZoneInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AvailabilityZoneName`
        if (data['AvailabilityZoneName']) { // data not null
          String.validateJSON(data['AvailabilityZoneName']);
        }
        // validate the optional field `ZoneStatus`
        if (data['ZoneStatus']) { // data not null
          ZoneStatus.validateJSON(data['ZoneStatus']);
        }
        // validate the optional field `ConfiguredDataNodeCount`
        if (data['ConfiguredDataNodeCount']) { // data not null
          String.validateJSON(data['ConfiguredDataNodeCount']);
        }
        // validate the optional field `AvailableDataNodeCount`
        if (data['AvailableDataNodeCount']) { // data not null
          String.validateJSON(data['AvailableDataNodeCount']);
        }
        // validate the optional field `TotalShards`
        if (data['TotalShards']) { // data not null
          String.validateJSON(data['TotalShards']);
        }
        // validate the optional field `TotalUnAssignedShards`
        if (data['TotalUnAssignedShards']) { // data not null
          String.validateJSON(data['TotalUnAssignedShards']);
        }

        return true;
    }


}



/**
 * @member {String} AvailabilityZoneName
 */
AvailabilityZoneInfo.prototype['AvailabilityZoneName'] = undefined;

/**
 * @member {module:model/ZoneStatus} ZoneStatus
 */
AvailabilityZoneInfo.prototype['ZoneStatus'] = undefined;

/**
 * @member {String} ConfiguredDataNodeCount
 */
AvailabilityZoneInfo.prototype['ConfiguredDataNodeCount'] = undefined;

/**
 * @member {String} AvailableDataNodeCount
 */
AvailabilityZoneInfo.prototype['AvailableDataNodeCount'] = undefined;

/**
 * @member {String} TotalShards
 */
AvailabilityZoneInfo.prototype['TotalShards'] = undefined;

/**
 * @member {String} TotalUnAssignedShards
 */
AvailabilityZoneInfo.prototype['TotalUnAssignedShards'] = undefined;






export default AvailabilityZoneInfo;

