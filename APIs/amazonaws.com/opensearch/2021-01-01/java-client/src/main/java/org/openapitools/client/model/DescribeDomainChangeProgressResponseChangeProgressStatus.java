/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OverallChangeStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDomainChangeProgressResponseChangeProgressStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDomainChangeProgressResponseChangeProgressStatus {
  public static final String SERIALIZED_NAME_CHANGE_ID = "ChangeId";
  @SerializedName(SERIALIZED_NAME_CHANGE_ID)
  private String changeId;

  public static final String SERIALIZED_NAME_START_TIME = "StartTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private OverallChangeStatus status;

  public static final String SERIALIZED_NAME_PENDING_PROPERTIES = "PendingProperties";
  @SerializedName(SERIALIZED_NAME_PENDING_PROPERTIES)
  private List pendingProperties;

  public static final String SERIALIZED_NAME_COMPLETED_PROPERTIES = "CompletedProperties";
  @SerializedName(SERIALIZED_NAME_COMPLETED_PROPERTIES)
  private List completedProperties;

  public static final String SERIALIZED_NAME_TOTAL_NUMBER_OF_STAGES = "TotalNumberOfStages";
  @SerializedName(SERIALIZED_NAME_TOTAL_NUMBER_OF_STAGES)
  private Integer totalNumberOfStages;

  public static final String SERIALIZED_NAME_CHANGE_PROGRESS_STAGES = "ChangeProgressStages";
  @SerializedName(SERIALIZED_NAME_CHANGE_PROGRESS_STAGES)
  private List changeProgressStages;

  public DescribeDomainChangeProgressResponseChangeProgressStatus() {
  }

  public DescribeDomainChangeProgressResponseChangeProgressStatus changeId(String changeId) {
    this.changeId = changeId;
    return this;
  }

  /**
   * Get changeId
   * @return changeId
   */
  @javax.annotation.Nullable
  public String getChangeId() {
    return changeId;
  }

  public void setChangeId(String changeId) {
    this.changeId = changeId;
  }


  public DescribeDomainChangeProgressResponseChangeProgressStatus startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Get startTime
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public DescribeDomainChangeProgressResponseChangeProgressStatus status(OverallChangeStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public OverallChangeStatus getStatus() {
    return status;
  }

  public void setStatus(OverallChangeStatus status) {
    this.status = status;
  }


  public DescribeDomainChangeProgressResponseChangeProgressStatus pendingProperties(List pendingProperties) {
    this.pendingProperties = pendingProperties;
    return this;
  }

  /**
   * Get pendingProperties
   * @return pendingProperties
   */
  @javax.annotation.Nullable
  public List getPendingProperties() {
    return pendingProperties;
  }

  public void setPendingProperties(List pendingProperties) {
    this.pendingProperties = pendingProperties;
  }


  public DescribeDomainChangeProgressResponseChangeProgressStatus completedProperties(List completedProperties) {
    this.completedProperties = completedProperties;
    return this;
  }

  /**
   * Get completedProperties
   * @return completedProperties
   */
  @javax.annotation.Nullable
  public List getCompletedProperties() {
    return completedProperties;
  }

  public void setCompletedProperties(List completedProperties) {
    this.completedProperties = completedProperties;
  }


  public DescribeDomainChangeProgressResponseChangeProgressStatus totalNumberOfStages(Integer totalNumberOfStages) {
    this.totalNumberOfStages = totalNumberOfStages;
    return this;
  }

  /**
   * Get totalNumberOfStages
   * @return totalNumberOfStages
   */
  @javax.annotation.Nullable
  public Integer getTotalNumberOfStages() {
    return totalNumberOfStages;
  }

  public void setTotalNumberOfStages(Integer totalNumberOfStages) {
    this.totalNumberOfStages = totalNumberOfStages;
  }


  public DescribeDomainChangeProgressResponseChangeProgressStatus changeProgressStages(List changeProgressStages) {
    this.changeProgressStages = changeProgressStages;
    return this;
  }

  /**
   * Get changeProgressStages
   * @return changeProgressStages
   */
  @javax.annotation.Nullable
  public List getChangeProgressStages() {
    return changeProgressStages;
  }

  public void setChangeProgressStages(List changeProgressStages) {
    this.changeProgressStages = changeProgressStages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDomainChangeProgressResponseChangeProgressStatus describeDomainChangeProgressResponseChangeProgressStatus = (DescribeDomainChangeProgressResponseChangeProgressStatus) o;
    return Objects.equals(this.changeId, describeDomainChangeProgressResponseChangeProgressStatus.changeId) &&
        Objects.equals(this.startTime, describeDomainChangeProgressResponseChangeProgressStatus.startTime) &&
        Objects.equals(this.status, describeDomainChangeProgressResponseChangeProgressStatus.status) &&
        Objects.equals(this.pendingProperties, describeDomainChangeProgressResponseChangeProgressStatus.pendingProperties) &&
        Objects.equals(this.completedProperties, describeDomainChangeProgressResponseChangeProgressStatus.completedProperties) &&
        Objects.equals(this.totalNumberOfStages, describeDomainChangeProgressResponseChangeProgressStatus.totalNumberOfStages) &&
        Objects.equals(this.changeProgressStages, describeDomainChangeProgressResponseChangeProgressStatus.changeProgressStages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeId, startTime, status, pendingProperties, completedProperties, totalNumberOfStages, changeProgressStages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDomainChangeProgressResponseChangeProgressStatus {\n");
    sb.append("    changeId: ").append(toIndentedString(changeId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    pendingProperties: ").append(toIndentedString(pendingProperties)).append("\n");
    sb.append("    completedProperties: ").append(toIndentedString(completedProperties)).append("\n");
    sb.append("    totalNumberOfStages: ").append(toIndentedString(totalNumberOfStages)).append("\n");
    sb.append("    changeProgressStages: ").append(toIndentedString(changeProgressStages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChangeId");
    openapiFields.add("StartTime");
    openapiFields.add("Status");
    openapiFields.add("PendingProperties");
    openapiFields.add("CompletedProperties");
    openapiFields.add("TotalNumberOfStages");
    openapiFields.add("ChangeProgressStages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDomainChangeProgressResponseChangeProgressStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDomainChangeProgressResponseChangeProgressStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDomainChangeProgressResponseChangeProgressStatus is not found in the empty JSON string", DescribeDomainChangeProgressResponseChangeProgressStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDomainChangeProgressResponseChangeProgressStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDomainChangeProgressResponseChangeProgressStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChangeId`
      if (jsonObj.get("ChangeId") != null && !jsonObj.get("ChangeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeId"));
      }
      // validate the optional field `StartTime`
      if (jsonObj.get("StartTime") != null && !jsonObj.get("StartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTime"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        OverallChangeStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `PendingProperties`
      if (jsonObj.get("PendingProperties") != null && !jsonObj.get("PendingProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PendingProperties"));
      }
      // validate the optional field `CompletedProperties`
      if (jsonObj.get("CompletedProperties") != null && !jsonObj.get("CompletedProperties").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CompletedProperties"));
      }
      // validate the optional field `TotalNumberOfStages`
      if (jsonObj.get("TotalNumberOfStages") != null && !jsonObj.get("TotalNumberOfStages").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TotalNumberOfStages"));
      }
      // validate the optional field `ChangeProgressStages`
      if (jsonObj.get("ChangeProgressStages") != null && !jsonObj.get("ChangeProgressStages").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ChangeProgressStages"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDomainChangeProgressResponseChangeProgressStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDomainChangeProgressResponseChangeProgressStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDomainChangeProgressResponseChangeProgressStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDomainChangeProgressResponseChangeProgressStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDomainChangeProgressResponseChangeProgressStatus>() {
           @Override
           public void write(JsonWriter out, DescribeDomainChangeProgressResponseChangeProgressStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDomainChangeProgressResponseChangeProgressStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDomainChangeProgressResponseChangeProgressStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDomainChangeProgressResponseChangeProgressStatus
   * @throws IOException if the JSON string is invalid with respect to DescribeDomainChangeProgressResponseChangeProgressStatus
   */
  public static DescribeDomainChangeProgressResponseChangeProgressStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDomainChangeProgressResponseChangeProgressStatus.class);
  }

  /**
   * Convert an instance of DescribeDomainChangeProgressResponseChangeProgressStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

