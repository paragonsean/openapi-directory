/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DomainHealth;
import org.openapitools.client.model.DomainState;
import org.openapitools.client.model.MasterNodeStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The result of a &lt;code&gt;DescribeDomainHealth&lt;/code&gt; request. Contains health information for the requested domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDomainHealthResponse {
  public static final String SERIALIZED_NAME_DOMAIN_STATE = "DomainState";
  @SerializedName(SERIALIZED_NAME_DOMAIN_STATE)
  private DomainState domainState;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_COUNT = "AvailabilityZoneCount";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_COUNT)
  private String availabilityZoneCount;

  public static final String SERIALIZED_NAME_ACTIVE_AVAILABILITY_ZONE_COUNT = "ActiveAvailabilityZoneCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_AVAILABILITY_ZONE_COUNT)
  private String activeAvailabilityZoneCount;

  public static final String SERIALIZED_NAME_STAND_BY_AVAILABILITY_ZONE_COUNT = "StandByAvailabilityZoneCount";
  @SerializedName(SERIALIZED_NAME_STAND_BY_AVAILABILITY_ZONE_COUNT)
  private String standByAvailabilityZoneCount;

  public static final String SERIALIZED_NAME_DATA_NODE_COUNT = "DataNodeCount";
  @SerializedName(SERIALIZED_NAME_DATA_NODE_COUNT)
  private String dataNodeCount;

  public static final String SERIALIZED_NAME_DEDICATED_MASTER = "DedicatedMaster";
  @SerializedName(SERIALIZED_NAME_DEDICATED_MASTER)
  private Boolean dedicatedMaster;

  public static final String SERIALIZED_NAME_MASTER_ELIGIBLE_NODE_COUNT = "MasterEligibleNodeCount";
  @SerializedName(SERIALIZED_NAME_MASTER_ELIGIBLE_NODE_COUNT)
  private String masterEligibleNodeCount;

  public static final String SERIALIZED_NAME_WARM_NODE_COUNT = "WarmNodeCount";
  @SerializedName(SERIALIZED_NAME_WARM_NODE_COUNT)
  private String warmNodeCount;

  public static final String SERIALIZED_NAME_MASTER_NODE = "MasterNode";
  @SerializedName(SERIALIZED_NAME_MASTER_NODE)
  private MasterNodeStatus masterNode;

  public static final String SERIALIZED_NAME_CLUSTER_HEALTH = "ClusterHealth";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HEALTH)
  private DomainHealth clusterHealth;

  public static final String SERIALIZED_NAME_TOTAL_SHARDS = "TotalShards";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHARDS)
  private String totalShards;

  public static final String SERIALIZED_NAME_TOTAL_UN_ASSIGNED_SHARDS = "TotalUnAssignedShards";
  @SerializedName(SERIALIZED_NAME_TOTAL_UN_ASSIGNED_SHARDS)
  private String totalUnAssignedShards;

  public static final String SERIALIZED_NAME_ENVIRONMENT_INFORMATION = "EnvironmentInformation";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_INFORMATION)
  private List environmentInformation;

  public DescribeDomainHealthResponse() {
  }

  public DescribeDomainHealthResponse domainState(DomainState domainState) {
    this.domainState = domainState;
    return this;
  }

  /**
   * Get domainState
   * @return domainState
   */
  @javax.annotation.Nullable
  public DomainState getDomainState() {
    return domainState;
  }

  public void setDomainState(DomainState domainState) {
    this.domainState = domainState;
  }


  public DescribeDomainHealthResponse availabilityZoneCount(String availabilityZoneCount) {
    this.availabilityZoneCount = availabilityZoneCount;
    return this;
  }

  /**
   * Get availabilityZoneCount
   * @return availabilityZoneCount
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneCount() {
    return availabilityZoneCount;
  }

  public void setAvailabilityZoneCount(String availabilityZoneCount) {
    this.availabilityZoneCount = availabilityZoneCount;
  }


  public DescribeDomainHealthResponse activeAvailabilityZoneCount(String activeAvailabilityZoneCount) {
    this.activeAvailabilityZoneCount = activeAvailabilityZoneCount;
    return this;
  }

  /**
   * Get activeAvailabilityZoneCount
   * @return activeAvailabilityZoneCount
   */
  @javax.annotation.Nullable
  public String getActiveAvailabilityZoneCount() {
    return activeAvailabilityZoneCount;
  }

  public void setActiveAvailabilityZoneCount(String activeAvailabilityZoneCount) {
    this.activeAvailabilityZoneCount = activeAvailabilityZoneCount;
  }


  public DescribeDomainHealthResponse standByAvailabilityZoneCount(String standByAvailabilityZoneCount) {
    this.standByAvailabilityZoneCount = standByAvailabilityZoneCount;
    return this;
  }

  /**
   * Get standByAvailabilityZoneCount
   * @return standByAvailabilityZoneCount
   */
  @javax.annotation.Nullable
  public String getStandByAvailabilityZoneCount() {
    return standByAvailabilityZoneCount;
  }

  public void setStandByAvailabilityZoneCount(String standByAvailabilityZoneCount) {
    this.standByAvailabilityZoneCount = standByAvailabilityZoneCount;
  }


  public DescribeDomainHealthResponse dataNodeCount(String dataNodeCount) {
    this.dataNodeCount = dataNodeCount;
    return this;
  }

  /**
   * Get dataNodeCount
   * @return dataNodeCount
   */
  @javax.annotation.Nullable
  public String getDataNodeCount() {
    return dataNodeCount;
  }

  public void setDataNodeCount(String dataNodeCount) {
    this.dataNodeCount = dataNodeCount;
  }


  public DescribeDomainHealthResponse dedicatedMaster(Boolean dedicatedMaster) {
    this.dedicatedMaster = dedicatedMaster;
    return this;
  }

  /**
   * Get dedicatedMaster
   * @return dedicatedMaster
   */
  @javax.annotation.Nullable
  public Boolean getDedicatedMaster() {
    return dedicatedMaster;
  }

  public void setDedicatedMaster(Boolean dedicatedMaster) {
    this.dedicatedMaster = dedicatedMaster;
  }


  public DescribeDomainHealthResponse masterEligibleNodeCount(String masterEligibleNodeCount) {
    this.masterEligibleNodeCount = masterEligibleNodeCount;
    return this;
  }

  /**
   * Get masterEligibleNodeCount
   * @return masterEligibleNodeCount
   */
  @javax.annotation.Nullable
  public String getMasterEligibleNodeCount() {
    return masterEligibleNodeCount;
  }

  public void setMasterEligibleNodeCount(String masterEligibleNodeCount) {
    this.masterEligibleNodeCount = masterEligibleNodeCount;
  }


  public DescribeDomainHealthResponse warmNodeCount(String warmNodeCount) {
    this.warmNodeCount = warmNodeCount;
    return this;
  }

  /**
   * Get warmNodeCount
   * @return warmNodeCount
   */
  @javax.annotation.Nullable
  public String getWarmNodeCount() {
    return warmNodeCount;
  }

  public void setWarmNodeCount(String warmNodeCount) {
    this.warmNodeCount = warmNodeCount;
  }


  public DescribeDomainHealthResponse masterNode(MasterNodeStatus masterNode) {
    this.masterNode = masterNode;
    return this;
  }

  /**
   * Get masterNode
   * @return masterNode
   */
  @javax.annotation.Nullable
  public MasterNodeStatus getMasterNode() {
    return masterNode;
  }

  public void setMasterNode(MasterNodeStatus masterNode) {
    this.masterNode = masterNode;
  }


  public DescribeDomainHealthResponse clusterHealth(DomainHealth clusterHealth) {
    this.clusterHealth = clusterHealth;
    return this;
  }

  /**
   * Get clusterHealth
   * @return clusterHealth
   */
  @javax.annotation.Nullable
  public DomainHealth getClusterHealth() {
    return clusterHealth;
  }

  public void setClusterHealth(DomainHealth clusterHealth) {
    this.clusterHealth = clusterHealth;
  }


  public DescribeDomainHealthResponse totalShards(String totalShards) {
    this.totalShards = totalShards;
    return this;
  }

  /**
   * Get totalShards
   * @return totalShards
   */
  @javax.annotation.Nullable
  public String getTotalShards() {
    return totalShards;
  }

  public void setTotalShards(String totalShards) {
    this.totalShards = totalShards;
  }


  public DescribeDomainHealthResponse totalUnAssignedShards(String totalUnAssignedShards) {
    this.totalUnAssignedShards = totalUnAssignedShards;
    return this;
  }

  /**
   * Get totalUnAssignedShards
   * @return totalUnAssignedShards
   */
  @javax.annotation.Nullable
  public String getTotalUnAssignedShards() {
    return totalUnAssignedShards;
  }

  public void setTotalUnAssignedShards(String totalUnAssignedShards) {
    this.totalUnAssignedShards = totalUnAssignedShards;
  }


  public DescribeDomainHealthResponse environmentInformation(List environmentInformation) {
    this.environmentInformation = environmentInformation;
    return this;
  }

  /**
   * Get environmentInformation
   * @return environmentInformation
   */
  @javax.annotation.Nullable
  public List getEnvironmentInformation() {
    return environmentInformation;
  }

  public void setEnvironmentInformation(List environmentInformation) {
    this.environmentInformation = environmentInformation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDomainHealthResponse describeDomainHealthResponse = (DescribeDomainHealthResponse) o;
    return Objects.equals(this.domainState, describeDomainHealthResponse.domainState) &&
        Objects.equals(this.availabilityZoneCount, describeDomainHealthResponse.availabilityZoneCount) &&
        Objects.equals(this.activeAvailabilityZoneCount, describeDomainHealthResponse.activeAvailabilityZoneCount) &&
        Objects.equals(this.standByAvailabilityZoneCount, describeDomainHealthResponse.standByAvailabilityZoneCount) &&
        Objects.equals(this.dataNodeCount, describeDomainHealthResponse.dataNodeCount) &&
        Objects.equals(this.dedicatedMaster, describeDomainHealthResponse.dedicatedMaster) &&
        Objects.equals(this.masterEligibleNodeCount, describeDomainHealthResponse.masterEligibleNodeCount) &&
        Objects.equals(this.warmNodeCount, describeDomainHealthResponse.warmNodeCount) &&
        Objects.equals(this.masterNode, describeDomainHealthResponse.masterNode) &&
        Objects.equals(this.clusterHealth, describeDomainHealthResponse.clusterHealth) &&
        Objects.equals(this.totalShards, describeDomainHealthResponse.totalShards) &&
        Objects.equals(this.totalUnAssignedShards, describeDomainHealthResponse.totalUnAssignedShards) &&
        Objects.equals(this.environmentInformation, describeDomainHealthResponse.environmentInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainState, availabilityZoneCount, activeAvailabilityZoneCount, standByAvailabilityZoneCount, dataNodeCount, dedicatedMaster, masterEligibleNodeCount, warmNodeCount, masterNode, clusterHealth, totalShards, totalUnAssignedShards, environmentInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDomainHealthResponse {\n");
    sb.append("    domainState: ").append(toIndentedString(domainState)).append("\n");
    sb.append("    availabilityZoneCount: ").append(toIndentedString(availabilityZoneCount)).append("\n");
    sb.append("    activeAvailabilityZoneCount: ").append(toIndentedString(activeAvailabilityZoneCount)).append("\n");
    sb.append("    standByAvailabilityZoneCount: ").append(toIndentedString(standByAvailabilityZoneCount)).append("\n");
    sb.append("    dataNodeCount: ").append(toIndentedString(dataNodeCount)).append("\n");
    sb.append("    dedicatedMaster: ").append(toIndentedString(dedicatedMaster)).append("\n");
    sb.append("    masterEligibleNodeCount: ").append(toIndentedString(masterEligibleNodeCount)).append("\n");
    sb.append("    warmNodeCount: ").append(toIndentedString(warmNodeCount)).append("\n");
    sb.append("    masterNode: ").append(toIndentedString(masterNode)).append("\n");
    sb.append("    clusterHealth: ").append(toIndentedString(clusterHealth)).append("\n");
    sb.append("    totalShards: ").append(toIndentedString(totalShards)).append("\n");
    sb.append("    totalUnAssignedShards: ").append(toIndentedString(totalUnAssignedShards)).append("\n");
    sb.append("    environmentInformation: ").append(toIndentedString(environmentInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainState");
    openapiFields.add("AvailabilityZoneCount");
    openapiFields.add("ActiveAvailabilityZoneCount");
    openapiFields.add("StandByAvailabilityZoneCount");
    openapiFields.add("DataNodeCount");
    openapiFields.add("DedicatedMaster");
    openapiFields.add("MasterEligibleNodeCount");
    openapiFields.add("WarmNodeCount");
    openapiFields.add("MasterNode");
    openapiFields.add("ClusterHealth");
    openapiFields.add("TotalShards");
    openapiFields.add("TotalUnAssignedShards");
    openapiFields.add("EnvironmentInformation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDomainHealthResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDomainHealthResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDomainHealthResponse is not found in the empty JSON string", DescribeDomainHealthResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDomainHealthResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDomainHealthResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DomainState`
      if (jsonObj.get("DomainState") != null && !jsonObj.get("DomainState").isJsonNull()) {
        DomainState.validateJsonElement(jsonObj.get("DomainState"));
      }
      // validate the optional field `AvailabilityZoneCount`
      if (jsonObj.get("AvailabilityZoneCount") != null && !jsonObj.get("AvailabilityZoneCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZoneCount"));
      }
      // validate the optional field `ActiveAvailabilityZoneCount`
      if (jsonObj.get("ActiveAvailabilityZoneCount") != null && !jsonObj.get("ActiveAvailabilityZoneCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ActiveAvailabilityZoneCount"));
      }
      // validate the optional field `StandByAvailabilityZoneCount`
      if (jsonObj.get("StandByAvailabilityZoneCount") != null && !jsonObj.get("StandByAvailabilityZoneCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StandByAvailabilityZoneCount"));
      }
      // validate the optional field `DataNodeCount`
      if (jsonObj.get("DataNodeCount") != null && !jsonObj.get("DataNodeCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DataNodeCount"));
      }
      // validate the optional field `DedicatedMaster`
      if (jsonObj.get("DedicatedMaster") != null && !jsonObj.get("DedicatedMaster").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DedicatedMaster"));
      }
      // validate the optional field `MasterEligibleNodeCount`
      if (jsonObj.get("MasterEligibleNodeCount") != null && !jsonObj.get("MasterEligibleNodeCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterEligibleNodeCount"));
      }
      // validate the optional field `WarmNodeCount`
      if (jsonObj.get("WarmNodeCount") != null && !jsonObj.get("WarmNodeCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("WarmNodeCount"));
      }
      // validate the optional field `MasterNode`
      if (jsonObj.get("MasterNode") != null && !jsonObj.get("MasterNode").isJsonNull()) {
        MasterNodeStatus.validateJsonElement(jsonObj.get("MasterNode"));
      }
      // validate the optional field `ClusterHealth`
      if (jsonObj.get("ClusterHealth") != null && !jsonObj.get("ClusterHealth").isJsonNull()) {
        DomainHealth.validateJsonElement(jsonObj.get("ClusterHealth"));
      }
      // validate the optional field `TotalShards`
      if (jsonObj.get("TotalShards") != null && !jsonObj.get("TotalShards").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalShards"));
      }
      // validate the optional field `TotalUnAssignedShards`
      if (jsonObj.get("TotalUnAssignedShards") != null && !jsonObj.get("TotalUnAssignedShards").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalUnAssignedShards"));
      }
      // validate the optional field `EnvironmentInformation`
      if (jsonObj.get("EnvironmentInformation") != null && !jsonObj.get("EnvironmentInformation").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("EnvironmentInformation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDomainHealthResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDomainHealthResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDomainHealthResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDomainHealthResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDomainHealthResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDomainHealthResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDomainHealthResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDomainHealthResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDomainHealthResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDomainHealthResponse
   */
  public static DescribeDomainHealthResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDomainHealthResponse.class);
  }

  /**
   * Convert an instance of DescribeDomainHealthResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

