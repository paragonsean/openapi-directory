/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConnectionMode;
import org.openapitools.client.model.CreateOutboundConnectionResponseLocalDomainInfo;
import org.openapitools.client.model.CreateOutboundConnectionResponseRemoteDomainInfo;
import org.openapitools.client.model.InboundConnectionConnectionStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AcceptInboundConnectionResponseConnection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AcceptInboundConnectionResponseConnection {
  public static final String SERIALIZED_NAME_LOCAL_DOMAIN_INFO = "LocalDomainInfo";
  @SerializedName(SERIALIZED_NAME_LOCAL_DOMAIN_INFO)
  private CreateOutboundConnectionResponseLocalDomainInfo localDomainInfo;

  public static final String SERIALIZED_NAME_REMOTE_DOMAIN_INFO = "RemoteDomainInfo";
  @SerializedName(SERIALIZED_NAME_REMOTE_DOMAIN_INFO)
  private CreateOutboundConnectionResponseRemoteDomainInfo remoteDomainInfo;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "ConnectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_CONNECTION_STATUS = "ConnectionStatus";
  @SerializedName(SERIALIZED_NAME_CONNECTION_STATUS)
  private InboundConnectionConnectionStatus connectionStatus;

  public static final String SERIALIZED_NAME_CONNECTION_MODE = "ConnectionMode";
  @SerializedName(SERIALIZED_NAME_CONNECTION_MODE)
  private ConnectionMode connectionMode;

  public AcceptInboundConnectionResponseConnection() {
  }

  public AcceptInboundConnectionResponseConnection localDomainInfo(CreateOutboundConnectionResponseLocalDomainInfo localDomainInfo) {
    this.localDomainInfo = localDomainInfo;
    return this;
  }

  /**
   * Get localDomainInfo
   * @return localDomainInfo
   */
  @javax.annotation.Nullable
  public CreateOutboundConnectionResponseLocalDomainInfo getLocalDomainInfo() {
    return localDomainInfo;
  }

  public void setLocalDomainInfo(CreateOutboundConnectionResponseLocalDomainInfo localDomainInfo) {
    this.localDomainInfo = localDomainInfo;
  }


  public AcceptInboundConnectionResponseConnection remoteDomainInfo(CreateOutboundConnectionResponseRemoteDomainInfo remoteDomainInfo) {
    this.remoteDomainInfo = remoteDomainInfo;
    return this;
  }

  /**
   * Get remoteDomainInfo
   * @return remoteDomainInfo
   */
  @javax.annotation.Nullable
  public CreateOutboundConnectionResponseRemoteDomainInfo getRemoteDomainInfo() {
    return remoteDomainInfo;
  }

  public void setRemoteDomainInfo(CreateOutboundConnectionResponseRemoteDomainInfo remoteDomainInfo) {
    this.remoteDomainInfo = remoteDomainInfo;
  }


  public AcceptInboundConnectionResponseConnection connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public AcceptInboundConnectionResponseConnection connectionStatus(InboundConnectionConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  /**
   * Get connectionStatus
   * @return connectionStatus
   */
  @javax.annotation.Nullable
  public InboundConnectionConnectionStatus getConnectionStatus() {
    return connectionStatus;
  }

  public void setConnectionStatus(InboundConnectionConnectionStatus connectionStatus) {
    this.connectionStatus = connectionStatus;
  }


  public AcceptInboundConnectionResponseConnection connectionMode(ConnectionMode connectionMode) {
    this.connectionMode = connectionMode;
    return this;
  }

  /**
   * Get connectionMode
   * @return connectionMode
   */
  @javax.annotation.Nullable
  public ConnectionMode getConnectionMode() {
    return connectionMode;
  }

  public void setConnectionMode(ConnectionMode connectionMode) {
    this.connectionMode = connectionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AcceptInboundConnectionResponseConnection acceptInboundConnectionResponseConnection = (AcceptInboundConnectionResponseConnection) o;
    return Objects.equals(this.localDomainInfo, acceptInboundConnectionResponseConnection.localDomainInfo) &&
        Objects.equals(this.remoteDomainInfo, acceptInboundConnectionResponseConnection.remoteDomainInfo) &&
        Objects.equals(this.connectionId, acceptInboundConnectionResponseConnection.connectionId) &&
        Objects.equals(this.connectionStatus, acceptInboundConnectionResponseConnection.connectionStatus) &&
        Objects.equals(this.connectionMode, acceptInboundConnectionResponseConnection.connectionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localDomainInfo, remoteDomainInfo, connectionId, connectionStatus, connectionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AcceptInboundConnectionResponseConnection {\n");
    sb.append("    localDomainInfo: ").append(toIndentedString(localDomainInfo)).append("\n");
    sb.append("    remoteDomainInfo: ").append(toIndentedString(remoteDomainInfo)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    connectionMode: ").append(toIndentedString(connectionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocalDomainInfo");
    openapiFields.add("RemoteDomainInfo");
    openapiFields.add("ConnectionId");
    openapiFields.add("ConnectionStatus");
    openapiFields.add("ConnectionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AcceptInboundConnectionResponseConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AcceptInboundConnectionResponseConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AcceptInboundConnectionResponseConnection is not found in the empty JSON string", AcceptInboundConnectionResponseConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AcceptInboundConnectionResponseConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AcceptInboundConnectionResponseConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LocalDomainInfo`
      if (jsonObj.get("LocalDomainInfo") != null && !jsonObj.get("LocalDomainInfo").isJsonNull()) {
        CreateOutboundConnectionResponseLocalDomainInfo.validateJsonElement(jsonObj.get("LocalDomainInfo"));
      }
      // validate the optional field `RemoteDomainInfo`
      if (jsonObj.get("RemoteDomainInfo") != null && !jsonObj.get("RemoteDomainInfo").isJsonNull()) {
        CreateOutboundConnectionResponseRemoteDomainInfo.validateJsonElement(jsonObj.get("RemoteDomainInfo"));
      }
      // validate the optional field `ConnectionId`
      if (jsonObj.get("ConnectionId") != null && !jsonObj.get("ConnectionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionId"));
      }
      // validate the optional field `ConnectionStatus`
      if (jsonObj.get("ConnectionStatus") != null && !jsonObj.get("ConnectionStatus").isJsonNull()) {
        InboundConnectionConnectionStatus.validateJsonElement(jsonObj.get("ConnectionStatus"));
      }
      // validate the optional field `ConnectionMode`
      if (jsonObj.get("ConnectionMode") != null && !jsonObj.get("ConnectionMode").isJsonNull()) {
        ConnectionMode.validateJsonElement(jsonObj.get("ConnectionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AcceptInboundConnectionResponseConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AcceptInboundConnectionResponseConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AcceptInboundConnectionResponseConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AcceptInboundConnectionResponseConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<AcceptInboundConnectionResponseConnection>() {
           @Override
           public void write(JsonWriter out, AcceptInboundConnectionResponseConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AcceptInboundConnectionResponseConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AcceptInboundConnectionResponseConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AcceptInboundConnectionResponseConnection
   * @throws IOException if the JSON string is invalid with respect to AcceptInboundConnectionResponseConnection
   */
  public static AcceptInboundConnectionResponseConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AcceptInboundConnectionResponseConnection.class);
  }

  /**
   * Convert an instance of AcceptInboundConnectionResponseConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

