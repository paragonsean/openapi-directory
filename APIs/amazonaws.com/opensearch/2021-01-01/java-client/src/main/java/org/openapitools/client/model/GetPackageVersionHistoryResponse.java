/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for response returned by &lt;code&gt;GetPackageVersionHistory&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPackageVersionHistoryResponse {
  public static final String SERIALIZED_NAME_PACKAGE_I_D = "PackageID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_I_D)
  private String packageID;

  public static final String SERIALIZED_NAME_PACKAGE_VERSION_HISTORY_LIST = "PackageVersionHistoryList";
  @SerializedName(SERIALIZED_NAME_PACKAGE_VERSION_HISTORY_LIST)
  private List packageVersionHistoryList;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public GetPackageVersionHistoryResponse() {
  }

  public GetPackageVersionHistoryResponse packageID(String packageID) {
    this.packageID = packageID;
    return this;
  }

  /**
   * Get packageID
   * @return packageID
   */
  @javax.annotation.Nullable
  public String getPackageID() {
    return packageID;
  }

  public void setPackageID(String packageID) {
    this.packageID = packageID;
  }


  public GetPackageVersionHistoryResponse packageVersionHistoryList(List packageVersionHistoryList) {
    this.packageVersionHistoryList = packageVersionHistoryList;
    return this;
  }

  /**
   * Get packageVersionHistoryList
   * @return packageVersionHistoryList
   */
  @javax.annotation.Nullable
  public List getPackageVersionHistoryList() {
    return packageVersionHistoryList;
  }

  public void setPackageVersionHistoryList(List packageVersionHistoryList) {
    this.packageVersionHistoryList = packageVersionHistoryList;
  }


  public GetPackageVersionHistoryResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPackageVersionHistoryResponse getPackageVersionHistoryResponse = (GetPackageVersionHistoryResponse) o;
    return Objects.equals(this.packageID, getPackageVersionHistoryResponse.packageID) &&
        Objects.equals(this.packageVersionHistoryList, getPackageVersionHistoryResponse.packageVersionHistoryList) &&
        Objects.equals(this.nextToken, getPackageVersionHistoryResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageID, packageVersionHistoryList, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPackageVersionHistoryResponse {\n");
    sb.append("    packageID: ").append(toIndentedString(packageID)).append("\n");
    sb.append("    packageVersionHistoryList: ").append(toIndentedString(packageVersionHistoryList)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PackageID");
    openapiFields.add("PackageVersionHistoryList");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPackageVersionHistoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPackageVersionHistoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPackageVersionHistoryResponse is not found in the empty JSON string", GetPackageVersionHistoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPackageVersionHistoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPackageVersionHistoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PackageID`
      if (jsonObj.get("PackageID") != null && !jsonObj.get("PackageID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageID"));
      }
      // validate the optional field `PackageVersionHistoryList`
      if (jsonObj.get("PackageVersionHistoryList") != null && !jsonObj.get("PackageVersionHistoryList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PackageVersionHistoryList"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPackageVersionHistoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPackageVersionHistoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPackageVersionHistoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPackageVersionHistoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPackageVersionHistoryResponse>() {
           @Override
           public void write(JsonWriter out, GetPackageVersionHistoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPackageVersionHistoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPackageVersionHistoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPackageVersionHistoryResponse
   * @throws IOException if the JSON string is invalid with respect to GetPackageVersionHistoryResponse
   */
  public static GetPackageVersionHistoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPackageVersionHistoryResponse.class);
  }

  /**
   * Convert an instance of GetPackageVersionHistoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

