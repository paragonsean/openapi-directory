/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SAMLOptionsInputIdp;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The SAML authentication configuration for an Amazon OpenSearch Service domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SAMLOptionsInput {
  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_IDP = "Idp";
  @SerializedName(SERIALIZED_NAME_IDP)
  private SAMLOptionsInputIdp idp;

  public static final String SERIALIZED_NAME_MASTER_USER_NAME = "MasterUserName";
  @SerializedName(SERIALIZED_NAME_MASTER_USER_NAME)
  private String masterUserName;

  public static final String SERIALIZED_NAME_MASTER_BACKEND_ROLE = "MasterBackendRole";
  @SerializedName(SERIALIZED_NAME_MASTER_BACKEND_ROLE)
  private String masterBackendRole;

  public static final String SERIALIZED_NAME_SUBJECT_KEY = "SubjectKey";
  @SerializedName(SERIALIZED_NAME_SUBJECT_KEY)
  private String subjectKey;

  public static final String SERIALIZED_NAME_ROLES_KEY = "RolesKey";
  @SerializedName(SERIALIZED_NAME_ROLES_KEY)
  private String rolesKey;

  public static final String SERIALIZED_NAME_SESSION_TIMEOUT_MINUTES = "SessionTimeoutMinutes";
  @SerializedName(SERIALIZED_NAME_SESSION_TIMEOUT_MINUTES)
  private Integer sessionTimeoutMinutes;

  public SAMLOptionsInput() {
  }

  public SAMLOptionsInput enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public SAMLOptionsInput idp(SAMLOptionsInputIdp idp) {
    this.idp = idp;
    return this;
  }

  /**
   * Get idp
   * @return idp
   */
  @javax.annotation.Nullable
  public SAMLOptionsInputIdp getIdp() {
    return idp;
  }

  public void setIdp(SAMLOptionsInputIdp idp) {
    this.idp = idp;
  }


  public SAMLOptionsInput masterUserName(String masterUserName) {
    this.masterUserName = masterUserName;
    return this;
  }

  /**
   * Get masterUserName
   * @return masterUserName
   */
  @javax.annotation.Nullable
  public String getMasterUserName() {
    return masterUserName;
  }

  public void setMasterUserName(String masterUserName) {
    this.masterUserName = masterUserName;
  }


  public SAMLOptionsInput masterBackendRole(String masterBackendRole) {
    this.masterBackendRole = masterBackendRole;
    return this;
  }

  /**
   * Get masterBackendRole
   * @return masterBackendRole
   */
  @javax.annotation.Nullable
  public String getMasterBackendRole() {
    return masterBackendRole;
  }

  public void setMasterBackendRole(String masterBackendRole) {
    this.masterBackendRole = masterBackendRole;
  }


  public SAMLOptionsInput subjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

  /**
   * Get subjectKey
   * @return subjectKey
   */
  @javax.annotation.Nullable
  public String getSubjectKey() {
    return subjectKey;
  }

  public void setSubjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
  }


  public SAMLOptionsInput rolesKey(String rolesKey) {
    this.rolesKey = rolesKey;
    return this;
  }

  /**
   * Get rolesKey
   * @return rolesKey
   */
  @javax.annotation.Nullable
  public String getRolesKey() {
    return rolesKey;
  }

  public void setRolesKey(String rolesKey) {
    this.rolesKey = rolesKey;
  }


  public SAMLOptionsInput sessionTimeoutMinutes(Integer sessionTimeoutMinutes) {
    this.sessionTimeoutMinutes = sessionTimeoutMinutes;
    return this;
  }

  /**
   * Get sessionTimeoutMinutes
   * @return sessionTimeoutMinutes
   */
  @javax.annotation.Nullable
  public Integer getSessionTimeoutMinutes() {
    return sessionTimeoutMinutes;
  }

  public void setSessionTimeoutMinutes(Integer sessionTimeoutMinutes) {
    this.sessionTimeoutMinutes = sessionTimeoutMinutes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAMLOptionsInput saMLOptionsInput = (SAMLOptionsInput) o;
    return Objects.equals(this.enabled, saMLOptionsInput.enabled) &&
        Objects.equals(this.idp, saMLOptionsInput.idp) &&
        Objects.equals(this.masterUserName, saMLOptionsInput.masterUserName) &&
        Objects.equals(this.masterBackendRole, saMLOptionsInput.masterBackendRole) &&
        Objects.equals(this.subjectKey, saMLOptionsInput.subjectKey) &&
        Objects.equals(this.rolesKey, saMLOptionsInput.rolesKey) &&
        Objects.equals(this.sessionTimeoutMinutes, saMLOptionsInput.sessionTimeoutMinutes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, idp, masterUserName, masterBackendRole, subjectKey, rolesKey, sessionTimeoutMinutes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAMLOptionsInput {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    idp: ").append(toIndentedString(idp)).append("\n");
    sb.append("    masterUserName: ").append(toIndentedString(masterUserName)).append("\n");
    sb.append("    masterBackendRole: ").append(toIndentedString(masterBackendRole)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    rolesKey: ").append(toIndentedString(rolesKey)).append("\n");
    sb.append("    sessionTimeoutMinutes: ").append(toIndentedString(sessionTimeoutMinutes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Enabled");
    openapiFields.add("Idp");
    openapiFields.add("MasterUserName");
    openapiFields.add("MasterBackendRole");
    openapiFields.add("SubjectKey");
    openapiFields.add("RolesKey");
    openapiFields.add("SessionTimeoutMinutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SAMLOptionsInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SAMLOptionsInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SAMLOptionsInput is not found in the empty JSON string", SAMLOptionsInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SAMLOptionsInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SAMLOptionsInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the optional field `Idp`
      if (jsonObj.get("Idp") != null && !jsonObj.get("Idp").isJsonNull()) {
        SAMLOptionsInputIdp.validateJsonElement(jsonObj.get("Idp"));
      }
      // validate the optional field `MasterUserName`
      if (jsonObj.get("MasterUserName") != null && !jsonObj.get("MasterUserName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterUserName"));
      }
      // validate the optional field `MasterBackendRole`
      if (jsonObj.get("MasterBackendRole") != null && !jsonObj.get("MasterBackendRole").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MasterBackendRole"));
      }
      // validate the optional field `SubjectKey`
      if (jsonObj.get("SubjectKey") != null && !jsonObj.get("SubjectKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SubjectKey"));
      }
      // validate the optional field `RolesKey`
      if (jsonObj.get("RolesKey") != null && !jsonObj.get("RolesKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RolesKey"));
      }
      // validate the optional field `SessionTimeoutMinutes`
      if (jsonObj.get("SessionTimeoutMinutes") != null && !jsonObj.get("SessionTimeoutMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SessionTimeoutMinutes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SAMLOptionsInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SAMLOptionsInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SAMLOptionsInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SAMLOptionsInput.class));

       return (TypeAdapter<T>) new TypeAdapter<SAMLOptionsInput>() {
           @Override
           public void write(JsonWriter out, SAMLOptionsInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SAMLOptionsInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SAMLOptionsInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SAMLOptionsInput
   * @throws IOException if the JSON string is invalid with respect to SAMLOptionsInput
   */
  public static SAMLOptionsInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SAMLOptionsInput.class);
  }

  /**
   * Convert an instance of SAMLOptionsInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

