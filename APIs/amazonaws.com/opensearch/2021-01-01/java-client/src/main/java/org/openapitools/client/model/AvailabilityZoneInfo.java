/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ZoneStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an Availability Zone on a domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailabilityZoneInfo {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_NAME = "AvailabilityZoneName";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_NAME)
  private String availabilityZoneName;

  public static final String SERIALIZED_NAME_ZONE_STATUS = "ZoneStatus";
  @SerializedName(SERIALIZED_NAME_ZONE_STATUS)
  private ZoneStatus zoneStatus;

  public static final String SERIALIZED_NAME_CONFIGURED_DATA_NODE_COUNT = "ConfiguredDataNodeCount";
  @SerializedName(SERIALIZED_NAME_CONFIGURED_DATA_NODE_COUNT)
  private String configuredDataNodeCount;

  public static final String SERIALIZED_NAME_AVAILABLE_DATA_NODE_COUNT = "AvailableDataNodeCount";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_DATA_NODE_COUNT)
  private String availableDataNodeCount;

  public static final String SERIALIZED_NAME_TOTAL_SHARDS = "TotalShards";
  @SerializedName(SERIALIZED_NAME_TOTAL_SHARDS)
  private String totalShards;

  public static final String SERIALIZED_NAME_TOTAL_UN_ASSIGNED_SHARDS = "TotalUnAssignedShards";
  @SerializedName(SERIALIZED_NAME_TOTAL_UN_ASSIGNED_SHARDS)
  private String totalUnAssignedShards;

  public AvailabilityZoneInfo() {
  }

  public AvailabilityZoneInfo availabilityZoneName(String availabilityZoneName) {
    this.availabilityZoneName = availabilityZoneName;
    return this;
  }

  /**
   * Get availabilityZoneName
   * @return availabilityZoneName
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneName() {
    return availabilityZoneName;
  }

  public void setAvailabilityZoneName(String availabilityZoneName) {
    this.availabilityZoneName = availabilityZoneName;
  }


  public AvailabilityZoneInfo zoneStatus(ZoneStatus zoneStatus) {
    this.zoneStatus = zoneStatus;
    return this;
  }

  /**
   * Get zoneStatus
   * @return zoneStatus
   */
  @javax.annotation.Nullable
  public ZoneStatus getZoneStatus() {
    return zoneStatus;
  }

  public void setZoneStatus(ZoneStatus zoneStatus) {
    this.zoneStatus = zoneStatus;
  }


  public AvailabilityZoneInfo configuredDataNodeCount(String configuredDataNodeCount) {
    this.configuredDataNodeCount = configuredDataNodeCount;
    return this;
  }

  /**
   * Get configuredDataNodeCount
   * @return configuredDataNodeCount
   */
  @javax.annotation.Nullable
  public String getConfiguredDataNodeCount() {
    return configuredDataNodeCount;
  }

  public void setConfiguredDataNodeCount(String configuredDataNodeCount) {
    this.configuredDataNodeCount = configuredDataNodeCount;
  }


  public AvailabilityZoneInfo availableDataNodeCount(String availableDataNodeCount) {
    this.availableDataNodeCount = availableDataNodeCount;
    return this;
  }

  /**
   * Get availableDataNodeCount
   * @return availableDataNodeCount
   */
  @javax.annotation.Nullable
  public String getAvailableDataNodeCount() {
    return availableDataNodeCount;
  }

  public void setAvailableDataNodeCount(String availableDataNodeCount) {
    this.availableDataNodeCount = availableDataNodeCount;
  }


  public AvailabilityZoneInfo totalShards(String totalShards) {
    this.totalShards = totalShards;
    return this;
  }

  /**
   * Get totalShards
   * @return totalShards
   */
  @javax.annotation.Nullable
  public String getTotalShards() {
    return totalShards;
  }

  public void setTotalShards(String totalShards) {
    this.totalShards = totalShards;
  }


  public AvailabilityZoneInfo totalUnAssignedShards(String totalUnAssignedShards) {
    this.totalUnAssignedShards = totalUnAssignedShards;
    return this;
  }

  /**
   * Get totalUnAssignedShards
   * @return totalUnAssignedShards
   */
  @javax.annotation.Nullable
  public String getTotalUnAssignedShards() {
    return totalUnAssignedShards;
  }

  public void setTotalUnAssignedShards(String totalUnAssignedShards) {
    this.totalUnAssignedShards = totalUnAssignedShards;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityZoneInfo availabilityZoneInfo = (AvailabilityZoneInfo) o;
    return Objects.equals(this.availabilityZoneName, availabilityZoneInfo.availabilityZoneName) &&
        Objects.equals(this.zoneStatus, availabilityZoneInfo.zoneStatus) &&
        Objects.equals(this.configuredDataNodeCount, availabilityZoneInfo.configuredDataNodeCount) &&
        Objects.equals(this.availableDataNodeCount, availabilityZoneInfo.availableDataNodeCount) &&
        Objects.equals(this.totalShards, availabilityZoneInfo.totalShards) &&
        Objects.equals(this.totalUnAssignedShards, availabilityZoneInfo.totalUnAssignedShards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZoneName, zoneStatus, configuredDataNodeCount, availableDataNodeCount, totalShards, totalUnAssignedShards);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityZoneInfo {\n");
    sb.append("    availabilityZoneName: ").append(toIndentedString(availabilityZoneName)).append("\n");
    sb.append("    zoneStatus: ").append(toIndentedString(zoneStatus)).append("\n");
    sb.append("    configuredDataNodeCount: ").append(toIndentedString(configuredDataNodeCount)).append("\n");
    sb.append("    availableDataNodeCount: ").append(toIndentedString(availableDataNodeCount)).append("\n");
    sb.append("    totalShards: ").append(toIndentedString(totalShards)).append("\n");
    sb.append("    totalUnAssignedShards: ").append(toIndentedString(totalUnAssignedShards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AvailabilityZoneName");
    openapiFields.add("ZoneStatus");
    openapiFields.add("ConfiguredDataNodeCount");
    openapiFields.add("AvailableDataNodeCount");
    openapiFields.add("TotalShards");
    openapiFields.add("TotalUnAssignedShards");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailabilityZoneInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailabilityZoneInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailabilityZoneInfo is not found in the empty JSON string", AvailabilityZoneInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailabilityZoneInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailabilityZoneInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AvailabilityZoneName`
      if (jsonObj.get("AvailabilityZoneName") != null && !jsonObj.get("AvailabilityZoneName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZoneName"));
      }
      // validate the optional field `ZoneStatus`
      if (jsonObj.get("ZoneStatus") != null && !jsonObj.get("ZoneStatus").isJsonNull()) {
        ZoneStatus.validateJsonElement(jsonObj.get("ZoneStatus"));
      }
      // validate the optional field `ConfiguredDataNodeCount`
      if (jsonObj.get("ConfiguredDataNodeCount") != null && !jsonObj.get("ConfiguredDataNodeCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfiguredDataNodeCount"));
      }
      // validate the optional field `AvailableDataNodeCount`
      if (jsonObj.get("AvailableDataNodeCount") != null && !jsonObj.get("AvailableDataNodeCount").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailableDataNodeCount"));
      }
      // validate the optional field `TotalShards`
      if (jsonObj.get("TotalShards") != null && !jsonObj.get("TotalShards").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalShards"));
      }
      // validate the optional field `TotalUnAssignedShards`
      if (jsonObj.get("TotalUnAssignedShards") != null && !jsonObj.get("TotalUnAssignedShards").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TotalUnAssignedShards"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailabilityZoneInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailabilityZoneInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailabilityZoneInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailabilityZoneInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailabilityZoneInfo>() {
           @Override
           public void write(JsonWriter out, AvailabilityZoneInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailabilityZoneInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailabilityZoneInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailabilityZoneInfo
   * @throws IOException if the JSON string is invalid with respect to AvailabilityZoneInfo
   */
  public static AvailabilityZoneInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailabilityZoneInfo.class);
  }

  /**
   * Convert an instance of AvailabilityZoneInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

