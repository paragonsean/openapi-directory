/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ActionSeverity;
import org.openapitools.client.model.ActionStatus;
import org.openapitools.client.model.ActionType;
import org.openapitools.client.model.ScheduledBy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a scheduled configuration change for an OpenSearch Service domain. This actions can be a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html\&quot;&gt;service software update&lt;/a&gt; or a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html#auto-tune-types\&quot;&gt;blue/green Auto-Tune enhancement&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduledAction {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ActionType type;

  public static final String SERIALIZED_NAME_SEVERITY = "Severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private ActionSeverity severity;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "ScheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private Integer scheduledTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SCHEDULED_BY = "ScheduledBy";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_BY)
  private ScheduledBy scheduledBy;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ActionStatus status;

  public static final String SERIALIZED_NAME_MANDATORY = "Mandatory";
  @SerializedName(SERIALIZED_NAME_MANDATORY)
  private Boolean mandatory;

  public static final String SERIALIZED_NAME_CANCELLABLE = "Cancellable";
  @SerializedName(SERIALIZED_NAME_CANCELLABLE)
  private Boolean cancellable;

  public ScheduledAction() {
  }

  public ScheduledAction id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ScheduledAction type(ActionType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ActionType getType() {
    return type;
  }

  public void setType(ActionType type) {
    this.type = type;
  }


  public ScheduledAction severity(ActionSeverity severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nonnull
  public ActionSeverity getSeverity() {
    return severity;
  }

  public void setSeverity(ActionSeverity severity) {
    this.severity = severity;
  }


  public ScheduledAction scheduledTime(Integer scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Get scheduledTime
   * @return scheduledTime
   */
  @javax.annotation.Nonnull
  public Integer getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(Integer scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public ScheduledAction description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ScheduledAction scheduledBy(ScheduledBy scheduledBy) {
    this.scheduledBy = scheduledBy;
    return this;
  }

  /**
   * Get scheduledBy
   * @return scheduledBy
   */
  @javax.annotation.Nullable
  public ScheduledBy getScheduledBy() {
    return scheduledBy;
  }

  public void setScheduledBy(ScheduledBy scheduledBy) {
    this.scheduledBy = scheduledBy;
  }


  public ScheduledAction status(ActionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ActionStatus getStatus() {
    return status;
  }

  public void setStatus(ActionStatus status) {
    this.status = status;
  }


  public ScheduledAction mandatory(Boolean mandatory) {
    this.mandatory = mandatory;
    return this;
  }

  /**
   * Get mandatory
   * @return mandatory
   */
  @javax.annotation.Nullable
  public Boolean getMandatory() {
    return mandatory;
  }

  public void setMandatory(Boolean mandatory) {
    this.mandatory = mandatory;
  }


  public ScheduledAction cancellable(Boolean cancellable) {
    this.cancellable = cancellable;
    return this;
  }

  /**
   * Get cancellable
   * @return cancellable
   */
  @javax.annotation.Nullable
  public Boolean getCancellable() {
    return cancellable;
  }

  public void setCancellable(Boolean cancellable) {
    this.cancellable = cancellable;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledAction scheduledAction = (ScheduledAction) o;
    return Objects.equals(this.id, scheduledAction.id) &&
        Objects.equals(this.type, scheduledAction.type) &&
        Objects.equals(this.severity, scheduledAction.severity) &&
        Objects.equals(this.scheduledTime, scheduledAction.scheduledTime) &&
        Objects.equals(this.description, scheduledAction.description) &&
        Objects.equals(this.scheduledBy, scheduledAction.scheduledBy) &&
        Objects.equals(this.status, scheduledAction.status) &&
        Objects.equals(this.mandatory, scheduledAction.mandatory) &&
        Objects.equals(this.cancellable, scheduledAction.cancellable);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, severity, scheduledTime, description, scheduledBy, status, mandatory, cancellable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledAction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    scheduledBy: ").append(toIndentedString(scheduledBy)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    mandatory: ").append(toIndentedString(mandatory)).append("\n");
    sb.append("    cancellable: ").append(toIndentedString(cancellable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Type");
    openapiFields.add("Severity");
    openapiFields.add("ScheduledTime");
    openapiFields.add("Description");
    openapiFields.add("ScheduledBy");
    openapiFields.add("Status");
    openapiFields.add("Mandatory");
    openapiFields.add("Cancellable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("Severity");
    openapiRequiredFields.add("ScheduledTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduledAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduledAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledAction is not found in the empty JSON string", ScheduledAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduledAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the required field `Type`
      ActionType.validateJsonElement(jsonObj.get("Type"));
      // validate the required field `Severity`
      ActionSeverity.validateJsonElement(jsonObj.get("Severity"));
      // validate the required field `ScheduledTime`
      Integer.validateJsonElement(jsonObj.get("ScheduledTime"));
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `ScheduledBy`
      if (jsonObj.get("ScheduledBy") != null && !jsonObj.get("ScheduledBy").isJsonNull()) {
        ScheduledBy.validateJsonElement(jsonObj.get("ScheduledBy"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        ActionStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Mandatory`
      if (jsonObj.get("Mandatory") != null && !jsonObj.get("Mandatory").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Mandatory"));
      }
      // validate the optional field `Cancellable`
      if (jsonObj.get("Cancellable") != null && !jsonObj.get("Cancellable").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Cancellable"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledAction.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledAction>() {
           @Override
           public void write(JsonWriter out, ScheduledAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduledAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduledAction
   * @throws IOException if the JSON string is invalid with respect to ScheduledAction
   */
  public static ScheduledAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledAction.class);
  }

  /**
   * Convert an instance of ScheduledAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

