/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DomainPackageDetailsErrorDetails;
import org.openapitools.client.model.PackageStatus;
import org.openapitools.client.model.PackageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePackageResponsePackageDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePackageResponsePackageDetails {
  public static final String SERIALIZED_NAME_PACKAGE_I_D = "PackageID";
  @SerializedName(SERIALIZED_NAME_PACKAGE_I_D)
  private String packageID;

  public static final String SERIALIZED_NAME_PACKAGE_NAME = "PackageName";
  @SerializedName(SERIALIZED_NAME_PACKAGE_NAME)
  private String packageName;

  public static final String SERIALIZED_NAME_PACKAGE_TYPE = "PackageType";
  @SerializedName(SERIALIZED_NAME_PACKAGE_TYPE)
  private PackageType packageType;

  public static final String SERIALIZED_NAME_PACKAGE_DESCRIPTION = "PackageDescription";
  @SerializedName(SERIALIZED_NAME_PACKAGE_DESCRIPTION)
  private String packageDescription;

  public static final String SERIALIZED_NAME_PACKAGE_STATUS = "PackageStatus";
  @SerializedName(SERIALIZED_NAME_PACKAGE_STATUS)
  private PackageStatus packageStatus;

  public static final String SERIALIZED_NAME_CREATED_AT = "CreatedAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "LastUpdatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private OffsetDateTime lastUpdatedAt;

  public static final String SERIALIZED_NAME_AVAILABLE_PACKAGE_VERSION = "AvailablePackageVersion";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_PACKAGE_VERSION)
  private String availablePackageVersion;

  public static final String SERIALIZED_NAME_ERROR_DETAILS = "ErrorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private DomainPackageDetailsErrorDetails errorDetails;

  public UpdatePackageResponsePackageDetails() {
  }

  public UpdatePackageResponsePackageDetails packageID(String packageID) {
    this.packageID = packageID;
    return this;
  }

  /**
   * Get packageID
   * @return packageID
   */
  @javax.annotation.Nullable
  public String getPackageID() {
    return packageID;
  }

  public void setPackageID(String packageID) {
    this.packageID = packageID;
  }


  public UpdatePackageResponsePackageDetails packageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  /**
   * Get packageName
   * @return packageName
   */
  @javax.annotation.Nullable
  public String getPackageName() {
    return packageName;
  }

  public void setPackageName(String packageName) {
    this.packageName = packageName;
  }


  public UpdatePackageResponsePackageDetails packageType(PackageType packageType) {
    this.packageType = packageType;
    return this;
  }

  /**
   * Get packageType
   * @return packageType
   */
  @javax.annotation.Nullable
  public PackageType getPackageType() {
    return packageType;
  }

  public void setPackageType(PackageType packageType) {
    this.packageType = packageType;
  }


  public UpdatePackageResponsePackageDetails packageDescription(String packageDescription) {
    this.packageDescription = packageDescription;
    return this;
  }

  /**
   * Get packageDescription
   * @return packageDescription
   */
  @javax.annotation.Nullable
  public String getPackageDescription() {
    return packageDescription;
  }

  public void setPackageDescription(String packageDescription) {
    this.packageDescription = packageDescription;
  }


  public UpdatePackageResponsePackageDetails packageStatus(PackageStatus packageStatus) {
    this.packageStatus = packageStatus;
    return this;
  }

  /**
   * Get packageStatus
   * @return packageStatus
   */
  @javax.annotation.Nullable
  public PackageStatus getPackageStatus() {
    return packageStatus;
  }

  public void setPackageStatus(PackageStatus packageStatus) {
    this.packageStatus = packageStatus;
  }


  public UpdatePackageResponsePackageDetails createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UpdatePackageResponsePackageDetails lastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(OffsetDateTime lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public UpdatePackageResponsePackageDetails availablePackageVersion(String availablePackageVersion) {
    this.availablePackageVersion = availablePackageVersion;
    return this;
  }

  /**
   * Get availablePackageVersion
   * @return availablePackageVersion
   */
  @javax.annotation.Nullable
  public String getAvailablePackageVersion() {
    return availablePackageVersion;
  }

  public void setAvailablePackageVersion(String availablePackageVersion) {
    this.availablePackageVersion = availablePackageVersion;
  }


  public UpdatePackageResponsePackageDetails errorDetails(DomainPackageDetailsErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  /**
   * Get errorDetails
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public DomainPackageDetailsErrorDetails getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(DomainPackageDetailsErrorDetails errorDetails) {
    this.errorDetails = errorDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePackageResponsePackageDetails updatePackageResponsePackageDetails = (UpdatePackageResponsePackageDetails) o;
    return Objects.equals(this.packageID, updatePackageResponsePackageDetails.packageID) &&
        Objects.equals(this.packageName, updatePackageResponsePackageDetails.packageName) &&
        Objects.equals(this.packageType, updatePackageResponsePackageDetails.packageType) &&
        Objects.equals(this.packageDescription, updatePackageResponsePackageDetails.packageDescription) &&
        Objects.equals(this.packageStatus, updatePackageResponsePackageDetails.packageStatus) &&
        Objects.equals(this.createdAt, updatePackageResponsePackageDetails.createdAt) &&
        Objects.equals(this.lastUpdatedAt, updatePackageResponsePackageDetails.lastUpdatedAt) &&
        Objects.equals(this.availablePackageVersion, updatePackageResponsePackageDetails.availablePackageVersion) &&
        Objects.equals(this.errorDetails, updatePackageResponsePackageDetails.errorDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(packageID, packageName, packageType, packageDescription, packageStatus, createdAt, lastUpdatedAt, availablePackageVersion, errorDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePackageResponsePackageDetails {\n");
    sb.append("    packageID: ").append(toIndentedString(packageID)).append("\n");
    sb.append("    packageName: ").append(toIndentedString(packageName)).append("\n");
    sb.append("    packageType: ").append(toIndentedString(packageType)).append("\n");
    sb.append("    packageDescription: ").append(toIndentedString(packageDescription)).append("\n");
    sb.append("    packageStatus: ").append(toIndentedString(packageStatus)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    availablePackageVersion: ").append(toIndentedString(availablePackageVersion)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PackageID");
    openapiFields.add("PackageName");
    openapiFields.add("PackageType");
    openapiFields.add("PackageDescription");
    openapiFields.add("PackageStatus");
    openapiFields.add("CreatedAt");
    openapiFields.add("LastUpdatedAt");
    openapiFields.add("AvailablePackageVersion");
    openapiFields.add("ErrorDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePackageResponsePackageDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePackageResponsePackageDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePackageResponsePackageDetails is not found in the empty JSON string", UpdatePackageResponsePackageDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePackageResponsePackageDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePackageResponsePackageDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PackageID`
      if (jsonObj.get("PackageID") != null && !jsonObj.get("PackageID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageID"));
      }
      // validate the optional field `PackageName`
      if (jsonObj.get("PackageName") != null && !jsonObj.get("PackageName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageName"));
      }
      // validate the optional field `PackageType`
      if (jsonObj.get("PackageType") != null && !jsonObj.get("PackageType").isJsonNull()) {
        PackageType.validateJsonElement(jsonObj.get("PackageType"));
      }
      // validate the optional field `PackageDescription`
      if (jsonObj.get("PackageDescription") != null && !jsonObj.get("PackageDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PackageDescription"));
      }
      // validate the optional field `PackageStatus`
      if (jsonObj.get("PackageStatus") != null && !jsonObj.get("PackageStatus").isJsonNull()) {
        PackageStatus.validateJsonElement(jsonObj.get("PackageStatus"));
      }
      // validate the optional field `CreatedAt`
      if (jsonObj.get("CreatedAt") != null && !jsonObj.get("CreatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedAt"));
      }
      // validate the optional field `LastUpdatedAt`
      if (jsonObj.get("LastUpdatedAt") != null && !jsonObj.get("LastUpdatedAt").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedAt"));
      }
      // validate the optional field `AvailablePackageVersion`
      if (jsonObj.get("AvailablePackageVersion") != null && !jsonObj.get("AvailablePackageVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailablePackageVersion"));
      }
      // validate the optional field `ErrorDetails`
      if (jsonObj.get("ErrorDetails") != null && !jsonObj.get("ErrorDetails").isJsonNull()) {
        DomainPackageDetailsErrorDetails.validateJsonElement(jsonObj.get("ErrorDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePackageResponsePackageDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePackageResponsePackageDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePackageResponsePackageDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePackageResponsePackageDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePackageResponsePackageDetails>() {
           @Override
           public void write(JsonWriter out, UpdatePackageResponsePackageDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePackageResponsePackageDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePackageResponsePackageDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePackageResponsePackageDetails
   * @throws IOException if the JSON string is invalid with respect to UpdatePackageResponsePackageDetails
   */
  public static UpdatePackageResponsePackageDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePackageResponsePackageDetails.class);
  }

  /**
   * Convert an instance of UpdatePackageResponsePackageDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

