/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OpenSearchPartitionInstanceType;
import org.openapitools.client.model.ReservedInstancePaymentOption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of an OpenSearch Reserved Instance offering.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReservedInstanceOffering {
  public static final String SERIALIZED_NAME_RESERVED_INSTANCE_OFFERING_ID = "ReservedInstanceOfferingId";
  @SerializedName(SERIALIZED_NAME_RESERVED_INSTANCE_OFFERING_ID)
  private String reservedInstanceOfferingId;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private OpenSearchPartitionInstanceType instanceType;

  public static final String SERIALIZED_NAME_DURATION = "Duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_FIXED_PRICE = "FixedPrice";
  @SerializedName(SERIALIZED_NAME_FIXED_PRICE)
  private Double fixedPrice;

  public static final String SERIALIZED_NAME_USAGE_PRICE = "UsagePrice";
  @SerializedName(SERIALIZED_NAME_USAGE_PRICE)
  private Double usagePrice;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "CurrencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "PaymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private ReservedInstancePaymentOption paymentOption;

  public static final String SERIALIZED_NAME_RECURRING_CHARGES = "RecurringCharges";
  @SerializedName(SERIALIZED_NAME_RECURRING_CHARGES)
  private List recurringCharges;

  public ReservedInstanceOffering() {
  }

  public ReservedInstanceOffering reservedInstanceOfferingId(String reservedInstanceOfferingId) {
    this.reservedInstanceOfferingId = reservedInstanceOfferingId;
    return this;
  }

  /**
   * Get reservedInstanceOfferingId
   * @return reservedInstanceOfferingId
   */
  @javax.annotation.Nullable
  public String getReservedInstanceOfferingId() {
    return reservedInstanceOfferingId;
  }

  public void setReservedInstanceOfferingId(String reservedInstanceOfferingId) {
    this.reservedInstanceOfferingId = reservedInstanceOfferingId;
  }


  public ReservedInstanceOffering instanceType(OpenSearchPartitionInstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public OpenSearchPartitionInstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(OpenSearchPartitionInstanceType instanceType) {
    this.instanceType = instanceType;
  }


  public ReservedInstanceOffering duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nullable
  public Integer getDuration() {
    return duration;
  }

  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public ReservedInstanceOffering fixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
    return this;
  }

  /**
   * Get fixedPrice
   * @return fixedPrice
   */
  @javax.annotation.Nullable
  public Double getFixedPrice() {
    return fixedPrice;
  }

  public void setFixedPrice(Double fixedPrice) {
    this.fixedPrice = fixedPrice;
  }


  public ReservedInstanceOffering usagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
    return this;
  }

  /**
   * Get usagePrice
   * @return usagePrice
   */
  @javax.annotation.Nullable
  public Double getUsagePrice() {
    return usagePrice;
  }

  public void setUsagePrice(Double usagePrice) {
    this.usagePrice = usagePrice;
  }


  public ReservedInstanceOffering currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Get currencyCode
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ReservedInstanceOffering paymentOption(ReservedInstancePaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nullable
  public ReservedInstancePaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(ReservedInstancePaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public ReservedInstanceOffering recurringCharges(List recurringCharges) {
    this.recurringCharges = recurringCharges;
    return this;
  }

  /**
   * Get recurringCharges
   * @return recurringCharges
   */
  @javax.annotation.Nullable
  public List getRecurringCharges() {
    return recurringCharges;
  }

  public void setRecurringCharges(List recurringCharges) {
    this.recurringCharges = recurringCharges;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReservedInstanceOffering reservedInstanceOffering = (ReservedInstanceOffering) o;
    return Objects.equals(this.reservedInstanceOfferingId, reservedInstanceOffering.reservedInstanceOfferingId) &&
        Objects.equals(this.instanceType, reservedInstanceOffering.instanceType) &&
        Objects.equals(this.duration, reservedInstanceOffering.duration) &&
        Objects.equals(this.fixedPrice, reservedInstanceOffering.fixedPrice) &&
        Objects.equals(this.usagePrice, reservedInstanceOffering.usagePrice) &&
        Objects.equals(this.currencyCode, reservedInstanceOffering.currencyCode) &&
        Objects.equals(this.paymentOption, reservedInstanceOffering.paymentOption) &&
        Objects.equals(this.recurringCharges, reservedInstanceOffering.recurringCharges);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservedInstanceOfferingId, instanceType, duration, fixedPrice, usagePrice, currencyCode, paymentOption, recurringCharges);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReservedInstanceOffering {\n");
    sb.append("    reservedInstanceOfferingId: ").append(toIndentedString(reservedInstanceOfferingId)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    fixedPrice: ").append(toIndentedString(fixedPrice)).append("\n");
    sb.append("    usagePrice: ").append(toIndentedString(usagePrice)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    recurringCharges: ").append(toIndentedString(recurringCharges)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReservedInstanceOfferingId");
    openapiFields.add("InstanceType");
    openapiFields.add("Duration");
    openapiFields.add("FixedPrice");
    openapiFields.add("UsagePrice");
    openapiFields.add("CurrencyCode");
    openapiFields.add("PaymentOption");
    openapiFields.add("RecurringCharges");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReservedInstanceOffering
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReservedInstanceOffering.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReservedInstanceOffering is not found in the empty JSON string", ReservedInstanceOffering.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReservedInstanceOffering.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReservedInstanceOffering` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ReservedInstanceOfferingId`
      if (jsonObj.get("ReservedInstanceOfferingId") != null && !jsonObj.get("ReservedInstanceOfferingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReservedInstanceOfferingId"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        OpenSearchPartitionInstanceType.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `Duration`
      if (jsonObj.get("Duration") != null && !jsonObj.get("Duration").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Duration"));
      }
      // validate the optional field `FixedPrice`
      if (jsonObj.get("FixedPrice") != null && !jsonObj.get("FixedPrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("FixedPrice"));
      }
      // validate the optional field `UsagePrice`
      if (jsonObj.get("UsagePrice") != null && !jsonObj.get("UsagePrice").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("UsagePrice"));
      }
      // validate the optional field `CurrencyCode`
      if (jsonObj.get("CurrencyCode") != null && !jsonObj.get("CurrencyCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrencyCode"));
      }
      // validate the optional field `PaymentOption`
      if (jsonObj.get("PaymentOption") != null && !jsonObj.get("PaymentOption").isJsonNull()) {
        ReservedInstancePaymentOption.validateJsonElement(jsonObj.get("PaymentOption"));
      }
      // validate the optional field `RecurringCharges`
      if (jsonObj.get("RecurringCharges") != null && !jsonObj.get("RecurringCharges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("RecurringCharges"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReservedInstanceOffering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReservedInstanceOffering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReservedInstanceOffering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReservedInstanceOffering.class));

       return (TypeAdapter<T>) new TypeAdapter<ReservedInstanceOffering>() {
           @Override
           public void write(JsonWriter out, ReservedInstanceOffering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReservedInstanceOffering read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReservedInstanceOffering given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReservedInstanceOffering
   * @throws IOException if the JSON string is invalid with respect to ReservedInstanceOffering
   */
  public static ReservedInstanceOffering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReservedInstanceOffering.class);
  }

  /**
   * Convert an instance of ReservedInstanceOffering to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

