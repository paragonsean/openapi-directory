/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OpenSearchPartitionInstanceType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lists all instance types and available features for a given OpenSearch or Elasticsearch version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceTypeDetails {
  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private OpenSearchPartitionInstanceType instanceType;

  public static final String SERIALIZED_NAME_ENCRYPTION_ENABLED = "EncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ENABLED)
  private Boolean encryptionEnabled;

  public static final String SERIALIZED_NAME_COGNITO_ENABLED = "CognitoEnabled";
  @SerializedName(SERIALIZED_NAME_COGNITO_ENABLED)
  private Boolean cognitoEnabled;

  public static final String SERIALIZED_NAME_APP_LOGS_ENABLED = "AppLogsEnabled";
  @SerializedName(SERIALIZED_NAME_APP_LOGS_ENABLED)
  private Boolean appLogsEnabled;

  public static final String SERIALIZED_NAME_ADVANCED_SECURITY_ENABLED = "AdvancedSecurityEnabled";
  @SerializedName(SERIALIZED_NAME_ADVANCED_SECURITY_ENABLED)
  private Boolean advancedSecurityEnabled;

  public static final String SERIALIZED_NAME_WARM_ENABLED = "WarmEnabled";
  @SerializedName(SERIALIZED_NAME_WARM_ENABLED)
  private Boolean warmEnabled;

  public static final String SERIALIZED_NAME_INSTANCE_ROLE = "InstanceRole";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ROLE)
  private List instanceRole;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONES = "AvailabilityZones";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONES)
  private List availabilityZones;

  public InstanceTypeDetails() {
  }

  public InstanceTypeDetails instanceType(OpenSearchPartitionInstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public OpenSearchPartitionInstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(OpenSearchPartitionInstanceType instanceType) {
    this.instanceType = instanceType;
  }


  public InstanceTypeDetails encryptionEnabled(Boolean encryptionEnabled) {
    this.encryptionEnabled = encryptionEnabled;
    return this;
  }

  /**
   * Get encryptionEnabled
   * @return encryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getEncryptionEnabled() {
    return encryptionEnabled;
  }

  public void setEncryptionEnabled(Boolean encryptionEnabled) {
    this.encryptionEnabled = encryptionEnabled;
  }


  public InstanceTypeDetails cognitoEnabled(Boolean cognitoEnabled) {
    this.cognitoEnabled = cognitoEnabled;
    return this;
  }

  /**
   * Get cognitoEnabled
   * @return cognitoEnabled
   */
  @javax.annotation.Nullable
  public Boolean getCognitoEnabled() {
    return cognitoEnabled;
  }

  public void setCognitoEnabled(Boolean cognitoEnabled) {
    this.cognitoEnabled = cognitoEnabled;
  }


  public InstanceTypeDetails appLogsEnabled(Boolean appLogsEnabled) {
    this.appLogsEnabled = appLogsEnabled;
    return this;
  }

  /**
   * Get appLogsEnabled
   * @return appLogsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAppLogsEnabled() {
    return appLogsEnabled;
  }

  public void setAppLogsEnabled(Boolean appLogsEnabled) {
    this.appLogsEnabled = appLogsEnabled;
  }


  public InstanceTypeDetails advancedSecurityEnabled(Boolean advancedSecurityEnabled) {
    this.advancedSecurityEnabled = advancedSecurityEnabled;
    return this;
  }

  /**
   * Get advancedSecurityEnabled
   * @return advancedSecurityEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAdvancedSecurityEnabled() {
    return advancedSecurityEnabled;
  }

  public void setAdvancedSecurityEnabled(Boolean advancedSecurityEnabled) {
    this.advancedSecurityEnabled = advancedSecurityEnabled;
  }


  public InstanceTypeDetails warmEnabled(Boolean warmEnabled) {
    this.warmEnabled = warmEnabled;
    return this;
  }

  /**
   * Get warmEnabled
   * @return warmEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWarmEnabled() {
    return warmEnabled;
  }

  public void setWarmEnabled(Boolean warmEnabled) {
    this.warmEnabled = warmEnabled;
  }


  public InstanceTypeDetails instanceRole(List instanceRole) {
    this.instanceRole = instanceRole;
    return this;
  }

  /**
   * Get instanceRole
   * @return instanceRole
   */
  @javax.annotation.Nullable
  public List getInstanceRole() {
    return instanceRole;
  }

  public void setInstanceRole(List instanceRole) {
    this.instanceRole = instanceRole;
  }


  public InstanceTypeDetails availabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
    return this;
  }

  /**
   * Get availabilityZones
   * @return availabilityZones
   */
  @javax.annotation.Nullable
  public List getAvailabilityZones() {
    return availabilityZones;
  }

  public void setAvailabilityZones(List availabilityZones) {
    this.availabilityZones = availabilityZones;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceTypeDetails instanceTypeDetails = (InstanceTypeDetails) o;
    return Objects.equals(this.instanceType, instanceTypeDetails.instanceType) &&
        Objects.equals(this.encryptionEnabled, instanceTypeDetails.encryptionEnabled) &&
        Objects.equals(this.cognitoEnabled, instanceTypeDetails.cognitoEnabled) &&
        Objects.equals(this.appLogsEnabled, instanceTypeDetails.appLogsEnabled) &&
        Objects.equals(this.advancedSecurityEnabled, instanceTypeDetails.advancedSecurityEnabled) &&
        Objects.equals(this.warmEnabled, instanceTypeDetails.warmEnabled) &&
        Objects.equals(this.instanceRole, instanceTypeDetails.instanceRole) &&
        Objects.equals(this.availabilityZones, instanceTypeDetails.availabilityZones);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instanceType, encryptionEnabled, cognitoEnabled, appLogsEnabled, advancedSecurityEnabled, warmEnabled, instanceRole, availabilityZones);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceTypeDetails {\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    encryptionEnabled: ").append(toIndentedString(encryptionEnabled)).append("\n");
    sb.append("    cognitoEnabled: ").append(toIndentedString(cognitoEnabled)).append("\n");
    sb.append("    appLogsEnabled: ").append(toIndentedString(appLogsEnabled)).append("\n");
    sb.append("    advancedSecurityEnabled: ").append(toIndentedString(advancedSecurityEnabled)).append("\n");
    sb.append("    warmEnabled: ").append(toIndentedString(warmEnabled)).append("\n");
    sb.append("    instanceRole: ").append(toIndentedString(instanceRole)).append("\n");
    sb.append("    availabilityZones: ").append(toIndentedString(availabilityZones)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("InstanceType");
    openapiFields.add("EncryptionEnabled");
    openapiFields.add("CognitoEnabled");
    openapiFields.add("AppLogsEnabled");
    openapiFields.add("AdvancedSecurityEnabled");
    openapiFields.add("WarmEnabled");
    openapiFields.add("InstanceRole");
    openapiFields.add("AvailabilityZones");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceTypeDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceTypeDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceTypeDetails is not found in the empty JSON string", InstanceTypeDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceTypeDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceTypeDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        OpenSearchPartitionInstanceType.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `EncryptionEnabled`
      if (jsonObj.get("EncryptionEnabled") != null && !jsonObj.get("EncryptionEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EncryptionEnabled"));
      }
      // validate the optional field `CognitoEnabled`
      if (jsonObj.get("CognitoEnabled") != null && !jsonObj.get("CognitoEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("CognitoEnabled"));
      }
      // validate the optional field `AppLogsEnabled`
      if (jsonObj.get("AppLogsEnabled") != null && !jsonObj.get("AppLogsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AppLogsEnabled"));
      }
      // validate the optional field `AdvancedSecurityEnabled`
      if (jsonObj.get("AdvancedSecurityEnabled") != null && !jsonObj.get("AdvancedSecurityEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AdvancedSecurityEnabled"));
      }
      // validate the optional field `WarmEnabled`
      if (jsonObj.get("WarmEnabled") != null && !jsonObj.get("WarmEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("WarmEnabled"));
      }
      // validate the optional field `InstanceRole`
      if (jsonObj.get("InstanceRole") != null && !jsonObj.get("InstanceRole").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("InstanceRole"));
      }
      // validate the optional field `AvailabilityZones`
      if (jsonObj.get("AvailabilityZones") != null && !jsonObj.get("AvailabilityZones").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AvailabilityZones"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceTypeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceTypeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceTypeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceTypeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceTypeDetails>() {
           @Override
           public void write(JsonWriter out, InstanceTypeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceTypeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceTypeDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceTypeDetails
   * @throws IOException if the JSON string is invalid with respect to InstanceTypeDetails
   */
  public static InstanceTypeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceTypeDetails.class);
  }

  /**
   * Convert an instance of InstanceTypeDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

