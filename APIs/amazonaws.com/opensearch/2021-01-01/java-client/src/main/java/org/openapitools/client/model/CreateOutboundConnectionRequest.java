/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateOutboundConnectionRequestConnectionProperties;
import org.openapitools.client.model.CreateOutboundConnectionRequestLocalDomainInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateOutboundConnectionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOutboundConnectionRequest {
  public static final String SERIALIZED_NAME_LOCAL_DOMAIN_INFO = "LocalDomainInfo";
  @SerializedName(SERIALIZED_NAME_LOCAL_DOMAIN_INFO)
  private CreateOutboundConnectionRequestLocalDomainInfo localDomainInfo;

  public static final String SERIALIZED_NAME_REMOTE_DOMAIN_INFO = "RemoteDomainInfo";
  @SerializedName(SERIALIZED_NAME_REMOTE_DOMAIN_INFO)
  private CreateOutboundConnectionRequestLocalDomainInfo remoteDomainInfo;

  public static final String SERIALIZED_NAME_CONNECTION_ALIAS = "ConnectionAlias";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ALIAS)
  private String connectionAlias;

  /**
   * &lt;p&gt;The connection mode for the cross-cluster connection.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;DIRECT&lt;/b&gt; - Used for cross-cluster search or cross-cluster replication.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;VPC_ENDPOINT&lt;/b&gt; - Used for remote reindex between Amazon OpenSearch Service VPC domains.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ConnectionModeEnum.Adapter.class)
  public enum ConnectionModeEnum {
    DIRECT("DIRECT"),
    
    VPC_ENDPOINT("VPC_ENDPOINT");

    private String value;

    ConnectionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionModeEnum fromValue(String value) {
      for (ConnectionModeEnum b : ConnectionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_MODE = "ConnectionMode";
  @SerializedName(SERIALIZED_NAME_CONNECTION_MODE)
  private ConnectionModeEnum connectionMode;

  public static final String SERIALIZED_NAME_CONNECTION_PROPERTIES = "ConnectionProperties";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PROPERTIES)
  private CreateOutboundConnectionRequestConnectionProperties connectionProperties;

  public CreateOutboundConnectionRequest() {
  }

  public CreateOutboundConnectionRequest localDomainInfo(CreateOutboundConnectionRequestLocalDomainInfo localDomainInfo) {
    this.localDomainInfo = localDomainInfo;
    return this;
  }

  /**
   * Get localDomainInfo
   * @return localDomainInfo
   */
  @javax.annotation.Nonnull
  public CreateOutboundConnectionRequestLocalDomainInfo getLocalDomainInfo() {
    return localDomainInfo;
  }

  public void setLocalDomainInfo(CreateOutboundConnectionRequestLocalDomainInfo localDomainInfo) {
    this.localDomainInfo = localDomainInfo;
  }


  public CreateOutboundConnectionRequest remoteDomainInfo(CreateOutboundConnectionRequestLocalDomainInfo remoteDomainInfo) {
    this.remoteDomainInfo = remoteDomainInfo;
    return this;
  }

  /**
   * Get remoteDomainInfo
   * @return remoteDomainInfo
   */
  @javax.annotation.Nonnull
  public CreateOutboundConnectionRequestLocalDomainInfo getRemoteDomainInfo() {
    return remoteDomainInfo;
  }

  public void setRemoteDomainInfo(CreateOutboundConnectionRequestLocalDomainInfo remoteDomainInfo) {
    this.remoteDomainInfo = remoteDomainInfo;
  }


  public CreateOutboundConnectionRequest connectionAlias(String connectionAlias) {
    this.connectionAlias = connectionAlias;
    return this;
  }

  /**
   * Name of the connection.
   * @return connectionAlias
   */
  @javax.annotation.Nonnull
  public String getConnectionAlias() {
    return connectionAlias;
  }

  public void setConnectionAlias(String connectionAlias) {
    this.connectionAlias = connectionAlias;
  }


  public CreateOutboundConnectionRequest connectionMode(ConnectionModeEnum connectionMode) {
    this.connectionMode = connectionMode;
    return this;
  }

  /**
   * &lt;p&gt;The connection mode for the cross-cluster connection.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;DIRECT&lt;/b&gt; - Used for cross-cluster search or cross-cluster replication.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;VPC_ENDPOINT&lt;/b&gt; - Used for remote reindex between Amazon OpenSearch Service VPC domains.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return connectionMode
   */
  @javax.annotation.Nullable
  public ConnectionModeEnum getConnectionMode() {
    return connectionMode;
  }

  public void setConnectionMode(ConnectionModeEnum connectionMode) {
    this.connectionMode = connectionMode;
  }


  public CreateOutboundConnectionRequest connectionProperties(CreateOutboundConnectionRequestConnectionProperties connectionProperties) {
    this.connectionProperties = connectionProperties;
    return this;
  }

  /**
   * Get connectionProperties
   * @return connectionProperties
   */
  @javax.annotation.Nullable
  public CreateOutboundConnectionRequestConnectionProperties getConnectionProperties() {
    return connectionProperties;
  }

  public void setConnectionProperties(CreateOutboundConnectionRequestConnectionProperties connectionProperties) {
    this.connectionProperties = connectionProperties;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOutboundConnectionRequest createOutboundConnectionRequest = (CreateOutboundConnectionRequest) o;
    return Objects.equals(this.localDomainInfo, createOutboundConnectionRequest.localDomainInfo) &&
        Objects.equals(this.remoteDomainInfo, createOutboundConnectionRequest.remoteDomainInfo) &&
        Objects.equals(this.connectionAlias, createOutboundConnectionRequest.connectionAlias) &&
        Objects.equals(this.connectionMode, createOutboundConnectionRequest.connectionMode) &&
        Objects.equals(this.connectionProperties, createOutboundConnectionRequest.connectionProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localDomainInfo, remoteDomainInfo, connectionAlias, connectionMode, connectionProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOutboundConnectionRequest {\n");
    sb.append("    localDomainInfo: ").append(toIndentedString(localDomainInfo)).append("\n");
    sb.append("    remoteDomainInfo: ").append(toIndentedString(remoteDomainInfo)).append("\n");
    sb.append("    connectionAlias: ").append(toIndentedString(connectionAlias)).append("\n");
    sb.append("    connectionMode: ").append(toIndentedString(connectionMode)).append("\n");
    sb.append("    connectionProperties: ").append(toIndentedString(connectionProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LocalDomainInfo");
    openapiFields.add("RemoteDomainInfo");
    openapiFields.add("ConnectionAlias");
    openapiFields.add("ConnectionMode");
    openapiFields.add("ConnectionProperties");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LocalDomainInfo");
    openapiRequiredFields.add("RemoteDomainInfo");
    openapiRequiredFields.add("ConnectionAlias");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOutboundConnectionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOutboundConnectionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOutboundConnectionRequest is not found in the empty JSON string", CreateOutboundConnectionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOutboundConnectionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOutboundConnectionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOutboundConnectionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LocalDomainInfo`
      CreateOutboundConnectionRequestLocalDomainInfo.validateJsonElement(jsonObj.get("LocalDomainInfo"));
      // validate the required field `RemoteDomainInfo`
      CreateOutboundConnectionRequestLocalDomainInfo.validateJsonElement(jsonObj.get("RemoteDomainInfo"));
      if (!jsonObj.get("ConnectionAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConnectionAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConnectionAlias").toString()));
      }
      if ((jsonObj.get("ConnectionMode") != null && !jsonObj.get("ConnectionMode").isJsonNull()) && !jsonObj.get("ConnectionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConnectionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConnectionMode").toString()));
      }
      // validate the optional field `ConnectionMode`
      if (jsonObj.get("ConnectionMode") != null && !jsonObj.get("ConnectionMode").isJsonNull()) {
        ConnectionModeEnum.validateJsonElement(jsonObj.get("ConnectionMode"));
      }
      // validate the optional field `ConnectionProperties`
      if (jsonObj.get("ConnectionProperties") != null && !jsonObj.get("ConnectionProperties").isJsonNull()) {
        CreateOutboundConnectionRequestConnectionProperties.validateJsonElement(jsonObj.get("ConnectionProperties"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOutboundConnectionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOutboundConnectionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOutboundConnectionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOutboundConnectionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOutboundConnectionRequest>() {
           @Override
           public void write(JsonWriter out, CreateOutboundConnectionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOutboundConnectionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOutboundConnectionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOutboundConnectionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOutboundConnectionRequest
   */
  public static CreateOutboundConnectionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOutboundConnectionRequest.class);
  }

  /**
   * Convert an instance of CreateOutboundConnectionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

