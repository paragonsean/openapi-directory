/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.UpgradeDomainResponseChangeProgressDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for the response returned by &lt;code&gt;UpgradeDomain&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeDomainResponse {
  public static final String SERIALIZED_NAME_UPGRADE_ID = "UpgradeId";
  @SerializedName(SERIALIZED_NAME_UPGRADE_ID)
  private String upgradeId;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_TARGET_VERSION = "TargetVersion";
  @SerializedName(SERIALIZED_NAME_TARGET_VERSION)
  private String targetVersion;

  public static final String SERIALIZED_NAME_PERFORM_CHECK_ONLY = "PerformCheckOnly";
  @SerializedName(SERIALIZED_NAME_PERFORM_CHECK_ONLY)
  private Boolean performCheckOnly;

  public static final String SERIALIZED_NAME_ADVANCED_OPTIONS = "AdvancedOptions";
  @SerializedName(SERIALIZED_NAME_ADVANCED_OPTIONS)
  private Map advancedOptions;

  public static final String SERIALIZED_NAME_CHANGE_PROGRESS_DETAILS = "ChangeProgressDetails";
  @SerializedName(SERIALIZED_NAME_CHANGE_PROGRESS_DETAILS)
  private UpgradeDomainResponseChangeProgressDetails changeProgressDetails;

  public UpgradeDomainResponse() {
  }

  public UpgradeDomainResponse upgradeId(String upgradeId) {
    this.upgradeId = upgradeId;
    return this;
  }

  /**
   * Get upgradeId
   * @return upgradeId
   */
  @javax.annotation.Nullable
  public String getUpgradeId() {
    return upgradeId;
  }

  public void setUpgradeId(String upgradeId) {
    this.upgradeId = upgradeId;
  }


  public UpgradeDomainResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public UpgradeDomainResponse targetVersion(String targetVersion) {
    this.targetVersion = targetVersion;
    return this;
  }

  /**
   * Get targetVersion
   * @return targetVersion
   */
  @javax.annotation.Nullable
  public String getTargetVersion() {
    return targetVersion;
  }

  public void setTargetVersion(String targetVersion) {
    this.targetVersion = targetVersion;
  }


  public UpgradeDomainResponse performCheckOnly(Boolean performCheckOnly) {
    this.performCheckOnly = performCheckOnly;
    return this;
  }

  /**
   * Get performCheckOnly
   * @return performCheckOnly
   */
  @javax.annotation.Nullable
  public Boolean getPerformCheckOnly() {
    return performCheckOnly;
  }

  public void setPerformCheckOnly(Boolean performCheckOnly) {
    this.performCheckOnly = performCheckOnly;
  }


  public UpgradeDomainResponse advancedOptions(Map advancedOptions) {
    this.advancedOptions = advancedOptions;
    return this;
  }

  /**
   * Get advancedOptions
   * @return advancedOptions
   */
  @javax.annotation.Nullable
  public Map getAdvancedOptions() {
    return advancedOptions;
  }

  public void setAdvancedOptions(Map advancedOptions) {
    this.advancedOptions = advancedOptions;
  }


  public UpgradeDomainResponse changeProgressDetails(UpgradeDomainResponseChangeProgressDetails changeProgressDetails) {
    this.changeProgressDetails = changeProgressDetails;
    return this;
  }

  /**
   * Get changeProgressDetails
   * @return changeProgressDetails
   */
  @javax.annotation.Nullable
  public UpgradeDomainResponseChangeProgressDetails getChangeProgressDetails() {
    return changeProgressDetails;
  }

  public void setChangeProgressDetails(UpgradeDomainResponseChangeProgressDetails changeProgressDetails) {
    this.changeProgressDetails = changeProgressDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeDomainResponse upgradeDomainResponse = (UpgradeDomainResponse) o;
    return Objects.equals(this.upgradeId, upgradeDomainResponse.upgradeId) &&
        Objects.equals(this.domainName, upgradeDomainResponse.domainName) &&
        Objects.equals(this.targetVersion, upgradeDomainResponse.targetVersion) &&
        Objects.equals(this.performCheckOnly, upgradeDomainResponse.performCheckOnly) &&
        Objects.equals(this.advancedOptions, upgradeDomainResponse.advancedOptions) &&
        Objects.equals(this.changeProgressDetails, upgradeDomainResponse.changeProgressDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(upgradeId, domainName, targetVersion, performCheckOnly, advancedOptions, changeProgressDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeDomainResponse {\n");
    sb.append("    upgradeId: ").append(toIndentedString(upgradeId)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    targetVersion: ").append(toIndentedString(targetVersion)).append("\n");
    sb.append("    performCheckOnly: ").append(toIndentedString(performCheckOnly)).append("\n");
    sb.append("    advancedOptions: ").append(toIndentedString(advancedOptions)).append("\n");
    sb.append("    changeProgressDetails: ").append(toIndentedString(changeProgressDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("UpgradeId");
    openapiFields.add("DomainName");
    openapiFields.add("TargetVersion");
    openapiFields.add("PerformCheckOnly");
    openapiFields.add("AdvancedOptions");
    openapiFields.add("ChangeProgressDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeDomainResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeDomainResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeDomainResponse is not found in the empty JSON string", UpgradeDomainResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeDomainResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeDomainResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `UpgradeId`
      if (jsonObj.get("UpgradeId") != null && !jsonObj.get("UpgradeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("UpgradeId"));
      }
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `TargetVersion`
      if (jsonObj.get("TargetVersion") != null && !jsonObj.get("TargetVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetVersion"));
      }
      // validate the optional field `PerformCheckOnly`
      if (jsonObj.get("PerformCheckOnly") != null && !jsonObj.get("PerformCheckOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("PerformCheckOnly"));
      }
      // validate the optional field `AdvancedOptions`
      if (jsonObj.get("AdvancedOptions") != null && !jsonObj.get("AdvancedOptions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AdvancedOptions"));
      }
      // validate the optional field `ChangeProgressDetails`
      if (jsonObj.get("ChangeProgressDetails") != null && !jsonObj.get("ChangeProgressDetails").isJsonNull()) {
        UpgradeDomainResponseChangeProgressDetails.validateJsonElement(jsonObj.get("ChangeProgressDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeDomainResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeDomainResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeDomainResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeDomainResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeDomainResponse>() {
           @Override
           public void write(JsonWriter out, UpgradeDomainResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeDomainResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeDomainResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeDomainResponse
   * @throws IOException if the JSON string is invalid with respect to UpgradeDomainResponse
   */
  public static UpgradeDomainResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeDomainResponse.class);
  }

  /**
   * Convert an instance of UpgradeDomainResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

