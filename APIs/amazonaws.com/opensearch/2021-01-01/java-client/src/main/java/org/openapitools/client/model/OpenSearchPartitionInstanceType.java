/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets OpenSearchPartitionInstanceType
 */
@JsonAdapter(OpenSearchPartitionInstanceType.Adapter.class)
public enum OpenSearchPartitionInstanceType {
  
  M3_MEDIUM_SEARCH("m3.medium.search"),
  
  M3_LARGE_SEARCH("m3.large.search"),
  
  M3_XLARGE_SEARCH("m3.xlarge.search"),
  
  M3_2XLARGE_SEARCH("m3.2xlarge.search"),
  
  M4_LARGE_SEARCH("m4.large.search"),
  
  M4_XLARGE_SEARCH("m4.xlarge.search"),
  
  M4_2XLARGE_SEARCH("m4.2xlarge.search"),
  
  M4_4XLARGE_SEARCH("m4.4xlarge.search"),
  
  M4_10XLARGE_SEARCH("m4.10xlarge.search"),
  
  M5_LARGE_SEARCH("m5.large.search"),
  
  M5_XLARGE_SEARCH("m5.xlarge.search"),
  
  M5_2XLARGE_SEARCH("m5.2xlarge.search"),
  
  M5_4XLARGE_SEARCH("m5.4xlarge.search"),
  
  M5_12XLARGE_SEARCH("m5.12xlarge.search"),
  
  M5_24XLARGE_SEARCH("m5.24xlarge.search"),
  
  R5_LARGE_SEARCH("r5.large.search"),
  
  R5_XLARGE_SEARCH("r5.xlarge.search"),
  
  R5_2XLARGE_SEARCH("r5.2xlarge.search"),
  
  R5_4XLARGE_SEARCH("r5.4xlarge.search"),
  
  R5_12XLARGE_SEARCH("r5.12xlarge.search"),
  
  R5_24XLARGE_SEARCH("r5.24xlarge.search"),
  
  C5_LARGE_SEARCH("c5.large.search"),
  
  C5_XLARGE_SEARCH("c5.xlarge.search"),
  
  C5_2XLARGE_SEARCH("c5.2xlarge.search"),
  
  C5_4XLARGE_SEARCH("c5.4xlarge.search"),
  
  C5_9XLARGE_SEARCH("c5.9xlarge.search"),
  
  C5_18XLARGE_SEARCH("c5.18xlarge.search"),
  
  T3_NANO_SEARCH("t3.nano.search"),
  
  T3_MICRO_SEARCH("t3.micro.search"),
  
  T3_SMALL_SEARCH("t3.small.search"),
  
  T3_MEDIUM_SEARCH("t3.medium.search"),
  
  T3_LARGE_SEARCH("t3.large.search"),
  
  T3_XLARGE_SEARCH("t3.xlarge.search"),
  
  T3_2XLARGE_SEARCH("t3.2xlarge.search"),
  
  ULTRAWARM1_MEDIUM_SEARCH("ultrawarm1.medium.search"),
  
  ULTRAWARM1_LARGE_SEARCH("ultrawarm1.large.search"),
  
  ULTRAWARM1_XLARGE_SEARCH("ultrawarm1.xlarge.search"),
  
  T2_MICRO_SEARCH("t2.micro.search"),
  
  T2_SMALL_SEARCH("t2.small.search"),
  
  T2_MEDIUM_SEARCH("t2.medium.search"),
  
  R3_LARGE_SEARCH("r3.large.search"),
  
  R3_XLARGE_SEARCH("r3.xlarge.search"),
  
  R3_2XLARGE_SEARCH("r3.2xlarge.search"),
  
  R3_4XLARGE_SEARCH("r3.4xlarge.search"),
  
  R3_8XLARGE_SEARCH("r3.8xlarge.search"),
  
  I2_XLARGE_SEARCH("i2.xlarge.search"),
  
  I2_2XLARGE_SEARCH("i2.2xlarge.search"),
  
  D2_XLARGE_SEARCH("d2.xlarge.search"),
  
  D2_2XLARGE_SEARCH("d2.2xlarge.search"),
  
  D2_4XLARGE_SEARCH("d2.4xlarge.search"),
  
  D2_8XLARGE_SEARCH("d2.8xlarge.search"),
  
  C4_LARGE_SEARCH("c4.large.search"),
  
  C4_XLARGE_SEARCH("c4.xlarge.search"),
  
  C4_2XLARGE_SEARCH("c4.2xlarge.search"),
  
  C4_4XLARGE_SEARCH("c4.4xlarge.search"),
  
  C4_8XLARGE_SEARCH("c4.8xlarge.search"),
  
  R4_LARGE_SEARCH("r4.large.search"),
  
  R4_XLARGE_SEARCH("r4.xlarge.search"),
  
  R4_2XLARGE_SEARCH("r4.2xlarge.search"),
  
  R4_4XLARGE_SEARCH("r4.4xlarge.search"),
  
  R4_8XLARGE_SEARCH("r4.8xlarge.search"),
  
  R4_16XLARGE_SEARCH("r4.16xlarge.search"),
  
  I3_LARGE_SEARCH("i3.large.search"),
  
  I3_XLARGE_SEARCH("i3.xlarge.search"),
  
  I3_2XLARGE_SEARCH("i3.2xlarge.search"),
  
  I3_4XLARGE_SEARCH("i3.4xlarge.search"),
  
  I3_8XLARGE_SEARCH("i3.8xlarge.search"),
  
  I3_16XLARGE_SEARCH("i3.16xlarge.search"),
  
  R6G_LARGE_SEARCH("r6g.large.search"),
  
  R6G_XLARGE_SEARCH("r6g.xlarge.search"),
  
  R6G_2XLARGE_SEARCH("r6g.2xlarge.search"),
  
  R6G_4XLARGE_SEARCH("r6g.4xlarge.search"),
  
  R6G_8XLARGE_SEARCH("r6g.8xlarge.search"),
  
  R6G_12XLARGE_SEARCH("r6g.12xlarge.search"),
  
  M6G_LARGE_SEARCH("m6g.large.search"),
  
  M6G_XLARGE_SEARCH("m6g.xlarge.search"),
  
  M6G_2XLARGE_SEARCH("m6g.2xlarge.search"),
  
  M6G_4XLARGE_SEARCH("m6g.4xlarge.search"),
  
  M6G_8XLARGE_SEARCH("m6g.8xlarge.search"),
  
  M6G_12XLARGE_SEARCH("m6g.12xlarge.search"),
  
  C6G_LARGE_SEARCH("c6g.large.search"),
  
  C6G_XLARGE_SEARCH("c6g.xlarge.search"),
  
  C6G_2XLARGE_SEARCH("c6g.2xlarge.search"),
  
  C6G_4XLARGE_SEARCH("c6g.4xlarge.search"),
  
  C6G_8XLARGE_SEARCH("c6g.8xlarge.search"),
  
  C6G_12XLARGE_SEARCH("c6g.12xlarge.search"),
  
  R6GD_LARGE_SEARCH("r6gd.large.search"),
  
  R6GD_XLARGE_SEARCH("r6gd.xlarge.search"),
  
  R6GD_2XLARGE_SEARCH("r6gd.2xlarge.search"),
  
  R6GD_4XLARGE_SEARCH("r6gd.4xlarge.search"),
  
  R6GD_8XLARGE_SEARCH("r6gd.8xlarge.search"),
  
  R6GD_12XLARGE_SEARCH("r6gd.12xlarge.search"),
  
  R6GD_16XLARGE_SEARCH("r6gd.16xlarge.search"),
  
  T4G_SMALL_SEARCH("t4g.small.search"),
  
  T4G_MEDIUM_SEARCH("t4g.medium.search");

  private String value;

  OpenSearchPartitionInstanceType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static OpenSearchPartitionInstanceType fromValue(String value) {
    for (OpenSearchPartitionInstanceType b : OpenSearchPartitionInstanceType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<OpenSearchPartitionInstanceType> {
    @Override
    public void write(final JsonWriter jsonWriter, final OpenSearchPartitionInstanceType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public OpenSearchPartitionInstanceType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return OpenSearchPartitionInstanceType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    OpenSearchPartitionInstanceType.fromValue(value);
  }
}

