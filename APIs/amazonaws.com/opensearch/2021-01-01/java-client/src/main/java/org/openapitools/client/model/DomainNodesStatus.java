/*
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodeStatus;
import org.openapitools.client.model.NodeType;
import org.openapitools.client.model.OpenSearchPartitionInstanceType;
import org.openapitools.client.model.VolumeType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container for information about nodes on the domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:04.518663-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainNodesStatus {
  public static final String SERIALIZED_NAME_NODE_ID = "NodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_TYPE = "NodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private NodeType nodeType;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "AvailabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "InstanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private OpenSearchPartitionInstanceType instanceType;

  public static final String SERIALIZED_NAME_NODE_STATUS = "NodeStatus";
  @SerializedName(SERIALIZED_NAME_NODE_STATUS)
  private NodeStatus nodeStatus;

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "StorageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private String storageType;

  public static final String SERIALIZED_NAME_STORAGE_VOLUME_TYPE = "StorageVolumeType";
  @SerializedName(SERIALIZED_NAME_STORAGE_VOLUME_TYPE)
  private VolumeType storageVolumeType;

  public static final String SERIALIZED_NAME_STORAGE_SIZE = "StorageSize";
  @SerializedName(SERIALIZED_NAME_STORAGE_SIZE)
  private String storageSize;

  public DomainNodesStatus() {
  }

  public DomainNodesStatus nodeId(String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(String nodeId) {
    this.nodeId = nodeId;
  }


  public DomainNodesStatus nodeType(NodeType nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  /**
   * Get nodeType
   * @return nodeType
   */
  @javax.annotation.Nullable
  public NodeType getNodeType() {
    return nodeType;
  }

  public void setNodeType(NodeType nodeType) {
    this.nodeType = nodeType;
  }


  public DomainNodesStatus availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public DomainNodesStatus instanceType(OpenSearchPartitionInstanceType instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Get instanceType
   * @return instanceType
   */
  @javax.annotation.Nullable
  public OpenSearchPartitionInstanceType getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(OpenSearchPartitionInstanceType instanceType) {
    this.instanceType = instanceType;
  }


  public DomainNodesStatus nodeStatus(NodeStatus nodeStatus) {
    this.nodeStatus = nodeStatus;
    return this;
  }

  /**
   * Get nodeStatus
   * @return nodeStatus
   */
  @javax.annotation.Nullable
  public NodeStatus getNodeStatus() {
    return nodeStatus;
  }

  public void setNodeStatus(NodeStatus nodeStatus) {
    this.nodeStatus = nodeStatus;
  }


  public DomainNodesStatus storageType(String storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * Get storageType
   * @return storageType
   */
  @javax.annotation.Nullable
  public String getStorageType() {
    return storageType;
  }

  public void setStorageType(String storageType) {
    this.storageType = storageType;
  }


  public DomainNodesStatus storageVolumeType(VolumeType storageVolumeType) {
    this.storageVolumeType = storageVolumeType;
    return this;
  }

  /**
   * Get storageVolumeType
   * @return storageVolumeType
   */
  @javax.annotation.Nullable
  public VolumeType getStorageVolumeType() {
    return storageVolumeType;
  }

  public void setStorageVolumeType(VolumeType storageVolumeType) {
    this.storageVolumeType = storageVolumeType;
  }


  public DomainNodesStatus storageSize(String storageSize) {
    this.storageSize = storageSize;
    return this;
  }

  /**
   * Get storageSize
   * @return storageSize
   */
  @javax.annotation.Nullable
  public String getStorageSize() {
    return storageSize;
  }

  public void setStorageSize(String storageSize) {
    this.storageSize = storageSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainNodesStatus domainNodesStatus = (DomainNodesStatus) o;
    return Objects.equals(this.nodeId, domainNodesStatus.nodeId) &&
        Objects.equals(this.nodeType, domainNodesStatus.nodeType) &&
        Objects.equals(this.availabilityZone, domainNodesStatus.availabilityZone) &&
        Objects.equals(this.instanceType, domainNodesStatus.instanceType) &&
        Objects.equals(this.nodeStatus, domainNodesStatus.nodeStatus) &&
        Objects.equals(this.storageType, domainNodesStatus.storageType) &&
        Objects.equals(this.storageVolumeType, domainNodesStatus.storageVolumeType) &&
        Objects.equals(this.storageSize, domainNodesStatus.storageSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeId, nodeType, availabilityZone, instanceType, nodeStatus, storageType, storageVolumeType, storageSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainNodesStatus {\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    nodeStatus: ").append(toIndentedString(nodeStatus)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    storageVolumeType: ").append(toIndentedString(storageVolumeType)).append("\n");
    sb.append("    storageSize: ").append(toIndentedString(storageSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NodeId");
    openapiFields.add("NodeType");
    openapiFields.add("AvailabilityZone");
    openapiFields.add("InstanceType");
    openapiFields.add("NodeStatus");
    openapiFields.add("StorageType");
    openapiFields.add("StorageVolumeType");
    openapiFields.add("StorageSize");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainNodesStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainNodesStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainNodesStatus is not found in the empty JSON string", DomainNodesStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainNodesStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainNodesStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NodeId`
      if (jsonObj.get("NodeId") != null && !jsonObj.get("NodeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NodeId"));
      }
      // validate the optional field `NodeType`
      if (jsonObj.get("NodeType") != null && !jsonObj.get("NodeType").isJsonNull()) {
        NodeType.validateJsonElement(jsonObj.get("NodeType"));
      }
      // validate the optional field `AvailabilityZone`
      if (jsonObj.get("AvailabilityZone") != null && !jsonObj.get("AvailabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AvailabilityZone"));
      }
      // validate the optional field `InstanceType`
      if (jsonObj.get("InstanceType") != null && !jsonObj.get("InstanceType").isJsonNull()) {
        OpenSearchPartitionInstanceType.validateJsonElement(jsonObj.get("InstanceType"));
      }
      // validate the optional field `NodeStatus`
      if (jsonObj.get("NodeStatus") != null && !jsonObj.get("NodeStatus").isJsonNull()) {
        NodeStatus.validateJsonElement(jsonObj.get("NodeStatus"));
      }
      // validate the optional field `StorageType`
      if (jsonObj.get("StorageType") != null && !jsonObj.get("StorageType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StorageType"));
      }
      // validate the optional field `StorageVolumeType`
      if (jsonObj.get("StorageVolumeType") != null && !jsonObj.get("StorageVolumeType").isJsonNull()) {
        VolumeType.validateJsonElement(jsonObj.get("StorageVolumeType"));
      }
      // validate the optional field `StorageSize`
      if (jsonObj.get("StorageSize") != null && !jsonObj.get("StorageSize").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StorageSize"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainNodesStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainNodesStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainNodesStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainNodesStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainNodesStatus>() {
           @Override
           public void write(JsonWriter out, DomainNodesStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainNodesStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainNodesStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainNodesStatus
   * @throws IOException if the JSON string is invalid with respect to DomainNodesStatus
   */
  public static DomainNodesStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainNodesStatus.class);
  }

  /**
   * Convert an instance of DomainNodesStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

