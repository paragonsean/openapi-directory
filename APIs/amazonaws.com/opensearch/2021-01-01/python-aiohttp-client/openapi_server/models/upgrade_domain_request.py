# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpgradeDomainRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, target_version: str=None, perform_check_only: bool=None, advanced_options: Dict[str, str]=None):
        """UpgradeDomainRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this UpgradeDomainRequest.
        :param target_version: The target_version of this UpgradeDomainRequest.
        :param perform_check_only: The perform_check_only of this UpgradeDomainRequest.
        :param advanced_options: The advanced_options of this UpgradeDomainRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'target_version': str,
            'perform_check_only': bool,
            'advanced_options': Dict[str, str]
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'target_version': 'TargetVersion',
            'perform_check_only': 'PerformCheckOnly',
            'advanced_options': 'AdvancedOptions'
        }

        self._domain_name = domain_name
        self._target_version = target_version
        self._perform_check_only = perform_check_only
        self._advanced_options = advanced_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeDomainRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeDomain_request of this UpgradeDomainRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this UpgradeDomainRequest.

        The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.

        :return: The domain_name of this UpgradeDomainRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this UpgradeDomainRequest.

        The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.

        :param domain_name: The domain_name of this UpgradeDomainRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")
        if domain_name is not None and len(domain_name) > 28:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `28`")
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")
        if domain_name is not None and not re.search(r'[a-z][a-z0-9\-]+', domain_name):
            raise ValueError("Invalid value for `domain_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._domain_name = domain_name

    @property
    def target_version(self):
        """Gets the target_version of this UpgradeDomainRequest.

        OpenSearch or Elasticsearch version to which you want to upgrade, in the format Opensearch_X.Y or Elasticsearch_X.Y.

        :return: The target_version of this UpgradeDomainRequest.
        :rtype: str
        """
        return self._target_version

    @target_version.setter
    def target_version(self, target_version):
        """Sets the target_version of this UpgradeDomainRequest.

        OpenSearch or Elasticsearch version to which you want to upgrade, in the format Opensearch_X.Y or Elasticsearch_X.Y.

        :param target_version: The target_version of this UpgradeDomainRequest.
        :type target_version: str
        """
        if target_version is None:
            raise ValueError("Invalid value for `target_version`, must not be `None`")
        if target_version is not None and len(target_version) > 18:
            raise ValueError("Invalid value for `target_version`, length must be less than or equal to `18`")
        if target_version is not None and len(target_version) < 14:
            raise ValueError("Invalid value for `target_version`, length must be greater than or equal to `14`")
        if target_version is not None and not re.search(r'^Elasticsearch_[0-9]{1}\.[0-9]{1,2}$|^OpenSearch_[0-9]{1,2}\.[0-9]{1,2}$', target_version):
            raise ValueError("Invalid value for `target_version`, must be a follow pattern or equal to `/^Elasticsearch_[0-9]{1}\.[0-9]{1,2}$|^OpenSearch_[0-9]{1,2}\.[0-9]{1,2}$/`")

        self._target_version = target_version

    @property
    def perform_check_only(self):
        """Gets the perform_check_only of this UpgradeDomainRequest.

        When true, indicates that an upgrade eligibility check needs to be performed. Does not actually perform the upgrade.

        :return: The perform_check_only of this UpgradeDomainRequest.
        :rtype: bool
        """
        return self._perform_check_only

    @perform_check_only.setter
    def perform_check_only(self, perform_check_only):
        """Sets the perform_check_only of this UpgradeDomainRequest.

        When true, indicates that an upgrade eligibility check needs to be performed. Does not actually perform the upgrade.

        :param perform_check_only: The perform_check_only of this UpgradeDomainRequest.
        :type perform_check_only: bool
        """

        self._perform_check_only = perform_check_only

    @property
    def advanced_options(self):
        """Gets the advanced_options of this UpgradeDomainRequest.

        <p>Exposes native OpenSearch configuration values from <code>opensearch.yml</code>. The following advanced options are available: </p> <ul> <li> <p>Allows references to indexes in an HTTP request body. Must be <code>false</code> when configuring access to individual sub-resources. Default is <code>true</code>.</p> </li> <li> <p>Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options\">Advanced cluster parameters</a>.</p>

        :return: The advanced_options of this UpgradeDomainRequest.
        :rtype: Dict[str, str]
        """
        return self._advanced_options

    @advanced_options.setter
    def advanced_options(self, advanced_options):
        """Sets the advanced_options of this UpgradeDomainRequest.

        <p>Exposes native OpenSearch configuration values from <code>opensearch.yml</code>. The following advanced options are available: </p> <ul> <li> <p>Allows references to indexes in an HTTP request body. Must be <code>false</code> when configuring access to individual sub-resources. Default is <code>true</code>.</p> </li> <li> <p>Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options\">Advanced cluster parameters</a>.</p>

        :param advanced_options: The advanced_options of this UpgradeDomainRequest.
        :type advanced_options: Dict[str, str]
        """

        self._advanced_options = advanced_options
