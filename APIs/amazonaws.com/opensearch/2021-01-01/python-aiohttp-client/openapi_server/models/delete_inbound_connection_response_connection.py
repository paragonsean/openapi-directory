# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_mode import ConnectionMode
from openapi_server.models.create_outbound_connection_response_local_domain_info import CreateOutboundConnectionResponseLocalDomainInfo
from openapi_server.models.create_outbound_connection_response_remote_domain_info import CreateOutboundConnectionResponseRemoteDomainInfo
from openapi_server.models.inbound_connection_connection_status import InboundConnectionConnectionStatus
from openapi_server import util


class DeleteInboundConnectionResponseConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_domain_info: CreateOutboundConnectionResponseLocalDomainInfo=None, remote_domain_info: CreateOutboundConnectionResponseRemoteDomainInfo=None, connection_id: str=None, connection_status: InboundConnectionConnectionStatus=None, connection_mode: ConnectionMode=None):
        """DeleteInboundConnectionResponseConnection - a model defined in OpenAPI

        :param local_domain_info: The local_domain_info of this DeleteInboundConnectionResponseConnection.
        :param remote_domain_info: The remote_domain_info of this DeleteInboundConnectionResponseConnection.
        :param connection_id: The connection_id of this DeleteInboundConnectionResponseConnection.
        :param connection_status: The connection_status of this DeleteInboundConnectionResponseConnection.
        :param connection_mode: The connection_mode of this DeleteInboundConnectionResponseConnection.
        """
        self.openapi_types = {
            'local_domain_info': CreateOutboundConnectionResponseLocalDomainInfo,
            'remote_domain_info': CreateOutboundConnectionResponseRemoteDomainInfo,
            'connection_id': str,
            'connection_status': InboundConnectionConnectionStatus,
            'connection_mode': ConnectionMode
        }

        self.attribute_map = {
            'local_domain_info': 'LocalDomainInfo',
            'remote_domain_info': 'RemoteDomainInfo',
            'connection_id': 'ConnectionId',
            'connection_status': 'ConnectionStatus',
            'connection_mode': 'ConnectionMode'
        }

        self._local_domain_info = local_domain_info
        self._remote_domain_info = remote_domain_info
        self._connection_id = connection_id
        self._connection_status = connection_status
        self._connection_mode = connection_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteInboundConnectionResponseConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteInboundConnectionResponse_Connection of this DeleteInboundConnectionResponseConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_domain_info(self):
        """Gets the local_domain_info of this DeleteInboundConnectionResponseConnection.


        :return: The local_domain_info of this DeleteInboundConnectionResponseConnection.
        :rtype: CreateOutboundConnectionResponseLocalDomainInfo
        """
        return self._local_domain_info

    @local_domain_info.setter
    def local_domain_info(self, local_domain_info):
        """Sets the local_domain_info of this DeleteInboundConnectionResponseConnection.


        :param local_domain_info: The local_domain_info of this DeleteInboundConnectionResponseConnection.
        :type local_domain_info: CreateOutboundConnectionResponseLocalDomainInfo
        """

        self._local_domain_info = local_domain_info

    @property
    def remote_domain_info(self):
        """Gets the remote_domain_info of this DeleteInboundConnectionResponseConnection.


        :return: The remote_domain_info of this DeleteInboundConnectionResponseConnection.
        :rtype: CreateOutboundConnectionResponseRemoteDomainInfo
        """
        return self._remote_domain_info

    @remote_domain_info.setter
    def remote_domain_info(self, remote_domain_info):
        """Sets the remote_domain_info of this DeleteInboundConnectionResponseConnection.


        :param remote_domain_info: The remote_domain_info of this DeleteInboundConnectionResponseConnection.
        :type remote_domain_info: CreateOutboundConnectionResponseRemoteDomainInfo
        """

        self._remote_domain_info = remote_domain_info

    @property
    def connection_id(self):
        """Gets the connection_id of this DeleteInboundConnectionResponseConnection.


        :return: The connection_id of this DeleteInboundConnectionResponseConnection.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this DeleteInboundConnectionResponseConnection.


        :param connection_id: The connection_id of this DeleteInboundConnectionResponseConnection.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def connection_status(self):
        """Gets the connection_status of this DeleteInboundConnectionResponseConnection.


        :return: The connection_status of this DeleteInboundConnectionResponseConnection.
        :rtype: InboundConnectionConnectionStatus
        """
        return self._connection_status

    @connection_status.setter
    def connection_status(self, connection_status):
        """Sets the connection_status of this DeleteInboundConnectionResponseConnection.


        :param connection_status: The connection_status of this DeleteInboundConnectionResponseConnection.
        :type connection_status: InboundConnectionConnectionStatus
        """

        self._connection_status = connection_status

    @property
    def connection_mode(self):
        """Gets the connection_mode of this DeleteInboundConnectionResponseConnection.


        :return: The connection_mode of this DeleteInboundConnectionResponseConnection.
        :rtype: ConnectionMode
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this DeleteInboundConnectionResponseConnection.


        :param connection_mode: The connection_mode of this DeleteInboundConnectionResponseConnection.
        :type connection_mode: ConnectionMode
        """

        self._connection_mode = connection_mode
