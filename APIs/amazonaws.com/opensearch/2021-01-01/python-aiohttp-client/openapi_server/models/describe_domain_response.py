# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.describe_domain_response_domain_status import DescribeDomainResponseDomainStatus
from openapi_server import util


class DescribeDomainResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_status: DescribeDomainResponseDomainStatus=None):
        """DescribeDomainResponse - a model defined in OpenAPI

        :param domain_status: The domain_status of this DescribeDomainResponse.
        """
        self.openapi_types = {
            'domain_status': DescribeDomainResponseDomainStatus
        }

        self.attribute_map = {
            'domain_status': 'DomainStatus'
        }

        self._domain_status = domain_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDomainResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDomainResponse of this DescribeDomainResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_status(self):
        """Gets the domain_status of this DescribeDomainResponse.


        :return: The domain_status of this DescribeDomainResponse.
        :rtype: DescribeDomainResponseDomainStatus
        """
        return self._domain_status

    @domain_status.setter
    def domain_status(self, domain_status):
        """Sets the domain_status of this DescribeDomainResponse.


        :param domain_status: The domain_status of this DescribeDomainResponse.
        :type domain_status: DescribeDomainResponseDomainStatus
        """
        if domain_status is None:
            raise ValueError("Invalid value for `domain_status`, must not be `None`")

        self._domain_status = domain_status
