# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeDomainsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_names: List[str]=None):
        """DescribeDomainsRequest - a model defined in OpenAPI

        :param domain_names: The domain_names of this DescribeDomainsRequest.
        """
        self.openapi_types = {
            'domain_names': List[str]
        }

        self.attribute_map = {
            'domain_names': 'DomainNames'
        }

        self._domain_names = domain_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDomainsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDomains_request of this DescribeDomainsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_names(self):
        """Gets the domain_names of this DescribeDomainsRequest.

        A list of OpenSearch Service domain names.

        :return: The domain_names of this DescribeDomainsRequest.
        :rtype: List[str]
        """
        return self._domain_names

    @domain_names.setter
    def domain_names(self, domain_names):
        """Sets the domain_names of this DescribeDomainsRequest.

        A list of OpenSearch Service domain names.

        :param domain_names: The domain_names of this DescribeDomainsRequest.
        :type domain_names: List[str]
        """
        if domain_names is None:
            raise ValueError("Invalid value for `domain_names`, must not be `None`")

        self._domain_names = domain_names
