# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option_state import OptionState
from openapi_server import util


class SoftwareUpdateOptionsStatusStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, update_date: datetime=None, update_version: int=None, state: OptionState=None, pending_deletion: bool=None):
        """SoftwareUpdateOptionsStatusStatus - a model defined in OpenAPI

        :param creation_date: The creation_date of this SoftwareUpdateOptionsStatusStatus.
        :param update_date: The update_date of this SoftwareUpdateOptionsStatusStatus.
        :param update_version: The update_version of this SoftwareUpdateOptionsStatusStatus.
        :param state: The state of this SoftwareUpdateOptionsStatusStatus.
        :param pending_deletion: The pending_deletion of this SoftwareUpdateOptionsStatusStatus.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'update_date': datetime,
            'update_version': int,
            'state': OptionState,
            'pending_deletion': bool
        }

        self.attribute_map = {
            'creation_date': 'CreationDate',
            'update_date': 'UpdateDate',
            'update_version': 'UpdateVersion',
            'state': 'State',
            'pending_deletion': 'PendingDeletion'
        }

        self._creation_date = creation_date
        self._update_date = update_date
        self._update_version = update_version
        self._state = state
        self._pending_deletion = pending_deletion

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareUpdateOptionsStatusStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareUpdateOptionsStatus_Status of this SoftwareUpdateOptionsStatusStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this SoftwareUpdateOptionsStatusStatus.


        :return: The creation_date of this SoftwareUpdateOptionsStatusStatus.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this SoftwareUpdateOptionsStatusStatus.


        :param creation_date: The creation_date of this SoftwareUpdateOptionsStatusStatus.
        :type creation_date: datetime
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")

        self._creation_date = creation_date

    @property
    def update_date(self):
        """Gets the update_date of this SoftwareUpdateOptionsStatusStatus.


        :return: The update_date of this SoftwareUpdateOptionsStatusStatus.
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SoftwareUpdateOptionsStatusStatus.


        :param update_date: The update_date of this SoftwareUpdateOptionsStatusStatus.
        :type update_date: datetime
        """
        if update_date is None:
            raise ValueError("Invalid value for `update_date`, must not be `None`")

        self._update_date = update_date

    @property
    def update_version(self):
        """Gets the update_version of this SoftwareUpdateOptionsStatusStatus.


        :return: The update_version of this SoftwareUpdateOptionsStatusStatus.
        :rtype: int
        """
        return self._update_version

    @update_version.setter
    def update_version(self, update_version):
        """Sets the update_version of this SoftwareUpdateOptionsStatusStatus.


        :param update_version: The update_version of this SoftwareUpdateOptionsStatusStatus.
        :type update_version: int
        """

        self._update_version = update_version

    @property
    def state(self):
        """Gets the state of this SoftwareUpdateOptionsStatusStatus.


        :return: The state of this SoftwareUpdateOptionsStatusStatus.
        :rtype: OptionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SoftwareUpdateOptionsStatusStatus.


        :param state: The state of this SoftwareUpdateOptionsStatusStatus.
        :type state: OptionState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def pending_deletion(self):
        """Gets the pending_deletion of this SoftwareUpdateOptionsStatusStatus.


        :return: The pending_deletion of this SoftwareUpdateOptionsStatusStatus.
        :rtype: bool
        """
        return self._pending_deletion

    @pending_deletion.setter
    def pending_deletion(self, pending_deletion):
        """Sets the pending_deletion of this SoftwareUpdateOptionsStatusStatus.


        :param pending_deletion: The pending_deletion of this SoftwareUpdateOptionsStatusStatus.
        :type pending_deletion: bool
        """

        self._pending_deletion = pending_deletion
