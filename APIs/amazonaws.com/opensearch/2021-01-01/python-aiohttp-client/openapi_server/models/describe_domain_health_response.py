# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_health import DomainHealth
from openapi_server.models.domain_state import DomainState
from openapi_server.models.master_node_status import MasterNodeStatus
from openapi_server import util


class DescribeDomainHealthResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_state: DomainState=None, availability_zone_count: str=None, active_availability_zone_count: str=None, stand_by_availability_zone_count: str=None, data_node_count: str=None, dedicated_master: bool=None, master_eligible_node_count: str=None, warm_node_count: str=None, master_node: MasterNodeStatus=None, cluster_health: DomainHealth=None, total_shards: str=None, total_un_assigned_shards: str=None, environment_information: List=None):
        """DescribeDomainHealthResponse - a model defined in OpenAPI

        :param domain_state: The domain_state of this DescribeDomainHealthResponse.
        :param availability_zone_count: The availability_zone_count of this DescribeDomainHealthResponse.
        :param active_availability_zone_count: The active_availability_zone_count of this DescribeDomainHealthResponse.
        :param stand_by_availability_zone_count: The stand_by_availability_zone_count of this DescribeDomainHealthResponse.
        :param data_node_count: The data_node_count of this DescribeDomainHealthResponse.
        :param dedicated_master: The dedicated_master of this DescribeDomainHealthResponse.
        :param master_eligible_node_count: The master_eligible_node_count of this DescribeDomainHealthResponse.
        :param warm_node_count: The warm_node_count of this DescribeDomainHealthResponse.
        :param master_node: The master_node of this DescribeDomainHealthResponse.
        :param cluster_health: The cluster_health of this DescribeDomainHealthResponse.
        :param total_shards: The total_shards of this DescribeDomainHealthResponse.
        :param total_un_assigned_shards: The total_un_assigned_shards of this DescribeDomainHealthResponse.
        :param environment_information: The environment_information of this DescribeDomainHealthResponse.
        """
        self.openapi_types = {
            'domain_state': DomainState,
            'availability_zone_count': str,
            'active_availability_zone_count': str,
            'stand_by_availability_zone_count': str,
            'data_node_count': str,
            'dedicated_master': bool,
            'master_eligible_node_count': str,
            'warm_node_count': str,
            'master_node': MasterNodeStatus,
            'cluster_health': DomainHealth,
            'total_shards': str,
            'total_un_assigned_shards': str,
            'environment_information': List
        }

        self.attribute_map = {
            'domain_state': 'DomainState',
            'availability_zone_count': 'AvailabilityZoneCount',
            'active_availability_zone_count': 'ActiveAvailabilityZoneCount',
            'stand_by_availability_zone_count': 'StandByAvailabilityZoneCount',
            'data_node_count': 'DataNodeCount',
            'dedicated_master': 'DedicatedMaster',
            'master_eligible_node_count': 'MasterEligibleNodeCount',
            'warm_node_count': 'WarmNodeCount',
            'master_node': 'MasterNode',
            'cluster_health': 'ClusterHealth',
            'total_shards': 'TotalShards',
            'total_un_assigned_shards': 'TotalUnAssignedShards',
            'environment_information': 'EnvironmentInformation'
        }

        self._domain_state = domain_state
        self._availability_zone_count = availability_zone_count
        self._active_availability_zone_count = active_availability_zone_count
        self._stand_by_availability_zone_count = stand_by_availability_zone_count
        self._data_node_count = data_node_count
        self._dedicated_master = dedicated_master
        self._master_eligible_node_count = master_eligible_node_count
        self._warm_node_count = warm_node_count
        self._master_node = master_node
        self._cluster_health = cluster_health
        self._total_shards = total_shards
        self._total_un_assigned_shards = total_un_assigned_shards
        self._environment_information = environment_information

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDomainHealthResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDomainHealthResponse of this DescribeDomainHealthResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_state(self):
        """Gets the domain_state of this DescribeDomainHealthResponse.


        :return: The domain_state of this DescribeDomainHealthResponse.
        :rtype: DomainState
        """
        return self._domain_state

    @domain_state.setter
    def domain_state(self, domain_state):
        """Sets the domain_state of this DescribeDomainHealthResponse.


        :param domain_state: The domain_state of this DescribeDomainHealthResponse.
        :type domain_state: DomainState
        """

        self._domain_state = domain_state

    @property
    def availability_zone_count(self):
        """Gets the availability_zone_count of this DescribeDomainHealthResponse.


        :return: The availability_zone_count of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._availability_zone_count

    @availability_zone_count.setter
    def availability_zone_count(self, availability_zone_count):
        """Sets the availability_zone_count of this DescribeDomainHealthResponse.


        :param availability_zone_count: The availability_zone_count of this DescribeDomainHealthResponse.
        :type availability_zone_count: str
        """

        self._availability_zone_count = availability_zone_count

    @property
    def active_availability_zone_count(self):
        """Gets the active_availability_zone_count of this DescribeDomainHealthResponse.


        :return: The active_availability_zone_count of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._active_availability_zone_count

    @active_availability_zone_count.setter
    def active_availability_zone_count(self, active_availability_zone_count):
        """Sets the active_availability_zone_count of this DescribeDomainHealthResponse.


        :param active_availability_zone_count: The active_availability_zone_count of this DescribeDomainHealthResponse.
        :type active_availability_zone_count: str
        """

        self._active_availability_zone_count = active_availability_zone_count

    @property
    def stand_by_availability_zone_count(self):
        """Gets the stand_by_availability_zone_count of this DescribeDomainHealthResponse.


        :return: The stand_by_availability_zone_count of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._stand_by_availability_zone_count

    @stand_by_availability_zone_count.setter
    def stand_by_availability_zone_count(self, stand_by_availability_zone_count):
        """Sets the stand_by_availability_zone_count of this DescribeDomainHealthResponse.


        :param stand_by_availability_zone_count: The stand_by_availability_zone_count of this DescribeDomainHealthResponse.
        :type stand_by_availability_zone_count: str
        """

        self._stand_by_availability_zone_count = stand_by_availability_zone_count

    @property
    def data_node_count(self):
        """Gets the data_node_count of this DescribeDomainHealthResponse.


        :return: The data_node_count of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._data_node_count

    @data_node_count.setter
    def data_node_count(self, data_node_count):
        """Sets the data_node_count of this DescribeDomainHealthResponse.


        :param data_node_count: The data_node_count of this DescribeDomainHealthResponse.
        :type data_node_count: str
        """

        self._data_node_count = data_node_count

    @property
    def dedicated_master(self):
        """Gets the dedicated_master of this DescribeDomainHealthResponse.


        :return: The dedicated_master of this DescribeDomainHealthResponse.
        :rtype: bool
        """
        return self._dedicated_master

    @dedicated_master.setter
    def dedicated_master(self, dedicated_master):
        """Sets the dedicated_master of this DescribeDomainHealthResponse.


        :param dedicated_master: The dedicated_master of this DescribeDomainHealthResponse.
        :type dedicated_master: bool
        """

        self._dedicated_master = dedicated_master

    @property
    def master_eligible_node_count(self):
        """Gets the master_eligible_node_count of this DescribeDomainHealthResponse.


        :return: The master_eligible_node_count of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._master_eligible_node_count

    @master_eligible_node_count.setter
    def master_eligible_node_count(self, master_eligible_node_count):
        """Sets the master_eligible_node_count of this DescribeDomainHealthResponse.


        :param master_eligible_node_count: The master_eligible_node_count of this DescribeDomainHealthResponse.
        :type master_eligible_node_count: str
        """

        self._master_eligible_node_count = master_eligible_node_count

    @property
    def warm_node_count(self):
        """Gets the warm_node_count of this DescribeDomainHealthResponse.


        :return: The warm_node_count of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._warm_node_count

    @warm_node_count.setter
    def warm_node_count(self, warm_node_count):
        """Sets the warm_node_count of this DescribeDomainHealthResponse.


        :param warm_node_count: The warm_node_count of this DescribeDomainHealthResponse.
        :type warm_node_count: str
        """

        self._warm_node_count = warm_node_count

    @property
    def master_node(self):
        """Gets the master_node of this DescribeDomainHealthResponse.


        :return: The master_node of this DescribeDomainHealthResponse.
        :rtype: MasterNodeStatus
        """
        return self._master_node

    @master_node.setter
    def master_node(self, master_node):
        """Sets the master_node of this DescribeDomainHealthResponse.


        :param master_node: The master_node of this DescribeDomainHealthResponse.
        :type master_node: MasterNodeStatus
        """

        self._master_node = master_node

    @property
    def cluster_health(self):
        """Gets the cluster_health of this DescribeDomainHealthResponse.


        :return: The cluster_health of this DescribeDomainHealthResponse.
        :rtype: DomainHealth
        """
        return self._cluster_health

    @cluster_health.setter
    def cluster_health(self, cluster_health):
        """Sets the cluster_health of this DescribeDomainHealthResponse.


        :param cluster_health: The cluster_health of this DescribeDomainHealthResponse.
        :type cluster_health: DomainHealth
        """

        self._cluster_health = cluster_health

    @property
    def total_shards(self):
        """Gets the total_shards of this DescribeDomainHealthResponse.


        :return: The total_shards of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._total_shards

    @total_shards.setter
    def total_shards(self, total_shards):
        """Sets the total_shards of this DescribeDomainHealthResponse.


        :param total_shards: The total_shards of this DescribeDomainHealthResponse.
        :type total_shards: str
        """

        self._total_shards = total_shards

    @property
    def total_un_assigned_shards(self):
        """Gets the total_un_assigned_shards of this DescribeDomainHealthResponse.


        :return: The total_un_assigned_shards of this DescribeDomainHealthResponse.
        :rtype: str
        """
        return self._total_un_assigned_shards

    @total_un_assigned_shards.setter
    def total_un_assigned_shards(self, total_un_assigned_shards):
        """Sets the total_un_assigned_shards of this DescribeDomainHealthResponse.


        :param total_un_assigned_shards: The total_un_assigned_shards of this DescribeDomainHealthResponse.
        :type total_un_assigned_shards: str
        """

        self._total_un_assigned_shards = total_un_assigned_shards

    @property
    def environment_information(self):
        """Gets the environment_information of this DescribeDomainHealthResponse.


        :return: The environment_information of this DescribeDomainHealthResponse.
        :rtype: List
        """
        return self._environment_information

    @environment_information.setter
    def environment_information(self, environment_information):
        """Sets the environment_information of this DescribeDomainHealthResponse.


        :param environment_information: The environment_information of this DescribeDomainHealthResponse.
        :type environment_information: List
        """

        self._environment_information = environment_information
