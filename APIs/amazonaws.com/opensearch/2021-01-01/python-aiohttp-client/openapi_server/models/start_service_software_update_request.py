# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartServiceSoftwareUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domain_name: str=None, schedule_at: str=None, desired_start_time: int=None):
        """StartServiceSoftwareUpdateRequest - a model defined in OpenAPI

        :param domain_name: The domain_name of this StartServiceSoftwareUpdateRequest.
        :param schedule_at: The schedule_at of this StartServiceSoftwareUpdateRequest.
        :param desired_start_time: The desired_start_time of this StartServiceSoftwareUpdateRequest.
        """
        self.openapi_types = {
            'domain_name': str,
            'schedule_at': str,
            'desired_start_time': int
        }

        self.attribute_map = {
            'domain_name': 'DomainName',
            'schedule_at': 'ScheduleAt',
            'desired_start_time': 'DesiredStartTime'
        }

        self._domain_name = domain_name
        self._schedule_at = schedule_at
        self._desired_start_time = desired_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartServiceSoftwareUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartServiceSoftwareUpdate_request of this StartServiceSoftwareUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domain_name(self):
        """Gets the domain_name of this StartServiceSoftwareUpdateRequest.

        The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.

        :return: The domain_name of this StartServiceSoftwareUpdateRequest.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this StartServiceSoftwareUpdateRequest.

        The name of an OpenSearch Service domain. Domain names are unique across the domains owned by an account within an Amazon Web Services Region.

        :param domain_name: The domain_name of this StartServiceSoftwareUpdateRequest.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")
        if domain_name is not None and len(domain_name) > 28:
            raise ValueError("Invalid value for `domain_name`, length must be less than or equal to `28`")
        if domain_name is not None and len(domain_name) < 3:
            raise ValueError("Invalid value for `domain_name`, length must be greater than or equal to `3`")
        if domain_name is not None and not re.search(r'[a-z][a-z0-9\-]+', domain_name):
            raise ValueError("Invalid value for `domain_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._domain_name = domain_name

    @property
    def schedule_at(self):
        """Gets the schedule_at of this StartServiceSoftwareUpdateRequest.

        <p>When to start the service software update.</p> <ul> <li> <p> <code>NOW</code> - Immediately schedules the update to happen in the current hour if there's capacity available.</p> </li> <li> <p> <code>TIMESTAMP</code> - Lets you specify a custom date and time to apply the update. If you specify this value, you must also provide a value for <code>DesiredStartTime</code>.</p> </li> <li> <p> <code>OFF_PEAK_WINDOW</code> - Marks the update to be picked up during an upcoming off-peak window. There's no guarantee that the update will happen during the next immediate window. Depending on capacity, it might happen in subsequent days.</p> </li> </ul> <p>Default: <code>NOW</code> if you don't specify a value for <code>DesiredStartTime</code>, and <code>TIMESTAMP</code> if you do.</p>

        :return: The schedule_at of this StartServiceSoftwareUpdateRequest.
        :rtype: str
        """
        return self._schedule_at

    @schedule_at.setter
    def schedule_at(self, schedule_at):
        """Sets the schedule_at of this StartServiceSoftwareUpdateRequest.

        <p>When to start the service software update.</p> <ul> <li> <p> <code>NOW</code> - Immediately schedules the update to happen in the current hour if there's capacity available.</p> </li> <li> <p> <code>TIMESTAMP</code> - Lets you specify a custom date and time to apply the update. If you specify this value, you must also provide a value for <code>DesiredStartTime</code>.</p> </li> <li> <p> <code>OFF_PEAK_WINDOW</code> - Marks the update to be picked up during an upcoming off-peak window. There's no guarantee that the update will happen during the next immediate window. Depending on capacity, it might happen in subsequent days.</p> </li> </ul> <p>Default: <code>NOW</code> if you don't specify a value for <code>DesiredStartTime</code>, and <code>TIMESTAMP</code> if you do.</p>

        :param schedule_at: The schedule_at of this StartServiceSoftwareUpdateRequest.
        :type schedule_at: str
        """
        allowed_values = ["NOW", "TIMESTAMP", "OFF_PEAK_WINDOW"]  # noqa: E501
        if schedule_at not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_at` ({0}), must be one of {1}"
                .format(schedule_at, allowed_values)
            )

        self._schedule_at = schedule_at

    @property
    def desired_start_time(self):
        """Gets the desired_start_time of this StartServiceSoftwareUpdateRequest.

        The Epoch timestamp when you want the service software update to start. You only need to specify this parameter if you set <code>ScheduleAt</code> to <code>TIMESTAMP</code>.

        :return: The desired_start_time of this StartServiceSoftwareUpdateRequest.
        :rtype: int
        """
        return self._desired_start_time

    @desired_start_time.setter
    def desired_start_time(self, desired_start_time):
        """Sets the desired_start_time of this StartServiceSoftwareUpdateRequest.

        The Epoch timestamp when you want the service software update to start. You only need to specify this parameter if you set <code>ScheduleAt</code> to <code>TIMESTAMP</code>.

        :param desired_start_time: The desired_start_time of this StartServiceSoftwareUpdateRequest.
        :type desired_start_time: int
        """

        self._desired_start_time = desired_start_time
