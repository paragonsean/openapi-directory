# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PurchaseReservedInstanceOfferingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_instance_offering_id: str=None, reservation_name: str=None, instance_count: int=None):
        """PurchaseReservedInstanceOfferingRequest - a model defined in OpenAPI

        :param reserved_instance_offering_id: The reserved_instance_offering_id of this PurchaseReservedInstanceOfferingRequest.
        :param reservation_name: The reservation_name of this PurchaseReservedInstanceOfferingRequest.
        :param instance_count: The instance_count of this PurchaseReservedInstanceOfferingRequest.
        """
        self.openapi_types = {
            'reserved_instance_offering_id': str,
            'reservation_name': str,
            'instance_count': int
        }

        self.attribute_map = {
            'reserved_instance_offering_id': 'ReservedInstanceOfferingId',
            'reservation_name': 'ReservationName',
            'instance_count': 'InstanceCount'
        }

        self._reserved_instance_offering_id = reserved_instance_offering_id
        self._reservation_name = reservation_name
        self._instance_count = instance_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurchaseReservedInstanceOfferingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurchaseReservedInstanceOffering_request of this PurchaseReservedInstanceOfferingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_instance_offering_id(self):
        """Gets the reserved_instance_offering_id of this PurchaseReservedInstanceOfferingRequest.

        The ID of the Reserved Instance offering to purchase.

        :return: The reserved_instance_offering_id of this PurchaseReservedInstanceOfferingRequest.
        :rtype: str
        """
        return self._reserved_instance_offering_id

    @reserved_instance_offering_id.setter
    def reserved_instance_offering_id(self, reserved_instance_offering_id):
        """Sets the reserved_instance_offering_id of this PurchaseReservedInstanceOfferingRequest.

        The ID of the Reserved Instance offering to purchase.

        :param reserved_instance_offering_id: The reserved_instance_offering_id of this PurchaseReservedInstanceOfferingRequest.
        :type reserved_instance_offering_id: str
        """
        if reserved_instance_offering_id is None:
            raise ValueError("Invalid value for `reserved_instance_offering_id`, must not be `None`")
        if reserved_instance_offering_id is not None and len(reserved_instance_offering_id) > 36:
            raise ValueError("Invalid value for `reserved_instance_offering_id`, length must be less than or equal to `36`")
        if reserved_instance_offering_id is not None and len(reserved_instance_offering_id) < 36:
            raise ValueError("Invalid value for `reserved_instance_offering_id`, length must be greater than or equal to `36`")
        if reserved_instance_offering_id is not None and not re.search(r'\p{XDigit}{8}-\p{XDigit}{4}-\p{XDigit}{4}-\p{XDigit}{4}-\p{XDigit}{12}', reserved_instance_offering_id):
            raise ValueError("Invalid value for `reserved_instance_offering_id`, must be a follow pattern or equal to `/\p{XDigit}{8}-\p{XDigit}{4}-\p{XDigit}{4}-\p{XDigit}{4}-\p{XDigit}{12}/`")

        self._reserved_instance_offering_id = reserved_instance_offering_id

    @property
    def reservation_name(self):
        """Gets the reservation_name of this PurchaseReservedInstanceOfferingRequest.

        A customer-specified identifier to track this reservation.

        :return: The reservation_name of this PurchaseReservedInstanceOfferingRequest.
        :rtype: str
        """
        return self._reservation_name

    @reservation_name.setter
    def reservation_name(self, reservation_name):
        """Sets the reservation_name of this PurchaseReservedInstanceOfferingRequest.

        A customer-specified identifier to track this reservation.

        :param reservation_name: The reservation_name of this PurchaseReservedInstanceOfferingRequest.
        :type reservation_name: str
        """
        if reservation_name is None:
            raise ValueError("Invalid value for `reservation_name`, must not be `None`")
        if reservation_name is not None and len(reservation_name) > 64:
            raise ValueError("Invalid value for `reservation_name`, length must be less than or equal to `64`")
        if reservation_name is not None and len(reservation_name) < 5:
            raise ValueError("Invalid value for `reservation_name`, length must be greater than or equal to `5`")
        if reservation_name is not None and not re.search(r'.*', reservation_name):
            raise ValueError("Invalid value for `reservation_name`, must be a follow pattern or equal to `/.*/`")

        self._reservation_name = reservation_name

    @property
    def instance_count(self):
        """Gets the instance_count of this PurchaseReservedInstanceOfferingRequest.

        Number of instances in an OpenSearch Service cluster.

        :return: The instance_count of this PurchaseReservedInstanceOfferingRequest.
        :rtype: int
        """
        return self._instance_count

    @instance_count.setter
    def instance_count(self, instance_count):
        """Sets the instance_count of this PurchaseReservedInstanceOfferingRequest.

        Number of instances in an OpenSearch Service cluster.

        :param instance_count: The instance_count of this PurchaseReservedInstanceOfferingRequest.
        :type instance_count: int
        """
        if instance_count is not None and instance_count < 1:
            raise ValueError("Invalid value for `instance_count`, must be a value greater than or equal to `1`")

        self._instance_count = instance_count
