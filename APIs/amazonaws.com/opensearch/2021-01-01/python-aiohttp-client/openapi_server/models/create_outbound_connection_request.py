# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_outbound_connection_request_connection_properties import CreateOutboundConnectionRequestConnectionProperties
from openapi_server.models.create_outbound_connection_request_local_domain_info import CreateOutboundConnectionRequestLocalDomainInfo
import re
from openapi_server import util


class CreateOutboundConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_domain_info: CreateOutboundConnectionRequestLocalDomainInfo=None, remote_domain_info: CreateOutboundConnectionRequestLocalDomainInfo=None, connection_alias: str=None, connection_mode: str=None, connection_properties: CreateOutboundConnectionRequestConnectionProperties=None):
        """CreateOutboundConnectionRequest - a model defined in OpenAPI

        :param local_domain_info: The local_domain_info of this CreateOutboundConnectionRequest.
        :param remote_domain_info: The remote_domain_info of this CreateOutboundConnectionRequest.
        :param connection_alias: The connection_alias of this CreateOutboundConnectionRequest.
        :param connection_mode: The connection_mode of this CreateOutboundConnectionRequest.
        :param connection_properties: The connection_properties of this CreateOutboundConnectionRequest.
        """
        self.openapi_types = {
            'local_domain_info': CreateOutboundConnectionRequestLocalDomainInfo,
            'remote_domain_info': CreateOutboundConnectionRequestLocalDomainInfo,
            'connection_alias': str,
            'connection_mode': str,
            'connection_properties': CreateOutboundConnectionRequestConnectionProperties
        }

        self.attribute_map = {
            'local_domain_info': 'LocalDomainInfo',
            'remote_domain_info': 'RemoteDomainInfo',
            'connection_alias': 'ConnectionAlias',
            'connection_mode': 'ConnectionMode',
            'connection_properties': 'ConnectionProperties'
        }

        self._local_domain_info = local_domain_info
        self._remote_domain_info = remote_domain_info
        self._connection_alias = connection_alias
        self._connection_mode = connection_mode
        self._connection_properties = connection_properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOutboundConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOutboundConnection_request of this CreateOutboundConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_domain_info(self):
        """Gets the local_domain_info of this CreateOutboundConnectionRequest.


        :return: The local_domain_info of this CreateOutboundConnectionRequest.
        :rtype: CreateOutboundConnectionRequestLocalDomainInfo
        """
        return self._local_domain_info

    @local_domain_info.setter
    def local_domain_info(self, local_domain_info):
        """Sets the local_domain_info of this CreateOutboundConnectionRequest.


        :param local_domain_info: The local_domain_info of this CreateOutboundConnectionRequest.
        :type local_domain_info: CreateOutboundConnectionRequestLocalDomainInfo
        """
        if local_domain_info is None:
            raise ValueError("Invalid value for `local_domain_info`, must not be `None`")

        self._local_domain_info = local_domain_info

    @property
    def remote_domain_info(self):
        """Gets the remote_domain_info of this CreateOutboundConnectionRequest.


        :return: The remote_domain_info of this CreateOutboundConnectionRequest.
        :rtype: CreateOutboundConnectionRequestLocalDomainInfo
        """
        return self._remote_domain_info

    @remote_domain_info.setter
    def remote_domain_info(self, remote_domain_info):
        """Sets the remote_domain_info of this CreateOutboundConnectionRequest.


        :param remote_domain_info: The remote_domain_info of this CreateOutboundConnectionRequest.
        :type remote_domain_info: CreateOutboundConnectionRequestLocalDomainInfo
        """
        if remote_domain_info is None:
            raise ValueError("Invalid value for `remote_domain_info`, must not be `None`")

        self._remote_domain_info = remote_domain_info

    @property
    def connection_alias(self):
        """Gets the connection_alias of this CreateOutboundConnectionRequest.

        Name of the connection.

        :return: The connection_alias of this CreateOutboundConnectionRequest.
        :rtype: str
        """
        return self._connection_alias

    @connection_alias.setter
    def connection_alias(self, connection_alias):
        """Sets the connection_alias of this CreateOutboundConnectionRequest.

        Name of the connection.

        :param connection_alias: The connection_alias of this CreateOutboundConnectionRequest.
        :type connection_alias: str
        """
        if connection_alias is None:
            raise ValueError("Invalid value for `connection_alias`, must not be `None`")
        if connection_alias is not None and len(connection_alias) > 100:
            raise ValueError("Invalid value for `connection_alias`, length must be less than or equal to `100`")
        if connection_alias is not None and len(connection_alias) < 2:
            raise ValueError("Invalid value for `connection_alias`, length must be greater than or equal to `2`")
        if connection_alias is not None and not re.search(r'[a-zA-Z][a-zA-Z0-9\-\_]+', connection_alias):
            raise ValueError("Invalid value for `connection_alias`, must be a follow pattern or equal to `/[a-zA-Z][a-zA-Z0-9\-\_]+/`")

        self._connection_alias = connection_alias

    @property
    def connection_mode(self):
        """Gets the connection_mode of this CreateOutboundConnectionRequest.

        <p>The connection mode for the cross-cluster connection.</p> <ul> <li> <p> <b>DIRECT</b> - Used for cross-cluster search or cross-cluster replication.</p> </li> <li> <p> <b>VPC_ENDPOINT</b> - Used for remote reindex between Amazon OpenSearch Service VPC domains.</p> </li> </ul>

        :return: The connection_mode of this CreateOutboundConnectionRequest.
        :rtype: str
        """
        return self._connection_mode

    @connection_mode.setter
    def connection_mode(self, connection_mode):
        """Sets the connection_mode of this CreateOutboundConnectionRequest.

        <p>The connection mode for the cross-cluster connection.</p> <ul> <li> <p> <b>DIRECT</b> - Used for cross-cluster search or cross-cluster replication.</p> </li> <li> <p> <b>VPC_ENDPOINT</b> - Used for remote reindex between Amazon OpenSearch Service VPC domains.</p> </li> </ul>

        :param connection_mode: The connection_mode of this CreateOutboundConnectionRequest.
        :type connection_mode: str
        """
        allowed_values = ["DIRECT", "VPC_ENDPOINT"]  # noqa: E501
        if connection_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_mode` ({0}), must be one of {1}"
                .format(connection_mode, allowed_values)
            )

        self._connection_mode = connection_mode

    @property
    def connection_properties(self):
        """Gets the connection_properties of this CreateOutboundConnectionRequest.


        :return: The connection_properties of this CreateOutboundConnectionRequest.
        :rtype: CreateOutboundConnectionRequestConnectionProperties
        """
        return self._connection_properties

    @connection_properties.setter
    def connection_properties(self, connection_properties):
        """Sets the connection_properties of this CreateOutboundConnectionRequest.


        :param connection_properties: The connection_properties of this CreateOutboundConnectionRequest.
        :type connection_properties: CreateOutboundConnectionRequestConnectionProperties
        """

        self._connection_properties = connection_properties
