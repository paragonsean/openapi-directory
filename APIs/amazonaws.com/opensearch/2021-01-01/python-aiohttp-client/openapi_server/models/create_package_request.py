# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_package_request_package_source import CreatePackageRequestPackageSource
import re
from openapi_server import util


class CreatePackageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_name: str=None, package_type: str=None, package_description: str=None, package_source: CreatePackageRequestPackageSource=None):
        """CreatePackageRequest - a model defined in OpenAPI

        :param package_name: The package_name of this CreatePackageRequest.
        :param package_type: The package_type of this CreatePackageRequest.
        :param package_description: The package_description of this CreatePackageRequest.
        :param package_source: The package_source of this CreatePackageRequest.
        """
        self.openapi_types = {
            'package_name': str,
            'package_type': str,
            'package_description': str,
            'package_source': CreatePackageRequestPackageSource
        }

        self.attribute_map = {
            'package_name': 'PackageName',
            'package_type': 'PackageType',
            'package_description': 'PackageDescription',
            'package_source': 'PackageSource'
        }

        self._package_name = package_name
        self._package_type = package_type
        self._package_description = package_description
        self._package_source = package_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePackageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePackage_request of this CreatePackageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_name(self):
        """Gets the package_name of this CreatePackageRequest.

        Unique name for the package.

        :return: The package_name of this CreatePackageRequest.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this CreatePackageRequest.

        Unique name for the package.

        :param package_name: The package_name of this CreatePackageRequest.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")
        if package_name is not None and len(package_name) > 28:
            raise ValueError("Invalid value for `package_name`, length must be less than or equal to `28`")
        if package_name is not None and len(package_name) < 3:
            raise ValueError("Invalid value for `package_name`, length must be greater than or equal to `3`")
        if package_name is not None and not re.search(r'[a-z][a-z0-9\-]+', package_name):
            raise ValueError("Invalid value for `package_name`, must be a follow pattern or equal to `/[a-z][a-z0-9\-]+/`")

        self._package_name = package_name

    @property
    def package_type(self):
        """Gets the package_type of this CreatePackageRequest.

        The type of package.

        :return: The package_type of this CreatePackageRequest.
        :rtype: str
        """
        return self._package_type

    @package_type.setter
    def package_type(self, package_type):
        """Sets the package_type of this CreatePackageRequest.

        The type of package.

        :param package_type: The package_type of this CreatePackageRequest.
        :type package_type: str
        """
        allowed_values = ["TXT-DICTIONARY"]  # noqa: E501
        if package_type not in allowed_values:
            raise ValueError(
                "Invalid value for `package_type` ({0}), must be one of {1}"
                .format(package_type, allowed_values)
            )

        self._package_type = package_type

    @property
    def package_description(self):
        """Gets the package_description of this CreatePackageRequest.

        Description of the package.

        :return: The package_description of this CreatePackageRequest.
        :rtype: str
        """
        return self._package_description

    @package_description.setter
    def package_description(self, package_description):
        """Sets the package_description of this CreatePackageRequest.

        Description of the package.

        :param package_description: The package_description of this CreatePackageRequest.
        :type package_description: str
        """
        if package_description is not None and len(package_description) > 1024:
            raise ValueError("Invalid value for `package_description`, length must be less than or equal to `1024`")

        self._package_description = package_description

    @property
    def package_source(self):
        """Gets the package_source of this CreatePackageRequest.


        :return: The package_source of this CreatePackageRequest.
        :rtype: CreatePackageRequestPackageSource
        """
        return self._package_source

    @package_source.setter
    def package_source(self, package_source):
        """Sets the package_source of this CreatePackageRequest.


        :param package_source: The package_source of this CreatePackageRequest.
        :type package_source: CreatePackageRequestPackageSource
        """
        if package_source is None:
            raise ValueError("Invalid value for `package_source`, must not be `None`")

        self._package_source = package_source
