# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain_config_access_policies import DomainConfigAccessPolicies
from openapi_server.models.domain_config_advanced_options import DomainConfigAdvancedOptions
from openapi_server.models.domain_config_advanced_security_options import DomainConfigAdvancedSecurityOptions
from openapi_server.models.domain_config_auto_tune_options import DomainConfigAutoTuneOptions
from openapi_server.models.domain_config_change_progress_details import DomainConfigChangeProgressDetails
from openapi_server.models.domain_config_cluster_config import DomainConfigClusterConfig
from openapi_server.models.domain_config_cognito_options import DomainConfigCognitoOptions
from openapi_server.models.domain_config_domain_endpoint_options import DomainConfigDomainEndpointOptions
from openapi_server.models.domain_config_ebs_options import DomainConfigEBSOptions
from openapi_server.models.domain_config_encryption_at_rest_options import DomainConfigEncryptionAtRestOptions
from openapi_server.models.domain_config_engine_version import DomainConfigEngineVersion
from openapi_server.models.domain_config_log_publishing_options import DomainConfigLogPublishingOptions
from openapi_server.models.domain_config_node_to_node_encryption_options import DomainConfigNodeToNodeEncryptionOptions
from openapi_server.models.domain_config_off_peak_window_options import DomainConfigOffPeakWindowOptions
from openapi_server.models.domain_config_snapshot_options import DomainConfigSnapshotOptions
from openapi_server.models.domain_config_software_update_options import DomainConfigSoftwareUpdateOptions
from openapi_server.models.domain_config_vpc_options import DomainConfigVPCOptions
from openapi_server import util


class DomainConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine_version: DomainConfigEngineVersion=None, cluster_config: DomainConfigClusterConfig=None, ebs_options: DomainConfigEBSOptions=None, access_policies: DomainConfigAccessPolicies=None, snapshot_options: DomainConfigSnapshotOptions=None, vpc_options: DomainConfigVPCOptions=None, cognito_options: DomainConfigCognitoOptions=None, encryption_at_rest_options: DomainConfigEncryptionAtRestOptions=None, node_to_node_encryption_options: DomainConfigNodeToNodeEncryptionOptions=None, advanced_options: DomainConfigAdvancedOptions=None, log_publishing_options: DomainConfigLogPublishingOptions=None, domain_endpoint_options: DomainConfigDomainEndpointOptions=None, advanced_security_options: DomainConfigAdvancedSecurityOptions=None, auto_tune_options: DomainConfigAutoTuneOptions=None, change_progress_details: DomainConfigChangeProgressDetails=None, off_peak_window_options: DomainConfigOffPeakWindowOptions=None, software_update_options: DomainConfigSoftwareUpdateOptions=None):
        """DomainConfig - a model defined in OpenAPI

        :param engine_version: The engine_version of this DomainConfig.
        :param cluster_config: The cluster_config of this DomainConfig.
        :param ebs_options: The ebs_options of this DomainConfig.
        :param access_policies: The access_policies of this DomainConfig.
        :param snapshot_options: The snapshot_options of this DomainConfig.
        :param vpc_options: The vpc_options of this DomainConfig.
        :param cognito_options: The cognito_options of this DomainConfig.
        :param encryption_at_rest_options: The encryption_at_rest_options of this DomainConfig.
        :param node_to_node_encryption_options: The node_to_node_encryption_options of this DomainConfig.
        :param advanced_options: The advanced_options of this DomainConfig.
        :param log_publishing_options: The log_publishing_options of this DomainConfig.
        :param domain_endpoint_options: The domain_endpoint_options of this DomainConfig.
        :param advanced_security_options: The advanced_security_options of this DomainConfig.
        :param auto_tune_options: The auto_tune_options of this DomainConfig.
        :param change_progress_details: The change_progress_details of this DomainConfig.
        :param off_peak_window_options: The off_peak_window_options of this DomainConfig.
        :param software_update_options: The software_update_options of this DomainConfig.
        """
        self.openapi_types = {
            'engine_version': DomainConfigEngineVersion,
            'cluster_config': DomainConfigClusterConfig,
            'ebs_options': DomainConfigEBSOptions,
            'access_policies': DomainConfigAccessPolicies,
            'snapshot_options': DomainConfigSnapshotOptions,
            'vpc_options': DomainConfigVPCOptions,
            'cognito_options': DomainConfigCognitoOptions,
            'encryption_at_rest_options': DomainConfigEncryptionAtRestOptions,
            'node_to_node_encryption_options': DomainConfigNodeToNodeEncryptionOptions,
            'advanced_options': DomainConfigAdvancedOptions,
            'log_publishing_options': DomainConfigLogPublishingOptions,
            'domain_endpoint_options': DomainConfigDomainEndpointOptions,
            'advanced_security_options': DomainConfigAdvancedSecurityOptions,
            'auto_tune_options': DomainConfigAutoTuneOptions,
            'change_progress_details': DomainConfigChangeProgressDetails,
            'off_peak_window_options': DomainConfigOffPeakWindowOptions,
            'software_update_options': DomainConfigSoftwareUpdateOptions
        }

        self.attribute_map = {
            'engine_version': 'EngineVersion',
            'cluster_config': 'ClusterConfig',
            'ebs_options': 'EBSOptions',
            'access_policies': 'AccessPolicies',
            'snapshot_options': 'SnapshotOptions',
            'vpc_options': 'VPCOptions',
            'cognito_options': 'CognitoOptions',
            'encryption_at_rest_options': 'EncryptionAtRestOptions',
            'node_to_node_encryption_options': 'NodeToNodeEncryptionOptions',
            'advanced_options': 'AdvancedOptions',
            'log_publishing_options': 'LogPublishingOptions',
            'domain_endpoint_options': 'DomainEndpointOptions',
            'advanced_security_options': 'AdvancedSecurityOptions',
            'auto_tune_options': 'AutoTuneOptions',
            'change_progress_details': 'ChangeProgressDetails',
            'off_peak_window_options': 'OffPeakWindowOptions',
            'software_update_options': 'SoftwareUpdateOptions'
        }

        self._engine_version = engine_version
        self._cluster_config = cluster_config
        self._ebs_options = ebs_options
        self._access_policies = access_policies
        self._snapshot_options = snapshot_options
        self._vpc_options = vpc_options
        self._cognito_options = cognito_options
        self._encryption_at_rest_options = encryption_at_rest_options
        self._node_to_node_encryption_options = node_to_node_encryption_options
        self._advanced_options = advanced_options
        self._log_publishing_options = log_publishing_options
        self._domain_endpoint_options = domain_endpoint_options
        self._advanced_security_options = advanced_security_options
        self._auto_tune_options = auto_tune_options
        self._change_progress_details = change_progress_details
        self._off_peak_window_options = off_peak_window_options
        self._software_update_options = software_update_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DomainConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DomainConfig of this DomainConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine_version(self):
        """Gets the engine_version of this DomainConfig.


        :return: The engine_version of this DomainConfig.
        :rtype: DomainConfigEngineVersion
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version):
        """Sets the engine_version of this DomainConfig.


        :param engine_version: The engine_version of this DomainConfig.
        :type engine_version: DomainConfigEngineVersion
        """

        self._engine_version = engine_version

    @property
    def cluster_config(self):
        """Gets the cluster_config of this DomainConfig.


        :return: The cluster_config of this DomainConfig.
        :rtype: DomainConfigClusterConfig
        """
        return self._cluster_config

    @cluster_config.setter
    def cluster_config(self, cluster_config):
        """Sets the cluster_config of this DomainConfig.


        :param cluster_config: The cluster_config of this DomainConfig.
        :type cluster_config: DomainConfigClusterConfig
        """

        self._cluster_config = cluster_config

    @property
    def ebs_options(self):
        """Gets the ebs_options of this DomainConfig.


        :return: The ebs_options of this DomainConfig.
        :rtype: DomainConfigEBSOptions
        """
        return self._ebs_options

    @ebs_options.setter
    def ebs_options(self, ebs_options):
        """Sets the ebs_options of this DomainConfig.


        :param ebs_options: The ebs_options of this DomainConfig.
        :type ebs_options: DomainConfigEBSOptions
        """

        self._ebs_options = ebs_options

    @property
    def access_policies(self):
        """Gets the access_policies of this DomainConfig.


        :return: The access_policies of this DomainConfig.
        :rtype: DomainConfigAccessPolicies
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """Sets the access_policies of this DomainConfig.


        :param access_policies: The access_policies of this DomainConfig.
        :type access_policies: DomainConfigAccessPolicies
        """

        self._access_policies = access_policies

    @property
    def snapshot_options(self):
        """Gets the snapshot_options of this DomainConfig.


        :return: The snapshot_options of this DomainConfig.
        :rtype: DomainConfigSnapshotOptions
        """
        return self._snapshot_options

    @snapshot_options.setter
    def snapshot_options(self, snapshot_options):
        """Sets the snapshot_options of this DomainConfig.


        :param snapshot_options: The snapshot_options of this DomainConfig.
        :type snapshot_options: DomainConfigSnapshotOptions
        """

        self._snapshot_options = snapshot_options

    @property
    def vpc_options(self):
        """Gets the vpc_options of this DomainConfig.


        :return: The vpc_options of this DomainConfig.
        :rtype: DomainConfigVPCOptions
        """
        return self._vpc_options

    @vpc_options.setter
    def vpc_options(self, vpc_options):
        """Sets the vpc_options of this DomainConfig.


        :param vpc_options: The vpc_options of this DomainConfig.
        :type vpc_options: DomainConfigVPCOptions
        """

        self._vpc_options = vpc_options

    @property
    def cognito_options(self):
        """Gets the cognito_options of this DomainConfig.


        :return: The cognito_options of this DomainConfig.
        :rtype: DomainConfigCognitoOptions
        """
        return self._cognito_options

    @cognito_options.setter
    def cognito_options(self, cognito_options):
        """Sets the cognito_options of this DomainConfig.


        :param cognito_options: The cognito_options of this DomainConfig.
        :type cognito_options: DomainConfigCognitoOptions
        """

        self._cognito_options = cognito_options

    @property
    def encryption_at_rest_options(self):
        """Gets the encryption_at_rest_options of this DomainConfig.


        :return: The encryption_at_rest_options of this DomainConfig.
        :rtype: DomainConfigEncryptionAtRestOptions
        """
        return self._encryption_at_rest_options

    @encryption_at_rest_options.setter
    def encryption_at_rest_options(self, encryption_at_rest_options):
        """Sets the encryption_at_rest_options of this DomainConfig.


        :param encryption_at_rest_options: The encryption_at_rest_options of this DomainConfig.
        :type encryption_at_rest_options: DomainConfigEncryptionAtRestOptions
        """

        self._encryption_at_rest_options = encryption_at_rest_options

    @property
    def node_to_node_encryption_options(self):
        """Gets the node_to_node_encryption_options of this DomainConfig.


        :return: The node_to_node_encryption_options of this DomainConfig.
        :rtype: DomainConfigNodeToNodeEncryptionOptions
        """
        return self._node_to_node_encryption_options

    @node_to_node_encryption_options.setter
    def node_to_node_encryption_options(self, node_to_node_encryption_options):
        """Sets the node_to_node_encryption_options of this DomainConfig.


        :param node_to_node_encryption_options: The node_to_node_encryption_options of this DomainConfig.
        :type node_to_node_encryption_options: DomainConfigNodeToNodeEncryptionOptions
        """

        self._node_to_node_encryption_options = node_to_node_encryption_options

    @property
    def advanced_options(self):
        """Gets the advanced_options of this DomainConfig.


        :return: The advanced_options of this DomainConfig.
        :rtype: DomainConfigAdvancedOptions
        """
        return self._advanced_options

    @advanced_options.setter
    def advanced_options(self, advanced_options):
        """Sets the advanced_options of this DomainConfig.


        :param advanced_options: The advanced_options of this DomainConfig.
        :type advanced_options: DomainConfigAdvancedOptions
        """

        self._advanced_options = advanced_options

    @property
    def log_publishing_options(self):
        """Gets the log_publishing_options of this DomainConfig.


        :return: The log_publishing_options of this DomainConfig.
        :rtype: DomainConfigLogPublishingOptions
        """
        return self._log_publishing_options

    @log_publishing_options.setter
    def log_publishing_options(self, log_publishing_options):
        """Sets the log_publishing_options of this DomainConfig.


        :param log_publishing_options: The log_publishing_options of this DomainConfig.
        :type log_publishing_options: DomainConfigLogPublishingOptions
        """

        self._log_publishing_options = log_publishing_options

    @property
    def domain_endpoint_options(self):
        """Gets the domain_endpoint_options of this DomainConfig.


        :return: The domain_endpoint_options of this DomainConfig.
        :rtype: DomainConfigDomainEndpointOptions
        """
        return self._domain_endpoint_options

    @domain_endpoint_options.setter
    def domain_endpoint_options(self, domain_endpoint_options):
        """Sets the domain_endpoint_options of this DomainConfig.


        :param domain_endpoint_options: The domain_endpoint_options of this DomainConfig.
        :type domain_endpoint_options: DomainConfigDomainEndpointOptions
        """

        self._domain_endpoint_options = domain_endpoint_options

    @property
    def advanced_security_options(self):
        """Gets the advanced_security_options of this DomainConfig.


        :return: The advanced_security_options of this DomainConfig.
        :rtype: DomainConfigAdvancedSecurityOptions
        """
        return self._advanced_security_options

    @advanced_security_options.setter
    def advanced_security_options(self, advanced_security_options):
        """Sets the advanced_security_options of this DomainConfig.


        :param advanced_security_options: The advanced_security_options of this DomainConfig.
        :type advanced_security_options: DomainConfigAdvancedSecurityOptions
        """

        self._advanced_security_options = advanced_security_options

    @property
    def auto_tune_options(self):
        """Gets the auto_tune_options of this DomainConfig.


        :return: The auto_tune_options of this DomainConfig.
        :rtype: DomainConfigAutoTuneOptions
        """
        return self._auto_tune_options

    @auto_tune_options.setter
    def auto_tune_options(self, auto_tune_options):
        """Sets the auto_tune_options of this DomainConfig.


        :param auto_tune_options: The auto_tune_options of this DomainConfig.
        :type auto_tune_options: DomainConfigAutoTuneOptions
        """

        self._auto_tune_options = auto_tune_options

    @property
    def change_progress_details(self):
        """Gets the change_progress_details of this DomainConfig.


        :return: The change_progress_details of this DomainConfig.
        :rtype: DomainConfigChangeProgressDetails
        """
        return self._change_progress_details

    @change_progress_details.setter
    def change_progress_details(self, change_progress_details):
        """Sets the change_progress_details of this DomainConfig.


        :param change_progress_details: The change_progress_details of this DomainConfig.
        :type change_progress_details: DomainConfigChangeProgressDetails
        """

        self._change_progress_details = change_progress_details

    @property
    def off_peak_window_options(self):
        """Gets the off_peak_window_options of this DomainConfig.


        :return: The off_peak_window_options of this DomainConfig.
        :rtype: DomainConfigOffPeakWindowOptions
        """
        return self._off_peak_window_options

    @off_peak_window_options.setter
    def off_peak_window_options(self, off_peak_window_options):
        """Sets the off_peak_window_options of this DomainConfig.


        :param off_peak_window_options: The off_peak_window_options of this DomainConfig.
        :type off_peak_window_options: DomainConfigOffPeakWindowOptions
        """

        self._off_peak_window_options = off_peak_window_options

    @property
    def software_update_options(self):
        """Gets the software_update_options of this DomainConfig.


        :return: The software_update_options of this DomainConfig.
        :rtype: DomainConfigSoftwareUpdateOptions
        """
        return self._software_update_options

    @software_update_options.setter
    def software_update_options(self, software_update_options):
        """Sets the software_update_options of this DomainConfig.


        :param software_update_options: The software_update_options of this DomainConfig.
        :type software_update_options: DomainConfigSoftwareUpdateOptions
        """

        self._software_update_options = software_update_options
