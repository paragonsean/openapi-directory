# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_search_partition_instance_type import OpenSearchPartitionInstanceType
from openapi_server import util


class InstanceTypeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_type: OpenSearchPartitionInstanceType=None, encryption_enabled: bool=None, cognito_enabled: bool=None, app_logs_enabled: bool=None, advanced_security_enabled: bool=None, warm_enabled: bool=None, instance_role: List=None, availability_zones: List=None):
        """InstanceTypeDetails - a model defined in OpenAPI

        :param instance_type: The instance_type of this InstanceTypeDetails.
        :param encryption_enabled: The encryption_enabled of this InstanceTypeDetails.
        :param cognito_enabled: The cognito_enabled of this InstanceTypeDetails.
        :param app_logs_enabled: The app_logs_enabled of this InstanceTypeDetails.
        :param advanced_security_enabled: The advanced_security_enabled of this InstanceTypeDetails.
        :param warm_enabled: The warm_enabled of this InstanceTypeDetails.
        :param instance_role: The instance_role of this InstanceTypeDetails.
        :param availability_zones: The availability_zones of this InstanceTypeDetails.
        """
        self.openapi_types = {
            'instance_type': OpenSearchPartitionInstanceType,
            'encryption_enabled': bool,
            'cognito_enabled': bool,
            'app_logs_enabled': bool,
            'advanced_security_enabled': bool,
            'warm_enabled': bool,
            'instance_role': List,
            'availability_zones': List
        }

        self.attribute_map = {
            'instance_type': 'InstanceType',
            'encryption_enabled': 'EncryptionEnabled',
            'cognito_enabled': 'CognitoEnabled',
            'app_logs_enabled': 'AppLogsEnabled',
            'advanced_security_enabled': 'AdvancedSecurityEnabled',
            'warm_enabled': 'WarmEnabled',
            'instance_role': 'InstanceRole',
            'availability_zones': 'AvailabilityZones'
        }

        self._instance_type = instance_type
        self._encryption_enabled = encryption_enabled
        self._cognito_enabled = cognito_enabled
        self._app_logs_enabled = app_logs_enabled
        self._advanced_security_enabled = advanced_security_enabled
        self._warm_enabled = warm_enabled
        self._instance_role = instance_role
        self._availability_zones = availability_zones

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstanceTypeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstanceTypeDetails of this InstanceTypeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_type(self):
        """Gets the instance_type of this InstanceTypeDetails.


        :return: The instance_type of this InstanceTypeDetails.
        :rtype: OpenSearchPartitionInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this InstanceTypeDetails.


        :param instance_type: The instance_type of this InstanceTypeDetails.
        :type instance_type: OpenSearchPartitionInstanceType
        """

        self._instance_type = instance_type

    @property
    def encryption_enabled(self):
        """Gets the encryption_enabled of this InstanceTypeDetails.


        :return: The encryption_enabled of this InstanceTypeDetails.
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """Sets the encryption_enabled of this InstanceTypeDetails.


        :param encryption_enabled: The encryption_enabled of this InstanceTypeDetails.
        :type encryption_enabled: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def cognito_enabled(self):
        """Gets the cognito_enabled of this InstanceTypeDetails.


        :return: The cognito_enabled of this InstanceTypeDetails.
        :rtype: bool
        """
        return self._cognito_enabled

    @cognito_enabled.setter
    def cognito_enabled(self, cognito_enabled):
        """Sets the cognito_enabled of this InstanceTypeDetails.


        :param cognito_enabled: The cognito_enabled of this InstanceTypeDetails.
        :type cognito_enabled: bool
        """

        self._cognito_enabled = cognito_enabled

    @property
    def app_logs_enabled(self):
        """Gets the app_logs_enabled of this InstanceTypeDetails.


        :return: The app_logs_enabled of this InstanceTypeDetails.
        :rtype: bool
        """
        return self._app_logs_enabled

    @app_logs_enabled.setter
    def app_logs_enabled(self, app_logs_enabled):
        """Sets the app_logs_enabled of this InstanceTypeDetails.


        :param app_logs_enabled: The app_logs_enabled of this InstanceTypeDetails.
        :type app_logs_enabled: bool
        """

        self._app_logs_enabled = app_logs_enabled

    @property
    def advanced_security_enabled(self):
        """Gets the advanced_security_enabled of this InstanceTypeDetails.


        :return: The advanced_security_enabled of this InstanceTypeDetails.
        :rtype: bool
        """
        return self._advanced_security_enabled

    @advanced_security_enabled.setter
    def advanced_security_enabled(self, advanced_security_enabled):
        """Sets the advanced_security_enabled of this InstanceTypeDetails.


        :param advanced_security_enabled: The advanced_security_enabled of this InstanceTypeDetails.
        :type advanced_security_enabled: bool
        """

        self._advanced_security_enabled = advanced_security_enabled

    @property
    def warm_enabled(self):
        """Gets the warm_enabled of this InstanceTypeDetails.


        :return: The warm_enabled of this InstanceTypeDetails.
        :rtype: bool
        """
        return self._warm_enabled

    @warm_enabled.setter
    def warm_enabled(self, warm_enabled):
        """Sets the warm_enabled of this InstanceTypeDetails.


        :param warm_enabled: The warm_enabled of this InstanceTypeDetails.
        :type warm_enabled: bool
        """

        self._warm_enabled = warm_enabled

    @property
    def instance_role(self):
        """Gets the instance_role of this InstanceTypeDetails.


        :return: The instance_role of this InstanceTypeDetails.
        :rtype: List
        """
        return self._instance_role

    @instance_role.setter
    def instance_role(self, instance_role):
        """Sets the instance_role of this InstanceTypeDetails.


        :param instance_role: The instance_role of this InstanceTypeDetails.
        :type instance_role: List
        """

        self._instance_role = instance_role

    @property
    def availability_zones(self):
        """Gets the availability_zones of this InstanceTypeDetails.


        :return: The availability_zones of this InstanceTypeDetails.
        :rtype: List
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this InstanceTypeDetails.


        :param availability_zones: The availability_zones of this InstanceTypeDetails.
        :type availability_zones: List
        """

        self._availability_zones = availability_zones
