# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.open_search_partition_instance_type import OpenSearchPartitionInstanceType
from openapi_server.models.reserved_instance_payment_option import ReservedInstancePaymentOption
from openapi_server import util


class ReservedInstanceOffering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reserved_instance_offering_id: str=None, instance_type: OpenSearchPartitionInstanceType=None, duration: int=None, fixed_price: float=None, usage_price: float=None, currency_code: str=None, payment_option: ReservedInstancePaymentOption=None, recurring_charges: List=None):
        """ReservedInstanceOffering - a model defined in OpenAPI

        :param reserved_instance_offering_id: The reserved_instance_offering_id of this ReservedInstanceOffering.
        :param instance_type: The instance_type of this ReservedInstanceOffering.
        :param duration: The duration of this ReservedInstanceOffering.
        :param fixed_price: The fixed_price of this ReservedInstanceOffering.
        :param usage_price: The usage_price of this ReservedInstanceOffering.
        :param currency_code: The currency_code of this ReservedInstanceOffering.
        :param payment_option: The payment_option of this ReservedInstanceOffering.
        :param recurring_charges: The recurring_charges of this ReservedInstanceOffering.
        """
        self.openapi_types = {
            'reserved_instance_offering_id': str,
            'instance_type': OpenSearchPartitionInstanceType,
            'duration': int,
            'fixed_price': float,
            'usage_price': float,
            'currency_code': str,
            'payment_option': ReservedInstancePaymentOption,
            'recurring_charges': List
        }

        self.attribute_map = {
            'reserved_instance_offering_id': 'ReservedInstanceOfferingId',
            'instance_type': 'InstanceType',
            'duration': 'Duration',
            'fixed_price': 'FixedPrice',
            'usage_price': 'UsagePrice',
            'currency_code': 'CurrencyCode',
            'payment_option': 'PaymentOption',
            'recurring_charges': 'RecurringCharges'
        }

        self._reserved_instance_offering_id = reserved_instance_offering_id
        self._instance_type = instance_type
        self._duration = duration
        self._fixed_price = fixed_price
        self._usage_price = usage_price
        self._currency_code = currency_code
        self._payment_option = payment_option
        self._recurring_charges = recurring_charges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReservedInstanceOffering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReservedInstanceOffering of this ReservedInstanceOffering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reserved_instance_offering_id(self):
        """Gets the reserved_instance_offering_id of this ReservedInstanceOffering.


        :return: The reserved_instance_offering_id of this ReservedInstanceOffering.
        :rtype: str
        """
        return self._reserved_instance_offering_id

    @reserved_instance_offering_id.setter
    def reserved_instance_offering_id(self, reserved_instance_offering_id):
        """Sets the reserved_instance_offering_id of this ReservedInstanceOffering.


        :param reserved_instance_offering_id: The reserved_instance_offering_id of this ReservedInstanceOffering.
        :type reserved_instance_offering_id: str
        """

        self._reserved_instance_offering_id = reserved_instance_offering_id

    @property
    def instance_type(self):
        """Gets the instance_type of this ReservedInstanceOffering.


        :return: The instance_type of this ReservedInstanceOffering.
        :rtype: OpenSearchPartitionInstanceType
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ReservedInstanceOffering.


        :param instance_type: The instance_type of this ReservedInstanceOffering.
        :type instance_type: OpenSearchPartitionInstanceType
        """

        self._instance_type = instance_type

    @property
    def duration(self):
        """Gets the duration of this ReservedInstanceOffering.


        :return: The duration of this ReservedInstanceOffering.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ReservedInstanceOffering.


        :param duration: The duration of this ReservedInstanceOffering.
        :type duration: int
        """

        self._duration = duration

    @property
    def fixed_price(self):
        """Gets the fixed_price of this ReservedInstanceOffering.


        :return: The fixed_price of this ReservedInstanceOffering.
        :rtype: float
        """
        return self._fixed_price

    @fixed_price.setter
    def fixed_price(self, fixed_price):
        """Sets the fixed_price of this ReservedInstanceOffering.


        :param fixed_price: The fixed_price of this ReservedInstanceOffering.
        :type fixed_price: float
        """

        self._fixed_price = fixed_price

    @property
    def usage_price(self):
        """Gets the usage_price of this ReservedInstanceOffering.


        :return: The usage_price of this ReservedInstanceOffering.
        :rtype: float
        """
        return self._usage_price

    @usage_price.setter
    def usage_price(self, usage_price):
        """Sets the usage_price of this ReservedInstanceOffering.


        :param usage_price: The usage_price of this ReservedInstanceOffering.
        :type usage_price: float
        """

        self._usage_price = usage_price

    @property
    def currency_code(self):
        """Gets the currency_code of this ReservedInstanceOffering.


        :return: The currency_code of this ReservedInstanceOffering.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ReservedInstanceOffering.


        :param currency_code: The currency_code of this ReservedInstanceOffering.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def payment_option(self):
        """Gets the payment_option of this ReservedInstanceOffering.


        :return: The payment_option of this ReservedInstanceOffering.
        :rtype: ReservedInstancePaymentOption
        """
        return self._payment_option

    @payment_option.setter
    def payment_option(self, payment_option):
        """Sets the payment_option of this ReservedInstanceOffering.


        :param payment_option: The payment_option of this ReservedInstanceOffering.
        :type payment_option: ReservedInstancePaymentOption
        """

        self._payment_option = payment_option

    @property
    def recurring_charges(self):
        """Gets the recurring_charges of this ReservedInstanceOffering.


        :return: The recurring_charges of this ReservedInstanceOffering.
        :rtype: List
        """
        return self._recurring_charges

    @recurring_charges.setter
    def recurring_charges(self, recurring_charges):
        """Sets the recurring_charges of this ReservedInstanceOffering.


        :param recurring_charges: The recurring_charges of this ReservedInstanceOffering.
        :type recurring_charges: List
        """

        self._recurring_charges = recurring_charges
