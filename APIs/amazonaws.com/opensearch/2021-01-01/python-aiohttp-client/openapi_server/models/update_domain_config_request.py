# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_domain_request_advanced_security_options import CreateDomainRequestAdvancedSecurityOptions
from openapi_server.models.create_domain_request_cluster_config import CreateDomainRequestClusterConfig
from openapi_server.models.create_domain_request_cognito_options import CreateDomainRequestCognitoOptions
from openapi_server.models.create_domain_request_domain_endpoint_options import CreateDomainRequestDomainEndpointOptions
from openapi_server.models.create_domain_request_ebs_options import CreateDomainRequestEBSOptions
from openapi_server.models.create_domain_request_encryption_at_rest_options import CreateDomainRequestEncryptionAtRestOptions
from openapi_server.models.create_domain_request_node_to_node_encryption_options import CreateDomainRequestNodeToNodeEncryptionOptions
from openapi_server.models.create_domain_request_off_peak_window_options import CreateDomainRequestOffPeakWindowOptions
from openapi_server.models.create_domain_request_snapshot_options import CreateDomainRequestSnapshotOptions
from openapi_server.models.create_domain_request_software_update_options import CreateDomainRequestSoftwareUpdateOptions
from openapi_server.models.create_domain_request_vpc_options import CreateDomainRequestVPCOptions
from openapi_server.models.log_publishing_option import LogPublishingOption
from openapi_server.models.update_domain_config_request_auto_tune_options import UpdateDomainConfigRequestAutoTuneOptions
import re
from openapi_server import util


class UpdateDomainConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_config: CreateDomainRequestClusterConfig=None, ebs_options: CreateDomainRequestEBSOptions=None, snapshot_options: CreateDomainRequestSnapshotOptions=None, vpc_options: CreateDomainRequestVPCOptions=None, cognito_options: CreateDomainRequestCognitoOptions=None, advanced_options: Dict[str, str]=None, access_policies: str=None, log_publishing_options: Dict[str, LogPublishingOption]=None, encryption_at_rest_options: CreateDomainRequestEncryptionAtRestOptions=None, domain_endpoint_options: CreateDomainRequestDomainEndpointOptions=None, node_to_node_encryption_options: CreateDomainRequestNodeToNodeEncryptionOptions=None, advanced_security_options: CreateDomainRequestAdvancedSecurityOptions=None, auto_tune_options: UpdateDomainConfigRequestAutoTuneOptions=None, dry_run: bool=None, dry_run_mode: str=None, off_peak_window_options: CreateDomainRequestOffPeakWindowOptions=None, software_update_options: CreateDomainRequestSoftwareUpdateOptions=None):
        """UpdateDomainConfigRequest - a model defined in OpenAPI

        :param cluster_config: The cluster_config of this UpdateDomainConfigRequest.
        :param ebs_options: The ebs_options of this UpdateDomainConfigRequest.
        :param snapshot_options: The snapshot_options of this UpdateDomainConfigRequest.
        :param vpc_options: The vpc_options of this UpdateDomainConfigRequest.
        :param cognito_options: The cognito_options of this UpdateDomainConfigRequest.
        :param advanced_options: The advanced_options of this UpdateDomainConfigRequest.
        :param access_policies: The access_policies of this UpdateDomainConfigRequest.
        :param log_publishing_options: The log_publishing_options of this UpdateDomainConfigRequest.
        :param encryption_at_rest_options: The encryption_at_rest_options of this UpdateDomainConfigRequest.
        :param domain_endpoint_options: The domain_endpoint_options of this UpdateDomainConfigRequest.
        :param node_to_node_encryption_options: The node_to_node_encryption_options of this UpdateDomainConfigRequest.
        :param advanced_security_options: The advanced_security_options of this UpdateDomainConfigRequest.
        :param auto_tune_options: The auto_tune_options of this UpdateDomainConfigRequest.
        :param dry_run: The dry_run of this UpdateDomainConfigRequest.
        :param dry_run_mode: The dry_run_mode of this UpdateDomainConfigRequest.
        :param off_peak_window_options: The off_peak_window_options of this UpdateDomainConfigRequest.
        :param software_update_options: The software_update_options of this UpdateDomainConfigRequest.
        """
        self.openapi_types = {
            'cluster_config': CreateDomainRequestClusterConfig,
            'ebs_options': CreateDomainRequestEBSOptions,
            'snapshot_options': CreateDomainRequestSnapshotOptions,
            'vpc_options': CreateDomainRequestVPCOptions,
            'cognito_options': CreateDomainRequestCognitoOptions,
            'advanced_options': Dict[str, str],
            'access_policies': str,
            'log_publishing_options': Dict[str, LogPublishingOption],
            'encryption_at_rest_options': CreateDomainRequestEncryptionAtRestOptions,
            'domain_endpoint_options': CreateDomainRequestDomainEndpointOptions,
            'node_to_node_encryption_options': CreateDomainRequestNodeToNodeEncryptionOptions,
            'advanced_security_options': CreateDomainRequestAdvancedSecurityOptions,
            'auto_tune_options': UpdateDomainConfigRequestAutoTuneOptions,
            'dry_run': bool,
            'dry_run_mode': str,
            'off_peak_window_options': CreateDomainRequestOffPeakWindowOptions,
            'software_update_options': CreateDomainRequestSoftwareUpdateOptions
        }

        self.attribute_map = {
            'cluster_config': 'ClusterConfig',
            'ebs_options': 'EBSOptions',
            'snapshot_options': 'SnapshotOptions',
            'vpc_options': 'VPCOptions',
            'cognito_options': 'CognitoOptions',
            'advanced_options': 'AdvancedOptions',
            'access_policies': 'AccessPolicies',
            'log_publishing_options': 'LogPublishingOptions',
            'encryption_at_rest_options': 'EncryptionAtRestOptions',
            'domain_endpoint_options': 'DomainEndpointOptions',
            'node_to_node_encryption_options': 'NodeToNodeEncryptionOptions',
            'advanced_security_options': 'AdvancedSecurityOptions',
            'auto_tune_options': 'AutoTuneOptions',
            'dry_run': 'DryRun',
            'dry_run_mode': 'DryRunMode',
            'off_peak_window_options': 'OffPeakWindowOptions',
            'software_update_options': 'SoftwareUpdateOptions'
        }

        self._cluster_config = cluster_config
        self._ebs_options = ebs_options
        self._snapshot_options = snapshot_options
        self._vpc_options = vpc_options
        self._cognito_options = cognito_options
        self._advanced_options = advanced_options
        self._access_policies = access_policies
        self._log_publishing_options = log_publishing_options
        self._encryption_at_rest_options = encryption_at_rest_options
        self._domain_endpoint_options = domain_endpoint_options
        self._node_to_node_encryption_options = node_to_node_encryption_options
        self._advanced_security_options = advanced_security_options
        self._auto_tune_options = auto_tune_options
        self._dry_run = dry_run
        self._dry_run_mode = dry_run_mode
        self._off_peak_window_options = off_peak_window_options
        self._software_update_options = software_update_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDomainConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDomainConfig_request of this UpdateDomainConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_config(self):
        """Gets the cluster_config of this UpdateDomainConfigRequest.


        :return: The cluster_config of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestClusterConfig
        """
        return self._cluster_config

    @cluster_config.setter
    def cluster_config(self, cluster_config):
        """Sets the cluster_config of this UpdateDomainConfigRequest.


        :param cluster_config: The cluster_config of this UpdateDomainConfigRequest.
        :type cluster_config: CreateDomainRequestClusterConfig
        """

        self._cluster_config = cluster_config

    @property
    def ebs_options(self):
        """Gets the ebs_options of this UpdateDomainConfigRequest.


        :return: The ebs_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestEBSOptions
        """
        return self._ebs_options

    @ebs_options.setter
    def ebs_options(self, ebs_options):
        """Sets the ebs_options of this UpdateDomainConfigRequest.


        :param ebs_options: The ebs_options of this UpdateDomainConfigRequest.
        :type ebs_options: CreateDomainRequestEBSOptions
        """

        self._ebs_options = ebs_options

    @property
    def snapshot_options(self):
        """Gets the snapshot_options of this UpdateDomainConfigRequest.


        :return: The snapshot_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestSnapshotOptions
        """
        return self._snapshot_options

    @snapshot_options.setter
    def snapshot_options(self, snapshot_options):
        """Sets the snapshot_options of this UpdateDomainConfigRequest.


        :param snapshot_options: The snapshot_options of this UpdateDomainConfigRequest.
        :type snapshot_options: CreateDomainRequestSnapshotOptions
        """

        self._snapshot_options = snapshot_options

    @property
    def vpc_options(self):
        """Gets the vpc_options of this UpdateDomainConfigRequest.


        :return: The vpc_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestVPCOptions
        """
        return self._vpc_options

    @vpc_options.setter
    def vpc_options(self, vpc_options):
        """Sets the vpc_options of this UpdateDomainConfigRequest.


        :param vpc_options: The vpc_options of this UpdateDomainConfigRequest.
        :type vpc_options: CreateDomainRequestVPCOptions
        """

        self._vpc_options = vpc_options

    @property
    def cognito_options(self):
        """Gets the cognito_options of this UpdateDomainConfigRequest.


        :return: The cognito_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestCognitoOptions
        """
        return self._cognito_options

    @cognito_options.setter
    def cognito_options(self, cognito_options):
        """Sets the cognito_options of this UpdateDomainConfigRequest.


        :param cognito_options: The cognito_options of this UpdateDomainConfigRequest.
        :type cognito_options: CreateDomainRequestCognitoOptions
        """

        self._cognito_options = cognito_options

    @property
    def advanced_options(self):
        """Gets the advanced_options of this UpdateDomainConfigRequest.

        <p>Exposes native OpenSearch configuration values from <code>opensearch.yml</code>. The following advanced options are available: </p> <ul> <li> <p>Allows references to indexes in an HTTP request body. Must be <code>false</code> when configuring access to individual sub-resources. Default is <code>true</code>.</p> </li> <li> <p>Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options\">Advanced cluster parameters</a>.</p>

        :return: The advanced_options of this UpdateDomainConfigRequest.
        :rtype: Dict[str, str]
        """
        return self._advanced_options

    @advanced_options.setter
    def advanced_options(self, advanced_options):
        """Sets the advanced_options of this UpdateDomainConfigRequest.

        <p>Exposes native OpenSearch configuration values from <code>opensearch.yml</code>. The following advanced options are available: </p> <ul> <li> <p>Allows references to indexes in an HTTP request body. Must be <code>false</code> when configuring access to individual sub-resources. Default is <code>true</code>.</p> </li> <li> <p>Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li> </ul> <p>For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options\">Advanced cluster parameters</a>.</p>

        :param advanced_options: The advanced_options of this UpdateDomainConfigRequest.
        :type advanced_options: Dict[str, str]
        """

        self._advanced_options = advanced_options

    @property
    def access_policies(self):
        """Gets the access_policies of this UpdateDomainConfigRequest.

        Access policy rules for an Amazon OpenSearch Service domain endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-access-policies\">Configuring access policies</a>. The maximum size of a policy document is 100 KB.

        :return: The access_policies of this UpdateDomainConfigRequest.
        :rtype: str
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """Sets the access_policies of this UpdateDomainConfigRequest.

        Access policy rules for an Amazon OpenSearch Service domain endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-access-policies\">Configuring access policies</a>. The maximum size of a policy document is 100 KB.

        :param access_policies: The access_policies of this UpdateDomainConfigRequest.
        :type access_policies: str
        """
        if access_policies is not None and len(access_policies) > 102400:
            raise ValueError("Invalid value for `access_policies`, length must be less than or equal to `102400`")
        if access_policies is not None and len(access_policies) < 0:
            raise ValueError("Invalid value for `access_policies`, length must be greater than or equal to `0`")
        if access_policies is not None and not re.search(r'.*', access_policies):
            raise ValueError("Invalid value for `access_policies`, must be a follow pattern or equal to `/.*/`")

        self._access_policies = access_policies

    @property
    def log_publishing_options(self):
        """Gets the log_publishing_options of this UpdateDomainConfigRequest.

        Options to publish OpenSearch logs to Amazon CloudWatch Logs.

        :return: The log_publishing_options of this UpdateDomainConfigRequest.
        :rtype: Dict[str, LogPublishingOption]
        """
        return self._log_publishing_options

    @log_publishing_options.setter
    def log_publishing_options(self, log_publishing_options):
        """Sets the log_publishing_options of this UpdateDomainConfigRequest.

        Options to publish OpenSearch logs to Amazon CloudWatch Logs.

        :param log_publishing_options: The log_publishing_options of this UpdateDomainConfigRequest.
        :type log_publishing_options: Dict[str, LogPublishingOption]
        """

        self._log_publishing_options = log_publishing_options

    @property
    def encryption_at_rest_options(self):
        """Gets the encryption_at_rest_options of this UpdateDomainConfigRequest.


        :return: The encryption_at_rest_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestEncryptionAtRestOptions
        """
        return self._encryption_at_rest_options

    @encryption_at_rest_options.setter
    def encryption_at_rest_options(self, encryption_at_rest_options):
        """Sets the encryption_at_rest_options of this UpdateDomainConfigRequest.


        :param encryption_at_rest_options: The encryption_at_rest_options of this UpdateDomainConfigRequest.
        :type encryption_at_rest_options: CreateDomainRequestEncryptionAtRestOptions
        """

        self._encryption_at_rest_options = encryption_at_rest_options

    @property
    def domain_endpoint_options(self):
        """Gets the domain_endpoint_options of this UpdateDomainConfigRequest.


        :return: The domain_endpoint_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestDomainEndpointOptions
        """
        return self._domain_endpoint_options

    @domain_endpoint_options.setter
    def domain_endpoint_options(self, domain_endpoint_options):
        """Sets the domain_endpoint_options of this UpdateDomainConfigRequest.


        :param domain_endpoint_options: The domain_endpoint_options of this UpdateDomainConfigRequest.
        :type domain_endpoint_options: CreateDomainRequestDomainEndpointOptions
        """

        self._domain_endpoint_options = domain_endpoint_options

    @property
    def node_to_node_encryption_options(self):
        """Gets the node_to_node_encryption_options of this UpdateDomainConfigRequest.


        :return: The node_to_node_encryption_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestNodeToNodeEncryptionOptions
        """
        return self._node_to_node_encryption_options

    @node_to_node_encryption_options.setter
    def node_to_node_encryption_options(self, node_to_node_encryption_options):
        """Sets the node_to_node_encryption_options of this UpdateDomainConfigRequest.


        :param node_to_node_encryption_options: The node_to_node_encryption_options of this UpdateDomainConfigRequest.
        :type node_to_node_encryption_options: CreateDomainRequestNodeToNodeEncryptionOptions
        """

        self._node_to_node_encryption_options = node_to_node_encryption_options

    @property
    def advanced_security_options(self):
        """Gets the advanced_security_options of this UpdateDomainConfigRequest.


        :return: The advanced_security_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestAdvancedSecurityOptions
        """
        return self._advanced_security_options

    @advanced_security_options.setter
    def advanced_security_options(self, advanced_security_options):
        """Sets the advanced_security_options of this UpdateDomainConfigRequest.


        :param advanced_security_options: The advanced_security_options of this UpdateDomainConfigRequest.
        :type advanced_security_options: CreateDomainRequestAdvancedSecurityOptions
        """

        self._advanced_security_options = advanced_security_options

    @property
    def auto_tune_options(self):
        """Gets the auto_tune_options of this UpdateDomainConfigRequest.


        :return: The auto_tune_options of this UpdateDomainConfigRequest.
        :rtype: UpdateDomainConfigRequestAutoTuneOptions
        """
        return self._auto_tune_options

    @auto_tune_options.setter
    def auto_tune_options(self, auto_tune_options):
        """Sets the auto_tune_options of this UpdateDomainConfigRequest.


        :param auto_tune_options: The auto_tune_options of this UpdateDomainConfigRequest.
        :type auto_tune_options: UpdateDomainConfigRequestAutoTuneOptions
        """

        self._auto_tune_options = auto_tune_options

    @property
    def dry_run(self):
        """Gets the dry_run of this UpdateDomainConfigRequest.

        This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.

        :return: The dry_run of this UpdateDomainConfigRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this UpdateDomainConfigRequest.

        This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.

        :param dry_run: The dry_run of this UpdateDomainConfigRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def dry_run_mode(self):
        """Gets the dry_run_mode of this UpdateDomainConfigRequest.

        <p>The type of dry run to perform.</p> <ul> <li> <p> <code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p> </li> <li> <p> <code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check\">Validating a domain update</a>.</p> </li> </ul>

        :return: The dry_run_mode of this UpdateDomainConfigRequest.
        :rtype: str
        """
        return self._dry_run_mode

    @dry_run_mode.setter
    def dry_run_mode(self, dry_run_mode):
        """Sets the dry_run_mode of this UpdateDomainConfigRequest.

        <p>The type of dry run to perform.</p> <ul> <li> <p> <code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p> </li> <li> <p> <code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check\">Validating a domain update</a>.</p> </li> </ul>

        :param dry_run_mode: The dry_run_mode of this UpdateDomainConfigRequest.
        :type dry_run_mode: str
        """
        allowed_values = ["Basic", "Verbose"]  # noqa: E501
        if dry_run_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `dry_run_mode` ({0}), must be one of {1}"
                .format(dry_run_mode, allowed_values)
            )

        self._dry_run_mode = dry_run_mode

    @property
    def off_peak_window_options(self):
        """Gets the off_peak_window_options of this UpdateDomainConfigRequest.


        :return: The off_peak_window_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestOffPeakWindowOptions
        """
        return self._off_peak_window_options

    @off_peak_window_options.setter
    def off_peak_window_options(self, off_peak_window_options):
        """Sets the off_peak_window_options of this UpdateDomainConfigRequest.


        :param off_peak_window_options: The off_peak_window_options of this UpdateDomainConfigRequest.
        :type off_peak_window_options: CreateDomainRequestOffPeakWindowOptions
        """

        self._off_peak_window_options = off_peak_window_options

    @property
    def software_update_options(self):
        """Gets the software_update_options of this UpdateDomainConfigRequest.


        :return: The software_update_options of this UpdateDomainConfigRequest.
        :rtype: CreateDomainRequestSoftwareUpdateOptions
        """
        return self._software_update_options

    @software_update_options.setter
    def software_update_options(self, software_update_options):
        """Sets the software_update_options of this UpdateDomainConfigRequest.


        :param software_update_options: The software_update_options of this UpdateDomainConfigRequest.
        :type software_update_options: CreateDomainRequestSoftwareUpdateOptions
        """

        self._software_update_options = software_update_options
