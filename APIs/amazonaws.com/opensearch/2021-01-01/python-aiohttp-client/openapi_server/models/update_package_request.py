# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_package_request_package_source import CreatePackageRequestPackageSource
from openapi_server import util


class UpdatePackageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, package_id: str=None, package_source: CreatePackageRequestPackageSource=None, package_description: str=None, commit_message: str=None):
        """UpdatePackageRequest - a model defined in OpenAPI

        :param package_id: The package_id of this UpdatePackageRequest.
        :param package_source: The package_source of this UpdatePackageRequest.
        :param package_description: The package_description of this UpdatePackageRequest.
        :param commit_message: The commit_message of this UpdatePackageRequest.
        """
        self.openapi_types = {
            'package_id': str,
            'package_source': CreatePackageRequestPackageSource,
            'package_description': str,
            'commit_message': str
        }

        self.attribute_map = {
            'package_id': 'PackageID',
            'package_source': 'PackageSource',
            'package_description': 'PackageDescription',
            'commit_message': 'CommitMessage'
        }

        self._package_id = package_id
        self._package_source = package_source
        self._package_description = package_description
        self._commit_message = commit_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePackageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePackage_request of this UpdatePackageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_id(self):
        """Gets the package_id of this UpdatePackageRequest.

        The unique identifier for the package.

        :return: The package_id of this UpdatePackageRequest.
        :rtype: str
        """
        return self._package_id

    @package_id.setter
    def package_id(self, package_id):
        """Sets the package_id of this UpdatePackageRequest.

        The unique identifier for the package.

        :param package_id: The package_id of this UpdatePackageRequest.
        :type package_id: str
        """
        if package_id is None:
            raise ValueError("Invalid value for `package_id`, must not be `None`")

        self._package_id = package_id

    @property
    def package_source(self):
        """Gets the package_source of this UpdatePackageRequest.


        :return: The package_source of this UpdatePackageRequest.
        :rtype: CreatePackageRequestPackageSource
        """
        return self._package_source

    @package_source.setter
    def package_source(self, package_source):
        """Sets the package_source of this UpdatePackageRequest.


        :param package_source: The package_source of this UpdatePackageRequest.
        :type package_source: CreatePackageRequestPackageSource
        """
        if package_source is None:
            raise ValueError("Invalid value for `package_source`, must not be `None`")

        self._package_source = package_source

    @property
    def package_description(self):
        """Gets the package_description of this UpdatePackageRequest.

        A new description of the package.

        :return: The package_description of this UpdatePackageRequest.
        :rtype: str
        """
        return self._package_description

    @package_description.setter
    def package_description(self, package_description):
        """Sets the package_description of this UpdatePackageRequest.

        A new description of the package.

        :param package_description: The package_description of this UpdatePackageRequest.
        :type package_description: str
        """
        if package_description is not None and len(package_description) > 1024:
            raise ValueError("Invalid value for `package_description`, length must be less than or equal to `1024`")

        self._package_description = package_description

    @property
    def commit_message(self):
        """Gets the commit_message of this UpdatePackageRequest.

        Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.

        :return: The commit_message of this UpdatePackageRequest.
        :rtype: str
        """
        return self._commit_message

    @commit_message.setter
    def commit_message(self, commit_message):
        """Sets the commit_message of this UpdatePackageRequest.

        Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.

        :param commit_message: The commit_message of this UpdatePackageRequest.
        :type commit_message: str
        """
        if commit_message is not None and len(commit_message) > 160:
            raise ValueError("Invalid value for `commit_message`, length must be less than or equal to `160`")

        self._commit_message = commit_message
