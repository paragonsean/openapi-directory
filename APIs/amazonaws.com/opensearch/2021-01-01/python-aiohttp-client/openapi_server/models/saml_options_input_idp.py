# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SAMLOptionsInputIdp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_content: str=None, entity_id: str=None):
        """SAMLOptionsInputIdp - a model defined in OpenAPI

        :param metadata_content: The metadata_content of this SAMLOptionsInputIdp.
        :param entity_id: The entity_id of this SAMLOptionsInputIdp.
        """
        self.openapi_types = {
            'metadata_content': str,
            'entity_id': str
        }

        self.attribute_map = {
            'metadata_content': 'MetadataContent',
            'entity_id': 'EntityId'
        }

        self._metadata_content = metadata_content
        self._entity_id = entity_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SAMLOptionsInputIdp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SAMLOptionsInput_Idp of this SAMLOptionsInputIdp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_content(self):
        """Gets the metadata_content of this SAMLOptionsInputIdp.


        :return: The metadata_content of this SAMLOptionsInputIdp.
        :rtype: str
        """
        return self._metadata_content

    @metadata_content.setter
    def metadata_content(self, metadata_content):
        """Sets the metadata_content of this SAMLOptionsInputIdp.


        :param metadata_content: The metadata_content of this SAMLOptionsInputIdp.
        :type metadata_content: str
        """
        if metadata_content is None:
            raise ValueError("Invalid value for `metadata_content`, must not be `None`")

        self._metadata_content = metadata_content

    @property
    def entity_id(self):
        """Gets the entity_id of this SAMLOptionsInputIdp.


        :return: The entity_id of this SAMLOptionsInputIdp.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this SAMLOptionsInputIdp.


        :param entity_id: The entity_id of this SAMLOptionsInputIdp.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id
