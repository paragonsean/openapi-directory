/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenSearchPartitionInstanceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenSearchPartitionInstanceType::OAIOpenSearchPartitionInstanceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenSearchPartitionInstanceType::OAIOpenSearchPartitionInstanceType() {
    this->initializeModel();
}

OAIOpenSearchPartitionInstanceType::~OAIOpenSearchPartitionInstanceType() {}

void OAIOpenSearchPartitionInstanceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOpenSearchPartitionInstanceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOpenSearchPartitionInstanceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("m3.medium.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M3_MEDIUM_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m3.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M3_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m3.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M3_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m3.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M3_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M4_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M4_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M4_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M4_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m4.10xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M4_10XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M5_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M5_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M5_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M5_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.12xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M5_12XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m5.24xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M5_24XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R5_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R5_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R5_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R5_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.12xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R5_12XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r5.24xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R5_24XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C5_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C5_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C5_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C5_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.9xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C5_9XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c5.18xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C5_18XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.nano.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_NANO_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.micro.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_MICRO_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.small.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_SMALL_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.medium.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_MEDIUM_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t3.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T3_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ultrawarm1.medium.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::ULTRAWARM1_MEDIUM_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ultrawarm1.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::ULTRAWARM1_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ultrawarm1.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::ULTRAWARM1_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t2.micro.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T2_MICRO_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t2.small.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T2_SMALL_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t2.medium.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T2_MEDIUM_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R3_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R3_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R3_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R3_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r3.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R3_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i2.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I2_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i2.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I2_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::D2_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::D2_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::D2_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("d2.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::D2_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C4_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C4_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C4_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C4_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c4.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C4_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R4_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R4_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R4_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R4_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R4_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r4.16xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R4_16XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I3_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I3_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I3_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I3_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I3_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("i3.16xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::I3_16XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6g.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6G_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6g.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6G_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6g.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6G_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6g.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6G_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6g.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6G_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6g.12xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6G_12XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m6g.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M6G_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m6g.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M6G_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m6g.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M6G_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m6g.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M6G_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m6g.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M6G_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("m6g.12xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::M6G_12XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c6g.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C6G_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c6g.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C6G_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c6g.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C6G_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c6g.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C6G_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c6g.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C6G_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("c6g.12xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::C6G_12XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.large.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_LARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.2xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_2XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.4xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_4XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.8xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_8XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.12xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_12XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("r6gd.16xlarge.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::R6GD_16XLARGE_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t4g.small.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T4G_SMALL_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("t4g.medium.search", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOpenSearchPartitionInstanceType::T4G_MEDIUM_SEARCH;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOpenSearchPartitionInstanceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOpenSearchPartitionInstanceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOpenSearchPartitionInstanceType::M3_MEDIUM_SEARCH:
            val = "m3.medium.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M3_LARGE_SEARCH:
            val = "m3.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M3_XLARGE_SEARCH:
            val = "m3.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M3_2XLARGE_SEARCH:
            val = "m3.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M4_LARGE_SEARCH:
            val = "m4.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M4_XLARGE_SEARCH:
            val = "m4.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M4_2XLARGE_SEARCH:
            val = "m4.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M4_4XLARGE_SEARCH:
            val = "m4.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M4_10XLARGE_SEARCH:
            val = "m4.10xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M5_LARGE_SEARCH:
            val = "m5.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M5_XLARGE_SEARCH:
            val = "m5.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M5_2XLARGE_SEARCH:
            val = "m5.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M5_4XLARGE_SEARCH:
            val = "m5.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M5_12XLARGE_SEARCH:
            val = "m5.12xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M5_24XLARGE_SEARCH:
            val = "m5.24xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R5_LARGE_SEARCH:
            val = "r5.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R5_XLARGE_SEARCH:
            val = "r5.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R5_2XLARGE_SEARCH:
            val = "r5.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R5_4XLARGE_SEARCH:
            val = "r5.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R5_12XLARGE_SEARCH:
            val = "r5.12xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R5_24XLARGE_SEARCH:
            val = "r5.24xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C5_LARGE_SEARCH:
            val = "c5.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C5_XLARGE_SEARCH:
            val = "c5.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C5_2XLARGE_SEARCH:
            val = "c5.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C5_4XLARGE_SEARCH:
            val = "c5.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C5_9XLARGE_SEARCH:
            val = "c5.9xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C5_18XLARGE_SEARCH:
            val = "c5.18xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_NANO_SEARCH:
            val = "t3.nano.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_MICRO_SEARCH:
            val = "t3.micro.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_SMALL_SEARCH:
            val = "t3.small.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_MEDIUM_SEARCH:
            val = "t3.medium.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_LARGE_SEARCH:
            val = "t3.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_XLARGE_SEARCH:
            val = "t3.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T3_2XLARGE_SEARCH:
            val = "t3.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::ULTRAWARM1_MEDIUM_SEARCH:
            val = "ultrawarm1.medium.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::ULTRAWARM1_LARGE_SEARCH:
            val = "ultrawarm1.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::ULTRAWARM1_XLARGE_SEARCH:
            val = "ultrawarm1.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T2_MICRO_SEARCH:
            val = "t2.micro.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T2_SMALL_SEARCH:
            val = "t2.small.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T2_MEDIUM_SEARCH:
            val = "t2.medium.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R3_LARGE_SEARCH:
            val = "r3.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R3_XLARGE_SEARCH:
            val = "r3.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R3_2XLARGE_SEARCH:
            val = "r3.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R3_4XLARGE_SEARCH:
            val = "r3.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R3_8XLARGE_SEARCH:
            val = "r3.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I2_XLARGE_SEARCH:
            val = "i2.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I2_2XLARGE_SEARCH:
            val = "i2.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::D2_XLARGE_SEARCH:
            val = "d2.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::D2_2XLARGE_SEARCH:
            val = "d2.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::D2_4XLARGE_SEARCH:
            val = "d2.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::D2_8XLARGE_SEARCH:
            val = "d2.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C4_LARGE_SEARCH:
            val = "c4.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C4_XLARGE_SEARCH:
            val = "c4.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C4_2XLARGE_SEARCH:
            val = "c4.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C4_4XLARGE_SEARCH:
            val = "c4.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C4_8XLARGE_SEARCH:
            val = "c4.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R4_LARGE_SEARCH:
            val = "r4.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R4_XLARGE_SEARCH:
            val = "r4.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R4_2XLARGE_SEARCH:
            val = "r4.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R4_4XLARGE_SEARCH:
            val = "r4.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R4_8XLARGE_SEARCH:
            val = "r4.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R4_16XLARGE_SEARCH:
            val = "r4.16xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I3_LARGE_SEARCH:
            val = "i3.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I3_XLARGE_SEARCH:
            val = "i3.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I3_2XLARGE_SEARCH:
            val = "i3.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I3_4XLARGE_SEARCH:
            val = "i3.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I3_8XLARGE_SEARCH:
            val = "i3.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::I3_16XLARGE_SEARCH:
            val = "i3.16xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6G_LARGE_SEARCH:
            val = "r6g.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6G_XLARGE_SEARCH:
            val = "r6g.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6G_2XLARGE_SEARCH:
            val = "r6g.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6G_4XLARGE_SEARCH:
            val = "r6g.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6G_8XLARGE_SEARCH:
            val = "r6g.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6G_12XLARGE_SEARCH:
            val = "r6g.12xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M6G_LARGE_SEARCH:
            val = "m6g.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M6G_XLARGE_SEARCH:
            val = "m6g.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M6G_2XLARGE_SEARCH:
            val = "m6g.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M6G_4XLARGE_SEARCH:
            val = "m6g.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M6G_8XLARGE_SEARCH:
            val = "m6g.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::M6G_12XLARGE_SEARCH:
            val = "m6g.12xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C6G_LARGE_SEARCH:
            val = "c6g.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C6G_XLARGE_SEARCH:
            val = "c6g.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C6G_2XLARGE_SEARCH:
            val = "c6g.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C6G_4XLARGE_SEARCH:
            val = "c6g.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C6G_8XLARGE_SEARCH:
            val = "c6g.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::C6G_12XLARGE_SEARCH:
            val = "c6g.12xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_LARGE_SEARCH:
            val = "r6gd.large.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_XLARGE_SEARCH:
            val = "r6gd.xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_2XLARGE_SEARCH:
            val = "r6gd.2xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_4XLARGE_SEARCH:
            val = "r6gd.4xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_8XLARGE_SEARCH:
            val = "r6gd.8xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_12XLARGE_SEARCH:
            val = "r6gd.12xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::R6GD_16XLARGE_SEARCH:
            val = "r6gd.16xlarge.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T4G_SMALL_SEARCH:
            val = "t4g.small.search";
            break;
        case eOAIOpenSearchPartitionInstanceType::T4G_MEDIUM_SEARCH:
            val = "t4g.medium.search";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOpenSearchPartitionInstanceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOpenSearchPartitionInstanceType::eOAIOpenSearchPartitionInstanceType OAIOpenSearchPartitionInstanceType::getValue() const {
    return m_value;
}

void OAIOpenSearchPartitionInstanceType::setValue(const OAIOpenSearchPartitionInstanceType::eOAIOpenSearchPartitionInstanceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOpenSearchPartitionInstanceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIOpenSearchPartitionInstanceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
