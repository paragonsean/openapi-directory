/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateVpcEndpointResponse_VpcEndpoint.h
 *
 * 
 */

#ifndef OAICreateVpcEndpointResponse_VpcEndpoint_H
#define OAICreateVpcEndpointResponse_VpcEndpoint_H

#include <QJsonObject>

#include "OAIVpcEndpointStatus.h"
#include "OAIVpcEndpoint_VpcOptions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVpcEndpoint_VpcOptions;

class OAICreateVpcEndpointResponse_VpcEndpoint : public OAIObject {
public:
    OAICreateVpcEndpointResponse_VpcEndpoint();
    OAICreateVpcEndpointResponse_VpcEndpoint(QString json);
    ~OAICreateVpcEndpointResponse_VpcEndpoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVpcEndpointId() const;
    void setVpcEndpointId(const QString &vpc_endpoint_id);
    bool is_vpc_endpoint_id_Set() const;
    bool is_vpc_endpoint_id_Valid() const;

    QString getVpcEndpointOwner() const;
    void setVpcEndpointOwner(const QString &vpc_endpoint_owner);
    bool is_vpc_endpoint_owner_Set() const;
    bool is_vpc_endpoint_owner_Valid() const;

    QString getDomainArn() const;
    void setDomainArn(const QString &domain_arn);
    bool is_domain_arn_Set() const;
    bool is_domain_arn_Valid() const;

    OAIVpcEndpoint_VpcOptions getVpcOptions() const;
    void setVpcOptions(const OAIVpcEndpoint_VpcOptions &vpc_options);
    bool is_vpc_options_Set() const;
    bool is_vpc_options_Valid() const;

    OAIVpcEndpointStatus getStatus() const;
    void setStatus(const OAIVpcEndpointStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_vpc_endpoint_id;
    bool m_vpc_endpoint_id_isSet;
    bool m_vpc_endpoint_id_isValid;

    QString m_vpc_endpoint_owner;
    bool m_vpc_endpoint_owner_isSet;
    bool m_vpc_endpoint_owner_isValid;

    QString m_domain_arn;
    bool m_domain_arn_isSet;
    bool m_domain_arn_isValid;

    OAIVpcEndpoint_VpcOptions m_vpc_options;
    bool m_vpc_options_isSet;
    bool m_vpc_options_isValid;

    OAIVpcEndpointStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateVpcEndpointResponse_VpcEndpoint)

#endif // OAICreateVpcEndpointResponse_VpcEndpoint_H
