/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeType::OAINodeType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeType::OAINodeType() {
    this->initializeModel();
}

OAINodeType::~OAINodeType() {}

void OAINodeType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAINodeType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAINodeType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Data", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeType::DATA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ultrawarm", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeType::ULTRAWARM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Master", Qt::CaseInsensitive) == 0) {
        m_value = eOAINodeType::MASTER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAINodeType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAINodeType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAINodeType::DATA:
            val = "Data";
            break;
        case eOAINodeType::ULTRAWARM:
            val = "Ultrawarm";
            break;
        case eOAINodeType::MASTER:
            val = "Master";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAINodeType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAINodeType::eOAINodeType OAINodeType::getValue() const {
    return m_value;
}

void OAINodeType::setValue(const OAINodeType::eOAINodeType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAINodeType::isSet() const {
    
    return m_value_isSet;
}

bool OAINodeType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
