/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePackage_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePackage_request::OAIUpdatePackage_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePackage_request::OAIUpdatePackage_request() {
    this->initializeModel();
}

OAIUpdatePackage_request::~OAIUpdatePackage_request() {}

void OAIUpdatePackage_request::initializeModel() {

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_source_isSet = false;
    m_package_source_isValid = false;

    m_package_description_isSet = false;
    m_package_description_isValid = false;

    m_commit_message_isSet = false;
    m_commit_message_isValid = false;
}

void OAIUpdatePackage_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePackage_request::fromJsonObject(QJsonObject json) {

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageID")]);
    m_package_id_isSet = !json[QString("PackageID")].isNull() && m_package_id_isValid;

    m_package_source_isValid = ::OpenAPI::fromJsonValue(m_package_source, json[QString("PackageSource")]);
    m_package_source_isSet = !json[QString("PackageSource")].isNull() && m_package_source_isValid;

    m_package_description_isValid = ::OpenAPI::fromJsonValue(m_package_description, json[QString("PackageDescription")]);
    m_package_description_isSet = !json[QString("PackageDescription")].isNull() && m_package_description_isValid;

    m_commit_message_isValid = ::OpenAPI::fromJsonValue(m_commit_message, json[QString("CommitMessage")]);
    m_commit_message_isSet = !json[QString("CommitMessage")].isNull() && m_commit_message_isValid;
}

QString OAIUpdatePackage_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePackage_request::asJsonObject() const {
    QJsonObject obj;
    if (m_package_id_isSet) {
        obj.insert(QString("PackageID"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_source.isSet()) {
        obj.insert(QString("PackageSource"), ::OpenAPI::toJsonValue(m_package_source));
    }
    if (m_package_description_isSet) {
        obj.insert(QString("PackageDescription"), ::OpenAPI::toJsonValue(m_package_description));
    }
    if (m_commit_message_isSet) {
        obj.insert(QString("CommitMessage"), ::OpenAPI::toJsonValue(m_commit_message));
    }
    return obj;
}

QString OAIUpdatePackage_request::getPackageId() const {
    return m_package_id;
}
void OAIUpdatePackage_request::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIUpdatePackage_request::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIUpdatePackage_request::is_package_id_Valid() const{
    return m_package_id_isValid;
}

OAICreatePackage_request_PackageSource OAIUpdatePackage_request::getPackageSource() const {
    return m_package_source;
}
void OAIUpdatePackage_request::setPackageSource(const OAICreatePackage_request_PackageSource &package_source) {
    m_package_source = package_source;
    m_package_source_isSet = true;
}

bool OAIUpdatePackage_request::is_package_source_Set() const{
    return m_package_source_isSet;
}

bool OAIUpdatePackage_request::is_package_source_Valid() const{
    return m_package_source_isValid;
}

QString OAIUpdatePackage_request::getPackageDescription() const {
    return m_package_description;
}
void OAIUpdatePackage_request::setPackageDescription(const QString &package_description) {
    m_package_description = package_description;
    m_package_description_isSet = true;
}

bool OAIUpdatePackage_request::is_package_description_Set() const{
    return m_package_description_isSet;
}

bool OAIUpdatePackage_request::is_package_description_Valid() const{
    return m_package_description_isValid;
}

QString OAIUpdatePackage_request::getCommitMessage() const {
    return m_commit_message;
}
void OAIUpdatePackage_request::setCommitMessage(const QString &commit_message) {
    m_commit_message = commit_message;
    m_commit_message_isSet = true;
}

bool OAIUpdatePackage_request::is_commit_message_Set() const{
    return m_commit_message_isSet;
}

bool OAIUpdatePackage_request::is_commit_message_Valid() const{
    return m_commit_message_isValid;
}

bool OAIUpdatePackage_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePackage_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_package_id_isValid && m_package_source_isValid && true;
}

} // namespace OpenAPI
