/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDryRunProgressResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDryRunProgressResponse::OAIDescribeDryRunProgressResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDryRunProgressResponse::OAIDescribeDryRunProgressResponse() {
    this->initializeModel();
}

OAIDescribeDryRunProgressResponse::~OAIDescribeDryRunProgressResponse() {}

void OAIDescribeDryRunProgressResponse::initializeModel() {

    m_dry_run_progress_status_isSet = false;
    m_dry_run_progress_status_isValid = false;

    m_dry_run_config_isSet = false;
    m_dry_run_config_isValid = false;

    m_dry_run_results_isSet = false;
    m_dry_run_results_isValid = false;
}

void OAIDescribeDryRunProgressResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDryRunProgressResponse::fromJsonObject(QJsonObject json) {

    m_dry_run_progress_status_isValid = ::OpenAPI::fromJsonValue(m_dry_run_progress_status, json[QString("DryRunProgressStatus")]);
    m_dry_run_progress_status_isSet = !json[QString("DryRunProgressStatus")].isNull() && m_dry_run_progress_status_isValid;

    m_dry_run_config_isValid = ::OpenAPI::fromJsonValue(m_dry_run_config, json[QString("DryRunConfig")]);
    m_dry_run_config_isSet = !json[QString("DryRunConfig")].isNull() && m_dry_run_config_isValid;

    m_dry_run_results_isValid = ::OpenAPI::fromJsonValue(m_dry_run_results, json[QString("DryRunResults")]);
    m_dry_run_results_isSet = !json[QString("DryRunResults")].isNull() && m_dry_run_results_isValid;
}

QString OAIDescribeDryRunProgressResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDryRunProgressResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dry_run_progress_status.isSet()) {
        obj.insert(QString("DryRunProgressStatus"), ::OpenAPI::toJsonValue(m_dry_run_progress_status));
    }
    if (m_dry_run_config.isSet()) {
        obj.insert(QString("DryRunConfig"), ::OpenAPI::toJsonValue(m_dry_run_config));
    }
    if (m_dry_run_results.isSet()) {
        obj.insert(QString("DryRunResults"), ::OpenAPI::toJsonValue(m_dry_run_results));
    }
    return obj;
}

OAIDescribeDryRunProgressResponse_DryRunProgressStatus OAIDescribeDryRunProgressResponse::getDryRunProgressStatus() const {
    return m_dry_run_progress_status;
}
void OAIDescribeDryRunProgressResponse::setDryRunProgressStatus(const OAIDescribeDryRunProgressResponse_DryRunProgressStatus &dry_run_progress_status) {
    m_dry_run_progress_status = dry_run_progress_status;
    m_dry_run_progress_status_isSet = true;
}

bool OAIDescribeDryRunProgressResponse::is_dry_run_progress_status_Set() const{
    return m_dry_run_progress_status_isSet;
}

bool OAIDescribeDryRunProgressResponse::is_dry_run_progress_status_Valid() const{
    return m_dry_run_progress_status_isValid;
}

OAIDescribeDryRunProgressResponse_DryRunConfig OAIDescribeDryRunProgressResponse::getDryRunConfig() const {
    return m_dry_run_config;
}
void OAIDescribeDryRunProgressResponse::setDryRunConfig(const OAIDescribeDryRunProgressResponse_DryRunConfig &dry_run_config) {
    m_dry_run_config = dry_run_config;
    m_dry_run_config_isSet = true;
}

bool OAIDescribeDryRunProgressResponse::is_dry_run_config_Set() const{
    return m_dry_run_config_isSet;
}

bool OAIDescribeDryRunProgressResponse::is_dry_run_config_Valid() const{
    return m_dry_run_config_isValid;
}

OAIDescribeDryRunProgressResponse_DryRunResults OAIDescribeDryRunProgressResponse::getDryRunResults() const {
    return m_dry_run_results;
}
void OAIDescribeDryRunProgressResponse::setDryRunResults(const OAIDescribeDryRunProgressResponse_DryRunResults &dry_run_results) {
    m_dry_run_results = dry_run_results;
    m_dry_run_results_isSet = true;
}

bool OAIDescribeDryRunProgressResponse::is_dry_run_results_Set() const{
    return m_dry_run_results_isSet;
}

bool OAIDescribeDryRunProgressResponse::is_dry_run_results_Valid() const{
    return m_dry_run_results_isValid;
}

bool OAIDescribeDryRunProgressResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dry_run_progress_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_results.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDryRunProgressResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
