/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAvailabilityZoneInfo.h
 *
 * Information about an Availability Zone on a domain.
 */

#ifndef OAIAvailabilityZoneInfo_H
#define OAIAvailabilityZoneInfo_H

#include <QJsonObject>

#include "OAIZoneStatus.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAvailabilityZoneInfo : public OAIObject {
public:
    OAIAvailabilityZoneInfo();
    OAIAvailabilityZoneInfo(QString json);
    ~OAIAvailabilityZoneInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAvailabilityZoneName() const;
    void setAvailabilityZoneName(const QString &availability_zone_name);
    bool is_availability_zone_name_Set() const;
    bool is_availability_zone_name_Valid() const;

    OAIZoneStatus getZoneStatus() const;
    void setZoneStatus(const OAIZoneStatus &zone_status);
    bool is_zone_status_Set() const;
    bool is_zone_status_Valid() const;

    QString getConfiguredDataNodeCount() const;
    void setConfiguredDataNodeCount(const QString &configured_data_node_count);
    bool is_configured_data_node_count_Set() const;
    bool is_configured_data_node_count_Valid() const;

    QString getAvailableDataNodeCount() const;
    void setAvailableDataNodeCount(const QString &available_data_node_count);
    bool is_available_data_node_count_Set() const;
    bool is_available_data_node_count_Valid() const;

    QString getTotalShards() const;
    void setTotalShards(const QString &total_shards);
    bool is_total_shards_Set() const;
    bool is_total_shards_Valid() const;

    QString getTotalUnAssignedShards() const;
    void setTotalUnAssignedShards(const QString &total_un_assigned_shards);
    bool is_total_un_assigned_shards_Set() const;
    bool is_total_un_assigned_shards_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_availability_zone_name;
    bool m_availability_zone_name_isSet;
    bool m_availability_zone_name_isValid;

    OAIZoneStatus m_zone_status;
    bool m_zone_status_isSet;
    bool m_zone_status_isValid;

    QString m_configured_data_node_count;
    bool m_configured_data_node_count_isSet;
    bool m_configured_data_node_count_isValid;

    QString m_available_data_node_count;
    bool m_available_data_node_count_isSet;
    bool m_available_data_node_count_isValid;

    QString m_total_shards;
    bool m_total_shards_isSet;
    bool m_total_shards_isValid;

    QString m_total_un_assigned_shards;
    bool m_total_un_assigned_shards_isSet;
    bool m_total_un_assigned_shards_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAvailabilityZoneInfo)

#endif // OAIAvailabilityZoneInfo_H
