/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDryRunProgressResponse_DryRunConfig.h
 *
 * 
 */

#ifndef OAIDescribeDryRunProgressResponse_DryRunConfig_H
#define OAIDescribeDryRunProgressResponse_DryRunConfig_H

#include <QJsonObject>

#include "OAICreateDomainRequest_DomainEndpointOptions.h"
#include "OAIDomainStatus_AdvancedSecurityOptions.h"
#include "OAIDomainStatus_AutoTuneOptions.h"
#include "OAIDomainStatus_ChangeProgressDetails.h"
#include "OAIDomainStatus_ClusterConfig.h"
#include "OAIDomainStatus_CognitoOptions.h"
#include "OAIDomainStatus_EBSOptions.h"
#include "OAIDomainStatus_EncryptionAtRestOptions.h"
#include "OAIDomainStatus_NodeToNodeEncryptionOptions.h"
#include "OAIDomainStatus_OffPeakWindowOptions.h"
#include "OAIDomainStatus_ServiceSoftwareOptions.h"
#include "OAIDomainStatus_SnapshotOptions.h"
#include "OAIDomainStatus_SoftwareUpdateOptions.h"
#include "OAIDomainStatus_VPCOptions.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDomainStatus_ClusterConfig;
class OAIDomainStatus_EBSOptions;
class OAIDomainStatus_SnapshotOptions;
class OAIDomainStatus_VPCOptions;
class OAIDomainStatus_CognitoOptions;
class OAIDomainStatus_EncryptionAtRestOptions;
class OAIDomainStatus_NodeToNodeEncryptionOptions;
class OAIDomainStatus_ServiceSoftwareOptions;
class OAICreateDomainRequest_DomainEndpointOptions;
class OAIDomainStatus_AdvancedSecurityOptions;
class OAIDomainStatus_AutoTuneOptions;
class OAIDomainStatus_ChangeProgressDetails;
class OAIDomainStatus_OffPeakWindowOptions;
class OAIDomainStatus_SoftwareUpdateOptions;

class OAIDescribeDryRunProgressResponse_DryRunConfig : public OAIObject {
public:
    OAIDescribeDryRunProgressResponse_DryRunConfig();
    OAIDescribeDryRunProgressResponse_DryRunConfig(QString json);
    ~OAIDescribeDryRunProgressResponse_DryRunConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDomainId() const;
    void setDomainId(const QString &domain_id);
    bool is_domain_id_Set() const;
    bool is_domain_id_Valid() const;

    QString getDomainName() const;
    void setDomainName(const QString &domain_name);
    bool is_domain_name_Set() const;
    bool is_domain_name_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    bool getCreated() const;
    void setCreated(const bool &created);
    bool is_created_Set() const;
    bool is_created_Valid() const;

    bool getDeleted() const;
    void setDeleted(const bool &deleted);
    bool is_deleted_Set() const;
    bool is_deleted_Valid() const;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    QMap getEndpoints() const;
    void setEndpoints(const QMap &endpoints);
    bool is_endpoints_Set() const;
    bool is_endpoints_Valid() const;

    bool getProcessing() const;
    void setProcessing(const bool &processing);
    bool is_processing_Set() const;
    bool is_processing_Valid() const;

    bool getUpgradeProcessing() const;
    void setUpgradeProcessing(const bool &upgrade_processing);
    bool is_upgrade_processing_Set() const;
    bool is_upgrade_processing_Valid() const;

    QString getEngineVersion() const;
    void setEngineVersion(const QString &engine_version);
    bool is_engine_version_Set() const;
    bool is_engine_version_Valid() const;

    OAIDomainStatus_ClusterConfig getClusterConfig() const;
    void setClusterConfig(const OAIDomainStatus_ClusterConfig &cluster_config);
    bool is_cluster_config_Set() const;
    bool is_cluster_config_Valid() const;

    OAIDomainStatus_EBSOptions getEbsOptions() const;
    void setEbsOptions(const OAIDomainStatus_EBSOptions &ebs_options);
    bool is_ebs_options_Set() const;
    bool is_ebs_options_Valid() const;

    QString getAccessPolicies() const;
    void setAccessPolicies(const QString &access_policies);
    bool is_access_policies_Set() const;
    bool is_access_policies_Valid() const;

    OAIDomainStatus_SnapshotOptions getSnapshotOptions() const;
    void setSnapshotOptions(const OAIDomainStatus_SnapshotOptions &snapshot_options);
    bool is_snapshot_options_Set() const;
    bool is_snapshot_options_Valid() const;

    OAIDomainStatus_VPCOptions getVpcOptions() const;
    void setVpcOptions(const OAIDomainStatus_VPCOptions &vpc_options);
    bool is_vpc_options_Set() const;
    bool is_vpc_options_Valid() const;

    OAIDomainStatus_CognitoOptions getCognitoOptions() const;
    void setCognitoOptions(const OAIDomainStatus_CognitoOptions &cognito_options);
    bool is_cognito_options_Set() const;
    bool is_cognito_options_Valid() const;

    OAIDomainStatus_EncryptionAtRestOptions getEncryptionAtRestOptions() const;
    void setEncryptionAtRestOptions(const OAIDomainStatus_EncryptionAtRestOptions &encryption_at_rest_options);
    bool is_encryption_at_rest_options_Set() const;
    bool is_encryption_at_rest_options_Valid() const;

    OAIDomainStatus_NodeToNodeEncryptionOptions getNodeToNodeEncryptionOptions() const;
    void setNodeToNodeEncryptionOptions(const OAIDomainStatus_NodeToNodeEncryptionOptions &node_to_node_encryption_options);
    bool is_node_to_node_encryption_options_Set() const;
    bool is_node_to_node_encryption_options_Valid() const;

    QMap getAdvancedOptions() const;
    void setAdvancedOptions(const QMap &advanced_options);
    bool is_advanced_options_Set() const;
    bool is_advanced_options_Valid() const;

    QMap getLogPublishingOptions() const;
    void setLogPublishingOptions(const QMap &log_publishing_options);
    bool is_log_publishing_options_Set() const;
    bool is_log_publishing_options_Valid() const;

    OAIDomainStatus_ServiceSoftwareOptions getServiceSoftwareOptions() const;
    void setServiceSoftwareOptions(const OAIDomainStatus_ServiceSoftwareOptions &service_software_options);
    bool is_service_software_options_Set() const;
    bool is_service_software_options_Valid() const;

    OAICreateDomainRequest_DomainEndpointOptions getDomainEndpointOptions() const;
    void setDomainEndpointOptions(const OAICreateDomainRequest_DomainEndpointOptions &domain_endpoint_options);
    bool is_domain_endpoint_options_Set() const;
    bool is_domain_endpoint_options_Valid() const;

    OAIDomainStatus_AdvancedSecurityOptions getAdvancedSecurityOptions() const;
    void setAdvancedSecurityOptions(const OAIDomainStatus_AdvancedSecurityOptions &advanced_security_options);
    bool is_advanced_security_options_Set() const;
    bool is_advanced_security_options_Valid() const;

    OAIDomainStatus_AutoTuneOptions getAutoTuneOptions() const;
    void setAutoTuneOptions(const OAIDomainStatus_AutoTuneOptions &auto_tune_options);
    bool is_auto_tune_options_Set() const;
    bool is_auto_tune_options_Valid() const;

    OAIDomainStatus_ChangeProgressDetails getChangeProgressDetails() const;
    void setChangeProgressDetails(const OAIDomainStatus_ChangeProgressDetails &change_progress_details);
    bool is_change_progress_details_Set() const;
    bool is_change_progress_details_Valid() const;

    OAIDomainStatus_OffPeakWindowOptions getOffPeakWindowOptions() const;
    void setOffPeakWindowOptions(const OAIDomainStatus_OffPeakWindowOptions &off_peak_window_options);
    bool is_off_peak_window_options_Set() const;
    bool is_off_peak_window_options_Valid() const;

    OAIDomainStatus_SoftwareUpdateOptions getSoftwareUpdateOptions() const;
    void setSoftwareUpdateOptions(const OAIDomainStatus_SoftwareUpdateOptions &software_update_options);
    bool is_software_update_options_Set() const;
    bool is_software_update_options_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_domain_id;
    bool m_domain_id_isSet;
    bool m_domain_id_isValid;

    QString m_domain_name;
    bool m_domain_name_isSet;
    bool m_domain_name_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    bool m_created;
    bool m_created_isSet;
    bool m_created_isValid;

    bool m_deleted;
    bool m_deleted_isSet;
    bool m_deleted_isValid;

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    QMap m_endpoints;
    bool m_endpoints_isSet;
    bool m_endpoints_isValid;

    bool m_processing;
    bool m_processing_isSet;
    bool m_processing_isValid;

    bool m_upgrade_processing;
    bool m_upgrade_processing_isSet;
    bool m_upgrade_processing_isValid;

    QString m_engine_version;
    bool m_engine_version_isSet;
    bool m_engine_version_isValid;

    OAIDomainStatus_ClusterConfig m_cluster_config;
    bool m_cluster_config_isSet;
    bool m_cluster_config_isValid;

    OAIDomainStatus_EBSOptions m_ebs_options;
    bool m_ebs_options_isSet;
    bool m_ebs_options_isValid;

    QString m_access_policies;
    bool m_access_policies_isSet;
    bool m_access_policies_isValid;

    OAIDomainStatus_SnapshotOptions m_snapshot_options;
    bool m_snapshot_options_isSet;
    bool m_snapshot_options_isValid;

    OAIDomainStatus_VPCOptions m_vpc_options;
    bool m_vpc_options_isSet;
    bool m_vpc_options_isValid;

    OAIDomainStatus_CognitoOptions m_cognito_options;
    bool m_cognito_options_isSet;
    bool m_cognito_options_isValid;

    OAIDomainStatus_EncryptionAtRestOptions m_encryption_at_rest_options;
    bool m_encryption_at_rest_options_isSet;
    bool m_encryption_at_rest_options_isValid;

    OAIDomainStatus_NodeToNodeEncryptionOptions m_node_to_node_encryption_options;
    bool m_node_to_node_encryption_options_isSet;
    bool m_node_to_node_encryption_options_isValid;

    QMap m_advanced_options;
    bool m_advanced_options_isSet;
    bool m_advanced_options_isValid;

    QMap m_log_publishing_options;
    bool m_log_publishing_options_isSet;
    bool m_log_publishing_options_isValid;

    OAIDomainStatus_ServiceSoftwareOptions m_service_software_options;
    bool m_service_software_options_isSet;
    bool m_service_software_options_isValid;

    OAICreateDomainRequest_DomainEndpointOptions m_domain_endpoint_options;
    bool m_domain_endpoint_options_isSet;
    bool m_domain_endpoint_options_isValid;

    OAIDomainStatus_AdvancedSecurityOptions m_advanced_security_options;
    bool m_advanced_security_options_isSet;
    bool m_advanced_security_options_isValid;

    OAIDomainStatus_AutoTuneOptions m_auto_tune_options;
    bool m_auto_tune_options_isSet;
    bool m_auto_tune_options_isValid;

    OAIDomainStatus_ChangeProgressDetails m_change_progress_details;
    bool m_change_progress_details_isSet;
    bool m_change_progress_details_isValid;

    OAIDomainStatus_OffPeakWindowOptions m_off_peak_window_options;
    bool m_off_peak_window_options_isSet;
    bool m_off_peak_window_options_isValid;

    OAIDomainStatus_SoftwareUpdateOptions m_software_update_options;
    bool m_software_update_options_isSet;
    bool m_software_update_options_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDryRunProgressResponse_DryRunConfig)

#endif // OAIDescribeDryRunProgressResponse_DryRunConfig_H
