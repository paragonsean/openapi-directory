/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICognitoOptionsStatus_Options.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICognitoOptionsStatus_Options::OAICognitoOptionsStatus_Options(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICognitoOptionsStatus_Options::OAICognitoOptionsStatus_Options() {
    this->initializeModel();
}

OAICognitoOptionsStatus_Options::~OAICognitoOptionsStatus_Options() {}

void OAICognitoOptionsStatus_Options::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_user_pool_id_isSet = false;
    m_user_pool_id_isValid = false;

    m_identity_pool_id_isSet = false;
    m_identity_pool_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;
}

void OAICognitoOptionsStatus_Options::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICognitoOptionsStatus_Options::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_user_pool_id_isValid = ::OpenAPI::fromJsonValue(m_user_pool_id, json[QString("UserPoolId")]);
    m_user_pool_id_isSet = !json[QString("UserPoolId")].isNull() && m_user_pool_id_isValid;

    m_identity_pool_id_isValid = ::OpenAPI::fromJsonValue(m_identity_pool_id, json[QString("IdentityPoolId")]);
    m_identity_pool_id_isSet = !json[QString("IdentityPoolId")].isNull() && m_identity_pool_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;
}

QString OAICognitoOptionsStatus_Options::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICognitoOptionsStatus_Options::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_user_pool_id_isSet) {
        obj.insert(QString("UserPoolId"), ::OpenAPI::toJsonValue(m_user_pool_id));
    }
    if (m_identity_pool_id_isSet) {
        obj.insert(QString("IdentityPoolId"), ::OpenAPI::toJsonValue(m_identity_pool_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    return obj;
}

bool OAICognitoOptionsStatus_Options::getEnabled() const {
    return m_enabled;
}
void OAICognitoOptionsStatus_Options::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICognitoOptionsStatus_Options::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICognitoOptionsStatus_Options::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAICognitoOptionsStatus_Options::getUserPoolId() const {
    return m_user_pool_id;
}
void OAICognitoOptionsStatus_Options::setUserPoolId(const QString &user_pool_id) {
    m_user_pool_id = user_pool_id;
    m_user_pool_id_isSet = true;
}

bool OAICognitoOptionsStatus_Options::is_user_pool_id_Set() const{
    return m_user_pool_id_isSet;
}

bool OAICognitoOptionsStatus_Options::is_user_pool_id_Valid() const{
    return m_user_pool_id_isValid;
}

QString OAICognitoOptionsStatus_Options::getIdentityPoolId() const {
    return m_identity_pool_id;
}
void OAICognitoOptionsStatus_Options::setIdentityPoolId(const QString &identity_pool_id) {
    m_identity_pool_id = identity_pool_id;
    m_identity_pool_id_isSet = true;
}

bool OAICognitoOptionsStatus_Options::is_identity_pool_id_Set() const{
    return m_identity_pool_id_isSet;
}

bool OAICognitoOptionsStatus_Options::is_identity_pool_id_Valid() const{
    return m_identity_pool_id_isValid;
}

QString OAICognitoOptionsStatus_Options::getRoleArn() const {
    return m_role_arn;
}
void OAICognitoOptionsStatus_Options::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICognitoOptionsStatus_Options::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICognitoOptionsStatus_Options::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAICognitoOptionsStatus_Options::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_pool_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICognitoOptionsStatus_Options::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
