/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOpenSearchPartitionInstanceType.h
 *
 * 
 */

#ifndef OAIOpenSearchPartitionInstanceType_H
#define OAIOpenSearchPartitionInstanceType_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOpenSearchPartitionInstanceType : public OAIEnum {
public:
    OAIOpenSearchPartitionInstanceType();
    OAIOpenSearchPartitionInstanceType(QString json);
    ~OAIOpenSearchPartitionInstanceType() override;

    QString asJson() const override;
    QJsonValue asJsonValue() const override;
    void fromJsonValue(QJsonValue json) override;
    void fromJson(QString jsonString) override;

    enum class eOAIOpenSearchPartitionInstanceType {
        INVALID_VALUE_OPENAPI_GENERATED = 0,
        M3_MEDIUM_SEARCH, 
        M3_LARGE_SEARCH, 
        M3_XLARGE_SEARCH, 
        M3_2XLARGE_SEARCH, 
        M4_LARGE_SEARCH, 
        M4_XLARGE_SEARCH, 
        M4_2XLARGE_SEARCH, 
        M4_4XLARGE_SEARCH, 
        M4_10XLARGE_SEARCH, 
        M5_LARGE_SEARCH, 
        M5_XLARGE_SEARCH, 
        M5_2XLARGE_SEARCH, 
        M5_4XLARGE_SEARCH, 
        M5_12XLARGE_SEARCH, 
        M5_24XLARGE_SEARCH, 
        R5_LARGE_SEARCH, 
        R5_XLARGE_SEARCH, 
        R5_2XLARGE_SEARCH, 
        R5_4XLARGE_SEARCH, 
        R5_12XLARGE_SEARCH, 
        R5_24XLARGE_SEARCH, 
        C5_LARGE_SEARCH, 
        C5_XLARGE_SEARCH, 
        C5_2XLARGE_SEARCH, 
        C5_4XLARGE_SEARCH, 
        C5_9XLARGE_SEARCH, 
        C5_18XLARGE_SEARCH, 
        T3_NANO_SEARCH, 
        T3_MICRO_SEARCH, 
        T3_SMALL_SEARCH, 
        T3_MEDIUM_SEARCH, 
        T3_LARGE_SEARCH, 
        T3_XLARGE_SEARCH, 
        T3_2XLARGE_SEARCH, 
        ULTRAWARM1_MEDIUM_SEARCH, 
        ULTRAWARM1_LARGE_SEARCH, 
        ULTRAWARM1_XLARGE_SEARCH, 
        T2_MICRO_SEARCH, 
        T2_SMALL_SEARCH, 
        T2_MEDIUM_SEARCH, 
        R3_LARGE_SEARCH, 
        R3_XLARGE_SEARCH, 
        R3_2XLARGE_SEARCH, 
        R3_4XLARGE_SEARCH, 
        R3_8XLARGE_SEARCH, 
        I2_XLARGE_SEARCH, 
        I2_2XLARGE_SEARCH, 
        D2_XLARGE_SEARCH, 
        D2_2XLARGE_SEARCH, 
        D2_4XLARGE_SEARCH, 
        D2_8XLARGE_SEARCH, 
        C4_LARGE_SEARCH, 
        C4_XLARGE_SEARCH, 
        C4_2XLARGE_SEARCH, 
        C4_4XLARGE_SEARCH, 
        C4_8XLARGE_SEARCH, 
        R4_LARGE_SEARCH, 
        R4_XLARGE_SEARCH, 
        R4_2XLARGE_SEARCH, 
        R4_4XLARGE_SEARCH, 
        R4_8XLARGE_SEARCH, 
        R4_16XLARGE_SEARCH, 
        I3_LARGE_SEARCH, 
        I3_XLARGE_SEARCH, 
        I3_2XLARGE_SEARCH, 
        I3_4XLARGE_SEARCH, 
        I3_8XLARGE_SEARCH, 
        I3_16XLARGE_SEARCH, 
        R6G_LARGE_SEARCH, 
        R6G_XLARGE_SEARCH, 
        R6G_2XLARGE_SEARCH, 
        R6G_4XLARGE_SEARCH, 
        R6G_8XLARGE_SEARCH, 
        R6G_12XLARGE_SEARCH, 
        M6G_LARGE_SEARCH, 
        M6G_XLARGE_SEARCH, 
        M6G_2XLARGE_SEARCH, 
        M6G_4XLARGE_SEARCH, 
        M6G_8XLARGE_SEARCH, 
        M6G_12XLARGE_SEARCH, 
        C6G_LARGE_SEARCH, 
        C6G_XLARGE_SEARCH, 
        C6G_2XLARGE_SEARCH, 
        C6G_4XLARGE_SEARCH, 
        C6G_8XLARGE_SEARCH, 
        C6G_12XLARGE_SEARCH, 
        R6GD_LARGE_SEARCH, 
        R6GD_XLARGE_SEARCH, 
        R6GD_2XLARGE_SEARCH, 
        R6GD_4XLARGE_SEARCH, 
        R6GD_8XLARGE_SEARCH, 
        R6GD_12XLARGE_SEARCH, 
        R6GD_16XLARGE_SEARCH, 
        T4G_SMALL_SEARCH, 
        T4G_MEDIUM_SEARCH
    };
    OAIOpenSearchPartitionInstanceType::eOAIOpenSearchPartitionInstanceType getValue() const;
    void setValue(const OAIOpenSearchPartitionInstanceType::eOAIOpenSearchPartitionInstanceType& value);
    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    eOAIOpenSearchPartitionInstanceType m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOpenSearchPartitionInstanceType)

#endif // OAIOpenSearchPartitionInstanceType_H
