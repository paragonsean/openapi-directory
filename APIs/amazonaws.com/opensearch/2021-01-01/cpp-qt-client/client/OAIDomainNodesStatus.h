/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDomainNodesStatus.h
 *
 * Container for information about nodes on the domain.
 */

#ifndef OAIDomainNodesStatus_H
#define OAIDomainNodesStatus_H

#include <QJsonObject>

#include "OAINodeStatus.h"
#include "OAINodeType.h"
#include "OAIOpenSearchPartitionInstanceType.h"
#include "OAIVolumeType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDomainNodesStatus : public OAIObject {
public:
    OAIDomainNodesStatus();
    OAIDomainNodesStatus(QString json);
    ~OAIDomainNodesStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    OAINodeType getNodeType() const;
    void setNodeType(const OAINodeType &node_type);
    bool is_node_type_Set() const;
    bool is_node_type_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    OAIOpenSearchPartitionInstanceType getInstanceType() const;
    void setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    OAINodeStatus getNodeStatus() const;
    void setNodeStatus(const OAINodeStatus &node_status);
    bool is_node_status_Set() const;
    bool is_node_status_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    OAIVolumeType getStorageVolumeType() const;
    void setStorageVolumeType(const OAIVolumeType &storage_volume_type);
    bool is_storage_volume_type_Set() const;
    bool is_storage_volume_type_Valid() const;

    QString getStorageSize() const;
    void setStorageSize(const QString &storage_size);
    bool is_storage_size_Set() const;
    bool is_storage_size_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    OAINodeType m_node_type;
    bool m_node_type_isSet;
    bool m_node_type_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    OAIOpenSearchPartitionInstanceType m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    OAINodeStatus m_node_status;
    bool m_node_status_isSet;
    bool m_node_status_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    OAIVolumeType m_storage_volume_type;
    bool m_storage_volume_type_isSet;
    bool m_storage_volume_type_isValid;

    QString m_storage_size;
    bool m_storage_size_isSet;
    bool m_storage_size_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDomainNodesStatus)

#endif // OAIDomainNodesStatus_H
