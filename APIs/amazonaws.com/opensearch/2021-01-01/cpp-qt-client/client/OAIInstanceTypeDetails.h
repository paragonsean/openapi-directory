/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstanceTypeDetails.h
 *
 * Lists all instance types and available features for a given OpenSearch or Elasticsearch version.
 */

#ifndef OAIInstanceTypeDetails_H
#define OAIInstanceTypeDetails_H

#include <QJsonObject>

#include "OAIOpenSearchPartitionInstanceType.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInstanceTypeDetails : public OAIObject {
public:
    OAIInstanceTypeDetails();
    OAIInstanceTypeDetails(QString json);
    ~OAIInstanceTypeDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIOpenSearchPartitionInstanceType getInstanceType() const;
    void setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    bool getEncryptionEnabled() const;
    void setEncryptionEnabled(const bool &encryption_enabled);
    bool is_encryption_enabled_Set() const;
    bool is_encryption_enabled_Valid() const;

    bool getCognitoEnabled() const;
    void setCognitoEnabled(const bool &cognito_enabled);
    bool is_cognito_enabled_Set() const;
    bool is_cognito_enabled_Valid() const;

    bool getAppLogsEnabled() const;
    void setAppLogsEnabled(const bool &app_logs_enabled);
    bool is_app_logs_enabled_Set() const;
    bool is_app_logs_enabled_Valid() const;

    bool getAdvancedSecurityEnabled() const;
    void setAdvancedSecurityEnabled(const bool &advanced_security_enabled);
    bool is_advanced_security_enabled_Set() const;
    bool is_advanced_security_enabled_Valid() const;

    bool getWarmEnabled() const;
    void setWarmEnabled(const bool &warm_enabled);
    bool is_warm_enabled_Set() const;
    bool is_warm_enabled_Valid() const;

    QList getInstanceRole() const;
    void setInstanceRole(const QList &instance_role);
    bool is_instance_role_Set() const;
    bool is_instance_role_Valid() const;

    QList getAvailabilityZones() const;
    void setAvailabilityZones(const QList &availability_zones);
    bool is_availability_zones_Set() const;
    bool is_availability_zones_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIOpenSearchPartitionInstanceType m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    bool m_encryption_enabled;
    bool m_encryption_enabled_isSet;
    bool m_encryption_enabled_isValid;

    bool m_cognito_enabled;
    bool m_cognito_enabled_isSet;
    bool m_cognito_enabled_isValid;

    bool m_app_logs_enabled;
    bool m_app_logs_enabled_isSet;
    bool m_app_logs_enabled_isValid;

    bool m_advanced_security_enabled;
    bool m_advanced_security_enabled_isSet;
    bool m_advanced_security_enabled_isValid;

    bool m_warm_enabled;
    bool m_warm_enabled_isSet;
    bool m_warm_enabled_isValid;

    QList m_instance_role;
    bool m_instance_role_isSet;
    bool m_instance_role_isValid;

    QList m_availability_zones;
    bool m_availability_zones_isSet;
    bool m_availability_zones_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstanceTypeDetails)

#endif // OAIInstanceTypeDetails_H
