/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions() {
    this->initializeModel();
}

OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::~OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions() {}

void OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::initializeModel() {

    m_master_user_arn_isSet = false;
    m_master_user_arn_isValid = false;

    m_master_user_name_isSet = false;
    m_master_user_name_isValid = false;

    m_master_user_password_isSet = false;
    m_master_user_password_isValid = false;
}

void OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::fromJsonObject(QJsonObject json) {

    m_master_user_arn_isValid = ::OpenAPI::fromJsonValue(m_master_user_arn, json[QString("MasterUserARN")]);
    m_master_user_arn_isSet = !json[QString("MasterUserARN")].isNull() && m_master_user_arn_isValid;

    m_master_user_name_isValid = ::OpenAPI::fromJsonValue(m_master_user_name, json[QString("MasterUserName")]);
    m_master_user_name_isSet = !json[QString("MasterUserName")].isNull() && m_master_user_name_isValid;

    m_master_user_password_isValid = ::OpenAPI::fromJsonValue(m_master_user_password, json[QString("MasterUserPassword")]);
    m_master_user_password_isSet = !json[QString("MasterUserPassword")].isNull() && m_master_user_password_isValid;
}

QString OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_master_user_arn_isSet) {
        obj.insert(QString("MasterUserARN"), ::OpenAPI::toJsonValue(m_master_user_arn));
    }
    if (m_master_user_name_isSet) {
        obj.insert(QString("MasterUserName"), ::OpenAPI::toJsonValue(m_master_user_name));
    }
    if (m_master_user_password_isSet) {
        obj.insert(QString("MasterUserPassword"), ::OpenAPI::toJsonValue(m_master_user_password));
    }
    return obj;
}

QString OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::getMasterUserArn() const {
    return m_master_user_arn;
}
void OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::setMasterUserArn(const QString &master_user_arn) {
    m_master_user_arn = master_user_arn;
    m_master_user_arn_isSet = true;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::is_master_user_arn_Set() const{
    return m_master_user_arn_isSet;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::is_master_user_arn_Valid() const{
    return m_master_user_arn_isValid;
}

QString OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::getMasterUserName() const {
    return m_master_user_name;
}
void OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::setMasterUserName(const QString &master_user_name) {
    m_master_user_name = master_user_name;
    m_master_user_name_isSet = true;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::is_master_user_name_Set() const{
    return m_master_user_name_isSet;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::is_master_user_name_Valid() const{
    return m_master_user_name_isValid;
}

QString OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::getMasterUserPassword() const {
    return m_master_user_password;
}
void OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::setMasterUserPassword(const QString &master_user_password) {
    m_master_user_password = master_user_password;
    m_master_user_password_isSet = true;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::is_master_user_password_Set() const{
    return m_master_user_password_isSet;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::is_master_user_password_Valid() const{
    return m_master_user_password_isValid;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_master_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomain_request_AdvancedSecurityOptions_MasterUserOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
