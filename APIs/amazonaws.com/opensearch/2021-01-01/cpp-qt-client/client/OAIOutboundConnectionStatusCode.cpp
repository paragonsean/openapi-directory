/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutboundConnectionStatusCode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutboundConnectionStatusCode::OAIOutboundConnectionStatusCode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutboundConnectionStatusCode::OAIOutboundConnectionStatusCode() {
    this->initializeModel();
}

OAIOutboundConnectionStatusCode::~OAIOutboundConnectionStatusCode() {}

void OAIOutboundConnectionStatusCode::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOutboundConnectionStatusCode::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOutboundConnectionStatusCode::fromJson(QString jsonString) {
    
    if ( jsonString.compare("VALIDATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::VALIDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::VALIDATION_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_ACCEPTANCE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::PENDING_ACCEPTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APPROVED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PROVISIONING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::PROVISIONING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::REJECTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("REJECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::REJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOutboundConnectionStatusCode::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOutboundConnectionStatusCode::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOutboundConnectionStatusCode::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOutboundConnectionStatusCode::VALIDATING:
            val = "VALIDATING";
            break;
        case eOAIOutboundConnectionStatusCode::VALIDATION_FAILED:
            val = "VALIDATION_FAILED";
            break;
        case eOAIOutboundConnectionStatusCode::PENDING_ACCEPTANCE:
            val = "PENDING_ACCEPTANCE";
            break;
        case eOAIOutboundConnectionStatusCode::APPROVED:
            val = "APPROVED";
            break;
        case eOAIOutboundConnectionStatusCode::PROVISIONING:
            val = "PROVISIONING";
            break;
        case eOAIOutboundConnectionStatusCode::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIOutboundConnectionStatusCode::REJECTING:
            val = "REJECTING";
            break;
        case eOAIOutboundConnectionStatusCode::REJECTED:
            val = "REJECTED";
            break;
        case eOAIOutboundConnectionStatusCode::DELETING:
            val = "DELETING";
            break;
        case eOAIOutboundConnectionStatusCode::DELETED:
            val = "DELETED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOutboundConnectionStatusCode::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOutboundConnectionStatusCode::eOAIOutboundConnectionStatusCode OAIOutboundConnectionStatusCode::getValue() const {
    return m_value;
}

void OAIOutboundConnectionStatusCode::setValue(const OAIOutboundConnectionStatusCode::eOAIOutboundConnectionStatusCode& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOutboundConnectionStatusCode::isSet() const {
    
    return m_value_isSet;
}

bool OAIOutboundConnectionStatusCode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
