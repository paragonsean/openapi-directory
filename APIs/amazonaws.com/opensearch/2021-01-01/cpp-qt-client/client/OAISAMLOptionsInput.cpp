/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISAMLOptionsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISAMLOptionsInput::OAISAMLOptionsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISAMLOptionsInput::OAISAMLOptionsInput() {
    this->initializeModel();
}

OAISAMLOptionsInput::~OAISAMLOptionsInput() {}

void OAISAMLOptionsInput::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_idp_isSet = false;
    m_idp_isValid = false;

    m_master_user_name_isSet = false;
    m_master_user_name_isValid = false;

    m_master_backend_role_isSet = false;
    m_master_backend_role_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_roles_key_isSet = false;
    m_roles_key_isValid = false;

    m_session_timeout_minutes_isSet = false;
    m_session_timeout_minutes_isValid = false;
}

void OAISAMLOptionsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISAMLOptionsInput::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_idp_isValid = ::OpenAPI::fromJsonValue(m_idp, json[QString("Idp")]);
    m_idp_isSet = !json[QString("Idp")].isNull() && m_idp_isValid;

    m_master_user_name_isValid = ::OpenAPI::fromJsonValue(m_master_user_name, json[QString("MasterUserName")]);
    m_master_user_name_isSet = !json[QString("MasterUserName")].isNull() && m_master_user_name_isValid;

    m_master_backend_role_isValid = ::OpenAPI::fromJsonValue(m_master_backend_role, json[QString("MasterBackendRole")]);
    m_master_backend_role_isSet = !json[QString("MasterBackendRole")].isNull() && m_master_backend_role_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("SubjectKey")]);
    m_subject_key_isSet = !json[QString("SubjectKey")].isNull() && m_subject_key_isValid;

    m_roles_key_isValid = ::OpenAPI::fromJsonValue(m_roles_key, json[QString("RolesKey")]);
    m_roles_key_isSet = !json[QString("RolesKey")].isNull() && m_roles_key_isValid;

    m_session_timeout_minutes_isValid = ::OpenAPI::fromJsonValue(m_session_timeout_minutes, json[QString("SessionTimeoutMinutes")]);
    m_session_timeout_minutes_isSet = !json[QString("SessionTimeoutMinutes")].isNull() && m_session_timeout_minutes_isValid;
}

QString OAISAMLOptionsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISAMLOptionsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_idp.isSet()) {
        obj.insert(QString("Idp"), ::OpenAPI::toJsonValue(m_idp));
    }
    if (m_master_user_name_isSet) {
        obj.insert(QString("MasterUserName"), ::OpenAPI::toJsonValue(m_master_user_name));
    }
    if (m_master_backend_role_isSet) {
        obj.insert(QString("MasterBackendRole"), ::OpenAPI::toJsonValue(m_master_backend_role));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("SubjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_roles_key_isSet) {
        obj.insert(QString("RolesKey"), ::OpenAPI::toJsonValue(m_roles_key));
    }
    if (m_session_timeout_minutes_isSet) {
        obj.insert(QString("SessionTimeoutMinutes"), ::OpenAPI::toJsonValue(m_session_timeout_minutes));
    }
    return obj;
}

bool OAISAMLOptionsInput::getEnabled() const {
    return m_enabled;
}
void OAISAMLOptionsInput::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISAMLOptionsInput::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISAMLOptionsInput::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAISAMLOptionsInput_Idp OAISAMLOptionsInput::getIdp() const {
    return m_idp;
}
void OAISAMLOptionsInput::setIdp(const OAISAMLOptionsInput_Idp &idp) {
    m_idp = idp;
    m_idp_isSet = true;
}

bool OAISAMLOptionsInput::is_idp_Set() const{
    return m_idp_isSet;
}

bool OAISAMLOptionsInput::is_idp_Valid() const{
    return m_idp_isValid;
}

QString OAISAMLOptionsInput::getMasterUserName() const {
    return m_master_user_name;
}
void OAISAMLOptionsInput::setMasterUserName(const QString &master_user_name) {
    m_master_user_name = master_user_name;
    m_master_user_name_isSet = true;
}

bool OAISAMLOptionsInput::is_master_user_name_Set() const{
    return m_master_user_name_isSet;
}

bool OAISAMLOptionsInput::is_master_user_name_Valid() const{
    return m_master_user_name_isValid;
}

QString OAISAMLOptionsInput::getMasterBackendRole() const {
    return m_master_backend_role;
}
void OAISAMLOptionsInput::setMasterBackendRole(const QString &master_backend_role) {
    m_master_backend_role = master_backend_role;
    m_master_backend_role_isSet = true;
}

bool OAISAMLOptionsInput::is_master_backend_role_Set() const{
    return m_master_backend_role_isSet;
}

bool OAISAMLOptionsInput::is_master_backend_role_Valid() const{
    return m_master_backend_role_isValid;
}

QString OAISAMLOptionsInput::getSubjectKey() const {
    return m_subject_key;
}
void OAISAMLOptionsInput::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAISAMLOptionsInput::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAISAMLOptionsInput::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

QString OAISAMLOptionsInput::getRolesKey() const {
    return m_roles_key;
}
void OAISAMLOptionsInput::setRolesKey(const QString &roles_key) {
    m_roles_key = roles_key;
    m_roles_key_isSet = true;
}

bool OAISAMLOptionsInput::is_roles_key_Set() const{
    return m_roles_key_isSet;
}

bool OAISAMLOptionsInput::is_roles_key_Valid() const{
    return m_roles_key_isValid;
}

qint32 OAISAMLOptionsInput::getSessionTimeoutMinutes() const {
    return m_session_timeout_minutes;
}
void OAISAMLOptionsInput::setSessionTimeoutMinutes(const qint32 &session_timeout_minutes) {
    m_session_timeout_minutes = session_timeout_minutes;
    m_session_timeout_minutes_isSet = true;
}

bool OAISAMLOptionsInput::is_session_timeout_minutes_Set() const{
    return m_session_timeout_minutes_isSet;
}

bool OAISAMLOptionsInput::is_session_timeout_minutes_Valid() const{
    return m_session_timeout_minutes_isValid;
}

bool OAISAMLOptionsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_idp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_backend_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_timeout_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISAMLOptionsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
