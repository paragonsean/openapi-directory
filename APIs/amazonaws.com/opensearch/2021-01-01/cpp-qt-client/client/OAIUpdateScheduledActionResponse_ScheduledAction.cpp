/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateScheduledActionResponse_ScheduledAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateScheduledActionResponse_ScheduledAction::OAIUpdateScheduledActionResponse_ScheduledAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateScheduledActionResponse_ScheduledAction::OAIUpdateScheduledActionResponse_ScheduledAction() {
    this->initializeModel();
}

OAIUpdateScheduledActionResponse_ScheduledAction::~OAIUpdateScheduledActionResponse_ScheduledAction() {}

void OAIUpdateScheduledActionResponse_ScheduledAction::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_scheduled_time_isSet = false;
    m_scheduled_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_scheduled_by_isSet = false;
    m_scheduled_by_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_mandatory_isSet = false;
    m_mandatory_isValid = false;

    m_cancellable_isSet = false;
    m_cancellable_isValid = false;
}

void OAIUpdateScheduledActionResponse_ScheduledAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateScheduledActionResponse_ScheduledAction::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("Severity")]);
    m_severity_isSet = !json[QString("Severity")].isNull() && m_severity_isValid;

    m_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time, json[QString("ScheduledTime")]);
    m_scheduled_time_isSet = !json[QString("ScheduledTime")].isNull() && m_scheduled_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_scheduled_by_isValid = ::OpenAPI::fromJsonValue(m_scheduled_by, json[QString("ScheduledBy")]);
    m_scheduled_by_isSet = !json[QString("ScheduledBy")].isNull() && m_scheduled_by_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_mandatory_isValid = ::OpenAPI::fromJsonValue(m_mandatory, json[QString("Mandatory")]);
    m_mandatory_isSet = !json[QString("Mandatory")].isNull() && m_mandatory_isValid;

    m_cancellable_isValid = ::OpenAPI::fromJsonValue(m_cancellable, json[QString("Cancellable")]);
    m_cancellable_isSet = !json[QString("Cancellable")].isNull() && m_cancellable_isValid;
}

QString OAIUpdateScheduledActionResponse_ScheduledAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateScheduledActionResponse_ScheduledAction::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("Severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_scheduled_time_isSet) {
        obj.insert(QString("ScheduledTime"), ::OpenAPI::toJsonValue(m_scheduled_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_scheduled_by.isSet()) {
        obj.insert(QString("ScheduledBy"), ::OpenAPI::toJsonValue(m_scheduled_by));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_mandatory_isSet) {
        obj.insert(QString("Mandatory"), ::OpenAPI::toJsonValue(m_mandatory));
    }
    if (m_cancellable_isSet) {
        obj.insert(QString("Cancellable"), ::OpenAPI::toJsonValue(m_cancellable));
    }
    return obj;
}

QString OAIUpdateScheduledActionResponse_ScheduledAction::getId() const {
    return m_id;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_id_Valid() const{
    return m_id_isValid;
}

OAIActionType OAIUpdateScheduledActionResponse_ScheduledAction::getType() const {
    return m_type;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setType(const OAIActionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_type_Valid() const{
    return m_type_isValid;
}

OAIActionSeverity OAIUpdateScheduledActionResponse_ScheduledAction::getSeverity() const {
    return m_severity;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setSeverity(const OAIActionSeverity &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_severity_Valid() const{
    return m_severity_isValid;
}

qint32 OAIUpdateScheduledActionResponse_ScheduledAction::getScheduledTime() const {
    return m_scheduled_time;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setScheduledTime(const qint32 &scheduled_time) {
    m_scheduled_time = scheduled_time;
    m_scheduled_time_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_scheduled_time_Set() const{
    return m_scheduled_time_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_scheduled_time_Valid() const{
    return m_scheduled_time_isValid;
}

QString OAIUpdateScheduledActionResponse_ScheduledAction::getDescription() const {
    return m_description;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_description_Valid() const{
    return m_description_isValid;
}

OAIScheduledBy OAIUpdateScheduledActionResponse_ScheduledAction::getScheduledBy() const {
    return m_scheduled_by;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setScheduledBy(const OAIScheduledBy &scheduled_by) {
    m_scheduled_by = scheduled_by;
    m_scheduled_by_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_scheduled_by_Set() const{
    return m_scheduled_by_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_scheduled_by_Valid() const{
    return m_scheduled_by_isValid;
}

OAIActionStatus OAIUpdateScheduledActionResponse_ScheduledAction::getStatus() const {
    return m_status;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setStatus(const OAIActionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::getMandatory() const {
    return m_mandatory;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setMandatory(const bool &mandatory) {
    m_mandatory = mandatory;
    m_mandatory_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_mandatory_Set() const{
    return m_mandatory_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_mandatory_Valid() const{
    return m_mandatory_isValid;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::getCancellable() const {
    return m_cancellable;
}
void OAIUpdateScheduledActionResponse_ScheduledAction::setCancellable(const bool &cancellable) {
    m_cancellable = cancellable;
    m_cancellable_isSet = true;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_cancellable_Set() const{
    return m_cancellable_isSet;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::is_cancellable_Valid() const{
    return m_cancellable_isValid;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateScheduledActionResponse_ScheduledAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && m_severity_isValid && m_scheduled_time_isValid && true;
}

} // namespace OpenAPI
