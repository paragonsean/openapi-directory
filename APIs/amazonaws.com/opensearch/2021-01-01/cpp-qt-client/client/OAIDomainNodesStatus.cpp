/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainNodesStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainNodesStatus::OAIDomainNodesStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainNodesStatus::OAIDomainNodesStatus() {
    this->initializeModel();
}

OAIDomainNodesStatus::~OAIDomainNodesStatus() {}

void OAIDomainNodesStatus::initializeModel() {

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_node_status_isSet = false;
    m_node_status_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_storage_volume_type_isSet = false;
    m_storage_volume_type_isValid = false;

    m_storage_size_isSet = false;
    m_storage_size_isValid = false;
}

void OAIDomainNodesStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainNodesStatus::fromJsonObject(QJsonObject json) {

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("NodeId")]);
    m_node_id_isSet = !json[QString("NodeId")].isNull() && m_node_id_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("NodeType")]);
    m_node_type_isSet = !json[QString("NodeType")].isNull() && m_node_type_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("AvailabilityZone")]);
    m_availability_zone_isSet = !json[QString("AvailabilityZone")].isNull() && m_availability_zone_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_node_status_isValid = ::OpenAPI::fromJsonValue(m_node_status, json[QString("NodeStatus")]);
    m_node_status_isSet = !json[QString("NodeStatus")].isNull() && m_node_status_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("StorageType")]);
    m_storage_type_isSet = !json[QString("StorageType")].isNull() && m_storage_type_isValid;

    m_storage_volume_type_isValid = ::OpenAPI::fromJsonValue(m_storage_volume_type, json[QString("StorageVolumeType")]);
    m_storage_volume_type_isSet = !json[QString("StorageVolumeType")].isNull() && m_storage_volume_type_isValid;

    m_storage_size_isValid = ::OpenAPI::fromJsonValue(m_storage_size, json[QString("StorageSize")]);
    m_storage_size_isSet = !json[QString("StorageSize")].isNull() && m_storage_size_isValid;
}

QString OAIDomainNodesStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainNodesStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_node_id_isSet) {
        obj.insert(QString("NodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_type.isSet()) {
        obj.insert(QString("NodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("AvailabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_node_status.isSet()) {
        obj.insert(QString("NodeStatus"), ::OpenAPI::toJsonValue(m_node_status));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("StorageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_storage_volume_type.isSet()) {
        obj.insert(QString("StorageVolumeType"), ::OpenAPI::toJsonValue(m_storage_volume_type));
    }
    if (m_storage_size_isSet) {
        obj.insert(QString("StorageSize"), ::OpenAPI::toJsonValue(m_storage_size));
    }
    return obj;
}

QString OAIDomainNodesStatus::getNodeId() const {
    return m_node_id;
}
void OAIDomainNodesStatus::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIDomainNodesStatus::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIDomainNodesStatus::is_node_id_Valid() const{
    return m_node_id_isValid;
}

OAINodeType OAIDomainNodesStatus::getNodeType() const {
    return m_node_type;
}
void OAIDomainNodesStatus::setNodeType(const OAINodeType &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIDomainNodesStatus::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIDomainNodesStatus::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIDomainNodesStatus::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIDomainNodesStatus::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIDomainNodesStatus::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIDomainNodesStatus::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

OAIOpenSearchPartitionInstanceType OAIDomainNodesStatus::getInstanceType() const {
    return m_instance_type;
}
void OAIDomainNodesStatus::setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDomainNodesStatus::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDomainNodesStatus::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

OAINodeStatus OAIDomainNodesStatus::getNodeStatus() const {
    return m_node_status;
}
void OAIDomainNodesStatus::setNodeStatus(const OAINodeStatus &node_status) {
    m_node_status = node_status;
    m_node_status_isSet = true;
}

bool OAIDomainNodesStatus::is_node_status_Set() const{
    return m_node_status_isSet;
}

bool OAIDomainNodesStatus::is_node_status_Valid() const{
    return m_node_status_isValid;
}

QString OAIDomainNodesStatus::getStorageType() const {
    return m_storage_type;
}
void OAIDomainNodesStatus::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIDomainNodesStatus::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIDomainNodesStatus::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

OAIVolumeType OAIDomainNodesStatus::getStorageVolumeType() const {
    return m_storage_volume_type;
}
void OAIDomainNodesStatus::setStorageVolumeType(const OAIVolumeType &storage_volume_type) {
    m_storage_volume_type = storage_volume_type;
    m_storage_volume_type_isSet = true;
}

bool OAIDomainNodesStatus::is_storage_volume_type_Set() const{
    return m_storage_volume_type_isSet;
}

bool OAIDomainNodesStatus::is_storage_volume_type_Valid() const{
    return m_storage_volume_type_isValid;
}

QString OAIDomainNodesStatus::getStorageSize() const {
    return m_storage_size;
}
void OAIDomainNodesStatus::setStorageSize(const QString &storage_size) {
    m_storage_size = storage_size;
    m_storage_size_isSet = true;
}

bool OAIDomainNodesStatus::is_storage_size_Set() const{
    return m_storage_size_isSet;
}

bool OAIDomainNodesStatus::is_storage_size_Valid() const{
    return m_storage_size_isValid;
}

bool OAIDomainNodesStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_volume_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainNodesStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
