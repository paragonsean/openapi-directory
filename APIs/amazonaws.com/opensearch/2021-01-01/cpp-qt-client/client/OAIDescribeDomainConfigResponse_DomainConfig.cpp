/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDomainConfigResponse_DomainConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDomainConfigResponse_DomainConfig::OAIDescribeDomainConfigResponse_DomainConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDomainConfigResponse_DomainConfig::OAIDescribeDomainConfigResponse_DomainConfig() {
    this->initializeModel();
}

OAIDescribeDomainConfigResponse_DomainConfig::~OAIDescribeDomainConfigResponse_DomainConfig() {}

void OAIDescribeDomainConfigResponse_DomainConfig::initializeModel() {

    m_engine_version_isSet = false;
    m_engine_version_isValid = false;

    m_cluster_config_isSet = false;
    m_cluster_config_isValid = false;

    m_ebs_options_isSet = false;
    m_ebs_options_isValid = false;

    m_access_policies_isSet = false;
    m_access_policies_isValid = false;

    m_snapshot_options_isSet = false;
    m_snapshot_options_isValid = false;

    m_vpc_options_isSet = false;
    m_vpc_options_isValid = false;

    m_cognito_options_isSet = false;
    m_cognito_options_isValid = false;

    m_encryption_at_rest_options_isSet = false;
    m_encryption_at_rest_options_isValid = false;

    m_node_to_node_encryption_options_isSet = false;
    m_node_to_node_encryption_options_isValid = false;

    m_advanced_options_isSet = false;
    m_advanced_options_isValid = false;

    m_log_publishing_options_isSet = false;
    m_log_publishing_options_isValid = false;

    m_domain_endpoint_options_isSet = false;
    m_domain_endpoint_options_isValid = false;

    m_advanced_security_options_isSet = false;
    m_advanced_security_options_isValid = false;

    m_auto_tune_options_isSet = false;
    m_auto_tune_options_isValid = false;

    m_change_progress_details_isSet = false;
    m_change_progress_details_isValid = false;

    m_off_peak_window_options_isSet = false;
    m_off_peak_window_options_isValid = false;

    m_software_update_options_isSet = false;
    m_software_update_options_isValid = false;
}

void OAIDescribeDomainConfigResponse_DomainConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDomainConfigResponse_DomainConfig::fromJsonObject(QJsonObject json) {

    m_engine_version_isValid = ::OpenAPI::fromJsonValue(m_engine_version, json[QString("EngineVersion")]);
    m_engine_version_isSet = !json[QString("EngineVersion")].isNull() && m_engine_version_isValid;

    m_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_cluster_config, json[QString("ClusterConfig")]);
    m_cluster_config_isSet = !json[QString("ClusterConfig")].isNull() && m_cluster_config_isValid;

    m_ebs_options_isValid = ::OpenAPI::fromJsonValue(m_ebs_options, json[QString("EBSOptions")]);
    m_ebs_options_isSet = !json[QString("EBSOptions")].isNull() && m_ebs_options_isValid;

    m_access_policies_isValid = ::OpenAPI::fromJsonValue(m_access_policies, json[QString("AccessPolicies")]);
    m_access_policies_isSet = !json[QString("AccessPolicies")].isNull() && m_access_policies_isValid;

    m_snapshot_options_isValid = ::OpenAPI::fromJsonValue(m_snapshot_options, json[QString("SnapshotOptions")]);
    m_snapshot_options_isSet = !json[QString("SnapshotOptions")].isNull() && m_snapshot_options_isValid;

    m_vpc_options_isValid = ::OpenAPI::fromJsonValue(m_vpc_options, json[QString("VPCOptions")]);
    m_vpc_options_isSet = !json[QString("VPCOptions")].isNull() && m_vpc_options_isValid;

    m_cognito_options_isValid = ::OpenAPI::fromJsonValue(m_cognito_options, json[QString("CognitoOptions")]);
    m_cognito_options_isSet = !json[QString("CognitoOptions")].isNull() && m_cognito_options_isValid;

    m_encryption_at_rest_options_isValid = ::OpenAPI::fromJsonValue(m_encryption_at_rest_options, json[QString("EncryptionAtRestOptions")]);
    m_encryption_at_rest_options_isSet = !json[QString("EncryptionAtRestOptions")].isNull() && m_encryption_at_rest_options_isValid;

    m_node_to_node_encryption_options_isValid = ::OpenAPI::fromJsonValue(m_node_to_node_encryption_options, json[QString("NodeToNodeEncryptionOptions")]);
    m_node_to_node_encryption_options_isSet = !json[QString("NodeToNodeEncryptionOptions")].isNull() && m_node_to_node_encryption_options_isValid;

    m_advanced_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_options, json[QString("AdvancedOptions")]);
    m_advanced_options_isSet = !json[QString("AdvancedOptions")].isNull() && m_advanced_options_isValid;

    m_log_publishing_options_isValid = ::OpenAPI::fromJsonValue(m_log_publishing_options, json[QString("LogPublishingOptions")]);
    m_log_publishing_options_isSet = !json[QString("LogPublishingOptions")].isNull() && m_log_publishing_options_isValid;

    m_domain_endpoint_options_isValid = ::OpenAPI::fromJsonValue(m_domain_endpoint_options, json[QString("DomainEndpointOptions")]);
    m_domain_endpoint_options_isSet = !json[QString("DomainEndpointOptions")].isNull() && m_domain_endpoint_options_isValid;

    m_advanced_security_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_security_options, json[QString("AdvancedSecurityOptions")]);
    m_advanced_security_options_isSet = !json[QString("AdvancedSecurityOptions")].isNull() && m_advanced_security_options_isValid;

    m_auto_tune_options_isValid = ::OpenAPI::fromJsonValue(m_auto_tune_options, json[QString("AutoTuneOptions")]);
    m_auto_tune_options_isSet = !json[QString("AutoTuneOptions")].isNull() && m_auto_tune_options_isValid;

    m_change_progress_details_isValid = ::OpenAPI::fromJsonValue(m_change_progress_details, json[QString("ChangeProgressDetails")]);
    m_change_progress_details_isSet = !json[QString("ChangeProgressDetails")].isNull() && m_change_progress_details_isValid;

    m_off_peak_window_options_isValid = ::OpenAPI::fromJsonValue(m_off_peak_window_options, json[QString("OffPeakWindowOptions")]);
    m_off_peak_window_options_isSet = !json[QString("OffPeakWindowOptions")].isNull() && m_off_peak_window_options_isValid;

    m_software_update_options_isValid = ::OpenAPI::fromJsonValue(m_software_update_options, json[QString("SoftwareUpdateOptions")]);
    m_software_update_options_isSet = !json[QString("SoftwareUpdateOptions")].isNull() && m_software_update_options_isValid;
}

QString OAIDescribeDomainConfigResponse_DomainConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDomainConfigResponse_DomainConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_engine_version.isSet()) {
        obj.insert(QString("EngineVersion"), ::OpenAPI::toJsonValue(m_engine_version));
    }
    if (m_cluster_config.isSet()) {
        obj.insert(QString("ClusterConfig"), ::OpenAPI::toJsonValue(m_cluster_config));
    }
    if (m_ebs_options.isSet()) {
        obj.insert(QString("EBSOptions"), ::OpenAPI::toJsonValue(m_ebs_options));
    }
    if (m_access_policies.isSet()) {
        obj.insert(QString("AccessPolicies"), ::OpenAPI::toJsonValue(m_access_policies));
    }
    if (m_snapshot_options.isSet()) {
        obj.insert(QString("SnapshotOptions"), ::OpenAPI::toJsonValue(m_snapshot_options));
    }
    if (m_vpc_options.isSet()) {
        obj.insert(QString("VPCOptions"), ::OpenAPI::toJsonValue(m_vpc_options));
    }
    if (m_cognito_options.isSet()) {
        obj.insert(QString("CognitoOptions"), ::OpenAPI::toJsonValue(m_cognito_options));
    }
    if (m_encryption_at_rest_options.isSet()) {
        obj.insert(QString("EncryptionAtRestOptions"), ::OpenAPI::toJsonValue(m_encryption_at_rest_options));
    }
    if (m_node_to_node_encryption_options.isSet()) {
        obj.insert(QString("NodeToNodeEncryptionOptions"), ::OpenAPI::toJsonValue(m_node_to_node_encryption_options));
    }
    if (m_advanced_options.isSet()) {
        obj.insert(QString("AdvancedOptions"), ::OpenAPI::toJsonValue(m_advanced_options));
    }
    if (m_log_publishing_options.isSet()) {
        obj.insert(QString("LogPublishingOptions"), ::OpenAPI::toJsonValue(m_log_publishing_options));
    }
    if (m_domain_endpoint_options.isSet()) {
        obj.insert(QString("DomainEndpointOptions"), ::OpenAPI::toJsonValue(m_domain_endpoint_options));
    }
    if (m_advanced_security_options.isSet()) {
        obj.insert(QString("AdvancedSecurityOptions"), ::OpenAPI::toJsonValue(m_advanced_security_options));
    }
    if (m_auto_tune_options.isSet()) {
        obj.insert(QString("AutoTuneOptions"), ::OpenAPI::toJsonValue(m_auto_tune_options));
    }
    if (m_change_progress_details.isSet()) {
        obj.insert(QString("ChangeProgressDetails"), ::OpenAPI::toJsonValue(m_change_progress_details));
    }
    if (m_off_peak_window_options.isSet()) {
        obj.insert(QString("OffPeakWindowOptions"), ::OpenAPI::toJsonValue(m_off_peak_window_options));
    }
    if (m_software_update_options.isSet()) {
        obj.insert(QString("SoftwareUpdateOptions"), ::OpenAPI::toJsonValue(m_software_update_options));
    }
    return obj;
}

OAIDomainConfig_EngineVersion OAIDescribeDomainConfigResponse_DomainConfig::getEngineVersion() const {
    return m_engine_version;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setEngineVersion(const OAIDomainConfig_EngineVersion &engine_version) {
    m_engine_version = engine_version;
    m_engine_version_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_engine_version_Set() const{
    return m_engine_version_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_engine_version_Valid() const{
    return m_engine_version_isValid;
}

OAIDomainConfig_ClusterConfig OAIDescribeDomainConfigResponse_DomainConfig::getClusterConfig() const {
    return m_cluster_config;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setClusterConfig(const OAIDomainConfig_ClusterConfig &cluster_config) {
    m_cluster_config = cluster_config;
    m_cluster_config_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_cluster_config_Set() const{
    return m_cluster_config_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_cluster_config_Valid() const{
    return m_cluster_config_isValid;
}

OAIDomainConfig_EBSOptions OAIDescribeDomainConfigResponse_DomainConfig::getEbsOptions() const {
    return m_ebs_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setEbsOptions(const OAIDomainConfig_EBSOptions &ebs_options) {
    m_ebs_options = ebs_options;
    m_ebs_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_ebs_options_Set() const{
    return m_ebs_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_ebs_options_Valid() const{
    return m_ebs_options_isValid;
}

OAIDomainConfig_AccessPolicies OAIDescribeDomainConfigResponse_DomainConfig::getAccessPolicies() const {
    return m_access_policies;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setAccessPolicies(const OAIDomainConfig_AccessPolicies &access_policies) {
    m_access_policies = access_policies;
    m_access_policies_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_access_policies_Set() const{
    return m_access_policies_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_access_policies_Valid() const{
    return m_access_policies_isValid;
}

OAIDomainConfig_SnapshotOptions OAIDescribeDomainConfigResponse_DomainConfig::getSnapshotOptions() const {
    return m_snapshot_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setSnapshotOptions(const OAIDomainConfig_SnapshotOptions &snapshot_options) {
    m_snapshot_options = snapshot_options;
    m_snapshot_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_snapshot_options_Set() const{
    return m_snapshot_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_snapshot_options_Valid() const{
    return m_snapshot_options_isValid;
}

OAIDomainConfig_VPCOptions OAIDescribeDomainConfigResponse_DomainConfig::getVpcOptions() const {
    return m_vpc_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setVpcOptions(const OAIDomainConfig_VPCOptions &vpc_options) {
    m_vpc_options = vpc_options;
    m_vpc_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_vpc_options_Set() const{
    return m_vpc_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_vpc_options_Valid() const{
    return m_vpc_options_isValid;
}

OAIDomainConfig_CognitoOptions OAIDescribeDomainConfigResponse_DomainConfig::getCognitoOptions() const {
    return m_cognito_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setCognitoOptions(const OAIDomainConfig_CognitoOptions &cognito_options) {
    m_cognito_options = cognito_options;
    m_cognito_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_cognito_options_Set() const{
    return m_cognito_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_cognito_options_Valid() const{
    return m_cognito_options_isValid;
}

OAIDomainConfig_EncryptionAtRestOptions OAIDescribeDomainConfigResponse_DomainConfig::getEncryptionAtRestOptions() const {
    return m_encryption_at_rest_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setEncryptionAtRestOptions(const OAIDomainConfig_EncryptionAtRestOptions &encryption_at_rest_options) {
    m_encryption_at_rest_options = encryption_at_rest_options;
    m_encryption_at_rest_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_encryption_at_rest_options_Set() const{
    return m_encryption_at_rest_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_encryption_at_rest_options_Valid() const{
    return m_encryption_at_rest_options_isValid;
}

OAIDomainConfig_NodeToNodeEncryptionOptions OAIDescribeDomainConfigResponse_DomainConfig::getNodeToNodeEncryptionOptions() const {
    return m_node_to_node_encryption_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setNodeToNodeEncryptionOptions(const OAIDomainConfig_NodeToNodeEncryptionOptions &node_to_node_encryption_options) {
    m_node_to_node_encryption_options = node_to_node_encryption_options;
    m_node_to_node_encryption_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_node_to_node_encryption_options_Set() const{
    return m_node_to_node_encryption_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_node_to_node_encryption_options_Valid() const{
    return m_node_to_node_encryption_options_isValid;
}

OAIDomainConfig_AdvancedOptions OAIDescribeDomainConfigResponse_DomainConfig::getAdvancedOptions() const {
    return m_advanced_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setAdvancedOptions(const OAIDomainConfig_AdvancedOptions &advanced_options) {
    m_advanced_options = advanced_options;
    m_advanced_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_advanced_options_Set() const{
    return m_advanced_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_advanced_options_Valid() const{
    return m_advanced_options_isValid;
}

OAIDomainConfig_LogPublishingOptions OAIDescribeDomainConfigResponse_DomainConfig::getLogPublishingOptions() const {
    return m_log_publishing_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setLogPublishingOptions(const OAIDomainConfig_LogPublishingOptions &log_publishing_options) {
    m_log_publishing_options = log_publishing_options;
    m_log_publishing_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_log_publishing_options_Set() const{
    return m_log_publishing_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_log_publishing_options_Valid() const{
    return m_log_publishing_options_isValid;
}

OAIDomainConfig_DomainEndpointOptions OAIDescribeDomainConfigResponse_DomainConfig::getDomainEndpointOptions() const {
    return m_domain_endpoint_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setDomainEndpointOptions(const OAIDomainConfig_DomainEndpointOptions &domain_endpoint_options) {
    m_domain_endpoint_options = domain_endpoint_options;
    m_domain_endpoint_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_domain_endpoint_options_Set() const{
    return m_domain_endpoint_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_domain_endpoint_options_Valid() const{
    return m_domain_endpoint_options_isValid;
}

OAIDomainConfig_AdvancedSecurityOptions OAIDescribeDomainConfigResponse_DomainConfig::getAdvancedSecurityOptions() const {
    return m_advanced_security_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setAdvancedSecurityOptions(const OAIDomainConfig_AdvancedSecurityOptions &advanced_security_options) {
    m_advanced_security_options = advanced_security_options;
    m_advanced_security_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_advanced_security_options_Set() const{
    return m_advanced_security_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_advanced_security_options_Valid() const{
    return m_advanced_security_options_isValid;
}

OAIDomainConfig_AutoTuneOptions OAIDescribeDomainConfigResponse_DomainConfig::getAutoTuneOptions() const {
    return m_auto_tune_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setAutoTuneOptions(const OAIDomainConfig_AutoTuneOptions &auto_tune_options) {
    m_auto_tune_options = auto_tune_options;
    m_auto_tune_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_auto_tune_options_Set() const{
    return m_auto_tune_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_auto_tune_options_Valid() const{
    return m_auto_tune_options_isValid;
}

OAIDomainConfig_ChangeProgressDetails OAIDescribeDomainConfigResponse_DomainConfig::getChangeProgressDetails() const {
    return m_change_progress_details;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setChangeProgressDetails(const OAIDomainConfig_ChangeProgressDetails &change_progress_details) {
    m_change_progress_details = change_progress_details;
    m_change_progress_details_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_change_progress_details_Set() const{
    return m_change_progress_details_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_change_progress_details_Valid() const{
    return m_change_progress_details_isValid;
}

OAIDomainConfig_OffPeakWindowOptions OAIDescribeDomainConfigResponse_DomainConfig::getOffPeakWindowOptions() const {
    return m_off_peak_window_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setOffPeakWindowOptions(const OAIDomainConfig_OffPeakWindowOptions &off_peak_window_options) {
    m_off_peak_window_options = off_peak_window_options;
    m_off_peak_window_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_off_peak_window_options_Set() const{
    return m_off_peak_window_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_off_peak_window_options_Valid() const{
    return m_off_peak_window_options_isValid;
}

OAIDomainConfig_SoftwareUpdateOptions OAIDescribeDomainConfigResponse_DomainConfig::getSoftwareUpdateOptions() const {
    return m_software_update_options;
}
void OAIDescribeDomainConfigResponse_DomainConfig::setSoftwareUpdateOptions(const OAIDomainConfig_SoftwareUpdateOptions &software_update_options) {
    m_software_update_options = software_update_options;
    m_software_update_options_isSet = true;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_software_update_options_Set() const{
    return m_software_update_options_isSet;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::is_software_update_options_Valid() const{
    return m_software_update_options_isValid;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_engine_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cognito_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_at_rest_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_to_node_encryption_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_publishing_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_endpoint_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_security_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_tune_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_progress_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_off_peak_window_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_update_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDomainConfigResponse_DomainConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
