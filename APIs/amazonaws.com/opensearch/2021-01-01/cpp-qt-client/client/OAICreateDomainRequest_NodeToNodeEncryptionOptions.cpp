/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomainRequest_NodeToNodeEncryptionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomainRequest_NodeToNodeEncryptionOptions::OAICreateDomainRequest_NodeToNodeEncryptionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomainRequest_NodeToNodeEncryptionOptions::OAICreateDomainRequest_NodeToNodeEncryptionOptions() {
    this->initializeModel();
}

OAICreateDomainRequest_NodeToNodeEncryptionOptions::~OAICreateDomainRequest_NodeToNodeEncryptionOptions() {}

void OAICreateDomainRequest_NodeToNodeEncryptionOptions::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAICreateDomainRequest_NodeToNodeEncryptionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomainRequest_NodeToNodeEncryptionOptions::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;
}

QString OAICreateDomainRequest_NodeToNodeEncryptionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomainRequest_NodeToNodeEncryptionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

bool OAICreateDomainRequest_NodeToNodeEncryptionOptions::getEnabled() const {
    return m_enabled;
}
void OAICreateDomainRequest_NodeToNodeEncryptionOptions::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAICreateDomainRequest_NodeToNodeEncryptionOptions::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAICreateDomainRequest_NodeToNodeEncryptionOptions::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAICreateDomainRequest_NodeToNodeEncryptionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomainRequest_NodeToNodeEncryptionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
