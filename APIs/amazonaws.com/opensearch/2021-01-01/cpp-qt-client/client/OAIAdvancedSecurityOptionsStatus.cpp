/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvancedSecurityOptionsStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvancedSecurityOptionsStatus::OAIAdvancedSecurityOptionsStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvancedSecurityOptionsStatus::OAIAdvancedSecurityOptionsStatus() {
    this->initializeModel();
}

OAIAdvancedSecurityOptionsStatus::~OAIAdvancedSecurityOptionsStatus() {}

void OAIAdvancedSecurityOptionsStatus::initializeModel() {

    m_options_isSet = false;
    m_options_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAdvancedSecurityOptionsStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvancedSecurityOptionsStatus::fromJsonObject(QJsonObject json) {

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("Options")]);
    m_options_isSet = !json[QString("Options")].isNull() && m_options_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIAdvancedSecurityOptionsStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvancedSecurityOptionsStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_options.isSet()) {
        obj.insert(QString("Options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAdvancedSecurityOptionsStatus_Options OAIAdvancedSecurityOptionsStatus::getOptions() const {
    return m_options;
}
void OAIAdvancedSecurityOptionsStatus::setOptions(const OAIAdvancedSecurityOptionsStatus_Options &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIAdvancedSecurityOptionsStatus::is_options_Set() const{
    return m_options_isSet;
}

bool OAIAdvancedSecurityOptionsStatus::is_options_Valid() const{
    return m_options_isValid;
}

OAIAdvancedSecurityOptionsStatus_Status OAIAdvancedSecurityOptionsStatus::getStatus() const {
    return m_status;
}
void OAIAdvancedSecurityOptionsStatus::setStatus(const OAIAdvancedSecurityOptionsStatus_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAdvancedSecurityOptionsStatus::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAdvancedSecurityOptionsStatus::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAdvancedSecurityOptionsStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvancedSecurityOptionsStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_options_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
