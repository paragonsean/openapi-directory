/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPackageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPackageDetails::OAIPackageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPackageDetails::OAIPackageDetails() {
    this->initializeModel();
}

OAIPackageDetails::~OAIPackageDetails() {}

void OAIPackageDetails::initializeModel() {

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_package_description_isSet = false;
    m_package_description_isValid = false;

    m_package_status_isSet = false;
    m_package_status_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_available_package_version_isSet = false;
    m_available_package_version_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;
}

void OAIPackageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPackageDetails::fromJsonObject(QJsonObject json) {

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageID")]);
    m_package_id_isSet = !json[QString("PackageID")].isNull() && m_package_id_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("PackageType")]);
    m_package_type_isSet = !json[QString("PackageType")].isNull() && m_package_type_isValid;

    m_package_description_isValid = ::OpenAPI::fromJsonValue(m_package_description, json[QString("PackageDescription")]);
    m_package_description_isSet = !json[QString("PackageDescription")].isNull() && m_package_description_isValid;

    m_package_status_isValid = ::OpenAPI::fromJsonValue(m_package_status, json[QString("PackageStatus")]);
    m_package_status_isSet = !json[QString("PackageStatus")].isNull() && m_package_status_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("LastUpdatedAt")]);
    m_last_updated_at_isSet = !json[QString("LastUpdatedAt")].isNull() && m_last_updated_at_isValid;

    m_available_package_version_isValid = ::OpenAPI::fromJsonValue(m_available_package_version, json[QString("AvailablePackageVersion")]);
    m_available_package_version_isSet = !json[QString("AvailablePackageVersion")].isNull() && m_available_package_version_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("ErrorDetails")]);
    m_error_details_isSet = !json[QString("ErrorDetails")].isNull() && m_error_details_isValid;
}

QString OAIPackageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPackageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_package_id_isSet) {
        obj.insert(QString("PackageID"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_package_type.isSet()) {
        obj.insert(QString("PackageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_package_description_isSet) {
        obj.insert(QString("PackageDescription"), ::OpenAPI::toJsonValue(m_package_description));
    }
    if (m_package_status.isSet()) {
        obj.insert(QString("PackageStatus"), ::OpenAPI::toJsonValue(m_package_status));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("LastUpdatedAt"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_available_package_version_isSet) {
        obj.insert(QString("AvailablePackageVersion"), ::OpenAPI::toJsonValue(m_available_package_version));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("ErrorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    return obj;
}

QString OAIPackageDetails::getPackageId() const {
    return m_package_id;
}
void OAIPackageDetails::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIPackageDetails::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIPackageDetails::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIPackageDetails::getPackageName() const {
    return m_package_name;
}
void OAIPackageDetails::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIPackageDetails::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIPackageDetails::is_package_name_Valid() const{
    return m_package_name_isValid;
}

OAIPackageType OAIPackageDetails::getPackageType() const {
    return m_package_type;
}
void OAIPackageDetails::setPackageType(const OAIPackageType &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIPackageDetails::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIPackageDetails::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QString OAIPackageDetails::getPackageDescription() const {
    return m_package_description;
}
void OAIPackageDetails::setPackageDescription(const QString &package_description) {
    m_package_description = package_description;
    m_package_description_isSet = true;
}

bool OAIPackageDetails::is_package_description_Set() const{
    return m_package_description_isSet;
}

bool OAIPackageDetails::is_package_description_Valid() const{
    return m_package_description_isValid;
}

OAIPackageStatus OAIPackageDetails::getPackageStatus() const {
    return m_package_status;
}
void OAIPackageDetails::setPackageStatus(const OAIPackageStatus &package_status) {
    m_package_status = package_status;
    m_package_status_isSet = true;
}

bool OAIPackageDetails::is_package_status_Set() const{
    return m_package_status_isSet;
}

bool OAIPackageDetails::is_package_status_Valid() const{
    return m_package_status_isValid;
}

QDateTime OAIPackageDetails::getCreatedAt() const {
    return m_created_at;
}
void OAIPackageDetails::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPackageDetails::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPackageDetails::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIPackageDetails::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIPackageDetails::setLastUpdatedAt(const QDateTime &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIPackageDetails::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIPackageDetails::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIPackageDetails::getAvailablePackageVersion() const {
    return m_available_package_version;
}
void OAIPackageDetails::setAvailablePackageVersion(const QString &available_package_version) {
    m_available_package_version = available_package_version;
    m_available_package_version_isSet = true;
}

bool OAIPackageDetails::is_available_package_version_Set() const{
    return m_available_package_version_isSet;
}

bool OAIPackageDetails::is_available_package_version_Valid() const{
    return m_available_package_version_isValid;
}

OAIDomainPackageDetails_ErrorDetails OAIPackageDetails::getErrorDetails() const {
    return m_error_details;
}
void OAIPackageDetails::setErrorDetails(const OAIDomainPackageDetails_ErrorDetails &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIPackageDetails::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIPackageDetails::is_error_details_Valid() const{
    return m_error_details_isValid;
}

bool OAIPackageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPackageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
