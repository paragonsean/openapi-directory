/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDryRunProgressResponse_DryRunProgressStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDryRunProgressResponse_DryRunProgressStatus::OAIDescribeDryRunProgressResponse_DryRunProgressStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDryRunProgressResponse_DryRunProgressStatus::OAIDescribeDryRunProgressResponse_DryRunProgressStatus() {
    this->initializeModel();
}

OAIDescribeDryRunProgressResponse_DryRunProgressStatus::~OAIDescribeDryRunProgressResponse_DryRunProgressStatus() {}

void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::initializeModel() {

    m_dry_run_id_isSet = false;
    m_dry_run_id_isValid = false;

    m_dry_run_status_isSet = false;
    m_dry_run_status_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_validation_failures_isSet = false;
    m_validation_failures_isValid = false;
}

void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::fromJsonObject(QJsonObject json) {

    m_dry_run_id_isValid = ::OpenAPI::fromJsonValue(m_dry_run_id, json[QString("DryRunId")]);
    m_dry_run_id_isSet = !json[QString("DryRunId")].isNull() && m_dry_run_id_isValid;

    m_dry_run_status_isValid = ::OpenAPI::fromJsonValue(m_dry_run_status, json[QString("DryRunStatus")]);
    m_dry_run_status_isSet = !json[QString("DryRunStatus")].isNull() && m_dry_run_status_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("UpdateDate")]);
    m_update_date_isSet = !json[QString("UpdateDate")].isNull() && m_update_date_isValid;

    m_validation_failures_isValid = ::OpenAPI::fromJsonValue(m_validation_failures, json[QString("ValidationFailures")]);
    m_validation_failures_isSet = !json[QString("ValidationFailures")].isNull() && m_validation_failures_isValid;
}

QString OAIDescribeDryRunProgressResponse_DryRunProgressStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDryRunProgressResponse_DryRunProgressStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_dry_run_id_isSet) {
        obj.insert(QString("DryRunId"), ::OpenAPI::toJsonValue(m_dry_run_id));
    }
    if (m_dry_run_status_isSet) {
        obj.insert(QString("DryRunStatus"), ::OpenAPI::toJsonValue(m_dry_run_status));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("UpdateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_validation_failures.isSet()) {
        obj.insert(QString("ValidationFailures"), ::OpenAPI::toJsonValue(m_validation_failures));
    }
    return obj;
}

QString OAIDescribeDryRunProgressResponse_DryRunProgressStatus::getDryRunId() const {
    return m_dry_run_id;
}
void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::setDryRunId(const QString &dry_run_id) {
    m_dry_run_id = dry_run_id;
    m_dry_run_id_isSet = true;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_dry_run_id_Set() const{
    return m_dry_run_id_isSet;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_dry_run_id_Valid() const{
    return m_dry_run_id_isValid;
}

QString OAIDescribeDryRunProgressResponse_DryRunProgressStatus::getDryRunStatus() const {
    return m_dry_run_status;
}
void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::setDryRunStatus(const QString &dry_run_status) {
    m_dry_run_status = dry_run_status;
    m_dry_run_status_isSet = true;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_dry_run_status_Set() const{
    return m_dry_run_status_isSet;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_dry_run_status_Valid() const{
    return m_dry_run_status_isValid;
}

QString OAIDescribeDryRunProgressResponse_DryRunProgressStatus::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::setCreationDate(const QString &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIDescribeDryRunProgressResponse_DryRunProgressStatus::getUpdateDate() const {
    return m_update_date;
}
void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::setUpdateDate(const QString &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_update_date_Valid() const{
    return m_update_date_isValid;
}

QList OAIDescribeDryRunProgressResponse_DryRunProgressStatus::getValidationFailures() const {
    return m_validation_failures;
}
void OAIDescribeDryRunProgressResponse_DryRunProgressStatus::setValidationFailures(const QList &validation_failures) {
    m_validation_failures = validation_failures;
    m_validation_failures_isSet = true;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_validation_failures_Set() const{
    return m_validation_failures_isSet;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::is_validation_failures_Valid() const{
    return m_validation_failures_isValid;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dry_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_failures.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDryRunProgressResponse_DryRunProgressStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dry_run_id_isValid && m_dry_run_status_isValid && m_creation_date_isValid && m_update_date_isValid && true;
}

} // namespace OpenAPI
