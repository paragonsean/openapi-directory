/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReservedInstance.h
 *
 * Details of an OpenSearch Reserved Instance.
 */

#ifndef OAIReservedInstance_H
#define OAIReservedInstance_H

#include <QJsonObject>

#include "OAIOpenSearchPartitionInstanceType.h"
#include "OAIReservedInstancePaymentOption.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReservedInstance : public OAIObject {
public:
    OAIReservedInstance();
    OAIReservedInstance(QString json);
    ~OAIReservedInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getReservationName() const;
    void setReservationName(const QString &reservation_name);
    bool is_reservation_name_Set() const;
    bool is_reservation_name_Valid() const;

    QString getReservedInstanceId() const;
    void setReservedInstanceId(const QString &reserved_instance_id);
    bool is_reserved_instance_id_Set() const;
    bool is_reserved_instance_id_Valid() const;

    qint32 getBillingSubscriptionId() const;
    void setBillingSubscriptionId(const qint32 &billing_subscription_id);
    bool is_billing_subscription_id_Set() const;
    bool is_billing_subscription_id_Valid() const;

    QString getReservedInstanceOfferingId() const;
    void setReservedInstanceOfferingId(const QString &reserved_instance_offering_id);
    bool is_reserved_instance_offering_id_Set() const;
    bool is_reserved_instance_offering_id_Valid() const;

    OAIOpenSearchPartitionInstanceType getInstanceType() const;
    void setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getFixedPrice() const;
    void setFixedPrice(const double &fixed_price);
    bool is_fixed_price_Set() const;
    bool is_fixed_price_Valid() const;

    double getUsagePrice() const;
    void setUsagePrice(const double &usage_price);
    bool is_usage_price_Set() const;
    bool is_usage_price_Valid() const;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    qint32 getInstanceCount() const;
    void setInstanceCount(const qint32 &instance_count);
    bool is_instance_count_Set() const;
    bool is_instance_count_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIReservedInstancePaymentOption getPaymentOption() const;
    void setPaymentOption(const OAIReservedInstancePaymentOption &payment_option);
    bool is_payment_option_Set() const;
    bool is_payment_option_Valid() const;

    QList getRecurringCharges() const;
    void setRecurringCharges(const QList &recurring_charges);
    bool is_recurring_charges_Set() const;
    bool is_recurring_charges_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_reservation_name;
    bool m_reservation_name_isSet;
    bool m_reservation_name_isValid;

    QString m_reserved_instance_id;
    bool m_reserved_instance_id_isSet;
    bool m_reserved_instance_id_isValid;

    qint32 m_billing_subscription_id;
    bool m_billing_subscription_id_isSet;
    bool m_billing_subscription_id_isValid;

    QString m_reserved_instance_offering_id;
    bool m_reserved_instance_offering_id_isSet;
    bool m_reserved_instance_offering_id_isValid;

    OAIOpenSearchPartitionInstanceType m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_fixed_price;
    bool m_fixed_price_isSet;
    bool m_fixed_price_isValid;

    double m_usage_price;
    bool m_usage_price_isSet;
    bool m_usage_price_isValid;

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    qint32 m_instance_count;
    bool m_instance_count_isSet;
    bool m_instance_count_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIReservedInstancePaymentOption m_payment_option;
    bool m_payment_option_isSet;
    bool m_payment_option_isValid;

    QList m_recurring_charges;
    bool m_recurring_charges_isSet;
    bool m_recurring_charges_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReservedInstance)

#endif // OAIReservedInstance_H
