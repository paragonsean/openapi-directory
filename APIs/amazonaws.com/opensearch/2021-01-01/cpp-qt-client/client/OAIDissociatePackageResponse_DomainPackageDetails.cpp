/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDissociatePackageResponse_DomainPackageDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDissociatePackageResponse_DomainPackageDetails::OAIDissociatePackageResponse_DomainPackageDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDissociatePackageResponse_DomainPackageDetails::OAIDissociatePackageResponse_DomainPackageDetails() {
    this->initializeModel();
}

OAIDissociatePackageResponse_DomainPackageDetails::~OAIDissociatePackageResponse_DomainPackageDetails() {}

void OAIDissociatePackageResponse_DomainPackageDetails::initializeModel() {

    m_package_id_isSet = false;
    m_package_id_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_package_type_isSet = false;
    m_package_type_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_package_status_isSet = false;
    m_domain_package_status_isValid = false;

    m_package_version_isSet = false;
    m_package_version_isValid = false;

    m_reference_path_isSet = false;
    m_reference_path_isValid = false;

    m_error_details_isSet = false;
    m_error_details_isValid = false;
}

void OAIDissociatePackageResponse_DomainPackageDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDissociatePackageResponse_DomainPackageDetails::fromJsonObject(QJsonObject json) {

    m_package_id_isValid = ::OpenAPI::fromJsonValue(m_package_id, json[QString("PackageID")]);
    m_package_id_isSet = !json[QString("PackageID")].isNull() && m_package_id_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("PackageName")]);
    m_package_name_isSet = !json[QString("PackageName")].isNull() && m_package_name_isValid;

    m_package_type_isValid = ::OpenAPI::fromJsonValue(m_package_type, json[QString("PackageType")]);
    m_package_type_isSet = !json[QString("PackageType")].isNull() && m_package_type_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_domain_package_status_isValid = ::OpenAPI::fromJsonValue(m_domain_package_status, json[QString("DomainPackageStatus")]);
    m_domain_package_status_isSet = !json[QString("DomainPackageStatus")].isNull() && m_domain_package_status_isValid;

    m_package_version_isValid = ::OpenAPI::fromJsonValue(m_package_version, json[QString("PackageVersion")]);
    m_package_version_isSet = !json[QString("PackageVersion")].isNull() && m_package_version_isValid;

    m_reference_path_isValid = ::OpenAPI::fromJsonValue(m_reference_path, json[QString("ReferencePath")]);
    m_reference_path_isSet = !json[QString("ReferencePath")].isNull() && m_reference_path_isValid;

    m_error_details_isValid = ::OpenAPI::fromJsonValue(m_error_details, json[QString("ErrorDetails")]);
    m_error_details_isSet = !json[QString("ErrorDetails")].isNull() && m_error_details_isValid;
}

QString OAIDissociatePackageResponse_DomainPackageDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDissociatePackageResponse_DomainPackageDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_package_id_isSet) {
        obj.insert(QString("PackageID"), ::OpenAPI::toJsonValue(m_package_id));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("PackageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_package_type.isSet()) {
        obj.insert(QString("PackageType"), ::OpenAPI::toJsonValue(m_package_type));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_package_status.isSet()) {
        obj.insert(QString("DomainPackageStatus"), ::OpenAPI::toJsonValue(m_domain_package_status));
    }
    if (m_package_version_isSet) {
        obj.insert(QString("PackageVersion"), ::OpenAPI::toJsonValue(m_package_version));
    }
    if (m_reference_path_isSet) {
        obj.insert(QString("ReferencePath"), ::OpenAPI::toJsonValue(m_reference_path));
    }
    if (m_error_details.isSet()) {
        obj.insert(QString("ErrorDetails"), ::OpenAPI::toJsonValue(m_error_details));
    }
    return obj;
}

QString OAIDissociatePackageResponse_DomainPackageDetails::getPackageId() const {
    return m_package_id;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setPackageId(const QString &package_id) {
    m_package_id = package_id;
    m_package_id_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_id_Set() const{
    return m_package_id_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_id_Valid() const{
    return m_package_id_isValid;
}

QString OAIDissociatePackageResponse_DomainPackageDetails::getPackageName() const {
    return m_package_name;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_name_Valid() const{
    return m_package_name_isValid;
}

OAIPackageType OAIDissociatePackageResponse_DomainPackageDetails::getPackageType() const {
    return m_package_type;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setPackageType(const OAIPackageType &package_type) {
    m_package_type = package_type;
    m_package_type_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_type_Set() const{
    return m_package_type_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_type_Valid() const{
    return m_package_type_isValid;
}

QDateTime OAIDissociatePackageResponse_DomainPackageDetails::getLastUpdated() const {
    return m_last_updated;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDissociatePackageResponse_DomainPackageDetails::getDomainName() const {
    return m_domain_name;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

OAIDomainPackageStatus OAIDissociatePackageResponse_DomainPackageDetails::getDomainPackageStatus() const {
    return m_domain_package_status;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setDomainPackageStatus(const OAIDomainPackageStatus &domain_package_status) {
    m_domain_package_status = domain_package_status;
    m_domain_package_status_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_domain_package_status_Set() const{
    return m_domain_package_status_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_domain_package_status_Valid() const{
    return m_domain_package_status_isValid;
}

QString OAIDissociatePackageResponse_DomainPackageDetails::getPackageVersion() const {
    return m_package_version;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setPackageVersion(const QString &package_version) {
    m_package_version = package_version;
    m_package_version_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_version_Set() const{
    return m_package_version_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_package_version_Valid() const{
    return m_package_version_isValid;
}

QString OAIDissociatePackageResponse_DomainPackageDetails::getReferencePath() const {
    return m_reference_path;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setReferencePath(const QString &reference_path) {
    m_reference_path = reference_path;
    m_reference_path_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_reference_path_Set() const{
    return m_reference_path_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_reference_path_Valid() const{
    return m_reference_path_isValid;
}

OAIDomainPackageDetails_ErrorDetails OAIDissociatePackageResponse_DomainPackageDetails::getErrorDetails() const {
    return m_error_details;
}
void OAIDissociatePackageResponse_DomainPackageDetails::setErrorDetails(const OAIDomainPackageDetails_ErrorDetails &error_details) {
    m_error_details = error_details;
    m_error_details_isSet = true;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_error_details_Set() const{
    return m_error_details_isSet;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::is_error_details_Valid() const{
    return m_error_details_isValid;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_package_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDissociatePackageResponse_DomainPackageDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
