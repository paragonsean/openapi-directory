/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeHistory::OAIUpgradeHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeHistory::OAIUpgradeHistory() {
    this->initializeModel();
}

OAIUpgradeHistory::~OAIUpgradeHistory() {}

void OAIUpgradeHistory::initializeModel() {

    m_upgrade_name_isSet = false;
    m_upgrade_name_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;

    m_upgrade_status_isSet = false;
    m_upgrade_status_isValid = false;

    m_steps_list_isSet = false;
    m_steps_list_isValid = false;
}

void OAIUpgradeHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeHistory::fromJsonObject(QJsonObject json) {

    m_upgrade_name_isValid = ::OpenAPI::fromJsonValue(m_upgrade_name, json[QString("UpgradeName")]);
    m_upgrade_name_isSet = !json[QString("UpgradeName")].isNull() && m_upgrade_name_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("StartTimestamp")]);
    m_start_timestamp_isSet = !json[QString("StartTimestamp")].isNull() && m_start_timestamp_isValid;

    m_upgrade_status_isValid = ::OpenAPI::fromJsonValue(m_upgrade_status, json[QString("UpgradeStatus")]);
    m_upgrade_status_isSet = !json[QString("UpgradeStatus")].isNull() && m_upgrade_status_isValid;

    m_steps_list_isValid = ::OpenAPI::fromJsonValue(m_steps_list, json[QString("StepsList")]);
    m_steps_list_isSet = !json[QString("StepsList")].isNull() && m_steps_list_isValid;
}

QString OAIUpgradeHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_upgrade_name_isSet) {
        obj.insert(QString("UpgradeName"), ::OpenAPI::toJsonValue(m_upgrade_name));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("StartTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    if (m_upgrade_status.isSet()) {
        obj.insert(QString("UpgradeStatus"), ::OpenAPI::toJsonValue(m_upgrade_status));
    }
    if (m_steps_list.isSet()) {
        obj.insert(QString("StepsList"), ::OpenAPI::toJsonValue(m_steps_list));
    }
    return obj;
}

QString OAIUpgradeHistory::getUpgradeName() const {
    return m_upgrade_name;
}
void OAIUpgradeHistory::setUpgradeName(const QString &upgrade_name) {
    m_upgrade_name = upgrade_name;
    m_upgrade_name_isSet = true;
}

bool OAIUpgradeHistory::is_upgrade_name_Set() const{
    return m_upgrade_name_isSet;
}

bool OAIUpgradeHistory::is_upgrade_name_Valid() const{
    return m_upgrade_name_isValid;
}

QDateTime OAIUpgradeHistory::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIUpgradeHistory::setStartTimestamp(const QDateTime &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIUpgradeHistory::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIUpgradeHistory::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

OAIUpgradeStatus OAIUpgradeHistory::getUpgradeStatus() const {
    return m_upgrade_status;
}
void OAIUpgradeHistory::setUpgradeStatus(const OAIUpgradeStatus &upgrade_status) {
    m_upgrade_status = upgrade_status;
    m_upgrade_status_isSet = true;
}

bool OAIUpgradeHistory::is_upgrade_status_Set() const{
    return m_upgrade_status_isSet;
}

bool OAIUpgradeHistory::is_upgrade_status_Valid() const{
    return m_upgrade_status_isValid;
}

QList OAIUpgradeHistory::getStepsList() const {
    return m_steps_list;
}
void OAIUpgradeHistory::setStepsList(const QList &steps_list) {
    m_steps_list = steps_list;
    m_steps_list_isSet = true;
}

bool OAIUpgradeHistory::is_steps_list_Set() const{
    return m_steps_list_isSet;
}

bool OAIUpgradeHistory::is_steps_list_Valid() const{
    return m_steps_list_isValid;
}

bool OAIUpgradeHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upgrade_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
