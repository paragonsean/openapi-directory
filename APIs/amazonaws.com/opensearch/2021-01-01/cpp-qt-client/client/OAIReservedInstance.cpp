/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservedInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservedInstance::OAIReservedInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservedInstance::OAIReservedInstance() {
    this->initializeModel();
}

OAIReservedInstance::~OAIReservedInstance() {}

void OAIReservedInstance::initializeModel() {

    m_reservation_name_isSet = false;
    m_reservation_name_isValid = false;

    m_reserved_instance_id_isSet = false;
    m_reserved_instance_id_isValid = false;

    m_billing_subscription_id_isSet = false;
    m_billing_subscription_id_isValid = false;

    m_reserved_instance_offering_id_isSet = false;
    m_reserved_instance_offering_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fixed_price_isSet = false;
    m_fixed_price_isValid = false;

    m_usage_price_isSet = false;
    m_usage_price_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_recurring_charges_isSet = false;
    m_recurring_charges_isValid = false;
}

void OAIReservedInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservedInstance::fromJsonObject(QJsonObject json) {

    m_reservation_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_name, json[QString("ReservationName")]);
    m_reservation_name_isSet = !json[QString("ReservationName")].isNull() && m_reservation_name_isValid;

    m_reserved_instance_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_id, json[QString("ReservedInstanceId")]);
    m_reserved_instance_id_isSet = !json[QString("ReservedInstanceId")].isNull() && m_reserved_instance_id_isValid;

    m_billing_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_billing_subscription_id, json[QString("BillingSubscriptionId")]);
    m_billing_subscription_id_isSet = !json[QString("BillingSubscriptionId")].isNull() && m_billing_subscription_id_isValid;

    m_reserved_instance_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_offering_id, json[QString("ReservedInstanceOfferingId")]);
    m_reserved_instance_offering_id_isSet = !json[QString("ReservedInstanceOfferingId")].isNull() && m_reserved_instance_offering_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_fixed_price_isValid = ::OpenAPI::fromJsonValue(m_fixed_price, json[QString("FixedPrice")]);
    m_fixed_price_isSet = !json[QString("FixedPrice")].isNull() && m_fixed_price_isValid;

    m_usage_price_isValid = ::OpenAPI::fromJsonValue(m_usage_price, json[QString("UsagePrice")]);
    m_usage_price_isSet = !json[QString("UsagePrice")].isNull() && m_usage_price_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_recurring_charges_isValid = ::OpenAPI::fromJsonValue(m_recurring_charges, json[QString("RecurringCharges")]);
    m_recurring_charges_isSet = !json[QString("RecurringCharges")].isNull() && m_recurring_charges_isValid;
}

QString OAIReservedInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservedInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_reservation_name_isSet) {
        obj.insert(QString("ReservationName"), ::OpenAPI::toJsonValue(m_reservation_name));
    }
    if (m_reserved_instance_id_isSet) {
        obj.insert(QString("ReservedInstanceId"), ::OpenAPI::toJsonValue(m_reserved_instance_id));
    }
    if (m_billing_subscription_id_isSet) {
        obj.insert(QString("BillingSubscriptionId"), ::OpenAPI::toJsonValue(m_billing_subscription_id));
    }
    if (m_reserved_instance_offering_id_isSet) {
        obj.insert(QString("ReservedInstanceOfferingId"), ::OpenAPI::toJsonValue(m_reserved_instance_offering_id));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fixed_price_isSet) {
        obj.insert(QString("FixedPrice"), ::OpenAPI::toJsonValue(m_fixed_price));
    }
    if (m_usage_price_isSet) {
        obj.insert(QString("UsagePrice"), ::OpenAPI::toJsonValue(m_usage_price));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_state_isSet) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_recurring_charges.isSet()) {
        obj.insert(QString("RecurringCharges"), ::OpenAPI::toJsonValue(m_recurring_charges));
    }
    return obj;
}

QString OAIReservedInstance::getReservationName() const {
    return m_reservation_name;
}
void OAIReservedInstance::setReservationName(const QString &reservation_name) {
    m_reservation_name = reservation_name;
    m_reservation_name_isSet = true;
}

bool OAIReservedInstance::is_reservation_name_Set() const{
    return m_reservation_name_isSet;
}

bool OAIReservedInstance::is_reservation_name_Valid() const{
    return m_reservation_name_isValid;
}

QString OAIReservedInstance::getReservedInstanceId() const {
    return m_reserved_instance_id;
}
void OAIReservedInstance::setReservedInstanceId(const QString &reserved_instance_id) {
    m_reserved_instance_id = reserved_instance_id;
    m_reserved_instance_id_isSet = true;
}

bool OAIReservedInstance::is_reserved_instance_id_Set() const{
    return m_reserved_instance_id_isSet;
}

bool OAIReservedInstance::is_reserved_instance_id_Valid() const{
    return m_reserved_instance_id_isValid;
}

qint32 OAIReservedInstance::getBillingSubscriptionId() const {
    return m_billing_subscription_id;
}
void OAIReservedInstance::setBillingSubscriptionId(const qint32 &billing_subscription_id) {
    m_billing_subscription_id = billing_subscription_id;
    m_billing_subscription_id_isSet = true;
}

bool OAIReservedInstance::is_billing_subscription_id_Set() const{
    return m_billing_subscription_id_isSet;
}

bool OAIReservedInstance::is_billing_subscription_id_Valid() const{
    return m_billing_subscription_id_isValid;
}

QString OAIReservedInstance::getReservedInstanceOfferingId() const {
    return m_reserved_instance_offering_id;
}
void OAIReservedInstance::setReservedInstanceOfferingId(const QString &reserved_instance_offering_id) {
    m_reserved_instance_offering_id = reserved_instance_offering_id;
    m_reserved_instance_offering_id_isSet = true;
}

bool OAIReservedInstance::is_reserved_instance_offering_id_Set() const{
    return m_reserved_instance_offering_id_isSet;
}

bool OAIReservedInstance::is_reserved_instance_offering_id_Valid() const{
    return m_reserved_instance_offering_id_isValid;
}

OAIOpenSearchPartitionInstanceType OAIReservedInstance::getInstanceType() const {
    return m_instance_type;
}
void OAIReservedInstance::setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIReservedInstance::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIReservedInstance::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QDateTime OAIReservedInstance::getStartTime() const {
    return m_start_time;
}
void OAIReservedInstance::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIReservedInstance::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIReservedInstance::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIReservedInstance::getDuration() const {
    return m_duration;
}
void OAIReservedInstance::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIReservedInstance::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIReservedInstance::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIReservedInstance::getFixedPrice() const {
    return m_fixed_price;
}
void OAIReservedInstance::setFixedPrice(const double &fixed_price) {
    m_fixed_price = fixed_price;
    m_fixed_price_isSet = true;
}

bool OAIReservedInstance::is_fixed_price_Set() const{
    return m_fixed_price_isSet;
}

bool OAIReservedInstance::is_fixed_price_Valid() const{
    return m_fixed_price_isValid;
}

double OAIReservedInstance::getUsagePrice() const {
    return m_usage_price;
}
void OAIReservedInstance::setUsagePrice(const double &usage_price) {
    m_usage_price = usage_price;
    m_usage_price_isSet = true;
}

bool OAIReservedInstance::is_usage_price_Set() const{
    return m_usage_price_isSet;
}

bool OAIReservedInstance::is_usage_price_Valid() const{
    return m_usage_price_isValid;
}

QString OAIReservedInstance::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReservedInstance::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReservedInstance::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReservedInstance::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

qint32 OAIReservedInstance::getInstanceCount() const {
    return m_instance_count;
}
void OAIReservedInstance::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAIReservedInstance::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAIReservedInstance::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

QString OAIReservedInstance::getState() const {
    return m_state;
}
void OAIReservedInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIReservedInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIReservedInstance::is_state_Valid() const{
    return m_state_isValid;
}

OAIReservedInstancePaymentOption OAIReservedInstance::getPaymentOption() const {
    return m_payment_option;
}
void OAIReservedInstance::setPaymentOption(const OAIReservedInstancePaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIReservedInstance::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIReservedInstance::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

QList OAIReservedInstance::getRecurringCharges() const {
    return m_recurring_charges;
}
void OAIReservedInstance::setRecurringCharges(const QList &recurring_charges) {
    m_recurring_charges = recurring_charges;
    m_recurring_charges_isSet = true;
}

bool OAIReservedInstance::is_recurring_charges_Set() const{
    return m_recurring_charges_isSet;
}

bool OAIReservedInstance::is_recurring_charges_Valid() const{
    return m_recurring_charges_isValid;
}

bool OAIReservedInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reservation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_instance_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservedInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
