/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDomain_request_ClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDomain_request_ClusterConfig::OAICreateDomain_request_ClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDomain_request_ClusterConfig::OAICreateDomain_request_ClusterConfig() {
    this->initializeModel();
}

OAICreateDomain_request_ClusterConfig::~OAICreateDomain_request_ClusterConfig() {}

void OAICreateDomain_request_ClusterConfig::initializeModel() {

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_instance_count_isSet = false;
    m_instance_count_isValid = false;

    m_dedicated_master_enabled_isSet = false;
    m_dedicated_master_enabled_isValid = false;

    m_zone_awareness_enabled_isSet = false;
    m_zone_awareness_enabled_isValid = false;

    m_zone_awareness_config_isSet = false;
    m_zone_awareness_config_isValid = false;

    m_dedicated_master_type_isSet = false;
    m_dedicated_master_type_isValid = false;

    m_dedicated_master_count_isSet = false;
    m_dedicated_master_count_isValid = false;

    m_warm_enabled_isSet = false;
    m_warm_enabled_isValid = false;

    m_warm_type_isSet = false;
    m_warm_type_isValid = false;

    m_warm_count_isSet = false;
    m_warm_count_isValid = false;

    m_cold_storage_options_isSet = false;
    m_cold_storage_options_isValid = false;

    m_multi_az_with_standby_enabled_isSet = false;
    m_multi_az_with_standby_enabled_isValid = false;
}

void OAICreateDomain_request_ClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDomain_request_ClusterConfig::fromJsonObject(QJsonObject json) {

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_instance_count_isValid = ::OpenAPI::fromJsonValue(m_instance_count, json[QString("InstanceCount")]);
    m_instance_count_isSet = !json[QString("InstanceCount")].isNull() && m_instance_count_isValid;

    m_dedicated_master_enabled_isValid = ::OpenAPI::fromJsonValue(m_dedicated_master_enabled, json[QString("DedicatedMasterEnabled")]);
    m_dedicated_master_enabled_isSet = !json[QString("DedicatedMasterEnabled")].isNull() && m_dedicated_master_enabled_isValid;

    m_zone_awareness_enabled_isValid = ::OpenAPI::fromJsonValue(m_zone_awareness_enabled, json[QString("ZoneAwarenessEnabled")]);
    m_zone_awareness_enabled_isSet = !json[QString("ZoneAwarenessEnabled")].isNull() && m_zone_awareness_enabled_isValid;

    m_zone_awareness_config_isValid = ::OpenAPI::fromJsonValue(m_zone_awareness_config, json[QString("ZoneAwarenessConfig")]);
    m_zone_awareness_config_isSet = !json[QString("ZoneAwarenessConfig")].isNull() && m_zone_awareness_config_isValid;

    m_dedicated_master_type_isValid = ::OpenAPI::fromJsonValue(m_dedicated_master_type, json[QString("DedicatedMasterType")]);
    m_dedicated_master_type_isSet = !json[QString("DedicatedMasterType")].isNull() && m_dedicated_master_type_isValid;

    m_dedicated_master_count_isValid = ::OpenAPI::fromJsonValue(m_dedicated_master_count, json[QString("DedicatedMasterCount")]);
    m_dedicated_master_count_isSet = !json[QString("DedicatedMasterCount")].isNull() && m_dedicated_master_count_isValid;

    m_warm_enabled_isValid = ::OpenAPI::fromJsonValue(m_warm_enabled, json[QString("WarmEnabled")]);
    m_warm_enabled_isSet = !json[QString("WarmEnabled")].isNull() && m_warm_enabled_isValid;

    m_warm_type_isValid = ::OpenAPI::fromJsonValue(m_warm_type, json[QString("WarmType")]);
    m_warm_type_isSet = !json[QString("WarmType")].isNull() && m_warm_type_isValid;

    m_warm_count_isValid = ::OpenAPI::fromJsonValue(m_warm_count, json[QString("WarmCount")]);
    m_warm_count_isSet = !json[QString("WarmCount")].isNull() && m_warm_count_isValid;

    m_cold_storage_options_isValid = ::OpenAPI::fromJsonValue(m_cold_storage_options, json[QString("ColdStorageOptions")]);
    m_cold_storage_options_isSet = !json[QString("ColdStorageOptions")].isNull() && m_cold_storage_options_isValid;

    m_multi_az_with_standby_enabled_isValid = ::OpenAPI::fromJsonValue(m_multi_az_with_standby_enabled, json[QString("MultiAZWithStandbyEnabled")]);
    m_multi_az_with_standby_enabled_isSet = !json[QString("MultiAZWithStandbyEnabled")].isNull() && m_multi_az_with_standby_enabled_isValid;
}

QString OAICreateDomain_request_ClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDomain_request_ClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_instance_count_isSet) {
        obj.insert(QString("InstanceCount"), ::OpenAPI::toJsonValue(m_instance_count));
    }
    if (m_dedicated_master_enabled_isSet) {
        obj.insert(QString("DedicatedMasterEnabled"), ::OpenAPI::toJsonValue(m_dedicated_master_enabled));
    }
    if (m_zone_awareness_enabled_isSet) {
        obj.insert(QString("ZoneAwarenessEnabled"), ::OpenAPI::toJsonValue(m_zone_awareness_enabled));
    }
    if (m_zone_awareness_config.isSet()) {
        obj.insert(QString("ZoneAwarenessConfig"), ::OpenAPI::toJsonValue(m_zone_awareness_config));
    }
    if (m_dedicated_master_type.isSet()) {
        obj.insert(QString("DedicatedMasterType"), ::OpenAPI::toJsonValue(m_dedicated_master_type));
    }
    if (m_dedicated_master_count_isSet) {
        obj.insert(QString("DedicatedMasterCount"), ::OpenAPI::toJsonValue(m_dedicated_master_count));
    }
    if (m_warm_enabled_isSet) {
        obj.insert(QString("WarmEnabled"), ::OpenAPI::toJsonValue(m_warm_enabled));
    }
    if (m_warm_type.isSet()) {
        obj.insert(QString("WarmType"), ::OpenAPI::toJsonValue(m_warm_type));
    }
    if (m_warm_count_isSet) {
        obj.insert(QString("WarmCount"), ::OpenAPI::toJsonValue(m_warm_count));
    }
    if (m_cold_storage_options.isSet()) {
        obj.insert(QString("ColdStorageOptions"), ::OpenAPI::toJsonValue(m_cold_storage_options));
    }
    if (m_multi_az_with_standby_enabled_isSet) {
        obj.insert(QString("MultiAZWithStandbyEnabled"), ::OpenAPI::toJsonValue(m_multi_az_with_standby_enabled));
    }
    return obj;
}

OAIOpenSearchPartitionInstanceType OAICreateDomain_request_ClusterConfig::getInstanceType() const {
    return m_instance_type;
}
void OAICreateDomain_request_ClusterConfig::setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

qint32 OAICreateDomain_request_ClusterConfig::getInstanceCount() const {
    return m_instance_count;
}
void OAICreateDomain_request_ClusterConfig::setInstanceCount(const qint32 &instance_count) {
    m_instance_count = instance_count;
    m_instance_count_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_instance_count_Set() const{
    return m_instance_count_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_instance_count_Valid() const{
    return m_instance_count_isValid;
}

bool OAICreateDomain_request_ClusterConfig::getDedicatedMasterEnabled() const {
    return m_dedicated_master_enabled;
}
void OAICreateDomain_request_ClusterConfig::setDedicatedMasterEnabled(const bool &dedicated_master_enabled) {
    m_dedicated_master_enabled = dedicated_master_enabled;
    m_dedicated_master_enabled_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_dedicated_master_enabled_Set() const{
    return m_dedicated_master_enabled_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_dedicated_master_enabled_Valid() const{
    return m_dedicated_master_enabled_isValid;
}

bool OAICreateDomain_request_ClusterConfig::getZoneAwarenessEnabled() const {
    return m_zone_awareness_enabled;
}
void OAICreateDomain_request_ClusterConfig::setZoneAwarenessEnabled(const bool &zone_awareness_enabled) {
    m_zone_awareness_enabled = zone_awareness_enabled;
    m_zone_awareness_enabled_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_zone_awareness_enabled_Set() const{
    return m_zone_awareness_enabled_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_zone_awareness_enabled_Valid() const{
    return m_zone_awareness_enabled_isValid;
}

OAICreateDomain_request_ClusterConfig_ZoneAwarenessConfig OAICreateDomain_request_ClusterConfig::getZoneAwarenessConfig() const {
    return m_zone_awareness_config;
}
void OAICreateDomain_request_ClusterConfig::setZoneAwarenessConfig(const OAICreateDomain_request_ClusterConfig_ZoneAwarenessConfig &zone_awareness_config) {
    m_zone_awareness_config = zone_awareness_config;
    m_zone_awareness_config_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_zone_awareness_config_Set() const{
    return m_zone_awareness_config_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_zone_awareness_config_Valid() const{
    return m_zone_awareness_config_isValid;
}

OAIOpenSearchPartitionInstanceType OAICreateDomain_request_ClusterConfig::getDedicatedMasterType() const {
    return m_dedicated_master_type;
}
void OAICreateDomain_request_ClusterConfig::setDedicatedMasterType(const OAIOpenSearchPartitionInstanceType &dedicated_master_type) {
    m_dedicated_master_type = dedicated_master_type;
    m_dedicated_master_type_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_dedicated_master_type_Set() const{
    return m_dedicated_master_type_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_dedicated_master_type_Valid() const{
    return m_dedicated_master_type_isValid;
}

qint32 OAICreateDomain_request_ClusterConfig::getDedicatedMasterCount() const {
    return m_dedicated_master_count;
}
void OAICreateDomain_request_ClusterConfig::setDedicatedMasterCount(const qint32 &dedicated_master_count) {
    m_dedicated_master_count = dedicated_master_count;
    m_dedicated_master_count_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_dedicated_master_count_Set() const{
    return m_dedicated_master_count_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_dedicated_master_count_Valid() const{
    return m_dedicated_master_count_isValid;
}

bool OAICreateDomain_request_ClusterConfig::getWarmEnabled() const {
    return m_warm_enabled;
}
void OAICreateDomain_request_ClusterConfig::setWarmEnabled(const bool &warm_enabled) {
    m_warm_enabled = warm_enabled;
    m_warm_enabled_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_warm_enabled_Set() const{
    return m_warm_enabled_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_warm_enabled_Valid() const{
    return m_warm_enabled_isValid;
}

OAIOpenSearchWarmPartitionInstanceType OAICreateDomain_request_ClusterConfig::getWarmType() const {
    return m_warm_type;
}
void OAICreateDomain_request_ClusterConfig::setWarmType(const OAIOpenSearchWarmPartitionInstanceType &warm_type) {
    m_warm_type = warm_type;
    m_warm_type_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_warm_type_Set() const{
    return m_warm_type_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_warm_type_Valid() const{
    return m_warm_type_isValid;
}

qint32 OAICreateDomain_request_ClusterConfig::getWarmCount() const {
    return m_warm_count;
}
void OAICreateDomain_request_ClusterConfig::setWarmCount(const qint32 &warm_count) {
    m_warm_count = warm_count;
    m_warm_count_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_warm_count_Set() const{
    return m_warm_count_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_warm_count_Valid() const{
    return m_warm_count_isValid;
}

OAICreateDomain_request_ClusterConfig_ColdStorageOptions OAICreateDomain_request_ClusterConfig::getColdStorageOptions() const {
    return m_cold_storage_options;
}
void OAICreateDomain_request_ClusterConfig::setColdStorageOptions(const OAICreateDomain_request_ClusterConfig_ColdStorageOptions &cold_storage_options) {
    m_cold_storage_options = cold_storage_options;
    m_cold_storage_options_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_cold_storage_options_Set() const{
    return m_cold_storage_options_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_cold_storage_options_Valid() const{
    return m_cold_storage_options_isValid;
}

bool OAICreateDomain_request_ClusterConfig::getMultiAzWithStandbyEnabled() const {
    return m_multi_az_with_standby_enabled;
}
void OAICreateDomain_request_ClusterConfig::setMultiAzWithStandbyEnabled(const bool &multi_az_with_standby_enabled) {
    m_multi_az_with_standby_enabled = multi_az_with_standby_enabled;
    m_multi_az_with_standby_enabled_isSet = true;
}

bool OAICreateDomain_request_ClusterConfig::is_multi_az_with_standby_enabled_Set() const{
    return m_multi_az_with_standby_enabled_isSet;
}

bool OAICreateDomain_request_ClusterConfig::is_multi_az_with_standby_enabled_Valid() const{
    return m_multi_az_with_standby_enabled_isValid;
}

bool OAICreateDomain_request_ClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_master_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_awareness_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_awareness_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_master_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_master_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cold_storage_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_az_with_standby_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDomain_request_ClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
