/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceTypeDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceTypeDetails::OAIInstanceTypeDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceTypeDetails::OAIInstanceTypeDetails() {
    this->initializeModel();
}

OAIInstanceTypeDetails::~OAIInstanceTypeDetails() {}

void OAIInstanceTypeDetails::initializeModel() {

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_encryption_enabled_isSet = false;
    m_encryption_enabled_isValid = false;

    m_cognito_enabled_isSet = false;
    m_cognito_enabled_isValid = false;

    m_app_logs_enabled_isSet = false;
    m_app_logs_enabled_isValid = false;

    m_advanced_security_enabled_isSet = false;
    m_advanced_security_enabled_isValid = false;

    m_warm_enabled_isSet = false;
    m_warm_enabled_isValid = false;

    m_instance_role_isSet = false;
    m_instance_role_isValid = false;

    m_availability_zones_isSet = false;
    m_availability_zones_isValid = false;
}

void OAIInstanceTypeDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceTypeDetails::fromJsonObject(QJsonObject json) {

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_encryption_enabled, json[QString("EncryptionEnabled")]);
    m_encryption_enabled_isSet = !json[QString("EncryptionEnabled")].isNull() && m_encryption_enabled_isValid;

    m_cognito_enabled_isValid = ::OpenAPI::fromJsonValue(m_cognito_enabled, json[QString("CognitoEnabled")]);
    m_cognito_enabled_isSet = !json[QString("CognitoEnabled")].isNull() && m_cognito_enabled_isValid;

    m_app_logs_enabled_isValid = ::OpenAPI::fromJsonValue(m_app_logs_enabled, json[QString("AppLogsEnabled")]);
    m_app_logs_enabled_isSet = !json[QString("AppLogsEnabled")].isNull() && m_app_logs_enabled_isValid;

    m_advanced_security_enabled_isValid = ::OpenAPI::fromJsonValue(m_advanced_security_enabled, json[QString("AdvancedSecurityEnabled")]);
    m_advanced_security_enabled_isSet = !json[QString("AdvancedSecurityEnabled")].isNull() && m_advanced_security_enabled_isValid;

    m_warm_enabled_isValid = ::OpenAPI::fromJsonValue(m_warm_enabled, json[QString("WarmEnabled")]);
    m_warm_enabled_isSet = !json[QString("WarmEnabled")].isNull() && m_warm_enabled_isValid;

    m_instance_role_isValid = ::OpenAPI::fromJsonValue(m_instance_role, json[QString("InstanceRole")]);
    m_instance_role_isSet = !json[QString("InstanceRole")].isNull() && m_instance_role_isValid;

    m_availability_zones_isValid = ::OpenAPI::fromJsonValue(m_availability_zones, json[QString("AvailabilityZones")]);
    m_availability_zones_isSet = !json[QString("AvailabilityZones")].isNull() && m_availability_zones_isValid;
}

QString OAIInstanceTypeDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceTypeDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_encryption_enabled_isSet) {
        obj.insert(QString("EncryptionEnabled"), ::OpenAPI::toJsonValue(m_encryption_enabled));
    }
    if (m_cognito_enabled_isSet) {
        obj.insert(QString("CognitoEnabled"), ::OpenAPI::toJsonValue(m_cognito_enabled));
    }
    if (m_app_logs_enabled_isSet) {
        obj.insert(QString("AppLogsEnabled"), ::OpenAPI::toJsonValue(m_app_logs_enabled));
    }
    if (m_advanced_security_enabled_isSet) {
        obj.insert(QString("AdvancedSecurityEnabled"), ::OpenAPI::toJsonValue(m_advanced_security_enabled));
    }
    if (m_warm_enabled_isSet) {
        obj.insert(QString("WarmEnabled"), ::OpenAPI::toJsonValue(m_warm_enabled));
    }
    if (m_instance_role.isSet()) {
        obj.insert(QString("InstanceRole"), ::OpenAPI::toJsonValue(m_instance_role));
    }
    if (m_availability_zones.isSet()) {
        obj.insert(QString("AvailabilityZones"), ::OpenAPI::toJsonValue(m_availability_zones));
    }
    return obj;
}

OAIOpenSearchPartitionInstanceType OAIInstanceTypeDetails::getInstanceType() const {
    return m_instance_type;
}
void OAIInstanceTypeDetails::setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstanceTypeDetails::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstanceTypeDetails::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

bool OAIInstanceTypeDetails::getEncryptionEnabled() const {
    return m_encryption_enabled;
}
void OAIInstanceTypeDetails::setEncryptionEnabled(const bool &encryption_enabled) {
    m_encryption_enabled = encryption_enabled;
    m_encryption_enabled_isSet = true;
}

bool OAIInstanceTypeDetails::is_encryption_enabled_Set() const{
    return m_encryption_enabled_isSet;
}

bool OAIInstanceTypeDetails::is_encryption_enabled_Valid() const{
    return m_encryption_enabled_isValid;
}

bool OAIInstanceTypeDetails::getCognitoEnabled() const {
    return m_cognito_enabled;
}
void OAIInstanceTypeDetails::setCognitoEnabled(const bool &cognito_enabled) {
    m_cognito_enabled = cognito_enabled;
    m_cognito_enabled_isSet = true;
}

bool OAIInstanceTypeDetails::is_cognito_enabled_Set() const{
    return m_cognito_enabled_isSet;
}

bool OAIInstanceTypeDetails::is_cognito_enabled_Valid() const{
    return m_cognito_enabled_isValid;
}

bool OAIInstanceTypeDetails::getAppLogsEnabled() const {
    return m_app_logs_enabled;
}
void OAIInstanceTypeDetails::setAppLogsEnabled(const bool &app_logs_enabled) {
    m_app_logs_enabled = app_logs_enabled;
    m_app_logs_enabled_isSet = true;
}

bool OAIInstanceTypeDetails::is_app_logs_enabled_Set() const{
    return m_app_logs_enabled_isSet;
}

bool OAIInstanceTypeDetails::is_app_logs_enabled_Valid() const{
    return m_app_logs_enabled_isValid;
}

bool OAIInstanceTypeDetails::getAdvancedSecurityEnabled() const {
    return m_advanced_security_enabled;
}
void OAIInstanceTypeDetails::setAdvancedSecurityEnabled(const bool &advanced_security_enabled) {
    m_advanced_security_enabled = advanced_security_enabled;
    m_advanced_security_enabled_isSet = true;
}

bool OAIInstanceTypeDetails::is_advanced_security_enabled_Set() const{
    return m_advanced_security_enabled_isSet;
}

bool OAIInstanceTypeDetails::is_advanced_security_enabled_Valid() const{
    return m_advanced_security_enabled_isValid;
}

bool OAIInstanceTypeDetails::getWarmEnabled() const {
    return m_warm_enabled;
}
void OAIInstanceTypeDetails::setWarmEnabled(const bool &warm_enabled) {
    m_warm_enabled = warm_enabled;
    m_warm_enabled_isSet = true;
}

bool OAIInstanceTypeDetails::is_warm_enabled_Set() const{
    return m_warm_enabled_isSet;
}

bool OAIInstanceTypeDetails::is_warm_enabled_Valid() const{
    return m_warm_enabled_isValid;
}

QList OAIInstanceTypeDetails::getInstanceRole() const {
    return m_instance_role;
}
void OAIInstanceTypeDetails::setInstanceRole(const QList &instance_role) {
    m_instance_role = instance_role;
    m_instance_role_isSet = true;
}

bool OAIInstanceTypeDetails::is_instance_role_Set() const{
    return m_instance_role_isSet;
}

bool OAIInstanceTypeDetails::is_instance_role_Valid() const{
    return m_instance_role_isValid;
}

QList OAIInstanceTypeDetails::getAvailabilityZones() const {
    return m_availability_zones;
}
void OAIInstanceTypeDetails::setAvailabilityZones(const QList &availability_zones) {
    m_availability_zones = availability_zones;
    m_availability_zones_isSet = true;
}

bool OAIInstanceTypeDetails::is_availability_zones_Set() const{
    return m_availability_zones_isSet;
}

bool OAIInstanceTypeDetails::is_availability_zones_Valid() const{
    return m_availability_zones_isValid;
}

bool OAIInstanceTypeDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cognito_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_logs_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_security_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warm_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zones.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceTypeDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
