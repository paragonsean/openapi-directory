/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeInboundConnectionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeInboundConnectionsRequest::OAIDescribeInboundConnectionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeInboundConnectionsRequest::OAIDescribeInboundConnectionsRequest() {
    this->initializeModel();
}

OAIDescribeInboundConnectionsRequest::~OAIDescribeInboundConnectionsRequest() {}

void OAIDescribeInboundConnectionsRequest::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeInboundConnectionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeInboundConnectionsRequest::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeInboundConnectionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeInboundConnectionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeInboundConnectionsRequest::getFilters() const {
    return m_filters;
}
void OAIDescribeInboundConnectionsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeInboundConnectionsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeInboundConnectionsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIDescribeInboundConnectionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeInboundConnectionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeInboundConnectionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeInboundConnectionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeInboundConnectionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeInboundConnectionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeInboundConnectionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeInboundConnectionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeInboundConnectionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeInboundConnectionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
