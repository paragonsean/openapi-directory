/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeDomainRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeDomainRequest::OAIUpgradeDomainRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeDomainRequest::OAIUpgradeDomainRequest() {
    this->initializeModel();
}

OAIUpgradeDomainRequest::~OAIUpgradeDomainRequest() {}

void OAIUpgradeDomainRequest::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_target_version_isSet = false;
    m_target_version_isValid = false;

    m_perform_check_only_isSet = false;
    m_perform_check_only_isValid = false;

    m_advanced_options_isSet = false;
    m_advanced_options_isValid = false;
}

void OAIUpgradeDomainRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeDomainRequest::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_target_version_isValid = ::OpenAPI::fromJsonValue(m_target_version, json[QString("TargetVersion")]);
    m_target_version_isSet = !json[QString("TargetVersion")].isNull() && m_target_version_isValid;

    m_perform_check_only_isValid = ::OpenAPI::fromJsonValue(m_perform_check_only, json[QString("PerformCheckOnly")]);
    m_perform_check_only_isSet = !json[QString("PerformCheckOnly")].isNull() && m_perform_check_only_isValid;

    m_advanced_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_options, json[QString("AdvancedOptions")]);
    m_advanced_options_isSet = !json[QString("AdvancedOptions")].isNull() && m_advanced_options_isValid;
}

QString OAIUpgradeDomainRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeDomainRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_target_version_isSet) {
        obj.insert(QString("TargetVersion"), ::OpenAPI::toJsonValue(m_target_version));
    }
    if (m_perform_check_only_isSet) {
        obj.insert(QString("PerformCheckOnly"), ::OpenAPI::toJsonValue(m_perform_check_only));
    }
    if (m_advanced_options.isSet()) {
        obj.insert(QString("AdvancedOptions"), ::OpenAPI::toJsonValue(m_advanced_options));
    }
    return obj;
}

QString OAIUpgradeDomainRequest::getDomainName() const {
    return m_domain_name;
}
void OAIUpgradeDomainRequest::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIUpgradeDomainRequest::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIUpgradeDomainRequest::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIUpgradeDomainRequest::getTargetVersion() const {
    return m_target_version;
}
void OAIUpgradeDomainRequest::setTargetVersion(const QString &target_version) {
    m_target_version = target_version;
    m_target_version_isSet = true;
}

bool OAIUpgradeDomainRequest::is_target_version_Set() const{
    return m_target_version_isSet;
}

bool OAIUpgradeDomainRequest::is_target_version_Valid() const{
    return m_target_version_isValid;
}

bool OAIUpgradeDomainRequest::getPerformCheckOnly() const {
    return m_perform_check_only;
}
void OAIUpgradeDomainRequest::setPerformCheckOnly(const bool &perform_check_only) {
    m_perform_check_only = perform_check_only;
    m_perform_check_only_isSet = true;
}

bool OAIUpgradeDomainRequest::is_perform_check_only_Set() const{
    return m_perform_check_only_isSet;
}

bool OAIUpgradeDomainRequest::is_perform_check_only_Valid() const{
    return m_perform_check_only_isValid;
}

QMap OAIUpgradeDomainRequest::getAdvancedOptions() const {
    return m_advanced_options;
}
void OAIUpgradeDomainRequest::setAdvancedOptions(const QMap &advanced_options) {
    m_advanced_options = advanced_options;
    m_advanced_options_isSet = true;
}

bool OAIUpgradeDomainRequest::is_advanced_options_Set() const{
    return m_advanced_options_isSet;
}

bool OAIUpgradeDomainRequest::is_advanced_options_Valid() const{
    return m_advanced_options_isValid;
}

bool OAIUpgradeDomainRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_check_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeDomainRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_domain_name_isValid && m_target_version_isValid && true;
}

} // namespace OpenAPI
