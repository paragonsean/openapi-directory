/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReservedInstanceOffering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReservedInstanceOffering::OAIReservedInstanceOffering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReservedInstanceOffering::OAIReservedInstanceOffering() {
    this->initializeModel();
}

OAIReservedInstanceOffering::~OAIReservedInstanceOffering() {}

void OAIReservedInstanceOffering::initializeModel() {

    m_reserved_instance_offering_id_isSet = false;
    m_reserved_instance_offering_id_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_fixed_price_isSet = false;
    m_fixed_price_isValid = false;

    m_usage_price_isSet = false;
    m_usage_price_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_recurring_charges_isSet = false;
    m_recurring_charges_isValid = false;
}

void OAIReservedInstanceOffering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReservedInstanceOffering::fromJsonObject(QJsonObject json) {

    m_reserved_instance_offering_id_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_offering_id, json[QString("ReservedInstanceOfferingId")]);
    m_reserved_instance_offering_id_isSet = !json[QString("ReservedInstanceOfferingId")].isNull() && m_reserved_instance_offering_id_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("InstanceType")]);
    m_instance_type_isSet = !json[QString("InstanceType")].isNull() && m_instance_type_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_fixed_price_isValid = ::OpenAPI::fromJsonValue(m_fixed_price, json[QString("FixedPrice")]);
    m_fixed_price_isSet = !json[QString("FixedPrice")].isNull() && m_fixed_price_isValid;

    m_usage_price_isValid = ::OpenAPI::fromJsonValue(m_usage_price, json[QString("UsagePrice")]);
    m_usage_price_isSet = !json[QString("UsagePrice")].isNull() && m_usage_price_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("CurrencyCode")]);
    m_currency_code_isSet = !json[QString("CurrencyCode")].isNull() && m_currency_code_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("PaymentOption")]);
    m_payment_option_isSet = !json[QString("PaymentOption")].isNull() && m_payment_option_isValid;

    m_recurring_charges_isValid = ::OpenAPI::fromJsonValue(m_recurring_charges, json[QString("RecurringCharges")]);
    m_recurring_charges_isSet = !json[QString("RecurringCharges")].isNull() && m_recurring_charges_isValid;
}

QString OAIReservedInstanceOffering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReservedInstanceOffering::asJsonObject() const {
    QJsonObject obj;
    if (m_reserved_instance_offering_id_isSet) {
        obj.insert(QString("ReservedInstanceOfferingId"), ::OpenAPI::toJsonValue(m_reserved_instance_offering_id));
    }
    if (m_instance_type.isSet()) {
        obj.insert(QString("InstanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_fixed_price_isSet) {
        obj.insert(QString("FixedPrice"), ::OpenAPI::toJsonValue(m_fixed_price));
    }
    if (m_usage_price_isSet) {
        obj.insert(QString("UsagePrice"), ::OpenAPI::toJsonValue(m_usage_price));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("CurrencyCode"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("PaymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_recurring_charges.isSet()) {
        obj.insert(QString("RecurringCharges"), ::OpenAPI::toJsonValue(m_recurring_charges));
    }
    return obj;
}

QString OAIReservedInstanceOffering::getReservedInstanceOfferingId() const {
    return m_reserved_instance_offering_id;
}
void OAIReservedInstanceOffering::setReservedInstanceOfferingId(const QString &reserved_instance_offering_id) {
    m_reserved_instance_offering_id = reserved_instance_offering_id;
    m_reserved_instance_offering_id_isSet = true;
}

bool OAIReservedInstanceOffering::is_reserved_instance_offering_id_Set() const{
    return m_reserved_instance_offering_id_isSet;
}

bool OAIReservedInstanceOffering::is_reserved_instance_offering_id_Valid() const{
    return m_reserved_instance_offering_id_isValid;
}

OAIOpenSearchPartitionInstanceType OAIReservedInstanceOffering::getInstanceType() const {
    return m_instance_type;
}
void OAIReservedInstanceOffering::setInstanceType(const OAIOpenSearchPartitionInstanceType &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIReservedInstanceOffering::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIReservedInstanceOffering::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

qint32 OAIReservedInstanceOffering::getDuration() const {
    return m_duration;
}
void OAIReservedInstanceOffering::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIReservedInstanceOffering::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIReservedInstanceOffering::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIReservedInstanceOffering::getFixedPrice() const {
    return m_fixed_price;
}
void OAIReservedInstanceOffering::setFixedPrice(const double &fixed_price) {
    m_fixed_price = fixed_price;
    m_fixed_price_isSet = true;
}

bool OAIReservedInstanceOffering::is_fixed_price_Set() const{
    return m_fixed_price_isSet;
}

bool OAIReservedInstanceOffering::is_fixed_price_Valid() const{
    return m_fixed_price_isValid;
}

double OAIReservedInstanceOffering::getUsagePrice() const {
    return m_usage_price;
}
void OAIReservedInstanceOffering::setUsagePrice(const double &usage_price) {
    m_usage_price = usage_price;
    m_usage_price_isSet = true;
}

bool OAIReservedInstanceOffering::is_usage_price_Set() const{
    return m_usage_price_isSet;
}

bool OAIReservedInstanceOffering::is_usage_price_Valid() const{
    return m_usage_price_isValid;
}

QString OAIReservedInstanceOffering::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReservedInstanceOffering::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReservedInstanceOffering::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReservedInstanceOffering::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

OAIReservedInstancePaymentOption OAIReservedInstanceOffering::getPaymentOption() const {
    return m_payment_option;
}
void OAIReservedInstanceOffering::setPaymentOption(const OAIReservedInstancePaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIReservedInstanceOffering::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIReservedInstanceOffering::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

QList OAIReservedInstanceOffering::getRecurringCharges() const {
    return m_recurring_charges;
}
void OAIReservedInstanceOffering::setRecurringCharges(const QList &recurring_charges) {
    m_recurring_charges = recurring_charges;
    m_recurring_charges_isSet = true;
}

bool OAIReservedInstanceOffering::is_recurring_charges_Set() const{
    return m_recurring_charges_isSet;
}

bool OAIReservedInstanceOffering::is_recurring_charges_Valid() const{
    return m_recurring_charges_isValid;
}

bool OAIReservedInstanceOffering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reserved_instance_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReservedInstanceOffering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
