/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDomainHealthResponse.h
 *
 * The result of a &lt;code&gt;DescribeDomainHealth&lt;/code&gt; request. Contains health information for the requested domain.
 */

#ifndef OAIDescribeDomainHealthResponse_H
#define OAIDescribeDomainHealthResponse_H

#include <QJsonObject>

#include "OAIDomainHealth.h"
#include "OAIDomainState.h"
#include "OAIMasterNodeStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeDomainHealthResponse : public OAIObject {
public:
    OAIDescribeDomainHealthResponse();
    OAIDescribeDomainHealthResponse(QString json);
    ~OAIDescribeDomainHealthResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDomainState getDomainState() const;
    void setDomainState(const OAIDomainState &domain_state);
    bool is_domain_state_Set() const;
    bool is_domain_state_Valid() const;

    QString getAvailabilityZoneCount() const;
    void setAvailabilityZoneCount(const QString &availability_zone_count);
    bool is_availability_zone_count_Set() const;
    bool is_availability_zone_count_Valid() const;

    QString getActiveAvailabilityZoneCount() const;
    void setActiveAvailabilityZoneCount(const QString &active_availability_zone_count);
    bool is_active_availability_zone_count_Set() const;
    bool is_active_availability_zone_count_Valid() const;

    QString getStandByAvailabilityZoneCount() const;
    void setStandByAvailabilityZoneCount(const QString &stand_by_availability_zone_count);
    bool is_stand_by_availability_zone_count_Set() const;
    bool is_stand_by_availability_zone_count_Valid() const;

    QString getDataNodeCount() const;
    void setDataNodeCount(const QString &data_node_count);
    bool is_data_node_count_Set() const;
    bool is_data_node_count_Valid() const;

    bool getDedicatedMaster() const;
    void setDedicatedMaster(const bool &dedicated_master);
    bool is_dedicated_master_Set() const;
    bool is_dedicated_master_Valid() const;

    QString getMasterEligibleNodeCount() const;
    void setMasterEligibleNodeCount(const QString &master_eligible_node_count);
    bool is_master_eligible_node_count_Set() const;
    bool is_master_eligible_node_count_Valid() const;

    QString getWarmNodeCount() const;
    void setWarmNodeCount(const QString &warm_node_count);
    bool is_warm_node_count_Set() const;
    bool is_warm_node_count_Valid() const;

    OAIMasterNodeStatus getMasterNode() const;
    void setMasterNode(const OAIMasterNodeStatus &master_node);
    bool is_master_node_Set() const;
    bool is_master_node_Valid() const;

    OAIDomainHealth getClusterHealth() const;
    void setClusterHealth(const OAIDomainHealth &cluster_health);
    bool is_cluster_health_Set() const;
    bool is_cluster_health_Valid() const;

    QString getTotalShards() const;
    void setTotalShards(const QString &total_shards);
    bool is_total_shards_Set() const;
    bool is_total_shards_Valid() const;

    QString getTotalUnAssignedShards() const;
    void setTotalUnAssignedShards(const QString &total_un_assigned_shards);
    bool is_total_un_assigned_shards_Set() const;
    bool is_total_un_assigned_shards_Valid() const;

    QList getEnvironmentInformation() const;
    void setEnvironmentInformation(const QList &environment_information);
    bool is_environment_information_Set() const;
    bool is_environment_information_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDomainState m_domain_state;
    bool m_domain_state_isSet;
    bool m_domain_state_isValid;

    QString m_availability_zone_count;
    bool m_availability_zone_count_isSet;
    bool m_availability_zone_count_isValid;

    QString m_active_availability_zone_count;
    bool m_active_availability_zone_count_isSet;
    bool m_active_availability_zone_count_isValid;

    QString m_stand_by_availability_zone_count;
    bool m_stand_by_availability_zone_count_isSet;
    bool m_stand_by_availability_zone_count_isValid;

    QString m_data_node_count;
    bool m_data_node_count_isSet;
    bool m_data_node_count_isValid;

    bool m_dedicated_master;
    bool m_dedicated_master_isSet;
    bool m_dedicated_master_isValid;

    QString m_master_eligible_node_count;
    bool m_master_eligible_node_count_isSet;
    bool m_master_eligible_node_count_isValid;

    QString m_warm_node_count;
    bool m_warm_node_count_isSet;
    bool m_warm_node_count_isValid;

    OAIMasterNodeStatus m_master_node;
    bool m_master_node_isSet;
    bool m_master_node_isValid;

    OAIDomainHealth m_cluster_health;
    bool m_cluster_health_isSet;
    bool m_cluster_health_isValid;

    QString m_total_shards;
    bool m_total_shards_isSet;
    bool m_total_shards_isValid;

    QString m_total_un_assigned_shards;
    bool m_total_un_assigned_shards_isSet;
    bool m_total_un_assigned_shards_isValid;

    QList m_environment_information;
    bool m_environment_information_isSet;
    bool m_environment_information_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDomainHealthResponse)

#endif // OAIDescribeDomainHealthResponse_H
