/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVersionStatus_Status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVersionStatus_Status::OAIVersionStatus_Status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVersionStatus_Status::OAIVersionStatus_Status() {
    this->initializeModel();
}

OAIVersionStatus_Status::~OAIVersionStatus_Status() {}

void OAIVersionStatus_Status::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_update_date_isSet = false;
    m_update_date_isValid = false;

    m_update_version_isSet = false;
    m_update_version_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_pending_deletion_isSet = false;
    m_pending_deletion_isValid = false;
}

void OAIVersionStatus_Status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVersionStatus_Status::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_update_date_isValid = ::OpenAPI::fromJsonValue(m_update_date, json[QString("UpdateDate")]);
    m_update_date_isSet = !json[QString("UpdateDate")].isNull() && m_update_date_isValid;

    m_update_version_isValid = ::OpenAPI::fromJsonValue(m_update_version, json[QString("UpdateVersion")]);
    m_update_version_isSet = !json[QString("UpdateVersion")].isNull() && m_update_version_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_pending_deletion_isValid = ::OpenAPI::fromJsonValue(m_pending_deletion, json[QString("PendingDeletion")]);
    m_pending_deletion_isSet = !json[QString("PendingDeletion")].isNull() && m_pending_deletion_isValid;
}

QString OAIVersionStatus_Status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVersionStatus_Status::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_update_date_isSet) {
        obj.insert(QString("UpdateDate"), ::OpenAPI::toJsonValue(m_update_date));
    }
    if (m_update_version_isSet) {
        obj.insert(QString("UpdateVersion"), ::OpenAPI::toJsonValue(m_update_version));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_pending_deletion_isSet) {
        obj.insert(QString("PendingDeletion"), ::OpenAPI::toJsonValue(m_pending_deletion));
    }
    return obj;
}

QDateTime OAIVersionStatus_Status::getCreationDate() const {
    return m_creation_date;
}
void OAIVersionStatus_Status::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIVersionStatus_Status::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIVersionStatus_Status::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QDateTime OAIVersionStatus_Status::getUpdateDate() const {
    return m_update_date;
}
void OAIVersionStatus_Status::setUpdateDate(const QDateTime &update_date) {
    m_update_date = update_date;
    m_update_date_isSet = true;
}

bool OAIVersionStatus_Status::is_update_date_Set() const{
    return m_update_date_isSet;
}

bool OAIVersionStatus_Status::is_update_date_Valid() const{
    return m_update_date_isValid;
}

qint32 OAIVersionStatus_Status::getUpdateVersion() const {
    return m_update_version;
}
void OAIVersionStatus_Status::setUpdateVersion(const qint32 &update_version) {
    m_update_version = update_version;
    m_update_version_isSet = true;
}

bool OAIVersionStatus_Status::is_update_version_Set() const{
    return m_update_version_isSet;
}

bool OAIVersionStatus_Status::is_update_version_Valid() const{
    return m_update_version_isValid;
}

OAIOptionState OAIVersionStatus_Status::getState() const {
    return m_state;
}
void OAIVersionStatus_Status::setState(const OAIOptionState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVersionStatus_Status::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVersionStatus_Status::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIVersionStatus_Status::getPendingDeletion() const {
    return m_pending_deletion;
}
void OAIVersionStatus_Status::setPendingDeletion(const bool &pending_deletion) {
    m_pending_deletion = pending_deletion;
    m_pending_deletion_isSet = true;
}

bool OAIVersionStatus_Status::is_pending_deletion_Set() const{
    return m_pending_deletion_isSet;
}

bool OAIVersionStatus_Status::is_pending_deletion_Valid() const{
    return m_pending_deletion_isValid;
}

bool OAIVersionStatus_Status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_deletion_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVersionStatus_Status::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_creation_date_isValid && m_update_date_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
