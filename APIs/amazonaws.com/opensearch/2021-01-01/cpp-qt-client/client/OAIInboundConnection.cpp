/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInboundConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInboundConnection::OAIInboundConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInboundConnection::OAIInboundConnection() {
    this->initializeModel();
}

OAIInboundConnection::~OAIInboundConnection() {}

void OAIInboundConnection::initializeModel() {

    m_local_domain_info_isSet = false;
    m_local_domain_info_isValid = false;

    m_remote_domain_info_isSet = false;
    m_remote_domain_info_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_connection_status_isSet = false;
    m_connection_status_isValid = false;

    m_connection_mode_isSet = false;
    m_connection_mode_isValid = false;
}

void OAIInboundConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInboundConnection::fromJsonObject(QJsonObject json) {

    m_local_domain_info_isValid = ::OpenAPI::fromJsonValue(m_local_domain_info, json[QString("LocalDomainInfo")]);
    m_local_domain_info_isSet = !json[QString("LocalDomainInfo")].isNull() && m_local_domain_info_isValid;

    m_remote_domain_info_isValid = ::OpenAPI::fromJsonValue(m_remote_domain_info, json[QString("RemoteDomainInfo")]);
    m_remote_domain_info_isSet = !json[QString("RemoteDomainInfo")].isNull() && m_remote_domain_info_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("ConnectionId")]);
    m_connection_id_isSet = !json[QString("ConnectionId")].isNull() && m_connection_id_isValid;

    m_connection_status_isValid = ::OpenAPI::fromJsonValue(m_connection_status, json[QString("ConnectionStatus")]);
    m_connection_status_isSet = !json[QString("ConnectionStatus")].isNull() && m_connection_status_isValid;

    m_connection_mode_isValid = ::OpenAPI::fromJsonValue(m_connection_mode, json[QString("ConnectionMode")]);
    m_connection_mode_isSet = !json[QString("ConnectionMode")].isNull() && m_connection_mode_isValid;
}

QString OAIInboundConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInboundConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_local_domain_info.isSet()) {
        obj.insert(QString("LocalDomainInfo"), ::OpenAPI::toJsonValue(m_local_domain_info));
    }
    if (m_remote_domain_info.isSet()) {
        obj.insert(QString("RemoteDomainInfo"), ::OpenAPI::toJsonValue(m_remote_domain_info));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("ConnectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_connection_status.isSet()) {
        obj.insert(QString("ConnectionStatus"), ::OpenAPI::toJsonValue(m_connection_status));
    }
    if (m_connection_mode.isSet()) {
        obj.insert(QString("ConnectionMode"), ::OpenAPI::toJsonValue(m_connection_mode));
    }
    return obj;
}

OAICreateOutboundConnectionResponse_LocalDomainInfo OAIInboundConnection::getLocalDomainInfo() const {
    return m_local_domain_info;
}
void OAIInboundConnection::setLocalDomainInfo(const OAICreateOutboundConnectionResponse_LocalDomainInfo &local_domain_info) {
    m_local_domain_info = local_domain_info;
    m_local_domain_info_isSet = true;
}

bool OAIInboundConnection::is_local_domain_info_Set() const{
    return m_local_domain_info_isSet;
}

bool OAIInboundConnection::is_local_domain_info_Valid() const{
    return m_local_domain_info_isValid;
}

OAICreateOutboundConnectionResponse_RemoteDomainInfo OAIInboundConnection::getRemoteDomainInfo() const {
    return m_remote_domain_info;
}
void OAIInboundConnection::setRemoteDomainInfo(const OAICreateOutboundConnectionResponse_RemoteDomainInfo &remote_domain_info) {
    m_remote_domain_info = remote_domain_info;
    m_remote_domain_info_isSet = true;
}

bool OAIInboundConnection::is_remote_domain_info_Set() const{
    return m_remote_domain_info_isSet;
}

bool OAIInboundConnection::is_remote_domain_info_Valid() const{
    return m_remote_domain_info_isValid;
}

QString OAIInboundConnection::getConnectionId() const {
    return m_connection_id;
}
void OAIInboundConnection::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIInboundConnection::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIInboundConnection::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAIInboundConnection_ConnectionStatus OAIInboundConnection::getConnectionStatus() const {
    return m_connection_status;
}
void OAIInboundConnection::setConnectionStatus(const OAIInboundConnection_ConnectionStatus &connection_status) {
    m_connection_status = connection_status;
    m_connection_status_isSet = true;
}

bool OAIInboundConnection::is_connection_status_Set() const{
    return m_connection_status_isSet;
}

bool OAIInboundConnection::is_connection_status_Valid() const{
    return m_connection_status_isValid;
}

OAIConnectionMode OAIInboundConnection::getConnectionMode() const {
    return m_connection_mode;
}
void OAIInboundConnection::setConnectionMode(const OAIConnectionMode &connection_mode) {
    m_connection_mode = connection_mode;
    m_connection_mode_isSet = true;
}

bool OAIInboundConnection::is_connection_mode_Set() const{
    return m_connection_mode_isSet;
}

bool OAIInboundConnection::is_connection_mode_Valid() const{
    return m_connection_mode_isValid;
}

bool OAIInboundConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_local_domain_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_domain_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInboundConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
