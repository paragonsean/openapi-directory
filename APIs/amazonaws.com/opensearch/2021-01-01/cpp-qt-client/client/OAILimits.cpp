/**
 * Amazon OpenSearch Service
 * <p>Use the Amazon OpenSearch Service configuration API to create, configure, and manage OpenSearch Service domains.</p> <p>For sample code that uses the configuration API, see the <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html\"> <i>Amazon OpenSearch Service Developer Guide</i> </a>. The guide also contains <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html\">sample code</a> for sending signed HTTP requests to the OpenSearch APIs. The endpoint for configuration service requests is Region specific: es.<i>region</i>.amazonaws.com. For example, es.us-east-1.amazonaws.com. For a current list of supported Regions and endpoints, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions\">Amazon Web Services service endpoints</a>.</p>
 *
 * The version of the OpenAPI document: 2021-01-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILimits::OAILimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILimits::OAILimits() {
    this->initializeModel();
}

OAILimits::~OAILimits() {}

void OAILimits::initializeModel() {

    m_storage_types_isSet = false;
    m_storage_types_isValid = false;

    m_instance_limits_isSet = false;
    m_instance_limits_isValid = false;

    m_additional_limits_isSet = false;
    m_additional_limits_isValid = false;
}

void OAILimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILimits::fromJsonObject(QJsonObject json) {

    m_storage_types_isValid = ::OpenAPI::fromJsonValue(m_storage_types, json[QString("StorageTypes")]);
    m_storage_types_isSet = !json[QString("StorageTypes")].isNull() && m_storage_types_isValid;

    m_instance_limits_isValid = ::OpenAPI::fromJsonValue(m_instance_limits, json[QString("InstanceLimits")]);
    m_instance_limits_isSet = !json[QString("InstanceLimits")].isNull() && m_instance_limits_isValid;

    m_additional_limits_isValid = ::OpenAPI::fromJsonValue(m_additional_limits, json[QString("AdditionalLimits")]);
    m_additional_limits_isSet = !json[QString("AdditionalLimits")].isNull() && m_additional_limits_isValid;
}

QString OAILimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILimits::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_types.isSet()) {
        obj.insert(QString("StorageTypes"), ::OpenAPI::toJsonValue(m_storage_types));
    }
    if (m_instance_limits.isSet()) {
        obj.insert(QString("InstanceLimits"), ::OpenAPI::toJsonValue(m_instance_limits));
    }
    if (m_additional_limits.isSet()) {
        obj.insert(QString("AdditionalLimits"), ::OpenAPI::toJsonValue(m_additional_limits));
    }
    return obj;
}

QList OAILimits::getStorageTypes() const {
    return m_storage_types;
}
void OAILimits::setStorageTypes(const QList &storage_types) {
    m_storage_types = storage_types;
    m_storage_types_isSet = true;
}

bool OAILimits::is_storage_types_Set() const{
    return m_storage_types_isSet;
}

bool OAILimits::is_storage_types_Valid() const{
    return m_storage_types_isValid;
}

OAILimits_InstanceLimits OAILimits::getInstanceLimits() const {
    return m_instance_limits;
}
void OAILimits::setInstanceLimits(const OAILimits_InstanceLimits &instance_limits) {
    m_instance_limits = instance_limits;
    m_instance_limits_isSet = true;
}

bool OAILimits::is_instance_limits_Set() const{
    return m_instance_limits_isSet;
}

bool OAILimits::is_instance_limits_Valid() const{
    return m_instance_limits_isValid;
}

QList OAILimits::getAdditionalLimits() const {
    return m_additional_limits;
}
void OAILimits::setAdditionalLimits(const QList &additional_limits) {
    m_additional_limits = additional_limits;
    m_additional_limits_isSet = true;
}

bool OAILimits::is_additional_limits_Set() const{
    return m_additional_limits_isSet;
}

bool OAILimits::is_additional_limits_Valid() const{
    return m_additional_limits_isValid;
}

bool OAILimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_limits.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
