/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEventBridgeScheduler);
  }
}(this, function(expect, AmazonEventBridgeScheduler) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateScheduleRequestTarget', function() {
    it('should create an instance of UpdateScheduleRequestTarget', function() {
      // uncomment below and update the code to test UpdateScheduleRequestTarget
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be.a(AmazonEventBridgeScheduler.UpdateScheduleRequestTarget);
    });

    it('should have the property arn (base name: "Arn")', function() {
      // uncomment below and update the code to test the property arn
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property deadLetterConfig (base name: "DeadLetterConfig")', function() {
      // uncomment below and update the code to test the property deadLetterConfig
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property ecsParameters (base name: "EcsParameters")', function() {
      // uncomment below and update the code to test the property ecsParameters
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property eventBridgeParameters (base name: "EventBridgeParameters")', function() {
      // uncomment below and update the code to test the property eventBridgeParameters
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property input (base name: "Input")', function() {
      // uncomment below and update the code to test the property input
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property kinesisParameters (base name: "KinesisParameters")', function() {
      // uncomment below and update the code to test the property kinesisParameters
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property retryPolicy (base name: "RetryPolicy")', function() {
      // uncomment below and update the code to test the property retryPolicy
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property roleArn (base name: "RoleArn")', function() {
      // uncomment below and update the code to test the property roleArn
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property sageMakerPipelineParameters (base name: "SageMakerPipelineParameters")', function() {
      // uncomment below and update the code to test the property sageMakerPipelineParameters
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

    it('should have the property sqsParameters (base name: "SqsParameters")', function() {
      // uncomment below and update the code to test the property sqsParameters
      //var instance = new AmazonEventBridgeScheduler.UpdateScheduleRequestTarget();
      //expect(instance).to.be();
    });

  });

}));
