/*
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UpdateScheduleRequestFlexibleTimeWindow;
import org.openapitools.client.model.UpdateScheduleRequestTarget;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateScheduleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:23.202326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateScheduleRequest {
  /**
   * Specifies the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.
   */
  @JsonAdapter(ActionAfterCompletionEnum.Adapter.class)
  public enum ActionAfterCompletionEnum {
    NONE("NONE"),
    
    DELETE("DELETE");

    private String value;

    ActionAfterCompletionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionAfterCompletionEnum fromValue(String value) {
      for (ActionAfterCompletionEnum b : ActionAfterCompletionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionAfterCompletionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionAfterCompletionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionAfterCompletionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionAfterCompletionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionAfterCompletionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION_AFTER_COMPLETION = "ActionAfterCompletion";
  @SerializedName(SERIALIZED_NAME_ACTION_AFTER_COMPLETION)
  private ActionAfterCompletionEnum actionAfterCompletion;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FLEXIBLE_TIME_WINDOW = "FlexibleTimeWindow";
  @SerializedName(SERIALIZED_NAME_FLEXIBLE_TIME_WINDOW)
  private UpdateScheduleRequestFlexibleTimeWindow flexibleTimeWindow;

  public static final String SERIALIZED_NAME_GROUP_NAME = "GroupName";
  @SerializedName(SERIALIZED_NAME_GROUP_NAME)
  private String groupName;

  public static final String SERIALIZED_NAME_KMS_KEY_ARN = "KmsKeyArn";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ARN)
  private String kmsKeyArn;

  public static final String SERIALIZED_NAME_SCHEDULE_EXPRESSION = "ScheduleExpression";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EXPRESSION)
  private String scheduleExpression;

  public static final String SERIALIZED_NAME_SCHEDULE_EXPRESSION_TIMEZONE = "ScheduleExpressionTimezone";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_EXPRESSION_TIMEZONE)
  private String scheduleExpressionTimezone;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * Specifies whether the schedule is enabled or disabled.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ENABLED("ENABLED"),
    
    DISABLED("DISABLED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "State";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private UpdateScheduleRequestTarget target;

  public UpdateScheduleRequest() {
  }

  public UpdateScheduleRequest actionAfterCompletion(ActionAfterCompletionEnum actionAfterCompletion) {
    this.actionAfterCompletion = actionAfterCompletion;
    return this;
  }

  /**
   * Specifies the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.
   * @return actionAfterCompletion
   */
  @javax.annotation.Nullable
  public ActionAfterCompletionEnum getActionAfterCompletion() {
    return actionAfterCompletion;
  }

  public void setActionAfterCompletion(ActionAfterCompletionEnum actionAfterCompletion) {
    this.actionAfterCompletion = actionAfterCompletion;
  }


  public UpdateScheduleRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   *  Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency. 
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public UpdateScheduleRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description you specify for the schedule.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateScheduleRequest endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The date, in UTC, before which the schedule can invoke its target. Depending on the schedule&#39;s recurrence expression, invocations might stop on, or before, the &lt;code&gt;EndDate&lt;/code&gt; you specify. EventBridge Scheduler ignores &lt;code&gt;EndDate&lt;/code&gt; for one-time schedules.
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public UpdateScheduleRequest flexibleTimeWindow(UpdateScheduleRequestFlexibleTimeWindow flexibleTimeWindow) {
    this.flexibleTimeWindow = flexibleTimeWindow;
    return this;
  }

  /**
   * Get flexibleTimeWindow
   * @return flexibleTimeWindow
   */
  @javax.annotation.Nonnull
  public UpdateScheduleRequestFlexibleTimeWindow getFlexibleTimeWindow() {
    return flexibleTimeWindow;
  }

  public void setFlexibleTimeWindow(UpdateScheduleRequestFlexibleTimeWindow flexibleTimeWindow) {
    this.flexibleTimeWindow = flexibleTimeWindow;
  }


  public UpdateScheduleRequest groupName(String groupName) {
    this.groupName = groupName;
    return this;
  }

  /**
   * The name of the schedule group with which the schedule is associated. You must provide this value in order for EventBridge Scheduler to find the schedule you want to update. If you omit this value, EventBridge Scheduler assumes the group is associated to the default group.
   * @return groupName
   */
  @javax.annotation.Nullable
  public String getGroupName() {
    return groupName;
  }

  public void setGroupName(String groupName) {
    this.groupName = groupName;
  }


  public UpdateScheduleRequest kmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
    return this;
  }

  /**
   * The ARN for the customer managed KMS key that that you want EventBridge Scheduler to use to encrypt and decrypt your data.
   * @return kmsKeyArn
   */
  @javax.annotation.Nullable
  public String getKmsKeyArn() {
    return kmsKeyArn;
  }

  public void setKmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
  }


  public UpdateScheduleRequest scheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
    return this;
  }

  /**
   * &lt;p&gt; The expression that defines when the schedule runs. The following formats are supported. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;at&lt;/code&gt; expression - &lt;code&gt;at(yyyy-mm-ddThh:mm:ss)&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;rate&lt;/code&gt; expression - &lt;code&gt;rate(value unit)&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;cron&lt;/code&gt; expression - &lt;code&gt;cron(fields)&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; You can use &lt;code&gt;at&lt;/code&gt; expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;cron&lt;/code&gt; expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;cron&lt;/code&gt; expression consists of six fields separated by white spaces: &lt;code&gt;(minutes hours day_of_month month day_of_week year)&lt;/code&gt;. &lt;/p&gt; &lt;p&gt; A &lt;code&gt;rate&lt;/code&gt; expression consists of a &lt;i&gt;value&lt;/i&gt; as a positive integer, and a &lt;i&gt;unit&lt;/i&gt; with the following options: &lt;code&gt;minute&lt;/code&gt; | &lt;code&gt;minutes&lt;/code&gt; | &lt;code&gt;hour&lt;/code&gt; | &lt;code&gt;hours&lt;/code&gt; | &lt;code&gt;day&lt;/code&gt; | &lt;code&gt;days&lt;/code&gt; &lt;/p&gt; &lt;p&gt; For more information and examples, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html\&quot;&gt;Schedule types on EventBridge Scheduler&lt;/a&gt; in the &lt;i&gt;EventBridge Scheduler User Guide&lt;/i&gt;. &lt;/p&gt;
   * @return scheduleExpression
   */
  @javax.annotation.Nonnull
  public String getScheduleExpression() {
    return scheduleExpression;
  }

  public void setScheduleExpression(String scheduleExpression) {
    this.scheduleExpression = scheduleExpression;
  }


  public UpdateScheduleRequest scheduleExpressionTimezone(String scheduleExpressionTimezone) {
    this.scheduleExpressionTimezone = scheduleExpressionTimezone;
    return this;
  }

  /**
   * The timezone in which the scheduling expression is evaluated.
   * @return scheduleExpressionTimezone
   */
  @javax.annotation.Nullable
  public String getScheduleExpressionTimezone() {
    return scheduleExpressionTimezone;
  }

  public void setScheduleExpressionTimezone(String scheduleExpressionTimezone) {
    this.scheduleExpressionTimezone = scheduleExpressionTimezone;
  }


  public UpdateScheduleRequest startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule&#39;s recurrence expression, invocations might occur on, or after, the &lt;code&gt;StartDate&lt;/code&gt; you specify. EventBridge Scheduler ignores &lt;code&gt;StartDate&lt;/code&gt; for one-time schedules.
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public UpdateScheduleRequest state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Specifies whether the schedule is enabled or disabled.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public UpdateScheduleRequest target(UpdateScheduleRequestTarget target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nonnull
  public UpdateScheduleRequestTarget getTarget() {
    return target;
  }

  public void setTarget(UpdateScheduleRequestTarget target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateScheduleRequest updateScheduleRequest = (UpdateScheduleRequest) o;
    return Objects.equals(this.actionAfterCompletion, updateScheduleRequest.actionAfterCompletion) &&
        Objects.equals(this.clientToken, updateScheduleRequest.clientToken) &&
        Objects.equals(this.description, updateScheduleRequest.description) &&
        Objects.equals(this.endDate, updateScheduleRequest.endDate) &&
        Objects.equals(this.flexibleTimeWindow, updateScheduleRequest.flexibleTimeWindow) &&
        Objects.equals(this.groupName, updateScheduleRequest.groupName) &&
        Objects.equals(this.kmsKeyArn, updateScheduleRequest.kmsKeyArn) &&
        Objects.equals(this.scheduleExpression, updateScheduleRequest.scheduleExpression) &&
        Objects.equals(this.scheduleExpressionTimezone, updateScheduleRequest.scheduleExpressionTimezone) &&
        Objects.equals(this.startDate, updateScheduleRequest.startDate) &&
        Objects.equals(this.state, updateScheduleRequest.state) &&
        Objects.equals(this.target, updateScheduleRequest.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionAfterCompletion, clientToken, description, endDate, flexibleTimeWindow, groupName, kmsKeyArn, scheduleExpression, scheduleExpressionTimezone, startDate, state, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateScheduleRequest {\n");
    sb.append("    actionAfterCompletion: ").append(toIndentedString(actionAfterCompletion)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    flexibleTimeWindow: ").append(toIndentedString(flexibleTimeWindow)).append("\n");
    sb.append("    groupName: ").append(toIndentedString(groupName)).append("\n");
    sb.append("    kmsKeyArn: ").append(toIndentedString(kmsKeyArn)).append("\n");
    sb.append("    scheduleExpression: ").append(toIndentedString(scheduleExpression)).append("\n");
    sb.append("    scheduleExpressionTimezone: ").append(toIndentedString(scheduleExpressionTimezone)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ActionAfterCompletion");
    openapiFields.add("ClientToken");
    openapiFields.add("Description");
    openapiFields.add("EndDate");
    openapiFields.add("FlexibleTimeWindow");
    openapiFields.add("GroupName");
    openapiFields.add("KmsKeyArn");
    openapiFields.add("ScheduleExpression");
    openapiFields.add("ScheduleExpressionTimezone");
    openapiFields.add("StartDate");
    openapiFields.add("State");
    openapiFields.add("Target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FlexibleTimeWindow");
    openapiRequiredFields.add("ScheduleExpression");
    openapiRequiredFields.add("Target");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateScheduleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateScheduleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateScheduleRequest is not found in the empty JSON string", UpdateScheduleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateScheduleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateScheduleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateScheduleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ActionAfterCompletion") != null && !jsonObj.get("ActionAfterCompletion").isJsonNull()) && !jsonObj.get("ActionAfterCompletion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActionAfterCompletion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActionAfterCompletion").toString()));
      }
      // validate the optional field `ActionAfterCompletion`
      if (jsonObj.get("ActionAfterCompletion") != null && !jsonObj.get("ActionAfterCompletion").isJsonNull()) {
        ActionAfterCompletionEnum.validateJsonElement(jsonObj.get("ActionAfterCompletion"));
      }
      if ((jsonObj.get("ClientToken") != null && !jsonObj.get("ClientToken").isJsonNull()) && !jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the required field `FlexibleTimeWindow`
      UpdateScheduleRequestFlexibleTimeWindow.validateJsonElement(jsonObj.get("FlexibleTimeWindow"));
      if ((jsonObj.get("GroupName") != null && !jsonObj.get("GroupName").isJsonNull()) && !jsonObj.get("GroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GroupName").toString()));
      }
      if ((jsonObj.get("KmsKeyArn") != null && !jsonObj.get("KmsKeyArn").isJsonNull()) && !jsonObj.get("KmsKeyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KmsKeyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KmsKeyArn").toString()));
      }
      if (!jsonObj.get("ScheduleExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduleExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduleExpression").toString()));
      }
      if ((jsonObj.get("ScheduleExpressionTimezone") != null && !jsonObj.get("ScheduleExpressionTimezone").isJsonNull()) && !jsonObj.get("ScheduleExpressionTimezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScheduleExpressionTimezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScheduleExpressionTimezone").toString()));
      }
      if ((jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) && !jsonObj.get("State").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `State` to be a primitive type in the JSON string but got `%s`", jsonObj.get("State").toString()));
      }
      // validate the optional field `State`
      if (jsonObj.get("State") != null && !jsonObj.get("State").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("State"));
      }
      // validate the required field `Target`
      UpdateScheduleRequestTarget.validateJsonElement(jsonObj.get("Target"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateScheduleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateScheduleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateScheduleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateScheduleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateScheduleRequest>() {
           @Override
           public void write(JsonWriter out, UpdateScheduleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateScheduleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateScheduleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateScheduleRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateScheduleRequest
   */
  public static UpdateScheduleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateScheduleRequest.class);
  }

  /**
   * Convert an instance of UpdateScheduleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

