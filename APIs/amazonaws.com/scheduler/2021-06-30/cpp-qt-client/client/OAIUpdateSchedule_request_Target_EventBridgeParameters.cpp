/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchedule_request_Target_EventBridgeParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchedule_request_Target_EventBridgeParameters::OAIUpdateSchedule_request_Target_EventBridgeParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchedule_request_Target_EventBridgeParameters::OAIUpdateSchedule_request_Target_EventBridgeParameters() {
    this->initializeModel();
}

OAIUpdateSchedule_request_Target_EventBridgeParameters::~OAIUpdateSchedule_request_Target_EventBridgeParameters() {}

void OAIUpdateSchedule_request_Target_EventBridgeParameters::initializeModel() {

    m_detail_type_isSet = false;
    m_detail_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIUpdateSchedule_request_Target_EventBridgeParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchedule_request_Target_EventBridgeParameters::fromJsonObject(QJsonObject json) {

    m_detail_type_isValid = ::OpenAPI::fromJsonValue(m_detail_type, json[QString("DetailType")]);
    m_detail_type_isSet = !json[QString("DetailType")].isNull() && m_detail_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;
}

QString OAIUpdateSchedule_request_Target_EventBridgeParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchedule_request_Target_EventBridgeParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_type_isSet) {
        obj.insert(QString("DetailType"), ::OpenAPI::toJsonValue(m_detail_type));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIUpdateSchedule_request_Target_EventBridgeParameters::getDetailType() const {
    return m_detail_type;
}
void OAIUpdateSchedule_request_Target_EventBridgeParameters::setDetailType(const QString &detail_type) {
    m_detail_type = detail_type;
    m_detail_type_isSet = true;
}

bool OAIUpdateSchedule_request_Target_EventBridgeParameters::is_detail_type_Set() const{
    return m_detail_type_isSet;
}

bool OAIUpdateSchedule_request_Target_EventBridgeParameters::is_detail_type_Valid() const{
    return m_detail_type_isValid;
}

QString OAIUpdateSchedule_request_Target_EventBridgeParameters::getSource() const {
    return m_source;
}
void OAIUpdateSchedule_request_Target_EventBridgeParameters::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIUpdateSchedule_request_Target_EventBridgeParameters::is_source_Set() const{
    return m_source_isSet;
}

bool OAIUpdateSchedule_request_Target_EventBridgeParameters::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIUpdateSchedule_request_Target_EventBridgeParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchedule_request_Target_EventBridgeParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detail_type_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
