/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacityProviderStrategyItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacityProviderStrategyItem::OAICapacityProviderStrategyItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacityProviderStrategyItem::OAICapacityProviderStrategyItem() {
    this->initializeModel();
}

OAICapacityProviderStrategyItem::~OAICapacityProviderStrategyItem() {}

void OAICapacityProviderStrategyItem::initializeModel() {

    m_base_isSet = false;
    m_base_isValid = false;

    m_capacity_provider_isSet = false;
    m_capacity_provider_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAICapacityProviderStrategyItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacityProviderStrategyItem::fromJsonObject(QJsonObject json) {

    m_base_isValid = ::OpenAPI::fromJsonValue(m_base, json[QString("base")]);
    m_base_isSet = !json[QString("base")].isNull() && m_base_isValid;

    m_capacity_provider_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider, json[QString("capacityProvider")]);
    m_capacity_provider_isSet = !json[QString("capacityProvider")].isNull() && m_capacity_provider_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAICapacityProviderStrategyItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacityProviderStrategyItem::asJsonObject() const {
    QJsonObject obj;
    if (m_base_isSet) {
        obj.insert(QString("base"), ::OpenAPI::toJsonValue(m_base));
    }
    if (m_capacity_provider_isSet) {
        obj.insert(QString("capacityProvider"), ::OpenAPI::toJsonValue(m_capacity_provider));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint32 OAICapacityProviderStrategyItem::getBase() const {
    return m_base;
}
void OAICapacityProviderStrategyItem::setBase(const qint32 &base) {
    m_base = base;
    m_base_isSet = true;
}

bool OAICapacityProviderStrategyItem::is_base_Set() const{
    return m_base_isSet;
}

bool OAICapacityProviderStrategyItem::is_base_Valid() const{
    return m_base_isValid;
}

QString OAICapacityProviderStrategyItem::getCapacityProvider() const {
    return m_capacity_provider;
}
void OAICapacityProviderStrategyItem::setCapacityProvider(const QString &capacity_provider) {
    m_capacity_provider = capacity_provider;
    m_capacity_provider_isSet = true;
}

bool OAICapacityProviderStrategyItem::is_capacity_provider_Set() const{
    return m_capacity_provider_isSet;
}

bool OAICapacityProviderStrategyItem::is_capacity_provider_Valid() const{
    return m_capacity_provider_isValid;
}

qint32 OAICapacityProviderStrategyItem::getWeight() const {
    return m_weight;
}
void OAICapacityProviderStrategyItem::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAICapacityProviderStrategyItem::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAICapacityProviderStrategyItem::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAICapacityProviderStrategyItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacityProviderStrategyItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_capacity_provider_isValid && true;
}

} // namespace OpenAPI
