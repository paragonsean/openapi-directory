/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEcsParameters.h
 *
 * The templated target type for the Amazon ECS &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html\&quot;&gt; &lt;code&gt;RunTask&lt;/code&gt; &lt;/a&gt; API operation.
 */

#ifndef OAIEcsParameters_H
#define OAIEcsParameters_H

#include <QJsonObject>

#include "OAIEcsParameters_NetworkConfiguration.h"
#include "OAILaunchType.h"
#include "OAIPropagateTags.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEcsParameters_NetworkConfiguration;

class OAIEcsParameters : public OAIObject {
public:
    OAIEcsParameters();
    OAIEcsParameters(QString json);
    ~OAIEcsParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getCapacityProviderStrategy() const;
    void setCapacityProviderStrategy(const QList &capacity_provider_strategy);
    bool is_capacity_provider_strategy_Set() const;
    bool is_capacity_provider_strategy_Valid() const;

    bool getEnableEcsManagedTags() const;
    void setEnableEcsManagedTags(const bool &enable_ecs_managed_tags);
    bool is_enable_ecs_managed_tags_Set() const;
    bool is_enable_ecs_managed_tags_Valid() const;

    bool getEnableExecuteCommand() const;
    void setEnableExecuteCommand(const bool &enable_execute_command);
    bool is_enable_execute_command_Set() const;
    bool is_enable_execute_command_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    OAILaunchType getLaunchType() const;
    void setLaunchType(const OAILaunchType &launch_type);
    bool is_launch_type_Set() const;
    bool is_launch_type_Valid() const;

    OAIEcsParameters_NetworkConfiguration getNetworkConfiguration() const;
    void setNetworkConfiguration(const OAIEcsParameters_NetworkConfiguration &network_configuration);
    bool is_network_configuration_Set() const;
    bool is_network_configuration_Valid() const;

    QList getPlacementConstraints() const;
    void setPlacementConstraints(const QList &placement_constraints);
    bool is_placement_constraints_Set() const;
    bool is_placement_constraints_Valid() const;

    QList getPlacementStrategy() const;
    void setPlacementStrategy(const QList &placement_strategy);
    bool is_placement_strategy_Set() const;
    bool is_placement_strategy_Valid() const;

    QString getPlatformVersion() const;
    void setPlatformVersion(const QString &platform_version);
    bool is_platform_version_Set() const;
    bool is_platform_version_Valid() const;

    OAIPropagateTags getPropagateTags() const;
    void setPropagateTags(const OAIPropagateTags &propagate_tags);
    bool is_propagate_tags_Set() const;
    bool is_propagate_tags_Valid() const;

    QString getReferenceId() const;
    void setReferenceId(const QString &reference_id);
    bool is_reference_id_Set() const;
    bool is_reference_id_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    qint32 getTaskCount() const;
    void setTaskCount(const qint32 &task_count);
    bool is_task_count_Set() const;
    bool is_task_count_Valid() const;

    QString getTaskDefinitionArn() const;
    void setTaskDefinitionArn(const QString &task_definition_arn);
    bool is_task_definition_arn_Set() const;
    bool is_task_definition_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_capacity_provider_strategy;
    bool m_capacity_provider_strategy_isSet;
    bool m_capacity_provider_strategy_isValid;

    bool m_enable_ecs_managed_tags;
    bool m_enable_ecs_managed_tags_isSet;
    bool m_enable_ecs_managed_tags_isValid;

    bool m_enable_execute_command;
    bool m_enable_execute_command_isSet;
    bool m_enable_execute_command_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    OAILaunchType m_launch_type;
    bool m_launch_type_isSet;
    bool m_launch_type_isValid;

    OAIEcsParameters_NetworkConfiguration m_network_configuration;
    bool m_network_configuration_isSet;
    bool m_network_configuration_isValid;

    QList m_placement_constraints;
    bool m_placement_constraints_isSet;
    bool m_placement_constraints_isValid;

    QList m_placement_strategy;
    bool m_placement_strategy_isSet;
    bool m_placement_strategy_isValid;

    QString m_platform_version;
    bool m_platform_version_isSet;
    bool m_platform_version_isValid;

    OAIPropagateTags m_propagate_tags;
    bool m_propagate_tags_isSet;
    bool m_propagate_tags_isValid;

    QString m_reference_id;
    bool m_reference_id_isSet;
    bool m_reference_id_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    qint32 m_task_count;
    bool m_task_count_isSet;
    bool m_task_count_isValid;

    QString m_task_definition_arn;
    bool m_task_definition_arn_isSet;
    bool m_task_definition_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEcsParameters)

#endif // OAIEcsParameters_H
