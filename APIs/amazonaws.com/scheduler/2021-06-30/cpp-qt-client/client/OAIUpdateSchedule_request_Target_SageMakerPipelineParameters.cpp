/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchedule_request_Target_SageMakerPipelineParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::OAIUpdateSchedule_request_Target_SageMakerPipelineParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::OAIUpdateSchedule_request_Target_SageMakerPipelineParameters() {
    this->initializeModel();
}

OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::~OAIUpdateSchedule_request_Target_SageMakerPipelineParameters() {}

void OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::initializeModel() {

    m_pipeline_parameter_list_isSet = false;
    m_pipeline_parameter_list_isValid = false;
}

void OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::fromJsonObject(QJsonObject json) {

    m_pipeline_parameter_list_isValid = ::OpenAPI::fromJsonValue(m_pipeline_parameter_list, json[QString("PipelineParameterList")]);
    m_pipeline_parameter_list_isSet = !json[QString("PipelineParameterList")].isNull() && m_pipeline_parameter_list_isValid;
}

QString OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_pipeline_parameter_list.isSet()) {
        obj.insert(QString("PipelineParameterList"), ::OpenAPI::toJsonValue(m_pipeline_parameter_list));
    }
    return obj;
}

QList OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::getPipelineParameterList() const {
    return m_pipeline_parameter_list;
}
void OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::setPipelineParameterList(const QList &pipeline_parameter_list) {
    m_pipeline_parameter_list = pipeline_parameter_list;
    m_pipeline_parameter_list_isSet = true;
}

bool OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::is_pipeline_parameter_list_Set() const{
    return m_pipeline_parameter_list_isSet;
}

bool OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::is_pipeline_parameter_list_Valid() const{
    return m_pipeline_parameter_list_isValid;
}

bool OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pipeline_parameter_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchedule_request_Target_SageMakerPipelineParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
