/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleSummary::OAIScheduleSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleSummary::OAIScheduleSummary() {
    this->initializeModel();
}

OAIScheduleSummary::~OAIScheduleSummary() {}

void OAIScheduleSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_last_modification_date_isSet = false;
    m_last_modification_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIScheduleSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_last_modification_date_isValid = ::OpenAPI::fromJsonValue(m_last_modification_date, json[QString("LastModificationDate")]);
    m_last_modification_date_isSet = !json[QString("LastModificationDate")].isNull() && m_last_modification_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;
}

QString OAIScheduleSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_last_modification_date_isSet) {
        obj.insert(QString("LastModificationDate"), ::OpenAPI::toJsonValue(m_last_modification_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIScheduleSummary::getArn() const {
    return m_arn;
}
void OAIScheduleSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIScheduleSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIScheduleSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIScheduleSummary::getCreationDate() const {
    return m_creation_date;
}
void OAIScheduleSummary::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIScheduleSummary::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIScheduleSummary::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIScheduleSummary::getGroupName() const {
    return m_group_name;
}
void OAIScheduleSummary::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIScheduleSummary::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIScheduleSummary::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QDateTime OAIScheduleSummary::getLastModificationDate() const {
    return m_last_modification_date;
}
void OAIScheduleSummary::setLastModificationDate(const QDateTime &last_modification_date) {
    m_last_modification_date = last_modification_date;
    m_last_modification_date_isSet = true;
}

bool OAIScheduleSummary::is_last_modification_date_Set() const{
    return m_last_modification_date_isSet;
}

bool OAIScheduleSummary::is_last_modification_date_Valid() const{
    return m_last_modification_date_isValid;
}

QString OAIScheduleSummary::getName() const {
    return m_name;
}
void OAIScheduleSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScheduleSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScheduleSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIScheduleState OAIScheduleSummary::getState() const {
    return m_state;
}
void OAIScheduleSummary::setState(const OAIScheduleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIScheduleSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIScheduleSummary::is_state_Valid() const{
    return m_state_isValid;
}

OAIScheduleSummary_Target OAIScheduleSummary::getTarget() const {
    return m_target;
}
void OAIScheduleSummary::setTarget(const OAIScheduleSummary_Target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIScheduleSummary::is_target_Set() const{
    return m_target_isSet;
}

bool OAIScheduleSummary::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIScheduleSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
