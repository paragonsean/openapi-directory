/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRetryPolicy.h
 *
 * A &lt;code&gt;RetryPolicy&lt;/code&gt; object that includes information about the retry policy settings, including the maximum age of an event, and the maximum number of times EventBridge Scheduler will try to deliver the event to a target.
 */

#ifndef OAIRetryPolicy_H
#define OAIRetryPolicy_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRetryPolicy : public OAIObject {
public:
    OAIRetryPolicy();
    OAIRetryPolicy(QString json);
    ~OAIRetryPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaximumEventAgeInSeconds() const;
    void setMaximumEventAgeInSeconds(const qint32 &maximum_event_age_in_seconds);
    bool is_maximum_event_age_in_seconds_Set() const;
    bool is_maximum_event_age_in_seconds_Valid() const;

    qint32 getMaximumRetryAttempts() const;
    void setMaximumRetryAttempts(const qint32 &maximum_retry_attempts);
    bool is_maximum_retry_attempts_Set() const;
    bool is_maximum_retry_attempts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_maximum_event_age_in_seconds;
    bool m_maximum_event_age_in_seconds_isSet;
    bool m_maximum_event_age_in_seconds_isValid;

    qint32 m_maximum_retry_attempts;
    bool m_maximum_retry_attempts_isSet;
    bool m_maximum_retry_attempts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRetryPolicy)

#endif // OAIRetryPolicy_H
