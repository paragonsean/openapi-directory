/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateScheduleInput.h
 *
 * 
 */

#ifndef OAICreateScheduleInput_H
#define OAICreateScheduleInput_H

#include <QJsonObject>

#include "OAIActionAfterCompletion.h"
#include "OAICreateScheduleInput_Target.h"
#include "OAIGetScheduleOutput_FlexibleTimeWindow.h"
#include "OAIScheduleState.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetScheduleOutput_FlexibleTimeWindow;
class OAICreateScheduleInput_Target;

class OAICreateScheduleInput : public OAIObject {
public:
    OAICreateScheduleInput();
    OAICreateScheduleInput(QString json);
    ~OAICreateScheduleInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIActionAfterCompletion getActionAfterCompletion() const;
    void setActionAfterCompletion(const OAIActionAfterCompletion &action_after_completion);
    bool is_action_after_completion_Set() const;
    bool is_action_after_completion_Valid() const;

    QString getClientToken() const;
    void setClientToken(const QString &client_token);
    bool is_client_token_Set() const;
    bool is_client_token_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getEndDate() const;
    void setEndDate(const QDateTime &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    OAIGetScheduleOutput_FlexibleTimeWindow getFlexibleTimeWindow() const;
    void setFlexibleTimeWindow(const OAIGetScheduleOutput_FlexibleTimeWindow &flexible_time_window);
    bool is_flexible_time_window_Set() const;
    bool is_flexible_time_window_Valid() const;

    QString getGroupName() const;
    void setGroupName(const QString &group_name);
    bool is_group_name_Set() const;
    bool is_group_name_Valid() const;

    QString getKmsKeyArn() const;
    void setKmsKeyArn(const QString &kms_key_arn);
    bool is_kms_key_arn_Set() const;
    bool is_kms_key_arn_Valid() const;

    QString getScheduleExpression() const;
    void setScheduleExpression(const QString &schedule_expression);
    bool is_schedule_expression_Set() const;
    bool is_schedule_expression_Valid() const;

    QString getScheduleExpressionTimezone() const;
    void setScheduleExpressionTimezone(const QString &schedule_expression_timezone);
    bool is_schedule_expression_timezone_Set() const;
    bool is_schedule_expression_timezone_Valid() const;

    QDateTime getStartDate() const;
    void setStartDate(const QDateTime &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    OAIScheduleState getState() const;
    void setState(const OAIScheduleState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAICreateScheduleInput_Target getTarget() const;
    void setTarget(const OAICreateScheduleInput_Target &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIActionAfterCompletion m_action_after_completion;
    bool m_action_after_completion_isSet;
    bool m_action_after_completion_isValid;

    QString m_client_token;
    bool m_client_token_isSet;
    bool m_client_token_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    OAIGetScheduleOutput_FlexibleTimeWindow m_flexible_time_window;
    bool m_flexible_time_window_isSet;
    bool m_flexible_time_window_isValid;

    QString m_group_name;
    bool m_group_name_isSet;
    bool m_group_name_isValid;

    QString m_kms_key_arn;
    bool m_kms_key_arn_isSet;
    bool m_kms_key_arn_isValid;

    QString m_schedule_expression;
    bool m_schedule_expression_isSet;
    bool m_schedule_expression_isValid;

    QString m_schedule_expression_timezone;
    bool m_schedule_expression_timezone_isSet;
    bool m_schedule_expression_timezone_isValid;

    QDateTime m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    OAIScheduleState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAICreateScheduleInput_Target m_target;
    bool m_target_isSet;
    bool m_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateScheduleInput)

#endif // OAICreateScheduleInput_H
