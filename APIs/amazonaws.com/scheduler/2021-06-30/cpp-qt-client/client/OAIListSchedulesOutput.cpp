/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSchedulesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSchedulesOutput::OAIListSchedulesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSchedulesOutput::OAIListSchedulesOutput() {
    this->initializeModel();
}

OAIListSchedulesOutput::~OAIListSchedulesOutput() {}

void OAIListSchedulesOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;
}

void OAIListSchedulesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSchedulesOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("Schedules")]);
    m_schedules_isSet = !json[QString("Schedules")].isNull() && m_schedules_isValid;
}

QString OAIListSchedulesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSchedulesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_schedules.isSet()) {
        obj.insert(QString("Schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    return obj;
}

QString OAIListSchedulesOutput::getNextToken() const {
    return m_next_token;
}
void OAIListSchedulesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSchedulesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSchedulesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListSchedulesOutput::getSchedules() const {
    return m_schedules;
}
void OAIListSchedulesOutput::setSchedules(const QList &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAIListSchedulesOutput::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAIListSchedulesOutput::is_schedules_Valid() const{
    return m_schedules_isValid;
}

bool OAIListSchedulesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSchedulesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedules_isValid && true;
}

} // namespace OpenAPI
