/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchType::OAILaunchType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchType::OAILaunchType() {
    this->initializeModel();
}

OAILaunchType::~OAILaunchType() {}

void OAILaunchType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILaunchType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILaunchType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("EC2", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchType::EC2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FARGATE", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchType::FARGATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXTERNAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAILaunchType::EXTERNAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILaunchType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILaunchType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILaunchType::EC2:
            val = "EC2";
            break;
        case eOAILaunchType::FARGATE:
            val = "FARGATE";
            break;
        case eOAILaunchType::EXTERNAL:
            val = "EXTERNAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILaunchType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILaunchType::eOAILaunchType OAILaunchType::getValue() const {
    return m_value;
}

void OAILaunchType::setValue(const OAILaunchType::eOAILaunchType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILaunchType::isSet() const {
    
    return m_value_isSet;
}

bool OAILaunchType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
