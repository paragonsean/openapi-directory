/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchedule_request_Target.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchedule_request_Target::OAIUpdateSchedule_request_Target(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchedule_request_Target::OAIUpdateSchedule_request_Target() {
    this->initializeModel();
}

OAIUpdateSchedule_request_Target::~OAIUpdateSchedule_request_Target() {}

void OAIUpdateSchedule_request_Target::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_dead_letter_config_isSet = false;
    m_dead_letter_config_isValid = false;

    m_ecs_parameters_isSet = false;
    m_ecs_parameters_isValid = false;

    m_event_bridge_parameters_isSet = false;
    m_event_bridge_parameters_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_kinesis_parameters_isSet = false;
    m_kinesis_parameters_isValid = false;

    m_retry_policy_isSet = false;
    m_retry_policy_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_sage_maker_pipeline_parameters_isSet = false;
    m_sage_maker_pipeline_parameters_isValid = false;

    m_sqs_parameters_isSet = false;
    m_sqs_parameters_isValid = false;
}

void OAIUpdateSchedule_request_Target::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchedule_request_Target::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_dead_letter_config_isValid = ::OpenAPI::fromJsonValue(m_dead_letter_config, json[QString("DeadLetterConfig")]);
    m_dead_letter_config_isSet = !json[QString("DeadLetterConfig")].isNull() && m_dead_letter_config_isValid;

    m_ecs_parameters_isValid = ::OpenAPI::fromJsonValue(m_ecs_parameters, json[QString("EcsParameters")]);
    m_ecs_parameters_isSet = !json[QString("EcsParameters")].isNull() && m_ecs_parameters_isValid;

    m_event_bridge_parameters_isValid = ::OpenAPI::fromJsonValue(m_event_bridge_parameters, json[QString("EventBridgeParameters")]);
    m_event_bridge_parameters_isSet = !json[QString("EventBridgeParameters")].isNull() && m_event_bridge_parameters_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("Input")]);
    m_input_isSet = !json[QString("Input")].isNull() && m_input_isValid;

    m_kinesis_parameters_isValid = ::OpenAPI::fromJsonValue(m_kinesis_parameters, json[QString("KinesisParameters")]);
    m_kinesis_parameters_isSet = !json[QString("KinesisParameters")].isNull() && m_kinesis_parameters_isValid;

    m_retry_policy_isValid = ::OpenAPI::fromJsonValue(m_retry_policy, json[QString("RetryPolicy")]);
    m_retry_policy_isSet = !json[QString("RetryPolicy")].isNull() && m_retry_policy_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_sage_maker_pipeline_parameters_isValid = ::OpenAPI::fromJsonValue(m_sage_maker_pipeline_parameters, json[QString("SageMakerPipelineParameters")]);
    m_sage_maker_pipeline_parameters_isSet = !json[QString("SageMakerPipelineParameters")].isNull() && m_sage_maker_pipeline_parameters_isValid;

    m_sqs_parameters_isValid = ::OpenAPI::fromJsonValue(m_sqs_parameters, json[QString("SqsParameters")]);
    m_sqs_parameters_isSet = !json[QString("SqsParameters")].isNull() && m_sqs_parameters_isValid;
}

QString OAIUpdateSchedule_request_Target::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchedule_request_Target::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_dead_letter_config.isSet()) {
        obj.insert(QString("DeadLetterConfig"), ::OpenAPI::toJsonValue(m_dead_letter_config));
    }
    if (m_ecs_parameters.isSet()) {
        obj.insert(QString("EcsParameters"), ::OpenAPI::toJsonValue(m_ecs_parameters));
    }
    if (m_event_bridge_parameters.isSet()) {
        obj.insert(QString("EventBridgeParameters"), ::OpenAPI::toJsonValue(m_event_bridge_parameters));
    }
    if (m_input_isSet) {
        obj.insert(QString("Input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_kinesis_parameters.isSet()) {
        obj.insert(QString("KinesisParameters"), ::OpenAPI::toJsonValue(m_kinesis_parameters));
    }
    if (m_retry_policy.isSet()) {
        obj.insert(QString("RetryPolicy"), ::OpenAPI::toJsonValue(m_retry_policy));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_sage_maker_pipeline_parameters.isSet()) {
        obj.insert(QString("SageMakerPipelineParameters"), ::OpenAPI::toJsonValue(m_sage_maker_pipeline_parameters));
    }
    if (m_sqs_parameters.isSet()) {
        obj.insert(QString("SqsParameters"), ::OpenAPI::toJsonValue(m_sqs_parameters));
    }
    return obj;
}

QString OAIUpdateSchedule_request_Target::getArn() const {
    return m_arn;
}
void OAIUpdateSchedule_request_Target::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateSchedule_request_Target::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIUpdateSchedule_request_Target_DeadLetterConfig OAIUpdateSchedule_request_Target::getDeadLetterConfig() const {
    return m_dead_letter_config;
}
void OAIUpdateSchedule_request_Target::setDeadLetterConfig(const OAIUpdateSchedule_request_Target_DeadLetterConfig &dead_letter_config) {
    m_dead_letter_config = dead_letter_config;
    m_dead_letter_config_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_dead_letter_config_Set() const{
    return m_dead_letter_config_isSet;
}

bool OAIUpdateSchedule_request_Target::is_dead_letter_config_Valid() const{
    return m_dead_letter_config_isValid;
}

OAIUpdateSchedule_request_Target_EcsParameters OAIUpdateSchedule_request_Target::getEcsParameters() const {
    return m_ecs_parameters;
}
void OAIUpdateSchedule_request_Target::setEcsParameters(const OAIUpdateSchedule_request_Target_EcsParameters &ecs_parameters) {
    m_ecs_parameters = ecs_parameters;
    m_ecs_parameters_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_ecs_parameters_Set() const{
    return m_ecs_parameters_isSet;
}

bool OAIUpdateSchedule_request_Target::is_ecs_parameters_Valid() const{
    return m_ecs_parameters_isValid;
}

OAIUpdateSchedule_request_Target_EventBridgeParameters OAIUpdateSchedule_request_Target::getEventBridgeParameters() const {
    return m_event_bridge_parameters;
}
void OAIUpdateSchedule_request_Target::setEventBridgeParameters(const OAIUpdateSchedule_request_Target_EventBridgeParameters &event_bridge_parameters) {
    m_event_bridge_parameters = event_bridge_parameters;
    m_event_bridge_parameters_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_event_bridge_parameters_Set() const{
    return m_event_bridge_parameters_isSet;
}

bool OAIUpdateSchedule_request_Target::is_event_bridge_parameters_Valid() const{
    return m_event_bridge_parameters_isValid;
}

QString OAIUpdateSchedule_request_Target::getInput() const {
    return m_input;
}
void OAIUpdateSchedule_request_Target::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_input_Set() const{
    return m_input_isSet;
}

bool OAIUpdateSchedule_request_Target::is_input_Valid() const{
    return m_input_isValid;
}

OAIUpdateSchedule_request_Target_KinesisParameters OAIUpdateSchedule_request_Target::getKinesisParameters() const {
    return m_kinesis_parameters;
}
void OAIUpdateSchedule_request_Target::setKinesisParameters(const OAIUpdateSchedule_request_Target_KinesisParameters &kinesis_parameters) {
    m_kinesis_parameters = kinesis_parameters;
    m_kinesis_parameters_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_kinesis_parameters_Set() const{
    return m_kinesis_parameters_isSet;
}

bool OAIUpdateSchedule_request_Target::is_kinesis_parameters_Valid() const{
    return m_kinesis_parameters_isValid;
}

OAIUpdateSchedule_request_Target_RetryPolicy OAIUpdateSchedule_request_Target::getRetryPolicy() const {
    return m_retry_policy;
}
void OAIUpdateSchedule_request_Target::setRetryPolicy(const OAIUpdateSchedule_request_Target_RetryPolicy &retry_policy) {
    m_retry_policy = retry_policy;
    m_retry_policy_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_retry_policy_Set() const{
    return m_retry_policy_isSet;
}

bool OAIUpdateSchedule_request_Target::is_retry_policy_Valid() const{
    return m_retry_policy_isValid;
}

QString OAIUpdateSchedule_request_Target::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateSchedule_request_Target::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateSchedule_request_Target::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIUpdateSchedule_request_Target_SageMakerPipelineParameters OAIUpdateSchedule_request_Target::getSageMakerPipelineParameters() const {
    return m_sage_maker_pipeline_parameters;
}
void OAIUpdateSchedule_request_Target::setSageMakerPipelineParameters(const OAIUpdateSchedule_request_Target_SageMakerPipelineParameters &sage_maker_pipeline_parameters) {
    m_sage_maker_pipeline_parameters = sage_maker_pipeline_parameters;
    m_sage_maker_pipeline_parameters_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_sage_maker_pipeline_parameters_Set() const{
    return m_sage_maker_pipeline_parameters_isSet;
}

bool OAIUpdateSchedule_request_Target::is_sage_maker_pipeline_parameters_Valid() const{
    return m_sage_maker_pipeline_parameters_isValid;
}

OAIUpdateSchedule_request_Target_SqsParameters OAIUpdateSchedule_request_Target::getSqsParameters() const {
    return m_sqs_parameters;
}
void OAIUpdateSchedule_request_Target::setSqsParameters(const OAIUpdateSchedule_request_Target_SqsParameters &sqs_parameters) {
    m_sqs_parameters = sqs_parameters;
    m_sqs_parameters_isSet = true;
}

bool OAIUpdateSchedule_request_Target::is_sqs_parameters_Set() const{
    return m_sqs_parameters_isSet;
}

bool OAIUpdateSchedule_request_Target::is_sqs_parameters_Valid() const{
    return m_sqs_parameters_isValid;
}

bool OAIUpdateSchedule_request_Target::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dead_letter_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ecs_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_bridge_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sage_maker_pipeline_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchedule_request_Target::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
