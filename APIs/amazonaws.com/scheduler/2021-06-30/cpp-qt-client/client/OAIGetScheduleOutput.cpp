/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetScheduleOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetScheduleOutput::OAIGetScheduleOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetScheduleOutput::OAIGetScheduleOutput() {
    this->initializeModel();
}

OAIGetScheduleOutput::~OAIGetScheduleOutput() {}

void OAIGetScheduleOutput::initializeModel() {

    m_action_after_completion_isSet = false;
    m_action_after_completion_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_flexible_time_window_isSet = false;
    m_flexible_time_window_isValid = false;

    m_group_name_isSet = false;
    m_group_name_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_last_modification_date_isSet = false;
    m_last_modification_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schedule_expression_isSet = false;
    m_schedule_expression_isValid = false;

    m_schedule_expression_timezone_isSet = false;
    m_schedule_expression_timezone_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIGetScheduleOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetScheduleOutput::fromJsonObject(QJsonObject json) {

    m_action_after_completion_isValid = ::OpenAPI::fromJsonValue(m_action_after_completion, json[QString("ActionAfterCompletion")]);
    m_action_after_completion_isSet = !json[QString("ActionAfterCompletion")].isNull() && m_action_after_completion_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_flexible_time_window_isValid = ::OpenAPI::fromJsonValue(m_flexible_time_window, json[QString("FlexibleTimeWindow")]);
    m_flexible_time_window_isSet = !json[QString("FlexibleTimeWindow")].isNull() && m_flexible_time_window_isValid;

    m_group_name_isValid = ::OpenAPI::fromJsonValue(m_group_name, json[QString("GroupName")]);
    m_group_name_isSet = !json[QString("GroupName")].isNull() && m_group_name_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_last_modification_date_isValid = ::OpenAPI::fromJsonValue(m_last_modification_date, json[QString("LastModificationDate")]);
    m_last_modification_date_isSet = !json[QString("LastModificationDate")].isNull() && m_last_modification_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_schedule_expression_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression, json[QString("ScheduleExpression")]);
    m_schedule_expression_isSet = !json[QString("ScheduleExpression")].isNull() && m_schedule_expression_isValid;

    m_schedule_expression_timezone_isValid = ::OpenAPI::fromJsonValue(m_schedule_expression_timezone, json[QString("ScheduleExpressionTimezone")]);
    m_schedule_expression_timezone_isSet = !json[QString("ScheduleExpressionTimezone")].isNull() && m_schedule_expression_timezone_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;
}

QString OAIGetScheduleOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetScheduleOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_action_after_completion.isSet()) {
        obj.insert(QString("ActionAfterCompletion"), ::OpenAPI::toJsonValue(m_action_after_completion));
    }
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_flexible_time_window.isSet()) {
        obj.insert(QString("FlexibleTimeWindow"), ::OpenAPI::toJsonValue(m_flexible_time_window));
    }
    if (m_group_name_isSet) {
        obj.insert(QString("GroupName"), ::OpenAPI::toJsonValue(m_group_name));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_last_modification_date_isSet) {
        obj.insert(QString("LastModificationDate"), ::OpenAPI::toJsonValue(m_last_modification_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schedule_expression_isSet) {
        obj.insert(QString("ScheduleExpression"), ::OpenAPI::toJsonValue(m_schedule_expression));
    }
    if (m_schedule_expression_timezone_isSet) {
        obj.insert(QString("ScheduleExpressionTimezone"), ::OpenAPI::toJsonValue(m_schedule_expression_timezone));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target.isSet()) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

OAIActionAfterCompletion OAIGetScheduleOutput::getActionAfterCompletion() const {
    return m_action_after_completion;
}
void OAIGetScheduleOutput::setActionAfterCompletion(const OAIActionAfterCompletion &action_after_completion) {
    m_action_after_completion = action_after_completion;
    m_action_after_completion_isSet = true;
}

bool OAIGetScheduleOutput::is_action_after_completion_Set() const{
    return m_action_after_completion_isSet;
}

bool OAIGetScheduleOutput::is_action_after_completion_Valid() const{
    return m_action_after_completion_isValid;
}

QString OAIGetScheduleOutput::getArn() const {
    return m_arn;
}
void OAIGetScheduleOutput::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIGetScheduleOutput::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIGetScheduleOutput::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIGetScheduleOutput::getCreationDate() const {
    return m_creation_date;
}
void OAIGetScheduleOutput::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIGetScheduleOutput::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIGetScheduleOutput::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIGetScheduleOutput::getDescription() const {
    return m_description;
}
void OAIGetScheduleOutput::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetScheduleOutput::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetScheduleOutput::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIGetScheduleOutput::getEndDate() const {
    return m_end_date;
}
void OAIGetScheduleOutput::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGetScheduleOutput::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGetScheduleOutput::is_end_date_Valid() const{
    return m_end_date_isValid;
}

OAIGetScheduleOutput_FlexibleTimeWindow OAIGetScheduleOutput::getFlexibleTimeWindow() const {
    return m_flexible_time_window;
}
void OAIGetScheduleOutput::setFlexibleTimeWindow(const OAIGetScheduleOutput_FlexibleTimeWindow &flexible_time_window) {
    m_flexible_time_window = flexible_time_window;
    m_flexible_time_window_isSet = true;
}

bool OAIGetScheduleOutput::is_flexible_time_window_Set() const{
    return m_flexible_time_window_isSet;
}

bool OAIGetScheduleOutput::is_flexible_time_window_Valid() const{
    return m_flexible_time_window_isValid;
}

QString OAIGetScheduleOutput::getGroupName() const {
    return m_group_name;
}
void OAIGetScheduleOutput::setGroupName(const QString &group_name) {
    m_group_name = group_name;
    m_group_name_isSet = true;
}

bool OAIGetScheduleOutput::is_group_name_Set() const{
    return m_group_name_isSet;
}

bool OAIGetScheduleOutput::is_group_name_Valid() const{
    return m_group_name_isValid;
}

QString OAIGetScheduleOutput::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIGetScheduleOutput::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIGetScheduleOutput::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIGetScheduleOutput::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QDateTime OAIGetScheduleOutput::getLastModificationDate() const {
    return m_last_modification_date;
}
void OAIGetScheduleOutput::setLastModificationDate(const QDateTime &last_modification_date) {
    m_last_modification_date = last_modification_date;
    m_last_modification_date_isSet = true;
}

bool OAIGetScheduleOutput::is_last_modification_date_Set() const{
    return m_last_modification_date_isSet;
}

bool OAIGetScheduleOutput::is_last_modification_date_Valid() const{
    return m_last_modification_date_isValid;
}

QString OAIGetScheduleOutput::getName() const {
    return m_name;
}
void OAIGetScheduleOutput::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetScheduleOutput::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetScheduleOutput::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetScheduleOutput::getScheduleExpression() const {
    return m_schedule_expression;
}
void OAIGetScheduleOutput::setScheduleExpression(const QString &schedule_expression) {
    m_schedule_expression = schedule_expression;
    m_schedule_expression_isSet = true;
}

bool OAIGetScheduleOutput::is_schedule_expression_Set() const{
    return m_schedule_expression_isSet;
}

bool OAIGetScheduleOutput::is_schedule_expression_Valid() const{
    return m_schedule_expression_isValid;
}

QString OAIGetScheduleOutput::getScheduleExpressionTimezone() const {
    return m_schedule_expression_timezone;
}
void OAIGetScheduleOutput::setScheduleExpressionTimezone(const QString &schedule_expression_timezone) {
    m_schedule_expression_timezone = schedule_expression_timezone;
    m_schedule_expression_timezone_isSet = true;
}

bool OAIGetScheduleOutput::is_schedule_expression_timezone_Set() const{
    return m_schedule_expression_timezone_isSet;
}

bool OAIGetScheduleOutput::is_schedule_expression_timezone_Valid() const{
    return m_schedule_expression_timezone_isValid;
}

QDateTime OAIGetScheduleOutput::getStartDate() const {
    return m_start_date;
}
void OAIGetScheduleOutput::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGetScheduleOutput::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGetScheduleOutput::is_start_date_Valid() const{
    return m_start_date_isValid;
}

OAIScheduleState OAIGetScheduleOutput::getState() const {
    return m_state;
}
void OAIGetScheduleOutput::setState(const OAIScheduleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGetScheduleOutput::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGetScheduleOutput::is_state_Valid() const{
    return m_state_isValid;
}

OAIGetScheduleOutput_Target OAIGetScheduleOutput::getTarget() const {
    return m_target;
}
void OAIGetScheduleOutput::setTarget(const OAIGetScheduleOutput_Target &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIGetScheduleOutput::is_target_Set() const{
    return m_target_isSet;
}

bool OAIGetScheduleOutput::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIGetScheduleOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_after_completion.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flexible_time_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_expression_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetScheduleOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
