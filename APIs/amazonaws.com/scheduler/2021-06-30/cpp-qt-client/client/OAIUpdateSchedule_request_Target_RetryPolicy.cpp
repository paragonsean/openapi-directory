/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchedule_request_Target_RetryPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchedule_request_Target_RetryPolicy::OAIUpdateSchedule_request_Target_RetryPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchedule_request_Target_RetryPolicy::OAIUpdateSchedule_request_Target_RetryPolicy() {
    this->initializeModel();
}

OAIUpdateSchedule_request_Target_RetryPolicy::~OAIUpdateSchedule_request_Target_RetryPolicy() {}

void OAIUpdateSchedule_request_Target_RetryPolicy::initializeModel() {

    m_maximum_event_age_in_seconds_isSet = false;
    m_maximum_event_age_in_seconds_isValid = false;

    m_maximum_retry_attempts_isSet = false;
    m_maximum_retry_attempts_isValid = false;
}

void OAIUpdateSchedule_request_Target_RetryPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchedule_request_Target_RetryPolicy::fromJsonObject(QJsonObject json) {

    m_maximum_event_age_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_maximum_event_age_in_seconds, json[QString("MaximumEventAgeInSeconds")]);
    m_maximum_event_age_in_seconds_isSet = !json[QString("MaximumEventAgeInSeconds")].isNull() && m_maximum_event_age_in_seconds_isValid;

    m_maximum_retry_attempts_isValid = ::OpenAPI::fromJsonValue(m_maximum_retry_attempts, json[QString("MaximumRetryAttempts")]);
    m_maximum_retry_attempts_isSet = !json[QString("MaximumRetryAttempts")].isNull() && m_maximum_retry_attempts_isValid;
}

QString OAIUpdateSchedule_request_Target_RetryPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchedule_request_Target_RetryPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_event_age_in_seconds_isSet) {
        obj.insert(QString("MaximumEventAgeInSeconds"), ::OpenAPI::toJsonValue(m_maximum_event_age_in_seconds));
    }
    if (m_maximum_retry_attempts_isSet) {
        obj.insert(QString("MaximumRetryAttempts"), ::OpenAPI::toJsonValue(m_maximum_retry_attempts));
    }
    return obj;
}

qint32 OAIUpdateSchedule_request_Target_RetryPolicy::getMaximumEventAgeInSeconds() const {
    return m_maximum_event_age_in_seconds;
}
void OAIUpdateSchedule_request_Target_RetryPolicy::setMaximumEventAgeInSeconds(const qint32 &maximum_event_age_in_seconds) {
    m_maximum_event_age_in_seconds = maximum_event_age_in_seconds;
    m_maximum_event_age_in_seconds_isSet = true;
}

bool OAIUpdateSchedule_request_Target_RetryPolicy::is_maximum_event_age_in_seconds_Set() const{
    return m_maximum_event_age_in_seconds_isSet;
}

bool OAIUpdateSchedule_request_Target_RetryPolicy::is_maximum_event_age_in_seconds_Valid() const{
    return m_maximum_event_age_in_seconds_isValid;
}

qint32 OAIUpdateSchedule_request_Target_RetryPolicy::getMaximumRetryAttempts() const {
    return m_maximum_retry_attempts;
}
void OAIUpdateSchedule_request_Target_RetryPolicy::setMaximumRetryAttempts(const qint32 &maximum_retry_attempts) {
    m_maximum_retry_attempts = maximum_retry_attempts;
    m_maximum_retry_attempts_isSet = true;
}

bool OAIUpdateSchedule_request_Target_RetryPolicy::is_maximum_retry_attempts_Set() const{
    return m_maximum_retry_attempts_isSet;
}

bool OAIUpdateSchedule_request_Target_RetryPolicy::is_maximum_retry_attempts_Valid() const{
    return m_maximum_retry_attempts_isValid;
}

bool OAIUpdateSchedule_request_Target_RetryPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_event_age_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_retry_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchedule_request_Target_RetryPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
