/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEcsParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEcsParameters::OAIEcsParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEcsParameters::OAIEcsParameters() {
    this->initializeModel();
}

OAIEcsParameters::~OAIEcsParameters() {}

void OAIEcsParameters::initializeModel() {

    m_capacity_provider_strategy_isSet = false;
    m_capacity_provider_strategy_isValid = false;

    m_enable_ecs_managed_tags_isSet = false;
    m_enable_ecs_managed_tags_isValid = false;

    m_enable_execute_command_isSet = false;
    m_enable_execute_command_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_launch_type_isSet = false;
    m_launch_type_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_placement_strategy_isSet = false;
    m_placement_strategy_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;

    m_propagate_tags_isSet = false;
    m_propagate_tags_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_task_count_isSet = false;
    m_task_count_isValid = false;

    m_task_definition_arn_isSet = false;
    m_task_definition_arn_isValid = false;
}

void OAIEcsParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEcsParameters::fromJsonObject(QJsonObject json) {

    m_capacity_provider_strategy_isValid = ::OpenAPI::fromJsonValue(m_capacity_provider_strategy, json[QString("CapacityProviderStrategy")]);
    m_capacity_provider_strategy_isSet = !json[QString("CapacityProviderStrategy")].isNull() && m_capacity_provider_strategy_isValid;

    m_enable_ecs_managed_tags_isValid = ::OpenAPI::fromJsonValue(m_enable_ecs_managed_tags, json[QString("EnableECSManagedTags")]);
    m_enable_ecs_managed_tags_isSet = !json[QString("EnableECSManagedTags")].isNull() && m_enable_ecs_managed_tags_isValid;

    m_enable_execute_command_isValid = ::OpenAPI::fromJsonValue(m_enable_execute_command, json[QString("EnableExecuteCommand")]);
    m_enable_execute_command_isSet = !json[QString("EnableExecuteCommand")].isNull() && m_enable_execute_command_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_launch_type_isValid = ::OpenAPI::fromJsonValue(m_launch_type, json[QString("LaunchType")]);
    m_launch_type_isSet = !json[QString("LaunchType")].isNull() && m_launch_type_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("NetworkConfiguration")]);
    m_network_configuration_isSet = !json[QString("NetworkConfiguration")].isNull() && m_network_configuration_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("PlacementConstraints")]);
    m_placement_constraints_isSet = !json[QString("PlacementConstraints")].isNull() && m_placement_constraints_isValid;

    m_placement_strategy_isValid = ::OpenAPI::fromJsonValue(m_placement_strategy, json[QString("PlacementStrategy")]);
    m_placement_strategy_isSet = !json[QString("PlacementStrategy")].isNull() && m_placement_strategy_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("PlatformVersion")]);
    m_platform_version_isSet = !json[QString("PlatformVersion")].isNull() && m_platform_version_isValid;

    m_propagate_tags_isValid = ::OpenAPI::fromJsonValue(m_propagate_tags, json[QString("PropagateTags")]);
    m_propagate_tags_isSet = !json[QString("PropagateTags")].isNull() && m_propagate_tags_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceId")]);
    m_reference_id_isSet = !json[QString("ReferenceId")].isNull() && m_reference_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_task_count_isValid = ::OpenAPI::fromJsonValue(m_task_count, json[QString("TaskCount")]);
    m_task_count_isSet = !json[QString("TaskCount")].isNull() && m_task_count_isValid;

    m_task_definition_arn_isValid = ::OpenAPI::fromJsonValue(m_task_definition_arn, json[QString("TaskDefinitionArn")]);
    m_task_definition_arn_isSet = !json[QString("TaskDefinitionArn")].isNull() && m_task_definition_arn_isValid;
}

QString OAIEcsParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEcsParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity_provider_strategy.isSet()) {
        obj.insert(QString("CapacityProviderStrategy"), ::OpenAPI::toJsonValue(m_capacity_provider_strategy));
    }
    if (m_enable_ecs_managed_tags_isSet) {
        obj.insert(QString("EnableECSManagedTags"), ::OpenAPI::toJsonValue(m_enable_ecs_managed_tags));
    }
    if (m_enable_execute_command_isSet) {
        obj.insert(QString("EnableExecuteCommand"), ::OpenAPI::toJsonValue(m_enable_execute_command));
    }
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_launch_type.isSet()) {
        obj.insert(QString("LaunchType"), ::OpenAPI::toJsonValue(m_launch_type));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("NetworkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_placement_constraints.isSet()) {
        obj.insert(QString("PlacementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_placement_strategy.isSet()) {
        obj.insert(QString("PlacementStrategy"), ::OpenAPI::toJsonValue(m_placement_strategy));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("PlatformVersion"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    if (m_propagate_tags.isSet()) {
        obj.insert(QString("PropagateTags"), ::OpenAPI::toJsonValue(m_propagate_tags));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_task_count_isSet) {
        obj.insert(QString("TaskCount"), ::OpenAPI::toJsonValue(m_task_count));
    }
    if (m_task_definition_arn_isSet) {
        obj.insert(QString("TaskDefinitionArn"), ::OpenAPI::toJsonValue(m_task_definition_arn));
    }
    return obj;
}

QList OAIEcsParameters::getCapacityProviderStrategy() const {
    return m_capacity_provider_strategy;
}
void OAIEcsParameters::setCapacityProviderStrategy(const QList &capacity_provider_strategy) {
    m_capacity_provider_strategy = capacity_provider_strategy;
    m_capacity_provider_strategy_isSet = true;
}

bool OAIEcsParameters::is_capacity_provider_strategy_Set() const{
    return m_capacity_provider_strategy_isSet;
}

bool OAIEcsParameters::is_capacity_provider_strategy_Valid() const{
    return m_capacity_provider_strategy_isValid;
}

bool OAIEcsParameters::getEnableEcsManagedTags() const {
    return m_enable_ecs_managed_tags;
}
void OAIEcsParameters::setEnableEcsManagedTags(const bool &enable_ecs_managed_tags) {
    m_enable_ecs_managed_tags = enable_ecs_managed_tags;
    m_enable_ecs_managed_tags_isSet = true;
}

bool OAIEcsParameters::is_enable_ecs_managed_tags_Set() const{
    return m_enable_ecs_managed_tags_isSet;
}

bool OAIEcsParameters::is_enable_ecs_managed_tags_Valid() const{
    return m_enable_ecs_managed_tags_isValid;
}

bool OAIEcsParameters::getEnableExecuteCommand() const {
    return m_enable_execute_command;
}
void OAIEcsParameters::setEnableExecuteCommand(const bool &enable_execute_command) {
    m_enable_execute_command = enable_execute_command;
    m_enable_execute_command_isSet = true;
}

bool OAIEcsParameters::is_enable_execute_command_Set() const{
    return m_enable_execute_command_isSet;
}

bool OAIEcsParameters::is_enable_execute_command_Valid() const{
    return m_enable_execute_command_isValid;
}

QString OAIEcsParameters::getGroup() const {
    return m_group;
}
void OAIEcsParameters::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIEcsParameters::is_group_Set() const{
    return m_group_isSet;
}

bool OAIEcsParameters::is_group_Valid() const{
    return m_group_isValid;
}

OAILaunchType OAIEcsParameters::getLaunchType() const {
    return m_launch_type;
}
void OAIEcsParameters::setLaunchType(const OAILaunchType &launch_type) {
    m_launch_type = launch_type;
    m_launch_type_isSet = true;
}

bool OAIEcsParameters::is_launch_type_Set() const{
    return m_launch_type_isSet;
}

bool OAIEcsParameters::is_launch_type_Valid() const{
    return m_launch_type_isValid;
}

OAIEcsParameters_NetworkConfiguration OAIEcsParameters::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIEcsParameters::setNetworkConfiguration(const OAIEcsParameters_NetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIEcsParameters::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIEcsParameters::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

QList OAIEcsParameters::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIEcsParameters::setPlacementConstraints(const QList &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIEcsParameters::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIEcsParameters::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList OAIEcsParameters::getPlacementStrategy() const {
    return m_placement_strategy;
}
void OAIEcsParameters::setPlacementStrategy(const QList &placement_strategy) {
    m_placement_strategy = placement_strategy;
    m_placement_strategy_isSet = true;
}

bool OAIEcsParameters::is_placement_strategy_Set() const{
    return m_placement_strategy_isSet;
}

bool OAIEcsParameters::is_placement_strategy_Valid() const{
    return m_placement_strategy_isValid;
}

QString OAIEcsParameters::getPlatformVersion() const {
    return m_platform_version;
}
void OAIEcsParameters::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIEcsParameters::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIEcsParameters::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

OAIPropagateTags OAIEcsParameters::getPropagateTags() const {
    return m_propagate_tags;
}
void OAIEcsParameters::setPropagateTags(const OAIPropagateTags &propagate_tags) {
    m_propagate_tags = propagate_tags;
    m_propagate_tags_isSet = true;
}

bool OAIEcsParameters::is_propagate_tags_Set() const{
    return m_propagate_tags_isSet;
}

bool OAIEcsParameters::is_propagate_tags_Valid() const{
    return m_propagate_tags_isValid;
}

QString OAIEcsParameters::getReferenceId() const {
    return m_reference_id;
}
void OAIEcsParameters::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIEcsParameters::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIEcsParameters::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QList OAIEcsParameters::getTags() const {
    return m_tags;
}
void OAIEcsParameters::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIEcsParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIEcsParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAIEcsParameters::getTaskCount() const {
    return m_task_count;
}
void OAIEcsParameters::setTaskCount(const qint32 &task_count) {
    m_task_count = task_count;
    m_task_count_isSet = true;
}

bool OAIEcsParameters::is_task_count_Set() const{
    return m_task_count_isSet;
}

bool OAIEcsParameters::is_task_count_Valid() const{
    return m_task_count_isValid;
}

QString OAIEcsParameters::getTaskDefinitionArn() const {
    return m_task_definition_arn;
}
void OAIEcsParameters::setTaskDefinitionArn(const QString &task_definition_arn) {
    m_task_definition_arn = task_definition_arn;
    m_task_definition_arn_isSet = true;
}

bool OAIEcsParameters::is_task_definition_arn_Set() const{
    return m_task_definition_arn_isSet;
}

bool OAIEcsParameters::is_task_definition_arn_Valid() const{
    return m_task_definition_arn_isValid;
}

bool OAIEcsParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity_provider_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_ecs_managed_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_execute_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_propagate_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_definition_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEcsParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_definition_arn_isValid && true;
}

} // namespace OpenAPI
