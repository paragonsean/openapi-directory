/**
 * Amazon EventBridge Scheduler
 *  Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks from one central, managed service. EventBridge Scheduler delivers your tasks reliably, with built-in mechanisms that adjust your schedules based on the availability of downstream targets. The following reference lists the available API actions, and data types for EventBridge Scheduler. 
 *
 * The version of the OpenAPI document: 2021-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListScheduleGroupsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListScheduleGroupsOutput::OAIListScheduleGroupsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListScheduleGroupsOutput::OAIListScheduleGroupsOutput() {
    this->initializeModel();
}

OAIListScheduleGroupsOutput::~OAIListScheduleGroupsOutput() {}

void OAIListScheduleGroupsOutput::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_schedule_groups_isSet = false;
    m_schedule_groups_isValid = false;
}

void OAIListScheduleGroupsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListScheduleGroupsOutput::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_schedule_groups_isValid = ::OpenAPI::fromJsonValue(m_schedule_groups, json[QString("ScheduleGroups")]);
    m_schedule_groups_isSet = !json[QString("ScheduleGroups")].isNull() && m_schedule_groups_isValid;
}

QString OAIListScheduleGroupsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListScheduleGroupsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_schedule_groups.isSet()) {
        obj.insert(QString("ScheduleGroups"), ::OpenAPI::toJsonValue(m_schedule_groups));
    }
    return obj;
}

QString OAIListScheduleGroupsOutput::getNextToken() const {
    return m_next_token;
}
void OAIListScheduleGroupsOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListScheduleGroupsOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListScheduleGroupsOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListScheduleGroupsOutput::getScheduleGroups() const {
    return m_schedule_groups;
}
void OAIListScheduleGroupsOutput::setScheduleGroups(const QList &schedule_groups) {
    m_schedule_groups = schedule_groups;
    m_schedule_groups_isSet = true;
}

bool OAIListScheduleGroupsOutput::is_schedule_groups_Set() const{
    return m_schedule_groups_isSet;
}

bool OAIListScheduleGroupsOutput::is_schedule_groups_Valid() const{
    return m_schedule_groups_isValid;
}

bool OAIListScheduleGroupsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListScheduleGroupsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schedule_groups_isValid && true;
}

} // namespace OpenAPI
