# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateScheduleGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, tags: List[Tag]=None):
        """CreateScheduleGroupRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateScheduleGroupRequest.
        :param tags: The tags of this CreateScheduleGroupRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateScheduleGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateScheduleGroup_request of this CreateScheduleGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateScheduleGroupRequest.

         Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency. 

        :return: The client_token of this CreateScheduleGroupRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateScheduleGroupRequest.

         Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency. 

        :param client_token: The client_token of this CreateScheduleGroupRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateScheduleGroupRequest.

        The list of tags to associate with the schedule group.

        :return: The tags of this CreateScheduleGroupRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateScheduleGroupRequest.

        The list of tags to associate with the schedule group.

        :param tags: The tags of this CreateScheduleGroupRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 200:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `200`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
