# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_schedule_request_flexible_time_window import UpdateScheduleRequestFlexibleTimeWindow
from openapi_server.models.update_schedule_request_target import UpdateScheduleRequestTarget
import re
from openapi_server import util


class UpdateScheduleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_after_completion: str=None, client_token: str=None, description: str=None, end_date: datetime=None, flexible_time_window: UpdateScheduleRequestFlexibleTimeWindow=None, group_name: str=None, kms_key_arn: str=None, schedule_expression: str=None, schedule_expression_timezone: str=None, start_date: datetime=None, state: str=None, target: UpdateScheduleRequestTarget=None):
        """UpdateScheduleRequest - a model defined in OpenAPI

        :param action_after_completion: The action_after_completion of this UpdateScheduleRequest.
        :param client_token: The client_token of this UpdateScheduleRequest.
        :param description: The description of this UpdateScheduleRequest.
        :param end_date: The end_date of this UpdateScheduleRequest.
        :param flexible_time_window: The flexible_time_window of this UpdateScheduleRequest.
        :param group_name: The group_name of this UpdateScheduleRequest.
        :param kms_key_arn: The kms_key_arn of this UpdateScheduleRequest.
        :param schedule_expression: The schedule_expression of this UpdateScheduleRequest.
        :param schedule_expression_timezone: The schedule_expression_timezone of this UpdateScheduleRequest.
        :param start_date: The start_date of this UpdateScheduleRequest.
        :param state: The state of this UpdateScheduleRequest.
        :param target: The target of this UpdateScheduleRequest.
        """
        self.openapi_types = {
            'action_after_completion': str,
            'client_token': str,
            'description': str,
            'end_date': datetime,
            'flexible_time_window': UpdateScheduleRequestFlexibleTimeWindow,
            'group_name': str,
            'kms_key_arn': str,
            'schedule_expression': str,
            'schedule_expression_timezone': str,
            'start_date': datetime,
            'state': str,
            'target': UpdateScheduleRequestTarget
        }

        self.attribute_map = {
            'action_after_completion': 'ActionAfterCompletion',
            'client_token': 'ClientToken',
            'description': 'Description',
            'end_date': 'EndDate',
            'flexible_time_window': 'FlexibleTimeWindow',
            'group_name': 'GroupName',
            'kms_key_arn': 'KmsKeyArn',
            'schedule_expression': 'ScheduleExpression',
            'schedule_expression_timezone': 'ScheduleExpressionTimezone',
            'start_date': 'StartDate',
            'state': 'State',
            'target': 'Target'
        }

        self._action_after_completion = action_after_completion
        self._client_token = client_token
        self._description = description
        self._end_date = end_date
        self._flexible_time_window = flexible_time_window
        self._group_name = group_name
        self._kms_key_arn = kms_key_arn
        self._schedule_expression = schedule_expression
        self._schedule_expression_timezone = schedule_expression_timezone
        self._start_date = start_date
        self._state = state
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateScheduleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSchedule_request of this UpdateScheduleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_after_completion(self):
        """Gets the action_after_completion of this UpdateScheduleRequest.

        Specifies the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.

        :return: The action_after_completion of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._action_after_completion

    @action_after_completion.setter
    def action_after_completion(self, action_after_completion):
        """Sets the action_after_completion of this UpdateScheduleRequest.

        Specifies the action that EventBridge Scheduler applies to the schedule after the schedule completes invoking the target.

        :param action_after_completion: The action_after_completion of this UpdateScheduleRequest.
        :type action_after_completion: str
        """
        allowed_values = ["NONE", "DELETE"]  # noqa: E501
        if action_after_completion not in allowed_values:
            raise ValueError(
                "Invalid value for `action_after_completion` ({0}), must be one of {1}"
                .format(action_after_completion, allowed_values)
            )

        self._action_after_completion = action_after_completion

    @property
    def client_token(self):
        """Gets the client_token of this UpdateScheduleRequest.

         Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency. 

        :return: The client_token of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateScheduleRequest.

         Unique, case-sensitive identifier you provide to ensure the idempotency of the request. If you do not specify a client token, EventBridge Scheduler uses a randomly generated token for the request to ensure idempotency. 

        :param client_token: The client_token of this UpdateScheduleRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^[a-zA-Z0-9-_]+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^[a-zA-Z0-9-_]+$/`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this UpdateScheduleRequest.

        The description you specify for the schedule.

        :return: The description of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateScheduleRequest.

        The description you specify for the schedule.

        :param description: The description of this UpdateScheduleRequest.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this UpdateScheduleRequest.

        The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.

        :return: The end_date of this UpdateScheduleRequest.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this UpdateScheduleRequest.

        The date, in UTC, before which the schedule can invoke its target. Depending on the schedule's recurrence expression, invocations might stop on, or before, the <code>EndDate</code> you specify. EventBridge Scheduler ignores <code>EndDate</code> for one-time schedules.

        :param end_date: The end_date of this UpdateScheduleRequest.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def flexible_time_window(self):
        """Gets the flexible_time_window of this UpdateScheduleRequest.


        :return: The flexible_time_window of this UpdateScheduleRequest.
        :rtype: UpdateScheduleRequestFlexibleTimeWindow
        """
        return self._flexible_time_window

    @flexible_time_window.setter
    def flexible_time_window(self, flexible_time_window):
        """Sets the flexible_time_window of this UpdateScheduleRequest.


        :param flexible_time_window: The flexible_time_window of this UpdateScheduleRequest.
        :type flexible_time_window: UpdateScheduleRequestFlexibleTimeWindow
        """
        if flexible_time_window is None:
            raise ValueError("Invalid value for `flexible_time_window`, must not be `None`")

        self._flexible_time_window = flexible_time_window

    @property
    def group_name(self):
        """Gets the group_name of this UpdateScheduleRequest.

        The name of the schedule group with which the schedule is associated. You must provide this value in order for EventBridge Scheduler to find the schedule you want to update. If you omit this value, EventBridge Scheduler assumes the group is associated to the default group.

        :return: The group_name of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this UpdateScheduleRequest.

        The name of the schedule group with which the schedule is associated. You must provide this value in order for EventBridge Scheduler to find the schedule you want to update. If you omit this value, EventBridge Scheduler assumes the group is associated to the default group.

        :param group_name: The group_name of this UpdateScheduleRequest.
        :type group_name: str
        """
        if group_name is not None and len(group_name) > 64:
            raise ValueError("Invalid value for `group_name`, length must be less than or equal to `64`")
        if group_name is not None and len(group_name) < 1:
            raise ValueError("Invalid value for `group_name`, length must be greater than or equal to `1`")
        if group_name is not None and not re.search(r'^[0-9a-zA-Z-_.]+$', group_name):
            raise ValueError("Invalid value for `group_name`, must be a follow pattern or equal to `/^[0-9a-zA-Z-_.]+$/`")

        self._group_name = group_name

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this UpdateScheduleRequest.

        The ARN for the customer managed KMS key that that you want EventBridge Scheduler to use to encrypt and decrypt your data.

        :return: The kms_key_arn of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this UpdateScheduleRequest.

        The ARN for the customer managed KMS key that that you want EventBridge Scheduler to use to encrypt and decrypt your data.

        :param kms_key_arn: The kms_key_arn of this UpdateScheduleRequest.
        :type kms_key_arn: str
        """
        if kms_key_arn is not None and len(kms_key_arn) > 2048:
            raise ValueError("Invalid value for `kms_key_arn`, length must be less than or equal to `2048`")
        if kms_key_arn is not None and len(kms_key_arn) < 1:
            raise ValueError("Invalid value for `kms_key_arn`, length must be greater than or equal to `1`")
        if kms_key_arn is not None and not re.search(r'^arn:aws(-[a-z]+)?:kms:[a-z0-9\-]+:\d{12}:(key|alias)\/[0-9a-zA-Z-_]*$', kms_key_arn):
            raise ValueError("Invalid value for `kms_key_arn`, must be a follow pattern or equal to `/^arn:aws(-[a-z]+)?:kms:[a-z0-9\-]+:\d{12}:(key|alias)\/[0-9a-zA-Z-_]*$/`")

        self._kms_key_arn = kms_key_arn

    @property
    def schedule_expression(self):
        """Gets the schedule_expression of this UpdateScheduleRequest.

        <p> The expression that defines when the schedule runs. The following formats are supported. </p> <ul> <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li> <li> <p> <code>rate</code> expression - <code>rate(value unit)</code> </p> </li> <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li> </ul> <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p> <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p> <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p> <p> For more information and examples, see <a href=\"https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html\">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>

        :return: The schedule_expression of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._schedule_expression

    @schedule_expression.setter
    def schedule_expression(self, schedule_expression):
        """Sets the schedule_expression of this UpdateScheduleRequest.

        <p> The expression that defines when the schedule runs. The following formats are supported. </p> <ul> <li> <p> <code>at</code> expression - <code>at(yyyy-mm-ddThh:mm:ss)</code> </p> </li> <li> <p> <code>rate</code> expression - <code>rate(value unit)</code> </p> </li> <li> <p> <code>cron</code> expression - <code>cron(fields)</code> </p> </li> </ul> <p> You can use <code>at</code> expressions to create one-time schedules that invoke a target once, at the time and in the time zone, that you specify. You can use <code>rate</code> and <code>cron</code> expressions to create recurring schedules. Rate-based schedules are useful when you want to invoke a target at regular intervals, such as every 15 minutes or every five days. Cron-based schedules are useful when you want to invoke a target periodically at a specific time, such as at 8:00 am (UTC+0) every 1st day of the month. </p> <p> A <code>cron</code> expression consists of six fields separated by white spaces: <code>(minutes hours day_of_month month day_of_week year)</code>. </p> <p> A <code>rate</code> expression consists of a <i>value</i> as a positive integer, and a <i>unit</i> with the following options: <code>minute</code> | <code>minutes</code> | <code>hour</code> | <code>hours</code> | <code>day</code> | <code>days</code> </p> <p> For more information and examples, see <a href=\"https://docs.aws.amazon.com/scheduler/latest/UserGuide/schedule-types.html\">Schedule types on EventBridge Scheduler</a> in the <i>EventBridge Scheduler User Guide</i>. </p>

        :param schedule_expression: The schedule_expression of this UpdateScheduleRequest.
        :type schedule_expression: str
        """
        if schedule_expression is None:
            raise ValueError("Invalid value for `schedule_expression`, must not be `None`")
        if schedule_expression is not None and len(schedule_expression) > 256:
            raise ValueError("Invalid value for `schedule_expression`, length must be less than or equal to `256`")
        if schedule_expression is not None and len(schedule_expression) < 1:
            raise ValueError("Invalid value for `schedule_expression`, length must be greater than or equal to `1`")

        self._schedule_expression = schedule_expression

    @property
    def schedule_expression_timezone(self):
        """Gets the schedule_expression_timezone of this UpdateScheduleRequest.

        The timezone in which the scheduling expression is evaluated.

        :return: The schedule_expression_timezone of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._schedule_expression_timezone

    @schedule_expression_timezone.setter
    def schedule_expression_timezone(self, schedule_expression_timezone):
        """Sets the schedule_expression_timezone of this UpdateScheduleRequest.

        The timezone in which the scheduling expression is evaluated.

        :param schedule_expression_timezone: The schedule_expression_timezone of this UpdateScheduleRequest.
        :type schedule_expression_timezone: str
        """
        if schedule_expression_timezone is not None and len(schedule_expression_timezone) > 50:
            raise ValueError("Invalid value for `schedule_expression_timezone`, length must be less than or equal to `50`")
        if schedule_expression_timezone is not None and len(schedule_expression_timezone) < 1:
            raise ValueError("Invalid value for `schedule_expression_timezone`, length must be greater than or equal to `1`")

        self._schedule_expression_timezone = schedule_expression_timezone

    @property
    def start_date(self):
        """Gets the start_date of this UpdateScheduleRequest.

        The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.

        :return: The start_date of this UpdateScheduleRequest.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this UpdateScheduleRequest.

        The date, in UTC, after which the schedule can begin invoking its target. Depending on the schedule's recurrence expression, invocations might occur on, or after, the <code>StartDate</code> you specify. EventBridge Scheduler ignores <code>StartDate</code> for one-time schedules.

        :param start_date: The start_date of this UpdateScheduleRequest.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def state(self):
        """Gets the state of this UpdateScheduleRequest.

        Specifies whether the schedule is enabled or disabled.

        :return: The state of this UpdateScheduleRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateScheduleRequest.

        Specifies whether the schedule is enabled or disabled.

        :param state: The state of this UpdateScheduleRequest.
        :type state: str
        """
        allowed_values = ["ENABLED", "DISABLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target(self):
        """Gets the target of this UpdateScheduleRequest.


        :return: The target of this UpdateScheduleRequest.
        :rtype: UpdateScheduleRequestTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this UpdateScheduleRequest.


        :param target: The target of this UpdateScheduleRequest.
        :type target: UpdateScheduleRequestTarget
        """
        if target is None:
            raise ValueError("Invalid value for `target`, must not be `None`")

        self._target = target
