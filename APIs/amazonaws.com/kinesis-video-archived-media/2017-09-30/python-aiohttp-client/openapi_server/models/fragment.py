# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Fragment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fragment_number: str=None, fragment_size_in_bytes: int=None, producer_timestamp: datetime=None, server_timestamp: datetime=None, fragment_length_in_milliseconds: int=None):
        """Fragment - a model defined in OpenAPI

        :param fragment_number: The fragment_number of this Fragment.
        :param fragment_size_in_bytes: The fragment_size_in_bytes of this Fragment.
        :param producer_timestamp: The producer_timestamp of this Fragment.
        :param server_timestamp: The server_timestamp of this Fragment.
        :param fragment_length_in_milliseconds: The fragment_length_in_milliseconds of this Fragment.
        """
        self.openapi_types = {
            'fragment_number': str,
            'fragment_size_in_bytes': int,
            'producer_timestamp': datetime,
            'server_timestamp': datetime,
            'fragment_length_in_milliseconds': int
        }

        self.attribute_map = {
            'fragment_number': 'FragmentNumber',
            'fragment_size_in_bytes': 'FragmentSizeInBytes',
            'producer_timestamp': 'ProducerTimestamp',
            'server_timestamp': 'ServerTimestamp',
            'fragment_length_in_milliseconds': 'FragmentLengthInMilliseconds'
        }

        self._fragment_number = fragment_number
        self._fragment_size_in_bytes = fragment_size_in_bytes
        self._producer_timestamp = producer_timestamp
        self._server_timestamp = server_timestamp
        self._fragment_length_in_milliseconds = fragment_length_in_milliseconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fragment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fragment of this Fragment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fragment_number(self):
        """Gets the fragment_number of this Fragment.


        :return: The fragment_number of this Fragment.
        :rtype: str
        """
        return self._fragment_number

    @fragment_number.setter
    def fragment_number(self, fragment_number):
        """Sets the fragment_number of this Fragment.


        :param fragment_number: The fragment_number of this Fragment.
        :type fragment_number: str
        """

        self._fragment_number = fragment_number

    @property
    def fragment_size_in_bytes(self):
        """Gets the fragment_size_in_bytes of this Fragment.


        :return: The fragment_size_in_bytes of this Fragment.
        :rtype: int
        """
        return self._fragment_size_in_bytes

    @fragment_size_in_bytes.setter
    def fragment_size_in_bytes(self, fragment_size_in_bytes):
        """Sets the fragment_size_in_bytes of this Fragment.


        :param fragment_size_in_bytes: The fragment_size_in_bytes of this Fragment.
        :type fragment_size_in_bytes: int
        """

        self._fragment_size_in_bytes = fragment_size_in_bytes

    @property
    def producer_timestamp(self):
        """Gets the producer_timestamp of this Fragment.


        :return: The producer_timestamp of this Fragment.
        :rtype: datetime
        """
        return self._producer_timestamp

    @producer_timestamp.setter
    def producer_timestamp(self, producer_timestamp):
        """Sets the producer_timestamp of this Fragment.


        :param producer_timestamp: The producer_timestamp of this Fragment.
        :type producer_timestamp: datetime
        """

        self._producer_timestamp = producer_timestamp

    @property
    def server_timestamp(self):
        """Gets the server_timestamp of this Fragment.


        :return: The server_timestamp of this Fragment.
        :rtype: datetime
        """
        return self._server_timestamp

    @server_timestamp.setter
    def server_timestamp(self, server_timestamp):
        """Sets the server_timestamp of this Fragment.


        :param server_timestamp: The server_timestamp of this Fragment.
        :type server_timestamp: datetime
        """

        self._server_timestamp = server_timestamp

    @property
    def fragment_length_in_milliseconds(self):
        """Gets the fragment_length_in_milliseconds of this Fragment.


        :return: The fragment_length_in_milliseconds of this Fragment.
        :rtype: int
        """
        return self._fragment_length_in_milliseconds

    @fragment_length_in_milliseconds.setter
    def fragment_length_in_milliseconds(self, fragment_length_in_milliseconds):
        """Sets the fragment_length_in_milliseconds of this Fragment.


        :param fragment_length_in_milliseconds: The fragment_length_in_milliseconds of this Fragment.
        :type fragment_length_in_milliseconds: int
        """

        self._fragment_length_in_milliseconds = fragment_length_in_milliseconds
