# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_fragments_input_fragment_selector import ListFragmentsInputFragmentSelector
from openapi_server import util


class ListFragmentsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_name: str=None, stream_arn: str=None, max_results: int=None, next_token: str=None, fragment_selector: ListFragmentsInputFragmentSelector=None):
        """ListFragmentsInput - a model defined in OpenAPI

        :param stream_name: The stream_name of this ListFragmentsInput.
        :param stream_arn: The stream_arn of this ListFragmentsInput.
        :param max_results: The max_results of this ListFragmentsInput.
        :param next_token: The next_token of this ListFragmentsInput.
        :param fragment_selector: The fragment_selector of this ListFragmentsInput.
        """
        self.openapi_types = {
            'stream_name': str,
            'stream_arn': str,
            'max_results': int,
            'next_token': str,
            'fragment_selector': ListFragmentsInputFragmentSelector
        }

        self.attribute_map = {
            'stream_name': 'StreamName',
            'stream_arn': 'StreamARN',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'fragment_selector': 'FragmentSelector'
        }

        self._stream_name = stream_name
        self._stream_arn = stream_arn
        self._max_results = max_results
        self._next_token = next_token
        self._fragment_selector = fragment_selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListFragmentsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListFragmentsInput of this ListFragmentsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_name(self):
        """Gets the stream_name of this ListFragmentsInput.


        :return: The stream_name of this ListFragmentsInput.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this ListFragmentsInput.


        :param stream_name: The stream_name of this ListFragmentsInput.
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this ListFragmentsInput.


        :return: The stream_arn of this ListFragmentsInput.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this ListFragmentsInput.


        :param stream_arn: The stream_arn of this ListFragmentsInput.
        :type stream_arn: str
        """

        self._stream_arn = stream_arn

    @property
    def max_results(self):
        """Gets the max_results of this ListFragmentsInput.


        :return: The max_results of this ListFragmentsInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListFragmentsInput.


        :param max_results: The max_results of this ListFragmentsInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListFragmentsInput.


        :return: The next_token of this ListFragmentsInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListFragmentsInput.


        :param next_token: The next_token of this ListFragmentsInput.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def fragment_selector(self):
        """Gets the fragment_selector of this ListFragmentsInput.


        :return: The fragment_selector of this ListFragmentsInput.
        :rtype: ListFragmentsInputFragmentSelector
        """
        return self._fragment_selector

    @fragment_selector.setter
    def fragment_selector(self, fragment_selector):
        """Sets the fragment_selector of this ListFragmentsInput.


        :param fragment_selector: The fragment_selector of this ListFragmentsInput.
        :type fragment_selector: ListFragmentsInputFragmentSelector
        """

        self._fragment_selector = fragment_selector
