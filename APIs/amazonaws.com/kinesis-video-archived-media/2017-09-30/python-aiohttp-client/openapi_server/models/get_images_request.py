# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetImagesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_name: str=None, stream_arn: str=None, image_selector_type: str=None, start_timestamp: datetime=None, end_timestamp: datetime=None, sampling_interval: int=None, format: str=None, format_config: Dict[str, str]=None, width_pixels: int=None, height_pixels: int=None, max_results: int=None, next_token: str=None):
        """GetImagesRequest - a model defined in OpenAPI

        :param stream_name: The stream_name of this GetImagesRequest.
        :param stream_arn: The stream_arn of this GetImagesRequest.
        :param image_selector_type: The image_selector_type of this GetImagesRequest.
        :param start_timestamp: The start_timestamp of this GetImagesRequest.
        :param end_timestamp: The end_timestamp of this GetImagesRequest.
        :param sampling_interval: The sampling_interval of this GetImagesRequest.
        :param format: The format of this GetImagesRequest.
        :param format_config: The format_config of this GetImagesRequest.
        :param width_pixels: The width_pixels of this GetImagesRequest.
        :param height_pixels: The height_pixels of this GetImagesRequest.
        :param max_results: The max_results of this GetImagesRequest.
        :param next_token: The next_token of this GetImagesRequest.
        """
        self.openapi_types = {
            'stream_name': str,
            'stream_arn': str,
            'image_selector_type': str,
            'start_timestamp': datetime,
            'end_timestamp': datetime,
            'sampling_interval': int,
            'format': str,
            'format_config': Dict[str, str],
            'width_pixels': int,
            'height_pixels': int,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'stream_name': 'StreamName',
            'stream_arn': 'StreamARN',
            'image_selector_type': 'ImageSelectorType',
            'start_timestamp': 'StartTimestamp',
            'end_timestamp': 'EndTimestamp',
            'sampling_interval': 'SamplingInterval',
            'format': 'Format',
            'format_config': 'FormatConfig',
            'width_pixels': 'WidthPixels',
            'height_pixels': 'HeightPixels',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._stream_name = stream_name
        self._stream_arn = stream_arn
        self._image_selector_type = image_selector_type
        self._start_timestamp = start_timestamp
        self._end_timestamp = end_timestamp
        self._sampling_interval = sampling_interval
        self._format = format
        self._format_config = format_config
        self._width_pixels = width_pixels
        self._height_pixels = height_pixels
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImagesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetImages_request of this GetImagesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_name(self):
        """Gets the stream_name of this GetImagesRequest.

        The name of the stream from which to retrieve the images. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.

        :return: The stream_name of this GetImagesRequest.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this GetImagesRequest.

        The name of the stream from which to retrieve the images. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.

        :param stream_name: The stream_name of this GetImagesRequest.
        :type stream_name: str
        """
        if stream_name is not None and len(stream_name) > 256:
            raise ValueError("Invalid value for `stream_name`, length must be less than or equal to `256`")
        if stream_name is not None and len(stream_name) < 1:
            raise ValueError("Invalid value for `stream_name`, length must be greater than or equal to `1`")
        if stream_name is not None and not re.search(r'[a-zA-Z0-9_.-]+', stream_name):
            raise ValueError("Invalid value for `stream_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._stream_name = stream_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this GetImagesRequest.

        The Amazon Resource Name (ARN) of the stream from which to retrieve the images. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.

        :return: The stream_arn of this GetImagesRequest.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this GetImagesRequest.

        The Amazon Resource Name (ARN) of the stream from which to retrieve the images. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.

        :param stream_arn: The stream_arn of this GetImagesRequest.
        :type stream_arn: str
        """
        if stream_arn is not None and len(stream_arn) > 1024:
            raise ValueError("Invalid value for `stream_arn`, length must be less than or equal to `1024`")
        if stream_arn is not None and len(stream_arn) < 1:
            raise ValueError("Invalid value for `stream_arn`, length must be greater than or equal to `1`")
        if stream_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', stream_arn):
            raise ValueError("Invalid value for `stream_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._stream_arn = stream_arn

    @property
    def image_selector_type(self):
        """Gets the image_selector_type of this GetImagesRequest.

        The origin of the Server or Producer timestamps to use to generate the images.

        :return: The image_selector_type of this GetImagesRequest.
        :rtype: str
        """
        return self._image_selector_type

    @image_selector_type.setter
    def image_selector_type(self, image_selector_type):
        """Sets the image_selector_type of this GetImagesRequest.

        The origin of the Server or Producer timestamps to use to generate the images.

        :param image_selector_type: The image_selector_type of this GetImagesRequest.
        :type image_selector_type: str
        """
        allowed_values = ["PRODUCER_TIMESTAMP", "SERVER_TIMESTAMP"]  # noqa: E501
        if image_selector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `image_selector_type` ({0}), must be one of {1}"
                .format(image_selector_type, allowed_values)
            )

        self._image_selector_type = image_selector_type

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this GetImagesRequest.

        The starting point from which the images should be generated. This <code>StartTimestamp</code> must be within an inclusive range of timestamps for an image to be returned.

        :return: The start_timestamp of this GetImagesRequest.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this GetImagesRequest.

        The starting point from which the images should be generated. This <code>StartTimestamp</code> must be within an inclusive range of timestamps for an image to be returned.

        :param start_timestamp: The start_timestamp of this GetImagesRequest.
        :type start_timestamp: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this GetImagesRequest.

        The end timestamp for the range of images to be generated. If the time range between <code>StartTimestamp</code> and <code>EndTimestamp</code> is more than 300 seconds above <code>StartTimestamp</code>, you will receive an <code>IllegalArgumentException</code>.

        :return: The end_timestamp of this GetImagesRequest.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this GetImagesRequest.

        The end timestamp for the range of images to be generated. If the time range between <code>StartTimestamp</code> and <code>EndTimestamp</code> is more than 300 seconds above <code>StartTimestamp</code>, you will receive an <code>IllegalArgumentException</code>.

        :param end_timestamp: The end_timestamp of this GetImagesRequest.
        :type end_timestamp: datetime
        """
        if end_timestamp is None:
            raise ValueError("Invalid value for `end_timestamp`, must not be `None`")

        self._end_timestamp = end_timestamp

    @property
    def sampling_interval(self):
        """Gets the sampling_interval of this GetImagesRequest.

        <p>The time interval in milliseconds (ms) at which the images need to be generated from the stream, with a default of 3000 ms. The minimum value that can be provided is 200 ms. If the timestamp range is less than the sampling interval, the Image from the <code>startTimestamp</code> will be returned if available. </p> <note> <p>The minimum value of 200 ms is a hard limit.</p> </note>

        :return: The sampling_interval of this GetImagesRequest.
        :rtype: int
        """
        return self._sampling_interval

    @sampling_interval.setter
    def sampling_interval(self, sampling_interval):
        """Sets the sampling_interval of this GetImagesRequest.

        <p>The time interval in milliseconds (ms) at which the images need to be generated from the stream, with a default of 3000 ms. The minimum value that can be provided is 200 ms. If the timestamp range is less than the sampling interval, the Image from the <code>startTimestamp</code> will be returned if available. </p> <note> <p>The minimum value of 200 ms is a hard limit.</p> </note>

        :param sampling_interval: The sampling_interval of this GetImagesRequest.
        :type sampling_interval: int
        """

        self._sampling_interval = sampling_interval

    @property
    def format(self):
        """Gets the format of this GetImagesRequest.

        The format that will be used to encode the image.

        :return: The format of this GetImagesRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GetImagesRequest.

        The format that will be used to encode the image.

        :param format: The format of this GetImagesRequest.
        :type format: str
        """
        allowed_values = ["JPEG", "PNG"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def format_config(self):
        """Gets the format_config of this GetImagesRequest.

        The list of a key-value pair structure that contains extra parameters that can be applied when the image is generated. The <code>FormatConfig</code> key is the <code>JPEGQuality</code>, which indicates the JPEG quality key to be used to generate the image. The <code>FormatConfig</code> value accepts ints from 1 to 100. If the value is 1, the image will be generated with less quality and the best compression. If the value is 100, the image will be generated with the best quality and less compression. If no value is provided, the default value of the <code>JPEGQuality</code> key will be set to 80.

        :return: The format_config of this GetImagesRequest.
        :rtype: Dict[str, str]
        """
        return self._format_config

    @format_config.setter
    def format_config(self, format_config):
        """Sets the format_config of this GetImagesRequest.

        The list of a key-value pair structure that contains extra parameters that can be applied when the image is generated. The <code>FormatConfig</code> key is the <code>JPEGQuality</code>, which indicates the JPEG quality key to be used to generate the image. The <code>FormatConfig</code> value accepts ints from 1 to 100. If the value is 1, the image will be generated with less quality and the best compression. If the value is 100, the image will be generated with the best quality and less compression. If no value is provided, the default value of the <code>JPEGQuality</code> key will be set to 80.

        :param format_config: The format_config of this GetImagesRequest.
        :type format_config: Dict[str, str]
        """
        if format_config is not None and len(format_config) > 1:
            raise ValueError("Invalid value for `format_config`, number of items must be less than or equal to `1`")
        if format_config is not None and len(format_config) < 1:
            raise ValueError("Invalid value for `format_config`, number of items must be greater than or equal to `1`")

        self._format_config = format_config

    @property
    def width_pixels(self):
        """Gets the width_pixels of this GetImagesRequest.

        The width of the output image that is used in conjunction with the <code>HeightPixels</code> parameter. When both <code>WidthPixels</code> and <code>HeightPixels</code> parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the <code>WidthPixels</code> parameter is provided or if only the <code>HeightPixels</code> is provided, a <code>ValidationException</code> will be thrown. If neither parameter is provided, the original image size from the stream will be returned.

        :return: The width_pixels of this GetImagesRequest.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this GetImagesRequest.

        The width of the output image that is used in conjunction with the <code>HeightPixels</code> parameter. When both <code>WidthPixels</code> and <code>HeightPixels</code> parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the <code>WidthPixels</code> parameter is provided or if only the <code>HeightPixels</code> is provided, a <code>ValidationException</code> will be thrown. If neither parameter is provided, the original image size from the stream will be returned.

        :param width_pixels: The width_pixels of this GetImagesRequest.
        :type width_pixels: int
        """
        if width_pixels is not None and width_pixels > 3840:
            raise ValueError("Invalid value for `width_pixels`, must be a value less than or equal to `3840`")
        if width_pixels is not None and width_pixels < 1:
            raise ValueError("Invalid value for `width_pixels`, must be a value greater than or equal to `1`")

        self._width_pixels = width_pixels

    @property
    def height_pixels(self):
        """Gets the height_pixels of this GetImagesRequest.

        The height of the output image that is used in conjunction with the <code>WidthPixels</code> parameter. When both <code>HeightPixels</code> and <code>WidthPixels</code> parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the <code>HeightPixels</code> parameter is provided, its original aspect ratio will be used to calculate the <code>WidthPixels</code> ratio. If neither parameter is provided, the original image size will be returned.

        :return: The height_pixels of this GetImagesRequest.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this GetImagesRequest.

        The height of the output image that is used in conjunction with the <code>WidthPixels</code> parameter. When both <code>HeightPixels</code> and <code>WidthPixels</code> parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the <code>HeightPixels</code> parameter is provided, its original aspect ratio will be used to calculate the <code>WidthPixels</code> ratio. If neither parameter is provided, the original image size will be returned.

        :param height_pixels: The height_pixels of this GetImagesRequest.
        :type height_pixels: int
        """
        if height_pixels is not None and height_pixels > 2160:
            raise ValueError("Invalid value for `height_pixels`, must be a value less than or equal to `2160`")
        if height_pixels is not None and height_pixels < 1:
            raise ValueError("Invalid value for `height_pixels`, must be a value greater than or equal to `1`")

        self._height_pixels = height_pixels

    @property
    def max_results(self):
        """Gets the max_results of this GetImagesRequest.

        <p>The maximum number of images to be returned by the API. </p> <note> <p>The default limit is 25 images per API response. Providing a <code>MaxResults</code> greater than this value will result in a page size of 25. Any additional results will be paginated. </p> </note>

        :return: The max_results of this GetImagesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetImagesRequest.

        <p>The maximum number of images to be returned by the API. </p> <note> <p>The default limit is 25 images per API response. Providing a <code>MaxResults</code> greater than this value will result in a page size of 25. Any additional results will be paginated. </p> </note>

        :param max_results: The max_results of this GetImagesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetImagesRequest.

        A token that specifies where to start paginating the next set of Images. This is the <code>GetImages:NextToken</code> from a previously truncated response.

        :return: The next_token of this GetImagesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetImagesRequest.

        A token that specifies where to start paginating the next set of Images. This is the <code>GetImages:NextToken</code> from a previously truncated response.

        :param next_token: The next_token of this GetImagesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 4096:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `4096`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'[a-zA-Z0-9+\/]+={0,2}', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/[a-zA-Z0-9+\/]+={0,2}/`")

        self._next_token = next_token
