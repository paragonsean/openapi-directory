# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.format import Format
from openapi_server.models.image_selector_type import ImageSelectorType
from openapi_server import util


class GetImagesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_name: str=None, stream_arn: str=None, image_selector_type: ImageSelectorType=None, start_timestamp: datetime=None, end_timestamp: datetime=None, sampling_interval: int=None, format: Format=None, format_config: Dict=None, width_pixels: int=None, height_pixels: int=None, max_results: int=None, next_token: str=None):
        """GetImagesInput - a model defined in OpenAPI

        :param stream_name: The stream_name of this GetImagesInput.
        :param stream_arn: The stream_arn of this GetImagesInput.
        :param image_selector_type: The image_selector_type of this GetImagesInput.
        :param start_timestamp: The start_timestamp of this GetImagesInput.
        :param end_timestamp: The end_timestamp of this GetImagesInput.
        :param sampling_interval: The sampling_interval of this GetImagesInput.
        :param format: The format of this GetImagesInput.
        :param format_config: The format_config of this GetImagesInput.
        :param width_pixels: The width_pixels of this GetImagesInput.
        :param height_pixels: The height_pixels of this GetImagesInput.
        :param max_results: The max_results of this GetImagesInput.
        :param next_token: The next_token of this GetImagesInput.
        """
        self.openapi_types = {
            'stream_name': str,
            'stream_arn': str,
            'image_selector_type': ImageSelectorType,
            'start_timestamp': datetime,
            'end_timestamp': datetime,
            'sampling_interval': int,
            'format': Format,
            'format_config': Dict,
            'width_pixels': int,
            'height_pixels': int,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'stream_name': 'StreamName',
            'stream_arn': 'StreamARN',
            'image_selector_type': 'ImageSelectorType',
            'start_timestamp': 'StartTimestamp',
            'end_timestamp': 'EndTimestamp',
            'sampling_interval': 'SamplingInterval',
            'format': 'Format',
            'format_config': 'FormatConfig',
            'width_pixels': 'WidthPixels',
            'height_pixels': 'HeightPixels',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._stream_name = stream_name
        self._stream_arn = stream_arn
        self._image_selector_type = image_selector_type
        self._start_timestamp = start_timestamp
        self._end_timestamp = end_timestamp
        self._sampling_interval = sampling_interval
        self._format = format
        self._format_config = format_config
        self._width_pixels = width_pixels
        self._height_pixels = height_pixels
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetImagesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetImagesInput of this GetImagesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_name(self):
        """Gets the stream_name of this GetImagesInput.


        :return: The stream_name of this GetImagesInput.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this GetImagesInput.


        :param stream_name: The stream_name of this GetImagesInput.
        :type stream_name: str
        """

        self._stream_name = stream_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this GetImagesInput.


        :return: The stream_arn of this GetImagesInput.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this GetImagesInput.


        :param stream_arn: The stream_arn of this GetImagesInput.
        :type stream_arn: str
        """

        self._stream_arn = stream_arn

    @property
    def image_selector_type(self):
        """Gets the image_selector_type of this GetImagesInput.


        :return: The image_selector_type of this GetImagesInput.
        :rtype: ImageSelectorType
        """
        return self._image_selector_type

    @image_selector_type.setter
    def image_selector_type(self, image_selector_type):
        """Sets the image_selector_type of this GetImagesInput.


        :param image_selector_type: The image_selector_type of this GetImagesInput.
        :type image_selector_type: ImageSelectorType
        """
        if image_selector_type is None:
            raise ValueError("Invalid value for `image_selector_type`, must not be `None`")

        self._image_selector_type = image_selector_type

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this GetImagesInput.


        :return: The start_timestamp of this GetImagesInput.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this GetImagesInput.


        :param start_timestamp: The start_timestamp of this GetImagesInput.
        :type start_timestamp: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this GetImagesInput.


        :return: The end_timestamp of this GetImagesInput.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this GetImagesInput.


        :param end_timestamp: The end_timestamp of this GetImagesInput.
        :type end_timestamp: datetime
        """
        if end_timestamp is None:
            raise ValueError("Invalid value for `end_timestamp`, must not be `None`")

        self._end_timestamp = end_timestamp

    @property
    def sampling_interval(self):
        """Gets the sampling_interval of this GetImagesInput.


        :return: The sampling_interval of this GetImagesInput.
        :rtype: int
        """
        return self._sampling_interval

    @sampling_interval.setter
    def sampling_interval(self, sampling_interval):
        """Sets the sampling_interval of this GetImagesInput.


        :param sampling_interval: The sampling_interval of this GetImagesInput.
        :type sampling_interval: int
        """

        self._sampling_interval = sampling_interval

    @property
    def format(self):
        """Gets the format of this GetImagesInput.


        :return: The format of this GetImagesInput.
        :rtype: Format
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GetImagesInput.


        :param format: The format of this GetImagesInput.
        :type format: Format
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")

        self._format = format

    @property
    def format_config(self):
        """Gets the format_config of this GetImagesInput.


        :return: The format_config of this GetImagesInput.
        :rtype: Dict
        """
        return self._format_config

    @format_config.setter
    def format_config(self, format_config):
        """Sets the format_config of this GetImagesInput.


        :param format_config: The format_config of this GetImagesInput.
        :type format_config: Dict
        """

        self._format_config = format_config

    @property
    def width_pixels(self):
        """Gets the width_pixels of this GetImagesInput.


        :return: The width_pixels of this GetImagesInput.
        :rtype: int
        """
        return self._width_pixels

    @width_pixels.setter
    def width_pixels(self, width_pixels):
        """Sets the width_pixels of this GetImagesInput.


        :param width_pixels: The width_pixels of this GetImagesInput.
        :type width_pixels: int
        """

        self._width_pixels = width_pixels

    @property
    def height_pixels(self):
        """Gets the height_pixels of this GetImagesInput.


        :return: The height_pixels of this GetImagesInput.
        :rtype: int
        """
        return self._height_pixels

    @height_pixels.setter
    def height_pixels(self, height_pixels):
        """Sets the height_pixels of this GetImagesInput.


        :param height_pixels: The height_pixels of this GetImagesInput.
        :type height_pixels: int
        """

        self._height_pixels = height_pixels

    @property
    def max_results(self):
        """Gets the max_results of this GetImagesInput.


        :return: The max_results of this GetImagesInput.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetImagesInput.


        :param max_results: The max_results of this GetImagesInput.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetImagesInput.


        :return: The next_token of this GetImagesInput.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetImagesInput.


        :param next_token: The next_token of this GetImagesInput.
        :type next_token: str
        """

        self._next_token = next_token
