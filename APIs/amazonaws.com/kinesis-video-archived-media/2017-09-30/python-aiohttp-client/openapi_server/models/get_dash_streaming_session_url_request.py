# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_dash_streaming_session_url_request_dash_fragment_selector import GetDASHStreamingSessionURLRequestDASHFragmentSelector
import re
from openapi_server import util


class GetDASHStreamingSessionURLRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_name: str=None, stream_arn: str=None, playback_mode: str=None, display_fragment_timestamp: str=None, display_fragment_number: str=None, dash_fragment_selector: GetDASHStreamingSessionURLRequestDASHFragmentSelector=None, expires: int=None, max_manifest_fragment_results: int=None):
        """GetDASHStreamingSessionURLRequest - a model defined in OpenAPI

        :param stream_name: The stream_name of this GetDASHStreamingSessionURLRequest.
        :param stream_arn: The stream_arn of this GetDASHStreamingSessionURLRequest.
        :param playback_mode: The playback_mode of this GetDASHStreamingSessionURLRequest.
        :param display_fragment_timestamp: The display_fragment_timestamp of this GetDASHStreamingSessionURLRequest.
        :param display_fragment_number: The display_fragment_number of this GetDASHStreamingSessionURLRequest.
        :param dash_fragment_selector: The dash_fragment_selector of this GetDASHStreamingSessionURLRequest.
        :param expires: The expires of this GetDASHStreamingSessionURLRequest.
        :param max_manifest_fragment_results: The max_manifest_fragment_results of this GetDASHStreamingSessionURLRequest.
        """
        self.openapi_types = {
            'stream_name': str,
            'stream_arn': str,
            'playback_mode': str,
            'display_fragment_timestamp': str,
            'display_fragment_number': str,
            'dash_fragment_selector': GetDASHStreamingSessionURLRequestDASHFragmentSelector,
            'expires': int,
            'max_manifest_fragment_results': int
        }

        self.attribute_map = {
            'stream_name': 'StreamName',
            'stream_arn': 'StreamARN',
            'playback_mode': 'PlaybackMode',
            'display_fragment_timestamp': 'DisplayFragmentTimestamp',
            'display_fragment_number': 'DisplayFragmentNumber',
            'dash_fragment_selector': 'DASHFragmentSelector',
            'expires': 'Expires',
            'max_manifest_fragment_results': 'MaxManifestFragmentResults'
        }

        self._stream_name = stream_name
        self._stream_arn = stream_arn
        self._playback_mode = playback_mode
        self._display_fragment_timestamp = display_fragment_timestamp
        self._display_fragment_number = display_fragment_number
        self._dash_fragment_selector = dash_fragment_selector
        self._expires = expires
        self._max_manifest_fragment_results = max_manifest_fragment_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDASHStreamingSessionURLRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDASHStreamingSessionURL_request of this GetDASHStreamingSessionURLRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_name(self):
        """Gets the stream_name of this GetDASHStreamingSessionURLRequest.

        <p>The name of the stream for which to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>

        :return: The stream_name of this GetDASHStreamingSessionURLRequest.
        :rtype: str
        """
        return self._stream_name

    @stream_name.setter
    def stream_name(self, stream_name):
        """Sets the stream_name of this GetDASHStreamingSessionURLRequest.

        <p>The name of the stream for which to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>

        :param stream_name: The stream_name of this GetDASHStreamingSessionURLRequest.
        :type stream_name: str
        """
        if stream_name is not None and len(stream_name) > 256:
            raise ValueError("Invalid value for `stream_name`, length must be less than or equal to `256`")
        if stream_name is not None and len(stream_name) < 1:
            raise ValueError("Invalid value for `stream_name`, length must be greater than or equal to `1`")
        if stream_name is not None and not re.search(r'[a-zA-Z0-9_.-]+', stream_name):
            raise ValueError("Invalid value for `stream_name`, must be a follow pattern or equal to `/[a-zA-Z0-9_.-]+/`")

        self._stream_name = stream_name

    @property
    def stream_arn(self):
        """Gets the stream_arn of this GetDASHStreamingSessionURLRequest.

        <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>

        :return: The stream_arn of this GetDASHStreamingSessionURLRequest.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this GetDASHStreamingSessionURLRequest.

        <p>The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>

        :param stream_arn: The stream_arn of this GetDASHStreamingSessionURLRequest.
        :type stream_arn: str
        """
        if stream_arn is not None and len(stream_arn) > 1024:
            raise ValueError("Invalid value for `stream_arn`, length must be less than or equal to `1024`")
        if stream_arn is not None and len(stream_arn) < 1:
            raise ValueError("Invalid value for `stream_arn`, length must be greater than or equal to `1`")
        if stream_arn is not None and not re.search(r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+', stream_arn):
            raise ValueError("Invalid value for `stream_arn`, must be a follow pattern or equal to `/arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+\/[a-zA-Z0-9_.-]+\/[0-9]+/`")

        self._stream_arn = stream_arn

    @property
    def playback_mode(self):
        """Gets the playback_mode of this GetDASHStreamingSessionURLRequest.

        <p>Whether to retrieve live, live replay, or archived, on-demand data.</p> <p>Features of the three types of sessions include the following:</p> <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a \"live\" notification, with no scrubber control for choosing the position in the playback window to display.</p> <note> <p>In <code>LIVE</code> mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.</p> </note> </li> <li> <p> <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for <code>LIVE</code> mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the <code>ON_DEMAND</code> mode. </p> </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in <code>MaxManifestFragmentResults</code>. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.</p> <p>The default is <code>LIVE</code>.</p>

        :return: The playback_mode of this GetDASHStreamingSessionURLRequest.
        :rtype: str
        """
        return self._playback_mode

    @playback_mode.setter
    def playback_mode(self, playback_mode):
        """Sets the playback_mode of this GetDASHStreamingSessionURLRequest.

        <p>Whether to retrieve live, live replay, or archived, on-demand data.</p> <p>Features of the three types of sessions include the following:</p> <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a \"live\" notification, with no scrubber control for choosing the position in the playback window to display.</p> <note> <p>In <code>LIVE</code> mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.</p> </note> </li> <li> <p> <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for <code>LIVE</code> mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the <code>ON_DEMAND</code> mode. </p> </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in <code>MaxManifestFragmentResults</code>. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.</p> <p>The default is <code>LIVE</code>.</p>

        :param playback_mode: The playback_mode of this GetDASHStreamingSessionURLRequest.
        :type playback_mode: str
        """
        allowed_values = ["LIVE", "LIVE_REPLAY", "ON_DEMAND"]  # noqa: E501
        if playback_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `playback_mode` ({0}), must be one of {1}"
                .format(playback_mode, allowed_values)
            )

        self._playback_mode = playback_mode

    @property
    def display_fragment_timestamp(self):
        """Gets the display_fragment_timestamp of this GetDASHStreamingSessionURLRequest.

        <p>Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to <code>ALWAYS</code>, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage this custom attribute.</p> <p>The default value is <code>NEVER</code>. When <a>DASHFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>, the timestamps will be the server start timestamps. Similarly, when <a>DASHFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer start timestamps. </p>

        :return: The display_fragment_timestamp of this GetDASHStreamingSessionURLRequest.
        :rtype: str
        """
        return self._display_fragment_timestamp

    @display_fragment_timestamp.setter
    def display_fragment_timestamp(self, display_fragment_timestamp):
        """Sets the display_fragment_timestamp of this GetDASHStreamingSessionURLRequest.

        <p>Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to <code>ALWAYS</code>, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage this custom attribute.</p> <p>The default value is <code>NEVER</code>. When <a>DASHFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>, the timestamps will be the server start timestamps. Similarly, when <a>DASHFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer start timestamps. </p>

        :param display_fragment_timestamp: The display_fragment_timestamp of this GetDASHStreamingSessionURLRequest.
        :type display_fragment_timestamp: str
        """
        allowed_values = ["ALWAYS", "NEVER"]  # noqa: E501
        if display_fragment_timestamp not in allowed_values:
            raise ValueError(
                "Invalid value for `display_fragment_timestamp` ({0}), must be one of {1}"
                .format(display_fragment_timestamp, allowed_values)
            )

        self._display_fragment_timestamp = display_fragment_timestamp

    @property
    def display_fragment_number(self):
        """Gets the display_fragment_number of this GetDASHStreamingSessionURLRequest.

        <p>Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to <code>ALWAYS</code>, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name “kvs:fn”. These fragment numbers can be used for logging or for use with other APIs (e.g. <code>GetMedia</code> and <code>GetMediaForFragmentList</code>). A custom MPEG-DASH media player is necessary to leverage these this custom attribute.</p> <p>The default value is <code>NEVER</code>.</p>

        :return: The display_fragment_number of this GetDASHStreamingSessionURLRequest.
        :rtype: str
        """
        return self._display_fragment_number

    @display_fragment_number.setter
    def display_fragment_number(self, display_fragment_number):
        """Sets the display_fragment_number of this GetDASHStreamingSessionURLRequest.

        <p>Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to <code>ALWAYS</code>, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name “kvs:fn”. These fragment numbers can be used for logging or for use with other APIs (e.g. <code>GetMedia</code> and <code>GetMediaForFragmentList</code>). A custom MPEG-DASH media player is necessary to leverage these this custom attribute.</p> <p>The default value is <code>NEVER</code>.</p>

        :param display_fragment_number: The display_fragment_number of this GetDASHStreamingSessionURLRequest.
        :type display_fragment_number: str
        """
        allowed_values = ["ALWAYS", "NEVER"]  # noqa: E501
        if display_fragment_number not in allowed_values:
            raise ValueError(
                "Invalid value for `display_fragment_number` ({0}), must be one of {1}"
                .format(display_fragment_number, allowed_values)
            )

        self._display_fragment_number = display_fragment_number

    @property
    def dash_fragment_selector(self):
        """Gets the dash_fragment_selector of this GetDASHStreamingSessionURLRequest.


        :return: The dash_fragment_selector of this GetDASHStreamingSessionURLRequest.
        :rtype: GetDASHStreamingSessionURLRequestDASHFragmentSelector
        """
        return self._dash_fragment_selector

    @dash_fragment_selector.setter
    def dash_fragment_selector(self, dash_fragment_selector):
        """Sets the dash_fragment_selector of this GetDASHStreamingSessionURLRequest.


        :param dash_fragment_selector: The dash_fragment_selector of this GetDASHStreamingSessionURLRequest.
        :type dash_fragment_selector: GetDASHStreamingSessionURLRequestDASHFragmentSelector
        """

        self._dash_fragment_selector = dash_fragment_selector

    @property
    def expires(self):
        """Gets the expires of this GetDASHStreamingSessionURLRequest.

        <p>The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).</p> <p>When a session expires, no new calls to <code>GetDashManifest</code>, <code>GetMP4InitFragment</code>, or <code>GetMP4MediaFragment</code> can be made for that session.</p> <p>The default is 300 (5 minutes).</p>

        :return: The expires of this GetDASHStreamingSessionURLRequest.
        :rtype: int
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this GetDASHStreamingSessionURLRequest.

        <p>The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).</p> <p>When a session expires, no new calls to <code>GetDashManifest</code>, <code>GetMP4InitFragment</code>, or <code>GetMP4MediaFragment</code> can be made for that session.</p> <p>The default is 300 (5 minutes).</p>

        :param expires: The expires of this GetDASHStreamingSessionURLRequest.
        :type expires: int
        """
        if expires is not None and expires > 43200:
            raise ValueError("Invalid value for `expires`, must be a value less than or equal to `43200`")
        if expires is not None and expires < 300:
            raise ValueError("Invalid value for `expires`, must be a value greater than or equal to `300`")

        self._expires = expires

    @property
    def max_manifest_fragment_results(self):
        """Gets the max_manifest_fragment_results of this GetDASHStreamingSessionURLRequest.

        <p>The maximum number of fragments that are returned in the MPEG-DASH manifest.</p> <p>When the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments are returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>, the oldest fragments are returned, up to this maximum number.</p> <p>When there are a higher number of fragments available in a live MPEG-DASH manifest, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum of 10 fragments.</p> <p>The default is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>, and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. </p> <p>The maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.</p>

        :return: The max_manifest_fragment_results of this GetDASHStreamingSessionURLRequest.
        :rtype: int
        """
        return self._max_manifest_fragment_results

    @max_manifest_fragment_results.setter
    def max_manifest_fragment_results(self, max_manifest_fragment_results):
        """Sets the max_manifest_fragment_results of this GetDASHStreamingSessionURLRequest.

        <p>The maximum number of fragments that are returned in the MPEG-DASH manifest.</p> <p>When the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments are returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>, the oldest fragments are returned, up to this maximum number.</p> <p>When there are a higher number of fragments available in a live MPEG-DASH manifest, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum of 10 fragments.</p> <p>The default is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>, and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. </p> <p>The maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.</p>

        :param max_manifest_fragment_results: The max_manifest_fragment_results of this GetDASHStreamingSessionURLRequest.
        :type max_manifest_fragment_results: int
        """
        if max_manifest_fragment_results is not None and max_manifest_fragment_results > 5000:
            raise ValueError("Invalid value for `max_manifest_fragment_results`, must be a value less than or equal to `5000`")
        if max_manifest_fragment_results is not None and max_manifest_fragment_results < 1:
            raise ValueError("Invalid value for `max_manifest_fragment_results`, must be a value greater than or equal to `1`")

        self._max_manifest_fragment_results = max_manifest_fragment_results
