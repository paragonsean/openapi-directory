# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_fragment_selector_type import ClipFragmentSelectorType
from openapi_server.models.get_clip_request_clip_fragment_selector_timestamp_range import GetClipRequestClipFragmentSelectorTimestampRange
from openapi_server import util


class GetClipInputClipFragmentSelector(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fragment_selector_type: ClipFragmentSelectorType=None, timestamp_range: GetClipRequestClipFragmentSelectorTimestampRange=None):
        """GetClipInputClipFragmentSelector - a model defined in OpenAPI

        :param fragment_selector_type: The fragment_selector_type of this GetClipInputClipFragmentSelector.
        :param timestamp_range: The timestamp_range of this GetClipInputClipFragmentSelector.
        """
        self.openapi_types = {
            'fragment_selector_type': ClipFragmentSelectorType,
            'timestamp_range': GetClipRequestClipFragmentSelectorTimestampRange
        }

        self.attribute_map = {
            'fragment_selector_type': 'FragmentSelectorType',
            'timestamp_range': 'TimestampRange'
        }

        self._fragment_selector_type = fragment_selector_type
        self._timestamp_range = timestamp_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetClipInputClipFragmentSelector':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetClipInput_ClipFragmentSelector of this GetClipInputClipFragmentSelector.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fragment_selector_type(self):
        """Gets the fragment_selector_type of this GetClipInputClipFragmentSelector.


        :return: The fragment_selector_type of this GetClipInputClipFragmentSelector.
        :rtype: ClipFragmentSelectorType
        """
        return self._fragment_selector_type

    @fragment_selector_type.setter
    def fragment_selector_type(self, fragment_selector_type):
        """Sets the fragment_selector_type of this GetClipInputClipFragmentSelector.


        :param fragment_selector_type: The fragment_selector_type of this GetClipInputClipFragmentSelector.
        :type fragment_selector_type: ClipFragmentSelectorType
        """
        if fragment_selector_type is None:
            raise ValueError("Invalid value for `fragment_selector_type`, must not be `None`")

        self._fragment_selector_type = fragment_selector_type

    @property
    def timestamp_range(self):
        """Gets the timestamp_range of this GetClipInputClipFragmentSelector.


        :return: The timestamp_range of this GetClipInputClipFragmentSelector.
        :rtype: GetClipRequestClipFragmentSelectorTimestampRange
        """
        return self._timestamp_range

    @timestamp_range.setter
    def timestamp_range(self, timestamp_range):
        """Sets the timestamp_range of this GetClipInputClipFragmentSelector.


        :param timestamp_range: The timestamp_range of this GetClipInputClipFragmentSelector.
        :type timestamp_range: GetClipRequestClipFragmentSelectorTimestampRange
        """
        if timestamp_range is None:
            raise ValueError("Invalid value for `timestamp_range`, must not be `None`")

        self._timestamp_range = timestamp_range
