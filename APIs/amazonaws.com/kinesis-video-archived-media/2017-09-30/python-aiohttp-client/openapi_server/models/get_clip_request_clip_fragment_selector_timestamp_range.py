# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetClipRequestClipFragmentSelectorTimestampRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_timestamp: datetime=None, end_timestamp: datetime=None):
        """GetClipRequestClipFragmentSelectorTimestampRange - a model defined in OpenAPI

        :param start_timestamp: The start_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.
        :param end_timestamp: The end_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.
        """
        self.openapi_types = {
            'start_timestamp': datetime,
            'end_timestamp': datetime
        }

        self.attribute_map = {
            'start_timestamp': 'StartTimestamp',
            'end_timestamp': 'EndTimestamp'
        }

        self._start_timestamp = start_timestamp
        self._end_timestamp = end_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetClipRequestClipFragmentSelectorTimestampRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetClip_request_ClipFragmentSelector_TimestampRange of this GetClipRequestClipFragmentSelectorTimestampRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.


        :return: The start_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.


        :param start_timestamp: The start_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.
        :type start_timestamp: datetime
        """
        if start_timestamp is None:
            raise ValueError("Invalid value for `start_timestamp`, must not be `None`")

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.


        :return: The end_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.


        :param end_timestamp: The end_timestamp of this GetClipRequestClipFragmentSelectorTimestampRange.
        :type end_timestamp: datetime
        """
        if end_timestamp is None:
            raise ValueError("Invalid value for `end_timestamp`, must not be `None`")

        self._end_timestamp = end_timestamp
