/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Format from './Format';
import ImageSelectorType from './ImageSelectorType';

/**
 * The GetImagesInput model module.
 * @module model/GetImagesInput
 * @version 2017-09-30
 */
class GetImagesInput {
    /**
     * Constructs a new <code>GetImagesInput</code>.
     * @alias module:model/GetImagesInput
     * @param imageSelectorType {module:model/ImageSelectorType} 
     * @param startTimestamp {Date} 
     * @param endTimestamp {Date} 
     * @param format {module:model/Format} 
     */
    constructor(imageSelectorType, startTimestamp, endTimestamp, format) { 
        
        GetImagesInput.initialize(this, imageSelectorType, startTimestamp, endTimestamp, format);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageSelectorType, startTimestamp, endTimestamp, format) { 
        obj['ImageSelectorType'] = imageSelectorType;
        obj['StartTimestamp'] = startTimestamp;
        obj['EndTimestamp'] = endTimestamp;
        obj['Format'] = format;
    }

    /**
     * Constructs a <code>GetImagesInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetImagesInput} obj Optional instance to populate.
     * @return {module:model/GetImagesInput} The populated <code>GetImagesInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetImagesInput();

            if (data.hasOwnProperty('StreamName')) {
                obj['StreamName'] = ApiClient.convertToType(data['StreamName'], 'String');
            }
            if (data.hasOwnProperty('StreamARN')) {
                obj['StreamARN'] = ApiClient.convertToType(data['StreamARN'], 'String');
            }
            if (data.hasOwnProperty('ImageSelectorType')) {
                obj['ImageSelectorType'] = ApiClient.convertToType(data['ImageSelectorType'], ImageSelectorType);
            }
            if (data.hasOwnProperty('StartTimestamp')) {
                obj['StartTimestamp'] = ApiClient.convertToType(data['StartTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('EndTimestamp')) {
                obj['EndTimestamp'] = ApiClient.convertToType(data['EndTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('SamplingInterval')) {
                obj['SamplingInterval'] = ApiClient.convertToType(data['SamplingInterval'], 'Number');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], Format);
            }
            if (data.hasOwnProperty('FormatConfig')) {
                obj['FormatConfig'] = ApiClient.convertToType(data['FormatConfig'], Object);
            }
            if (data.hasOwnProperty('WidthPixels')) {
                obj['WidthPixels'] = ApiClient.convertToType(data['WidthPixels'], 'Number');
            }
            if (data.hasOwnProperty('HeightPixels')) {
                obj['HeightPixels'] = ApiClient.convertToType(data['HeightPixels'], 'Number');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetImagesInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetImagesInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetImagesInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `StreamName`
        if (data['StreamName']) { // data not null
          String.validateJSON(data['StreamName']);
        }
        // validate the optional field `StreamARN`
        if (data['StreamARN']) { // data not null
          String.validateJSON(data['StreamARN']);
        }
        // validate the optional field `ImageSelectorType`
        if (data['ImageSelectorType']) { // data not null
          ImageSelectorType.validateJSON(data['ImageSelectorType']);
        }
        // validate the optional field `StartTimestamp`
        if (data['StartTimestamp']) { // data not null
          Date.validateJSON(data['StartTimestamp']);
        }
        // validate the optional field `EndTimestamp`
        if (data['EndTimestamp']) { // data not null
          Date.validateJSON(data['EndTimestamp']);
        }
        // validate the optional field `SamplingInterval`
        if (data['SamplingInterval']) { // data not null
          Number.validateJSON(data['SamplingInterval']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          Format.validateJSON(data['Format']);
        }
        // validate the optional field `FormatConfig`
        if (data['FormatConfig']) { // data not null
          Object.validateJSON(data['FormatConfig']);
        }
        // validate the optional field `WidthPixels`
        if (data['WidthPixels']) { // data not null
          Number.validateJSON(data['WidthPixels']);
        }
        // validate the optional field `HeightPixels`
        if (data['HeightPixels']) { // data not null
          Number.validateJSON(data['HeightPixels']);
        }
        // validate the optional field `MaxResults`
        if (data['MaxResults']) { // data not null
          Number.validateJSON(data['MaxResults']);
        }
        // validate the optional field `NextToken`
        if (data['NextToken']) { // data not null
          String.validateJSON(data['NextToken']);
        }

        return true;
    }


}

GetImagesInput.RequiredProperties = ["ImageSelectorType", "StartTimestamp", "EndTimestamp", "Format"];

/**
 * @member {String} StreamName
 */
GetImagesInput.prototype['StreamName'] = undefined;

/**
 * @member {String} StreamARN
 */
GetImagesInput.prototype['StreamARN'] = undefined;

/**
 * @member {module:model/ImageSelectorType} ImageSelectorType
 */
GetImagesInput.prototype['ImageSelectorType'] = undefined;

/**
 * @member {Date} StartTimestamp
 */
GetImagesInput.prototype['StartTimestamp'] = undefined;

/**
 * @member {Date} EndTimestamp
 */
GetImagesInput.prototype['EndTimestamp'] = undefined;

/**
 * @member {Number} SamplingInterval
 */
GetImagesInput.prototype['SamplingInterval'] = undefined;

/**
 * @member {module:model/Format} Format
 */
GetImagesInput.prototype['Format'] = undefined;

/**
 * @member {Object} FormatConfig
 */
GetImagesInput.prototype['FormatConfig'] = undefined;

/**
 * @member {Number} WidthPixels
 */
GetImagesInput.prototype['WidthPixels'] = undefined;

/**
 * @member {Number} HeightPixels
 */
GetImagesInput.prototype['HeightPixels'] = undefined;

/**
 * @member {Number} MaxResults
 */
GetImagesInput.prototype['MaxResults'] = undefined;

/**
 * @member {String} NextToken
 */
GetImagesInput.prototype['NextToken'] = undefined;






export default GetImagesInput;

