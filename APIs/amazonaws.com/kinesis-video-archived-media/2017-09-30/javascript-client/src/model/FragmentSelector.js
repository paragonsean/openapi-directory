/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FragmentSelectorType from './FragmentSelectorType';
import ListFragmentsRequestFragmentSelectorTimestampRange from './ListFragmentsRequestFragmentSelectorTimestampRange';

/**
 * The FragmentSelector model module.
 * @module model/FragmentSelector
 * @version 2017-09-30
 */
class FragmentSelector {
    /**
     * Constructs a new <code>FragmentSelector</code>.
     * &lt;p&gt;Describes the timestamp range and timestamp origin of a range of fragments.&lt;/p&gt; &lt;p&gt;Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;00:00:00&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;00:00:02&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;00:00:04&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;00:00:06&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. &lt;/p&gt;
     * @alias module:model/FragmentSelector
     * @param fragmentSelectorType {module:model/FragmentSelectorType} 
     * @param timestampRange {module:model/ListFragmentsRequestFragmentSelectorTimestampRange} 
     */
    constructor(fragmentSelectorType, timestampRange) { 
        
        FragmentSelector.initialize(this, fragmentSelectorType, timestampRange);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fragmentSelectorType, timestampRange) { 
        obj['FragmentSelectorType'] = fragmentSelectorType;
        obj['TimestampRange'] = timestampRange;
    }

    /**
     * Constructs a <code>FragmentSelector</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FragmentSelector} obj Optional instance to populate.
     * @return {module:model/FragmentSelector} The populated <code>FragmentSelector</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FragmentSelector();

            if (data.hasOwnProperty('FragmentSelectorType')) {
                obj['FragmentSelectorType'] = ApiClient.convertToType(data['FragmentSelectorType'], FragmentSelectorType);
            }
            if (data.hasOwnProperty('TimestampRange')) {
                obj['TimestampRange'] = ListFragmentsRequestFragmentSelectorTimestampRange.constructFromObject(data['TimestampRange']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FragmentSelector</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FragmentSelector</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FragmentSelector.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FragmentSelectorType`
        if (data['FragmentSelectorType']) { // data not null
          FragmentSelectorType.validateJSON(data['FragmentSelectorType']);
        }
        // validate the optional field `TimestampRange`
        if (data['TimestampRange']) { // data not null
          ListFragmentsRequestFragmentSelectorTimestampRange.validateJSON(data['TimestampRange']);
        }

        return true;
    }


}

FragmentSelector.RequiredProperties = ["FragmentSelectorType", "TimestampRange"];

/**
 * @member {module:model/FragmentSelectorType} FragmentSelectorType
 */
FragmentSelector.prototype['FragmentSelectorType'] = undefined;

/**
 * @member {module:model/ListFragmentsRequestFragmentSelectorTimestampRange} TimestampRange
 */
FragmentSelector.prototype['TimestampRange'] = undefined;






export default FragmentSelector;

