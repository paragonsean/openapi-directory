/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetHLSStreamingSessionURLRequestHLSFragmentSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetHLSStreamingSessionURLRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetHLSStreamingSessionURLRequest {
  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STREAM_A_R_N = "StreamARN";
  @SerializedName(SERIALIZED_NAME_STREAM_A_R_N)
  private String streamARN;

  /**
   * &lt;p&gt;Whether to retrieve live, live replay, or archived, on-demand data.&lt;/p&gt; &lt;p&gt;Features of the three types of sessions include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the HLS media playlist is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new playlist on a one-second interval. When this type of session is played in a media player, the user interface typically displays a \&quot;live\&quot; notification, with no scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In &lt;code&gt;LIVE&lt;/code&gt; mode, the newest available fragments are included in an HLS media playlist, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the HLS media playlist if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the playlist, the older fragment is not added, and the gap is not filled.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE_REPLAY&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the HLS media playlist is updated similarly to how it is updated for &lt;code&gt;LIVE&lt;/code&gt; mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the media playlist every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the &lt;code&gt;ON_DEMAND&lt;/code&gt; mode. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;ON_DEMAND&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the HLS media playlist contains all the fragments for the session, up to the number that is specified in &lt;code&gt;MaxMediaPlaylistFragmentResults&lt;/code&gt;. The playlist must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In all playback modes, if &lt;code&gt;FragmentSelectorType&lt;/code&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, and if there are multiple fragments with the same start timestamp, the fragment that has the largest fragment number (that is, the newest fragment) is included in the HLS media playlist. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the HLS media playlist. This can lead to unexpected behavior in the media player.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(PlaybackModeEnum.Adapter.class)
  public enum PlaybackModeEnum {
    LIVE("LIVE"),
    
    LIVE_REPLAY("LIVE_REPLAY"),
    
    ON_DEMAND("ON_DEMAND");

    private String value;

    PlaybackModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaybackModeEnum fromValue(String value) {
      for (PlaybackModeEnum b : PlaybackModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaybackModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaybackModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaybackModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaybackModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlaybackModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAYBACK_MODE = "PlaybackMode";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_MODE)
  private PlaybackModeEnum playbackMode;

  public static final String SERIALIZED_NAME_HL_S_FRAGMENT_SELECTOR = "HLSFragmentSelector";
  @SerializedName(SERIALIZED_NAME_HL_S_FRAGMENT_SELECTOR)
  private GetHLSStreamingSessionURLRequestHLSFragmentSelector hlSFragmentSelector;

  /**
   * &lt;p&gt;Specifies which format should be used for packaging the media. Specifying the &lt;code&gt;FRAGMENTED_MP4&lt;/code&gt; container format packages the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging because there is minimal packaging overhead. The other container format option is &lt;code&gt;MPEG_TS&lt;/code&gt;. HLS has supported MPEG TS chunks since it was released and is sometimes the only supported packaging on older HLS players. MPEG TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires 5-25 percent more bandwidth and cost than fMP4.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;FRAGMENTED_MP4&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(ContainerFormatEnum.Adapter.class)
  public enum ContainerFormatEnum {
    FRAGMENTED_MP4("FRAGMENTED_MP4"),
    
    MPEG_TS("MPEG_TS");

    private String value;

    ContainerFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContainerFormatEnum fromValue(String value) {
      for (ContainerFormatEnum b : ContainerFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContainerFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContainerFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContainerFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContainerFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContainerFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTAINER_FORMAT = "ContainerFormat";
  @SerializedName(SERIALIZED_NAME_CONTAINER_FORMAT)
  private ContainerFormatEnum containerFormat;

  /**
   * &lt;p&gt;Specifies when flags marking discontinuities between fragments are added to the media playlists.&lt;/p&gt; &lt;p&gt;Media players typically build a timeline of media content to play, based on the timestamps of each fragment. This means that if there is any overlap or gap between fragments (as is typical if &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is set to &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;), the media player timeline will also have small gaps between fragments in some places, and will overwrite frames in other places. Gaps in the media player timeline can cause playback to stall and overlaps can cause playback to be jittery. When there are discontinuity flags between fragments, the media player is expected to reset the timeline, resulting in the next fragment being played immediately after the previous fragment. &lt;/p&gt; &lt;p&gt;The following modes are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALWAYS&lt;/code&gt;: a discontinuity marker is placed between every fragment in the HLS media playlist. It is recommended to use a value of &lt;code&gt;ALWAYS&lt;/code&gt; if the fragment timestamps are not accurate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NEVER&lt;/code&gt;: no discontinuity markers are placed anywhere. It is recommended to use a value of &lt;code&gt;NEVER&lt;/code&gt; to ensure the media player timeline most accurately maps to the producer timestamps. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ON_DISCONTINUITY&lt;/code&gt;: a discontinuity marker is placed between fragments that have a gap or overlap of more than 50 milliseconds. For most playback scenarios, it is recommended to use a value of &lt;code&gt;ON_DISCONTINUITY&lt;/code&gt; so that the media player timeline is only reset when there is a significant issue with the media timeline (e.g. a missing fragment).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;ALWAYS&lt;/code&gt; when &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is set to &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;, and &lt;code&gt;NEVER&lt;/code&gt; when it is set to &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(DiscontinuityModeEnum.Adapter.class)
  public enum DiscontinuityModeEnum {
    ALWAYS("ALWAYS"),
    
    NEVER("NEVER"),
    
    ON_DISCONTINUITY("ON_DISCONTINUITY");

    private String value;

    DiscontinuityModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DiscontinuityModeEnum fromValue(String value) {
      for (DiscontinuityModeEnum b : DiscontinuityModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DiscontinuityModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DiscontinuityModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DiscontinuityModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DiscontinuityModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DiscontinuityModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISCONTINUITY_MODE = "DiscontinuityMode";
  @SerializedName(SERIALIZED_NAME_DISCONTINUITY_MODE)
  private DiscontinuityModeEnum discontinuityMode;

  /**
   * &lt;p&gt;Specifies when the fragment start timestamps should be included in the HLS media playlist. Typically, media players report the playhead position as a time relative to the start of the first fragment in the playback session. However, when the start timestamps are included in the HLS media playlist, some media players might report the current playhead as an absolute time based on the fragment timestamps. This can be useful for creating a playback experience that shows viewers the wall-clock time of the media.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;NEVER&lt;/code&gt;. When &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;, the timestamps will be the server start timestamps. Similarly, when &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, the timestamps will be the producer start timestamps. &lt;/p&gt;
   */
  @JsonAdapter(DisplayFragmentTimestampEnum.Adapter.class)
  public enum DisplayFragmentTimestampEnum {
    ALWAYS("ALWAYS"),
    
    NEVER("NEVER");

    private String value;

    DisplayFragmentTimestampEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayFragmentTimestampEnum fromValue(String value) {
      for (DisplayFragmentTimestampEnum b : DisplayFragmentTimestampEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayFragmentTimestampEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayFragmentTimestampEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayFragmentTimestampEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayFragmentTimestampEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayFragmentTimestampEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_FRAGMENT_TIMESTAMP = "DisplayFragmentTimestamp";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FRAGMENT_TIMESTAMP)
  private DisplayFragmentTimestampEnum displayFragmentTimestamp;

  public static final String SERIALIZED_NAME_EXPIRES = "Expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Integer expires;

  public static final String SERIALIZED_NAME_MAX_MEDIA_PLAYLIST_FRAGMENT_RESULTS = "MaxMediaPlaylistFragmentResults";
  @SerializedName(SERIALIZED_NAME_MAX_MEDIA_PLAYLIST_FRAGMENT_RESULTS)
  private Integer maxMediaPlaylistFragmentResults;

  public GetHLSStreamingSessionURLRequest() {
  }

  public GetHLSStreamingSessionURLRequest streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the stream for which to retrieve the HLS master playlist URL.&lt;/p&gt; &lt;p&gt;You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt;
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public GetHLSStreamingSessionURLRequest streamARN(String streamARN) {
    this.streamARN = streamARN;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master playlist URL.&lt;/p&gt; &lt;p&gt;You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt;
   * @return streamARN
   */
  @javax.annotation.Nullable
  public String getStreamARN() {
    return streamARN;
  }

  public void setStreamARN(String streamARN) {
    this.streamARN = streamARN;
  }


  public GetHLSStreamingSessionURLRequest playbackMode(PlaybackModeEnum playbackMode) {
    this.playbackMode = playbackMode;
    return this;
  }

  /**
   * &lt;p&gt;Whether to retrieve live, live replay, or archived, on-demand data.&lt;/p&gt; &lt;p&gt;Features of the three types of sessions include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the HLS media playlist is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new playlist on a one-second interval. When this type of session is played in a media player, the user interface typically displays a \&quot;live\&quot; notification, with no scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In &lt;code&gt;LIVE&lt;/code&gt; mode, the newest available fragments are included in an HLS media playlist, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the HLS media playlist if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the playlist, the older fragment is not added, and the gap is not filled.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE_REPLAY&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the HLS media playlist is updated similarly to how it is updated for &lt;code&gt;LIVE&lt;/code&gt; mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the media playlist every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the &lt;code&gt;ON_DEMAND&lt;/code&gt; mode. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;ON_DEMAND&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the HLS media playlist contains all the fragments for the session, up to the number that is specified in &lt;code&gt;MaxMediaPlaylistFragmentResults&lt;/code&gt;. The playlist must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In all playback modes, if &lt;code&gt;FragmentSelectorType&lt;/code&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, and if there are multiple fragments with the same start timestamp, the fragment that has the largest fragment number (that is, the newest fragment) is included in the HLS media playlist. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the HLS media playlist. This can lead to unexpected behavior in the media player.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt;
   * @return playbackMode
   */
  @javax.annotation.Nullable
  public PlaybackModeEnum getPlaybackMode() {
    return playbackMode;
  }

  public void setPlaybackMode(PlaybackModeEnum playbackMode) {
    this.playbackMode = playbackMode;
  }


  public GetHLSStreamingSessionURLRequest hlSFragmentSelector(GetHLSStreamingSessionURLRequestHLSFragmentSelector hlSFragmentSelector) {
    this.hlSFragmentSelector = hlSFragmentSelector;
    return this;
  }

  /**
   * Get hlSFragmentSelector
   * @return hlSFragmentSelector
   */
  @javax.annotation.Nullable
  public GetHLSStreamingSessionURLRequestHLSFragmentSelector getHlSFragmentSelector() {
    return hlSFragmentSelector;
  }

  public void setHlSFragmentSelector(GetHLSStreamingSessionURLRequestHLSFragmentSelector hlSFragmentSelector) {
    this.hlSFragmentSelector = hlSFragmentSelector;
  }


  public GetHLSStreamingSessionURLRequest containerFormat(ContainerFormatEnum containerFormat) {
    this.containerFormat = containerFormat;
    return this;
  }

  /**
   * &lt;p&gt;Specifies which format should be used for packaging the media. Specifying the &lt;code&gt;FRAGMENTED_MP4&lt;/code&gt; container format packages the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging because there is minimal packaging overhead. The other container format option is &lt;code&gt;MPEG_TS&lt;/code&gt;. HLS has supported MPEG TS chunks since it was released and is sometimes the only supported packaging on older HLS players. MPEG TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires 5-25 percent more bandwidth and cost than fMP4.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;FRAGMENTED_MP4&lt;/code&gt;.&lt;/p&gt;
   * @return containerFormat
   */
  @javax.annotation.Nullable
  public ContainerFormatEnum getContainerFormat() {
    return containerFormat;
  }

  public void setContainerFormat(ContainerFormatEnum containerFormat) {
    this.containerFormat = containerFormat;
  }


  public GetHLSStreamingSessionURLRequest discontinuityMode(DiscontinuityModeEnum discontinuityMode) {
    this.discontinuityMode = discontinuityMode;
    return this;
  }

  /**
   * &lt;p&gt;Specifies when flags marking discontinuities between fragments are added to the media playlists.&lt;/p&gt; &lt;p&gt;Media players typically build a timeline of media content to play, based on the timestamps of each fragment. This means that if there is any overlap or gap between fragments (as is typical if &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is set to &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;), the media player timeline will also have small gaps between fragments in some places, and will overwrite frames in other places. Gaps in the media player timeline can cause playback to stall and overlaps can cause playback to be jittery. When there are discontinuity flags between fragments, the media player is expected to reset the timeline, resulting in the next fragment being played immediately after the previous fragment. &lt;/p&gt; &lt;p&gt;The following modes are supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ALWAYS&lt;/code&gt;: a discontinuity marker is placed between every fragment in the HLS media playlist. It is recommended to use a value of &lt;code&gt;ALWAYS&lt;/code&gt; if the fragment timestamps are not accurate.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NEVER&lt;/code&gt;: no discontinuity markers are placed anywhere. It is recommended to use a value of &lt;code&gt;NEVER&lt;/code&gt; to ensure the media player timeline most accurately maps to the producer timestamps. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ON_DISCONTINUITY&lt;/code&gt;: a discontinuity marker is placed between fragments that have a gap or overlap of more than 50 milliseconds. For most playback scenarios, it is recommended to use a value of &lt;code&gt;ON_DISCONTINUITY&lt;/code&gt; so that the media player timeline is only reset when there is a significant issue with the media timeline (e.g. a missing fragment).&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The default is &lt;code&gt;ALWAYS&lt;/code&gt; when &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is set to &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;, and &lt;code&gt;NEVER&lt;/code&gt; when it is set to &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;.&lt;/p&gt;
   * @return discontinuityMode
   */
  @javax.annotation.Nullable
  public DiscontinuityModeEnum getDiscontinuityMode() {
    return discontinuityMode;
  }

  public void setDiscontinuityMode(DiscontinuityModeEnum discontinuityMode) {
    this.discontinuityMode = discontinuityMode;
  }


  public GetHLSStreamingSessionURLRequest displayFragmentTimestamp(DisplayFragmentTimestampEnum displayFragmentTimestamp) {
    this.displayFragmentTimestamp = displayFragmentTimestamp;
    return this;
  }

  /**
   * &lt;p&gt;Specifies when the fragment start timestamps should be included in the HLS media playlist. Typically, media players report the playhead position as a time relative to the start of the first fragment in the playback session. However, when the start timestamps are included in the HLS media playlist, some media players might report the current playhead as an absolute time based on the fragment timestamps. This can be useful for creating a playback experience that shows viewers the wall-clock time of the media.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;NEVER&lt;/code&gt;. When &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;, the timestamps will be the server start timestamps. Similarly, when &lt;a&gt;HLSFragmentSelector&lt;/a&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, the timestamps will be the producer start timestamps. &lt;/p&gt;
   * @return displayFragmentTimestamp
   */
  @javax.annotation.Nullable
  public DisplayFragmentTimestampEnum getDisplayFragmentTimestamp() {
    return displayFragmentTimestamp;
  }

  public void setDisplayFragmentTimestamp(DisplayFragmentTimestampEnum displayFragmentTimestamp) {
    this.displayFragmentTimestamp = displayFragmentTimestamp;
  }


  public GetHLSStreamingSessionURLRequest expires(Integer expires) {
    this.expires = expires;
    return this;
  }

  /**
   * &lt;p&gt;The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).&lt;/p&gt; &lt;p&gt;When a session expires, no new calls to &lt;code&gt;GetHLSMasterPlaylist&lt;/code&gt;, &lt;code&gt;GetHLSMediaPlaylist&lt;/code&gt;, &lt;code&gt;GetMP4InitFragment&lt;/code&gt;, &lt;code&gt;GetMP4MediaFragment&lt;/code&gt;, or &lt;code&gt;GetTSFragment&lt;/code&gt; can be made for that session.&lt;/p&gt; &lt;p&gt;The default is 300 (5 minutes).&lt;/p&gt;
   * minimum: 300
   * maximum: 43200
   * @return expires
   */
  @javax.annotation.Nullable
  public Integer getExpires() {
    return expires;
  }

  public void setExpires(Integer expires) {
    this.expires = expires;
  }


  public GetHLSStreamingSessionURLRequest maxMediaPlaylistFragmentResults(Integer maxMediaPlaylistFragmentResults) {
    this.maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResults;
    return this;
  }

  /**
   * &lt;p&gt;The maximum number of fragments that are returned in the HLS media playlists.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;LIVE&lt;/code&gt;, the most recent fragments are returned up to this value. When the &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;ON_DEMAND&lt;/code&gt;, the oldest fragments are returned, up to this maximum number.&lt;/p&gt; &lt;p&gt;When there are a higher number of fragments available in a live HLS media playlist, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live HLS media playlist have a minimum of 3 fragments and a maximum of 10 fragments.&lt;/p&gt; &lt;p&gt;The default is 5 fragments if &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;LIVE&lt;/code&gt; or &lt;code&gt;LIVE_REPLAY&lt;/code&gt;, and 1,000 if &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;ON_DEMAND&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The maximum value of 5,000 fragments corresponds to more than 80 minutes of video on streams with 1-second fragments, and more than 13 hours of video on streams with 10-second fragments.&lt;/p&gt;
   * minimum: 1
   * maximum: 5000
   * @return maxMediaPlaylistFragmentResults
   */
  @javax.annotation.Nullable
  public Integer getMaxMediaPlaylistFragmentResults() {
    return maxMediaPlaylistFragmentResults;
  }

  public void setMaxMediaPlaylistFragmentResults(Integer maxMediaPlaylistFragmentResults) {
    this.maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetHLSStreamingSessionURLRequest getHLSStreamingSessionURLRequest = (GetHLSStreamingSessionURLRequest) o;
    return Objects.equals(this.streamName, getHLSStreamingSessionURLRequest.streamName) &&
        Objects.equals(this.streamARN, getHLSStreamingSessionURLRequest.streamARN) &&
        Objects.equals(this.playbackMode, getHLSStreamingSessionURLRequest.playbackMode) &&
        Objects.equals(this.hlSFragmentSelector, getHLSStreamingSessionURLRequest.hlSFragmentSelector) &&
        Objects.equals(this.containerFormat, getHLSStreamingSessionURLRequest.containerFormat) &&
        Objects.equals(this.discontinuityMode, getHLSStreamingSessionURLRequest.discontinuityMode) &&
        Objects.equals(this.displayFragmentTimestamp, getHLSStreamingSessionURLRequest.displayFragmentTimestamp) &&
        Objects.equals(this.expires, getHLSStreamingSessionURLRequest.expires) &&
        Objects.equals(this.maxMediaPlaylistFragmentResults, getHLSStreamingSessionURLRequest.maxMediaPlaylistFragmentResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamName, streamARN, playbackMode, hlSFragmentSelector, containerFormat, discontinuityMode, displayFragmentTimestamp, expires, maxMediaPlaylistFragmentResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetHLSStreamingSessionURLRequest {\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamARN: ").append(toIndentedString(streamARN)).append("\n");
    sb.append("    playbackMode: ").append(toIndentedString(playbackMode)).append("\n");
    sb.append("    hlSFragmentSelector: ").append(toIndentedString(hlSFragmentSelector)).append("\n");
    sb.append("    containerFormat: ").append(toIndentedString(containerFormat)).append("\n");
    sb.append("    discontinuityMode: ").append(toIndentedString(discontinuityMode)).append("\n");
    sb.append("    displayFragmentTimestamp: ").append(toIndentedString(displayFragmentTimestamp)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    maxMediaPlaylistFragmentResults: ").append(toIndentedString(maxMediaPlaylistFragmentResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamName");
    openapiFields.add("StreamARN");
    openapiFields.add("PlaybackMode");
    openapiFields.add("HLSFragmentSelector");
    openapiFields.add("ContainerFormat");
    openapiFields.add("DiscontinuityMode");
    openapiFields.add("DisplayFragmentTimestamp");
    openapiFields.add("Expires");
    openapiFields.add("MaxMediaPlaylistFragmentResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetHLSStreamingSessionURLRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetHLSStreamingSessionURLRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetHLSStreamingSessionURLRequest is not found in the empty JSON string", GetHLSStreamingSessionURLRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetHLSStreamingSessionURLRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetHLSStreamingSessionURLRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) && !jsonObj.get("StreamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamName").toString()));
      }
      if ((jsonObj.get("StreamARN") != null && !jsonObj.get("StreamARN").isJsonNull()) && !jsonObj.get("StreamARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamARN").toString()));
      }
      if ((jsonObj.get("PlaybackMode") != null && !jsonObj.get("PlaybackMode").isJsonNull()) && !jsonObj.get("PlaybackMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaybackMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaybackMode").toString()));
      }
      // validate the optional field `PlaybackMode`
      if (jsonObj.get("PlaybackMode") != null && !jsonObj.get("PlaybackMode").isJsonNull()) {
        PlaybackModeEnum.validateJsonElement(jsonObj.get("PlaybackMode"));
      }
      // validate the optional field `HLSFragmentSelector`
      if (jsonObj.get("HLSFragmentSelector") != null && !jsonObj.get("HLSFragmentSelector").isJsonNull()) {
        GetHLSStreamingSessionURLRequestHLSFragmentSelector.validateJsonElement(jsonObj.get("HLSFragmentSelector"));
      }
      if ((jsonObj.get("ContainerFormat") != null && !jsonObj.get("ContainerFormat").isJsonNull()) && !jsonObj.get("ContainerFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContainerFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContainerFormat").toString()));
      }
      // validate the optional field `ContainerFormat`
      if (jsonObj.get("ContainerFormat") != null && !jsonObj.get("ContainerFormat").isJsonNull()) {
        ContainerFormatEnum.validateJsonElement(jsonObj.get("ContainerFormat"));
      }
      if ((jsonObj.get("DiscontinuityMode") != null && !jsonObj.get("DiscontinuityMode").isJsonNull()) && !jsonObj.get("DiscontinuityMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiscontinuityMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DiscontinuityMode").toString()));
      }
      // validate the optional field `DiscontinuityMode`
      if (jsonObj.get("DiscontinuityMode") != null && !jsonObj.get("DiscontinuityMode").isJsonNull()) {
        DiscontinuityModeEnum.validateJsonElement(jsonObj.get("DiscontinuityMode"));
      }
      if ((jsonObj.get("DisplayFragmentTimestamp") != null && !jsonObj.get("DisplayFragmentTimestamp").isJsonNull()) && !jsonObj.get("DisplayFragmentTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayFragmentTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayFragmentTimestamp").toString()));
      }
      // validate the optional field `DisplayFragmentTimestamp`
      if (jsonObj.get("DisplayFragmentTimestamp") != null && !jsonObj.get("DisplayFragmentTimestamp").isJsonNull()) {
        DisplayFragmentTimestampEnum.validateJsonElement(jsonObj.get("DisplayFragmentTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetHLSStreamingSessionURLRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetHLSStreamingSessionURLRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetHLSStreamingSessionURLRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetHLSStreamingSessionURLRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetHLSStreamingSessionURLRequest>() {
           @Override
           public void write(JsonWriter out, GetHLSStreamingSessionURLRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetHLSStreamingSessionURLRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetHLSStreamingSessionURLRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetHLSStreamingSessionURLRequest
   * @throws IOException if the JSON string is invalid with respect to GetHLSStreamingSessionURLRequest
   */
  public static GetHLSStreamingSessionURLRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetHLSStreamingSessionURLRequest.class);
  }

  /**
   * Convert an instance of GetHLSStreamingSessionURLRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

