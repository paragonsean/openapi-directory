/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a segment of video or other time-delimited data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Fragment {
  public static final String SERIALIZED_NAME_FRAGMENT_NUMBER = "FragmentNumber";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_NUMBER)
  private String fragmentNumber;

  public static final String SERIALIZED_NAME_FRAGMENT_SIZE_IN_BYTES = "FragmentSizeInBytes";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_SIZE_IN_BYTES)
  private Integer fragmentSizeInBytes;

  public static final String SERIALIZED_NAME_PRODUCER_TIMESTAMP = "ProducerTimestamp";
  @SerializedName(SERIALIZED_NAME_PRODUCER_TIMESTAMP)
  private OffsetDateTime producerTimestamp;

  public static final String SERIALIZED_NAME_SERVER_TIMESTAMP = "ServerTimestamp";
  @SerializedName(SERIALIZED_NAME_SERVER_TIMESTAMP)
  private OffsetDateTime serverTimestamp;

  public static final String SERIALIZED_NAME_FRAGMENT_LENGTH_IN_MILLISECONDS = "FragmentLengthInMilliseconds";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_LENGTH_IN_MILLISECONDS)
  private Integer fragmentLengthInMilliseconds;

  public Fragment() {
  }

  public Fragment fragmentNumber(String fragmentNumber) {
    this.fragmentNumber = fragmentNumber;
    return this;
  }

  /**
   * Get fragmentNumber
   * @return fragmentNumber
   */
  @javax.annotation.Nullable
  public String getFragmentNumber() {
    return fragmentNumber;
  }

  public void setFragmentNumber(String fragmentNumber) {
    this.fragmentNumber = fragmentNumber;
  }


  public Fragment fragmentSizeInBytes(Integer fragmentSizeInBytes) {
    this.fragmentSizeInBytes = fragmentSizeInBytes;
    return this;
  }

  /**
   * Get fragmentSizeInBytes
   * @return fragmentSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getFragmentSizeInBytes() {
    return fragmentSizeInBytes;
  }

  public void setFragmentSizeInBytes(Integer fragmentSizeInBytes) {
    this.fragmentSizeInBytes = fragmentSizeInBytes;
  }


  public Fragment producerTimestamp(OffsetDateTime producerTimestamp) {
    this.producerTimestamp = producerTimestamp;
    return this;
  }

  /**
   * Get producerTimestamp
   * @return producerTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getProducerTimestamp() {
    return producerTimestamp;
  }

  public void setProducerTimestamp(OffsetDateTime producerTimestamp) {
    this.producerTimestamp = producerTimestamp;
  }


  public Fragment serverTimestamp(OffsetDateTime serverTimestamp) {
    this.serverTimestamp = serverTimestamp;
    return this;
  }

  /**
   * Get serverTimestamp
   * @return serverTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getServerTimestamp() {
    return serverTimestamp;
  }

  public void setServerTimestamp(OffsetDateTime serverTimestamp) {
    this.serverTimestamp = serverTimestamp;
  }


  public Fragment fragmentLengthInMilliseconds(Integer fragmentLengthInMilliseconds) {
    this.fragmentLengthInMilliseconds = fragmentLengthInMilliseconds;
    return this;
  }

  /**
   * Get fragmentLengthInMilliseconds
   * @return fragmentLengthInMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getFragmentLengthInMilliseconds() {
    return fragmentLengthInMilliseconds;
  }

  public void setFragmentLengthInMilliseconds(Integer fragmentLengthInMilliseconds) {
    this.fragmentLengthInMilliseconds = fragmentLengthInMilliseconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Fragment fragment = (Fragment) o;
    return Objects.equals(this.fragmentNumber, fragment.fragmentNumber) &&
        Objects.equals(this.fragmentSizeInBytes, fragment.fragmentSizeInBytes) &&
        Objects.equals(this.producerTimestamp, fragment.producerTimestamp) &&
        Objects.equals(this.serverTimestamp, fragment.serverTimestamp) &&
        Objects.equals(this.fragmentLengthInMilliseconds, fragment.fragmentLengthInMilliseconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fragmentNumber, fragmentSizeInBytes, producerTimestamp, serverTimestamp, fragmentLengthInMilliseconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Fragment {\n");
    sb.append("    fragmentNumber: ").append(toIndentedString(fragmentNumber)).append("\n");
    sb.append("    fragmentSizeInBytes: ").append(toIndentedString(fragmentSizeInBytes)).append("\n");
    sb.append("    producerTimestamp: ").append(toIndentedString(producerTimestamp)).append("\n");
    sb.append("    serverTimestamp: ").append(toIndentedString(serverTimestamp)).append("\n");
    sb.append("    fragmentLengthInMilliseconds: ").append(toIndentedString(fragmentLengthInMilliseconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FragmentNumber");
    openapiFields.add("FragmentSizeInBytes");
    openapiFields.add("ProducerTimestamp");
    openapiFields.add("ServerTimestamp");
    openapiFields.add("FragmentLengthInMilliseconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Fragment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Fragment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Fragment is not found in the empty JSON string", Fragment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Fragment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Fragment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FragmentNumber`
      if (jsonObj.get("FragmentNumber") != null && !jsonObj.get("FragmentNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FragmentNumber"));
      }
      // validate the optional field `FragmentSizeInBytes`
      if (jsonObj.get("FragmentSizeInBytes") != null && !jsonObj.get("FragmentSizeInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FragmentSizeInBytes"));
      }
      // validate the optional field `ProducerTimestamp`
      if (jsonObj.get("ProducerTimestamp") != null && !jsonObj.get("ProducerTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ProducerTimestamp"));
      }
      // validate the optional field `ServerTimestamp`
      if (jsonObj.get("ServerTimestamp") != null && !jsonObj.get("ServerTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("ServerTimestamp"));
      }
      // validate the optional field `FragmentLengthInMilliseconds`
      if (jsonObj.get("FragmentLengthInMilliseconds") != null && !jsonObj.get("FragmentLengthInMilliseconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FragmentLengthInMilliseconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Fragment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Fragment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Fragment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Fragment.class));

       return (TypeAdapter<T>) new TypeAdapter<Fragment>() {
           @Override
           public void write(JsonWriter out, Fragment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Fragment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Fragment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Fragment
   * @throws IOException if the JSON string is invalid with respect to Fragment
   */
  public static Fragment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Fragment.class);
  }

  /**
   * Convert an instance of Fragment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

