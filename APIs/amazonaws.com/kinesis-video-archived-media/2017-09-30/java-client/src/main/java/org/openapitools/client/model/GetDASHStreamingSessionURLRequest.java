/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetDASHStreamingSessionURLRequestDASHFragmentSelector;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDASHStreamingSessionURLRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDASHStreamingSessionURLRequest {
  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STREAM_A_R_N = "StreamARN";
  @SerializedName(SERIALIZED_NAME_STREAM_A_R_N)
  private String streamARN;

  /**
   * &lt;p&gt;Whether to retrieve live, live replay, or archived, on-demand data.&lt;/p&gt; &lt;p&gt;Features of the three types of sessions include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a \&quot;live\&quot; notification, with no scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In &lt;code&gt;LIVE&lt;/code&gt; mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE_REPLAY&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for &lt;code&gt;LIVE&lt;/code&gt; mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the &lt;code&gt;ON_DEMAND&lt;/code&gt; mode. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;ON_DEMAND&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in &lt;code&gt;MaxManifestFragmentResults&lt;/code&gt;. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In all playback modes, if &lt;code&gt;FragmentSelectorType&lt;/code&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(PlaybackModeEnum.Adapter.class)
  public enum PlaybackModeEnum {
    LIVE("LIVE"),
    
    LIVE_REPLAY("LIVE_REPLAY"),
    
    ON_DEMAND("ON_DEMAND");

    private String value;

    PlaybackModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlaybackModeEnum fromValue(String value) {
      for (PlaybackModeEnum b : PlaybackModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlaybackModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlaybackModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlaybackModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlaybackModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlaybackModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLAYBACK_MODE = "PlaybackMode";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_MODE)
  private PlaybackModeEnum playbackMode;

  /**
   * &lt;p&gt;Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to &lt;code&gt;ALWAYS&lt;/code&gt;, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage this custom attribute.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;NEVER&lt;/code&gt;. When &lt;a&gt;DASHFragmentSelector&lt;/a&gt; is &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;, the timestamps will be the server start timestamps. Similarly, when &lt;a&gt;DASHFragmentSelector&lt;/a&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, the timestamps will be the producer start timestamps. &lt;/p&gt;
   */
  @JsonAdapter(DisplayFragmentTimestampEnum.Adapter.class)
  public enum DisplayFragmentTimestampEnum {
    ALWAYS("ALWAYS"),
    
    NEVER("NEVER");

    private String value;

    DisplayFragmentTimestampEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayFragmentTimestampEnum fromValue(String value) {
      for (DisplayFragmentTimestampEnum b : DisplayFragmentTimestampEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayFragmentTimestampEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayFragmentTimestampEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayFragmentTimestampEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayFragmentTimestampEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayFragmentTimestampEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_FRAGMENT_TIMESTAMP = "DisplayFragmentTimestamp";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FRAGMENT_TIMESTAMP)
  private DisplayFragmentTimestampEnum displayFragmentTimestamp;

  /**
   * &lt;p&gt;Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to &lt;code&gt;ALWAYS&lt;/code&gt;, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name “kvs:fn”. These fragment numbers can be used for logging or for use with other APIs (e.g. &lt;code&gt;GetMedia&lt;/code&gt; and &lt;code&gt;GetMediaForFragmentList&lt;/code&gt;). A custom MPEG-DASH media player is necessary to leverage these this custom attribute.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;NEVER&lt;/code&gt;.&lt;/p&gt;
   */
  @JsonAdapter(DisplayFragmentNumberEnum.Adapter.class)
  public enum DisplayFragmentNumberEnum {
    ALWAYS("ALWAYS"),
    
    NEVER("NEVER");

    private String value;

    DisplayFragmentNumberEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplayFragmentNumberEnum fromValue(String value) {
      for (DisplayFragmentNumberEnum b : DisplayFragmentNumberEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplayFragmentNumberEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplayFragmentNumberEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplayFragmentNumberEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplayFragmentNumberEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplayFragmentNumberEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_FRAGMENT_NUMBER = "DisplayFragmentNumber";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FRAGMENT_NUMBER)
  private DisplayFragmentNumberEnum displayFragmentNumber;

  public static final String SERIALIZED_NAME_DA_S_H_FRAGMENT_SELECTOR = "DASHFragmentSelector";
  @SerializedName(SERIALIZED_NAME_DA_S_H_FRAGMENT_SELECTOR)
  private GetDASHStreamingSessionURLRequestDASHFragmentSelector daSHFragmentSelector;

  public static final String SERIALIZED_NAME_EXPIRES = "Expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Integer expires;

  public static final String SERIALIZED_NAME_MAX_MANIFEST_FRAGMENT_RESULTS = "MaxManifestFragmentResults";
  @SerializedName(SERIALIZED_NAME_MAX_MANIFEST_FRAGMENT_RESULTS)
  private Integer maxManifestFragmentResults;

  public GetDASHStreamingSessionURLRequest() {
  }

  public GetDASHStreamingSessionURLRequest streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * &lt;p&gt;The name of the stream for which to retrieve the MPEG-DASH manifest URL.&lt;/p&gt; &lt;p&gt;You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt;
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public GetDASHStreamingSessionURLRequest streamARN(String streamARN) {
    this.streamARN = streamARN;
    return this;
  }

  /**
   * &lt;p&gt;The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest URL.&lt;/p&gt; &lt;p&gt;You must specify either the &lt;code&gt;StreamName&lt;/code&gt; or the &lt;code&gt;StreamARN&lt;/code&gt;.&lt;/p&gt;
   * @return streamARN
   */
  @javax.annotation.Nullable
  public String getStreamARN() {
    return streamARN;
  }

  public void setStreamARN(String streamARN) {
    this.streamARN = streamARN;
  }


  public GetDASHStreamingSessionURLRequest playbackMode(PlaybackModeEnum playbackMode) {
    this.playbackMode = playbackMode;
    return this;
  }

  /**
   * &lt;p&gt;Whether to retrieve live, live replay, or archived, on-demand data.&lt;/p&gt; &lt;p&gt;Features of the three types of sessions include the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a \&quot;live\&quot; notification, with no scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;note&gt; &lt;p&gt;In &lt;code&gt;LIVE&lt;/code&gt; mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.&lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;LIVE_REPLAY&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for &lt;code&gt;LIVE&lt;/code&gt; mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the &lt;code&gt;ON_DEMAND&lt;/code&gt; mode. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;ON_DEMAND&lt;/code&gt; &lt;/b&gt;: For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in &lt;code&gt;MaxManifestFragmentResults&lt;/code&gt;. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In all playback modes, if &lt;code&gt;FragmentSelectorType&lt;/code&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.&lt;/p&gt; &lt;p&gt;The default is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt;
   * @return playbackMode
   */
  @javax.annotation.Nullable
  public PlaybackModeEnum getPlaybackMode() {
    return playbackMode;
  }

  public void setPlaybackMode(PlaybackModeEnum playbackMode) {
    this.playbackMode = playbackMode;
  }


  public GetDASHStreamingSessionURLRequest displayFragmentTimestamp(DisplayFragmentTimestampEnum displayFragmentTimestamp) {
    this.displayFragmentTimestamp = displayFragmentTimestamp;
    return this;
  }

  /**
   * &lt;p&gt;Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to &lt;code&gt;ALWAYS&lt;/code&gt;, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage this custom attribute.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;NEVER&lt;/code&gt;. When &lt;a&gt;DASHFragmentSelector&lt;/a&gt; is &lt;code&gt;SERVER_TIMESTAMP&lt;/code&gt;, the timestamps will be the server start timestamps. Similarly, when &lt;a&gt;DASHFragmentSelector&lt;/a&gt; is &lt;code&gt;PRODUCER_TIMESTAMP&lt;/code&gt;, the timestamps will be the producer start timestamps. &lt;/p&gt;
   * @return displayFragmentTimestamp
   */
  @javax.annotation.Nullable
  public DisplayFragmentTimestampEnum getDisplayFragmentTimestamp() {
    return displayFragmentTimestamp;
  }

  public void setDisplayFragmentTimestamp(DisplayFragmentTimestampEnum displayFragmentTimestamp) {
    this.displayFragmentTimestamp = displayFragmentTimestamp;
  }


  public GetDASHStreamingSessionURLRequest displayFragmentNumber(DisplayFragmentNumberEnum displayFragmentNumber) {
    this.displayFragmentNumber = displayFragmentNumber;
    return this;
  }

  /**
   * &lt;p&gt;Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to &lt;code&gt;ALWAYS&lt;/code&gt;, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name “kvs:fn”. These fragment numbers can be used for logging or for use with other APIs (e.g. &lt;code&gt;GetMedia&lt;/code&gt; and &lt;code&gt;GetMediaForFragmentList&lt;/code&gt;). A custom MPEG-DASH media player is necessary to leverage these this custom attribute.&lt;/p&gt; &lt;p&gt;The default value is &lt;code&gt;NEVER&lt;/code&gt;.&lt;/p&gt;
   * @return displayFragmentNumber
   */
  @javax.annotation.Nullable
  public DisplayFragmentNumberEnum getDisplayFragmentNumber() {
    return displayFragmentNumber;
  }

  public void setDisplayFragmentNumber(DisplayFragmentNumberEnum displayFragmentNumber) {
    this.displayFragmentNumber = displayFragmentNumber;
  }


  public GetDASHStreamingSessionURLRequest daSHFragmentSelector(GetDASHStreamingSessionURLRequestDASHFragmentSelector daSHFragmentSelector) {
    this.daSHFragmentSelector = daSHFragmentSelector;
    return this;
  }

  /**
   * Get daSHFragmentSelector
   * @return daSHFragmentSelector
   */
  @javax.annotation.Nullable
  public GetDASHStreamingSessionURLRequestDASHFragmentSelector getDaSHFragmentSelector() {
    return daSHFragmentSelector;
  }

  public void setDaSHFragmentSelector(GetDASHStreamingSessionURLRequestDASHFragmentSelector daSHFragmentSelector) {
    this.daSHFragmentSelector = daSHFragmentSelector;
  }


  public GetDASHStreamingSessionURLRequest expires(Integer expires) {
    this.expires = expires;
    return this;
  }

  /**
   * &lt;p&gt;The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).&lt;/p&gt; &lt;p&gt;When a session expires, no new calls to &lt;code&gt;GetDashManifest&lt;/code&gt;, &lt;code&gt;GetMP4InitFragment&lt;/code&gt;, or &lt;code&gt;GetMP4MediaFragment&lt;/code&gt; can be made for that session.&lt;/p&gt; &lt;p&gt;The default is 300 (5 minutes).&lt;/p&gt;
   * minimum: 300
   * maximum: 43200
   * @return expires
   */
  @javax.annotation.Nullable
  public Integer getExpires() {
    return expires;
  }

  public void setExpires(Integer expires) {
    this.expires = expires;
  }


  public GetDASHStreamingSessionURLRequest maxManifestFragmentResults(Integer maxManifestFragmentResults) {
    this.maxManifestFragmentResults = maxManifestFragmentResults;
    return this;
  }

  /**
   * &lt;p&gt;The maximum number of fragments that are returned in the MPEG-DASH manifest.&lt;/p&gt; &lt;p&gt;When the &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;LIVE&lt;/code&gt;, the most recent fragments are returned up to this value. When the &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;ON_DEMAND&lt;/code&gt;, the oldest fragments are returned, up to this maximum number.&lt;/p&gt; &lt;p&gt;When there are a higher number of fragments available in a live MPEG-DASH manifest, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum of 10 fragments.&lt;/p&gt; &lt;p&gt;The default is 5 fragments if &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;LIVE&lt;/code&gt; or &lt;code&gt;LIVE_REPLAY&lt;/code&gt;, and 1,000 if &lt;code&gt;PlaybackMode&lt;/code&gt; is &lt;code&gt;ON_DEMAND&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;The maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.&lt;/p&gt;
   * minimum: 1
   * maximum: 5000
   * @return maxManifestFragmentResults
   */
  @javax.annotation.Nullable
  public Integer getMaxManifestFragmentResults() {
    return maxManifestFragmentResults;
  }

  public void setMaxManifestFragmentResults(Integer maxManifestFragmentResults) {
    this.maxManifestFragmentResults = maxManifestFragmentResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDASHStreamingSessionURLRequest getDASHStreamingSessionURLRequest = (GetDASHStreamingSessionURLRequest) o;
    return Objects.equals(this.streamName, getDASHStreamingSessionURLRequest.streamName) &&
        Objects.equals(this.streamARN, getDASHStreamingSessionURLRequest.streamARN) &&
        Objects.equals(this.playbackMode, getDASHStreamingSessionURLRequest.playbackMode) &&
        Objects.equals(this.displayFragmentTimestamp, getDASHStreamingSessionURLRequest.displayFragmentTimestamp) &&
        Objects.equals(this.displayFragmentNumber, getDASHStreamingSessionURLRequest.displayFragmentNumber) &&
        Objects.equals(this.daSHFragmentSelector, getDASHStreamingSessionURLRequest.daSHFragmentSelector) &&
        Objects.equals(this.expires, getDASHStreamingSessionURLRequest.expires) &&
        Objects.equals(this.maxManifestFragmentResults, getDASHStreamingSessionURLRequest.maxManifestFragmentResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamName, streamARN, playbackMode, displayFragmentTimestamp, displayFragmentNumber, daSHFragmentSelector, expires, maxManifestFragmentResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDASHStreamingSessionURLRequest {\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamARN: ").append(toIndentedString(streamARN)).append("\n");
    sb.append("    playbackMode: ").append(toIndentedString(playbackMode)).append("\n");
    sb.append("    displayFragmentTimestamp: ").append(toIndentedString(displayFragmentTimestamp)).append("\n");
    sb.append("    displayFragmentNumber: ").append(toIndentedString(displayFragmentNumber)).append("\n");
    sb.append("    daSHFragmentSelector: ").append(toIndentedString(daSHFragmentSelector)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    maxManifestFragmentResults: ").append(toIndentedString(maxManifestFragmentResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamName");
    openapiFields.add("StreamARN");
    openapiFields.add("PlaybackMode");
    openapiFields.add("DisplayFragmentTimestamp");
    openapiFields.add("DisplayFragmentNumber");
    openapiFields.add("DASHFragmentSelector");
    openapiFields.add("Expires");
    openapiFields.add("MaxManifestFragmentResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDASHStreamingSessionURLRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDASHStreamingSessionURLRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDASHStreamingSessionURLRequest is not found in the empty JSON string", GetDASHStreamingSessionURLRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDASHStreamingSessionURLRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDASHStreamingSessionURLRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) && !jsonObj.get("StreamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamName").toString()));
      }
      if ((jsonObj.get("StreamARN") != null && !jsonObj.get("StreamARN").isJsonNull()) && !jsonObj.get("StreamARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StreamARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StreamARN").toString()));
      }
      if ((jsonObj.get("PlaybackMode") != null && !jsonObj.get("PlaybackMode").isJsonNull()) && !jsonObj.get("PlaybackMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlaybackMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlaybackMode").toString()));
      }
      // validate the optional field `PlaybackMode`
      if (jsonObj.get("PlaybackMode") != null && !jsonObj.get("PlaybackMode").isJsonNull()) {
        PlaybackModeEnum.validateJsonElement(jsonObj.get("PlaybackMode"));
      }
      if ((jsonObj.get("DisplayFragmentTimestamp") != null && !jsonObj.get("DisplayFragmentTimestamp").isJsonNull()) && !jsonObj.get("DisplayFragmentTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayFragmentTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayFragmentTimestamp").toString()));
      }
      // validate the optional field `DisplayFragmentTimestamp`
      if (jsonObj.get("DisplayFragmentTimestamp") != null && !jsonObj.get("DisplayFragmentTimestamp").isJsonNull()) {
        DisplayFragmentTimestampEnum.validateJsonElement(jsonObj.get("DisplayFragmentTimestamp"));
      }
      if ((jsonObj.get("DisplayFragmentNumber") != null && !jsonObj.get("DisplayFragmentNumber").isJsonNull()) && !jsonObj.get("DisplayFragmentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DisplayFragmentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DisplayFragmentNumber").toString()));
      }
      // validate the optional field `DisplayFragmentNumber`
      if (jsonObj.get("DisplayFragmentNumber") != null && !jsonObj.get("DisplayFragmentNumber").isJsonNull()) {
        DisplayFragmentNumberEnum.validateJsonElement(jsonObj.get("DisplayFragmentNumber"));
      }
      // validate the optional field `DASHFragmentSelector`
      if (jsonObj.get("DASHFragmentSelector") != null && !jsonObj.get("DASHFragmentSelector").isJsonNull()) {
        GetDASHStreamingSessionURLRequestDASHFragmentSelector.validateJsonElement(jsonObj.get("DASHFragmentSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDASHStreamingSessionURLRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDASHStreamingSessionURLRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDASHStreamingSessionURLRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDASHStreamingSessionURLRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDASHStreamingSessionURLRequest>() {
           @Override
           public void write(JsonWriter out, GetDASHStreamingSessionURLRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDASHStreamingSessionURLRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDASHStreamingSessionURLRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDASHStreamingSessionURLRequest
   * @throws IOException if the JSON string is invalid with respect to GetDASHStreamingSessionURLRequest
   */
  public static GetDASHStreamingSessionURLRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDASHStreamingSessionURLRequest.class);
  }

  /**
   * Convert an instance of GetDASHStreamingSessionURLRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

