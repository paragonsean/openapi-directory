/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.Format;
import org.openapitools.client.model.ImageSelectorType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetImagesInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetImagesInput {
  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STREAM_A_R_N = "StreamARN";
  @SerializedName(SERIALIZED_NAME_STREAM_A_R_N)
  private String streamARN;

  public static final String SERIALIZED_NAME_IMAGE_SELECTOR_TYPE = "ImageSelectorType";
  @SerializedName(SERIALIZED_NAME_IMAGE_SELECTOR_TYPE)
  private ImageSelectorType imageSelectorType;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "StartTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private OffsetDateTime startTimestamp;

  public static final String SERIALIZED_NAME_END_TIMESTAMP = "EndTimestamp";
  @SerializedName(SERIALIZED_NAME_END_TIMESTAMP)
  private OffsetDateTime endTimestamp;

  public static final String SERIALIZED_NAME_SAMPLING_INTERVAL = "SamplingInterval";
  @SerializedName(SERIALIZED_NAME_SAMPLING_INTERVAL)
  private Integer samplingInterval;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private Format format;

  public static final String SERIALIZED_NAME_FORMAT_CONFIG = "FormatConfig";
  @SerializedName(SERIALIZED_NAME_FORMAT_CONFIG)
  private Map formatConfig;

  public static final String SERIALIZED_NAME_WIDTH_PIXELS = "WidthPixels";
  @SerializedName(SERIALIZED_NAME_WIDTH_PIXELS)
  private Integer widthPixels;

  public static final String SERIALIZED_NAME_HEIGHT_PIXELS = "HeightPixels";
  @SerializedName(SERIALIZED_NAME_HEIGHT_PIXELS)
  private Integer heightPixels;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public GetImagesInput() {
  }

  public GetImagesInput streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Get streamName
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public GetImagesInput streamARN(String streamARN) {
    this.streamARN = streamARN;
    return this;
  }

  /**
   * Get streamARN
   * @return streamARN
   */
  @javax.annotation.Nullable
  public String getStreamARN() {
    return streamARN;
  }

  public void setStreamARN(String streamARN) {
    this.streamARN = streamARN;
  }


  public GetImagesInput imageSelectorType(ImageSelectorType imageSelectorType) {
    this.imageSelectorType = imageSelectorType;
    return this;
  }

  /**
   * Get imageSelectorType
   * @return imageSelectorType
   */
  @javax.annotation.Nonnull
  public ImageSelectorType getImageSelectorType() {
    return imageSelectorType;
  }

  public void setImageSelectorType(ImageSelectorType imageSelectorType) {
    this.imageSelectorType = imageSelectorType;
  }


  public GetImagesInput startTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

  /**
   * Get startTimestamp
   * @return startTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public GetImagesInput endTimestamp(OffsetDateTime endTimestamp) {
    this.endTimestamp = endTimestamp;
    return this;
  }

  /**
   * Get endTimestamp
   * @return endTimestamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getEndTimestamp() {
    return endTimestamp;
  }

  public void setEndTimestamp(OffsetDateTime endTimestamp) {
    this.endTimestamp = endTimestamp;
  }


  public GetImagesInput samplingInterval(Integer samplingInterval) {
    this.samplingInterval = samplingInterval;
    return this;
  }

  /**
   * Get samplingInterval
   * @return samplingInterval
   */
  @javax.annotation.Nullable
  public Integer getSamplingInterval() {
    return samplingInterval;
  }

  public void setSamplingInterval(Integer samplingInterval) {
    this.samplingInterval = samplingInterval;
  }


  public GetImagesInput format(Format format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nonnull
  public Format getFormat() {
    return format;
  }

  public void setFormat(Format format) {
    this.format = format;
  }


  public GetImagesInput formatConfig(Map formatConfig) {
    this.formatConfig = formatConfig;
    return this;
  }

  /**
   * Get formatConfig
   * @return formatConfig
   */
  @javax.annotation.Nullable
  public Map getFormatConfig() {
    return formatConfig;
  }

  public void setFormatConfig(Map formatConfig) {
    this.formatConfig = formatConfig;
  }


  public GetImagesInput widthPixels(Integer widthPixels) {
    this.widthPixels = widthPixels;
    return this;
  }

  /**
   * Get widthPixels
   * @return widthPixels
   */
  @javax.annotation.Nullable
  public Integer getWidthPixels() {
    return widthPixels;
  }

  public void setWidthPixels(Integer widthPixels) {
    this.widthPixels = widthPixels;
  }


  public GetImagesInput heightPixels(Integer heightPixels) {
    this.heightPixels = heightPixels;
    return this;
  }

  /**
   * Get heightPixels
   * @return heightPixels
   */
  @javax.annotation.Nullable
  public Integer getHeightPixels() {
    return heightPixels;
  }

  public void setHeightPixels(Integer heightPixels) {
    this.heightPixels = heightPixels;
  }


  public GetImagesInput maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GetImagesInput nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetImagesInput getImagesInput = (GetImagesInput) o;
    return Objects.equals(this.streamName, getImagesInput.streamName) &&
        Objects.equals(this.streamARN, getImagesInput.streamARN) &&
        Objects.equals(this.imageSelectorType, getImagesInput.imageSelectorType) &&
        Objects.equals(this.startTimestamp, getImagesInput.startTimestamp) &&
        Objects.equals(this.endTimestamp, getImagesInput.endTimestamp) &&
        Objects.equals(this.samplingInterval, getImagesInput.samplingInterval) &&
        Objects.equals(this.format, getImagesInput.format) &&
        Objects.equals(this.formatConfig, getImagesInput.formatConfig) &&
        Objects.equals(this.widthPixels, getImagesInput.widthPixels) &&
        Objects.equals(this.heightPixels, getImagesInput.heightPixels) &&
        Objects.equals(this.maxResults, getImagesInput.maxResults) &&
        Objects.equals(this.nextToken, getImagesInput.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamName, streamARN, imageSelectorType, startTimestamp, endTimestamp, samplingInterval, format, formatConfig, widthPixels, heightPixels, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetImagesInput {\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamARN: ").append(toIndentedString(streamARN)).append("\n");
    sb.append("    imageSelectorType: ").append(toIndentedString(imageSelectorType)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    samplingInterval: ").append(toIndentedString(samplingInterval)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    formatConfig: ").append(toIndentedString(formatConfig)).append("\n");
    sb.append("    widthPixels: ").append(toIndentedString(widthPixels)).append("\n");
    sb.append("    heightPixels: ").append(toIndentedString(heightPixels)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamName");
    openapiFields.add("StreamARN");
    openapiFields.add("ImageSelectorType");
    openapiFields.add("StartTimestamp");
    openapiFields.add("EndTimestamp");
    openapiFields.add("SamplingInterval");
    openapiFields.add("Format");
    openapiFields.add("FormatConfig");
    openapiFields.add("WidthPixels");
    openapiFields.add("HeightPixels");
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ImageSelectorType");
    openapiRequiredFields.add("StartTimestamp");
    openapiRequiredFields.add("EndTimestamp");
    openapiRequiredFields.add("Format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetImagesInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetImagesInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetImagesInput is not found in the empty JSON string", GetImagesInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetImagesInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetImagesInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetImagesInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StreamName`
      if (jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamName"));
      }
      // validate the optional field `StreamARN`
      if (jsonObj.get("StreamARN") != null && !jsonObj.get("StreamARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamARN"));
      }
      // validate the required field `ImageSelectorType`
      ImageSelectorType.validateJsonElement(jsonObj.get("ImageSelectorType"));
      // validate the required field `StartTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("StartTimestamp"));
      // validate the required field `EndTimestamp`
      OffsetDateTime.validateJsonElement(jsonObj.get("EndTimestamp"));
      // validate the optional field `SamplingInterval`
      if (jsonObj.get("SamplingInterval") != null && !jsonObj.get("SamplingInterval").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("SamplingInterval"));
      }
      // validate the required field `Format`
      Format.validateJsonElement(jsonObj.get("Format"));
      // validate the optional field `FormatConfig`
      if (jsonObj.get("FormatConfig") != null && !jsonObj.get("FormatConfig").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("FormatConfig"));
      }
      // validate the optional field `WidthPixels`
      if (jsonObj.get("WidthPixels") != null && !jsonObj.get("WidthPixels").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("WidthPixels"));
      }
      // validate the optional field `HeightPixels`
      if (jsonObj.get("HeightPixels") != null && !jsonObj.get("HeightPixels").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("HeightPixels"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetImagesInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetImagesInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetImagesInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetImagesInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetImagesInput>() {
           @Override
           public void write(JsonWriter out, GetImagesInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetImagesInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetImagesInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetImagesInput
   * @throws IOException if the JSON string is invalid with respect to GetImagesInput
   */
  public static GetImagesInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetImagesInput.class);
  }

  /**
   * Convert an instance of GetImagesInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

