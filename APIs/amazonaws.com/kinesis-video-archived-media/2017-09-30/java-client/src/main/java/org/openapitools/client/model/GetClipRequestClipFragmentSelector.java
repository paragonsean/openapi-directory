/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClipFragmentSelectorType;
import org.openapitools.client.model.GetClipRequestClipFragmentSelectorTimestampRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Describes the timestamp range and timestamp origin of a range of fragments.&lt;/p&gt; &lt;p&gt;Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the clip will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetClipRequestClipFragmentSelector {
  public static final String SERIALIZED_NAME_FRAGMENT_SELECTOR_TYPE = "FragmentSelectorType";
  @SerializedName(SERIALIZED_NAME_FRAGMENT_SELECTOR_TYPE)
  private ClipFragmentSelectorType fragmentSelectorType;

  public static final String SERIALIZED_NAME_TIMESTAMP_RANGE = "TimestampRange";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_RANGE)
  private GetClipRequestClipFragmentSelectorTimestampRange timestampRange;

  public GetClipRequestClipFragmentSelector() {
  }

  public GetClipRequestClipFragmentSelector fragmentSelectorType(ClipFragmentSelectorType fragmentSelectorType) {
    this.fragmentSelectorType = fragmentSelectorType;
    return this;
  }

  /**
   * Get fragmentSelectorType
   * @return fragmentSelectorType
   */
  @javax.annotation.Nullable
  public ClipFragmentSelectorType getFragmentSelectorType() {
    return fragmentSelectorType;
  }

  public void setFragmentSelectorType(ClipFragmentSelectorType fragmentSelectorType) {
    this.fragmentSelectorType = fragmentSelectorType;
  }


  public GetClipRequestClipFragmentSelector timestampRange(GetClipRequestClipFragmentSelectorTimestampRange timestampRange) {
    this.timestampRange = timestampRange;
    return this;
  }

  /**
   * Get timestampRange
   * @return timestampRange
   */
  @javax.annotation.Nullable
  public GetClipRequestClipFragmentSelectorTimestampRange getTimestampRange() {
    return timestampRange;
  }

  public void setTimestampRange(GetClipRequestClipFragmentSelectorTimestampRange timestampRange) {
    this.timestampRange = timestampRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetClipRequestClipFragmentSelector getClipRequestClipFragmentSelector = (GetClipRequestClipFragmentSelector) o;
    return Objects.equals(this.fragmentSelectorType, getClipRequestClipFragmentSelector.fragmentSelectorType) &&
        Objects.equals(this.timestampRange, getClipRequestClipFragmentSelector.timestampRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fragmentSelectorType, timestampRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetClipRequestClipFragmentSelector {\n");
    sb.append("    fragmentSelectorType: ").append(toIndentedString(fragmentSelectorType)).append("\n");
    sb.append("    timestampRange: ").append(toIndentedString(timestampRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FragmentSelectorType");
    openapiFields.add("TimestampRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetClipRequestClipFragmentSelector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetClipRequestClipFragmentSelector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetClipRequestClipFragmentSelector is not found in the empty JSON string", GetClipRequestClipFragmentSelector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetClipRequestClipFragmentSelector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetClipRequestClipFragmentSelector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `FragmentSelectorType`
      if (jsonObj.get("FragmentSelectorType") != null && !jsonObj.get("FragmentSelectorType").isJsonNull()) {
        ClipFragmentSelectorType.validateJsonElement(jsonObj.get("FragmentSelectorType"));
      }
      // validate the optional field `TimestampRange`
      if (jsonObj.get("TimestampRange") != null && !jsonObj.get("TimestampRange").isJsonNull()) {
        GetClipRequestClipFragmentSelectorTimestampRange.validateJsonElement(jsonObj.get("TimestampRange"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetClipRequestClipFragmentSelector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetClipRequestClipFragmentSelector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetClipRequestClipFragmentSelector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetClipRequestClipFragmentSelector.class));

       return (TypeAdapter<T>) new TypeAdapter<GetClipRequestClipFragmentSelector>() {
           @Override
           public void write(JsonWriter out, GetClipRequestClipFragmentSelector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetClipRequestClipFragmentSelector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetClipRequestClipFragmentSelector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetClipRequestClipFragmentSelector
   * @throws IOException if the JSON string is invalid with respect to GetClipRequestClipFragmentSelector
   */
  public static GetClipRequestClipFragmentSelector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetClipRequestClipFragmentSelector.class);
  }

  /**
   * Convert an instance of GetClipRequestClipFragmentSelector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

