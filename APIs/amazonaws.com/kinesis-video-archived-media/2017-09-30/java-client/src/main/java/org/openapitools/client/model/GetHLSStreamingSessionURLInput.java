/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ContainerFormat;
import org.openapitools.client.model.GetHLSStreamingSessionURLInputHLSFragmentSelector;
import org.openapitools.client.model.HLSDiscontinuityMode;
import org.openapitools.client.model.HLSDisplayFragmentTimestamp;
import org.openapitools.client.model.HLSPlaybackMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetHLSStreamingSessionURLInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetHLSStreamingSessionURLInput {
  public static final String SERIALIZED_NAME_STREAM_NAME = "StreamName";
  @SerializedName(SERIALIZED_NAME_STREAM_NAME)
  private String streamName;

  public static final String SERIALIZED_NAME_STREAM_A_R_N = "StreamARN";
  @SerializedName(SERIALIZED_NAME_STREAM_A_R_N)
  private String streamARN;

  public static final String SERIALIZED_NAME_PLAYBACK_MODE = "PlaybackMode";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_MODE)
  private HLSPlaybackMode playbackMode;

  public static final String SERIALIZED_NAME_HL_S_FRAGMENT_SELECTOR = "HLSFragmentSelector";
  @SerializedName(SERIALIZED_NAME_HL_S_FRAGMENT_SELECTOR)
  private GetHLSStreamingSessionURLInputHLSFragmentSelector hlSFragmentSelector;

  public static final String SERIALIZED_NAME_CONTAINER_FORMAT = "ContainerFormat";
  @SerializedName(SERIALIZED_NAME_CONTAINER_FORMAT)
  private ContainerFormat containerFormat;

  public static final String SERIALIZED_NAME_DISCONTINUITY_MODE = "DiscontinuityMode";
  @SerializedName(SERIALIZED_NAME_DISCONTINUITY_MODE)
  private HLSDiscontinuityMode discontinuityMode;

  public static final String SERIALIZED_NAME_DISPLAY_FRAGMENT_TIMESTAMP = "DisplayFragmentTimestamp";
  @SerializedName(SERIALIZED_NAME_DISPLAY_FRAGMENT_TIMESTAMP)
  private HLSDisplayFragmentTimestamp displayFragmentTimestamp;

  public static final String SERIALIZED_NAME_EXPIRES = "Expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private Integer expires;

  public static final String SERIALIZED_NAME_MAX_MEDIA_PLAYLIST_FRAGMENT_RESULTS = "MaxMediaPlaylistFragmentResults";
  @SerializedName(SERIALIZED_NAME_MAX_MEDIA_PLAYLIST_FRAGMENT_RESULTS)
  private Integer maxMediaPlaylistFragmentResults;

  public GetHLSStreamingSessionURLInput() {
  }

  public GetHLSStreamingSessionURLInput streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

  /**
   * Get streamName
   * @return streamName
   */
  @javax.annotation.Nullable
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }


  public GetHLSStreamingSessionURLInput streamARN(String streamARN) {
    this.streamARN = streamARN;
    return this;
  }

  /**
   * Get streamARN
   * @return streamARN
   */
  @javax.annotation.Nullable
  public String getStreamARN() {
    return streamARN;
  }

  public void setStreamARN(String streamARN) {
    this.streamARN = streamARN;
  }


  public GetHLSStreamingSessionURLInput playbackMode(HLSPlaybackMode playbackMode) {
    this.playbackMode = playbackMode;
    return this;
  }

  /**
   * Get playbackMode
   * @return playbackMode
   */
  @javax.annotation.Nullable
  public HLSPlaybackMode getPlaybackMode() {
    return playbackMode;
  }

  public void setPlaybackMode(HLSPlaybackMode playbackMode) {
    this.playbackMode = playbackMode;
  }


  public GetHLSStreamingSessionURLInput hlSFragmentSelector(GetHLSStreamingSessionURLInputHLSFragmentSelector hlSFragmentSelector) {
    this.hlSFragmentSelector = hlSFragmentSelector;
    return this;
  }

  /**
   * Get hlSFragmentSelector
   * @return hlSFragmentSelector
   */
  @javax.annotation.Nullable
  public GetHLSStreamingSessionURLInputHLSFragmentSelector getHlSFragmentSelector() {
    return hlSFragmentSelector;
  }

  public void setHlSFragmentSelector(GetHLSStreamingSessionURLInputHLSFragmentSelector hlSFragmentSelector) {
    this.hlSFragmentSelector = hlSFragmentSelector;
  }


  public GetHLSStreamingSessionURLInput containerFormat(ContainerFormat containerFormat) {
    this.containerFormat = containerFormat;
    return this;
  }

  /**
   * Get containerFormat
   * @return containerFormat
   */
  @javax.annotation.Nullable
  public ContainerFormat getContainerFormat() {
    return containerFormat;
  }

  public void setContainerFormat(ContainerFormat containerFormat) {
    this.containerFormat = containerFormat;
  }


  public GetHLSStreamingSessionURLInput discontinuityMode(HLSDiscontinuityMode discontinuityMode) {
    this.discontinuityMode = discontinuityMode;
    return this;
  }

  /**
   * Get discontinuityMode
   * @return discontinuityMode
   */
  @javax.annotation.Nullable
  public HLSDiscontinuityMode getDiscontinuityMode() {
    return discontinuityMode;
  }

  public void setDiscontinuityMode(HLSDiscontinuityMode discontinuityMode) {
    this.discontinuityMode = discontinuityMode;
  }


  public GetHLSStreamingSessionURLInput displayFragmentTimestamp(HLSDisplayFragmentTimestamp displayFragmentTimestamp) {
    this.displayFragmentTimestamp = displayFragmentTimestamp;
    return this;
  }

  /**
   * Get displayFragmentTimestamp
   * @return displayFragmentTimestamp
   */
  @javax.annotation.Nullable
  public HLSDisplayFragmentTimestamp getDisplayFragmentTimestamp() {
    return displayFragmentTimestamp;
  }

  public void setDisplayFragmentTimestamp(HLSDisplayFragmentTimestamp displayFragmentTimestamp) {
    this.displayFragmentTimestamp = displayFragmentTimestamp;
  }


  public GetHLSStreamingSessionURLInput expires(Integer expires) {
    this.expires = expires;
    return this;
  }

  /**
   * Get expires
   * @return expires
   */
  @javax.annotation.Nullable
  public Integer getExpires() {
    return expires;
  }

  public void setExpires(Integer expires) {
    this.expires = expires;
  }


  public GetHLSStreamingSessionURLInput maxMediaPlaylistFragmentResults(Integer maxMediaPlaylistFragmentResults) {
    this.maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResults;
    return this;
  }

  /**
   * Get maxMediaPlaylistFragmentResults
   * @return maxMediaPlaylistFragmentResults
   */
  @javax.annotation.Nullable
  public Integer getMaxMediaPlaylistFragmentResults() {
    return maxMediaPlaylistFragmentResults;
  }

  public void setMaxMediaPlaylistFragmentResults(Integer maxMediaPlaylistFragmentResults) {
    this.maxMediaPlaylistFragmentResults = maxMediaPlaylistFragmentResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetHLSStreamingSessionURLInput getHLSStreamingSessionURLInput = (GetHLSStreamingSessionURLInput) o;
    return Objects.equals(this.streamName, getHLSStreamingSessionURLInput.streamName) &&
        Objects.equals(this.streamARN, getHLSStreamingSessionURLInput.streamARN) &&
        Objects.equals(this.playbackMode, getHLSStreamingSessionURLInput.playbackMode) &&
        Objects.equals(this.hlSFragmentSelector, getHLSStreamingSessionURLInput.hlSFragmentSelector) &&
        Objects.equals(this.containerFormat, getHLSStreamingSessionURLInput.containerFormat) &&
        Objects.equals(this.discontinuityMode, getHLSStreamingSessionURLInput.discontinuityMode) &&
        Objects.equals(this.displayFragmentTimestamp, getHLSStreamingSessionURLInput.displayFragmentTimestamp) &&
        Objects.equals(this.expires, getHLSStreamingSessionURLInput.expires) &&
        Objects.equals(this.maxMediaPlaylistFragmentResults, getHLSStreamingSessionURLInput.maxMediaPlaylistFragmentResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamName, streamARN, playbackMode, hlSFragmentSelector, containerFormat, discontinuityMode, displayFragmentTimestamp, expires, maxMediaPlaylistFragmentResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetHLSStreamingSessionURLInput {\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    streamARN: ").append(toIndentedString(streamARN)).append("\n");
    sb.append("    playbackMode: ").append(toIndentedString(playbackMode)).append("\n");
    sb.append("    hlSFragmentSelector: ").append(toIndentedString(hlSFragmentSelector)).append("\n");
    sb.append("    containerFormat: ").append(toIndentedString(containerFormat)).append("\n");
    sb.append("    discontinuityMode: ").append(toIndentedString(discontinuityMode)).append("\n");
    sb.append("    displayFragmentTimestamp: ").append(toIndentedString(displayFragmentTimestamp)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    maxMediaPlaylistFragmentResults: ").append(toIndentedString(maxMediaPlaylistFragmentResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StreamName");
    openapiFields.add("StreamARN");
    openapiFields.add("PlaybackMode");
    openapiFields.add("HLSFragmentSelector");
    openapiFields.add("ContainerFormat");
    openapiFields.add("DiscontinuityMode");
    openapiFields.add("DisplayFragmentTimestamp");
    openapiFields.add("Expires");
    openapiFields.add("MaxMediaPlaylistFragmentResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetHLSStreamingSessionURLInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetHLSStreamingSessionURLInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetHLSStreamingSessionURLInput is not found in the empty JSON string", GetHLSStreamingSessionURLInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetHLSStreamingSessionURLInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetHLSStreamingSessionURLInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StreamName`
      if (jsonObj.get("StreamName") != null && !jsonObj.get("StreamName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamName"));
      }
      // validate the optional field `StreamARN`
      if (jsonObj.get("StreamARN") != null && !jsonObj.get("StreamARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StreamARN"));
      }
      // validate the optional field `PlaybackMode`
      if (jsonObj.get("PlaybackMode") != null && !jsonObj.get("PlaybackMode").isJsonNull()) {
        HLSPlaybackMode.validateJsonElement(jsonObj.get("PlaybackMode"));
      }
      // validate the optional field `HLSFragmentSelector`
      if (jsonObj.get("HLSFragmentSelector") != null && !jsonObj.get("HLSFragmentSelector").isJsonNull()) {
        GetHLSStreamingSessionURLInputHLSFragmentSelector.validateJsonElement(jsonObj.get("HLSFragmentSelector"));
      }
      // validate the optional field `ContainerFormat`
      if (jsonObj.get("ContainerFormat") != null && !jsonObj.get("ContainerFormat").isJsonNull()) {
        ContainerFormat.validateJsonElement(jsonObj.get("ContainerFormat"));
      }
      // validate the optional field `DiscontinuityMode`
      if (jsonObj.get("DiscontinuityMode") != null && !jsonObj.get("DiscontinuityMode").isJsonNull()) {
        HLSDiscontinuityMode.validateJsonElement(jsonObj.get("DiscontinuityMode"));
      }
      // validate the optional field `DisplayFragmentTimestamp`
      if (jsonObj.get("DisplayFragmentTimestamp") != null && !jsonObj.get("DisplayFragmentTimestamp").isJsonNull()) {
        HLSDisplayFragmentTimestamp.validateJsonElement(jsonObj.get("DisplayFragmentTimestamp"));
      }
      // validate the optional field `Expires`
      if (jsonObj.get("Expires") != null && !jsonObj.get("Expires").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Expires"));
      }
      // validate the optional field `MaxMediaPlaylistFragmentResults`
      if (jsonObj.get("MaxMediaPlaylistFragmentResults") != null && !jsonObj.get("MaxMediaPlaylistFragmentResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxMediaPlaylistFragmentResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetHLSStreamingSessionURLInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetHLSStreamingSessionURLInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetHLSStreamingSessionURLInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetHLSStreamingSessionURLInput.class));

       return (TypeAdapter<T>) new TypeAdapter<GetHLSStreamingSessionURLInput>() {
           @Override
           public void write(JsonWriter out, GetHLSStreamingSessionURLInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetHLSStreamingSessionURLInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetHLSStreamingSessionURLInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetHLSStreamingSessionURLInput
   * @throws IOException if the JSON string is invalid with respect to GetHLSStreamingSessionURLInput
   */
  public static GetHLSStreamingSessionURLInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetHLSStreamingSessionURLInput.class);
  }

  /**
   * Convert an instance of GetHLSStreamingSessionURLInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

