/*
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The start and end of the timestamp range for the requested media.&lt;/p&gt; &lt;p&gt;This value should not be present if &lt;code&gt;PlaybackType&lt;/code&gt; is &lt;code&gt;LIVE&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The values in &lt;code&gt;DASHimestampRange&lt;/code&gt; are inclusive. Fragments that start exactly at or after the start time are included in the session. Fragments that start before the start time and continue past it are not included in the session.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:53.497265-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DASHTimestampRange {
  public static final String SERIALIZED_NAME_START_TIMESTAMP = "StartTimestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private OffsetDateTime startTimestamp;

  public static final String SERIALIZED_NAME_END_TIMESTAMP = "EndTimestamp";
  @SerializedName(SERIALIZED_NAME_END_TIMESTAMP)
  private OffsetDateTime endTimestamp;

  public DASHTimestampRange() {
  }

  public DASHTimestampRange startTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
    return this;
  }

  /**
   * Get startTimestamp
   * @return startTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTimestamp() {
    return startTimestamp;
  }

  public void setStartTimestamp(OffsetDateTime startTimestamp) {
    this.startTimestamp = startTimestamp;
  }


  public DASHTimestampRange endTimestamp(OffsetDateTime endTimestamp) {
    this.endTimestamp = endTimestamp;
    return this;
  }

  /**
   * Get endTimestamp
   * @return endTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTimestamp() {
    return endTimestamp;
  }

  public void setEndTimestamp(OffsetDateTime endTimestamp) {
    this.endTimestamp = endTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DASHTimestampRange daSHTimestampRange = (DASHTimestampRange) o;
    return Objects.equals(this.startTimestamp, daSHTimestampRange.startTimestamp) &&
        Objects.equals(this.endTimestamp, daSHTimestampRange.endTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startTimestamp, endTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DASHTimestampRange {\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartTimestamp");
    openapiFields.add("EndTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DASHTimestampRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DASHTimestampRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DASHTimestampRange is not found in the empty JSON string", DASHTimestampRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DASHTimestampRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DASHTimestampRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StartTimestamp`
      if (jsonObj.get("StartTimestamp") != null && !jsonObj.get("StartTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("StartTimestamp"));
      }
      // validate the optional field `EndTimestamp`
      if (jsonObj.get("EndTimestamp") != null && !jsonObj.get("EndTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EndTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DASHTimestampRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DASHTimestampRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DASHTimestampRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DASHTimestampRange.class));

       return (TypeAdapter<T>) new TypeAdapter<DASHTimestampRange>() {
           @Override
           public void write(JsonWriter out, DASHTimestampRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DASHTimestampRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DASHTimestampRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DASHTimestampRange
   * @throws IOException if the JSON string is invalid with respect to DASHTimestampRange
   */
  public static DASHTimestampRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DASHTimestampRange.class);
  }

  /**
   * Convert an instance of DASHTimestampRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

