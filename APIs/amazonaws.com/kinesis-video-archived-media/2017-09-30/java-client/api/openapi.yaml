openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: <p/>
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Kinesis Video Streams Archived Media
  version: 2017-09-30
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: kinesis-video-archived-media
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/kinesis-video-archived-media-2017-09-30.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/kinesisvideo/
servers:
- description: The Kinesis Video Archived Media multi-region endpoint
  url: "http://kinesisvideo.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Kinesis Video Archived Media multi-region endpoint
  url: "https://kinesisvideo.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Kinesis Video Archived Media endpoint for China (Beijing) and China
    (Ningxia)
  url: "http://kinesisvideo.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Kinesis Video Archived Media endpoint for China (Beijing) and China
    (Ningxia)
  url: "https://kinesisvideo.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /getClip:
    post:
      description: "<p>Downloads an MP4 file (clip) containing the archived, on-demand\
        \ media from the specified video stream over the specified time range. </p>\
        \ <p>Both the StreamName and the StreamARN parameters are optional, but you\
        \ must specify either the StreamName or the StreamARN when invoking this API\
        \ operation. </p> <p>As a prerequisite to using GetCLip API, you must obtain\
        \ an endpoint using <code>GetDataEndpoint</code>, specifying GET_CLIP for<code/>\
        \ the <code>APIName</code> parameter. </p> <p>An Amazon Kinesis video stream\
        \ has the following requirements for providing data through MP4:</p> <ul>\
        \ <li> <p>The media must contain h.264 or h.265 encoded video and, optionally,\
        \ AAC or G.711 encoded audio. Specifically, the codec ID of track 1 should\
        \ be <code>V_MPEG/ISO/AVC</code> (for h.264) or V_MPEGH/ISO/HEVC (for H.265).\
        \ Optionally, the codec ID of track 2 should be <code>A_AAC</code> (for AAC)\
        \ or A_MS/ACM (for G.711).</p> </li> <li> <p>Data retention must be greater\
        \ than 0.</p> </li> <li> <p>The video track of each fragment must contain\
        \ codec private data in the Advanced Video Coding (AVC) for H.264 format and\
        \ HEVC for H.265 format. For more information, see <a href=\"https://www.iso.org/standard/55980.html\"\
        >MPEG-4 specification ISO/IEC 14496-15</a>. For information about adapting\
        \ stream data to a given format, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html\"\
        >NAL Adaptation Flags</a>.</p> </li> <li> <p>The audio track (if present)\
        \ of each fragment must contain codec private data in the AAC format (<a href=\"\
        https://www.iso.org/standard/43345.html\">AAC specification ISO/IEC 13818-7</a>)\
        \ or the <a href=\"http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\"\
        >MS Wave format</a>.</p> </li> </ul> <p>You can monitor the amount of outgoing\
        \ data by monitoring the <code>GetClip.OutgoingBytes</code> Amazon CloudWatch\
        \ metric. For information about using CloudWatch to monitor Kinesis Video\
        \ Streams, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html\"\
        >Monitoring Kinesis Video Streams</a>. For pricing information, see <a href=\"\
        https://aws.amazon.com/kinesis/video-streams/pricing/\">Amazon Kinesis Video\
        \ Streams Pricing</a> and <a href=\"https://aws.amazon.com/pricing/\"> Amazon\
        \ Web Services Pricing</a>. Charges for outgoing Amazon Web Services data\
        \ apply.</p>"
      operationId: GetClip
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClip_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetClipOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedStreamMediaTypeException'
          description: UnsupportedStreamMediaTypeException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingCodecPrivateDataException'
          description: MissingCodecPrivateDataException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCodecPrivateDataException'
          description: InvalidCodecPrivateDataException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMediaFrameException'
          description: InvalidMediaFrameException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataRetentionException'
          description: NoDataRetentionException
      x-content-type: application/json
      x-accepts:
      - application/json
  /getDASHStreamingSessionURL:
    post:
      description: "<p>Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH)\
        \ URL for the stream. You can then open the URL in a media player to view\
        \ the stream contents.</p> <p>Both the <code>StreamName</code> and the <code>StreamARN</code>\
        \ parameters are optional, but you must specify either the <code>StreamName</code>\
        \ or the <code>StreamARN</code> when invoking this API operation.</p> <p>An\
        \ Amazon Kinesis video stream has the following requirements for providing\
        \ data through MPEG-DASH:</p> <ul> <li> <p>The media must contain h.264 or\
        \ h.265 encoded video and, optionally, AAC or G.711 encoded audio. Specifically,\
        \ the codec ID of track 1 should be <code>V_MPEG/ISO/AVC</code> (for h.264)\
        \ or V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec ID of track 2 should\
        \ be <code>A_AAC</code> (for AAC) or A_MS/ACM (for G.711).</p> </li> <li>\
        \ <p>Data retention must be greater than 0.</p> </li> <li> <p>The video track\
        \ of each fragment must contain codec private data in the Advanced Video Coding\
        \ (AVC) for H.264 format and HEVC for H.265 format. For more information,\
        \ see <a href=\"https://www.iso.org/standard/55980.html\">MPEG-4 specification\
        \ ISO/IEC 14496-15</a>. For information about adapting stream data to a given\
        \ format, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html\"\
        >NAL Adaptation Flags</a>.</p> </li> <li> <p>The audio track (if present)\
        \ of each fragment must contain codec private data in the AAC format (<a href=\"\
        https://www.iso.org/standard/43345.html\">AAC specification ISO/IEC 13818-7</a>)\
        \ or the <a href=\"http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html\"\
        >MS Wave format</a>.</p> </li> </ul> <p>The following procedure shows how\
        \ to use MPEG-DASH with Kinesis Video Streams:</p> <ol> <li> <p>Get an endpoint\
        \ using <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html\"\
        >GetDataEndpoint</a>, specifying <code>GET_DASH_STREAMING_SESSION_URL</code>\
        \ for the <code>APIName</code> parameter.</p> </li> <li> <p>Retrieve the MPEG-DASH\
        \ URL using <code>GetDASHStreamingSessionURL</code>. Kinesis Video Streams\
        \ creates an MPEG-DASH streaming session to be used for accessing content\
        \ in a stream using the MPEG-DASH protocol. <code>GetDASHStreamingSessionURL</code>\
        \ returns an authenticated URL (that includes an encrypted session token)\
        \ for the session's MPEG-DASH <i>manifest</i> (the root resource needed for\
        \ streaming with MPEG-DASH).</p> <note> <p>Don't share or store this token\
        \ where an unauthorized entity can access it. The token provides access to\
        \ the content of the stream. Safeguard the token with the same measures that\
        \ you use with your Amazon Web Services credentials.</p> </note> <p>The media\
        \ that is made available through the manifest consists only of the requested\
        \ stream, time range, and format. No other media data (such as frames outside\
        \ the requested window or alternate bitrates) is made available.</p> </li>\
        \ <li> <p>Provide the URL (containing the encrypted session token) for the\
        \ MPEG-DASH manifest to a media player that supports the MPEG-DASH protocol.\
        \ Kinesis Video Streams makes the initialization fragment and media fragments\
        \ available through the manifest URL. The initialization fragment contains\
        \ the codec private data for the stream, and other data needed to set up the\
        \ video or audio decoder and renderer. The media fragments contain encoded\
        \ video frames or encoded audio samples.</p> </li> <li> <p>The media player\
        \ receives the authenticated URL and requests stream metadata and media data\
        \ normally. When the media player requests data, it calls the following actions:</p>\
        \ <ul> <li> <p> <b>GetDASHManifest:</b> Retrieves an MPEG DASH manifest, which\
        \ contains the metadata for the media that you want to playback.</p> </li>\
        \ <li> <p> <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment.\
        \ The media player typically loads the initialization fragment before loading\
        \ any media fragments. This fragment contains the \"<code>fytp</code>\" and\
        \ \"<code>moov</code>\" MP4 atoms, and the child atoms that are needed to\
        \ initialize the media player decoder.</p> <p>The initialization fragment\
        \ does not correspond to a fragment in a Kinesis video stream. It contains\
        \ only the codec private data for the stream and respective track, which the\
        \ media player needs to decode the media frames.</p> </li> <li> <p> <b>GetMP4MediaFragment:</b>\
        \ Retrieves MP4 media fragments. These fragments contain the \"<code>moof</code>\"\
        \ and \"<code>mdat</code>\" MP4 atoms and their child atoms, containing the\
        \ encoded fragment's media frames and their timestamps. </p> <note> <p>After\
        \ the first media fragment is made available in a streaming session, any fragments\
        \ that don't contain the same codec private data cause an error to be returned\
        \ when those different media fragments are loaded. Therefore, the codec private\
        \ data should not change between fragments in a session. This also means that\
        \ the session fails if the fragments in a stream change from having only video\
        \ to having both audio and video.</p> </note> <p>Data retrieved with this\
        \ action is billable. See <a href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\"\
        >Pricing</a> for details.</p> </li> </ul> </li> </ol> <note> <p>For restrictions\
        \ that apply to MPEG-DASH sessions, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html\"\
        >Kinesis Video Streams Limits</a>.</p> </note> <p>You can monitor the amount\
        \ of data that the media player consumes by monitoring the <code>GetMP4MediaFragment.OutgoingBytes</code>\
        \ Amazon CloudWatch metric. For information about using CloudWatch to monitor\
        \ Kinesis Video Streams, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html\"\
        >Monitoring Kinesis Video Streams</a>. For pricing information, see <a href=\"\
        https://aws.amazon.com/kinesis/video-streams/pricing/\">Amazon Kinesis Video\
        \ Streams Pricing</a> and <a href=\"https://aws.amazon.com/pricing/\">Amazon\
        \ Web Services Pricing</a>. Charges for both HLS sessions and outgoing Amazon\
        \ Web Services data apply.</p> <p>For more information about HLS, see <a href=\"\
        https://developer.apple.com/streaming/\">HTTP Live Streaming</a> on the <a\
        \ href=\"https://developer.apple.com\">Apple Developer site</a>.</p> <important>\
        \ <p>If an error is thrown after invoking a Kinesis Video Streams archived\
        \ media API, in addition to the HTTP status code and the response body, it\
        \ includes the following pieces of information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code>\
        \ HTTP header – contains a more specific error type in addition to what the\
        \ HTTP status code provides. </p> </li> <li> <p> <code>x-amz-RequestId</code>\
        \ HTTP header – if you want to report an issue to Amazon Web Services the\
        \ support team can better diagnose the problem if given the Request Id.</p>\
        \ </li> </ul> <p>Both the HTTP status code and the ErrorType header can be\
        \ utilized to make programmatic decisions about whether errors are retry-able\
        \ and under what conditions, as well as provide information on what actions\
        \ the client programmer might need to take in order to successfully try again.</p>\
        \ <p>For more information, see the <b>Errors</b> section at the bottom of\
        \ this topic, as well as <a href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html\"\
        >Common Errors</a>. </p> </important>"
      operationId: GetDASHStreamingSessionURL
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetDASHStreamingSessionURL_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDASHStreamingSessionURLOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedStreamMediaTypeException'
          description: UnsupportedStreamMediaTypeException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataRetentionException'
          description: NoDataRetentionException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingCodecPrivateDataException'
          description: MissingCodecPrivateDataException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCodecPrivateDataException'
          description: InvalidCodecPrivateDataException
      x-content-type: application/json
      x-accepts:
      - application/json
  /getHLSStreamingSessionURL:
    post:
      description: "<p>Retrieves an HTTP Live Streaming (HLS) URL for the stream.\
        \ You can then open the URL in a browser or media player to view the stream\
        \ contents.</p> <p>Both the <code>StreamName</code> and the <code>StreamARN</code>\
        \ parameters are optional, but you must specify either the <code>StreamName</code>\
        \ or the <code>StreamARN</code> when invoking this API operation.</p> <p>An\
        \ Amazon Kinesis video stream has the following requirements for providing\
        \ data through HLS:</p> <ul> <li> <p>For streaming video, the media must contain\
        \ H.264 or H.265 encoded video and, optionally, AAC encoded audio. Specifically,\
        \ the codec ID of track 1 should be <code>V_MPEG/ISO/AVC</code> (for H.264)\
        \ or <code>V_MPEG/ISO/HEVC</code> (for H.265). Optionally, the codec ID of\
        \ track 2 should be <code>A_AAC</code>. For audio only streaming, the codec\
        \ ID of track 1 should be <code>A_AAC</code>.</p> </li> <li> <p>Data retention\
        \ must be greater than 0.</p> </li> <li> <p>The video track of each fragment\
        \ must contain codec private data in the Advanced Video Coding (AVC) for H.264\
        \ format or HEVC for H.265 format (<a href=\"https://www.iso.org/standard/55980.html\"\
        >MPEG-4 specification ISO/IEC 14496-15</a>). For information about adapting\
        \ stream data to a given format, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html\"\
        >NAL Adaptation Flags</a>.</p> </li> <li> <p>The audio track (if present)\
        \ of each fragment must contain codec private data in the AAC format (<a href=\"\
        https://www.iso.org/standard/43345.html\">AAC specification ISO/IEC 13818-7</a>).</p>\
        \ </li> </ul> <p>Kinesis Video Streams HLS sessions contain fragments in the\
        \ fragmented MPEG-4 form (also called fMP4 or CMAF) or the MPEG-2 form (also\
        \ called TS chunks, which the HLS specification also supports). For more information\
        \ about HLS fragment types, see the <a href=\"https://tools.ietf.org/html/draft-pantos-http-live-streaming-23\"\
        >HLS specification</a>.</p> <p>The following procedure shows how to use HLS\
        \ with Kinesis Video Streams:</p> <ol> <li> <p>Get an endpoint using <a href=\"\
        http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html\"\
        >GetDataEndpoint</a>, specifying <code>GET_HLS_STREAMING_SESSION_URL</code>\
        \ for the <code>APIName</code> parameter.</p> </li> <li> <p>Retrieve the HLS\
        \ URL using <code>GetHLSStreamingSessionURL</code>. Kinesis Video Streams\
        \ creates an HLS streaming session to be used for accessing content in a stream\
        \ using the HLS protocol. <code>GetHLSStreamingSessionURL</code> returns an\
        \ authenticated URL (that includes an encrypted session token) for the session's\
        \ HLS <i>master playlist</i> (the root resource needed for streaming with\
        \ HLS).</p> <note> <p>Don't share or store this token where an unauthorized\
        \ entity could access it. The token provides access to the content of the\
        \ stream. Safeguard the token with the same measures that you would use with\
        \ your Amazon Web Services credentials.</p> </note> <p>The media that is made\
        \ available through the playlist consists only of the requested stream, time\
        \ range, and format. No other media data (such as frames outside the requested\
        \ window or alternate bitrates) is made available.</p> </li> <li> <p>Provide\
        \ the URL (containing the encrypted session token) for the HLS master playlist\
        \ to a media player that supports the HLS protocol. Kinesis Video Streams\
        \ makes the HLS media playlist, initialization fragment, and media fragments\
        \ available through the master playlist URL. The initialization fragment contains\
        \ the codec private data for the stream, and other data needed to set up the\
        \ video or audio decoder and renderer. The media fragments contain H.264-encoded\
        \ video frames or AAC-encoded audio samples.</p> </li> <li> <p>The media player\
        \ receives the authenticated URL and requests stream metadata and media data\
        \ normally. When the media player requests data, it calls the following actions:</p>\
        \ <ul> <li> <p> <b>GetHLSMasterPlaylist:</b> Retrieves an HLS master playlist,\
        \ which contains a URL for the <code>GetHLSMediaPlaylist</code> action for\
        \ each track, and additional metadata for the media player, including estimated\
        \ bitrate and resolution.</p> </li> <li> <p> <b>GetHLSMediaPlaylist:</b> Retrieves\
        \ an HLS media playlist, which contains a URL to access the MP4 initialization\
        \ fragment with the <code>GetMP4InitFragment</code> action, and URLs to access\
        \ the MP4 media fragments with the <code>GetMP4MediaFragment</code> actions.\
        \ The HLS media playlist also contains metadata about the stream that the\
        \ player needs to play it, such as whether the <code>PlaybackMode</code> is\
        \ <code>LIVE</code> or <code>ON_DEMAND</code>. The HLS media playlist is typically\
        \ static for sessions with a <code>PlaybackType</code> of <code>ON_DEMAND</code>.\
        \ The HLS media playlist is continually updated with new fragments for sessions\
        \ with a <code>PlaybackType</code> of <code>LIVE</code>. There is a distinct\
        \ HLS media playlist for the video track and the audio track (if applicable)\
        \ that contains MP4 media URLs for the specific track. </p> </li> <li> <p>\
        \ <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The\
        \ media player typically loads the initialization fragment before loading\
        \ any media fragments. This fragment contains the \"<code>fytp</code>\" and\
        \ \"<code>moov</code>\" MP4 atoms, and the child atoms that are needed to\
        \ initialize the media player decoder.</p> <p>The initialization fragment\
        \ does not correspond to a fragment in a Kinesis video stream. It contains\
        \ only the codec private data for the stream and respective track, which the\
        \ media player needs to decode the media frames.</p> </li> <li> <p> <b>GetMP4MediaFragment:</b>\
        \ Retrieves MP4 media fragments. These fragments contain the \"<code>moof</code>\"\
        \ and \"<code>mdat</code>\" MP4 atoms and their child atoms, containing the\
        \ encoded fragment's media frames and their timestamps. </p> <note> <p>For\
        \ the HLS streaming session, in-track codec private data (CPD) changes are\
        \ supported. After the first media fragment is made available in a streaming\
        \ session, fragments can contain CPD changes for each track. Therefore, the\
        \ fragments in a session can have a different resolution, bit rate, or other\
        \ information in the CPD without interrupting playback. However, any change\
        \ made in the track number or track codec format can return an error when\
        \ those different media fragments are loaded. For example, streaming will\
        \ fail if the fragments in the stream change from having only video to having\
        \ both audio and video, or if an AAC audio track is changed to an ALAW audio\
        \ track. For each streaming session, only 500 CPD changes are allowed.</p>\
        \ </note> <p>Data retrieved with this action is billable. For information,\
        \ see <a href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\">Pricing</a>.</p>\
        \ </li> <li> <p> <b>GetTSFragment:</b> Retrieves MPEG TS fragments containing\
        \ both initialization and media data for all tracks in the stream.</p> <note>\
        \ <p>If the <code>ContainerFormat</code> is <code>MPEG_TS</code>, this API\
        \ is used instead of <code>GetMP4InitFragment</code> and <code>GetMP4MediaFragment</code>\
        \ to retrieve stream media.</p> </note> <p>Data retrieved with this action\
        \ is billable. For more information, see <a href=\"https://aws.amazon.com/kinesis/video-streams/pricing/\"\
        >Kinesis Video Streams pricing</a>.</p> </li> </ul> </li> </ol> <p>A streaming\
        \ session URL must not be shared between players. The service might throttle\
        \ a session if multiple media players are sharing it. For connection limits,\
        \ see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html\"\
        >Kinesis Video Streams Limits</a>.</p> <p>You can monitor the amount of data\
        \ that the media player consumes by monitoring the <code>GetMP4MediaFragment.OutgoingBytes</code>\
        \ Amazon CloudWatch metric. For information about using CloudWatch to monitor\
        \ Kinesis Video Streams, see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html\"\
        >Monitoring Kinesis Video Streams</a>. For pricing information, see <a href=\"\
        https://aws.amazon.com/kinesis/video-streams/pricing/\">Amazon Kinesis Video\
        \ Streams Pricing</a> and <a href=\"https://aws.amazon.com/pricing/\">Amazon\
        \ Web Services Pricing</a>. Charges for both HLS sessions and outgoing Amazon\
        \ Web Services data apply.</p> <p>For more information about HLS, see <a href=\"\
        https://developer.apple.com/streaming/\">HTTP Live Streaming</a> on the <a\
        \ href=\"https://developer.apple.com\">Apple Developer site</a>.</p> <important>\
        \ <p>If an error is thrown after invoking a Kinesis Video Streams archived\
        \ media API, in addition to the HTTP status code and the response body, it\
        \ includes the following pieces of information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code>\
        \ HTTP header – contains a more specific error type in addition to what the\
        \ HTTP status code provides. </p> </li> <li> <p> <code>x-amz-RequestId</code>\
        \ HTTP header – if you want to report an issue to Amazon Web Services, the\
        \ support team can better diagnose the problem if given the Request Id.</p>\
        \ </li> </ul> <p>Both the HTTP status code and the ErrorType header can be\
        \ utilized to make programmatic decisions about whether errors are retry-able\
        \ and under what conditions, as well as provide information on what actions\
        \ the client programmer might need to take in order to successfully try again.</p>\
        \ <p>For more information, see the <b>Errors</b> section at the bottom of\
        \ this topic, as well as <a href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html\"\
        >Common Errors</a>. </p> </important>"
      operationId: GetHLSStreamingSessionURL
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetHLSStreamingSessionURL_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHLSStreamingSessionURLOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedStreamMediaTypeException'
          description: UnsupportedStreamMediaTypeException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoDataRetentionException'
          description: NoDataRetentionException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingCodecPrivateDataException'
          description: MissingCodecPrivateDataException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidCodecPrivateDataException'
          description: InvalidCodecPrivateDataException
      x-content-type: application/json
      x-accepts:
      - application/json
  /getImages:
    post:
      description: "Retrieves a list of Images corresponding to each timestamp for\
        \ a given time range, sampling interval, and image format configuration."
      operationId: GetImages
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetImages_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetImagesOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /getMediaForFragmentList:
    post:
      description: "<p>Gets media for a list of fragments (specified by fragment number)\
        \ from the archived data in an Amazon Kinesis video stream.</p> <note> <p>You\
        \ must first call the <code>GetDataEndpoint</code> API to get an endpoint.\
        \ Then send the <code>GetMediaForFragmentList</code> requests to this endpoint\
        \ using the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/\"\
        >--endpoint-url parameter</a>. </p> </note> <p>For limits, see <a href=\"\
        http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html\">Kinesis\
        \ Video Streams Limits</a>.</p> <important> <p>If an error is thrown after\
        \ invoking a Kinesis Video Streams archived media API, in addition to the\
        \ HTTP status code and the response body, it includes the following pieces\
        \ of information: </p> <ul> <li> <p> <code>x-amz-ErrorType</code> HTTP header\
        \ – contains a more specific error type in addition to what the HTTP status\
        \ code provides. </p> </li> <li> <p> <code>x-amz-RequestId</code> HTTP header\
        \ – if you want to report an issue to Amazon Web Services, the support team\
        \ can better diagnose the problem if given the Request Id.</p> </li> </ul>\
        \ <p>Both the HTTP status code and the ErrorType header can be utilized to\
        \ make programmatic decisions about whether errors are retry-able and under\
        \ what conditions, as well as provide information on what actions the client\
        \ programmer might need to take in order to successfully try again.</p> <p>For\
        \ more information, see the <b>Errors</b> section at the bottom of this topic,\
        \ as well as <a href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html\"\
        >Common Errors</a>. </p> </important>"
      operationId: GetMediaForFragmentList
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMediaForFragmentList_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMediaForFragmentListOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /listFragments:
    post:
      description: "<p>Returns a list of <a>Fragment</a> objects from the specified\
        \ stream and timestamp range within the archived data.</p> <p>Listing fragments\
        \ is eventually consistent. This means that even if the producer receives\
        \ an acknowledgment that a fragment is persisted, the result might not be\
        \ returned immediately from a request to <code>ListFragments</code>. However,\
        \ results are typically available in less than one second.</p> <note> <p>You\
        \ must first call the <code>GetDataEndpoint</code> API to get an endpoint.\
        \ Then send the <code>ListFragments</code> requests to this endpoint using\
        \ the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/\">--endpoint-url\
        \ parameter</a>. </p> </note> <important> <p>If an error is thrown after invoking\
        \ a Kinesis Video Streams archived media API, in addition to the HTTP status\
        \ code and the response body, it includes the following pieces of information:\
        \ </p> <ul> <li> <p> <code>x-amz-ErrorType</code> HTTP header – contains a\
        \ more specific error type in addition to what the HTTP status code provides.\
        \ </p> </li> <li> <p> <code>x-amz-RequestId</code> HTTP header – if you want\
        \ to report an issue to Amazon Web Services, the support team can better diagnose\
        \ the problem if given the Request Id.</p> </li> </ul> <p>Both the HTTP status\
        \ code and the ErrorType header can be utilized to make programmatic decisions\
        \ about whether errors are retry-able and under what conditions, as well as\
        \ provide information on what actions the client programmer might need to\
        \ take in order to successfully try again.</p> <p>For more information, see\
        \ the <b>Errors</b> section at the bottom of this topic, as well as <a href=\"\
        https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html\"\
        >Common Errors</a>. </p> </important>"
      operationId: ListFragments
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListFragments_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFragmentsOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidArgumentException'
          description: InvalidArgumentException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientLimitExceededException'
          description: ClientLimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAuthorizedException'
          description: NotAuthorizedException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    GetClipOutput:
      example:
        Payload: ""
      properties:
        Payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          - description: "Traditional MP4 file that contains the media clip from the\
              \ specified video stream. The output will contain the first 100 MB or\
              \ the first 200 fragments from the specified start timestamp. For more\
              \ information, see <a href=\"https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html\"\
              >Kinesis Video Streams Limits</a>. "
      type: object
    ClipFragmentSelectorType:
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
      type: string
    ClipTimestampRange:
      description: The range of timestamps for which to return fragments.
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The starting timestamp in the range of timestamps for\
              \ which to return fragments. </p> <p>Only fragments that start exactly\
              \ at or after <code>StartTimestamp</code> are included in the session.\
              \ Fragments that start before <code>StartTimestamp</code> and continue\
              \ past it aren't included in the session. If <code>FragmentSelectorType</code>\
              \ is <code>SERVER_TIMESTAMP</code>, the <code>StartTimestamp</code>\
              \ must be later than the stream head. </p>"
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The end of the timestamp range for the requested media.</p>\
              \ <p>This value must be within 24 hours of the specified <code>StartTimestamp</code>,\
              \ and it must be later than the <code>StartTimestamp</code> value. If\
              \ <code>FragmentSelectorType</code> for the request is <code>SERVER_TIMESTAMP</code>,\
              \ this value must be in the past. </p> <p>This value is inclusive. The\
              \ <code>EndTimestamp</code> is compared to the (starting) timestamp\
              \ of the fragment. Fragments that start before the <code>EndTimestamp</code>\
              \ value and continue past it are included in the session. </p>"
      required:
      - EndTimestamp
      - StartTimestamp
      type: object
    ResourceNotFoundException: {}
    InvalidArgumentException: {}
    ClientLimitExceededException: {}
    NotAuthorizedException: {}
    UnsupportedStreamMediaTypeException: {}
    MissingCodecPrivateDataException: {}
    InvalidCodecPrivateDataException: {}
    InvalidMediaFrameException: {}
    NoDataRetentionException: {}
    GetDASHStreamingSessionURLOutput:
      example:
        DASHStreamingSessionURL: ""
      properties:
        DASHStreamingSessionURL:
          allOf:
          - $ref: '#/components/schemas/DASHStreamingSessionURL'
          - description: The URL (containing the session token) that a media player
              can use to retrieve the MPEG-DASH manifest.
      type: object
    DASHFragmentSelectorType:
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
      type: string
    DASHTimestampRange:
      description: <p>The start and end of the timestamp range for the requested media.</p>
        <p>This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.</p>
        <p>The values in <code>DASHimestampRange</code> are inclusive. Fragments that
        start exactly at or after the start time are included in the session. Fragments
        that start before the start time and continue past it are not included in
        the session.</p>
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The start of the timestamp range for the requested media.</p>\
              \ <p>If the <code>DASHTimestampRange</code> value is specified, the\
              \ <code>StartTimestamp</code> value is required.</p> <p>Only fragments\
              \ that start exactly at or after <code>StartTimestamp</code> are included\
              \ in the session. Fragments that start before <code>StartTimestamp</code>\
              \ and continue past it aren't included in the session. If <code>FragmentSelectorType</code>\
              \ is <code>SERVER_TIMESTAMP</code>, the <code>StartTimestamp</code>\
              \ must be later than the stream head. </p>"
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The end of the timestamp range for the requested media.\
              \ This value must be within 24 hours of the specified <code>StartTimestamp</code>,\
              \ and it must be later than the <code>StartTimestamp</code> value.</p>\
              \ <p>If <code>FragmentSelectorType</code> for the request is <code>SERVER_TIMESTAMP</code>,\
              \ this value must be in the past.</p> <p>The <code>EndTimestamp</code>\
              \ value is required for <code>ON_DEMAND</code> mode, but optional for\
              \ <code>LIVE_REPLAY</code> mode. If the <code>EndTimestamp</code> is\
              \ not set for <code>LIVE_REPLAY</code> mode then the session will continue\
              \ to include newly ingested fragments until the session expires.</p>\
              \ <note> <p>This value is inclusive. The <code>EndTimestamp</code> is\
              \ compared to the (starting) timestamp of the fragment. Fragments that\
              \ start before the <code>EndTimestamp</code> value and continue past\
              \ it are included in the session.</p> </note>"
      type: object
    GetHLSStreamingSessionURLOutput:
      example:
        HLSStreamingSessionURL: ""
      properties:
        HLSStreamingSessionURL:
          allOf:
          - $ref: '#/components/schemas/HLSStreamingSessionURL'
          - description: The URL (containing the session token) that a media player
              can use to retrieve the HLS master playlist.
      type: object
    HLSFragmentSelectorType:
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
      type: string
    HLSTimestampRange:
      description: <p>The start and end of the timestamp range for the requested media.</p>
        <p>This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.</p>
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The start of the timestamp range for the requested media.</p>\
              \ <p>If the <code>HLSTimestampRange</code> value is specified, the <code>StartTimestamp</code>\
              \ value is required. </p> <p>Only fragments that start exactly at or\
              \ after <code>StartTimestamp</code> are included in the session. Fragments\
              \ that start before <code>StartTimestamp</code> and continue past it\
              \ aren't included in the session. If <code>FragmentSelectorType</code>\
              \ is <code>SERVER_TIMESTAMP</code>, the <code>StartTimestamp</code>\
              \ must be later than the stream head. </p>"
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "<p>The end of the timestamp range for the requested media.\
              \ This value must be within 24 hours of the specified <code>StartTimestamp</code>,\
              \ and it must be later than the <code>StartTimestamp</code> value.</p>\
              \ <p>If <code>FragmentSelectorType</code> for the request is <code>SERVER_TIMESTAMP</code>,\
              \ this value must be in the past.</p> <p>The <code>EndTimestamp</code>\
              \ value is required for <code>ON_DEMAND</code> mode, but optional for\
              \ <code>LIVE_REPLAY</code> mode. If the <code>EndTimestamp</code> is\
              \ not set for <code>LIVE_REPLAY</code> mode then the session will continue\
              \ to include newly ingested fragments until the session expires.</p>\
              \ <note> <p>This value is inclusive. The <code>EndTimestamp</code> is\
              \ compared to the (starting) timestamp of the fragment. Fragments that\
              \ start before the <code>EndTimestamp</code> value and continue past\
              \ it are included in the session.</p> </note>"
      type: object
    GetImagesOutput:
      example:
        NextToken: ""
        Images: ""
      properties:
        Images:
          allOf:
          - $ref: '#/components/schemas/Images'
          - description: "The list of images generated from the video stream. If there\
              \ is no media available for the given timestamp, the <code>NO_MEDIA</code>\
              \ error will be listed in the output. If an error occurs while the image\
              \ is being generated, the <code>MEDIA_ERROR</code> will be listed in\
              \ the output as the cause of the missing image. "
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The encrypted token that was used in the request to get more
              images.
      type: object
    FormatConfigValue:
      maxLength: 256
      minLength: 0
      pattern: "^[a-zA-Z_0-9]+"
      type: string
    GetMediaForFragmentListOutput:
      example:
        Payload: ""
      properties:
        Payload:
          allOf:
          - $ref: '#/components/schemas/Payload'
          - description: "<p>The payload that Kinesis Video Streams returns is a sequence\
              \ of chunks from the specified stream. For information about the chunks,\
              \ see <a href=\"http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html\"\
              >PutMedia</a>. The chunks that Kinesis Video Streams returns in the\
              \ <code>GetMediaForFragmentList</code> call also include the following\
              \ additional Matroska (MKV) tags: </p> <ul> <li> <p>AWS_KINESISVIDEO_FRAGMENT_NUMBER\
              \ - Fragment number returned in the chunk.</p> </li> <li> <p>AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP\
              \ - Server-side timestamp of the fragment.</p> </li> <li> <p>AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP\
              \ - Producer-side timestamp of the fragment.</p> </li> </ul> <p>The\
              \ following tags will be included if an exception occurs:</p> <ul> <li>\
              \ <p>AWS_KINESISVIDEO_FRAGMENT_NUMBER - The number of the fragment that\
              \ threw the exception </p> </li> <li> <p>AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE\
              \ - The integer code of the </p> </li> <li> <p>AWS_KINESISVIDEO_EXCEPTION_MESSAGE\
              \ - A text description of the exception </p> </li> </ul>"
      type: object
    FragmentNumberString:
      maxLength: 128
      minLength: 1
      pattern: "^[0-9]+$"
      type: string
    ListFragmentsOutput:
      example:
        NextToken: ""
        Fragments: ""
      properties:
        Fragments:
          allOf:
          - $ref: '#/components/schemas/FragmentList'
          - description: "A list of archived <a>Fragment</a> objects from the stream\
              \ that meet the selector criteria. Results are in no specific order,\
              \ even across pages."
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: "If the returned list is truncated, the operation returns\
              \ this token to use to retrieve the next page of results. This value\
              \ is <code>null</code> when there are no more results to return."
      type: object
    FragmentSelectorType:
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
      type: string
    TimestampRange:
      description: The range of timestamps for which to return fragments.
      properties:
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The starting timestamp in the range of timestamps for which
              to return fragments.
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The ending timestamp in the range of timestamps for which
              to return fragments.
      required:
      - EndTimestamp
      - StartTimestamp
      type: object
    ClipFragmentSelector:
      description: "<p>Describes the timestamp range and timestamp origin of a range\
        \ of fragments.</p> <p>Fragments that have duplicate producer timestamps are\
        \ deduplicated. This means that if producers are producing a stream of fragments\
        \ with producer timestamps that are approximately equal to the true clock\
        \ time, the clip will contain all of the fragments within the requested timestamp\
        \ range. If some fragments are ingested within the same time range and very\
        \ different points in time, only the oldest ingested collection of fragments\
        \ are returned.</p>"
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/ClipFragmentSelectorType'
          - description: The origin of the timestamps to use (Server or Producer).
        TimestampRange:
          $ref: '#/components/schemas/GetClip_request_ClipFragmentSelector_TimestampRange'
      required:
      - FragmentSelectorType
      - TimestampRange
      type: object
    Timestamp:
      format: date-time
      type: string
    ContainerFormat:
      enum:
      - FRAGMENTED_MP4
      - MPEG_TS
      type: string
    ContentType:
      maxLength: 128
      minLength: 1
      pattern: "^[a-zA-Z0-9_\\.\\-]+$"
      type: string
    DASHDisplayFragmentNumber:
      enum:
      - ALWAYS
      - NEVER
      type: string
    DASHDisplayFragmentTimestamp:
      enum:
      - ALWAYS
      - NEVER
      type: string
    DASHFragmentSelector:
      description: "Contains the range of timestamps for the requested media, and\
        \ the source of the timestamps. "
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/DASHFragmentSelectorType'
          - description: "<p>The source of the timestamps for the requested media.</p>\
              \ <p>When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code>\
              \ and <a>GetDASHStreamingSessionURLInput$PlaybackMode</a> is <code>ON_DEMAND</code>\
              \ or <code>LIVE_REPLAY</code>, the first fragment ingested with a producer\
              \ timestamp within the specified <a>FragmentSelector$TimestampRange</a>\
              \ is included in the media playlist. In addition, the fragments with\
              \ producer timestamps within the <code>TimestampRange</code> ingested\
              \ immediately following the first fragment (up to the <a>GetDASHStreamingSessionURLInput$MaxManifestFragmentResults</a>\
              \ value) are included. </p> <p>Fragments that have duplicate producer\
              \ timestamps are deduplicated. This means that if producers are producing\
              \ a stream of fragments with producer timestamps that are approximately\
              \ equal to the true clock time, the MPEG-DASH manifest will contain\
              \ all of the fragments within the requested timestamp range. If some\
              \ fragments are ingested within the same time range and very different\
              \ points in time, only the oldest ingested collection of fragments are\
              \ returned.</p> <p>When <code>FragmentSelectorType</code> is set to\
              \ <code>PRODUCER_TIMESTAMP</code> and <a>GetDASHStreamingSessionURLInput$PlaybackMode</a>\
              \ is <code>LIVE</code>, the producer timestamps are used in the MP4\
              \ fragments and for deduplication. But the most recently ingested fragments\
              \ based on server timestamps are included in the MPEG-DASH manifest.\
              \ This means that even if fragments ingested in the past have producer\
              \ timestamps with values now, they are not included in the HLS media\
              \ playlist.</p> <p>The default is <code>SERVER_TIMESTAMP</code>.</p>"
        TimestampRange:
          $ref: '#/components/schemas/GetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange'
      type: object
    DASHMaxResults:
      maximum: 5000
      minimum: 1
      type: integer
    DASHPlaybackMode:
      enum:
      - LIVE
      - LIVE_REPLAY
      - ON_DEMAND
      type: string
    DASHStreamingSessionURL:
      type: string
    Expires:
      maximum: 43200
      minimum: 300
      type: integer
    Format:
      enum:
      - JPEG
      - PNG
      type: string
    FormatConfig:
      additionalProperties:
        $ref: '#/components/schemas/FormatConfigValue'
      maxProperties: 1
      minProperties: 1
      type: object
    FormatConfigKey:
      enum:
      - JPEGQuality
      type: string
    Long:
      type: integer
    Fragment:
      description: Represents a segment of video or other time-delimited data.
      properties:
        FragmentNumber:
          allOf:
          - $ref: '#/components/schemas/FragmentNumberString'
          - description: The unique identifier of the fragment. This value monotonically
              increases based on the ingestion order.
        FragmentSizeInBytes:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: "The total fragment size, including information about the\
              \ fragment and contained media data."
        ProducerTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp from the producer corresponding to the fragment.
        ServerTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The timestamp from the Amazon Web Services server corresponding
              to the fragment.
        FragmentLengthInMilliseconds:
          allOf:
          - $ref: '#/components/schemas/Long'
          - description: The playback duration or other time value associated with
              the fragment.
      type: object
    FragmentList:
      items:
        $ref: '#/components/schemas/Fragment'
      type: array
    FragmentNumberList:
      items:
        $ref: '#/components/schemas/FragmentNumberString'
      maxItems: 1000
      minItems: 1
      type: array
    FragmentSelector:
      description: "<p>Describes the timestamp range and timestamp origin of a range\
        \ of fragments.</p> <p>Only fragments with a start timestamp greater than\
        \ or equal to the given start time and less than or equal to the end time\
        \ are returned. For example, if a stream contains fragments with the following\
        \ start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p>\
        \ </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p> A\
        \ fragment selector range with a start time of 00:00:01 and end time of 00:00:04\
        \ would return the fragments with start times of 00:00:02 and 00:00:04. </p>"
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/FragmentSelectorType'
          - description: The origin of the timestamps to use (Server or Producer).
        TimestampRange:
          $ref: '#/components/schemas/ListFragments_request_FragmentSelector_TimestampRange'
      required:
      - FragmentSelectorType
      - TimestampRange
      type: object
    StreamName:
      maxLength: 256
      minLength: 1
      pattern: "[a-zA-Z0-9_.-]+"
      type: string
    ResourceARN:
      maxLength: 1024
      minLength: 1
      pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
      type: string
    GetClipInput:
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          - description: <p>The name of the stream for which to retrieve the media
              clip. </p> <p>You must specify either the StreamName or the StreamARN.
              </p>
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: <p>The Amazon Resource Name (ARN) of the stream for which
              to retrieve the media clip. </p> <p>You must specify either the StreamName
              or the StreamARN. </p>
        ClipFragmentSelector:
          $ref: '#/components/schemas/GetClipInput_ClipFragmentSelector'
      required:
      - ClipFragmentSelector
      title: GetClipInput
      type: object
    Payload:
      type: string
    GetDASHStreamingSessionURLInput:
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          - description: <p>The name of the stream for which to retrieve the MPEG-DASH
              manifest URL.</p> <p>You must specify either the <code>StreamName</code>
              or the <code>StreamARN</code>.</p>
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: <p>The Amazon Resource Name (ARN) of the stream for which
              to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either
              the <code>StreamName</code> or the <code>StreamARN</code>.</p>
        PlaybackMode:
          allOf:
          - $ref: '#/components/schemas/DASHPlaybackMode'
          - description: "<p>Whether to retrieve live, live replay, or archived, on-demand\
              \ data.</p> <p>Features of the three types of sessions include the following:</p>\
              \ <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type,\
              \ the MPEG-DASH manifest is continually updated with the latest fragments\
              \ as they become available. We recommend that the media player retrieve\
              \ a new manifest on a one-second interval. When this type of session\
              \ is played in a media player, the user interface typically displays\
              \ a \"live\" notification, with no scrubber control for choosing the\
              \ position in the playback window to display.</p> <note> <p>In <code>LIVE</code>\
              \ mode, the newest available fragments are included in an MPEG-DASH\
              \ manifest, even if there is a gap between fragments (that is, if a\
              \ fragment is missing). A gap like this might cause a media player to\
              \ halt or cause a jump in playback. In this mode, fragments are not\
              \ added to the MPEG-DASH manifest if they are older than the newest\
              \ fragment in the playlist. If the missing fragment becomes available\
              \ after a subsequent fragment is added to the manifest, the older fragment\
              \ is not added, and the gap is not filled.</p> </note> </li> <li> <p>\
              \ <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the\
              \ MPEG-DASH manifest is updated similarly to how it is updated for <code>LIVE</code>\
              \ mode except that it starts by including fragments from a given start\
              \ time. Instead of fragments being added as they are ingested, fragments\
              \ are added as the duration of the next fragment elapses. For example,\
              \ if the fragments in the session are two seconds long, then a new fragment\
              \ is added to the manifest every two seconds. This mode is useful to\
              \ be able to start playback from when an event is detected and continue\
              \ live streaming media that has not yet been ingested as of the time\
              \ of the session creation. This mode is also useful to stream previously\
              \ archived media without being limited by the 1,000 fragment limit in\
              \ the <code>ON_DEMAND</code> mode. </p> </li> <li> <p> <b> <code>ON_DEMAND</code>\
              \ </b>: For sessions of this type, the MPEG-DASH manifest contains all\
              \ the fragments for the session, up to the number that is specified\
              \ in <code>MaxManifestFragmentResults</code>. The manifest must be retrieved\
              \ only once for each session. When this type of session is played in\
              \ a media player, the user interface typically displays a scrubber control\
              \ for choosing the position in the playback window to display.</p> </li>\
              \ </ul> <p>In all playback modes, if <code>FragmentSelectorType</code>\
              \ is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments\
              \ with the same start timestamp, the fragment that has the larger fragment\
              \ number (that is, the newer fragment) is included in the MPEG-DASH\
              \ manifest. The other fragments are not included. Fragments that have\
              \ different timestamps but have overlapping durations are still included\
              \ in the MPEG-DASH manifest. This can lead to unexpected behavior in\
              \ the media player.</p> <p>The default is <code>LIVE</code>.</p>"
        DisplayFragmentTimestamp:
          allOf:
          - $ref: '#/components/schemas/DASHDisplayFragmentTimestamp'
          - description: "<p>Per the MPEG-DASH specification, the wall-clock time\
              \ of fragments in the manifest file can be derived using attributes\
              \ in the manifest itself. However, typically, MPEG-DASH compatible media\
              \ players do not properly handle gaps in the media timeline. Kinesis\
              \ Video Streams adjusts the media timeline in the manifest file to enable\
              \ playback of media with discontinuities. Therefore, the wall-clock\
              \ time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp\
              \ is set to <code>ALWAYS</code>, the accurate fragment timestamp is\
              \ added to each S element in the manifest file with the attribute name\
              \ “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage\
              \ this custom attribute.</p> <p>The default value is <code>NEVER</code>.\
              \ When <a>DASHFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>,\
              \ the timestamps will be the server start timestamps. Similarly, when\
              \ <a>DASHFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>, the\
              \ timestamps will be the producer start timestamps. </p>"
        DisplayFragmentNumber:
          allOf:
          - $ref: '#/components/schemas/DASHDisplayFragmentNumber'
          - description: "<p>Fragments are identified in the manifest file based on\
              \ their sequence number in the session. If DisplayFragmentNumber is\
              \ set to <code>ALWAYS</code>, the Kinesis Video Streams fragment number\
              \ is added to each S element in the manifest file with the attribute\
              \ name “kvs:fn”. These fragment numbers can be used for logging or for\
              \ use with other APIs (e.g. <code>GetMedia</code> and <code>GetMediaForFragmentList</code>).\
              \ A custom MPEG-DASH media player is necessary to leverage these this\
              \ custom attribute.</p> <p>The default value is <code>NEVER</code>.</p>"
        DASHFragmentSelector:
          $ref: '#/components/schemas/GetDASHStreamingSessionURLInput_DASHFragmentSelector'
        Expires:
          allOf:
          - $ref: '#/components/schemas/Expires'
          - description: "<p>The time in seconds until the requested session expires.\
              \ This value can be between 300 (5 minutes) and 43200 (12 hours).</p>\
              \ <p>When a session expires, no new calls to <code>GetDashManifest</code>,\
              \ <code>GetMP4InitFragment</code>, or <code>GetMP4MediaFragment</code>\
              \ can be made for that session.</p> <p>The default is 300 (5 minutes).</p>"
        MaxManifestFragmentResults:
          allOf:
          - $ref: '#/components/schemas/DASHMaxResults'
          - description: "<p>The maximum number of fragments that are returned in\
              \ the MPEG-DASH manifest.</p> <p>When the <code>PlaybackMode</code>\
              \ is <code>LIVE</code>, the most recent fragments are returned up to\
              \ this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>,\
              \ the oldest fragments are returned, up to this maximum number.</p>\
              \ <p>When there are a higher number of fragments available in a live\
              \ MPEG-DASH manifest, video players often buffer content before starting\
              \ playback. Increasing the buffer size increases the playback latency,\
              \ but it decreases the likelihood that rebuffering will occur during\
              \ playback. We recommend that a live MPEG-DASH manifest have a minimum\
              \ of 3 fragments and a maximum of 10 fragments.</p> <p>The default is\
              \ 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>,\
              \ and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>.\
              \ </p> <p>The maximum value of 1,000 fragments corresponds to more than\
              \ 16 minutes of video on streams with 1-second fragments, and more than\
              \ 2 1/2 hours of video on streams with 10-second fragments.</p>"
      title: GetDASHStreamingSessionURLInput
      type: object
    HLSPlaybackMode:
      enum:
      - LIVE
      - LIVE_REPLAY
      - ON_DEMAND
      type: string
    HLSFragmentSelector:
      description: "Contains the range of timestamps for the requested media, and\
        \ the source of the timestamps."
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/HLSFragmentSelectorType'
          - description: "<p>The source of the timestamps for the requested media.</p>\
              \ <p>When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code>\
              \ and <a>GetHLSStreamingSessionURLInput$PlaybackMode</a> is <code>ON_DEMAND</code>\
              \ or <code>LIVE_REPLAY</code>, the first fragment ingested with a producer\
              \ timestamp within the specified <a>FragmentSelector$TimestampRange</a>\
              \ is included in the media playlist. In addition, the fragments with\
              \ producer timestamps within the <code>TimestampRange</code> ingested\
              \ immediately following the first fragment (up to the <a>GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults</a>\
              \ value) are included. </p> <p>Fragments that have duplicate producer\
              \ timestamps are deduplicated. This means that if producers are producing\
              \ a stream of fragments with producer timestamps that are approximately\
              \ equal to the true clock time, the HLS media playlists will contain\
              \ all of the fragments within the requested timestamp range. If some\
              \ fragments are ingested within the same time range and very different\
              \ points in time, only the oldest ingested collection of fragments are\
              \ returned.</p> <p>When <code>FragmentSelectorType</code> is set to\
              \ <code>PRODUCER_TIMESTAMP</code> and <a>GetHLSStreamingSessionURLInput$PlaybackMode</a>\
              \ is <code>LIVE</code>, the producer timestamps are used in the MP4\
              \ fragments and for deduplication. But the most recently ingested fragments\
              \ based on server timestamps are included in the HLS media playlist.\
              \ This means that even if fragments ingested in the past have producer\
              \ timestamps with values now, they are not included in the HLS media\
              \ playlist.</p> <p>The default is <code>SERVER_TIMESTAMP</code>.</p>"
        TimestampRange:
          $ref: '#/components/schemas/GetHLSStreamingSessionURL_request_HLSFragmentSelector_TimestampRange'
      type: object
    HLSDiscontinuityMode:
      enum:
      - ALWAYS
      - NEVER
      - ON_DISCONTINUITY
      type: string
    HLSDisplayFragmentTimestamp:
      enum:
      - ALWAYS
      - NEVER
      type: string
    HLSMaxResults:
      maximum: 5000
      minimum: 1
      type: integer
    GetHLSStreamingSessionURLInput:
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          - description: <p>The name of the stream for which to retrieve the HLS master
              playlist URL.</p> <p>You must specify either the <code>StreamName</code>
              or the <code>StreamARN</code>.</p>
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: <p>The Amazon Resource Name (ARN) of the stream for which
              to retrieve the HLS master playlist URL.</p> <p>You must specify either
              the <code>StreamName</code> or the <code>StreamARN</code>.</p>
        PlaybackMode:
          allOf:
          - $ref: '#/components/schemas/HLSPlaybackMode'
          - description: "<p>Whether to retrieve live, live replay, or archived, on-demand\
              \ data.</p> <p>Features of the three types of sessions include the following:</p>\
              \ <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type,\
              \ the HLS media playlist is continually updated with the latest fragments\
              \ as they become available. We recommend that the media player retrieve\
              \ a new playlist on a one-second interval. When this type of session\
              \ is played in a media player, the user interface typically displays\
              \ a \"live\" notification, with no scrubber control for choosing the\
              \ position in the playback window to display.</p> <note> <p>In <code>LIVE</code>\
              \ mode, the newest available fragments are included in an HLS media\
              \ playlist, even if there is a gap between fragments (that is, if a\
              \ fragment is missing). A gap like this might cause a media player to\
              \ halt or cause a jump in playback. In this mode, fragments are not\
              \ added to the HLS media playlist if they are older than the newest\
              \ fragment in the playlist. If the missing fragment becomes available\
              \ after a subsequent fragment is added to the playlist, the older fragment\
              \ is not added, and the gap is not filled.</p> </note> </li> <li> <p>\
              \ <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the\
              \ HLS media playlist is updated similarly to how it is updated for <code>LIVE</code>\
              \ mode except that it starts by including fragments from a given start\
              \ time. Instead of fragments being added as they are ingested, fragments\
              \ are added as the duration of the next fragment elapses. For example,\
              \ if the fragments in the session are two seconds long, then a new fragment\
              \ is added to the media playlist every two seconds. This mode is useful\
              \ to be able to start playback from when an event is detected and continue\
              \ live streaming media that has not yet been ingested as of the time\
              \ of the session creation. This mode is also useful to stream previously\
              \ archived media without being limited by the 1,000 fragment limit in\
              \ the <code>ON_DEMAND</code> mode. </p> </li> <li> <p> <b> <code>ON_DEMAND</code>\
              \ </b>: For sessions of this type, the HLS media playlist contains all\
              \ the fragments for the session, up to the number that is specified\
              \ in <code>MaxMediaPlaylistFragmentResults</code>. The playlist must\
              \ be retrieved only once for each session. When this type of session\
              \ is played in a media player, the user interface typically displays\
              \ a scrubber control for choosing the position in the playback window\
              \ to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code>\
              \ is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments\
              \ with the same start timestamp, the fragment that has the largest fragment\
              \ number (that is, the newest fragment) is included in the HLS media\
              \ playlist. The other fragments are not included. Fragments that have\
              \ different timestamps but have overlapping durations are still included\
              \ in the HLS media playlist. This can lead to unexpected behavior in\
              \ the media player.</p> <p>The default is <code>LIVE</code>.</p>"
        HLSFragmentSelector:
          $ref: '#/components/schemas/GetHLSStreamingSessionURLInput_HLSFragmentSelector'
        ContainerFormat:
          allOf:
          - $ref: '#/components/schemas/ContainerFormat'
          - description: <p>Specifies which format should be used for packaging the
              media. Specifying the <code>FRAGMENTED_MP4</code> container format packages
              the media into MP4 fragments (fMP4 or CMAF). This is the recommended
              packaging because there is minimal packaging overhead. The other container
              format option is <code>MPEG_TS</code>. HLS has supported MPEG TS chunks
              since it was released and is sometimes the only supported packaging
              on older HLS players. MPEG TS typically has a 5-25 percent packaging
              overhead. This means MPEG TS typically requires 5-25 percent more bandwidth
              and cost than fMP4.</p> <p>The default is <code>FRAGMENTED_MP4</code>.</p>
        DiscontinuityMode:
          allOf:
          - $ref: '#/components/schemas/HLSDiscontinuityMode'
          - description: "<p>Specifies when flags marking discontinuities between\
              \ fragments are added to the media playlists.</p> <p>Media players typically\
              \ build a timeline of media content to play, based on the timestamps\
              \ of each fragment. This means that if there is any overlap or gap between\
              \ fragments (as is typical if <a>HLSFragmentSelector</a> is set to <code>SERVER_TIMESTAMP</code>),\
              \ the media player timeline will also have small gaps between fragments\
              \ in some places, and will overwrite frames in other places. Gaps in\
              \ the media player timeline can cause playback to stall and overlaps\
              \ can cause playback to be jittery. When there are discontinuity flags\
              \ between fragments, the media player is expected to reset the timeline,\
              \ resulting in the next fragment being played immediately after the\
              \ previous fragment. </p> <p>The following modes are supported:</p>\
              \ <ul> <li> <p> <code>ALWAYS</code>: a discontinuity marker is placed\
              \ between every fragment in the HLS media playlist. It is recommended\
              \ to use a value of <code>ALWAYS</code> if the fragment timestamps are\
              \ not accurate.</p> </li> <li> <p> <code>NEVER</code>: no discontinuity\
              \ markers are placed anywhere. It is recommended to use a value of <code>NEVER</code>\
              \ to ensure the media player timeline most accurately maps to the producer\
              \ timestamps. </p> </li> <li> <p> <code>ON_DISCONTINUITY</code>: a discontinuity\
              \ marker is placed between fragments that have a gap or overlap of more\
              \ than 50 milliseconds. For most playback scenarios, it is recommended\
              \ to use a value of <code>ON_DISCONTINUITY</code> so that the media\
              \ player timeline is only reset when there is a significant issue with\
              \ the media timeline (e.g. a missing fragment).</p> </li> </ul> <p>The\
              \ default is <code>ALWAYS</code> when <a>HLSFragmentSelector</a> is\
              \ set to <code>SERVER_TIMESTAMP</code>, and <code>NEVER</code> when\
              \ it is set to <code>PRODUCER_TIMESTAMP</code>.</p>"
        DisplayFragmentTimestamp:
          allOf:
          - $ref: '#/components/schemas/HLSDisplayFragmentTimestamp'
          - description: "<p>Specifies when the fragment start timestamps should be\
              \ included in the HLS media playlist. Typically, media players report\
              \ the playhead position as a time relative to the start of the first\
              \ fragment in the playback session. However, when the start timestamps\
              \ are included in the HLS media playlist, some media players might report\
              \ the current playhead as an absolute time based on the fragment timestamps.\
              \ This can be useful for creating a playback experience that shows viewers\
              \ the wall-clock time of the media.</p> <p>The default is <code>NEVER</code>.\
              \ When <a>HLSFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>,\
              \ the timestamps will be the server start timestamps. Similarly, when\
              \ <a>HLSFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>, the\
              \ timestamps will be the producer start timestamps. </p>"
        Expires:
          allOf:
          - $ref: '#/components/schemas/Expires'
          - description: "<p>The time in seconds until the requested session expires.\
              \ This value can be between 300 (5 minutes) and 43200 (12 hours).</p>\
              \ <p>When a session expires, no new calls to <code>GetHLSMasterPlaylist</code>,\
              \ <code>GetHLSMediaPlaylist</code>, <code>GetMP4InitFragment</code>,\
              \ <code>GetMP4MediaFragment</code>, or <code>GetTSFragment</code> can\
              \ be made for that session.</p> <p>The default is 300 (5 minutes).</p>"
        MaxMediaPlaylistFragmentResults:
          allOf:
          - $ref: '#/components/schemas/HLSMaxResults'
          - description: "<p>The maximum number of fragments that are returned in\
              \ the HLS media playlists.</p> <p>When the <code>PlaybackMode</code>\
              \ is <code>LIVE</code>, the most recent fragments are returned up to\
              \ this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>,\
              \ the oldest fragments are returned, up to this maximum number.</p>\
              \ <p>When there are a higher number of fragments available in a live\
              \ HLS media playlist, video players often buffer content before starting\
              \ playback. Increasing the buffer size increases the playback latency,\
              \ but it decreases the likelihood that rebuffering will occur during\
              \ playback. We recommend that a live HLS media playlist have a minimum\
              \ of 3 fragments and a maximum of 10 fragments.</p> <p>The default is\
              \ 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>,\
              \ and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>.\
              \ </p> <p>The maximum value of 5,000 fragments corresponds to more than\
              \ 80 minutes of video on streams with 1-second fragments, and more than\
              \ 13 hours of video on streams with 10-second fragments.</p>"
      title: GetHLSStreamingSessionURLInput
      type: object
    HLSStreamingSessionURL:
      type: string
    ImageSelectorType:
      enum:
      - PRODUCER_TIMESTAMP
      - SERVER_TIMESTAMP
      type: string
    SamplingInterval:
      type: integer
    WidthPixels:
      maximum: 3840
      minimum: 1
      type: integer
    HeightPixels:
      maximum: 2160
      minimum: 1
      type: integer
    GetImagesMaxResults:
      maximum: 100
      minimum: 1
      type: integer
    NextToken:
      maxLength: 4096
      minLength: 1
      pattern: "[a-zA-Z0-9+/]+={0,2}"
      type: string
    GetImagesInput:
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          - description: The name of the stream from which to retrieve the images.
              You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: The Amazon Resource Name (ARN) of the stream from which to
              retrieve the images. You must specify either the <code>StreamName</code>
              or the <code>StreamARN</code>.
        ImageSelectorType:
          allOf:
          - $ref: '#/components/schemas/ImageSelectorType'
          - description: The origin of the Server or Producer timestamps to use to
              generate the images.
        StartTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: The starting point from which the images should be generated.
              This <code>StartTimestamp</code> must be within an inclusive range of
              timestamps for an image to be returned.
        EndTimestamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The end timestamp for the range of images to be generated.\
              \ If the time range between <code>StartTimestamp</code> and <code>EndTimestamp</code>\
              \ is more than 300 seconds above <code>StartTimestamp</code>, you will\
              \ receive an <code>IllegalArgumentException</code>."
        SamplingInterval:
          allOf:
          - $ref: '#/components/schemas/SamplingInterval'
          - description: "<p>The time interval in milliseconds (ms) at which the images\
              \ need to be generated from the stream, with a default of 3000 ms. The\
              \ minimum value that can be provided is 200 ms. If the timestamp range\
              \ is less than the sampling interval, the Image from the <code>startTimestamp</code>\
              \ will be returned if available. </p> <note> <p>The minimum value of\
              \ 200 ms is a hard limit.</p> </note>"
        Format:
          allOf:
          - $ref: '#/components/schemas/Format'
          - description: The format that will be used to encode the image.
        FormatConfig:
          allOf:
          - $ref: '#/components/schemas/FormatConfig'
          - description: "The list of a key-value pair structure that contains extra\
              \ parameters that can be applied when the image is generated. The <code>FormatConfig</code>\
              \ key is the <code>JPEGQuality</code>, which indicates the JPEG quality\
              \ key to be used to generate the image. The <code>FormatConfig</code>\
              \ value accepts ints from 1 to 100. If the value is 1, the image will\
              \ be generated with less quality and the best compression. If the value\
              \ is 100, the image will be generated with the best quality and less\
              \ compression. If no value is provided, the default value of the <code>JPEGQuality</code>\
              \ key will be set to 80."
        WidthPixels:
          allOf:
          - $ref: '#/components/schemas/WidthPixels'
          - description: "The width of the output image that is used in conjunction\
              \ with the <code>HeightPixels</code> parameter. When both <code>WidthPixels</code>\
              \ and <code>HeightPixels</code> parameters are provided, the image will\
              \ be stretched to fit the specified aspect ratio. If only the <code>WidthPixels</code>\
              \ parameter is provided or if only the <code>HeightPixels</code> is\
              \ provided, a <code>ValidationException</code> will be thrown. If neither\
              \ parameter is provided, the original image size from the stream will\
              \ be returned."
        HeightPixels:
          allOf:
          - $ref: '#/components/schemas/HeightPixels'
          - description: "The height of the output image that is used in conjunction\
              \ with the <code>WidthPixels</code> parameter. When both <code>HeightPixels</code>\
              \ and <code>WidthPixels</code> parameters are provided, the image will\
              \ be stretched to fit the specified aspect ratio. If only the <code>HeightPixels</code>\
              \ parameter is provided, its original aspect ratio will be used to calculate\
              \ the <code>WidthPixels</code> ratio. If neither parameter is provided,\
              \ the original image size will be returned."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/GetImagesMaxResults'
          - description: <p>The maximum number of images to be returned by the API.
              </p> <note> <p>The default limit is 25 images per API response. Providing
              a <code>MaxResults</code> greater than this value will result in a page
              size of 25. Any additional results will be paginated. </p> </note>
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A token that specifies where to start paginating the next
              set of Images. This is the <code>GetImages:NextToken</code> from a previously
              truncated response.
      required:
      - EndTimestamp
      - Format
      - ImageSelectorType
      - StartTimestamp
      title: GetImagesInput
      type: object
    Images:
      items:
        $ref: '#/components/schemas/Image'
      type: array
    GetMediaForFragmentListInput:
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          - description: The name of the stream from which to retrieve fragment media.
              Specify either this parameter or the <code>StreamARN</code> parameter.
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: The Amazon Resource Name (ARN) of the stream from which to
              retrieve fragment media. Specify either this parameter or the <code>StreamName</code>
              parameter.
        Fragments:
          allOf:
          - $ref: '#/components/schemas/FragmentNumberList'
          - description: A list of the numbers of fragments for which to retrieve
              media. You retrieve these values with <a>ListFragments</a>.
      required:
      - Fragments
      title: GetMediaForFragmentListInput
      type: object
    ImageError:
      enum:
      - NO_MEDIA
      - MEDIA_ERROR
      type: string
    ImageContent:
      maxLength: 6291456
      minLength: 1
      type: string
    Image:
      description: "A structure that contains the <code>Timestamp</code>, <code>Error</code>,\
        \ and <code>ImageContent</code>."
      properties:
        TimeStamp:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: An attribute of the <code>Image</code> object that is used
              to extract an image from the video stream. This field is used to manage
              gaps on images or to better understand the pagination window.
        Error:
          allOf:
          - $ref: '#/components/schemas/ImageError'
          - description: "<p>The error message shown when the image for the provided\
              \ timestamp was not extracted due to a non-tryable error. An error will\
              \ be returned if: </p> <ul> <li> <p>There is no media that exists for\
              \ the specified <code>Timestamp</code>.</p> </li> </ul> <ul> <li> <p>The\
              \ media for the specified time does not allow an image to be extracted.\
              \ In this case the media is audio only, or the incorrect media has been\
              \ ingested.</p> </li> </ul>"
        ImageContent:
          allOf:
          - $ref: '#/components/schemas/ImageContent'
          - description: An attribute of the <code>Image</code> object that is Base64
              encoded.
      type: object
    ListFragmentsMaxResults:
      maximum: 1000
      minimum: 1
      type: integer
    ListFragmentsInput:
      properties:
        StreamName:
          allOf:
          - $ref: '#/components/schemas/StreamName'
          - description: The name of the stream from which to retrieve a fragment
              list. Specify either this parameter or the <code>StreamARN</code> parameter.
        StreamARN:
          allOf:
          - $ref: '#/components/schemas/ResourceARN'
          - description: The Amazon Resource Name (ARN) of the stream from which to
              retrieve a fragment list. Specify either this parameter or the <code>StreamName</code>
              parameter.
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ListFragmentsMaxResults'
          - description: "The total number of fragments to return. If the total number\
              \ of fragments available is more than the value specified in <code>max-results</code>,\
              \ then a <a>ListFragmentsOutput$NextToken</a> is provided in the output\
              \ that you can use to resume pagination."
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: A token to specify where to start paginating. This is the
              <a>ListFragmentsOutput$NextToken</a> from a previously truncated response.
        FragmentSelector:
          $ref: '#/components/schemas/ListFragmentsInput_FragmentSelector'
      title: ListFragmentsInput
      type: object
    GetClip_request_ClipFragmentSelector_TimestampRange:
      allOf:
      - $ref: '#/components/schemas/ClipTimestampRange'
      - description: The range of timestamps to return.
    GetClip_request_ClipFragmentSelector:
      description: "<p>Describes the timestamp range and timestamp origin of a range\
        \ of fragments.</p> <p>Fragments that have duplicate producer timestamps are\
        \ deduplicated. This means that if producers are producing a stream of fragments\
        \ with producer timestamps that are approximately equal to the true clock\
        \ time, the clip will contain all of the fragments within the requested timestamp\
        \ range. If some fragments are ingested within the same time range and very\
        \ different points in time, only the oldest ingested collection of fragments\
        \ are returned.</p>"
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/ClipFragmentSelectorType'
          - description: The origin of the timestamps to use (Server or Producer).
        TimestampRange:
          $ref: '#/components/schemas/GetClip_request_ClipFragmentSelector_TimestampRange'
      type: object
    GetClip_request:
      properties:
        StreamName:
          description: <p>The name of the stream for which to retrieve the media clip.
            </p> <p>You must specify either the StreamName or the StreamARN. </p>
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          type: string
        StreamARN:
          description: <p>The Amazon Resource Name (ARN) of the stream for which to
            retrieve the media clip. </p> <p>You must specify either the StreamName
            or the StreamARN. </p>
          maxLength: 1024
          minLength: 1
          pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          type: string
        ClipFragmentSelector:
          $ref: '#/components/schemas/GetClip_request_ClipFragmentSelector'
      required:
      - ClipFragmentSelector
      type: object
    GetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange:
      allOf:
      - $ref: '#/components/schemas/DASHTimestampRange'
      - description: <p>The start and end of the timestamp range for the requested
          media.</p> <p>This value should not be present if <code>PlaybackType</code>
          is <code>LIVE</code>.</p>
    GetDASHStreamingSessionURL_request_DASHFragmentSelector:
      description: "Contains the range of timestamps for the requested media, and\
        \ the source of the timestamps. "
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/DASHFragmentSelectorType'
          - description: "<p>The source of the timestamps for the requested media.</p>\
              \ <p>When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code>\
              \ and <a>GetDASHStreamingSessionURLInput$PlaybackMode</a> is <code>ON_DEMAND</code>\
              \ or <code>LIVE_REPLAY</code>, the first fragment ingested with a producer\
              \ timestamp within the specified <a>FragmentSelector$TimestampRange</a>\
              \ is included in the media playlist. In addition, the fragments with\
              \ producer timestamps within the <code>TimestampRange</code> ingested\
              \ immediately following the first fragment (up to the <a>GetDASHStreamingSessionURLInput$MaxManifestFragmentResults</a>\
              \ value) are included. </p> <p>Fragments that have duplicate producer\
              \ timestamps are deduplicated. This means that if producers are producing\
              \ a stream of fragments with producer timestamps that are approximately\
              \ equal to the true clock time, the MPEG-DASH manifest will contain\
              \ all of the fragments within the requested timestamp range. If some\
              \ fragments are ingested within the same time range and very different\
              \ points in time, only the oldest ingested collection of fragments are\
              \ returned.</p> <p>When <code>FragmentSelectorType</code> is set to\
              \ <code>PRODUCER_TIMESTAMP</code> and <a>GetDASHStreamingSessionURLInput$PlaybackMode</a>\
              \ is <code>LIVE</code>, the producer timestamps are used in the MP4\
              \ fragments and for deduplication. But the most recently ingested fragments\
              \ based on server timestamps are included in the MPEG-DASH manifest.\
              \ This means that even if fragments ingested in the past have producer\
              \ timestamps with values now, they are not included in the HLS media\
              \ playlist.</p> <p>The default is <code>SERVER_TIMESTAMP</code>.</p>"
        TimestampRange:
          $ref: '#/components/schemas/GetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange'
      type: object
    GetDASHStreamingSessionURL_request:
      properties:
        StreamName:
          description: <p>The name of the stream for which to retrieve the MPEG-DASH
            manifest URL.</p> <p>You must specify either the <code>StreamName</code>
            or the <code>StreamARN</code>.</p>
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          type: string
        StreamARN:
          description: <p>The Amazon Resource Name (ARN) of the stream for which to
            retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the
            <code>StreamName</code> or the <code>StreamARN</code>.</p>
          maxLength: 1024
          minLength: 1
          pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          type: string
        PlaybackMode:
          description: "<p>Whether to retrieve live, live replay, or archived, on-demand\
            \ data.</p> <p>Features of the three types of sessions include the following:</p>\
            \ <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type,\
            \ the MPEG-DASH manifest is continually updated with the latest fragments\
            \ as they become available. We recommend that the media player retrieve\
            \ a new manifest on a one-second interval. When this type of session is\
            \ played in a media player, the user interface typically displays a \"\
            live\" notification, with no scrubber control for choosing the position\
            \ in the playback window to display.</p> <note> <p>In <code>LIVE</code>\
            \ mode, the newest available fragments are included in an MPEG-DASH manifest,\
            \ even if there is a gap between fragments (that is, if a fragment is\
            \ missing). A gap like this might cause a media player to halt or cause\
            \ a jump in playback. In this mode, fragments are not added to the MPEG-DASH\
            \ manifest if they are older than the newest fragment in the playlist.\
            \ If the missing fragment becomes available after a subsequent fragment\
            \ is added to the manifest, the older fragment is not added, and the gap\
            \ is not filled.</p> </note> </li> <li> <p> <b> <code>LIVE_REPLAY</code>\
            \ </b>: For sessions of this type, the MPEG-DASH manifest is updated similarly\
            \ to how it is updated for <code>LIVE</code> mode except that it starts\
            \ by including fragments from a given start time. Instead of fragments\
            \ being added as they are ingested, fragments are added as the duration\
            \ of the next fragment elapses. For example, if the fragments in the session\
            \ are two seconds long, then a new fragment is added to the manifest every\
            \ two seconds. This mode is useful to be able to start playback from when\
            \ an event is detected and continue live streaming media that has not\
            \ yet been ingested as of the time of the session creation. This mode\
            \ is also useful to stream previously archived media without being limited\
            \ by the 1,000 fragment limit in the <code>ON_DEMAND</code> mode. </p>\
            \ </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions of this\
            \ type, the MPEG-DASH manifest contains all the fragments for the session,\
            \ up to the number that is specified in <code>MaxManifestFragmentResults</code>.\
            \ The manifest must be retrieved only once for each session. When this\
            \ type of session is played in a media player, the user interface typically\
            \ displays a scrubber control for choosing the position in the playback\
            \ window to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code>\
            \ is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments\
            \ with the same start timestamp, the fragment that has the larger fragment\
            \ number (that is, the newer fragment) is included in the MPEG-DASH manifest.\
            \ The other fragments are not included. Fragments that have different\
            \ timestamps but have overlapping durations are still included in the\
            \ MPEG-DASH manifest. This can lead to unexpected behavior in the media\
            \ player.</p> <p>The default is <code>LIVE</code>.</p>"
          enum:
          - LIVE
          - LIVE_REPLAY
          - ON_DEMAND
          type: string
        DisplayFragmentTimestamp:
          description: "<p>Per the MPEG-DASH specification, the wall-clock time of\
            \ fragments in the manifest file can be derived using attributes in the\
            \ manifest itself. However, typically, MPEG-DASH compatible media players\
            \ do not properly handle gaps in the media timeline. Kinesis Video Streams\
            \ adjusts the media timeline in the manifest file to enable playback of\
            \ media with discontinuities. Therefore, the wall-clock time derived from\
            \ the manifest file may be inaccurate. If DisplayFragmentTimestamp is\
            \ set to <code>ALWAYS</code>, the accurate fragment timestamp is added\
            \ to each S element in the manifest file with the attribute name “kvs:ts”\
            . A custom MPEG-DASH media player is necessary to leverage this custom\
            \ attribute.</p> <p>The default value is <code>NEVER</code>. When <a>DASHFragmentSelector</a>\
            \ is <code>SERVER_TIMESTAMP</code>, the timestamps will be the server\
            \ start timestamps. Similarly, when <a>DASHFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>,\
            \ the timestamps will be the producer start timestamps. </p>"
          enum:
          - ALWAYS
          - NEVER
          type: string
        DisplayFragmentNumber:
          description: "<p>Fragments are identified in the manifest file based on\
            \ their sequence number in the session. If DisplayFragmentNumber is set\
            \ to <code>ALWAYS</code>, the Kinesis Video Streams fragment number is\
            \ added to each S element in the manifest file with the attribute name\
            \ “kvs:fn”. These fragment numbers can be used for logging or for use\
            \ with other APIs (e.g. <code>GetMedia</code> and <code>GetMediaForFragmentList</code>).\
            \ A custom MPEG-DASH media player is necessary to leverage these this\
            \ custom attribute.</p> <p>The default value is <code>NEVER</code>.</p>"
          enum:
          - ALWAYS
          - NEVER
          type: string
        DASHFragmentSelector:
          $ref: '#/components/schemas/GetDASHStreamingSessionURL_request_DASHFragmentSelector'
        Expires:
          description: "<p>The time in seconds until the requested session expires.\
            \ This value can be between 300 (5 minutes) and 43200 (12 hours).</p>\
            \ <p>When a session expires, no new calls to <code>GetDashManifest</code>,\
            \ <code>GetMP4InitFragment</code>, or <code>GetMP4MediaFragment</code>\
            \ can be made for that session.</p> <p>The default is 300 (5 minutes).</p>"
          maximum: 43200
          minimum: 300
          type: integer
        MaxManifestFragmentResults:
          description: "<p>The maximum number of fragments that are returned in the\
            \ MPEG-DASH manifest.</p> <p>When the <code>PlaybackMode</code> is <code>LIVE</code>,\
            \ the most recent fragments are returned up to this value. When the <code>PlaybackMode</code>\
            \ is <code>ON_DEMAND</code>, the oldest fragments are returned, up to\
            \ this maximum number.</p> <p>When there are a higher number of fragments\
            \ available in a live MPEG-DASH manifest, video players often buffer content\
            \ before starting playback. Increasing the buffer size increases the playback\
            \ latency, but it decreases the likelihood that rebuffering will occur\
            \ during playback. We recommend that a live MPEG-DASH manifest have a\
            \ minimum of 3 fragments and a maximum of 10 fragments.</p> <p>The default\
            \ is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or\
            \ <code>LIVE_REPLAY</code>, and 1,000 if <code>PlaybackMode</code> is\
            \ <code>ON_DEMAND</code>. </p> <p>The maximum value of 1,000 fragments\
            \ corresponds to more than 16 minutes of video on streams with 1-second\
            \ fragments, and more than 2 1/2 hours of video on streams with 10-second\
            \ fragments.</p>"
          maximum: 5000
          minimum: 1
          type: integer
      type: object
    GetHLSStreamingSessionURL_request_HLSFragmentSelector_TimestampRange:
      allOf:
      - $ref: '#/components/schemas/HLSTimestampRange'
      - description: <p>The start and end of the timestamp range for the requested
          media.</p> <p>This value should not be present if <code>PlaybackType</code>
          is <code>LIVE</code>.</p>
    GetHLSStreamingSessionURL_request_HLSFragmentSelector:
      description: "Contains the range of timestamps for the requested media, and\
        \ the source of the timestamps."
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/HLSFragmentSelectorType'
          - description: "<p>The source of the timestamps for the requested media.</p>\
              \ <p>When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code>\
              \ and <a>GetHLSStreamingSessionURLInput$PlaybackMode</a> is <code>ON_DEMAND</code>\
              \ or <code>LIVE_REPLAY</code>, the first fragment ingested with a producer\
              \ timestamp within the specified <a>FragmentSelector$TimestampRange</a>\
              \ is included in the media playlist. In addition, the fragments with\
              \ producer timestamps within the <code>TimestampRange</code> ingested\
              \ immediately following the first fragment (up to the <a>GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults</a>\
              \ value) are included. </p> <p>Fragments that have duplicate producer\
              \ timestamps are deduplicated. This means that if producers are producing\
              \ a stream of fragments with producer timestamps that are approximately\
              \ equal to the true clock time, the HLS media playlists will contain\
              \ all of the fragments within the requested timestamp range. If some\
              \ fragments are ingested within the same time range and very different\
              \ points in time, only the oldest ingested collection of fragments are\
              \ returned.</p> <p>When <code>FragmentSelectorType</code> is set to\
              \ <code>PRODUCER_TIMESTAMP</code> and <a>GetHLSStreamingSessionURLInput$PlaybackMode</a>\
              \ is <code>LIVE</code>, the producer timestamps are used in the MP4\
              \ fragments and for deduplication. But the most recently ingested fragments\
              \ based on server timestamps are included in the HLS media playlist.\
              \ This means that even if fragments ingested in the past have producer\
              \ timestamps with values now, they are not included in the HLS media\
              \ playlist.</p> <p>The default is <code>SERVER_TIMESTAMP</code>.</p>"
        TimestampRange:
          $ref: '#/components/schemas/GetHLSStreamingSessionURL_request_HLSFragmentSelector_TimestampRange'
      type: object
    GetHLSStreamingSessionURL_request:
      properties:
        StreamName:
          description: <p>The name of the stream for which to retrieve the HLS master
            playlist URL.</p> <p>You must specify either the <code>StreamName</code>
            or the <code>StreamARN</code>.</p>
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          type: string
        StreamARN:
          description: <p>The Amazon Resource Name (ARN) of the stream for which to
            retrieve the HLS master playlist URL.</p> <p>You must specify either the
            <code>StreamName</code> or the <code>StreamARN</code>.</p>
          maxLength: 1024
          minLength: 1
          pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          type: string
        PlaybackMode:
          description: "<p>Whether to retrieve live, live replay, or archived, on-demand\
            \ data.</p> <p>Features of the three types of sessions include the following:</p>\
            \ <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type,\
            \ the HLS media playlist is continually updated with the latest fragments\
            \ as they become available. We recommend that the media player retrieve\
            \ a new playlist on a one-second interval. When this type of session is\
            \ played in a media player, the user interface typically displays a \"\
            live\" notification, with no scrubber control for choosing the position\
            \ in the playback window to display.</p> <note> <p>In <code>LIVE</code>\
            \ mode, the newest available fragments are included in an HLS media playlist,\
            \ even if there is a gap between fragments (that is, if a fragment is\
            \ missing). A gap like this might cause a media player to halt or cause\
            \ a jump in playback. In this mode, fragments are not added to the HLS\
            \ media playlist if they are older than the newest fragment in the playlist.\
            \ If the missing fragment becomes available after a subsequent fragment\
            \ is added to the playlist, the older fragment is not added, and the gap\
            \ is not filled.</p> </note> </li> <li> <p> <b> <code>LIVE_REPLAY</code>\
            \ </b>: For sessions of this type, the HLS media playlist is updated similarly\
            \ to how it is updated for <code>LIVE</code> mode except that it starts\
            \ by including fragments from a given start time. Instead of fragments\
            \ being added as they are ingested, fragments are added as the duration\
            \ of the next fragment elapses. For example, if the fragments in the session\
            \ are two seconds long, then a new fragment is added to the media playlist\
            \ every two seconds. This mode is useful to be able to start playback\
            \ from when an event is detected and continue live streaming media that\
            \ has not yet been ingested as of the time of the session creation. This\
            \ mode is also useful to stream previously archived media without being\
            \ limited by the 1,000 fragment limit in the <code>ON_DEMAND</code> mode.\
            \ </p> </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions of\
            \ this type, the HLS media playlist contains all the fragments for the\
            \ session, up to the number that is specified in <code>MaxMediaPlaylistFragmentResults</code>.\
            \ The playlist must be retrieved only once for each session. When this\
            \ type of session is played in a media player, the user interface typically\
            \ displays a scrubber control for choosing the position in the playback\
            \ window to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code>\
            \ is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments\
            \ with the same start timestamp, the fragment that has the largest fragment\
            \ number (that is, the newest fragment) is included in the HLS media playlist.\
            \ The other fragments are not included. Fragments that have different\
            \ timestamps but have overlapping durations are still included in the\
            \ HLS media playlist. This can lead to unexpected behavior in the media\
            \ player.</p> <p>The default is <code>LIVE</code>.</p>"
          enum:
          - LIVE
          - LIVE_REPLAY
          - ON_DEMAND
          type: string
        HLSFragmentSelector:
          $ref: '#/components/schemas/GetHLSStreamingSessionURL_request_HLSFragmentSelector'
        ContainerFormat:
          description: <p>Specifies which format should be used for packaging the
            media. Specifying the <code>FRAGMENTED_MP4</code> container format packages
            the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging
            because there is minimal packaging overhead. The other container format
            option is <code>MPEG_TS</code>. HLS has supported MPEG TS chunks since
            it was released and is sometimes the only supported packaging on older
            HLS players. MPEG TS typically has a 5-25 percent packaging overhead.
            This means MPEG TS typically requires 5-25 percent more bandwidth and
            cost than fMP4.</p> <p>The default is <code>FRAGMENTED_MP4</code>.</p>
          enum:
          - FRAGMENTED_MP4
          - MPEG_TS
          type: string
        DiscontinuityMode:
          description: "<p>Specifies when flags marking discontinuities between fragments\
            \ are added to the media playlists.</p> <p>Media players typically build\
            \ a timeline of media content to play, based on the timestamps of each\
            \ fragment. This means that if there is any overlap or gap between fragments\
            \ (as is typical if <a>HLSFragmentSelector</a> is set to <code>SERVER_TIMESTAMP</code>),\
            \ the media player timeline will also have small gaps between fragments\
            \ in some places, and will overwrite frames in other places. Gaps in the\
            \ media player timeline can cause playback to stall and overlaps can cause\
            \ playback to be jittery. When there are discontinuity flags between fragments,\
            \ the media player is expected to reset the timeline, resulting in the\
            \ next fragment being played immediately after the previous fragment.\
            \ </p> <p>The following modes are supported:</p> <ul> <li> <p> <code>ALWAYS</code>:\
            \ a discontinuity marker is placed between every fragment in the HLS media\
            \ playlist. It is recommended to use a value of <code>ALWAYS</code> if\
            \ the fragment timestamps are not accurate.</p> </li> <li> <p> <code>NEVER</code>:\
            \ no discontinuity markers are placed anywhere. It is recommended to use\
            \ a value of <code>NEVER</code> to ensure the media player timeline most\
            \ accurately maps to the producer timestamps. </p> </li> <li> <p> <code>ON_DISCONTINUITY</code>:\
            \ a discontinuity marker is placed between fragments that have a gap or\
            \ overlap of more than 50 milliseconds. For most playback scenarios, it\
            \ is recommended to use a value of <code>ON_DISCONTINUITY</code> so that\
            \ the media player timeline is only reset when there is a significant\
            \ issue with the media timeline (e.g. a missing fragment).</p> </li> </ul>\
            \ <p>The default is <code>ALWAYS</code> when <a>HLSFragmentSelector</a>\
            \ is set to <code>SERVER_TIMESTAMP</code>, and <code>NEVER</code> when\
            \ it is set to <code>PRODUCER_TIMESTAMP</code>.</p>"
          enum:
          - ALWAYS
          - NEVER
          - ON_DISCONTINUITY
          type: string
        DisplayFragmentTimestamp:
          description: "<p>Specifies when the fragment start timestamps should be\
            \ included in the HLS media playlist. Typically, media players report\
            \ the playhead position as a time relative to the start of the first fragment\
            \ in the playback session. However, when the start timestamps are included\
            \ in the HLS media playlist, some media players might report the current\
            \ playhead as an absolute time based on the fragment timestamps. This\
            \ can be useful for creating a playback experience that shows viewers\
            \ the wall-clock time of the media.</p> <p>The default is <code>NEVER</code>.\
            \ When <a>HLSFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>, the\
            \ timestamps will be the server start timestamps. Similarly, when <a>HLSFragmentSelector</a>\
            \ is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer\
            \ start timestamps. </p>"
          enum:
          - ALWAYS
          - NEVER
          type: string
        Expires:
          description: "<p>The time in seconds until the requested session expires.\
            \ This value can be between 300 (5 minutes) and 43200 (12 hours).</p>\
            \ <p>When a session expires, no new calls to <code>GetHLSMasterPlaylist</code>,\
            \ <code>GetHLSMediaPlaylist</code>, <code>GetMP4InitFragment</code>, <code>GetMP4MediaFragment</code>,\
            \ or <code>GetTSFragment</code> can be made for that session.</p> <p>The\
            \ default is 300 (5 minutes).</p>"
          maximum: 43200
          minimum: 300
          type: integer
        MaxMediaPlaylistFragmentResults:
          description: "<p>The maximum number of fragments that are returned in the\
            \ HLS media playlists.</p> <p>When the <code>PlaybackMode</code> is <code>LIVE</code>,\
            \ the most recent fragments are returned up to this value. When the <code>PlaybackMode</code>\
            \ is <code>ON_DEMAND</code>, the oldest fragments are returned, up to\
            \ this maximum number.</p> <p>When there are a higher number of fragments\
            \ available in a live HLS media playlist, video players often buffer content\
            \ before starting playback. Increasing the buffer size increases the playback\
            \ latency, but it decreases the likelihood that rebuffering will occur\
            \ during playback. We recommend that a live HLS media playlist have a\
            \ minimum of 3 fragments and a maximum of 10 fragments.</p> <p>The default\
            \ is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or\
            \ <code>LIVE_REPLAY</code>, and 1,000 if <code>PlaybackMode</code> is\
            \ <code>ON_DEMAND</code>. </p> <p>The maximum value of 5,000 fragments\
            \ corresponds to more than 80 minutes of video on streams with 1-second\
            \ fragments, and more than 13 hours of video on streams with 10-second\
            \ fragments.</p>"
          maximum: 5000
          minimum: 1
          type: integer
      type: object
    GetImages_request:
      properties:
        StreamName:
          description: The name of the stream from which to retrieve the images. You
            must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          type: string
        StreamARN:
          description: The Amazon Resource Name (ARN) of the stream from which to
            retrieve the images. You must specify either the <code>StreamName</code>
            or the <code>StreamARN</code>.
          maxLength: 1024
          minLength: 1
          pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          type: string
        ImageSelectorType:
          description: The origin of the Server or Producer timestamps to use to generate
            the images.
          enum:
          - PRODUCER_TIMESTAMP
          - SERVER_TIMESTAMP
          type: string
        StartTimestamp:
          description: The starting point from which the images should be generated.
            This <code>StartTimestamp</code> must be within an inclusive range of
            timestamps for an image to be returned.
          format: date-time
          type: string
        EndTimestamp:
          description: "The end timestamp for the range of images to be generated.\
            \ If the time range between <code>StartTimestamp</code> and <code>EndTimestamp</code>\
            \ is more than 300 seconds above <code>StartTimestamp</code>, you will\
            \ receive an <code>IllegalArgumentException</code>."
          format: date-time
          type: string
        SamplingInterval:
          description: "<p>The time interval in milliseconds (ms) at which the images\
            \ need to be generated from the stream, with a default of 3000 ms. The\
            \ minimum value that can be provided is 200 ms. If the timestamp range\
            \ is less than the sampling interval, the Image from the <code>startTimestamp</code>\
            \ will be returned if available. </p> <note> <p>The minimum value of 200\
            \ ms is a hard limit.</p> </note>"
          type: integer
        Format:
          description: The format that will be used to encode the image.
          enum:
          - JPEG
          - PNG
          type: string
        FormatConfig:
          additionalProperties:
            $ref: '#/components/schemas/FormatConfigValue'
          description: "The list of a key-value pair structure that contains extra\
            \ parameters that can be applied when the image is generated. The <code>FormatConfig</code>\
            \ key is the <code>JPEGQuality</code>, which indicates the JPEG quality\
            \ key to be used to generate the image. The <code>FormatConfig</code>\
            \ value accepts ints from 1 to 100. If the value is 1, the image will\
            \ be generated with less quality and the best compression. If the value\
            \ is 100, the image will be generated with the best quality and less compression.\
            \ If no value is provided, the default value of the <code>JPEGQuality</code>\
            \ key will be set to 80."
          maxProperties: 1
          minProperties: 1
          type: object
        WidthPixels:
          description: "The width of the output image that is used in conjunction\
            \ with the <code>HeightPixels</code> parameter. When both <code>WidthPixels</code>\
            \ and <code>HeightPixels</code> parameters are provided, the image will\
            \ be stretched to fit the specified aspect ratio. If only the <code>WidthPixels</code>\
            \ parameter is provided or if only the <code>HeightPixels</code> is provided,\
            \ a <code>ValidationException</code> will be thrown. If neither parameter\
            \ is provided, the original image size from the stream will be returned."
          maximum: 3840
          minimum: 1
          type: integer
        HeightPixels:
          description: "The height of the output image that is used in conjunction\
            \ with the <code>WidthPixels</code> parameter. When both <code>HeightPixels</code>\
            \ and <code>WidthPixels</code> parameters are provided, the image will\
            \ be stretched to fit the specified aspect ratio. If only the <code>HeightPixels</code>\
            \ parameter is provided, its original aspect ratio will be used to calculate\
            \ the <code>WidthPixels</code> ratio. If neither parameter is provided,\
            \ the original image size will be returned."
          maximum: 2160
          minimum: 1
          type: integer
        MaxResults:
          description: <p>The maximum number of images to be returned by the API.
            </p> <note> <p>The default limit is 25 images per API response. Providing
            a <code>MaxResults</code> greater than this value will result in a page
            size of 25. Any additional results will be paginated. </p> </note>
          maximum: 100
          minimum: 1
          type: integer
        NextToken:
          description: A token that specifies where to start paginating the next set
            of Images. This is the <code>GetImages:NextToken</code> from a previously
            truncated response.
          maxLength: 4096
          minLength: 1
          pattern: "[a-zA-Z0-9+/]+={0,2}"
          type: string
      required:
      - EndTimestamp
      - Format
      - ImageSelectorType
      - StartTimestamp
      type: object
    GetMediaForFragmentList_request:
      properties:
        StreamName:
          description: The name of the stream from which to retrieve fragment media.
            Specify either this parameter or the <code>StreamARN</code> parameter.
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          type: string
        StreamARN:
          description: The Amazon Resource Name (ARN) of the stream from which to
            retrieve fragment media. Specify either this parameter or the <code>StreamName</code>
            parameter.
          maxLength: 1024
          minLength: 1
          pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          type: string
        Fragments:
          description: A list of the numbers of fragments for which to retrieve media.
            You retrieve these values with <a>ListFragments</a>.
          items:
            $ref: '#/components/schemas/FragmentNumberString'
          maxItems: 1000
          minItems: 1
          type: array
      required:
      - Fragments
      type: object
    ListFragments_request_FragmentSelector_TimestampRange:
      allOf:
      - $ref: '#/components/schemas/TimestampRange'
      - description: The range of timestamps to return.
    ListFragments_request_FragmentSelector:
      description: "<p>Describes the timestamp range and timestamp origin of a range\
        \ of fragments.</p> <p>Only fragments with a start timestamp greater than\
        \ or equal to the given start time and less than or equal to the end time\
        \ are returned. For example, if a stream contains fragments with the following\
        \ start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p>\
        \ </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p> A\
        \ fragment selector range with a start time of 00:00:01 and end time of 00:00:04\
        \ would return the fragments with start times of 00:00:02 and 00:00:04. </p>"
      properties:
        FragmentSelectorType:
          allOf:
          - $ref: '#/components/schemas/FragmentSelectorType'
          - description: The origin of the timestamps to use (Server or Producer).
        TimestampRange:
          $ref: '#/components/schemas/ListFragments_request_FragmentSelector_TimestampRange'
      type: object
    ListFragments_request:
      properties:
        StreamName:
          description: The name of the stream from which to retrieve a fragment list.
            Specify either this parameter or the <code>StreamARN</code> parameter.
          maxLength: 256
          minLength: 1
          pattern: "[a-zA-Z0-9_.-]+"
          type: string
        StreamARN:
          description: The Amazon Resource Name (ARN) of the stream from which to
            retrieve a fragment list. Specify either this parameter or the <code>StreamName</code>
            parameter.
          maxLength: 1024
          minLength: 1
          pattern: "arn:[a-z\\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+"
          type: string
        MaxResults:
          description: "The total number of fragments to return. If the total number\
            \ of fragments available is more than the value specified in <code>max-results</code>,\
            \ then a <a>ListFragmentsOutput$NextToken</a> is provided in the output\
            \ that you can use to resume pagination."
          maximum: 1000
          minimum: 1
          type: integer
        NextToken:
          description: A token to specify where to start paginating. This is the <a>ListFragmentsOutput$NextToken</a>
            from a previously truncated response.
          maxLength: 4096
          minLength: 1
          pattern: "[a-zA-Z0-9+/]+={0,2}"
          type: string
        FragmentSelector:
          $ref: '#/components/schemas/ListFragments_request_FragmentSelector'
      type: object
    GetClipInput_ClipFragmentSelector:
      allOf:
      - $ref: '#/components/schemas/ClipFragmentSelector'
      - description: The time range of the requested clip and the source of the timestamps.
    GetDASHStreamingSessionURLInput_DASHFragmentSelector:
      allOf:
      - $ref: '#/components/schemas/DASHFragmentSelector'
      - description: "<p>The time range of the requested fragment and the source of\
          \ the timestamps.</p> <p>This parameter is required if <code>PlaybackMode</code>\
          \ is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>. This parameter\
          \ is optional if PlaybackMode is<code/> <code>LIVE</code>. If <code>PlaybackMode</code>\
          \ is <code>LIVE</code>, the <code>FragmentSelectorType</code> can be set,\
          \ but the <code>TimestampRange</code> should not be set. If <code>PlaybackMode</code>\
          \ is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>, both <code>FragmentSelectorType</code>\
          \ and <code>TimestampRange</code> must be set.</p>"
    GetHLSStreamingSessionURLInput_HLSFragmentSelector:
      allOf:
      - $ref: '#/components/schemas/HLSFragmentSelector'
      - description: "<p>The time range of the requested fragment and the source of\
          \ the timestamps.</p> <p>This parameter is required if <code>PlaybackMode</code>\
          \ is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>. This parameter\
          \ is optional if PlaybackMode is<code/> <code>LIVE</code>. If <code>PlaybackMode</code>\
          \ is <code>LIVE</code>, the <code>FragmentSelectorType</code> can be set,\
          \ but the <code>TimestampRange</code> should not be set. If <code>PlaybackMode</code>\
          \ is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>, both <code>FragmentSelectorType</code>\
          \ and <code>TimestampRange</code> must be set.</p>"
    ListFragmentsInput_FragmentSelector:
      allOf:
      - $ref: '#/components/schemas/FragmentSelector'
      - description: Describes the timestamp range and timestamp origin for the range
          of fragments to return.
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4

