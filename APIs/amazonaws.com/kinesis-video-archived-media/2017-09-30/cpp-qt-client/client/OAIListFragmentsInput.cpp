/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListFragmentsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListFragmentsInput::OAIListFragmentsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListFragmentsInput::OAIListFragmentsInput() {
    this->initializeModel();
}

OAIListFragmentsInput::~OAIListFragmentsInput() {}

void OAIListFragmentsInput::initializeModel() {

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_fragment_selector_isSet = false;
    m_fragment_selector_isValid = false;
}

void OAIListFragmentsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListFragmentsInput::fromJsonObject(QJsonObject json) {

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamARN")]);
    m_stream_arn_isSet = !json[QString("StreamARN")].isNull() && m_stream_arn_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_fragment_selector_isValid = ::OpenAPI::fromJsonValue(m_fragment_selector, json[QString("FragmentSelector")]);
    m_fragment_selector_isSet = !json[QString("FragmentSelector")].isNull() && m_fragment_selector_isValid;
}

QString OAIListFragmentsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListFragmentsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamARN"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_fragment_selector.isSet()) {
        obj.insert(QString("FragmentSelector"), ::OpenAPI::toJsonValue(m_fragment_selector));
    }
    return obj;
}

QString OAIListFragmentsInput::getStreamName() const {
    return m_stream_name;
}
void OAIListFragmentsInput::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIListFragmentsInput::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIListFragmentsInput::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIListFragmentsInput::getStreamArn() const {
    return m_stream_arn;
}
void OAIListFragmentsInput::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIListFragmentsInput::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIListFragmentsInput::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

qint32 OAIListFragmentsInput::getMaxResults() const {
    return m_max_results;
}
void OAIListFragmentsInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListFragmentsInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListFragmentsInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListFragmentsInput::getNextToken() const {
    return m_next_token;
}
void OAIListFragmentsInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListFragmentsInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListFragmentsInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIListFragmentsInput_FragmentSelector OAIListFragmentsInput::getFragmentSelector() const {
    return m_fragment_selector;
}
void OAIListFragmentsInput::setFragmentSelector(const OAIListFragmentsInput_FragmentSelector &fragment_selector) {
    m_fragment_selector = fragment_selector;
    m_fragment_selector_isSet = true;
}

bool OAIListFragmentsInput::is_fragment_selector_Set() const{
    return m_fragment_selector_isSet;
}

bool OAIListFragmentsInput::is_fragment_selector_Valid() const{
    return m_fragment_selector_isValid;
}

bool OAIListFragmentsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListFragmentsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
