/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector() {
    this->initializeModel();
}

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::~OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector() {}

void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::initializeModel() {

    m_fragment_selector_type_isSet = false;
    m_fragment_selector_type_isValid = false;

    m_timestamp_range_isSet = false;
    m_timestamp_range_isValid = false;
}

void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::fromJsonObject(QJsonObject json) {

    m_fragment_selector_type_isValid = ::OpenAPI::fromJsonValue(m_fragment_selector_type, json[QString("FragmentSelectorType")]);
    m_fragment_selector_type_isSet = !json[QString("FragmentSelectorType")].isNull() && m_fragment_selector_type_isValid;

    m_timestamp_range_isValid = ::OpenAPI::fromJsonValue(m_timestamp_range, json[QString("TimestampRange")]);
    m_timestamp_range_isSet = !json[QString("TimestampRange")].isNull() && m_timestamp_range_isValid;
}

QString OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_fragment_selector_type.isSet()) {
        obj.insert(QString("FragmentSelectorType"), ::OpenAPI::toJsonValue(m_fragment_selector_type));
    }
    if (m_timestamp_range.isSet()) {
        obj.insert(QString("TimestampRange"), ::OpenAPI::toJsonValue(m_timestamp_range));
    }
    return obj;
}

OAIDASHFragmentSelectorType OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::getFragmentSelectorType() const {
    return m_fragment_selector_type;
}
void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::setFragmentSelectorType(const OAIDASHFragmentSelectorType &fragment_selector_type) {
    m_fragment_selector_type = fragment_selector_type;
    m_fragment_selector_type_isSet = true;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::is_fragment_selector_type_Set() const{
    return m_fragment_selector_type_isSet;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::is_fragment_selector_type_Valid() const{
    return m_fragment_selector_type_isValid;
}

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::getTimestampRange() const {
    return m_timestamp_range;
}
void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::setTimestampRange(const OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange &timestamp_range) {
    m_timestamp_range = timestamp_range;
    m_timestamp_range_isSet = true;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::is_timestamp_range_Set() const{
    return m_timestamp_range_isSet;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::is_timestamp_range_Valid() const{
    return m_timestamp_range_isValid;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fragment_selector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
