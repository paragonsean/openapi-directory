/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector() {
    this->initializeModel();
}

OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::~OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector() {}

void OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::initializeModel() {

    m_fragment_selector_type_isSet = false;
    m_fragment_selector_type_isValid = false;

    m_timestamp_range_isSet = false;
    m_timestamp_range_isValid = false;
}

void OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::fromJsonObject(QJsonObject json) {

    m_fragment_selector_type_isValid = ::OpenAPI::fromJsonValue(m_fragment_selector_type, json[QString("FragmentSelectorType")]);
    m_fragment_selector_type_isSet = !json[QString("FragmentSelectorType")].isNull() && m_fragment_selector_type_isValid;

    m_timestamp_range_isValid = ::OpenAPI::fromJsonValue(m_timestamp_range, json[QString("TimestampRange")]);
    m_timestamp_range_isSet = !json[QString("TimestampRange")].isNull() && m_timestamp_range_isValid;
}

QString OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::asJsonObject() const {
    QJsonObject obj;
    if (m_fragment_selector_type.isSet()) {
        obj.insert(QString("FragmentSelectorType"), ::OpenAPI::toJsonValue(m_fragment_selector_type));
    }
    if (m_timestamp_range.isSet()) {
        obj.insert(QString("TimestampRange"), ::OpenAPI::toJsonValue(m_timestamp_range));
    }
    return obj;
}

OAIHLSFragmentSelectorType OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::getFragmentSelectorType() const {
    return m_fragment_selector_type;
}
void OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::setFragmentSelectorType(const OAIHLSFragmentSelectorType &fragment_selector_type) {
    m_fragment_selector_type = fragment_selector_type;
    m_fragment_selector_type_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::is_fragment_selector_type_Set() const{
    return m_fragment_selector_type_isSet;
}

bool OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::is_fragment_selector_type_Valid() const{
    return m_fragment_selector_type_isValid;
}

OAIGetHLSStreamingSessionURL_request_HLSFragmentSelector_TimestampRange OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::getTimestampRange() const {
    return m_timestamp_range;
}
void OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::setTimestampRange(const OAIGetHLSStreamingSessionURL_request_HLSFragmentSelector_TimestampRange &timestamp_range) {
    m_timestamp_range = timestamp_range;
    m_timestamp_range_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::is_timestamp_range_Set() const{
    return m_timestamp_range_isSet;
}

bool OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::is_timestamp_range_Valid() const{
    return m_timestamp_range_isValid;
}

bool OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fragment_selector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_range.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
