/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetHLSStreamingSessionURLInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetHLSStreamingSessionURLInput::OAIGetHLSStreamingSessionURLInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetHLSStreamingSessionURLInput::OAIGetHLSStreamingSessionURLInput() {
    this->initializeModel();
}

OAIGetHLSStreamingSessionURLInput::~OAIGetHLSStreamingSessionURLInput() {}

void OAIGetHLSStreamingSessionURLInput::initializeModel() {

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_playback_mode_isSet = false;
    m_playback_mode_isValid = false;

    m_hls_fragment_selector_isSet = false;
    m_hls_fragment_selector_isValid = false;

    m_container_format_isSet = false;
    m_container_format_isValid = false;

    m_discontinuity_mode_isSet = false;
    m_discontinuity_mode_isValid = false;

    m_display_fragment_timestamp_isSet = false;
    m_display_fragment_timestamp_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_max_media_playlist_fragment_results_isSet = false;
    m_max_media_playlist_fragment_results_isValid = false;
}

void OAIGetHLSStreamingSessionURLInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetHLSStreamingSessionURLInput::fromJsonObject(QJsonObject json) {

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamARN")]);
    m_stream_arn_isSet = !json[QString("StreamARN")].isNull() && m_stream_arn_isValid;

    m_playback_mode_isValid = ::OpenAPI::fromJsonValue(m_playback_mode, json[QString("PlaybackMode")]);
    m_playback_mode_isSet = !json[QString("PlaybackMode")].isNull() && m_playback_mode_isValid;

    m_hls_fragment_selector_isValid = ::OpenAPI::fromJsonValue(m_hls_fragment_selector, json[QString("HLSFragmentSelector")]);
    m_hls_fragment_selector_isSet = !json[QString("HLSFragmentSelector")].isNull() && m_hls_fragment_selector_isValid;

    m_container_format_isValid = ::OpenAPI::fromJsonValue(m_container_format, json[QString("ContainerFormat")]);
    m_container_format_isSet = !json[QString("ContainerFormat")].isNull() && m_container_format_isValid;

    m_discontinuity_mode_isValid = ::OpenAPI::fromJsonValue(m_discontinuity_mode, json[QString("DiscontinuityMode")]);
    m_discontinuity_mode_isSet = !json[QString("DiscontinuityMode")].isNull() && m_discontinuity_mode_isValid;

    m_display_fragment_timestamp_isValid = ::OpenAPI::fromJsonValue(m_display_fragment_timestamp, json[QString("DisplayFragmentTimestamp")]);
    m_display_fragment_timestamp_isSet = !json[QString("DisplayFragmentTimestamp")].isNull() && m_display_fragment_timestamp_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("Expires")]);
    m_expires_isSet = !json[QString("Expires")].isNull() && m_expires_isValid;

    m_max_media_playlist_fragment_results_isValid = ::OpenAPI::fromJsonValue(m_max_media_playlist_fragment_results, json[QString("MaxMediaPlaylistFragmentResults")]);
    m_max_media_playlist_fragment_results_isSet = !json[QString("MaxMediaPlaylistFragmentResults")].isNull() && m_max_media_playlist_fragment_results_isValid;
}

QString OAIGetHLSStreamingSessionURLInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetHLSStreamingSessionURLInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamARN"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_playback_mode.isSet()) {
        obj.insert(QString("PlaybackMode"), ::OpenAPI::toJsonValue(m_playback_mode));
    }
    if (m_hls_fragment_selector.isSet()) {
        obj.insert(QString("HLSFragmentSelector"), ::OpenAPI::toJsonValue(m_hls_fragment_selector));
    }
    if (m_container_format.isSet()) {
        obj.insert(QString("ContainerFormat"), ::OpenAPI::toJsonValue(m_container_format));
    }
    if (m_discontinuity_mode.isSet()) {
        obj.insert(QString("DiscontinuityMode"), ::OpenAPI::toJsonValue(m_discontinuity_mode));
    }
    if (m_display_fragment_timestamp.isSet()) {
        obj.insert(QString("DisplayFragmentTimestamp"), ::OpenAPI::toJsonValue(m_display_fragment_timestamp));
    }
    if (m_expires_isSet) {
        obj.insert(QString("Expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_max_media_playlist_fragment_results_isSet) {
        obj.insert(QString("MaxMediaPlaylistFragmentResults"), ::OpenAPI::toJsonValue(m_max_media_playlist_fragment_results));
    }
    return obj;
}

QString OAIGetHLSStreamingSessionURLInput::getStreamName() const {
    return m_stream_name;
}
void OAIGetHLSStreamingSessionURLInput::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIGetHLSStreamingSessionURLInput::getStreamArn() const {
    return m_stream_arn;
}
void OAIGetHLSStreamingSessionURLInput::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

OAIHLSPlaybackMode OAIGetHLSStreamingSessionURLInput::getPlaybackMode() const {
    return m_playback_mode;
}
void OAIGetHLSStreamingSessionURLInput::setPlaybackMode(const OAIHLSPlaybackMode &playback_mode) {
    m_playback_mode = playback_mode;
    m_playback_mode_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_playback_mode_Set() const{
    return m_playback_mode_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_playback_mode_Valid() const{
    return m_playback_mode_isValid;
}

OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector OAIGetHLSStreamingSessionURLInput::getHlsFragmentSelector() const {
    return m_hls_fragment_selector;
}
void OAIGetHLSStreamingSessionURLInput::setHlsFragmentSelector(const OAIGetHLSStreamingSessionURLInput_HLSFragmentSelector &hls_fragment_selector) {
    m_hls_fragment_selector = hls_fragment_selector;
    m_hls_fragment_selector_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_hls_fragment_selector_Set() const{
    return m_hls_fragment_selector_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_hls_fragment_selector_Valid() const{
    return m_hls_fragment_selector_isValid;
}

OAIContainerFormat OAIGetHLSStreamingSessionURLInput::getContainerFormat() const {
    return m_container_format;
}
void OAIGetHLSStreamingSessionURLInput::setContainerFormat(const OAIContainerFormat &container_format) {
    m_container_format = container_format;
    m_container_format_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_container_format_Set() const{
    return m_container_format_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_container_format_Valid() const{
    return m_container_format_isValid;
}

OAIHLSDiscontinuityMode OAIGetHLSStreamingSessionURLInput::getDiscontinuityMode() const {
    return m_discontinuity_mode;
}
void OAIGetHLSStreamingSessionURLInput::setDiscontinuityMode(const OAIHLSDiscontinuityMode &discontinuity_mode) {
    m_discontinuity_mode = discontinuity_mode;
    m_discontinuity_mode_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_discontinuity_mode_Set() const{
    return m_discontinuity_mode_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_discontinuity_mode_Valid() const{
    return m_discontinuity_mode_isValid;
}

OAIHLSDisplayFragmentTimestamp OAIGetHLSStreamingSessionURLInput::getDisplayFragmentTimestamp() const {
    return m_display_fragment_timestamp;
}
void OAIGetHLSStreamingSessionURLInput::setDisplayFragmentTimestamp(const OAIHLSDisplayFragmentTimestamp &display_fragment_timestamp) {
    m_display_fragment_timestamp = display_fragment_timestamp;
    m_display_fragment_timestamp_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_display_fragment_timestamp_Set() const{
    return m_display_fragment_timestamp_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_display_fragment_timestamp_Valid() const{
    return m_display_fragment_timestamp_isValid;
}

qint32 OAIGetHLSStreamingSessionURLInput::getExpires() const {
    return m_expires;
}
void OAIGetHLSStreamingSessionURLInput::setExpires(const qint32 &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_expires_Valid() const{
    return m_expires_isValid;
}

qint32 OAIGetHLSStreamingSessionURLInput::getMaxMediaPlaylistFragmentResults() const {
    return m_max_media_playlist_fragment_results;
}
void OAIGetHLSStreamingSessionURLInput::setMaxMediaPlaylistFragmentResults(const qint32 &max_media_playlist_fragment_results) {
    m_max_media_playlist_fragment_results = max_media_playlist_fragment_results;
    m_max_media_playlist_fragment_results_isSet = true;
}

bool OAIGetHLSStreamingSessionURLInput::is_max_media_playlist_fragment_results_Set() const{
    return m_max_media_playlist_fragment_results_isSet;
}

bool OAIGetHLSStreamingSessionURLInput::is_max_media_playlist_fragment_results_Valid() const{
    return m_max_media_playlist_fragment_results_isValid;
}

bool OAIGetHLSStreamingSessionURLInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hls_fragment_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discontinuity_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_fragment_timestamp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_media_playlist_fragment_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetHLSStreamingSessionURLInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
