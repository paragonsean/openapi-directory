/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_image_content_isSet = false;
    m_image_content_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;

    m_image_content_isValid = ::OpenAPI::fromJsonValue(m_image_content, json[QString("ImageContent")]);
    m_image_content_isSet = !json[QString("ImageContent")].isNull() && m_image_content_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_image_content_isSet) {
        obj.insert(QString("ImageContent"), ::OpenAPI::toJsonValue(m_image_content));
    }
    return obj;
}

QDateTime OAIImage::getTimeStamp() const {
    return m_time_stamp;
}
void OAIImage::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIImage::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIImage::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

OAIImageError OAIImage::getError() const {
    return m_error;
}
void OAIImage::setError(const OAIImageError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIImage::is_error_Set() const{
    return m_error_isSet;
}

bool OAIImage::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIImage::getImageContent() const {
    return m_image_content;
}
void OAIImage::setImageContent(const QString &image_content) {
    m_image_content = image_content;
    m_image_content_isSet = true;
}

bool OAIImage::is_image_content_Set() const{
    return m_image_content_isSet;
}

bool OAIImage::is_image_content_Valid() const{
    return m_image_content_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
