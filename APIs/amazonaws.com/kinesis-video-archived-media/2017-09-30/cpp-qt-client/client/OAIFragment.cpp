/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFragment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFragment::OAIFragment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFragment::OAIFragment() {
    this->initializeModel();
}

OAIFragment::~OAIFragment() {}

void OAIFragment::initializeModel() {

    m_fragment_number_isSet = false;
    m_fragment_number_isValid = false;

    m_fragment_size_in_bytes_isSet = false;
    m_fragment_size_in_bytes_isValid = false;

    m_producer_timestamp_isSet = false;
    m_producer_timestamp_isValid = false;

    m_server_timestamp_isSet = false;
    m_server_timestamp_isValid = false;

    m_fragment_length_in_milliseconds_isSet = false;
    m_fragment_length_in_milliseconds_isValid = false;
}

void OAIFragment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFragment::fromJsonObject(QJsonObject json) {

    m_fragment_number_isValid = ::OpenAPI::fromJsonValue(m_fragment_number, json[QString("FragmentNumber")]);
    m_fragment_number_isSet = !json[QString("FragmentNumber")].isNull() && m_fragment_number_isValid;

    m_fragment_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_fragment_size_in_bytes, json[QString("FragmentSizeInBytes")]);
    m_fragment_size_in_bytes_isSet = !json[QString("FragmentSizeInBytes")].isNull() && m_fragment_size_in_bytes_isValid;

    m_producer_timestamp_isValid = ::OpenAPI::fromJsonValue(m_producer_timestamp, json[QString("ProducerTimestamp")]);
    m_producer_timestamp_isSet = !json[QString("ProducerTimestamp")].isNull() && m_producer_timestamp_isValid;

    m_server_timestamp_isValid = ::OpenAPI::fromJsonValue(m_server_timestamp, json[QString("ServerTimestamp")]);
    m_server_timestamp_isSet = !json[QString("ServerTimestamp")].isNull() && m_server_timestamp_isValid;

    m_fragment_length_in_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_fragment_length_in_milliseconds, json[QString("FragmentLengthInMilliseconds")]);
    m_fragment_length_in_milliseconds_isSet = !json[QString("FragmentLengthInMilliseconds")].isNull() && m_fragment_length_in_milliseconds_isValid;
}

QString OAIFragment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFragment::asJsonObject() const {
    QJsonObject obj;
    if (m_fragment_number_isSet) {
        obj.insert(QString("FragmentNumber"), ::OpenAPI::toJsonValue(m_fragment_number));
    }
    if (m_fragment_size_in_bytes_isSet) {
        obj.insert(QString("FragmentSizeInBytes"), ::OpenAPI::toJsonValue(m_fragment_size_in_bytes));
    }
    if (m_producer_timestamp_isSet) {
        obj.insert(QString("ProducerTimestamp"), ::OpenAPI::toJsonValue(m_producer_timestamp));
    }
    if (m_server_timestamp_isSet) {
        obj.insert(QString("ServerTimestamp"), ::OpenAPI::toJsonValue(m_server_timestamp));
    }
    if (m_fragment_length_in_milliseconds_isSet) {
        obj.insert(QString("FragmentLengthInMilliseconds"), ::OpenAPI::toJsonValue(m_fragment_length_in_milliseconds));
    }
    return obj;
}

QString OAIFragment::getFragmentNumber() const {
    return m_fragment_number;
}
void OAIFragment::setFragmentNumber(const QString &fragment_number) {
    m_fragment_number = fragment_number;
    m_fragment_number_isSet = true;
}

bool OAIFragment::is_fragment_number_Set() const{
    return m_fragment_number_isSet;
}

bool OAIFragment::is_fragment_number_Valid() const{
    return m_fragment_number_isValid;
}

qint32 OAIFragment::getFragmentSizeInBytes() const {
    return m_fragment_size_in_bytes;
}
void OAIFragment::setFragmentSizeInBytes(const qint32 &fragment_size_in_bytes) {
    m_fragment_size_in_bytes = fragment_size_in_bytes;
    m_fragment_size_in_bytes_isSet = true;
}

bool OAIFragment::is_fragment_size_in_bytes_Set() const{
    return m_fragment_size_in_bytes_isSet;
}

bool OAIFragment::is_fragment_size_in_bytes_Valid() const{
    return m_fragment_size_in_bytes_isValid;
}

QDateTime OAIFragment::getProducerTimestamp() const {
    return m_producer_timestamp;
}
void OAIFragment::setProducerTimestamp(const QDateTime &producer_timestamp) {
    m_producer_timestamp = producer_timestamp;
    m_producer_timestamp_isSet = true;
}

bool OAIFragment::is_producer_timestamp_Set() const{
    return m_producer_timestamp_isSet;
}

bool OAIFragment::is_producer_timestamp_Valid() const{
    return m_producer_timestamp_isValid;
}

QDateTime OAIFragment::getServerTimestamp() const {
    return m_server_timestamp;
}
void OAIFragment::setServerTimestamp(const QDateTime &server_timestamp) {
    m_server_timestamp = server_timestamp;
    m_server_timestamp_isSet = true;
}

bool OAIFragment::is_server_timestamp_Set() const{
    return m_server_timestamp_isSet;
}

bool OAIFragment::is_server_timestamp_Valid() const{
    return m_server_timestamp_isValid;
}

qint32 OAIFragment::getFragmentLengthInMilliseconds() const {
    return m_fragment_length_in_milliseconds;
}
void OAIFragment::setFragmentLengthInMilliseconds(const qint32 &fragment_length_in_milliseconds) {
    m_fragment_length_in_milliseconds = fragment_length_in_milliseconds;
    m_fragment_length_in_milliseconds_isSet = true;
}

bool OAIFragment::is_fragment_length_in_milliseconds_Set() const{
    return m_fragment_length_in_milliseconds_isSet;
}

bool OAIFragment::is_fragment_length_in_milliseconds_Valid() const{
    return m_fragment_length_in_milliseconds_isValid;
}

bool OAIFragment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fragment_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fragment_length_in_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFragment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
