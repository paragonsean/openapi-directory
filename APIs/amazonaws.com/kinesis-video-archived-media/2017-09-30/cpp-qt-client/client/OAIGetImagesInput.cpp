/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetImagesInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetImagesInput::OAIGetImagesInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetImagesInput::OAIGetImagesInput() {
    this->initializeModel();
}

OAIGetImagesInput::~OAIGetImagesInput() {}

void OAIGetImagesInput::initializeModel() {

    m_stream_name_isSet = false;
    m_stream_name_isValid = false;

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_image_selector_type_isSet = false;
    m_image_selector_type_isValid = false;

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;

    m_end_timestamp_isSet = false;
    m_end_timestamp_isValid = false;

    m_sampling_interval_isSet = false;
    m_sampling_interval_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_format_config_isSet = false;
    m_format_config_isValid = false;

    m_width_pixels_isSet = false;
    m_width_pixels_isValid = false;

    m_height_pixels_isSet = false;
    m_height_pixels_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetImagesInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetImagesInput::fromJsonObject(QJsonObject json) {

    m_stream_name_isValid = ::OpenAPI::fromJsonValue(m_stream_name, json[QString("StreamName")]);
    m_stream_name_isSet = !json[QString("StreamName")].isNull() && m_stream_name_isValid;

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamARN")]);
    m_stream_arn_isSet = !json[QString("StreamARN")].isNull() && m_stream_arn_isValid;

    m_image_selector_type_isValid = ::OpenAPI::fromJsonValue(m_image_selector_type, json[QString("ImageSelectorType")]);
    m_image_selector_type_isSet = !json[QString("ImageSelectorType")].isNull() && m_image_selector_type_isValid;

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("StartTimestamp")]);
    m_start_timestamp_isSet = !json[QString("StartTimestamp")].isNull() && m_start_timestamp_isValid;

    m_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_end_timestamp, json[QString("EndTimestamp")]);
    m_end_timestamp_isSet = !json[QString("EndTimestamp")].isNull() && m_end_timestamp_isValid;

    m_sampling_interval_isValid = ::OpenAPI::fromJsonValue(m_sampling_interval, json[QString("SamplingInterval")]);
    m_sampling_interval_isSet = !json[QString("SamplingInterval")].isNull() && m_sampling_interval_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_format_config_isValid = ::OpenAPI::fromJsonValue(m_format_config, json[QString("FormatConfig")]);
    m_format_config_isSet = !json[QString("FormatConfig")].isNull() && m_format_config_isValid;

    m_width_pixels_isValid = ::OpenAPI::fromJsonValue(m_width_pixels, json[QString("WidthPixels")]);
    m_width_pixels_isSet = !json[QString("WidthPixels")].isNull() && m_width_pixels_isValid;

    m_height_pixels_isValid = ::OpenAPI::fromJsonValue(m_height_pixels, json[QString("HeightPixels")]);
    m_height_pixels_isSet = !json[QString("HeightPixels")].isNull() && m_height_pixels_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetImagesInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetImagesInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_name_isSet) {
        obj.insert(QString("StreamName"), ::OpenAPI::toJsonValue(m_stream_name));
    }
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamARN"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_image_selector_type.isSet()) {
        obj.insert(QString("ImageSelectorType"), ::OpenAPI::toJsonValue(m_image_selector_type));
    }
    if (m_start_timestamp_isSet) {
        obj.insert(QString("StartTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    if (m_end_timestamp_isSet) {
        obj.insert(QString("EndTimestamp"), ::OpenAPI::toJsonValue(m_end_timestamp));
    }
    if (m_sampling_interval_isSet) {
        obj.insert(QString("SamplingInterval"), ::OpenAPI::toJsonValue(m_sampling_interval));
    }
    if (m_format.isSet()) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_format_config.isSet()) {
        obj.insert(QString("FormatConfig"), ::OpenAPI::toJsonValue(m_format_config));
    }
    if (m_width_pixels_isSet) {
        obj.insert(QString("WidthPixels"), ::OpenAPI::toJsonValue(m_width_pixels));
    }
    if (m_height_pixels_isSet) {
        obj.insert(QString("HeightPixels"), ::OpenAPI::toJsonValue(m_height_pixels));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIGetImagesInput::getStreamName() const {
    return m_stream_name;
}
void OAIGetImagesInput::setStreamName(const QString &stream_name) {
    m_stream_name = stream_name;
    m_stream_name_isSet = true;
}

bool OAIGetImagesInput::is_stream_name_Set() const{
    return m_stream_name_isSet;
}

bool OAIGetImagesInput::is_stream_name_Valid() const{
    return m_stream_name_isValid;
}

QString OAIGetImagesInput::getStreamArn() const {
    return m_stream_arn;
}
void OAIGetImagesInput::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIGetImagesInput::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIGetImagesInput::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

OAIImageSelectorType OAIGetImagesInput::getImageSelectorType() const {
    return m_image_selector_type;
}
void OAIGetImagesInput::setImageSelectorType(const OAIImageSelectorType &image_selector_type) {
    m_image_selector_type = image_selector_type;
    m_image_selector_type_isSet = true;
}

bool OAIGetImagesInput::is_image_selector_type_Set() const{
    return m_image_selector_type_isSet;
}

bool OAIGetImagesInput::is_image_selector_type_Valid() const{
    return m_image_selector_type_isValid;
}

QDateTime OAIGetImagesInput::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIGetImagesInput::setStartTimestamp(const QDateTime &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIGetImagesInput::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIGetImagesInput::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

QDateTime OAIGetImagesInput::getEndTimestamp() const {
    return m_end_timestamp;
}
void OAIGetImagesInput::setEndTimestamp(const QDateTime &end_timestamp) {
    m_end_timestamp = end_timestamp;
    m_end_timestamp_isSet = true;
}

bool OAIGetImagesInput::is_end_timestamp_Set() const{
    return m_end_timestamp_isSet;
}

bool OAIGetImagesInput::is_end_timestamp_Valid() const{
    return m_end_timestamp_isValid;
}

qint32 OAIGetImagesInput::getSamplingInterval() const {
    return m_sampling_interval;
}
void OAIGetImagesInput::setSamplingInterval(const qint32 &sampling_interval) {
    m_sampling_interval = sampling_interval;
    m_sampling_interval_isSet = true;
}

bool OAIGetImagesInput::is_sampling_interval_Set() const{
    return m_sampling_interval_isSet;
}

bool OAIGetImagesInput::is_sampling_interval_Valid() const{
    return m_sampling_interval_isValid;
}

OAIFormat OAIGetImagesInput::getFormat() const {
    return m_format;
}
void OAIGetImagesInput::setFormat(const OAIFormat &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGetImagesInput::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGetImagesInput::is_format_Valid() const{
    return m_format_isValid;
}

QMap OAIGetImagesInput::getFormatConfig() const {
    return m_format_config;
}
void OAIGetImagesInput::setFormatConfig(const QMap &format_config) {
    m_format_config = format_config;
    m_format_config_isSet = true;
}

bool OAIGetImagesInput::is_format_config_Set() const{
    return m_format_config_isSet;
}

bool OAIGetImagesInput::is_format_config_Valid() const{
    return m_format_config_isValid;
}

qint32 OAIGetImagesInput::getWidthPixels() const {
    return m_width_pixels;
}
void OAIGetImagesInput::setWidthPixels(const qint32 &width_pixels) {
    m_width_pixels = width_pixels;
    m_width_pixels_isSet = true;
}

bool OAIGetImagesInput::is_width_pixels_Set() const{
    return m_width_pixels_isSet;
}

bool OAIGetImagesInput::is_width_pixels_Valid() const{
    return m_width_pixels_isValid;
}

qint32 OAIGetImagesInput::getHeightPixels() const {
    return m_height_pixels;
}
void OAIGetImagesInput::setHeightPixels(const qint32 &height_pixels) {
    m_height_pixels = height_pixels;
    m_height_pixels_isSet = true;
}

bool OAIGetImagesInput::is_height_pixels_Set() const{
    return m_height_pixels_isSet;
}

bool OAIGetImagesInput::is_height_pixels_Valid() const{
    return m_height_pixels_isValid;
}

qint32 OAIGetImagesInput::getMaxResults() const {
    return m_max_results;
}
void OAIGetImagesInput::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetImagesInput::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetImagesInput::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetImagesInput::getNextToken() const {
    return m_next_token;
}
void OAIGetImagesInput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetImagesInput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetImagesInput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetImagesInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_selector_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_pixels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetImagesInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_selector_type_isValid && m_start_timestamp_isValid && m_end_timestamp_isValid && m_format_isValid && true;
}

} // namespace OpenAPI
