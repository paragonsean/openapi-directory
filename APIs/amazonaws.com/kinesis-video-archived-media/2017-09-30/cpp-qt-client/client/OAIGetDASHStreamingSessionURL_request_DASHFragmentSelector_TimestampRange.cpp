/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange() {
    this->initializeModel();
}

OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::~OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange() {}

void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::initializeModel() {

    m_start_timestamp_isSet = false;
    m_start_timestamp_isValid = false;

    m_end_timestamp_isSet = false;
    m_end_timestamp_isValid = false;
}

void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::fromJsonObject(QJsonObject json) {

    m_start_timestamp_isValid = ::OpenAPI::fromJsonValue(m_start_timestamp, json[QString("StartTimestamp")]);
    m_start_timestamp_isSet = !json[QString("StartTimestamp")].isNull() && m_start_timestamp_isValid;

    m_end_timestamp_isValid = ::OpenAPI::fromJsonValue(m_end_timestamp, json[QString("EndTimestamp")]);
    m_end_timestamp_isSet = !json[QString("EndTimestamp")].isNull() && m_end_timestamp_isValid;
}

QString OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::asJsonObject() const {
    QJsonObject obj;
    if (m_start_timestamp_isSet) {
        obj.insert(QString("StartTimestamp"), ::OpenAPI::toJsonValue(m_start_timestamp));
    }
    if (m_end_timestamp_isSet) {
        obj.insert(QString("EndTimestamp"), ::OpenAPI::toJsonValue(m_end_timestamp));
    }
    return obj;
}

QDateTime OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::getStartTimestamp() const {
    return m_start_timestamp;
}
void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::setStartTimestamp(const QDateTime &start_timestamp) {
    m_start_timestamp = start_timestamp;
    m_start_timestamp_isSet = true;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::is_start_timestamp_Set() const{
    return m_start_timestamp_isSet;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::is_start_timestamp_Valid() const{
    return m_start_timestamp_isValid;
}

QDateTime OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::getEndTimestamp() const {
    return m_end_timestamp;
}
void OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::setEndTimestamp(const QDateTime &end_timestamp) {
    m_end_timestamp = end_timestamp;
    m_end_timestamp_isSet = true;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::is_end_timestamp_Set() const{
    return m_end_timestamp_isSet;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::is_end_timestamp_Valid() const{
    return m_end_timestamp_isValid;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_start_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDASHStreamingSessionURL_request_DASHFragmentSelector_TimestampRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
