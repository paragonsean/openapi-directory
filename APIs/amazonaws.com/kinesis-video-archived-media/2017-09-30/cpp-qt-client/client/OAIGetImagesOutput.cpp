/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetImagesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetImagesOutput::OAIGetImagesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetImagesOutput::OAIGetImagesOutput() {
    this->initializeModel();
}

OAIGetImagesOutput::~OAIGetImagesOutput() {}

void OAIGetImagesOutput::initializeModel() {

    m_images_isSet = false;
    m_images_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetImagesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetImagesOutput::fromJsonObject(QJsonObject json) {

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("Images")]);
    m_images_isSet = !json[QString("Images")].isNull() && m_images_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetImagesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetImagesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_images.isSet()) {
        obj.insert(QString("Images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetImagesOutput::getImages() const {
    return m_images;
}
void OAIGetImagesOutput::setImages(const QList &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIGetImagesOutput::is_images_Set() const{
    return m_images_isSet;
}

bool OAIGetImagesOutput::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIGetImagesOutput::getNextToken() const {
    return m_next_token;
}
void OAIGetImagesOutput::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetImagesOutput::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetImagesOutput::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetImagesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetImagesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
