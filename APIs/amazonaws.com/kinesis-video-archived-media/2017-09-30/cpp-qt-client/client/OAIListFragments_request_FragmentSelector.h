/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListFragments_request_FragmentSelector.h
 *
 * &lt;p&gt;Describes the timestamp range and timestamp origin of a range of fragments.&lt;/p&gt; &lt;p&gt;Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;00:00:00&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;00:00:02&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;00:00:04&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;00:00:06&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. &lt;/p&gt;
 */

#ifndef OAIListFragments_request_FragmentSelector_H
#define OAIListFragments_request_FragmentSelector_H

#include <QJsonObject>

#include "OAIFragmentSelectorType.h"
#include "OAIListFragments_request_FragmentSelector_TimestampRange.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIListFragments_request_FragmentSelector_TimestampRange;

class OAIListFragments_request_FragmentSelector : public OAIObject {
public:
    OAIListFragments_request_FragmentSelector();
    OAIListFragments_request_FragmentSelector(QString json);
    ~OAIListFragments_request_FragmentSelector() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFragmentSelectorType getFragmentSelectorType() const;
    void setFragmentSelectorType(const OAIFragmentSelectorType &fragment_selector_type);
    bool is_fragment_selector_type_Set() const;
    bool is_fragment_selector_type_Valid() const;

    OAIListFragments_request_FragmentSelector_TimestampRange getTimestampRange() const;
    void setTimestampRange(const OAIListFragments_request_FragmentSelector_TimestampRange &timestamp_range);
    bool is_timestamp_range_Set() const;
    bool is_timestamp_range_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFragmentSelectorType m_fragment_selector_type;
    bool m_fragment_selector_type_isSet;
    bool m_fragment_selector_type_isValid;

    OAIListFragments_request_FragmentSelector_TimestampRange m_timestamp_range;
    bool m_timestamp_range_isSet;
    bool m_timestamp_range_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListFragments_request_FragmentSelector)

#endif // OAIListFragments_request_FragmentSelector_H
