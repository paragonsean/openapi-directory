/**
 * Amazon Kinesis Video Streams Archived Media
 * <p/>
 *
 * The version of the OpenAPI document: 2017-09-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetImagesInput.h
 *
 * 
 */

#ifndef OAIGetImagesInput_H
#define OAIGetImagesInput_H

#include <QJsonObject>

#include "OAIFormat.h"
#include "OAIImageSelectorType.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetImagesInput : public OAIObject {
public:
    OAIGetImagesInput();
    OAIGetImagesInput(QString json);
    ~OAIGetImagesInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStreamName() const;
    void setStreamName(const QString &stream_name);
    bool is_stream_name_Set() const;
    bool is_stream_name_Valid() const;

    QString getStreamArn() const;
    void setStreamArn(const QString &stream_arn);
    bool is_stream_arn_Set() const;
    bool is_stream_arn_Valid() const;

    OAIImageSelectorType getImageSelectorType() const;
    void setImageSelectorType(const OAIImageSelectorType &image_selector_type);
    bool is_image_selector_type_Set() const;
    bool is_image_selector_type_Valid() const;

    QDateTime getStartTimestamp() const;
    void setStartTimestamp(const QDateTime &start_timestamp);
    bool is_start_timestamp_Set() const;
    bool is_start_timestamp_Valid() const;

    QDateTime getEndTimestamp() const;
    void setEndTimestamp(const QDateTime &end_timestamp);
    bool is_end_timestamp_Set() const;
    bool is_end_timestamp_Valid() const;

    qint32 getSamplingInterval() const;
    void setSamplingInterval(const qint32 &sampling_interval);
    bool is_sampling_interval_Set() const;
    bool is_sampling_interval_Valid() const;

    OAIFormat getFormat() const;
    void setFormat(const OAIFormat &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    QMap getFormatConfig() const;
    void setFormatConfig(const QMap &format_config);
    bool is_format_config_Set() const;
    bool is_format_config_Valid() const;

    qint32 getWidthPixels() const;
    void setWidthPixels(const qint32 &width_pixels);
    bool is_width_pixels_Set() const;
    bool is_width_pixels_Valid() const;

    qint32 getHeightPixels() const;
    void setHeightPixels(const qint32 &height_pixels);
    bool is_height_pixels_Set() const;
    bool is_height_pixels_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_stream_name;
    bool m_stream_name_isSet;
    bool m_stream_name_isValid;

    QString m_stream_arn;
    bool m_stream_arn_isSet;
    bool m_stream_arn_isValid;

    OAIImageSelectorType m_image_selector_type;
    bool m_image_selector_type_isSet;
    bool m_image_selector_type_isValid;

    QDateTime m_start_timestamp;
    bool m_start_timestamp_isSet;
    bool m_start_timestamp_isValid;

    QDateTime m_end_timestamp;
    bool m_end_timestamp_isSet;
    bool m_end_timestamp_isValid;

    qint32 m_sampling_interval;
    bool m_sampling_interval_isSet;
    bool m_sampling_interval_isValid;

    OAIFormat m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    QMap m_format_config;
    bool m_format_config_isSet;
    bool m_format_config_isValid;

    qint32 m_width_pixels;
    bool m_width_pixels_isSet;
    bool m_width_pixels_isValid;

    qint32 m_height_pixels;
    bool m_height_pixels_isSet;
    bool m_height_pixels_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetImagesInput)

#endif // OAIGetImagesInput_H
