/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ReplacePermissionAssociationsWorkStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_FROM_PERMISSION_ARN = "fromPermissionArn";
  @SerializedName(SERIALIZED_NAME_FROM_PERMISSION_ARN)
  private String fromPermissionArn;

  public static final String SERIALIZED_NAME_FROM_PERMISSION_VERSION = "fromPermissionVersion";
  @SerializedName(SERIALIZED_NAME_FROM_PERMISSION_VERSION)
  private String fromPermissionVersion;

  public static final String SERIALIZED_NAME_TO_PERMISSION_ARN = "toPermissionArn";
  @SerializedName(SERIALIZED_NAME_TO_PERMISSION_ARN)
  private String toPermissionArn;

  public static final String SERIALIZED_NAME_TO_PERMISSION_VERSION = "toPermissionVersion";
  @SerializedName(SERIALIZED_NAME_TO_PERMISSION_VERSION)
  private String toPermissionVersion;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ReplacePermissionAssociationsWorkStatus status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork() {
  }

  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork fromPermissionArn(String fromPermissionArn) {
    this.fromPermissionArn = fromPermissionArn;
    return this;
  }

  /**
   * Get fromPermissionArn
   * @return fromPermissionArn
   */
  @javax.annotation.Nullable
  public String getFromPermissionArn() {
    return fromPermissionArn;
  }

  public void setFromPermissionArn(String fromPermissionArn) {
    this.fromPermissionArn = fromPermissionArn;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork fromPermissionVersion(String fromPermissionVersion) {
    this.fromPermissionVersion = fromPermissionVersion;
    return this;
  }

  /**
   * Get fromPermissionVersion
   * @return fromPermissionVersion
   */
  @javax.annotation.Nullable
  public String getFromPermissionVersion() {
    return fromPermissionVersion;
  }

  public void setFromPermissionVersion(String fromPermissionVersion) {
    this.fromPermissionVersion = fromPermissionVersion;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork toPermissionArn(String toPermissionArn) {
    this.toPermissionArn = toPermissionArn;
    return this;
  }

  /**
   * Get toPermissionArn
   * @return toPermissionArn
   */
  @javax.annotation.Nullable
  public String getToPermissionArn() {
    return toPermissionArn;
  }

  public void setToPermissionArn(String toPermissionArn) {
    this.toPermissionArn = toPermissionArn;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork toPermissionVersion(String toPermissionVersion) {
    this.toPermissionVersion = toPermissionVersion;
    return this;
  }

  /**
   * Get toPermissionVersion
   * @return toPermissionVersion
   */
  @javax.annotation.Nullable
  public String getToPermissionVersion() {
    return toPermissionVersion;
  }

  public void setToPermissionVersion(String toPermissionVersion) {
    this.toPermissionVersion = toPermissionVersion;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork status(ReplacePermissionAssociationsWorkStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ReplacePermissionAssociationsWorkStatus getStatus() {
    return status;
  }

  public void setStatus(ReplacePermissionAssociationsWorkStatus status) {
    this.status = status;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Get statusMessage
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork replacePermissionAssociationsResponseReplacePermissionAssociationsWork = (ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork) o;
    return Objects.equals(this.id, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.id) &&
        Objects.equals(this.fromPermissionArn, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.fromPermissionArn) &&
        Objects.equals(this.fromPermissionVersion, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.fromPermissionVersion) &&
        Objects.equals(this.toPermissionArn, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.toPermissionArn) &&
        Objects.equals(this.toPermissionVersion, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.toPermissionVersion) &&
        Objects.equals(this.status, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.status) &&
        Objects.equals(this.statusMessage, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.statusMessage) &&
        Objects.equals(this.creationTime, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.creationTime) &&
        Objects.equals(this.lastUpdatedTime, replacePermissionAssociationsResponseReplacePermissionAssociationsWork.lastUpdatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fromPermissionArn, fromPermissionVersion, toPermissionArn, toPermissionVersion, status, statusMessage, creationTime, lastUpdatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fromPermissionArn: ").append(toIndentedString(fromPermissionArn)).append("\n");
    sb.append("    fromPermissionVersion: ").append(toIndentedString(fromPermissionVersion)).append("\n");
    sb.append("    toPermissionArn: ").append(toIndentedString(toPermissionArn)).append("\n");
    sb.append("    toPermissionVersion: ").append(toIndentedString(toPermissionVersion)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("fromPermissionArn");
    openapiFields.add("fromPermissionVersion");
    openapiFields.add("toPermissionArn");
    openapiFields.add("toPermissionVersion");
    openapiFields.add("status");
    openapiFields.add("statusMessage");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdatedTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork is not found in the empty JSON string", ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `fromPermissionArn`
      if (jsonObj.get("fromPermissionArn") != null && !jsonObj.get("fromPermissionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fromPermissionArn"));
      }
      // validate the optional field `fromPermissionVersion`
      if (jsonObj.get("fromPermissionVersion") != null && !jsonObj.get("fromPermissionVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fromPermissionVersion"));
      }
      // validate the optional field `toPermissionArn`
      if (jsonObj.get("toPermissionArn") != null && !jsonObj.get("toPermissionArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("toPermissionArn"));
      }
      // validate the optional field `toPermissionVersion`
      if (jsonObj.get("toPermissionVersion") != null && !jsonObj.get("toPermissionVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("toPermissionVersion"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ReplacePermissionAssociationsWorkStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `statusMessage`
      if (jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusMessage"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdatedTime`
      if (jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork>() {
           @Override
           public void write(JsonWriter out, ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork
   * @throws IOException if the JSON string is invalid with respect to ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork
   */
  public static ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork.class);
  }

  /**
   * Convert an instance of ReplacePermissionAssociationsResponseReplacePermissionAssociationsWork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

