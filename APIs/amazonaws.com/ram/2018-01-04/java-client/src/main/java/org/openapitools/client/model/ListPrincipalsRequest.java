/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPrincipalsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPrincipalsRequest {
  /**
   * &lt;p&gt;Specifies that you want to list information for only resource shares that match the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;SELF&lt;/code&gt; &lt;/b&gt; – principals that your account is sharing resources with&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;OTHER-ACCOUNTS&lt;/code&gt; &lt;/b&gt; – principals that are sharing resources with your account&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ResourceOwnerEnum.Adapter.class)
  public enum ResourceOwnerEnum {
    SELF("SELF"),
    
    OTHER_ACCOUNTS("OTHER-ACCOUNTS");

    private String value;

    ResourceOwnerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceOwnerEnum fromValue(String value) {
      for (ResourceOwnerEnum b : ResourceOwnerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceOwnerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceOwnerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceOwnerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceOwnerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceOwnerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_OWNER = "resourceOwner";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER)
  private ResourceOwnerEnum resourceOwner;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "resourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_PRINCIPALS = "principals";
  @SerializedName(SERIALIZED_NAME_PRINCIPALS)
  private List<String> principals = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_RESOURCE_SHARE_ARNS = "resourceShareArns";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SHARE_ARNS)
  private List<String> resourceShareArns = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListPrincipalsRequest() {
  }

  public ListPrincipalsRequest resourceOwner(ResourceOwnerEnum resourceOwner) {
    this.resourceOwner = resourceOwner;
    return this;
  }

  /**
   * &lt;p&gt;Specifies that you want to list information for only resource shares that match the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;SELF&lt;/code&gt; &lt;/b&gt; – principals that your account is sharing resources with&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt; &lt;code&gt;OTHER-ACCOUNTS&lt;/code&gt; &lt;/b&gt; – principals that are sharing resources with your account&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return resourceOwner
   */
  @javax.annotation.Nonnull
  public ResourceOwnerEnum getResourceOwner() {
    return resourceOwner;
  }

  public void setResourceOwner(ResourceOwnerEnum resourceOwner) {
    this.resourceOwner = resourceOwner;
  }


  public ListPrincipalsRequest resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Specifies that you want to list principal information for the resource share with the specified &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt;.
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public ListPrincipalsRequest principals(List<String> principals) {
    this.principals = principals;
    return this;
  }

  public ListPrincipalsRequest addPrincipalsItem(String principalsItem) {
    if (this.principals == null) {
      this.principals = new ArrayList<>();
    }
    this.principals.add(principalsItem);
    return this;
  }

  /**
   * &lt;p&gt;Specifies that you want to list information for only the listed principals.&lt;/p&gt; &lt;p&gt;You can include the following values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An Amazon Web Services account ID, for example: &lt;code&gt;123456789012&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt; of an organization in Organizations, for example: &lt;code&gt;organizations::123456789012:organization/o-exampleorgid&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An ARN of an organizational unit (OU) in Organizations, for example: &lt;code&gt;organizations::123456789012:ou/o-exampleorgid/ou-examplerootid-exampleouid123&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An ARN of an IAM role, for example: &lt;code&gt;iam::123456789012:role/rolename&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An ARN of an IAM user, for example: &lt;code&gt;iam::123456789012user/username&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;Not all resource types can be shared with IAM roles and users. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ram/latest/userguide/permissions.html#permissions-rbp-supported-resource-types\&quot;&gt;Sharing with IAM roles and users&lt;/a&gt; in the &lt;i&gt;Resource Access Manager User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt;
   * @return principals
   */
  @javax.annotation.Nullable
  public List<String> getPrincipals() {
    return principals;
  }

  public void setPrincipals(List<String> principals) {
    this.principals = principals;
  }


  public ListPrincipalsRequest resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * &lt;p&gt;Specifies that you want to list information for only principals associated with resource shares that include the specified resource type.&lt;/p&gt; &lt;p&gt;For a list of valid values, query the &lt;a&gt;ListResourceTypes&lt;/a&gt; operation.&lt;/p&gt;
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public ListPrincipalsRequest resourceShareArns(List<String> resourceShareArns) {
    this.resourceShareArns = resourceShareArns;
    return this;
  }

  public ListPrincipalsRequest addResourceShareArnsItem(String resourceShareArnsItem) {
    if (this.resourceShareArns == null) {
      this.resourceShareArns = new ArrayList<>();
    }
    this.resourceShareArns.add(resourceShareArnsItem);
    return this;
  }

  /**
   * Specifies that you want to list information for only principals associated with the resource shares specified by a list the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Names (ARNs)&lt;/a&gt;.
   * @return resourceShareArns
   */
  @javax.annotation.Nullable
  public List<String> getResourceShareArns() {
    return resourceShareArns;
  }

  public void setResourceShareArns(List<String> resourceShareArns) {
    this.resourceShareArns = resourceShareArns;
  }


  public ListPrincipalsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Specifies that you want to receive the next page of results. Valid only if you received a &lt;code&gt;NextToken&lt;/code&gt; response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call&#39;s &lt;code&gt;NextToken&lt;/code&gt; response to request the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListPrincipalsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the &lt;code&gt;NextToken&lt;/code&gt; response element is returned with a value (not null). Include the specified value as the &lt;code&gt;NextToken&lt;/code&gt; request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check &lt;code&gt;NextToken&lt;/code&gt; after every operation to ensure that you receive all of the results.
   * minimum: 1
   * maximum: 500
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPrincipalsRequest listPrincipalsRequest = (ListPrincipalsRequest) o;
    return Objects.equals(this.resourceOwner, listPrincipalsRequest.resourceOwner) &&
        Objects.equals(this.resourceArn, listPrincipalsRequest.resourceArn) &&
        Objects.equals(this.principals, listPrincipalsRequest.principals) &&
        Objects.equals(this.resourceType, listPrincipalsRequest.resourceType) &&
        Objects.equals(this.resourceShareArns, listPrincipalsRequest.resourceShareArns) &&
        Objects.equals(this.nextToken, listPrincipalsRequest.nextToken) &&
        Objects.equals(this.maxResults, listPrincipalsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceOwner, resourceArn, principals, resourceType, resourceShareArns, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPrincipalsRequest {\n");
    sb.append("    resourceOwner: ").append(toIndentedString(resourceOwner)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    principals: ").append(toIndentedString(principals)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resourceShareArns: ").append(toIndentedString(resourceShareArns)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceOwner");
    openapiFields.add("resourceArn");
    openapiFields.add("principals");
    openapiFields.add("resourceType");
    openapiFields.add("resourceShareArns");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceOwner");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPrincipalsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPrincipalsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPrincipalsRequest is not found in the empty JSON string", ListPrincipalsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPrincipalsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPrincipalsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListPrincipalsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("resourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwner").toString()));
      }
      // validate the required field `resourceOwner`
      ResourceOwnerEnum.validateJsonElement(jsonObj.get("resourceOwner"));
      if ((jsonObj.get("resourceArn") != null && !jsonObj.get("resourceArn").isJsonNull()) && !jsonObj.get("resourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceArn").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("principals") != null && !jsonObj.get("principals").isJsonNull() && !jsonObj.get("principals").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `principals` to be an array in the JSON string but got `%s`", jsonObj.get("principals").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceShareArns") != null && !jsonObj.get("resourceShareArns").isJsonNull() && !jsonObj.get("resourceShareArns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceShareArns` to be an array in the JSON string but got `%s`", jsonObj.get("resourceShareArns").toString()));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPrincipalsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPrincipalsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPrincipalsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPrincipalsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPrincipalsRequest>() {
           @Override
           public void write(JsonWriter out, ListPrincipalsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPrincipalsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPrincipalsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPrincipalsRequest
   * @throws IOException if the JSON string is invalid with respect to ListPrincipalsRequest
   */
  public static ListPrincipalsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPrincipalsRequest.class);
  }

  /**
   * Convert an instance of ListPrincipalsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

