/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPermissionAssociationsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPermissionAssociationsRequest {
  public static final String SERIALIZED_NAME_PERMISSION_ARN = "permissionArn";
  @SerializedName(SERIALIZED_NAME_PERMISSION_ARN)
  private String permissionArn;

  public static final String SERIALIZED_NAME_PERMISSION_VERSION = "permissionVersion";
  @SerializedName(SERIALIZED_NAME_PERMISSION_VERSION)
  private Integer permissionVersion;

  /**
   * Specifies that you want to list only those associations with resource shares that match this status.
   */
  @JsonAdapter(AssociationStatusEnum.Adapter.class)
  public enum AssociationStatusEnum {
    ASSOCIATING("ASSOCIATING"),
    
    ASSOCIATED("ASSOCIATED"),
    
    FAILED("FAILED"),
    
    DISASSOCIATING("DISASSOCIATING"),
    
    DISASSOCIATED("DISASSOCIATED");

    private String value;

    AssociationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssociationStatusEnum fromValue(String value) {
      for (AssociationStatusEnum b : AssociationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssociationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssociationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssociationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssociationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssociationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSOCIATION_STATUS = "associationStatus";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_STATUS)
  private AssociationStatusEnum associationStatus;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  /**
   * Specifies that you want to list only those associations with resource shares that have a &lt;code&gt;featureSet&lt;/code&gt; with this value.
   */
  @JsonAdapter(FeatureSetEnum.Adapter.class)
  public enum FeatureSetEnum {
    CREATED_FROM_POLICY("CREATED_FROM_POLICY"),
    
    PROMOTING_TO_STANDARD("PROMOTING_TO_STANDARD"),
    
    STANDARD("STANDARD");

    private String value;

    FeatureSetEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeatureSetEnum fromValue(String value) {
      for (FeatureSetEnum b : FeatureSetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeatureSetEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeatureSetEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeatureSetEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeatureSetEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeatureSetEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEATURE_SET = "featureSet";
  @SerializedName(SERIALIZED_NAME_FEATURE_SET)
  private FeatureSetEnum featureSet;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION = "defaultVersion";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION)
  private Boolean defaultVersion;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "nextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "maxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListPermissionAssociationsRequest() {
  }

  public ListPermissionAssociationsRequest permissionArn(String permissionArn) {
    this.permissionArn = permissionArn;
    return this;
  }

  /**
   * Specifies the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt; of the managed permission.
   * @return permissionArn
   */
  @javax.annotation.Nullable
  public String getPermissionArn() {
    return permissionArn;
  }

  public void setPermissionArn(String permissionArn) {
    this.permissionArn = permissionArn;
  }


  public ListPermissionAssociationsRequest permissionVersion(Integer permissionVersion) {
    this.permissionVersion = permissionVersion;
    return this;
  }

  /**
   * Specifies that you want to list only those associations with resource shares that use this version of the managed permission. If you don&#39;t provide a value for this parameter, then the operation returns information about associations with resource shares that use any version of the managed permission.
   * @return permissionVersion
   */
  @javax.annotation.Nullable
  public Integer getPermissionVersion() {
    return permissionVersion;
  }

  public void setPermissionVersion(Integer permissionVersion) {
    this.permissionVersion = permissionVersion;
  }


  public ListPermissionAssociationsRequest associationStatus(AssociationStatusEnum associationStatus) {
    this.associationStatus = associationStatus;
    return this;
  }

  /**
   * Specifies that you want to list only those associations with resource shares that match this status.
   * @return associationStatus
   */
  @javax.annotation.Nullable
  public AssociationStatusEnum getAssociationStatus() {
    return associationStatus;
  }

  public void setAssociationStatus(AssociationStatusEnum associationStatus) {
    this.associationStatus = associationStatus;
  }


  public ListPermissionAssociationsRequest resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Specifies that you want to list only those associations with resource shares that include at least one resource of this resource type.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public ListPermissionAssociationsRequest featureSet(FeatureSetEnum featureSet) {
    this.featureSet = featureSet;
    return this;
  }

  /**
   * Specifies that you want to list only those associations with resource shares that have a &lt;code&gt;featureSet&lt;/code&gt; with this value.
   * @return featureSet
   */
  @javax.annotation.Nullable
  public FeatureSetEnum getFeatureSet() {
    return featureSet;
  }

  public void setFeatureSet(FeatureSetEnum featureSet) {
    this.featureSet = featureSet;
  }


  public ListPermissionAssociationsRequest defaultVersion(Boolean defaultVersion) {
    this.defaultVersion = defaultVersion;
    return this;
  }

  /**
   * &lt;p&gt;When &lt;code&gt;true&lt;/code&gt;, specifies that you want to list only those associations with resource shares that use the default version of the specified managed permission.&lt;/p&gt; &lt;p&gt;When &lt;code&gt;false&lt;/code&gt; (the default value), lists associations with resource shares that use any version of the specified managed permission.&lt;/p&gt;
   * @return defaultVersion
   */
  @javax.annotation.Nullable
  public Boolean getDefaultVersion() {
    return defaultVersion;
  }

  public void setDefaultVersion(Boolean defaultVersion) {
    this.defaultVersion = defaultVersion;
  }


  public ListPermissionAssociationsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Specifies that you want to receive the next page of results. Valid only if you received a &lt;code&gt;NextToken&lt;/code&gt; response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call&#39;s &lt;code&gt;NextToken&lt;/code&gt; response to request the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListPermissionAssociationsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the &lt;code&gt;NextToken&lt;/code&gt; response element is returned with a value (not null). Include the specified value as the &lt;code&gt;NextToken&lt;/code&gt; request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check &lt;code&gt;NextToken&lt;/code&gt; after every operation to ensure that you receive all of the results.
   * minimum: 1
   * maximum: 500
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPermissionAssociationsRequest listPermissionAssociationsRequest = (ListPermissionAssociationsRequest) o;
    return Objects.equals(this.permissionArn, listPermissionAssociationsRequest.permissionArn) &&
        Objects.equals(this.permissionVersion, listPermissionAssociationsRequest.permissionVersion) &&
        Objects.equals(this.associationStatus, listPermissionAssociationsRequest.associationStatus) &&
        Objects.equals(this.resourceType, listPermissionAssociationsRequest.resourceType) &&
        Objects.equals(this.featureSet, listPermissionAssociationsRequest.featureSet) &&
        Objects.equals(this.defaultVersion, listPermissionAssociationsRequest.defaultVersion) &&
        Objects.equals(this.nextToken, listPermissionAssociationsRequest.nextToken) &&
        Objects.equals(this.maxResults, listPermissionAssociationsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissionArn, permissionVersion, associationStatus, resourceType, featureSet, defaultVersion, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPermissionAssociationsRequest {\n");
    sb.append("    permissionArn: ").append(toIndentedString(permissionArn)).append("\n");
    sb.append("    permissionVersion: ").append(toIndentedString(permissionVersion)).append("\n");
    sb.append("    associationStatus: ").append(toIndentedString(associationStatus)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    featureSet: ").append(toIndentedString(featureSet)).append("\n");
    sb.append("    defaultVersion: ").append(toIndentedString(defaultVersion)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permissionArn");
    openapiFields.add("permissionVersion");
    openapiFields.add("associationStatus");
    openapiFields.add("resourceType");
    openapiFields.add("featureSet");
    openapiFields.add("defaultVersion");
    openapiFields.add("nextToken");
    openapiFields.add("maxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPermissionAssociationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPermissionAssociationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPermissionAssociationsRequest is not found in the empty JSON string", ListPermissionAssociationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPermissionAssociationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPermissionAssociationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("permissionArn") != null && !jsonObj.get("permissionArn").isJsonNull()) && !jsonObj.get("permissionArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionArn").toString()));
      }
      if ((jsonObj.get("associationStatus") != null && !jsonObj.get("associationStatus").isJsonNull()) && !jsonObj.get("associationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associationStatus").toString()));
      }
      // validate the optional field `associationStatus`
      if (jsonObj.get("associationStatus") != null && !jsonObj.get("associationStatus").isJsonNull()) {
        AssociationStatusEnum.validateJsonElement(jsonObj.get("associationStatus"));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("featureSet") != null && !jsonObj.get("featureSet").isJsonNull()) && !jsonObj.get("featureSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `featureSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("featureSet").toString()));
      }
      // validate the optional field `featureSet`
      if (jsonObj.get("featureSet") != null && !jsonObj.get("featureSet").isJsonNull()) {
        FeatureSetEnum.validateJsonElement(jsonObj.get("featureSet"));
      }
      if ((jsonObj.get("nextToken") != null && !jsonObj.get("nextToken").isJsonNull()) && !jsonObj.get("nextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPermissionAssociationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPermissionAssociationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPermissionAssociationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPermissionAssociationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPermissionAssociationsRequest>() {
           @Override
           public void write(JsonWriter out, ListPermissionAssociationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPermissionAssociationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPermissionAssociationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPermissionAssociationsRequest
   * @throws IOException if the JSON string is invalid with respect to ListPermissionAssociationsRequest
   */
  public static ListPermissionAssociationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPermissionAssociationsRequest.class);
  }

  /**
   * Convert an instance of ListPermissionAssociationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

