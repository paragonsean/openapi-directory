/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PermissionFeatureSet;
import org.openapitools.client.model.PermissionStatus;
import org.openapitools.client.model.PermissionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a RAM managed permission.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceSharePermissionDetail {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION = "defaultVersion";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION)
  private Boolean defaultVersion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private String permission;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_IS_RESOURCE_TYPE_DEFAULT = "isResourceTypeDefault";
  @SerializedName(SERIALIZED_NAME_IS_RESOURCE_TYPE_DEFAULT)
  private Boolean isResourceTypeDefault;

  public static final String SERIALIZED_NAME_PERMISSION_TYPE = "permissionType";
  @SerializedName(SERIALIZED_NAME_PERMISSION_TYPE)
  private PermissionType permissionType;

  public static final String SERIALIZED_NAME_FEATURE_SET = "featureSet";
  @SerializedName(SERIALIZED_NAME_FEATURE_SET)
  private PermissionFeatureSet featureSet;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PermissionStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public ResourceSharePermissionDetail() {
  }

  public ResourceSharePermissionDetail arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ResourceSharePermissionDetail version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public ResourceSharePermissionDetail defaultVersion(Boolean defaultVersion) {
    this.defaultVersion = defaultVersion;
    return this;
  }

  /**
   * Get defaultVersion
   * @return defaultVersion
   */
  @javax.annotation.Nullable
  public Boolean getDefaultVersion() {
    return defaultVersion;
  }

  public void setDefaultVersion(Boolean defaultVersion) {
    this.defaultVersion = defaultVersion;
  }


  public ResourceSharePermissionDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ResourceSharePermissionDetail resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public ResourceSharePermissionDetail permission(String permission) {
    this.permission = permission;
    return this;
  }

  /**
   * Get permission
   * @return permission
   */
  @javax.annotation.Nullable
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }


  public ResourceSharePermissionDetail creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public ResourceSharePermissionDetail lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public ResourceSharePermissionDetail isResourceTypeDefault(Boolean isResourceTypeDefault) {
    this.isResourceTypeDefault = isResourceTypeDefault;
    return this;
  }

  /**
   * Get isResourceTypeDefault
   * @return isResourceTypeDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsResourceTypeDefault() {
    return isResourceTypeDefault;
  }

  public void setIsResourceTypeDefault(Boolean isResourceTypeDefault) {
    this.isResourceTypeDefault = isResourceTypeDefault;
  }


  public ResourceSharePermissionDetail permissionType(PermissionType permissionType) {
    this.permissionType = permissionType;
    return this;
  }

  /**
   * Get permissionType
   * @return permissionType
   */
  @javax.annotation.Nullable
  public PermissionType getPermissionType() {
    return permissionType;
  }

  public void setPermissionType(PermissionType permissionType) {
    this.permissionType = permissionType;
  }


  public ResourceSharePermissionDetail featureSet(PermissionFeatureSet featureSet) {
    this.featureSet = featureSet;
    return this;
  }

  /**
   * Get featureSet
   * @return featureSet
   */
  @javax.annotation.Nullable
  public PermissionFeatureSet getFeatureSet() {
    return featureSet;
  }

  public void setFeatureSet(PermissionFeatureSet featureSet) {
    this.featureSet = featureSet;
  }


  public ResourceSharePermissionDetail status(PermissionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public PermissionStatus getStatus() {
    return status;
  }

  public void setStatus(PermissionStatus status) {
    this.status = status;
  }


  public ResourceSharePermissionDetail tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceSharePermissionDetail resourceSharePermissionDetail = (ResourceSharePermissionDetail) o;
    return Objects.equals(this.arn, resourceSharePermissionDetail.arn) &&
        Objects.equals(this.version, resourceSharePermissionDetail.version) &&
        Objects.equals(this.defaultVersion, resourceSharePermissionDetail.defaultVersion) &&
        Objects.equals(this.name, resourceSharePermissionDetail.name) &&
        Objects.equals(this.resourceType, resourceSharePermissionDetail.resourceType) &&
        Objects.equals(this.permission, resourceSharePermissionDetail.permission) &&
        Objects.equals(this.creationTime, resourceSharePermissionDetail.creationTime) &&
        Objects.equals(this.lastUpdatedTime, resourceSharePermissionDetail.lastUpdatedTime) &&
        Objects.equals(this.isResourceTypeDefault, resourceSharePermissionDetail.isResourceTypeDefault) &&
        Objects.equals(this.permissionType, resourceSharePermissionDetail.permissionType) &&
        Objects.equals(this.featureSet, resourceSharePermissionDetail.featureSet) &&
        Objects.equals(this.status, resourceSharePermissionDetail.status) &&
        Objects.equals(this.tags, resourceSharePermissionDetail.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, version, defaultVersion, name, resourceType, permission, creationTime, lastUpdatedTime, isResourceTypeDefault, permissionType, featureSet, status, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceSharePermissionDetail {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    defaultVersion: ").append(toIndentedString(defaultVersion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    isResourceTypeDefault: ").append(toIndentedString(isResourceTypeDefault)).append("\n");
    sb.append("    permissionType: ").append(toIndentedString(permissionType)).append("\n");
    sb.append("    featureSet: ").append(toIndentedString(featureSet)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("version");
    openapiFields.add("defaultVersion");
    openapiFields.add("name");
    openapiFields.add("resourceType");
    openapiFields.add("permission");
    openapiFields.add("creationTime");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("isResourceTypeDefault");
    openapiFields.add("permissionType");
    openapiFields.add("featureSet");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceSharePermissionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceSharePermissionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceSharePermissionDetail is not found in the empty JSON string", ResourceSharePermissionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceSharePermissionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceSharePermissionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("version"));
      }
      // validate the optional field `defaultVersion`
      if (jsonObj.get("defaultVersion") != null && !jsonObj.get("defaultVersion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("defaultVersion"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `permission`
      if (jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("permission"));
      }
      // validate the optional field `creationTime`
      if (jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("creationTime"));
      }
      // validate the optional field `lastUpdatedTime`
      if (jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      }
      // validate the optional field `isResourceTypeDefault`
      if (jsonObj.get("isResourceTypeDefault") != null && !jsonObj.get("isResourceTypeDefault").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isResourceTypeDefault"));
      }
      // validate the optional field `permissionType`
      if (jsonObj.get("permissionType") != null && !jsonObj.get("permissionType").isJsonNull()) {
        PermissionType.validateJsonElement(jsonObj.get("permissionType"));
      }
      // validate the optional field `featureSet`
      if (jsonObj.get("featureSet") != null && !jsonObj.get("featureSet").isJsonNull()) {
        PermissionFeatureSet.validateJsonElement(jsonObj.get("featureSet"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        PermissionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceSharePermissionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceSharePermissionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceSharePermissionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceSharePermissionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceSharePermissionDetail>() {
           @Override
           public void write(JsonWriter out, ResourceSharePermissionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceSharePermissionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceSharePermissionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceSharePermissionDetail
   * @throws IOException if the JSON string is invalid with respect to ResourceSharePermissionDetail
   */
  public static ResourceSharePermissionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceSharePermissionDetail.class);
  }

  /**
   * Convert an instance of ResourceSharePermissionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

