/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateResourceSharePermissionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateResourceSharePermissionRequest {
  public static final String SERIALIZED_NAME_RESOURCE_SHARE_ARN = "resourceShareArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SHARE_ARN)
  private String resourceShareArn;

  public static final String SERIALIZED_NAME_PERMISSION_ARN = "permissionArn";
  @SerializedName(SERIALIZED_NAME_PERMISSION_ARN)
  private String permissionArn;

  public static final String SERIALIZED_NAME_REPLACE = "replace";
  @SerializedName(SERIALIZED_NAME_REPLACE)
  private Boolean replace;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_PERMISSION_VERSION = "permissionVersion";
  @SerializedName(SERIALIZED_NAME_PERMISSION_VERSION)
  private Integer permissionVersion;

  public AssociateResourceSharePermissionRequest() {
  }

  public AssociateResourceSharePermissionRequest resourceShareArn(String resourceShareArn) {
    this.resourceShareArn = resourceShareArn;
    return this;
  }

  /**
   * Specifies the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt; of the resource share to which you want to add or replace permissions.
   * @return resourceShareArn
   */
  @javax.annotation.Nonnull
  public String getResourceShareArn() {
    return resourceShareArn;
  }

  public void setResourceShareArn(String resourceShareArn) {
    this.resourceShareArn = resourceShareArn;
  }


  public AssociateResourceSharePermissionRequest permissionArn(String permissionArn) {
    this.permissionArn = permissionArn;
    return this;
  }

  /**
   * Specifies the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt; of the RAM permission to associate with the resource share. To find the ARN for a permission, use either the &lt;a&gt;ListPermissions&lt;/a&gt; operation or go to the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/ram/home#Permissions:\&quot;&gt;Permissions library&lt;/a&gt; page in the RAM console and then choose the name of the permission. The ARN is displayed on the detail page.
   * @return permissionArn
   */
  @javax.annotation.Nonnull
  public String getPermissionArn() {
    return permissionArn;
  }

  public void setPermissionArn(String permissionArn) {
    this.permissionArn = permissionArn;
  }


  public AssociateResourceSharePermissionRequest replace(Boolean replace) {
    this.replace = replace;
    return this;
  }

  /**
   * &lt;p&gt;Specifies whether the specified permission should replace the existing permission associated with the resource share. Use &lt;code&gt;true&lt;/code&gt; to replace the current permissions. Use &lt;code&gt;false&lt;/code&gt; to add the permission to a resource share that currently doesn&#39;t have a permission. The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;A resource share can have only one permission per resource type. If a resource share already has a permission for the specified resource type and you don&#39;t set &lt;code&gt;replace&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; then the operation returns an error. This helps prevent accidental overwriting of a permission.&lt;/p&gt; &lt;/note&gt;
   * @return replace
   */
  @javax.annotation.Nullable
  public Boolean getReplace() {
    return replace;
  }

  public void setReplace(Boolean replace) {
    this.replace = replace;
  }


  public AssociateResourceSharePermissionRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * &lt;p&gt;Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a &lt;a href&#x3D;\&quot;https://wikipedia.org/wiki/Universally_unique_identifier\&quot;&gt;UUID type of value.&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you don&#39;t provide this value, then Amazon Web Services generates a random one for you.&lt;/p&gt; &lt;p&gt;If you retry the operation with the same &lt;code&gt;ClientToken&lt;/code&gt;, but with different parameters, the retry fails with an &lt;code&gt;IdempotentParameterMismatch&lt;/code&gt; error.&lt;/p&gt;
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public AssociateResourceSharePermissionRequest permissionVersion(Integer permissionVersion) {
    this.permissionVersion = permissionVersion;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the version of the RAM permission to associate with the resource share. You can specify &lt;i&gt;only&lt;/i&gt; the version that is currently set as the default version for the permission. If you also set the &lt;code&gt;replace&lt;/code&gt; pararameter to &lt;code&gt;true&lt;/code&gt;, then this operation updates an outdated version of the permission to the current default version.&lt;/p&gt; &lt;note&gt; &lt;p&gt;You don&#39;t need to specify this parameter because the default behavior is to use the version that is currently set as the default version for the permission. This parameter is supported for backwards compatibility.&lt;/p&gt; &lt;/note&gt;
   * @return permissionVersion
   */
  @javax.annotation.Nullable
  public Integer getPermissionVersion() {
    return permissionVersion;
  }

  public void setPermissionVersion(Integer permissionVersion) {
    this.permissionVersion = permissionVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateResourceSharePermissionRequest associateResourceSharePermissionRequest = (AssociateResourceSharePermissionRequest) o;
    return Objects.equals(this.resourceShareArn, associateResourceSharePermissionRequest.resourceShareArn) &&
        Objects.equals(this.permissionArn, associateResourceSharePermissionRequest.permissionArn) &&
        Objects.equals(this.replace, associateResourceSharePermissionRequest.replace) &&
        Objects.equals(this.clientToken, associateResourceSharePermissionRequest.clientToken) &&
        Objects.equals(this.permissionVersion, associateResourceSharePermissionRequest.permissionVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceShareArn, permissionArn, replace, clientToken, permissionVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateResourceSharePermissionRequest {\n");
    sb.append("    resourceShareArn: ").append(toIndentedString(resourceShareArn)).append("\n");
    sb.append("    permissionArn: ").append(toIndentedString(permissionArn)).append("\n");
    sb.append("    replace: ").append(toIndentedString(replace)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    permissionVersion: ").append(toIndentedString(permissionVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceShareArn");
    openapiFields.add("permissionArn");
    openapiFields.add("replace");
    openapiFields.add("clientToken");
    openapiFields.add("permissionVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceShareArn");
    openapiRequiredFields.add("permissionArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateResourceSharePermissionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateResourceSharePermissionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateResourceSharePermissionRequest is not found in the empty JSON string", AssociateResourceSharePermissionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateResourceSharePermissionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateResourceSharePermissionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateResourceSharePermissionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("resourceShareArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceShareArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceShareArn").toString()));
      }
      if (!jsonObj.get("permissionArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionArn").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateResourceSharePermissionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateResourceSharePermissionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateResourceSharePermissionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateResourceSharePermissionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateResourceSharePermissionRequest>() {
           @Override
           public void write(JsonWriter out, AssociateResourceSharePermissionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateResourceSharePermissionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateResourceSharePermissionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateResourceSharePermissionRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateResourceSharePermissionRequest
   */
  public static AssociateResourceSharePermissionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateResourceSharePermissionRequest.class);
  }

  /**
   * Convert an instance of AssociateResourceSharePermissionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

