/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PermissionFeatureSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that describes a managed permission associated with a resource share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociatedPermission {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_PERMISSION_VERSION = "permissionVersion";
  @SerializedName(SERIALIZED_NAME_PERMISSION_VERSION)
  private String permissionVersion;

  public static final String SERIALIZED_NAME_DEFAULT_VERSION = "defaultVersion";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VERSION)
  private Boolean defaultVersion;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_FEATURE_SET = "featureSet";
  @SerializedName(SERIALIZED_NAME_FEATURE_SET)
  private PermissionFeatureSet featureSet;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_RESOURCE_SHARE_ARN = "resourceShareArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SHARE_ARN)
  private String resourceShareArn;

  public AssociatedPermission() {
  }

  public AssociatedPermission arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public AssociatedPermission permissionVersion(String permissionVersion) {
    this.permissionVersion = permissionVersion;
    return this;
  }

  /**
   * Get permissionVersion
   * @return permissionVersion
   */
  @javax.annotation.Nullable
  public String getPermissionVersion() {
    return permissionVersion;
  }

  public void setPermissionVersion(String permissionVersion) {
    this.permissionVersion = permissionVersion;
  }


  public AssociatedPermission defaultVersion(Boolean defaultVersion) {
    this.defaultVersion = defaultVersion;
    return this;
  }

  /**
   * Get defaultVersion
   * @return defaultVersion
   */
  @javax.annotation.Nullable
  public Boolean getDefaultVersion() {
    return defaultVersion;
  }

  public void setDefaultVersion(Boolean defaultVersion) {
    this.defaultVersion = defaultVersion;
  }


  public AssociatedPermission resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public AssociatedPermission status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public AssociatedPermission featureSet(PermissionFeatureSet featureSet) {
    this.featureSet = featureSet;
    return this;
  }

  /**
   * Get featureSet
   * @return featureSet
   */
  @javax.annotation.Nullable
  public PermissionFeatureSet getFeatureSet() {
    return featureSet;
  }

  public void setFeatureSet(PermissionFeatureSet featureSet) {
    this.featureSet = featureSet;
  }


  public AssociatedPermission lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public AssociatedPermission resourceShareArn(String resourceShareArn) {
    this.resourceShareArn = resourceShareArn;
    return this;
  }

  /**
   * Get resourceShareArn
   * @return resourceShareArn
   */
  @javax.annotation.Nullable
  public String getResourceShareArn() {
    return resourceShareArn;
  }

  public void setResourceShareArn(String resourceShareArn) {
    this.resourceShareArn = resourceShareArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociatedPermission associatedPermission = (AssociatedPermission) o;
    return Objects.equals(this.arn, associatedPermission.arn) &&
        Objects.equals(this.permissionVersion, associatedPermission.permissionVersion) &&
        Objects.equals(this.defaultVersion, associatedPermission.defaultVersion) &&
        Objects.equals(this.resourceType, associatedPermission.resourceType) &&
        Objects.equals(this.status, associatedPermission.status) &&
        Objects.equals(this.featureSet, associatedPermission.featureSet) &&
        Objects.equals(this.lastUpdatedTime, associatedPermission.lastUpdatedTime) &&
        Objects.equals(this.resourceShareArn, associatedPermission.resourceShareArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, permissionVersion, defaultVersion, resourceType, status, featureSet, lastUpdatedTime, resourceShareArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociatedPermission {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    permissionVersion: ").append(toIndentedString(permissionVersion)).append("\n");
    sb.append("    defaultVersion: ").append(toIndentedString(defaultVersion)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    featureSet: ").append(toIndentedString(featureSet)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    resourceShareArn: ").append(toIndentedString(resourceShareArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("permissionVersion");
    openapiFields.add("defaultVersion");
    openapiFields.add("resourceType");
    openapiFields.add("status");
    openapiFields.add("featureSet");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("resourceShareArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociatedPermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociatedPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociatedPermission is not found in the empty JSON string", AssociatedPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociatedPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociatedPermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `permissionVersion`
      if (jsonObj.get("permissionVersion") != null && !jsonObj.get("permissionVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("permissionVersion"));
      }
      // validate the optional field `defaultVersion`
      if (jsonObj.get("defaultVersion") != null && !jsonObj.get("defaultVersion").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("defaultVersion"));
      }
      // validate the optional field `resourceType`
      if (jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceType"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `featureSet`
      if (jsonObj.get("featureSet") != null && !jsonObj.get("featureSet").isJsonNull()) {
        PermissionFeatureSet.validateJsonElement(jsonObj.get("featureSet"));
      }
      // validate the optional field `lastUpdatedTime`
      if (jsonObj.get("lastUpdatedTime") != null && !jsonObj.get("lastUpdatedTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      }
      // validate the optional field `resourceShareArn`
      if (jsonObj.get("resourceShareArn") != null && !jsonObj.get("resourceShareArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("resourceShareArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociatedPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociatedPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociatedPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociatedPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociatedPermission>() {
           @Override
           public void write(JsonWriter out, AssociatedPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociatedPermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociatedPermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociatedPermission
   * @throws IOException if the JSON string is invalid with respect to AssociatedPermission
   */
  public static AssociatedPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociatedPermission.class);
  }

  /**
   * Convert an instance of AssociatedPermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

