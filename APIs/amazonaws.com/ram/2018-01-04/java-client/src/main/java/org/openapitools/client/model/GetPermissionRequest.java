/*
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetPermissionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:05:59.709480-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetPermissionRequest {
  public static final String SERIALIZED_NAME_PERMISSION_ARN = "permissionArn";
  @SerializedName(SERIALIZED_NAME_PERMISSION_ARN)
  private String permissionArn;

  public static final String SERIALIZED_NAME_PERMISSION_VERSION = "permissionVersion";
  @SerializedName(SERIALIZED_NAME_PERMISSION_VERSION)
  private Integer permissionVersion;

  public GetPermissionRequest() {
  }

  public GetPermissionRequest permissionArn(String permissionArn) {
    this.permissionArn = permissionArn;
    return this;
  }

  /**
   * Specifies the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\&quot;&gt;Amazon Resource Name (ARN)&lt;/a&gt; of the permission whose contents you want to retrieve. To find the ARN for a permission, use either the &lt;a&gt;ListPermissions&lt;/a&gt; operation or go to the &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/ram/home#Permissions:\&quot;&gt;Permissions library&lt;/a&gt; page in the RAM console and then choose the name of the permission. The ARN is displayed on the detail page.
   * @return permissionArn
   */
  @javax.annotation.Nonnull
  public String getPermissionArn() {
    return permissionArn;
  }

  public void setPermissionArn(String permissionArn) {
    this.permissionArn = permissionArn;
  }


  public GetPermissionRequest permissionVersion(Integer permissionVersion) {
    this.permissionVersion = permissionVersion;
    return this;
  }

  /**
   * &lt;p&gt;Specifies the version number of the RAM permission to retrieve. If you don&#39;t specify this parameter, the operation retrieves the default version.&lt;/p&gt; &lt;p&gt;To see the list of available versions, use &lt;a&gt;ListPermissionVersions&lt;/a&gt;.&lt;/p&gt;
   * @return permissionVersion
   */
  @javax.annotation.Nullable
  public Integer getPermissionVersion() {
    return permissionVersion;
  }

  public void setPermissionVersion(Integer permissionVersion) {
    this.permissionVersion = permissionVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetPermissionRequest getPermissionRequest = (GetPermissionRequest) o;
    return Objects.equals(this.permissionArn, getPermissionRequest.permissionArn) &&
        Objects.equals(this.permissionVersion, getPermissionRequest.permissionVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissionArn, permissionVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetPermissionRequest {\n");
    sb.append("    permissionArn: ").append(toIndentedString(permissionArn)).append("\n");
    sb.append("    permissionVersion: ").append(toIndentedString(permissionVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permissionArn");
    openapiFields.add("permissionVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("permissionArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetPermissionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetPermissionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetPermissionRequest is not found in the empty JSON string", GetPermissionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetPermissionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetPermissionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetPermissionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("permissionArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetPermissionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetPermissionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetPermissionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetPermissionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetPermissionRequest>() {
           @Override
           public void write(JsonWriter out, GetPermissionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetPermissionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetPermissionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetPermissionRequest
   * @throws IOException if the JSON string is invalid with respect to GetPermissionRequest
   */
  public static GetPermissionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetPermissionRequest.class);
  }

  /**
   * Convert an instance of GetPermissionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

