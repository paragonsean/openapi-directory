/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsResourceAccessManager);
  }
}(this, function(expect, AwsResourceAccessManager) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsResourceAccessManager.SetDefaultPermissionVersionRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SetDefaultPermissionVersionRequest', function() {
    it('should create an instance of SetDefaultPermissionVersionRequest', function() {
      // uncomment below and update the code to test SetDefaultPermissionVersionRequest
      //var instance = new AwsResourceAccessManager.SetDefaultPermissionVersionRequest();
      //expect(instance).to.be.a(AwsResourceAccessManager.SetDefaultPermissionVersionRequest);
    });

    it('should have the property permissionArn (base name: "permissionArn")', function() {
      // uncomment below and update the code to test the property permissionArn
      //var instance = new AwsResourceAccessManager.SetDefaultPermissionVersionRequest();
      //expect(instance).to.be();
    });

    it('should have the property permissionVersion (base name: "permissionVersion")', function() {
      // uncomment below and update the code to test the property permissionVersion
      //var instance = new AwsResourceAccessManager.SetDefaultPermissionVersionRequest();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "clientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instance = new AwsResourceAccessManager.SetDefaultPermissionVersionRequest();
      //expect(instance).to.be();
    });

  });

}));
