/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceShare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceShare::OAIResourceShare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceShare::OAIResourceShare() {
    this->initializeModel();
}

OAIResourceShare::~OAIResourceShare() {}

void OAIResourceShare::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owning_account_id_isSet = false;
    m_owning_account_id_isValid = false;

    m_allow_external_principals_isSet = false;
    m_allow_external_principals_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_feature_set_isSet = false;
    m_feature_set_isValid = false;
}

void OAIResourceShare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceShare::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owning_account_id_isValid = ::OpenAPI::fromJsonValue(m_owning_account_id, json[QString("owningAccountId")]);
    m_owning_account_id_isSet = !json[QString("owningAccountId")].isNull() && m_owning_account_id_isValid;

    m_allow_external_principals_isValid = ::OpenAPI::fromJsonValue(m_allow_external_principals, json[QString("allowExternalPrincipals")]);
    m_allow_external_principals_isSet = !json[QString("allowExternalPrincipals")].isNull() && m_allow_external_principals_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_feature_set_isValid = ::OpenAPI::fromJsonValue(m_feature_set, json[QString("featureSet")]);
    m_feature_set_isSet = !json[QString("featureSet")].isNull() && m_feature_set_isValid;
}

QString OAIResourceShare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceShare::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owning_account_id_isSet) {
        obj.insert(QString("owningAccountId"), ::OpenAPI::toJsonValue(m_owning_account_id));
    }
    if (m_allow_external_principals_isSet) {
        obj.insert(QString("allowExternalPrincipals"), ::OpenAPI::toJsonValue(m_allow_external_principals));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_feature_set.isSet()) {
        obj.insert(QString("featureSet"), ::OpenAPI::toJsonValue(m_feature_set));
    }
    return obj;
}

QString OAIResourceShare::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIResourceShare::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIResourceShare::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIResourceShare::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QString OAIResourceShare::getName() const {
    return m_name;
}
void OAIResourceShare::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceShare::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceShare::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceShare::getOwningAccountId() const {
    return m_owning_account_id;
}
void OAIResourceShare::setOwningAccountId(const QString &owning_account_id) {
    m_owning_account_id = owning_account_id;
    m_owning_account_id_isSet = true;
}

bool OAIResourceShare::is_owning_account_id_Set() const{
    return m_owning_account_id_isSet;
}

bool OAIResourceShare::is_owning_account_id_Valid() const{
    return m_owning_account_id_isValid;
}

bool OAIResourceShare::getAllowExternalPrincipals() const {
    return m_allow_external_principals;
}
void OAIResourceShare::setAllowExternalPrincipals(const bool &allow_external_principals) {
    m_allow_external_principals = allow_external_principals;
    m_allow_external_principals_isSet = true;
}

bool OAIResourceShare::is_allow_external_principals_Set() const{
    return m_allow_external_principals_isSet;
}

bool OAIResourceShare::is_allow_external_principals_Valid() const{
    return m_allow_external_principals_isValid;
}

OAIResourceShareStatus OAIResourceShare::getStatus() const {
    return m_status;
}
void OAIResourceShare::setStatus(const OAIResourceShareStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResourceShare::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResourceShare::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResourceShare::getStatusMessage() const {
    return m_status_message;
}
void OAIResourceShare::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIResourceShare::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIResourceShare::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QList OAIResourceShare::getTags() const {
    return m_tags;
}
void OAIResourceShare::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIResourceShare::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIResourceShare::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAIResourceShare::getCreationTime() const {
    return m_creation_time;
}
void OAIResourceShare::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIResourceShare::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIResourceShare::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIResourceShare::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIResourceShare::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIResourceShare::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIResourceShare::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIResourceShareFeatureSet OAIResourceShare::getFeatureSet() const {
    return m_feature_set;
}
void OAIResourceShare::setFeatureSet(const OAIResourceShareFeatureSet &feature_set) {
    m_feature_set = feature_set;
    m_feature_set_isSet = true;
}

bool OAIResourceShare::is_feature_set_Set() const{
    return m_feature_set_isSet;
}

bool OAIResourceShare::is_feature_set_Valid() const{
    return m_feature_set_isValid;
}

bool OAIResourceShare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owning_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_external_principals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_set.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceShare::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
