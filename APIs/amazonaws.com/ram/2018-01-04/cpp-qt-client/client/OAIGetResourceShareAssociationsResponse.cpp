/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourceShareAssociationsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourceShareAssociationsResponse::OAIGetResourceShareAssociationsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourceShareAssociationsResponse::OAIGetResourceShareAssociationsResponse() {
    this->initializeModel();
}

OAIGetResourceShareAssociationsResponse::~OAIGetResourceShareAssociationsResponse() {}

void OAIGetResourceShareAssociationsResponse::initializeModel() {

    m_resource_share_associations_isSet = false;
    m_resource_share_associations_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetResourceShareAssociationsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourceShareAssociationsResponse::fromJsonObject(QJsonObject json) {

    m_resource_share_associations_isValid = ::OpenAPI::fromJsonValue(m_resource_share_associations, json[QString("resourceShareAssociations")]);
    m_resource_share_associations_isSet = !json[QString("resourceShareAssociations")].isNull() && m_resource_share_associations_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetResourceShareAssociationsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourceShareAssociationsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_associations.isSet()) {
        obj.insert(QString("resourceShareAssociations"), ::OpenAPI::toJsonValue(m_resource_share_associations));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetResourceShareAssociationsResponse::getResourceShareAssociations() const {
    return m_resource_share_associations;
}
void OAIGetResourceShareAssociationsResponse::setResourceShareAssociations(const QList &resource_share_associations) {
    m_resource_share_associations = resource_share_associations;
    m_resource_share_associations_isSet = true;
}

bool OAIGetResourceShareAssociationsResponse::is_resource_share_associations_Set() const{
    return m_resource_share_associations_isSet;
}

bool OAIGetResourceShareAssociationsResponse::is_resource_share_associations_Valid() const{
    return m_resource_share_associations_isValid;
}

QString OAIGetResourceShareAssociationsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetResourceShareAssociationsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetResourceShareAssociationsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetResourceShareAssociationsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetResourceShareAssociationsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_associations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourceShareAssociationsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
