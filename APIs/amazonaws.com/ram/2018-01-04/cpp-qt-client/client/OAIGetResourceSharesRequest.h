/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetResourceSharesRequest.h
 *
 * 
 */

#ifndef OAIGetResourceSharesRequest_H
#define OAIGetResourceSharesRequest_H

#include <QJsonObject>

#include "OAIResourceOwner.h"
#include "OAIResourceShareStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetResourceSharesRequest : public OAIObject {
public:
    OAIGetResourceSharesRequest();
    OAIGetResourceSharesRequest(QString json);
    ~OAIGetResourceSharesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList getResourceShareArns() const;
    void setResourceShareArns(const QList &resource_share_arns);
    bool is_resource_share_arns_Set() const;
    bool is_resource_share_arns_Valid() const;

    OAIResourceShareStatus getResourceShareStatus() const;
    void setResourceShareStatus(const OAIResourceShareStatus &resource_share_status);
    bool is_resource_share_status_Set() const;
    bool is_resource_share_status_Valid() const;

    OAIResourceOwner getResourceOwner() const;
    void setResourceOwner(const OAIResourceOwner &resource_owner);
    bool is_resource_owner_Set() const;
    bool is_resource_owner_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList getTagFilters() const;
    void setTagFilters(const QList &tag_filters);
    bool is_tag_filters_Set() const;
    bool is_tag_filters_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getPermissionArn() const;
    void setPermissionArn(const QString &permission_arn);
    bool is_permission_arn_Set() const;
    bool is_permission_arn_Valid() const;

    qint32 getPermissionVersion() const;
    void setPermissionVersion(const qint32 &permission_version);
    bool is_permission_version_Set() const;
    bool is_permission_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList m_resource_share_arns;
    bool m_resource_share_arns_isSet;
    bool m_resource_share_arns_isValid;

    OAIResourceShareStatus m_resource_share_status;
    bool m_resource_share_status_isSet;
    bool m_resource_share_status_isValid;

    OAIResourceOwner m_resource_owner;
    bool m_resource_owner_isSet;
    bool m_resource_owner_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList m_tag_filters;
    bool m_tag_filters_isSet;
    bool m_tag_filters_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_permission_arn;
    bool m_permission_arn_isSet;
    bool m_permission_arn_isValid;

    qint32 m_permission_version;
    bool m_permission_version_isSet;
    bool m_permission_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetResourceSharesRequest)

#endif // OAIGetResourceSharesRequest_H
