/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrincipal::OAIPrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrincipal::OAIPrincipal() {
    this->initializeModel();
}

OAIPrincipal::~OAIPrincipal() {}

void OAIPrincipal::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;
}

void OAIPrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrincipal::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;
}

QString OAIPrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    return obj;
}

QString OAIPrincipal::getId() const {
    return m_id;
}
void OAIPrincipal::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPrincipal::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPrincipal::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPrincipal::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIPrincipal::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIPrincipal::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIPrincipal::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QDateTime OAIPrincipal::getCreationTime() const {
    return m_creation_time;
}
void OAIPrincipal::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIPrincipal::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIPrincipal::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIPrincipal::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIPrincipal::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIPrincipal::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIPrincipal::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIPrincipal::getExternal() const {
    return m_external;
}
void OAIPrincipal::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIPrincipal::is_external_Set() const{
    return m_external_isSet;
}

bool OAIPrincipal::is_external_Valid() const{
    return m_external_isValid;
}

bool OAIPrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
