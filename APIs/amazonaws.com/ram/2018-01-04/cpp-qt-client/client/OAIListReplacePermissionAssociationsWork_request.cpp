/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReplacePermissionAssociationsWork_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReplacePermissionAssociationsWork_request::OAIListReplacePermissionAssociationsWork_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReplacePermissionAssociationsWork_request::OAIListReplacePermissionAssociationsWork_request() {
    this->initializeModel();
}

OAIListReplacePermissionAssociationsWork_request::~OAIListReplacePermissionAssociationsWork_request() {}

void OAIListReplacePermissionAssociationsWork_request::initializeModel() {

    m_work_ids_isSet = false;
    m_work_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListReplacePermissionAssociationsWork_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReplacePermissionAssociationsWork_request::fromJsonObject(QJsonObject json) {

    m_work_ids_isValid = ::OpenAPI::fromJsonValue(m_work_ids, json[QString("workIds")]);
    m_work_ids_isSet = !json[QString("workIds")].isNull() && m_work_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListReplacePermissionAssociationsWork_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReplacePermissionAssociationsWork_request::asJsonObject() const {
    QJsonObject obj;
    if (m_work_ids.size() > 0) {
        obj.insert(QString("workIds"), ::OpenAPI::toJsonValue(m_work_ids));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList<QString> OAIListReplacePermissionAssociationsWork_request::getWorkIds() const {
    return m_work_ids;
}
void OAIListReplacePermissionAssociationsWork_request::setWorkIds(const QList<QString> &work_ids) {
    m_work_ids = work_ids;
    m_work_ids_isSet = true;
}

bool OAIListReplacePermissionAssociationsWork_request::is_work_ids_Set() const{
    return m_work_ids_isSet;
}

bool OAIListReplacePermissionAssociationsWork_request::is_work_ids_Valid() const{
    return m_work_ids_isValid;
}

QString OAIListReplacePermissionAssociationsWork_request::getStatus() const {
    return m_status;
}
void OAIListReplacePermissionAssociationsWork_request::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListReplacePermissionAssociationsWork_request::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListReplacePermissionAssociationsWork_request::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIListReplacePermissionAssociationsWork_request::getNextToken() const {
    return m_next_token;
}
void OAIListReplacePermissionAssociationsWork_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListReplacePermissionAssociationsWork_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListReplacePermissionAssociationsWork_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListReplacePermissionAssociationsWork_request::getMaxResults() const {
    return m_max_results;
}
void OAIListReplacePermissionAssociationsWork_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListReplacePermissionAssociationsWork_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListReplacePermissionAssociationsWork_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListReplacePermissionAssociationsWork_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_work_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReplacePermissionAssociationsWork_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
