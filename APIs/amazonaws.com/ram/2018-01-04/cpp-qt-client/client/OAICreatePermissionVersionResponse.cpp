/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePermissionVersionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePermissionVersionResponse::OAICreatePermissionVersionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePermissionVersionResponse::OAICreatePermissionVersionResponse() {
    this->initializeModel();
}

OAICreatePermissionVersionResponse::~OAICreatePermissionVersionResponse() {}

void OAICreatePermissionVersionResponse::initializeModel() {

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAICreatePermissionVersionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePermissionVersionResponse::fromJsonObject(QJsonObject json) {

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAICreatePermissionVersionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePermissionVersionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_permission.isSet()) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

OAIResourceSharePermissionDetail OAICreatePermissionVersionResponse::getPermission() const {
    return m_permission;
}
void OAICreatePermissionVersionResponse::setPermission(const OAIResourceSharePermissionDetail &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAICreatePermissionVersionResponse::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAICreatePermissionVersionResponse::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAICreatePermissionVersionResponse::getClientToken() const {
    return m_client_token;
}
void OAICreatePermissionVersionResponse::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreatePermissionVersionResponse::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreatePermissionVersionResponse::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAICreatePermissionVersionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePermissionVersionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
