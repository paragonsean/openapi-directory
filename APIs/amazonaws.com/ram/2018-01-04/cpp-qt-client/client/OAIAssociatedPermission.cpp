/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociatedPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociatedPermission::OAIAssociatedPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociatedPermission::OAIAssociatedPermission() {
    this->initializeModel();
}

OAIAssociatedPermission::~OAIAssociatedPermission() {}

void OAIAssociatedPermission::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_permission_version_isSet = false;
    m_permission_version_isValid = false;

    m_default_version_isSet = false;
    m_default_version_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_feature_set_isSet = false;
    m_feature_set_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;
}

void OAIAssociatedPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociatedPermission::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_permission_version_isValid = ::OpenAPI::fromJsonValue(m_permission_version, json[QString("permissionVersion")]);
    m_permission_version_isSet = !json[QString("permissionVersion")].isNull() && m_permission_version_isValid;

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_feature_set_isValid = ::OpenAPI::fromJsonValue(m_feature_set, json[QString("featureSet")]);
    m_feature_set_isSet = !json[QString("featureSet")].isNull() && m_feature_set_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;
}

QString OAIAssociatedPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociatedPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_permission_version_isSet) {
        obj.insert(QString("permissionVersion"), ::OpenAPI::toJsonValue(m_permission_version));
    }
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_feature_set.isSet()) {
        obj.insert(QString("featureSet"), ::OpenAPI::toJsonValue(m_feature_set));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    return obj;
}

QString OAIAssociatedPermission::getArn() const {
    return m_arn;
}
void OAIAssociatedPermission::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIAssociatedPermission::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIAssociatedPermission::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIAssociatedPermission::getPermissionVersion() const {
    return m_permission_version;
}
void OAIAssociatedPermission::setPermissionVersion(const QString &permission_version) {
    m_permission_version = permission_version;
    m_permission_version_isSet = true;
}

bool OAIAssociatedPermission::is_permission_version_Set() const{
    return m_permission_version_isSet;
}

bool OAIAssociatedPermission::is_permission_version_Valid() const{
    return m_permission_version_isValid;
}

bool OAIAssociatedPermission::getDefaultVersion() const {
    return m_default_version;
}
void OAIAssociatedPermission::setDefaultVersion(const bool &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAIAssociatedPermission::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAIAssociatedPermission::is_default_version_Valid() const{
    return m_default_version_isValid;
}

QString OAIAssociatedPermission::getResourceType() const {
    return m_resource_type;
}
void OAIAssociatedPermission::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIAssociatedPermission::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIAssociatedPermission::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIAssociatedPermission::getStatus() const {
    return m_status;
}
void OAIAssociatedPermission::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssociatedPermission::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssociatedPermission::is_status_Valid() const{
    return m_status_isValid;
}

OAIPermissionFeatureSet OAIAssociatedPermission::getFeatureSet() const {
    return m_feature_set;
}
void OAIAssociatedPermission::setFeatureSet(const OAIPermissionFeatureSet &feature_set) {
    m_feature_set = feature_set;
    m_feature_set_isSet = true;
}

bool OAIAssociatedPermission::is_feature_set_Set() const{
    return m_feature_set_isSet;
}

bool OAIAssociatedPermission::is_feature_set_Valid() const{
    return m_feature_set_isValid;
}

QDateTime OAIAssociatedPermission::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIAssociatedPermission::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIAssociatedPermission::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIAssociatedPermission::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIAssociatedPermission::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIAssociatedPermission::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIAssociatedPermission::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIAssociatedPermission::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

bool OAIAssociatedPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociatedPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
