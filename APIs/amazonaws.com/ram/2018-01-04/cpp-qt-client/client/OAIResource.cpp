/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource::OAIResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource::OAIResource() {
    this->initializeModel();
}

OAIResource::~OAIResource() {}

void OAIResource::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_resource_group_arn_isSet = false;
    m_resource_group_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_resource_region_scope_isSet = false;
    m_resource_region_scope_isValid = false;
}

void OAIResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_resource_group_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_group_arn, json[QString("resourceGroupArn")]);
    m_resource_group_arn_isSet = !json[QString("resourceGroupArn")].isNull() && m_resource_group_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_resource_region_scope_isValid = ::OpenAPI::fromJsonValue(m_resource_region_scope, json[QString("resourceRegionScope")]);
    m_resource_region_scope_isSet = !json[QString("resourceRegionScope")].isNull() && m_resource_region_scope_isValid;
}

QString OAIResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_resource_group_arn_isSet) {
        obj.insert(QString("resourceGroupArn"), ::OpenAPI::toJsonValue(m_resource_group_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_resource_region_scope.isSet()) {
        obj.insert(QString("resourceRegionScope"), ::OpenAPI::toJsonValue(m_resource_region_scope));
    }
    return obj;
}

QString OAIResource::getArn() const {
    return m_arn;
}
void OAIResource::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIResource::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIResource::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIResource::getType() const {
    return m_type;
}
void OAIResource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResource::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIResource::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIResource::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIResource::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIResource::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QString OAIResource::getResourceGroupArn() const {
    return m_resource_group_arn;
}
void OAIResource::setResourceGroupArn(const QString &resource_group_arn) {
    m_resource_group_arn = resource_group_arn;
    m_resource_group_arn_isSet = true;
}

bool OAIResource::is_resource_group_arn_Set() const{
    return m_resource_group_arn_isSet;
}

bool OAIResource::is_resource_group_arn_Valid() const{
    return m_resource_group_arn_isValid;
}

OAIResourceStatus OAIResource::getStatus() const {
    return m_status;
}
void OAIResource::setStatus(const OAIResourceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResource::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResource::getStatusMessage() const {
    return m_status_message;
}
void OAIResource::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIResource::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIResource::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIResource::getCreationTime() const {
    return m_creation_time;
}
void OAIResource::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIResource::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIResource::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIResource::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIResource::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIResource::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIResource::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

OAIResourceRegionScope OAIResource::getResourceRegionScope() const {
    return m_resource_region_scope;
}
void OAIResource::setResourceRegionScope(const OAIResourceRegionScope &resource_region_scope) {
    m_resource_region_scope = resource_region_scope;
    m_resource_region_scope_isSet = true;
}

bool OAIResource::is_resource_region_scope_Set() const{
    return m_resource_region_scope_isSet;
}

bool OAIResource::is_resource_region_scope_Valid() const{
    return m_resource_region_scope_isValid;
}

bool OAIResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_region_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
