/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPermissionAssociations_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPermissionAssociations_request::OAIListPermissionAssociations_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPermissionAssociations_request::OAIListPermissionAssociations_request() {
    this->initializeModel();
}

OAIListPermissionAssociations_request::~OAIListPermissionAssociations_request() {}

void OAIListPermissionAssociations_request::initializeModel() {

    m_permission_arn_isSet = false;
    m_permission_arn_isValid = false;

    m_permission_version_isSet = false;
    m_permission_version_isValid = false;

    m_association_status_isSet = false;
    m_association_status_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_feature_set_isSet = false;
    m_feature_set_isValid = false;

    m_default_version_isSet = false;
    m_default_version_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListPermissionAssociations_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPermissionAssociations_request::fromJsonObject(QJsonObject json) {

    m_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_permission_arn, json[QString("permissionArn")]);
    m_permission_arn_isSet = !json[QString("permissionArn")].isNull() && m_permission_arn_isValid;

    m_permission_version_isValid = ::OpenAPI::fromJsonValue(m_permission_version, json[QString("permissionVersion")]);
    m_permission_version_isSet = !json[QString("permissionVersion")].isNull() && m_permission_version_isValid;

    m_association_status_isValid = ::OpenAPI::fromJsonValue(m_association_status, json[QString("associationStatus")]);
    m_association_status_isSet = !json[QString("associationStatus")].isNull() && m_association_status_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_feature_set_isValid = ::OpenAPI::fromJsonValue(m_feature_set, json[QString("featureSet")]);
    m_feature_set_isSet = !json[QString("featureSet")].isNull() && m_feature_set_isValid;

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListPermissionAssociations_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPermissionAssociations_request::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_arn_isSet) {
        obj.insert(QString("permissionArn"), ::OpenAPI::toJsonValue(m_permission_arn));
    }
    if (m_permission_version_isSet) {
        obj.insert(QString("permissionVersion"), ::OpenAPI::toJsonValue(m_permission_version));
    }
    if (m_association_status_isSet) {
        obj.insert(QString("associationStatus"), ::OpenAPI::toJsonValue(m_association_status));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_feature_set_isSet) {
        obj.insert(QString("featureSet"), ::OpenAPI::toJsonValue(m_feature_set));
    }
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListPermissionAssociations_request::getPermissionArn() const {
    return m_permission_arn;
}
void OAIListPermissionAssociations_request::setPermissionArn(const QString &permission_arn) {
    m_permission_arn = permission_arn;
    m_permission_arn_isSet = true;
}

bool OAIListPermissionAssociations_request::is_permission_arn_Set() const{
    return m_permission_arn_isSet;
}

bool OAIListPermissionAssociations_request::is_permission_arn_Valid() const{
    return m_permission_arn_isValid;
}

qint32 OAIListPermissionAssociations_request::getPermissionVersion() const {
    return m_permission_version;
}
void OAIListPermissionAssociations_request::setPermissionVersion(const qint32 &permission_version) {
    m_permission_version = permission_version;
    m_permission_version_isSet = true;
}

bool OAIListPermissionAssociations_request::is_permission_version_Set() const{
    return m_permission_version_isSet;
}

bool OAIListPermissionAssociations_request::is_permission_version_Valid() const{
    return m_permission_version_isValid;
}

QString OAIListPermissionAssociations_request::getAssociationStatus() const {
    return m_association_status;
}
void OAIListPermissionAssociations_request::setAssociationStatus(const QString &association_status) {
    m_association_status = association_status;
    m_association_status_isSet = true;
}

bool OAIListPermissionAssociations_request::is_association_status_Set() const{
    return m_association_status_isSet;
}

bool OAIListPermissionAssociations_request::is_association_status_Valid() const{
    return m_association_status_isValid;
}

QString OAIListPermissionAssociations_request::getResourceType() const {
    return m_resource_type;
}
void OAIListPermissionAssociations_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListPermissionAssociations_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListPermissionAssociations_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIListPermissionAssociations_request::getFeatureSet() const {
    return m_feature_set;
}
void OAIListPermissionAssociations_request::setFeatureSet(const QString &feature_set) {
    m_feature_set = feature_set;
    m_feature_set_isSet = true;
}

bool OAIListPermissionAssociations_request::is_feature_set_Set() const{
    return m_feature_set_isSet;
}

bool OAIListPermissionAssociations_request::is_feature_set_Valid() const{
    return m_feature_set_isValid;
}

bool OAIListPermissionAssociations_request::isDefaultVersion() const {
    return m_default_version;
}
void OAIListPermissionAssociations_request::setDefaultVersion(const bool &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAIListPermissionAssociations_request::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAIListPermissionAssociations_request::is_default_version_Valid() const{
    return m_default_version_isValid;
}

QString OAIListPermissionAssociations_request::getNextToken() const {
    return m_next_token;
}
void OAIListPermissionAssociations_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPermissionAssociations_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPermissionAssociations_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPermissionAssociations_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPermissionAssociations_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPermissionAssociations_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPermissionAssociations_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListPermissionAssociations_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPermissionAssociations_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
