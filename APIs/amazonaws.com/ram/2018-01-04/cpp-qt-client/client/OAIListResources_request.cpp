/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListResources_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListResources_request::OAIListResources_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListResources_request::OAIListResources_request() {
    this->initializeModel();
}

OAIListResources_request::~OAIListResources_request() {}

void OAIListResources_request::initializeModel() {

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_resource_share_arns_isSet = false;
    m_resource_share_arns_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_resource_region_scope_isSet = false;
    m_resource_region_scope_isValid = false;
}

void OAIListResources_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListResources_request::fromJsonObject(QJsonObject json) {

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("resourceArns")]);
    m_resource_arns_isSet = !json[QString("resourceArns")].isNull() && m_resource_arns_isValid;

    m_resource_share_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arns, json[QString("resourceShareArns")]);
    m_resource_share_arns_isSet = !json[QString("resourceShareArns")].isNull() && m_resource_share_arns_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_resource_region_scope_isValid = ::OpenAPI::fromJsonValue(m_resource_region_scope, json[QString("resourceRegionScope")]);
    m_resource_region_scope_isSet = !json[QString("resourceRegionScope")].isNull() && m_resource_region_scope_isValid;
}

QString OAIListResources_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListResources_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_arns.size() > 0) {
        obj.insert(QString("resourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_resource_share_arns.size() > 0) {
        obj.insert(QString("resourceShareArns"), ::OpenAPI::toJsonValue(m_resource_share_arns));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_resource_region_scope_isSet) {
        obj.insert(QString("resourceRegionScope"), ::OpenAPI::toJsonValue(m_resource_region_scope));
    }
    return obj;
}

QString OAIListResources_request::getResourceOwner() const {
    return m_resource_owner;
}
void OAIListResources_request::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIListResources_request::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIListResources_request::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAIListResources_request::getPrincipal() const {
    return m_principal;
}
void OAIListResources_request::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIListResources_request::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIListResources_request::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIListResources_request::getResourceType() const {
    return m_resource_type;
}
void OAIListResources_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListResources_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListResources_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<QString> OAIListResources_request::getResourceArns() const {
    return m_resource_arns;
}
void OAIListResources_request::setResourceArns(const QList<QString> &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIListResources_request::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIListResources_request::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList<QString> OAIListResources_request::getResourceShareArns() const {
    return m_resource_share_arns;
}
void OAIListResources_request::setResourceShareArns(const QList<QString> &resource_share_arns) {
    m_resource_share_arns = resource_share_arns;
    m_resource_share_arns_isSet = true;
}

bool OAIListResources_request::is_resource_share_arns_Set() const{
    return m_resource_share_arns_isSet;
}

bool OAIListResources_request::is_resource_share_arns_Valid() const{
    return m_resource_share_arns_isValid;
}

QString OAIListResources_request::getNextToken() const {
    return m_next_token;
}
void OAIListResources_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListResources_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListResources_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListResources_request::getMaxResults() const {
    return m_max_results;
}
void OAIListResources_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListResources_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListResources_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListResources_request::getResourceRegionScope() const {
    return m_resource_region_scope;
}
void OAIListResources_request::setResourceRegionScope(const QString &resource_region_scope) {
    m_resource_region_scope = resource_region_scope;
    m_resource_region_scope_isSet = true;
}

bool OAIListResources_request::is_resource_region_scope_Set() const{
    return m_resource_region_scope_isSet;
}

bool OAIListResources_request::is_resource_region_scope_Valid() const{
    return m_resource_region_scope_isValid;
}

bool OAIListResources_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_region_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListResources_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_owner_isValid && true;
}

} // namespace OpenAPI
