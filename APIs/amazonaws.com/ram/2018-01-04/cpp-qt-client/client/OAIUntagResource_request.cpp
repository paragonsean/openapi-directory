/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUntagResource_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUntagResource_request::OAIUntagResource_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUntagResource_request::OAIUntagResource_request() {
    this->initializeModel();
}

OAIUntagResource_request::~OAIUntagResource_request() {}

void OAIUntagResource_request::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_tag_keys_isSet = false;
    m_tag_keys_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIUntagResource_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUntagResource_request::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_tag_keys_isValid = ::OpenAPI::fromJsonValue(m_tag_keys, json[QString("tagKeys")]);
    m_tag_keys_isSet = !json[QString("tagKeys")].isNull() && m_tag_keys_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAIUntagResource_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUntagResource_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_tag_keys.size() > 0) {
        obj.insert(QString("tagKeys"), ::OpenAPI::toJsonValue(m_tag_keys));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIUntagResource_request::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIUntagResource_request::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIUntagResource_request::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIUntagResource_request::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QList<QString> OAIUntagResource_request::getTagKeys() const {
    return m_tag_keys;
}
void OAIUntagResource_request::setTagKeys(const QList<QString> &tag_keys) {
    m_tag_keys = tag_keys;
    m_tag_keys_isSet = true;
}

bool OAIUntagResource_request::is_tag_keys_Set() const{
    return m_tag_keys_isSet;
}

bool OAIUntagResource_request::is_tag_keys_Valid() const{
    return m_tag_keys_isValid;
}

QString OAIUntagResource_request::getResourceArn() const {
    return m_resource_arn;
}
void OAIUntagResource_request::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIUntagResource_request::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIUntagResource_request::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIUntagResource_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUntagResource_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_keys_isValid && true;
}

} // namespace OpenAPI
