/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplacePermissionAssociationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplacePermissionAssociationsRequest::OAIReplacePermissionAssociationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplacePermissionAssociationsRequest::OAIReplacePermissionAssociationsRequest() {
    this->initializeModel();
}

OAIReplacePermissionAssociationsRequest::~OAIReplacePermissionAssociationsRequest() {}

void OAIReplacePermissionAssociationsRequest::initializeModel() {

    m_from_permission_arn_isSet = false;
    m_from_permission_arn_isValid = false;

    m_from_permission_version_isSet = false;
    m_from_permission_version_isValid = false;

    m_to_permission_arn_isSet = false;
    m_to_permission_arn_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIReplacePermissionAssociationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplacePermissionAssociationsRequest::fromJsonObject(QJsonObject json) {

    m_from_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_from_permission_arn, json[QString("fromPermissionArn")]);
    m_from_permission_arn_isSet = !json[QString("fromPermissionArn")].isNull() && m_from_permission_arn_isValid;

    m_from_permission_version_isValid = ::OpenAPI::fromJsonValue(m_from_permission_version, json[QString("fromPermissionVersion")]);
    m_from_permission_version_isSet = !json[QString("fromPermissionVersion")].isNull() && m_from_permission_version_isValid;

    m_to_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_to_permission_arn, json[QString("toPermissionArn")]);
    m_to_permission_arn_isSet = !json[QString("toPermissionArn")].isNull() && m_to_permission_arn_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAIReplacePermissionAssociationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplacePermissionAssociationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_from_permission_arn_isSet) {
        obj.insert(QString("fromPermissionArn"), ::OpenAPI::toJsonValue(m_from_permission_arn));
    }
    if (m_from_permission_version_isSet) {
        obj.insert(QString("fromPermissionVersion"), ::OpenAPI::toJsonValue(m_from_permission_version));
    }
    if (m_to_permission_arn_isSet) {
        obj.insert(QString("toPermissionArn"), ::OpenAPI::toJsonValue(m_to_permission_arn));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIReplacePermissionAssociationsRequest::getFromPermissionArn() const {
    return m_from_permission_arn;
}
void OAIReplacePermissionAssociationsRequest::setFromPermissionArn(const QString &from_permission_arn) {
    m_from_permission_arn = from_permission_arn;
    m_from_permission_arn_isSet = true;
}

bool OAIReplacePermissionAssociationsRequest::is_from_permission_arn_Set() const{
    return m_from_permission_arn_isSet;
}

bool OAIReplacePermissionAssociationsRequest::is_from_permission_arn_Valid() const{
    return m_from_permission_arn_isValid;
}

qint32 OAIReplacePermissionAssociationsRequest::getFromPermissionVersion() const {
    return m_from_permission_version;
}
void OAIReplacePermissionAssociationsRequest::setFromPermissionVersion(const qint32 &from_permission_version) {
    m_from_permission_version = from_permission_version;
    m_from_permission_version_isSet = true;
}

bool OAIReplacePermissionAssociationsRequest::is_from_permission_version_Set() const{
    return m_from_permission_version_isSet;
}

bool OAIReplacePermissionAssociationsRequest::is_from_permission_version_Valid() const{
    return m_from_permission_version_isValid;
}

QString OAIReplacePermissionAssociationsRequest::getToPermissionArn() const {
    return m_to_permission_arn;
}
void OAIReplacePermissionAssociationsRequest::setToPermissionArn(const QString &to_permission_arn) {
    m_to_permission_arn = to_permission_arn;
    m_to_permission_arn_isSet = true;
}

bool OAIReplacePermissionAssociationsRequest::is_to_permission_arn_Set() const{
    return m_to_permission_arn_isSet;
}

bool OAIReplacePermissionAssociationsRequest::is_to_permission_arn_Valid() const{
    return m_to_permission_arn_isValid;
}

QString OAIReplacePermissionAssociationsRequest::getClientToken() const {
    return m_client_token;
}
void OAIReplacePermissionAssociationsRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIReplacePermissionAssociationsRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIReplacePermissionAssociationsRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIReplacePermissionAssociationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_from_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplacePermissionAssociationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_from_permission_arn_isValid && m_to_permission_arn_isValid && true;
}

} // namespace OpenAPI
