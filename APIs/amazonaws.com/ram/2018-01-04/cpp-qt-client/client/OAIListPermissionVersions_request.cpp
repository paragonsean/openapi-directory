/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPermissionVersions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPermissionVersions_request::OAIListPermissionVersions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPermissionVersions_request::OAIListPermissionVersions_request() {
    this->initializeModel();
}

OAIListPermissionVersions_request::~OAIListPermissionVersions_request() {}

void OAIListPermissionVersions_request::initializeModel() {

    m_permission_arn_isSet = false;
    m_permission_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListPermissionVersions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPermissionVersions_request::fromJsonObject(QJsonObject json) {

    m_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_permission_arn, json[QString("permissionArn")]);
    m_permission_arn_isSet = !json[QString("permissionArn")].isNull() && m_permission_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListPermissionVersions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPermissionVersions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_arn_isSet) {
        obj.insert(QString("permissionArn"), ::OpenAPI::toJsonValue(m_permission_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListPermissionVersions_request::getPermissionArn() const {
    return m_permission_arn;
}
void OAIListPermissionVersions_request::setPermissionArn(const QString &permission_arn) {
    m_permission_arn = permission_arn;
    m_permission_arn_isSet = true;
}

bool OAIListPermissionVersions_request::is_permission_arn_Set() const{
    return m_permission_arn_isSet;
}

bool OAIListPermissionVersions_request::is_permission_arn_Valid() const{
    return m_permission_arn_isValid;
}

QString OAIListPermissionVersions_request::getNextToken() const {
    return m_next_token;
}
void OAIListPermissionVersions_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPermissionVersions_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPermissionVersions_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPermissionVersions_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPermissionVersions_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPermissionVersions_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPermissionVersions_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListPermissionVersions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPermissionVersions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_permission_arn_isValid && true;
}

} // namespace OpenAPI
