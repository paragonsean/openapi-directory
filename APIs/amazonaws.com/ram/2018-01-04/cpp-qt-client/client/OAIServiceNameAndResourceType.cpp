/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceNameAndResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceNameAndResourceType::OAIServiceNameAndResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceNameAndResourceType::OAIServiceNameAndResourceType() {
    this->initializeModel();
}

OAIServiceNameAndResourceType::~OAIServiceNameAndResourceType() {}

void OAIServiceNameAndResourceType::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_resource_region_scope_isSet = false;
    m_resource_region_scope_isValid = false;
}

void OAIServiceNameAndResourceType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceNameAndResourceType::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_resource_region_scope_isValid = ::OpenAPI::fromJsonValue(m_resource_region_scope, json[QString("resourceRegionScope")]);
    m_resource_region_scope_isSet = !json[QString("resourceRegionScope")].isNull() && m_resource_region_scope_isValid;
}

QString OAIServiceNameAndResourceType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceNameAndResourceType::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_resource_region_scope.isSet()) {
        obj.insert(QString("resourceRegionScope"), ::OpenAPI::toJsonValue(m_resource_region_scope));
    }
    return obj;
}

QString OAIServiceNameAndResourceType::getResourceType() const {
    return m_resource_type;
}
void OAIServiceNameAndResourceType::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIServiceNameAndResourceType::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIServiceNameAndResourceType::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIServiceNameAndResourceType::getServiceName() const {
    return m_service_name;
}
void OAIServiceNameAndResourceType::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceNameAndResourceType::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceNameAndResourceType::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIResourceRegionScope OAIServiceNameAndResourceType::getResourceRegionScope() const {
    return m_resource_region_scope;
}
void OAIServiceNameAndResourceType::setResourceRegionScope(const OAIResourceRegionScope &resource_region_scope) {
    m_resource_region_scope = resource_region_scope;
    m_resource_region_scope_isSet = true;
}

bool OAIServiceNameAndResourceType::is_resource_region_scope_Set() const{
    return m_resource_region_scope_isSet;
}

bool OAIServiceNameAndResourceType::is_resource_region_scope_Valid() const{
    return m_resource_region_scope_isValid;
}

bool OAIServiceNameAndResourceType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_region_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceNameAndResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
