/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourceShareAssociationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourceShareAssociationsRequest::OAIGetResourceShareAssociationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourceShareAssociationsRequest::OAIGetResourceShareAssociationsRequest() {
    this->initializeModel();
}

OAIGetResourceShareAssociationsRequest::~OAIGetResourceShareAssociationsRequest() {}

void OAIGetResourceShareAssociationsRequest::initializeModel() {

    m_association_type_isSet = false;
    m_association_type_isValid = false;

    m_resource_share_arns_isSet = false;
    m_resource_share_arns_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_association_status_isSet = false;
    m_association_status_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetResourceShareAssociationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourceShareAssociationsRequest::fromJsonObject(QJsonObject json) {

    m_association_type_isValid = ::OpenAPI::fromJsonValue(m_association_type, json[QString("associationType")]);
    m_association_type_isSet = !json[QString("associationType")].isNull() && m_association_type_isValid;

    m_resource_share_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arns, json[QString("resourceShareArns")]);
    m_resource_share_arns_isSet = !json[QString("resourceShareArns")].isNull() && m_resource_share_arns_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_association_status_isValid = ::OpenAPI::fromJsonValue(m_association_status, json[QString("associationStatus")]);
    m_association_status_isSet = !json[QString("associationStatus")].isNull() && m_association_status_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetResourceShareAssociationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourceShareAssociationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_association_type.isSet()) {
        obj.insert(QString("associationType"), ::OpenAPI::toJsonValue(m_association_type));
    }
    if (m_resource_share_arns.isSet()) {
        obj.insert(QString("resourceShareArns"), ::OpenAPI::toJsonValue(m_resource_share_arns));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_association_status.isSet()) {
        obj.insert(QString("associationStatus"), ::OpenAPI::toJsonValue(m_association_status));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIResourceShareAssociationType OAIGetResourceShareAssociationsRequest::getAssociationType() const {
    return m_association_type;
}
void OAIGetResourceShareAssociationsRequest::setAssociationType(const OAIResourceShareAssociationType &association_type) {
    m_association_type = association_type;
    m_association_type_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_association_type_Set() const{
    return m_association_type_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_association_type_Valid() const{
    return m_association_type_isValid;
}

QList OAIGetResourceShareAssociationsRequest::getResourceShareArns() const {
    return m_resource_share_arns;
}
void OAIGetResourceShareAssociationsRequest::setResourceShareArns(const QList &resource_share_arns) {
    m_resource_share_arns = resource_share_arns;
    m_resource_share_arns_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_resource_share_arns_Set() const{
    return m_resource_share_arns_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_resource_share_arns_Valid() const{
    return m_resource_share_arns_isValid;
}

QString OAIGetResourceShareAssociationsRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIGetResourceShareAssociationsRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIGetResourceShareAssociationsRequest::getPrincipal() const {
    return m_principal;
}
void OAIGetResourceShareAssociationsRequest::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_principal_Valid() const{
    return m_principal_isValid;
}

OAIResourceShareAssociationStatus OAIGetResourceShareAssociationsRequest::getAssociationStatus() const {
    return m_association_status;
}
void OAIGetResourceShareAssociationsRequest::setAssociationStatus(const OAIResourceShareAssociationStatus &association_status) {
    m_association_status = association_status;
    m_association_status_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_association_status_Set() const{
    return m_association_status_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_association_status_Valid() const{
    return m_association_status_isValid;
}

QString OAIGetResourceShareAssociationsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetResourceShareAssociationsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetResourceShareAssociationsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetResourceShareAssociationsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetResourceShareAssociationsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetResourceShareAssociationsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetResourceShareAssociationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourceShareAssociationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_association_type_isValid && true;
}

} // namespace OpenAPI
