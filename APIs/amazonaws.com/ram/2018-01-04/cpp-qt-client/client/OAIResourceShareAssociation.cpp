/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceShareAssociation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceShareAssociation::OAIResourceShareAssociation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceShareAssociation::OAIResourceShareAssociation() {
    this->initializeModel();
}

OAIResourceShareAssociation::~OAIResourceShareAssociation() {}

void OAIResourceShareAssociation::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_resource_share_name_isSet = false;
    m_resource_share_name_isValid = false;

    m_associated_entity_isSet = false;
    m_associated_entity_isValid = false;

    m_association_type_isSet = false;
    m_association_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_external_isSet = false;
    m_external_isValid = false;
}

void OAIResourceShareAssociation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceShareAssociation::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_resource_share_name_isValid = ::OpenAPI::fromJsonValue(m_resource_share_name, json[QString("resourceShareName")]);
    m_resource_share_name_isSet = !json[QString("resourceShareName")].isNull() && m_resource_share_name_isValid;

    m_associated_entity_isValid = ::OpenAPI::fromJsonValue(m_associated_entity, json[QString("associatedEntity")]);
    m_associated_entity_isSet = !json[QString("associatedEntity")].isNull() && m_associated_entity_isValid;

    m_association_type_isValid = ::OpenAPI::fromJsonValue(m_association_type, json[QString("associationType")]);
    m_association_type_isSet = !json[QString("associationType")].isNull() && m_association_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_external_isValid = ::OpenAPI::fromJsonValue(m_external, json[QString("external")]);
    m_external_isSet = !json[QString("external")].isNull() && m_external_isValid;
}

QString OAIResourceShareAssociation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceShareAssociation::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_resource_share_name_isSet) {
        obj.insert(QString("resourceShareName"), ::OpenAPI::toJsonValue(m_resource_share_name));
    }
    if (m_associated_entity_isSet) {
        obj.insert(QString("associatedEntity"), ::OpenAPI::toJsonValue(m_associated_entity));
    }
    if (m_association_type.isSet()) {
        obj.insert(QString("associationType"), ::OpenAPI::toJsonValue(m_association_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_external_isSet) {
        obj.insert(QString("external"), ::OpenAPI::toJsonValue(m_external));
    }
    return obj;
}

QString OAIResourceShareAssociation::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIResourceShareAssociation::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIResourceShareAssociation::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIResourceShareAssociation::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QString OAIResourceShareAssociation::getResourceShareName() const {
    return m_resource_share_name;
}
void OAIResourceShareAssociation::setResourceShareName(const QString &resource_share_name) {
    m_resource_share_name = resource_share_name;
    m_resource_share_name_isSet = true;
}

bool OAIResourceShareAssociation::is_resource_share_name_Set() const{
    return m_resource_share_name_isSet;
}

bool OAIResourceShareAssociation::is_resource_share_name_Valid() const{
    return m_resource_share_name_isValid;
}

QString OAIResourceShareAssociation::getAssociatedEntity() const {
    return m_associated_entity;
}
void OAIResourceShareAssociation::setAssociatedEntity(const QString &associated_entity) {
    m_associated_entity = associated_entity;
    m_associated_entity_isSet = true;
}

bool OAIResourceShareAssociation::is_associated_entity_Set() const{
    return m_associated_entity_isSet;
}

bool OAIResourceShareAssociation::is_associated_entity_Valid() const{
    return m_associated_entity_isValid;
}

OAIResourceShareAssociationType OAIResourceShareAssociation::getAssociationType() const {
    return m_association_type;
}
void OAIResourceShareAssociation::setAssociationType(const OAIResourceShareAssociationType &association_type) {
    m_association_type = association_type;
    m_association_type_isSet = true;
}

bool OAIResourceShareAssociation::is_association_type_Set() const{
    return m_association_type_isSet;
}

bool OAIResourceShareAssociation::is_association_type_Valid() const{
    return m_association_type_isValid;
}

OAIResourceShareAssociationStatus OAIResourceShareAssociation::getStatus() const {
    return m_status;
}
void OAIResourceShareAssociation::setStatus(const OAIResourceShareAssociationStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIResourceShareAssociation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIResourceShareAssociation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIResourceShareAssociation::getStatusMessage() const {
    return m_status_message;
}
void OAIResourceShareAssociation::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIResourceShareAssociation::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIResourceShareAssociation::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIResourceShareAssociation::getCreationTime() const {
    return m_creation_time;
}
void OAIResourceShareAssociation::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIResourceShareAssociation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIResourceShareAssociation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIResourceShareAssociation::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIResourceShareAssociation::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIResourceShareAssociation::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIResourceShareAssociation::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIResourceShareAssociation::getExternal() const {
    return m_external;
}
void OAIResourceShareAssociation::setExternal(const bool &external) {
    m_external = external;
    m_external_isSet = true;
}

bool OAIResourceShareAssociation::is_external_Set() const{
    return m_external_isSet;
}

bool OAIResourceShareAssociation::is_external_Valid() const{
    return m_external_isValid;
}

bool OAIResourceShareAssociation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceShareAssociation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
