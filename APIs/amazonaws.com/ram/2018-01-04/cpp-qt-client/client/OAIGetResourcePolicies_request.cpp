/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourcePolicies_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourcePolicies_request::OAIGetResourcePolicies_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourcePolicies_request::OAIGetResourcePolicies_request() {
    this->initializeModel();
}

OAIGetResourcePolicies_request::~OAIGetResourcePolicies_request() {}

void OAIGetResourcePolicies_request::initializeModel() {

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetResourcePolicies_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourcePolicies_request::fromJsonObject(QJsonObject json) {

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("resourceArns")]);
    m_resource_arns_isSet = !json[QString("resourceArns")].isNull() && m_resource_arns_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetResourcePolicies_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourcePolicies_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arns.size() > 0) {
        obj.insert(QString("resourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList<QString> OAIGetResourcePolicies_request::getResourceArns() const {
    return m_resource_arns;
}
void OAIGetResourcePolicies_request::setResourceArns(const QList<QString> &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIGetResourcePolicies_request::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIGetResourcePolicies_request::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QString OAIGetResourcePolicies_request::getPrincipal() const {
    return m_principal;
}
void OAIGetResourcePolicies_request::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIGetResourcePolicies_request::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIGetResourcePolicies_request::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIGetResourcePolicies_request::getNextToken() const {
    return m_next_token;
}
void OAIGetResourcePolicies_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetResourcePolicies_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetResourcePolicies_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetResourcePolicies_request::getMaxResults() const {
    return m_max_results;
}
void OAIGetResourcePolicies_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetResourcePolicies_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetResourcePolicies_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetResourcePolicies_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourcePolicies_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arns_isValid && true;
}

} // namespace OpenAPI
