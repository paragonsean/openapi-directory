/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePermissionResponse_permission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePermissionResponse_permission::OAICreatePermissionResponse_permission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePermissionResponse_permission::OAICreatePermissionResponse_permission() {
    this->initializeModel();
}

OAICreatePermissionResponse_permission::~OAICreatePermissionResponse_permission() {}

void OAICreatePermissionResponse_permission::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_default_version_isSet = false;
    m_default_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_is_resource_type_default_isSet = false;
    m_is_resource_type_default_isValid = false;

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;

    m_feature_set_isSet = false;
    m_feature_set_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreatePermissionResponse_permission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePermissionResponse_permission::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_is_resource_type_default_isValid = ::OpenAPI::fromJsonValue(m_is_resource_type_default, json[QString("isResourceTypeDefault")]);
    m_is_resource_type_default_isSet = !json[QString("isResourceTypeDefault")].isNull() && m_is_resource_type_default_isValid;

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permissionType")]);
    m_permission_type_isSet = !json[QString("permissionType")].isNull() && m_permission_type_isValid;

    m_feature_set_isValid = ::OpenAPI::fromJsonValue(m_feature_set, json[QString("featureSet")]);
    m_feature_set_isSet = !json[QString("featureSet")].isNull() && m_feature_set_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreatePermissionResponse_permission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePermissionResponse_permission::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_is_resource_type_default_isSet) {
        obj.insert(QString("isResourceTypeDefault"), ::OpenAPI::toJsonValue(m_is_resource_type_default));
    }
    if (m_permission_type.isSet()) {
        obj.insert(QString("permissionType"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    if (m_feature_set.isSet()) {
        obj.insert(QString("featureSet"), ::OpenAPI::toJsonValue(m_feature_set));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreatePermissionResponse_permission::getArn() const {
    return m_arn;
}
void OAICreatePermissionResponse_permission::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreatePermissionResponse_permission::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreatePermissionResponse_permission::getVersion() const {
    return m_version;
}
void OAICreatePermissionResponse_permission::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreatePermissionResponse_permission::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICreatePermissionResponse_permission::getDefaultVersion() const {
    return m_default_version;
}
void OAICreatePermissionResponse_permission::setDefaultVersion(const bool &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAICreatePermissionResponse_permission::is_default_version_Valid() const{
    return m_default_version_isValid;
}

QString OAICreatePermissionResponse_permission::getName() const {
    return m_name;
}
void OAICreatePermissionResponse_permission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreatePermissionResponse_permission::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreatePermissionResponse_permission::getResourceType() const {
    return m_resource_type;
}
void OAICreatePermissionResponse_permission::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICreatePermissionResponse_permission::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAICreatePermissionResponse_permission::getStatus() const {
    return m_status;
}
void OAICreatePermissionResponse_permission::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreatePermissionResponse_permission::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICreatePermissionResponse_permission::getCreationTime() const {
    return m_creation_time;
}
void OAICreatePermissionResponse_permission::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreatePermissionResponse_permission::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAICreatePermissionResponse_permission::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAICreatePermissionResponse_permission::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAICreatePermissionResponse_permission::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAICreatePermissionResponse_permission::getIsResourceTypeDefault() const {
    return m_is_resource_type_default;
}
void OAICreatePermissionResponse_permission::setIsResourceTypeDefault(const bool &is_resource_type_default) {
    m_is_resource_type_default = is_resource_type_default;
    m_is_resource_type_default_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_is_resource_type_default_Set() const{
    return m_is_resource_type_default_isSet;
}

bool OAICreatePermissionResponse_permission::is_is_resource_type_default_Valid() const{
    return m_is_resource_type_default_isValid;
}

OAIPermissionType OAICreatePermissionResponse_permission::getPermissionType() const {
    return m_permission_type;
}
void OAICreatePermissionResponse_permission::setPermissionType(const OAIPermissionType &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAICreatePermissionResponse_permission::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

OAIPermissionFeatureSet OAICreatePermissionResponse_permission::getFeatureSet() const {
    return m_feature_set;
}
void OAICreatePermissionResponse_permission::setFeatureSet(const OAIPermissionFeatureSet &feature_set) {
    m_feature_set = feature_set;
    m_feature_set_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_feature_set_Set() const{
    return m_feature_set_isSet;
}

bool OAICreatePermissionResponse_permission::is_feature_set_Valid() const{
    return m_feature_set_isValid;
}

QList OAICreatePermissionResponse_permission::getTags() const {
    return m_tags;
}
void OAICreatePermissionResponse_permission::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePermissionResponse_permission::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePermissionResponse_permission::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreatePermissionResponse_permission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_resource_type_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePermissionResponse_permission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
