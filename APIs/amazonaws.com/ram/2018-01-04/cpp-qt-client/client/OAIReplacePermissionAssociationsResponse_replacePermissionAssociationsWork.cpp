/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork() {
    this->initializeModel();
}

OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::~OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork() {}

void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_from_permission_arn_isSet = false;
    m_from_permission_arn_isValid = false;

    m_from_permission_version_isSet = false;
    m_from_permission_version_isValid = false;

    m_to_permission_arn_isSet = false;
    m_to_permission_arn_isValid = false;

    m_to_permission_version_isSet = false;
    m_to_permission_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;
}

void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_from_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_from_permission_arn, json[QString("fromPermissionArn")]);
    m_from_permission_arn_isSet = !json[QString("fromPermissionArn")].isNull() && m_from_permission_arn_isValid;

    m_from_permission_version_isValid = ::OpenAPI::fromJsonValue(m_from_permission_version, json[QString("fromPermissionVersion")]);
    m_from_permission_version_isSet = !json[QString("fromPermissionVersion")].isNull() && m_from_permission_version_isValid;

    m_to_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_to_permission_arn, json[QString("toPermissionArn")]);
    m_to_permission_arn_isSet = !json[QString("toPermissionArn")].isNull() && m_to_permission_arn_isValid;

    m_to_permission_version_isValid = ::OpenAPI::fromJsonValue(m_to_permission_version, json[QString("toPermissionVersion")]);
    m_to_permission_version_isSet = !json[QString("toPermissionVersion")].isNull() && m_to_permission_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_from_permission_arn_isSet) {
        obj.insert(QString("fromPermissionArn"), ::OpenAPI::toJsonValue(m_from_permission_arn));
    }
    if (m_from_permission_version_isSet) {
        obj.insert(QString("fromPermissionVersion"), ::OpenAPI::toJsonValue(m_from_permission_version));
    }
    if (m_to_permission_arn_isSet) {
        obj.insert(QString("toPermissionArn"), ::OpenAPI::toJsonValue(m_to_permission_arn));
    }
    if (m_to_permission_version_isSet) {
        obj.insert(QString("toPermissionVersion"), ::OpenAPI::toJsonValue(m_to_permission_version));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    return obj;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getId() const {
    return m_id;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getFromPermissionArn() const {
    return m_from_permission_arn;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setFromPermissionArn(const QString &from_permission_arn) {
    m_from_permission_arn = from_permission_arn;
    m_from_permission_arn_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_from_permission_arn_Set() const{
    return m_from_permission_arn_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_from_permission_arn_Valid() const{
    return m_from_permission_arn_isValid;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getFromPermissionVersion() const {
    return m_from_permission_version;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setFromPermissionVersion(const QString &from_permission_version) {
    m_from_permission_version = from_permission_version;
    m_from_permission_version_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_from_permission_version_Set() const{
    return m_from_permission_version_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_from_permission_version_Valid() const{
    return m_from_permission_version_isValid;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getToPermissionArn() const {
    return m_to_permission_arn;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setToPermissionArn(const QString &to_permission_arn) {
    m_to_permission_arn = to_permission_arn;
    m_to_permission_arn_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_to_permission_arn_Set() const{
    return m_to_permission_arn_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_to_permission_arn_Valid() const{
    return m_to_permission_arn_isValid;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getToPermissionVersion() const {
    return m_to_permission_version;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setToPermissionVersion(const QString &to_permission_version) {
    m_to_permission_version = to_permission_version;
    m_to_permission_version_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_to_permission_version_Set() const{
    return m_to_permission_version_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_to_permission_version_Valid() const{
    return m_to_permission_version_isValid;
}

OAIReplacePermissionAssociationsWorkStatus OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getStatus() const {
    return m_status;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setStatus(const OAIReplacePermissionAssociationsWorkStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getStatusMessage() const {
    return m_status_message;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QDateTime OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getCreationTime() const {
    return m_creation_time;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplacePermissionAssociationsResponse_replacePermissionAssociationsWork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
