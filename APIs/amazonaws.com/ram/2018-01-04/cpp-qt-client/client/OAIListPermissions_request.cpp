/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPermissions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPermissions_request::OAIListPermissions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPermissions_request::OAIListPermissions_request() {
    this->initializeModel();
}

OAIListPermissions_request::~OAIListPermissions_request() {}

void OAIListPermissions_request::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_permission_type_isSet = false;
    m_permission_type_isValid = false;
}

void OAIListPermissions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPermissions_request::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_permission_type_isValid = ::OpenAPI::fromJsonValue(m_permission_type, json[QString("permissionType")]);
    m_permission_type_isSet = !json[QString("permissionType")].isNull() && m_permission_type_isValid;
}

QString OAIListPermissions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPermissions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_permission_type_isSet) {
        obj.insert(QString("permissionType"), ::OpenAPI::toJsonValue(m_permission_type));
    }
    return obj;
}

QString OAIListPermissions_request::getResourceType() const {
    return m_resource_type;
}
void OAIListPermissions_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListPermissions_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListPermissions_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIListPermissions_request::getNextToken() const {
    return m_next_token;
}
void OAIListPermissions_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPermissions_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPermissions_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPermissions_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPermissions_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPermissions_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPermissions_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListPermissions_request::getPermissionType() const {
    return m_permission_type;
}
void OAIListPermissions_request::setPermissionType(const QString &permission_type) {
    m_permission_type = permission_type;
    m_permission_type_isSet = true;
}

bool OAIListPermissions_request::is_permission_type_Set() const{
    return m_permission_type_isSet;
}

bool OAIListPermissions_request::is_permission_type_Valid() const{
    return m_permission_type_isValid;
}

bool OAIListPermissions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPermissions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
