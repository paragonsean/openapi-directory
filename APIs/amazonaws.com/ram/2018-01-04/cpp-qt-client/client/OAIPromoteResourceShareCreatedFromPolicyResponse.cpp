/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromoteResourceShareCreatedFromPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromoteResourceShareCreatedFromPolicyResponse::OAIPromoteResourceShareCreatedFromPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromoteResourceShareCreatedFromPolicyResponse::OAIPromoteResourceShareCreatedFromPolicyResponse() {
    this->initializeModel();
}

OAIPromoteResourceShareCreatedFromPolicyResponse::~OAIPromoteResourceShareCreatedFromPolicyResponse() {}

void OAIPromoteResourceShareCreatedFromPolicyResponse::initializeModel() {

    m_return_value_isSet = false;
    m_return_value_isValid = false;
}

void OAIPromoteResourceShareCreatedFromPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromoteResourceShareCreatedFromPolicyResponse::fromJsonObject(QJsonObject json) {

    m_return_value_isValid = ::OpenAPI::fromJsonValue(m_return_value, json[QString("returnValue")]);
    m_return_value_isSet = !json[QString("returnValue")].isNull() && m_return_value_isValid;
}

QString OAIPromoteResourceShareCreatedFromPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromoteResourceShareCreatedFromPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_return_value_isSet) {
        obj.insert(QString("returnValue"), ::OpenAPI::toJsonValue(m_return_value));
    }
    return obj;
}

bool OAIPromoteResourceShareCreatedFromPolicyResponse::getReturnValue() const {
    return m_return_value;
}
void OAIPromoteResourceShareCreatedFromPolicyResponse::setReturnValue(const bool &return_value) {
    m_return_value = return_value;
    m_return_value_isSet = true;
}

bool OAIPromoteResourceShareCreatedFromPolicyResponse::is_return_value_Set() const{
    return m_return_value_isSet;
}

bool OAIPromoteResourceShareCreatedFromPolicyResponse::is_return_value_Valid() const{
    return m_return_value_isValid;
}

bool OAIPromoteResourceShareCreatedFromPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_return_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromoteResourceShareCreatedFromPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
