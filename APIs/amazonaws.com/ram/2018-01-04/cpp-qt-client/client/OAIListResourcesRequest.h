/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListResourcesRequest.h
 *
 * 
 */

#ifndef OAIListResourcesRequest_H
#define OAIListResourcesRequest_H

#include <QJsonObject>

#include "OAIResourceOwner.h"
#include "OAIResourceRegionScopeFilter.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListResourcesRequest : public OAIObject {
public:
    OAIListResourcesRequest();
    OAIListResourcesRequest(QString json);
    ~OAIListResourcesRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIResourceOwner getResourceOwner() const;
    void setResourceOwner(const OAIResourceOwner &resource_owner);
    bool is_resource_owner_Set() const;
    bool is_resource_owner_Valid() const;

    QString getPrincipal() const;
    void setPrincipal(const QString &principal);
    bool is_principal_Set() const;
    bool is_principal_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QList getResourceArns() const;
    void setResourceArns(const QList &resource_arns);
    bool is_resource_arns_Set() const;
    bool is_resource_arns_Valid() const;

    QList getResourceShareArns() const;
    void setResourceShareArns(const QList &resource_share_arns);
    bool is_resource_share_arns_Set() const;
    bool is_resource_share_arns_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    OAIResourceRegionScopeFilter getResourceRegionScope() const;
    void setResourceRegionScope(const OAIResourceRegionScopeFilter &resource_region_scope);
    bool is_resource_region_scope_Set() const;
    bool is_resource_region_scope_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIResourceOwner m_resource_owner;
    bool m_resource_owner_isSet;
    bool m_resource_owner_isValid;

    QString m_principal;
    bool m_principal_isSet;
    bool m_principal_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QList m_resource_arns;
    bool m_resource_arns_isSet;
    bool m_resource_arns_isValid;

    QList m_resource_share_arns;
    bool m_resource_share_arns_isSet;
    bool m_resource_share_arns_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    OAIResourceRegionScopeFilter m_resource_region_scope;
    bool m_resource_region_scope_isSet;
    bool m_resource_region_scope_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListResourcesRequest)

#endif // OAIListResourcesRequest_H
