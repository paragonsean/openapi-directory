/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPromotePermissionCreatedFromPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPromotePermissionCreatedFromPolicyRequest::OAIPromotePermissionCreatedFromPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPromotePermissionCreatedFromPolicyRequest::OAIPromotePermissionCreatedFromPolicyRequest() {
    this->initializeModel();
}

OAIPromotePermissionCreatedFromPolicyRequest::~OAIPromotePermissionCreatedFromPolicyRequest() {}

void OAIPromotePermissionCreatedFromPolicyRequest::initializeModel() {

    m_permission_arn_isSet = false;
    m_permission_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIPromotePermissionCreatedFromPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPromotePermissionCreatedFromPolicyRequest::fromJsonObject(QJsonObject json) {

    m_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_permission_arn, json[QString("permissionArn")]);
    m_permission_arn_isSet = !json[QString("permissionArn")].isNull() && m_permission_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAIPromotePermissionCreatedFromPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPromotePermissionCreatedFromPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_arn_isSet) {
        obj.insert(QString("permissionArn"), ::OpenAPI::toJsonValue(m_permission_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIPromotePermissionCreatedFromPolicyRequest::getPermissionArn() const {
    return m_permission_arn;
}
void OAIPromotePermissionCreatedFromPolicyRequest::setPermissionArn(const QString &permission_arn) {
    m_permission_arn = permission_arn;
    m_permission_arn_isSet = true;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::is_permission_arn_Set() const{
    return m_permission_arn_isSet;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::is_permission_arn_Valid() const{
    return m_permission_arn_isValid;
}

QString OAIPromotePermissionCreatedFromPolicyRequest::getName() const {
    return m_name;
}
void OAIPromotePermissionCreatedFromPolicyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPromotePermissionCreatedFromPolicyRequest::getClientToken() const {
    return m_client_token;
}
void OAIPromotePermissionCreatedFromPolicyRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPromotePermissionCreatedFromPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_permission_arn_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
