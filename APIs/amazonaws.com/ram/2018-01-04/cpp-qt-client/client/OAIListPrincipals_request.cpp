/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPrincipals_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPrincipals_request::OAIListPrincipals_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPrincipals_request::OAIListPrincipals_request() {
    this->initializeModel();
}

OAIListPrincipals_request::~OAIListPrincipals_request() {}

void OAIListPrincipals_request::initializeModel() {

    m_resource_owner_isSet = false;
    m_resource_owner_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_resource_share_arns_isSet = false;
    m_resource_share_arns_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListPrincipals_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPrincipals_request::fromJsonObject(QJsonObject json) {

    m_resource_owner_isValid = ::OpenAPI::fromJsonValue(m_resource_owner, json[QString("resourceOwner")]);
    m_resource_owner_isSet = !json[QString("resourceOwner")].isNull() && m_resource_owner_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_resource_share_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arns, json[QString("resourceShareArns")]);
    m_resource_share_arns_isSet = !json[QString("resourceShareArns")].isNull() && m_resource_share_arns_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIListPrincipals_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPrincipals_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_owner_isSet) {
        obj.insert(QString("resourceOwner"), ::OpenAPI::toJsonValue(m_resource_owner));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_principals.size() > 0) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_resource_share_arns.size() > 0) {
        obj.insert(QString("resourceShareArns"), ::OpenAPI::toJsonValue(m_resource_share_arns));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListPrincipals_request::getResourceOwner() const {
    return m_resource_owner;
}
void OAIListPrincipals_request::setResourceOwner(const QString &resource_owner) {
    m_resource_owner = resource_owner;
    m_resource_owner_isSet = true;
}

bool OAIListPrincipals_request::is_resource_owner_Set() const{
    return m_resource_owner_isSet;
}

bool OAIListPrincipals_request::is_resource_owner_Valid() const{
    return m_resource_owner_isValid;
}

QString OAIListPrincipals_request::getResourceArn() const {
    return m_resource_arn;
}
void OAIListPrincipals_request::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIListPrincipals_request::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIListPrincipals_request::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList<QString> OAIListPrincipals_request::getPrincipals() const {
    return m_principals;
}
void OAIListPrincipals_request::setPrincipals(const QList<QString> &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIListPrincipals_request::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIListPrincipals_request::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAIListPrincipals_request::getResourceType() const {
    return m_resource_type;
}
void OAIListPrincipals_request::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListPrincipals_request::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListPrincipals_request::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<QString> OAIListPrincipals_request::getResourceShareArns() const {
    return m_resource_share_arns;
}
void OAIListPrincipals_request::setResourceShareArns(const QList<QString> &resource_share_arns) {
    m_resource_share_arns = resource_share_arns;
    m_resource_share_arns_isSet = true;
}

bool OAIListPrincipals_request::is_resource_share_arns_Set() const{
    return m_resource_share_arns_isSet;
}

bool OAIListPrincipals_request::is_resource_share_arns_Valid() const{
    return m_resource_share_arns_isValid;
}

QString OAIListPrincipals_request::getNextToken() const {
    return m_next_token;
}
void OAIListPrincipals_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPrincipals_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPrincipals_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPrincipals_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPrincipals_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPrincipals_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPrincipals_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListPrincipals_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPrincipals_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_owner_isValid && true;
}

} // namespace OpenAPI
