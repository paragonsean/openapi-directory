/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagFilter::OAITagFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagFilter::OAITagFilter() {
    this->initializeModel();
}

OAITagFilter::~OAITagFilter() {}

void OAITagFilter::initializeModel() {

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_tag_values_isSet = false;
    m_tag_values_isValid = false;
}

void OAITagFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagFilter::fromJsonObject(QJsonObject json) {

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("tagKey")]);
    m_tag_key_isSet = !json[QString("tagKey")].isNull() && m_tag_key_isValid;

    m_tag_values_isValid = ::OpenAPI::fromJsonValue(m_tag_values, json[QString("tagValues")]);
    m_tag_values_isSet = !json[QString("tagValues")].isNull() && m_tag_values_isValid;
}

QString OAITagFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_tag_key_isSet) {
        obj.insert(QString("tagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_tag_values.isSet()) {
        obj.insert(QString("tagValues"), ::OpenAPI::toJsonValue(m_tag_values));
    }
    return obj;
}

QString OAITagFilter::getTagKey() const {
    return m_tag_key;
}
void OAITagFilter::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAITagFilter::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAITagFilter::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QList OAITagFilter::getTagValues() const {
    return m_tag_values;
}
void OAITagFilter::setTagValues(const QList &tag_values) {
    m_tag_values = tag_values;
    m_tag_values_isSet = true;
}

bool OAITagFilter::is_tag_values_Set() const{
    return m_tag_values_isSet;
}

bool OAITagFilter::is_tag_values_Valid() const{
    return m_tag_values_isValid;
}

bool OAITagFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
