/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePermissionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePermissionRequest::OAICreatePermissionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePermissionRequest::OAICreatePermissionRequest() {
    this->initializeModel();
}

OAICreatePermissionRequest::~OAICreatePermissionRequest() {}

void OAICreatePermissionRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_policy_template_isSet = false;
    m_policy_template_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreatePermissionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePermissionRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_policy_template_isValid = ::OpenAPI::fromJsonValue(m_policy_template, json[QString("policyTemplate")]);
    m_policy_template_isSet = !json[QString("policyTemplate")].isNull() && m_policy_template_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreatePermissionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePermissionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_policy_template_isSet) {
        obj.insert(QString("policyTemplate"), ::OpenAPI::toJsonValue(m_policy_template));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreatePermissionRequest::getName() const {
    return m_name;
}
void OAICreatePermissionRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreatePermissionRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreatePermissionRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreatePermissionRequest::getResourceType() const {
    return m_resource_type;
}
void OAICreatePermissionRequest::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAICreatePermissionRequest::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAICreatePermissionRequest::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAICreatePermissionRequest::getPolicyTemplate() const {
    return m_policy_template;
}
void OAICreatePermissionRequest::setPolicyTemplate(const QString &policy_template) {
    m_policy_template = policy_template;
    m_policy_template_isSet = true;
}

bool OAICreatePermissionRequest::is_policy_template_Set() const{
    return m_policy_template_isSet;
}

bool OAICreatePermissionRequest::is_policy_template_Valid() const{
    return m_policy_template_isValid;
}

QString OAICreatePermissionRequest::getClientToken() const {
    return m_client_token;
}
void OAICreatePermissionRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreatePermissionRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreatePermissionRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreatePermissionRequest::getTags() const {
    return m_tags;
}
void OAICreatePermissionRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePermissionRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePermissionRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreatePermissionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePermissionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_resource_type_isValid && m_policy_template_isValid && true;
}

} // namespace OpenAPI
