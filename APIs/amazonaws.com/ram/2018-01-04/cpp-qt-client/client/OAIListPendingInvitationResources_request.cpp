/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPendingInvitationResources_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPendingInvitationResources_request::OAIListPendingInvitationResources_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPendingInvitationResources_request::OAIListPendingInvitationResources_request() {
    this->initializeModel();
}

OAIListPendingInvitationResources_request::~OAIListPendingInvitationResources_request() {}

void OAIListPendingInvitationResources_request::initializeModel() {

    m_resource_share_invitation_arn_isSet = false;
    m_resource_share_invitation_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_resource_region_scope_isSet = false;
    m_resource_region_scope_isValid = false;
}

void OAIListPendingInvitationResources_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPendingInvitationResources_request::fromJsonObject(QJsonObject json) {

    m_resource_share_invitation_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_invitation_arn, json[QString("resourceShareInvitationArn")]);
    m_resource_share_invitation_arn_isSet = !json[QString("resourceShareInvitationArn")].isNull() && m_resource_share_invitation_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_resource_region_scope_isValid = ::OpenAPI::fromJsonValue(m_resource_region_scope, json[QString("resourceRegionScope")]);
    m_resource_region_scope_isSet = !json[QString("resourceRegionScope")].isNull() && m_resource_region_scope_isValid;
}

QString OAIListPendingInvitationResources_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPendingInvitationResources_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_invitation_arn_isSet) {
        obj.insert(QString("resourceShareInvitationArn"), ::OpenAPI::toJsonValue(m_resource_share_invitation_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_resource_region_scope_isSet) {
        obj.insert(QString("resourceRegionScope"), ::OpenAPI::toJsonValue(m_resource_region_scope));
    }
    return obj;
}

QString OAIListPendingInvitationResources_request::getResourceShareInvitationArn() const {
    return m_resource_share_invitation_arn;
}
void OAIListPendingInvitationResources_request::setResourceShareInvitationArn(const QString &resource_share_invitation_arn) {
    m_resource_share_invitation_arn = resource_share_invitation_arn;
    m_resource_share_invitation_arn_isSet = true;
}

bool OAIListPendingInvitationResources_request::is_resource_share_invitation_arn_Set() const{
    return m_resource_share_invitation_arn_isSet;
}

bool OAIListPendingInvitationResources_request::is_resource_share_invitation_arn_Valid() const{
    return m_resource_share_invitation_arn_isValid;
}

QString OAIListPendingInvitationResources_request::getNextToken() const {
    return m_next_token;
}
void OAIListPendingInvitationResources_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPendingInvitationResources_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPendingInvitationResources_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListPendingInvitationResources_request::getMaxResults() const {
    return m_max_results;
}
void OAIListPendingInvitationResources_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListPendingInvitationResources_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListPendingInvitationResources_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListPendingInvitationResources_request::getResourceRegionScope() const {
    return m_resource_region_scope;
}
void OAIListPendingInvitationResources_request::setResourceRegionScope(const QString &resource_region_scope) {
    m_resource_region_scope = resource_region_scope;
    m_resource_region_scope_isSet = true;
}

bool OAIListPendingInvitationResources_request::is_resource_region_scope_Set() const{
    return m_resource_region_scope_isSet;
}

bool OAIListPendingInvitationResources_request::is_resource_region_scope_Valid() const{
    return m_resource_region_scope_isValid;
}

bool OAIListPendingInvitationResources_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_invitation_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_region_scope_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPendingInvitationResources_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_share_invitation_arn_isValid && true;
}

} // namespace OpenAPI
