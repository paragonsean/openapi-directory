/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceRegionScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceRegionScope::OAIResourceRegionScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceRegionScope::OAIResourceRegionScope() {
    this->initializeModel();
}

OAIResourceRegionScope::~OAIResourceRegionScope() {}

void OAIResourceRegionScope::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIResourceRegionScope::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIResourceRegionScope::fromJson(QString jsonString) {
    
    if ( jsonString.compare("REGIONAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceRegionScope::REGIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GLOBAL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIResourceRegionScope::GLOBAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIResourceRegionScope::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIResourceRegionScope::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIResourceRegionScope::REGIONAL:
            val = "REGIONAL";
            break;
        case eOAIResourceRegionScope::GLOBAL:
            val = "GLOBAL";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIResourceRegionScope::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIResourceRegionScope::eOAIResourceRegionScope OAIResourceRegionScope::getValue() const {
    return m_value;
}

void OAIResourceRegionScope::setValue(const OAIResourceRegionScope::eOAIResourceRegionScope& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIResourceRegionScope::isSet() const {
    
    return m_value_isSet;
}

bool OAIResourceRegionScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
