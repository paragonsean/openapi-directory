/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateResourceShareRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateResourceShareRequest::OAIAssociateResourceShareRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateResourceShareRequest::OAIAssociateResourceShareRequest() {
    this->initializeModel();
}

OAIAssociateResourceShareRequest::~OAIAssociateResourceShareRequest() {}

void OAIAssociateResourceShareRequest::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIAssociateResourceShareRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateResourceShareRequest::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("resourceArns")]);
    m_resource_arns_isSet = !json[QString("resourceArns")].isNull() && m_resource_arns_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIAssociateResourceShareRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateResourceShareRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_resource_arns.isSet()) {
        obj.insert(QString("resourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_principals.isSet()) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIAssociateResourceShareRequest::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIAssociateResourceShareRequest::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIAssociateResourceShareRequest::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIAssociateResourceShareRequest::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QList OAIAssociateResourceShareRequest::getResourceArns() const {
    return m_resource_arns;
}
void OAIAssociateResourceShareRequest::setResourceArns(const QList &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIAssociateResourceShareRequest::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIAssociateResourceShareRequest::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList OAIAssociateResourceShareRequest::getPrincipals() const {
    return m_principals;
}
void OAIAssociateResourceShareRequest::setPrincipals(const QList &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIAssociateResourceShareRequest::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIAssociateResourceShareRequest::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAIAssociateResourceShareRequest::getClientToken() const {
    return m_client_token;
}
void OAIAssociateResourceShareRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIAssociateResourceShareRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIAssociateResourceShareRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAIAssociateResourceShareRequest::getSources() const {
    return m_sources;
}
void OAIAssociateResourceShareRequest::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIAssociateResourceShareRequest::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIAssociateResourceShareRequest::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIAssociateResourceShareRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateResourceShareRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_share_arn_isValid && true;
}

} // namespace OpenAPI
