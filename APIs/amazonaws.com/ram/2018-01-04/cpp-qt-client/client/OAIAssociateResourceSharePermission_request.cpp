/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssociateResourceSharePermission_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssociateResourceSharePermission_request::OAIAssociateResourceSharePermission_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssociateResourceSharePermission_request::OAIAssociateResourceSharePermission_request() {
    this->initializeModel();
}

OAIAssociateResourceSharePermission_request::~OAIAssociateResourceSharePermission_request() {}

void OAIAssociateResourceSharePermission_request::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_permission_arn_isSet = false;
    m_permission_arn_isValid = false;

    m_replace_isSet = false;
    m_replace_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_permission_version_isSet = false;
    m_permission_version_isValid = false;
}

void OAIAssociateResourceSharePermission_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssociateResourceSharePermission_request::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_permission_arn_isValid = ::OpenAPI::fromJsonValue(m_permission_arn, json[QString("permissionArn")]);
    m_permission_arn_isSet = !json[QString("permissionArn")].isNull() && m_permission_arn_isValid;

    m_replace_isValid = ::OpenAPI::fromJsonValue(m_replace, json[QString("replace")]);
    m_replace_isSet = !json[QString("replace")].isNull() && m_replace_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_permission_version_isValid = ::OpenAPI::fromJsonValue(m_permission_version, json[QString("permissionVersion")]);
    m_permission_version_isSet = !json[QString("permissionVersion")].isNull() && m_permission_version_isValid;
}

QString OAIAssociateResourceSharePermission_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssociateResourceSharePermission_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_permission_arn_isSet) {
        obj.insert(QString("permissionArn"), ::OpenAPI::toJsonValue(m_permission_arn));
    }
    if (m_replace_isSet) {
        obj.insert(QString("replace"), ::OpenAPI::toJsonValue(m_replace));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_permission_version_isSet) {
        obj.insert(QString("permissionVersion"), ::OpenAPI::toJsonValue(m_permission_version));
    }
    return obj;
}

QString OAIAssociateResourceSharePermission_request::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIAssociateResourceSharePermission_request::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIAssociateResourceSharePermission_request::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIAssociateResourceSharePermission_request::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QString OAIAssociateResourceSharePermission_request::getPermissionArn() const {
    return m_permission_arn;
}
void OAIAssociateResourceSharePermission_request::setPermissionArn(const QString &permission_arn) {
    m_permission_arn = permission_arn;
    m_permission_arn_isSet = true;
}

bool OAIAssociateResourceSharePermission_request::is_permission_arn_Set() const{
    return m_permission_arn_isSet;
}

bool OAIAssociateResourceSharePermission_request::is_permission_arn_Valid() const{
    return m_permission_arn_isValid;
}

bool OAIAssociateResourceSharePermission_request::isReplace() const {
    return m_replace;
}
void OAIAssociateResourceSharePermission_request::setReplace(const bool &replace) {
    m_replace = replace;
    m_replace_isSet = true;
}

bool OAIAssociateResourceSharePermission_request::is_replace_Set() const{
    return m_replace_isSet;
}

bool OAIAssociateResourceSharePermission_request::is_replace_Valid() const{
    return m_replace_isValid;
}

QString OAIAssociateResourceSharePermission_request::getClientToken() const {
    return m_client_token;
}
void OAIAssociateResourceSharePermission_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIAssociateResourceSharePermission_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIAssociateResourceSharePermission_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

qint32 OAIAssociateResourceSharePermission_request::getPermissionVersion() const {
    return m_permission_version;
}
void OAIAssociateResourceSharePermission_request::setPermissionVersion(const qint32 &permission_version) {
    m_permission_version = permission_version;
    m_permission_version_isSet = true;
}

bool OAIAssociateResourceSharePermission_request::is_permission_version_Set() const{
    return m_permission_version_isSet;
}

bool OAIAssociateResourceSharePermission_request::is_permission_version_Valid() const{
    return m_permission_version_isValid;
}

bool OAIAssociateResourceSharePermission_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssociateResourceSharePermission_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_share_arn_isValid && m_permission_arn_isValid && true;
}

} // namespace OpenAPI
