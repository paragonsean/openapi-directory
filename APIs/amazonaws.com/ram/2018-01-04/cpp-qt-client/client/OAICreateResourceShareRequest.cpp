/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResourceShareRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResourceShareRequest::OAICreateResourceShareRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResourceShareRequest::OAICreateResourceShareRequest() {
    this->initializeModel();
}

OAICreateResourceShareRequest::~OAICreateResourceShareRequest() {}

void OAICreateResourceShareRequest::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_allow_external_principals_isSet = false;
    m_allow_external_principals_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_permission_arns_isSet = false;
    m_permission_arns_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAICreateResourceShareRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResourceShareRequest::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("resourceArns")]);
    m_resource_arns_isSet = !json[QString("resourceArns")].isNull() && m_resource_arns_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_allow_external_principals_isValid = ::OpenAPI::fromJsonValue(m_allow_external_principals, json[QString("allowExternalPrincipals")]);
    m_allow_external_principals_isSet = !json[QString("allowExternalPrincipals")].isNull() && m_allow_external_principals_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_permission_arns_isValid = ::OpenAPI::fromJsonValue(m_permission_arns, json[QString("permissionArns")]);
    m_permission_arns_isSet = !json[QString("permissionArns")].isNull() && m_permission_arns_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAICreateResourceShareRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResourceShareRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_arns.isSet()) {
        obj.insert(QString("resourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_principals.isSet()) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_allow_external_principals_isSet) {
        obj.insert(QString("allowExternalPrincipals"), ::OpenAPI::toJsonValue(m_allow_external_principals));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_permission_arns.isSet()) {
        obj.insert(QString("permissionArns"), ::OpenAPI::toJsonValue(m_permission_arns));
    }
    if (m_sources.isSet()) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAICreateResourceShareRequest::getName() const {
    return m_name;
}
void OAICreateResourceShareRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateResourceShareRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateResourceShareRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateResourceShareRequest::getResourceArns() const {
    return m_resource_arns;
}
void OAICreateResourceShareRequest::setResourceArns(const QList &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAICreateResourceShareRequest::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAICreateResourceShareRequest::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList OAICreateResourceShareRequest::getPrincipals() const {
    return m_principals;
}
void OAICreateResourceShareRequest::setPrincipals(const QList &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAICreateResourceShareRequest::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAICreateResourceShareRequest::is_principals_Valid() const{
    return m_principals_isValid;
}

QList OAICreateResourceShareRequest::getTags() const {
    return m_tags;
}
void OAICreateResourceShareRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateResourceShareRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateResourceShareRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateResourceShareRequest::getAllowExternalPrincipals() const {
    return m_allow_external_principals;
}
void OAICreateResourceShareRequest::setAllowExternalPrincipals(const bool &allow_external_principals) {
    m_allow_external_principals = allow_external_principals;
    m_allow_external_principals_isSet = true;
}

bool OAICreateResourceShareRequest::is_allow_external_principals_Set() const{
    return m_allow_external_principals_isSet;
}

bool OAICreateResourceShareRequest::is_allow_external_principals_Valid() const{
    return m_allow_external_principals_isValid;
}

QString OAICreateResourceShareRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateResourceShareRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateResourceShareRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateResourceShareRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList OAICreateResourceShareRequest::getPermissionArns() const {
    return m_permission_arns;
}
void OAICreateResourceShareRequest::setPermissionArns(const QList &permission_arns) {
    m_permission_arns = permission_arns;
    m_permission_arns_isSet = true;
}

bool OAICreateResourceShareRequest::is_permission_arns_Set() const{
    return m_permission_arns_isSet;
}

bool OAICreateResourceShareRequest::is_permission_arns_Valid() const{
    return m_permission_arns_isValid;
}

QList OAICreateResourceShareRequest::getSources() const {
    return m_sources;
}
void OAICreateResourceShareRequest::setSources(const QList &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICreateResourceShareRequest::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICreateResourceShareRequest::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAICreateResourceShareRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_external_principals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResourceShareRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
