/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplacePermissionAssociationsWork.h
 *
 * A structure that represents the background work that RAM performs when you invoke the &lt;a&gt;ReplacePermissionAssociations&lt;/a&gt; operation.
 */

#ifndef OAIReplacePermissionAssociationsWork_H
#define OAIReplacePermissionAssociationsWork_H

#include <QJsonObject>

#include "OAIReplacePermissionAssociationsWorkStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReplacePermissionAssociationsWork : public OAIObject {
public:
    OAIReplacePermissionAssociationsWork();
    OAIReplacePermissionAssociationsWork(QString json);
    ~OAIReplacePermissionAssociationsWork() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getFromPermissionArn() const;
    void setFromPermissionArn(const QString &from_permission_arn);
    bool is_from_permission_arn_Set() const;
    bool is_from_permission_arn_Valid() const;

    QString getFromPermissionVersion() const;
    void setFromPermissionVersion(const QString &from_permission_version);
    bool is_from_permission_version_Set() const;
    bool is_from_permission_version_Valid() const;

    QString getToPermissionArn() const;
    void setToPermissionArn(const QString &to_permission_arn);
    bool is_to_permission_arn_Set() const;
    bool is_to_permission_arn_Valid() const;

    QString getToPermissionVersion() const;
    void setToPermissionVersion(const QString &to_permission_version);
    bool is_to_permission_version_Set() const;
    bool is_to_permission_version_Valid() const;

    OAIReplacePermissionAssociationsWorkStatus getStatus() const;
    void setStatus(const OAIReplacePermissionAssociationsWorkStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusMessage() const;
    void setStatusMessage(const QString &status_message);
    bool is_status_message_Set() const;
    bool is_status_message_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_from_permission_arn;
    bool m_from_permission_arn_isSet;
    bool m_from_permission_arn_isValid;

    QString m_from_permission_version;
    bool m_from_permission_version_isSet;
    bool m_from_permission_version_isValid;

    QString m_to_permission_arn;
    bool m_to_permission_arn_isSet;
    bool m_to_permission_arn_isValid;

    QString m_to_permission_version;
    bool m_to_permission_version_isSet;
    bool m_to_permission_version_isValid;

    OAIReplacePermissionAssociationsWorkStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_message;
    bool m_status_message_isSet;
    bool m_status_message_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplacePermissionAssociationsWork)

#endif // OAIReplacePermissionAssociationsWork_H
