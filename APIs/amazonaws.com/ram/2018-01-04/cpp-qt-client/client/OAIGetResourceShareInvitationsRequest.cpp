/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourceShareInvitationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourceShareInvitationsRequest::OAIGetResourceShareInvitationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourceShareInvitationsRequest::OAIGetResourceShareInvitationsRequest() {
    this->initializeModel();
}

OAIGetResourceShareInvitationsRequest::~OAIGetResourceShareInvitationsRequest() {}

void OAIGetResourceShareInvitationsRequest::initializeModel() {

    m_resource_share_invitation_arns_isSet = false;
    m_resource_share_invitation_arns_isValid = false;

    m_resource_share_arns_isSet = false;
    m_resource_share_arns_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIGetResourceShareInvitationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourceShareInvitationsRequest::fromJsonObject(QJsonObject json) {

    m_resource_share_invitation_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_share_invitation_arns, json[QString("resourceShareInvitationArns")]);
    m_resource_share_invitation_arns_isSet = !json[QString("resourceShareInvitationArns")].isNull() && m_resource_share_invitation_arns_isValid;

    m_resource_share_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arns, json[QString("resourceShareArns")]);
    m_resource_share_arns_isSet = !json[QString("resourceShareArns")].isNull() && m_resource_share_arns_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIGetResourceShareInvitationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourceShareInvitationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_invitation_arns.isSet()) {
        obj.insert(QString("resourceShareInvitationArns"), ::OpenAPI::toJsonValue(m_resource_share_invitation_arns));
    }
    if (m_resource_share_arns.isSet()) {
        obj.insert(QString("resourceShareArns"), ::OpenAPI::toJsonValue(m_resource_share_arns));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAIGetResourceShareInvitationsRequest::getResourceShareInvitationArns() const {
    return m_resource_share_invitation_arns;
}
void OAIGetResourceShareInvitationsRequest::setResourceShareInvitationArns(const QList &resource_share_invitation_arns) {
    m_resource_share_invitation_arns = resource_share_invitation_arns;
    m_resource_share_invitation_arns_isSet = true;
}

bool OAIGetResourceShareInvitationsRequest::is_resource_share_invitation_arns_Set() const{
    return m_resource_share_invitation_arns_isSet;
}

bool OAIGetResourceShareInvitationsRequest::is_resource_share_invitation_arns_Valid() const{
    return m_resource_share_invitation_arns_isValid;
}

QList OAIGetResourceShareInvitationsRequest::getResourceShareArns() const {
    return m_resource_share_arns;
}
void OAIGetResourceShareInvitationsRequest::setResourceShareArns(const QList &resource_share_arns) {
    m_resource_share_arns = resource_share_arns;
    m_resource_share_arns_isSet = true;
}

bool OAIGetResourceShareInvitationsRequest::is_resource_share_arns_Set() const{
    return m_resource_share_arns_isSet;
}

bool OAIGetResourceShareInvitationsRequest::is_resource_share_arns_Valid() const{
    return m_resource_share_arns_isValid;
}

QString OAIGetResourceShareInvitationsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetResourceShareInvitationsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetResourceShareInvitationsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetResourceShareInvitationsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIGetResourceShareInvitationsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetResourceShareInvitationsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetResourceShareInvitationsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetResourceShareInvitationsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIGetResourceShareInvitationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_invitation_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_share_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourceShareInvitationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
