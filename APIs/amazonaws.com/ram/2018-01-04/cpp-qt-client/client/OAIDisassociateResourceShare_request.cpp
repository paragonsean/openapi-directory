/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisassociateResourceShare_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisassociateResourceShare_request::OAIDisassociateResourceShare_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisassociateResourceShare_request::OAIDisassociateResourceShare_request() {
    this->initializeModel();
}

OAIDisassociateResourceShare_request::~OAIDisassociateResourceShare_request() {}

void OAIDisassociateResourceShare_request::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIDisassociateResourceShare_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisassociateResourceShare_request::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("resourceArns")]);
    m_resource_arns_isSet = !json[QString("resourceArns")].isNull() && m_resource_arns_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIDisassociateResourceShare_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisassociateResourceShare_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_resource_arns.size() > 0) {
        obj.insert(QString("resourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_principals.size() > 0) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIDisassociateResourceShare_request::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIDisassociateResourceShare_request::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIDisassociateResourceShare_request::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIDisassociateResourceShare_request::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QList<QString> OAIDisassociateResourceShare_request::getResourceArns() const {
    return m_resource_arns;
}
void OAIDisassociateResourceShare_request::setResourceArns(const QList<QString> &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAIDisassociateResourceShare_request::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAIDisassociateResourceShare_request::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList<QString> OAIDisassociateResourceShare_request::getPrincipals() const {
    return m_principals;
}
void OAIDisassociateResourceShare_request::setPrincipals(const QList<QString> &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAIDisassociateResourceShare_request::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAIDisassociateResourceShare_request::is_principals_Valid() const{
    return m_principals_isValid;
}

QString OAIDisassociateResourceShare_request::getClientToken() const {
    return m_client_token;
}
void OAIDisassociateResourceShare_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIDisassociateResourceShare_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIDisassociateResourceShare_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAIDisassociateResourceShare_request::getSources() const {
    return m_sources;
}
void OAIDisassociateResourceShare_request::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIDisassociateResourceShare_request::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIDisassociateResourceShare_request::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIDisassociateResourceShare_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisassociateResourceShare_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_share_arn_isValid && true;
}

} // namespace OpenAPI
