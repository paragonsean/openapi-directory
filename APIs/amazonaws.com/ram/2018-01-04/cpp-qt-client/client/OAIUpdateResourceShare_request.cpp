/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateResourceShare_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateResourceShare_request::OAIUpdateResourceShare_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateResourceShare_request::OAIUpdateResourceShare_request() {
    this->initializeModel();
}

OAIUpdateResourceShare_request::~OAIUpdateResourceShare_request() {}

void OAIUpdateResourceShare_request::initializeModel() {

    m_resource_share_arn_isSet = false;
    m_resource_share_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_allow_external_principals_isSet = false;
    m_allow_external_principals_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;
}

void OAIUpdateResourceShare_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateResourceShare_request::fromJsonObject(QJsonObject json) {

    m_resource_share_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_share_arn, json[QString("resourceShareArn")]);
    m_resource_share_arn_isSet = !json[QString("resourceShareArn")].isNull() && m_resource_share_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_allow_external_principals_isValid = ::OpenAPI::fromJsonValue(m_allow_external_principals, json[QString("allowExternalPrincipals")]);
    m_allow_external_principals_isSet = !json[QString("allowExternalPrincipals")].isNull() && m_allow_external_principals_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;
}

QString OAIUpdateResourceShare_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateResourceShare_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_share_arn_isSet) {
        obj.insert(QString("resourceShareArn"), ::OpenAPI::toJsonValue(m_resource_share_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_allow_external_principals_isSet) {
        obj.insert(QString("allowExternalPrincipals"), ::OpenAPI::toJsonValue(m_allow_external_principals));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    return obj;
}

QString OAIUpdateResourceShare_request::getResourceShareArn() const {
    return m_resource_share_arn;
}
void OAIUpdateResourceShare_request::setResourceShareArn(const QString &resource_share_arn) {
    m_resource_share_arn = resource_share_arn;
    m_resource_share_arn_isSet = true;
}

bool OAIUpdateResourceShare_request::is_resource_share_arn_Set() const{
    return m_resource_share_arn_isSet;
}

bool OAIUpdateResourceShare_request::is_resource_share_arn_Valid() const{
    return m_resource_share_arn_isValid;
}

QString OAIUpdateResourceShare_request::getName() const {
    return m_name;
}
void OAIUpdateResourceShare_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateResourceShare_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateResourceShare_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIUpdateResourceShare_request::isAllowExternalPrincipals() const {
    return m_allow_external_principals;
}
void OAIUpdateResourceShare_request::setAllowExternalPrincipals(const bool &allow_external_principals) {
    m_allow_external_principals = allow_external_principals;
    m_allow_external_principals_isSet = true;
}

bool OAIUpdateResourceShare_request::is_allow_external_principals_Set() const{
    return m_allow_external_principals_isSet;
}

bool OAIUpdateResourceShare_request::is_allow_external_principals_Valid() const{
    return m_allow_external_principals_isValid;
}

QString OAIUpdateResourceShare_request::getClientToken() const {
    return m_client_token;
}
void OAIUpdateResourceShare_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateResourceShare_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateResourceShare_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

bool OAIUpdateResourceShare_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_share_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_external_principals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateResourceShare_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_share_arn_isValid && true;
}

} // namespace OpenAPI
