/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateResourceShare_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateResourceShare_request::OAICreateResourceShare_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateResourceShare_request::OAICreateResourceShare_request() {
    this->initializeModel();
}

OAICreateResourceShare_request::~OAICreateResourceShare_request() {}

void OAICreateResourceShare_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_arns_isSet = false;
    m_resource_arns_isValid = false;

    m_principals_isSet = false;
    m_principals_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_allow_external_principals_isSet = false;
    m_allow_external_principals_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_permission_arns_isSet = false;
    m_permission_arns_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAICreateResourceShare_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateResourceShare_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_arns_isValid = ::OpenAPI::fromJsonValue(m_resource_arns, json[QString("resourceArns")]);
    m_resource_arns_isSet = !json[QString("resourceArns")].isNull() && m_resource_arns_isValid;

    m_principals_isValid = ::OpenAPI::fromJsonValue(m_principals, json[QString("principals")]);
    m_principals_isSet = !json[QString("principals")].isNull() && m_principals_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_allow_external_principals_isValid = ::OpenAPI::fromJsonValue(m_allow_external_principals, json[QString("allowExternalPrincipals")]);
    m_allow_external_principals_isSet = !json[QString("allowExternalPrincipals")].isNull() && m_allow_external_principals_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_permission_arns_isValid = ::OpenAPI::fromJsonValue(m_permission_arns, json[QString("permissionArns")]);
    m_permission_arns_isSet = !json[QString("permissionArns")].isNull() && m_permission_arns_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAICreateResourceShare_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateResourceShare_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_arns.size() > 0) {
        obj.insert(QString("resourceArns"), ::OpenAPI::toJsonValue(m_resource_arns));
    }
    if (m_principals.size() > 0) {
        obj.insert(QString("principals"), ::OpenAPI::toJsonValue(m_principals));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_allow_external_principals_isSet) {
        obj.insert(QString("allowExternalPrincipals"), ::OpenAPI::toJsonValue(m_allow_external_principals));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_permission_arns.size() > 0) {
        obj.insert(QString("permissionArns"), ::OpenAPI::toJsonValue(m_permission_arns));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAICreateResourceShare_request::getName() const {
    return m_name;
}
void OAICreateResourceShare_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateResourceShare_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateResourceShare_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICreateResourceShare_request::getResourceArns() const {
    return m_resource_arns;
}
void OAICreateResourceShare_request::setResourceArns(const QList<QString> &resource_arns) {
    m_resource_arns = resource_arns;
    m_resource_arns_isSet = true;
}

bool OAICreateResourceShare_request::is_resource_arns_Set() const{
    return m_resource_arns_isSet;
}

bool OAICreateResourceShare_request::is_resource_arns_Valid() const{
    return m_resource_arns_isValid;
}

QList<QString> OAICreateResourceShare_request::getPrincipals() const {
    return m_principals;
}
void OAICreateResourceShare_request::setPrincipals(const QList<QString> &principals) {
    m_principals = principals;
    m_principals_isSet = true;
}

bool OAICreateResourceShare_request::is_principals_Set() const{
    return m_principals_isSet;
}

bool OAICreateResourceShare_request::is_principals_Valid() const{
    return m_principals_isValid;
}

QList<OAITag> OAICreateResourceShare_request::getTags() const {
    return m_tags;
}
void OAICreateResourceShare_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateResourceShare_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateResourceShare_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateResourceShare_request::isAllowExternalPrincipals() const {
    return m_allow_external_principals;
}
void OAICreateResourceShare_request::setAllowExternalPrincipals(const bool &allow_external_principals) {
    m_allow_external_principals = allow_external_principals;
    m_allow_external_principals_isSet = true;
}

bool OAICreateResourceShare_request::is_allow_external_principals_Set() const{
    return m_allow_external_principals_isSet;
}

bool OAICreateResourceShare_request::is_allow_external_principals_Valid() const{
    return m_allow_external_principals_isValid;
}

QString OAICreateResourceShare_request::getClientToken() const {
    return m_client_token;
}
void OAICreateResourceShare_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateResourceShare_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateResourceShare_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QList<QString> OAICreateResourceShare_request::getPermissionArns() const {
    return m_permission_arns;
}
void OAICreateResourceShare_request::setPermissionArns(const QList<QString> &permission_arns) {
    m_permission_arns = permission_arns;
    m_permission_arns_isSet = true;
}

bool OAICreateResourceShare_request::is_permission_arns_Set() const{
    return m_permission_arns_isSet;
}

bool OAICreateResourceShare_request::is_permission_arns_Valid() const{
    return m_permission_arns_isValid;
}

QList<QString> OAICreateResourceShare_request::getSources() const {
    return m_sources;
}
void OAICreateResourceShare_request::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICreateResourceShare_request::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICreateResourceShare_request::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAICreateResourceShare_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_external_principals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_arns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateResourceShare_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
