/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListPermissionAssociations_request.h
 *
 * 
 */

#ifndef OAIListPermissionAssociations_request_H
#define OAIListPermissionAssociations_request_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListPermissionAssociations_request : public OAIObject {
public:
    OAIListPermissionAssociations_request();
    OAIListPermissionAssociations_request(QString json);
    ~OAIListPermissionAssociations_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPermissionArn() const;
    void setPermissionArn(const QString &permission_arn);
    bool is_permission_arn_Set() const;
    bool is_permission_arn_Valid() const;

    qint32 getPermissionVersion() const;
    void setPermissionVersion(const qint32 &permission_version);
    bool is_permission_version_Set() const;
    bool is_permission_version_Valid() const;

    QString getAssociationStatus() const;
    void setAssociationStatus(const QString &association_status);
    bool is_association_status_Set() const;
    bool is_association_status_Valid() const;

    QString getResourceType() const;
    void setResourceType(const QString &resource_type);
    bool is_resource_type_Set() const;
    bool is_resource_type_Valid() const;

    QString getFeatureSet() const;
    void setFeatureSet(const QString &feature_set);
    bool is_feature_set_Set() const;
    bool is_feature_set_Valid() const;

    bool isDefaultVersion() const;
    void setDefaultVersion(const bool &default_version);
    bool is_default_version_Set() const;
    bool is_default_version_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_permission_arn;
    bool m_permission_arn_isSet;
    bool m_permission_arn_isValid;

    qint32 m_permission_version;
    bool m_permission_version_isSet;
    bool m_permission_version_isValid;

    QString m_association_status;
    bool m_association_status_isSet;
    bool m_association_status_isValid;

    QString m_resource_type;
    bool m_resource_type_isSet;
    bool m_resource_type_isValid;

    QString m_feature_set;
    bool m_feature_set_isSet;
    bool m_feature_set_isValid;

    bool m_default_version;
    bool m_default_version_isSet;
    bool m_default_version_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListPermissionAssociations_request)

#endif // OAIListPermissionAssociations_request_H
