/**
 * AWS Resource Access Manager
 * <p>This is the <i>Resource Access Manager API Reference</i>. This documentation provides descriptions and syntax for each of the actions and data types in RAM. RAM is a service that helps you securely share your Amazon Web Services resources to other Amazon Web Services accounts. If you use Organizations to manage your accounts, then you can share your resources with your entire organization or to organizational units (OUs). For supported resource types, you can also share resources with individual Identity and Access Management (IAM) roles and users. </p> <p>To learn more about RAM, see the following resources:</p> <ul> <li> <p> <a href=\"http://aws.amazon.com/ram\">Resource Access Manager product page</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/ram/latest/userguide/\">Resource Access Manager User Guide</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-01-04
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReplacePermissionAssociationsWorkResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReplacePermissionAssociationsWorkResponse::OAIListReplacePermissionAssociationsWorkResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReplacePermissionAssociationsWorkResponse::OAIListReplacePermissionAssociationsWorkResponse() {
    this->initializeModel();
}

OAIListReplacePermissionAssociationsWorkResponse::~OAIListReplacePermissionAssociationsWorkResponse() {}

void OAIListReplacePermissionAssociationsWorkResponse::initializeModel() {

    m_replace_permission_associations_works_isSet = false;
    m_replace_permission_associations_works_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListReplacePermissionAssociationsWorkResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReplacePermissionAssociationsWorkResponse::fromJsonObject(QJsonObject json) {

    m_replace_permission_associations_works_isValid = ::OpenAPI::fromJsonValue(m_replace_permission_associations_works, json[QString("replacePermissionAssociationsWorks")]);
    m_replace_permission_associations_works_isSet = !json[QString("replacePermissionAssociationsWorks")].isNull() && m_replace_permission_associations_works_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListReplacePermissionAssociationsWorkResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReplacePermissionAssociationsWorkResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_replace_permission_associations_works.isSet()) {
        obj.insert(QString("replacePermissionAssociationsWorks"), ::OpenAPI::toJsonValue(m_replace_permission_associations_works));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListReplacePermissionAssociationsWorkResponse::getReplacePermissionAssociationsWorks() const {
    return m_replace_permission_associations_works;
}
void OAIListReplacePermissionAssociationsWorkResponse::setReplacePermissionAssociationsWorks(const QList &replace_permission_associations_works) {
    m_replace_permission_associations_works = replace_permission_associations_works;
    m_replace_permission_associations_works_isSet = true;
}

bool OAIListReplacePermissionAssociationsWorkResponse::is_replace_permission_associations_works_Set() const{
    return m_replace_permission_associations_works_isSet;
}

bool OAIListReplacePermissionAssociationsWorkResponse::is_replace_permission_associations_works_Valid() const{
    return m_replace_permission_associations_works_isValid;
}

QString OAIListReplacePermissionAssociationsWorkResponse::getNextToken() const {
    return m_next_token;
}
void OAIListReplacePermissionAssociationsWorkResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListReplacePermissionAssociationsWorkResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListReplacePermissionAssociationsWorkResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListReplacePermissionAssociationsWorkResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_replace_permission_associations_works.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReplacePermissionAssociationsWorkResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
