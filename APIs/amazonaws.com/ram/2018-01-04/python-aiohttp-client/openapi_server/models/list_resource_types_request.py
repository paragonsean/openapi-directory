# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListResourceTypesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, resource_region_scope: str=None):
        """ListResourceTypesRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListResourceTypesRequest.
        :param max_results: The max_results of this ListResourceTypesRequest.
        :param resource_region_scope: The resource_region_scope of this ListResourceTypesRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'resource_region_scope': str
        }

        self.attribute_map = {
            'next_token': 'nextToken',
            'max_results': 'maxResults',
            'resource_region_scope': 'resourceRegionScope'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._resource_region_scope = resource_region_scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListResourceTypesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListResourceTypes_request of this ListResourceTypesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListResourceTypesRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :return: The next_token of this ListResourceTypesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListResourceTypesRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :param next_token: The next_token of this ListResourceTypesRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListResourceTypesRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this ListResourceTypesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListResourceTypesRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this ListResourceTypesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 500:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `500`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def resource_region_scope(self):
        """Gets the resource_region_scope of this ListResourceTypesRequest.

        <p>Specifies that you want the results to include only resources that have the specified scope.</p> <ul> <li> <p> <code>ALL</code> – the results include both global and regional resources or resource types.</p> </li> <li> <p> <code>GLOBAL</code> – the results include only global resources or resource types.</p> </li> <li> <p> <code>REGIONAL</code> – the results include only regional resources or resource types.</p> </li> </ul> <p>The default value is <code>ALL</code>.</p>

        :return: The resource_region_scope of this ListResourceTypesRequest.
        :rtype: str
        """
        return self._resource_region_scope

    @resource_region_scope.setter
    def resource_region_scope(self, resource_region_scope):
        """Sets the resource_region_scope of this ListResourceTypesRequest.

        <p>Specifies that you want the results to include only resources that have the specified scope.</p> <ul> <li> <p> <code>ALL</code> – the results include both global and regional resources or resource types.</p> </li> <li> <p> <code>GLOBAL</code> – the results include only global resources or resource types.</p> </li> <li> <p> <code>REGIONAL</code> – the results include only regional resources or resource types.</p> </li> </ul> <p>The default value is <code>ALL</code>.</p>

        :param resource_region_scope: The resource_region_scope of this ListResourceTypesRequest.
        :type resource_region_scope: str
        """
        allowed_values = ["ALL", "REGIONAL", "GLOBAL"]  # noqa: E501
        if resource_region_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_region_scope` ({0}), must be one of {1}"
                .format(resource_region_scope, allowed_values)
            )

        self._resource_region_scope = resource_region_scope
