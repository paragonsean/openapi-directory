# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListReplacePermissionAssociationsWorkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, work_ids: List[str]=None, status: str=None, next_token: str=None, max_results: int=None):
        """ListReplacePermissionAssociationsWorkRequest - a model defined in OpenAPI

        :param work_ids: The work_ids of this ListReplacePermissionAssociationsWorkRequest.
        :param status: The status of this ListReplacePermissionAssociationsWorkRequest.
        :param next_token: The next_token of this ListReplacePermissionAssociationsWorkRequest.
        :param max_results: The max_results of this ListReplacePermissionAssociationsWorkRequest.
        """
        self.openapi_types = {
            'work_ids': List[str],
            'status': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'work_ids': 'workIds',
            'status': 'status',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._work_ids = work_ids
        self._status = status
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListReplacePermissionAssociationsWorkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListReplacePermissionAssociationsWork_request of this ListReplacePermissionAssociationsWorkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def work_ids(self):
        """Gets the work_ids of this ListReplacePermissionAssociationsWorkRequest.

        A list of IDs. These values come from the <code>id</code>field of the <code>replacePermissionAssociationsWork</code>structure returned by the <a>ReplacePermissionAssociations</a> operation. 

        :return: The work_ids of this ListReplacePermissionAssociationsWorkRequest.
        :rtype: List[str]
        """
        return self._work_ids

    @work_ids.setter
    def work_ids(self, work_ids):
        """Sets the work_ids of this ListReplacePermissionAssociationsWorkRequest.

        A list of IDs. These values come from the <code>id</code>field of the <code>replacePermissionAssociationsWork</code>structure returned by the <a>ReplacePermissionAssociations</a> operation. 

        :param work_ids: The work_ids of this ListReplacePermissionAssociationsWorkRequest.
        :type work_ids: List[str]
        """

        self._work_ids = work_ids

    @property
    def status(self):
        """Gets the status of this ListReplacePermissionAssociationsWorkRequest.

        Specifies that you want to see only the details about requests with a status that matches this value.

        :return: The status of this ListReplacePermissionAssociationsWorkRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ListReplacePermissionAssociationsWorkRequest.

        Specifies that you want to see only the details about requests with a status that matches this value.

        :param status: The status of this ListReplacePermissionAssociationsWorkRequest.
        :type status: str
        """
        allowed_values = ["IN_PROGRESS", "COMPLETED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def next_token(self):
        """Gets the next_token of this ListReplacePermissionAssociationsWorkRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :return: The next_token of this ListReplacePermissionAssociationsWorkRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListReplacePermissionAssociationsWorkRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :param next_token: The next_token of this ListReplacePermissionAssociationsWorkRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListReplacePermissionAssociationsWorkRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this ListReplacePermissionAssociationsWorkRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListReplacePermissionAssociationsWorkRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this ListReplacePermissionAssociationsWorkRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 500:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `500`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
