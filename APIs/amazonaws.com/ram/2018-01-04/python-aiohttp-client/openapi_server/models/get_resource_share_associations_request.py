# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetResourceShareAssociationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, association_type: str=None, resource_share_arns: List[str]=None, resource_arn: str=None, principal: str=None, association_status: str=None, next_token: str=None, max_results: int=None):
        """GetResourceShareAssociationsRequest - a model defined in OpenAPI

        :param association_type: The association_type of this GetResourceShareAssociationsRequest.
        :param resource_share_arns: The resource_share_arns of this GetResourceShareAssociationsRequest.
        :param resource_arn: The resource_arn of this GetResourceShareAssociationsRequest.
        :param principal: The principal of this GetResourceShareAssociationsRequest.
        :param association_status: The association_status of this GetResourceShareAssociationsRequest.
        :param next_token: The next_token of this GetResourceShareAssociationsRequest.
        :param max_results: The max_results of this GetResourceShareAssociationsRequest.
        """
        self.openapi_types = {
            'association_type': str,
            'resource_share_arns': List[str],
            'resource_arn': str,
            'principal': str,
            'association_status': str,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'association_type': 'associationType',
            'resource_share_arns': 'resourceShareArns',
            'resource_arn': 'resourceArn',
            'principal': 'principal',
            'association_status': 'associationStatus',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._association_type = association_type
        self._resource_share_arns = resource_share_arns
        self._resource_arn = resource_arn
        self._principal = principal
        self._association_status = association_status
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetResourceShareAssociationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetResourceShareAssociations_request of this GetResourceShareAssociationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def association_type(self):
        """Gets the association_type of this GetResourceShareAssociationsRequest.

        <p>Specifies whether you want to retrieve the associations that involve a specified resource or principal.</p> <ul> <li> <p> <code>PRINCIPAL</code> – list the principals whose associations you want to see.</p> </li> <li> <p> <code>RESOURCE</code> – list the resources whose associations you want to see.</p> </li> </ul>

        :return: The association_type of this GetResourceShareAssociationsRequest.
        :rtype: str
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this GetResourceShareAssociationsRequest.

        <p>Specifies whether you want to retrieve the associations that involve a specified resource or principal.</p> <ul> <li> <p> <code>PRINCIPAL</code> – list the principals whose associations you want to see.</p> </li> <li> <p> <code>RESOURCE</code> – list the resources whose associations you want to see.</p> </li> </ul>

        :param association_type: The association_type of this GetResourceShareAssociationsRequest.
        :type association_type: str
        """
        allowed_values = ["PRINCIPAL", "RESOURCE"]  # noqa: E501
        if association_type not in allowed_values:
            raise ValueError(
                "Invalid value for `association_type` ({0}), must be one of {1}"
                .format(association_type, allowed_values)
            )

        self._association_type = association_type

    @property
    def resource_share_arns(self):
        """Gets the resource_share_arns of this GetResourceShareAssociationsRequest.

        Specifies a list of <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> of the resource share whose associations you want to retrieve.

        :return: The resource_share_arns of this GetResourceShareAssociationsRequest.
        :rtype: List[str]
        """
        return self._resource_share_arns

    @resource_share_arns.setter
    def resource_share_arns(self, resource_share_arns):
        """Sets the resource_share_arns of this GetResourceShareAssociationsRequest.

        Specifies a list of <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> of the resource share whose associations you want to retrieve.

        :param resource_share_arns: The resource_share_arns of this GetResourceShareAssociationsRequest.
        :type resource_share_arns: List[str]
        """

        self._resource_share_arns = resource_share_arns

    @property
    def resource_arn(self):
        """Gets the resource_arn of this GetResourceShareAssociationsRequest.

        <p>Specifies the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Name (ARN)</a> of a resource whose resource shares you want to retrieve.</p> <p>You cannot specify this parameter if the association type is <code>PRINCIPAL</code>.</p>

        :return: The resource_arn of this GetResourceShareAssociationsRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this GetResourceShareAssociationsRequest.

        <p>Specifies the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Name (ARN)</a> of a resource whose resource shares you want to retrieve.</p> <p>You cannot specify this parameter if the association type is <code>PRINCIPAL</code>.</p>

        :param resource_arn: The resource_arn of this GetResourceShareAssociationsRequest.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn

    @property
    def principal(self):
        """Gets the principal of this GetResourceShareAssociationsRequest.

        <p>Specifies the ID of the principal whose resource shares you want to retrieve. This can be an Amazon Web Services account ID, an organization ID, an organizational unit ID, or the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Name (ARN)</a> of an individual IAM role or user.</p> <p>You cannot specify this parameter if the association type is <code>RESOURCE</code>.</p>

        :return: The principal of this GetResourceShareAssociationsRequest.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this GetResourceShareAssociationsRequest.

        <p>Specifies the ID of the principal whose resource shares you want to retrieve. This can be an Amazon Web Services account ID, an organization ID, an organizational unit ID, or the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Name (ARN)</a> of an individual IAM role or user.</p> <p>You cannot specify this parameter if the association type is <code>RESOURCE</code>.</p>

        :param principal: The principal of this GetResourceShareAssociationsRequest.
        :type principal: str
        """

        self._principal = principal

    @property
    def association_status(self):
        """Gets the association_status of this GetResourceShareAssociationsRequest.

        Specifies that you want to retrieve only associations that have this status.

        :return: The association_status of this GetResourceShareAssociationsRequest.
        :rtype: str
        """
        return self._association_status

    @association_status.setter
    def association_status(self, association_status):
        """Sets the association_status of this GetResourceShareAssociationsRequest.

        Specifies that you want to retrieve only associations that have this status.

        :param association_status: The association_status of this GetResourceShareAssociationsRequest.
        :type association_status: str
        """
        allowed_values = ["ASSOCIATING", "ASSOCIATED", "FAILED", "DISASSOCIATING", "DISASSOCIATED"]  # noqa: E501
        if association_status not in allowed_values:
            raise ValueError(
                "Invalid value for `association_status` ({0}), must be one of {1}"
                .format(association_status, allowed_values)
            )

        self._association_status = association_status

    @property
    def next_token(self):
        """Gets the next_token of this GetResourceShareAssociationsRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :return: The next_token of this GetResourceShareAssociationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetResourceShareAssociationsRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :param next_token: The next_token of this GetResourceShareAssociationsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this GetResourceShareAssociationsRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this GetResourceShareAssociationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetResourceShareAssociationsRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this GetResourceShareAssociationsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 500:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `500`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
