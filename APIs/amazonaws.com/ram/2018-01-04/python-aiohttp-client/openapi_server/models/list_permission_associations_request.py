# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPermissionAssociationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permission_arn: str=None, permission_version: int=None, association_status: str=None, resource_type: str=None, feature_set: str=None, default_version: bool=None, next_token: str=None, max_results: int=None):
        """ListPermissionAssociationsRequest - a model defined in OpenAPI

        :param permission_arn: The permission_arn of this ListPermissionAssociationsRequest.
        :param permission_version: The permission_version of this ListPermissionAssociationsRequest.
        :param association_status: The association_status of this ListPermissionAssociationsRequest.
        :param resource_type: The resource_type of this ListPermissionAssociationsRequest.
        :param feature_set: The feature_set of this ListPermissionAssociationsRequest.
        :param default_version: The default_version of this ListPermissionAssociationsRequest.
        :param next_token: The next_token of this ListPermissionAssociationsRequest.
        :param max_results: The max_results of this ListPermissionAssociationsRequest.
        """
        self.openapi_types = {
            'permission_arn': str,
            'permission_version': int,
            'association_status': str,
            'resource_type': str,
            'feature_set': str,
            'default_version': bool,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'permission_arn': 'permissionArn',
            'permission_version': 'permissionVersion',
            'association_status': 'associationStatus',
            'resource_type': 'resourceType',
            'feature_set': 'featureSet',
            'default_version': 'defaultVersion',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._permission_arn = permission_arn
        self._permission_version = permission_version
        self._association_status = association_status
        self._resource_type = resource_type
        self._feature_set = feature_set
        self._default_version = default_version
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPermissionAssociationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPermissionAssociations_request of this ListPermissionAssociationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission_arn(self):
        """Gets the permission_arn of this ListPermissionAssociationsRequest.

        Specifies the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Name (ARN)</a> of the managed permission.

        :return: The permission_arn of this ListPermissionAssociationsRequest.
        :rtype: str
        """
        return self._permission_arn

    @permission_arn.setter
    def permission_arn(self, permission_arn):
        """Sets the permission_arn of this ListPermissionAssociationsRequest.

        Specifies the <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Name (ARN)</a> of the managed permission.

        :param permission_arn: The permission_arn of this ListPermissionAssociationsRequest.
        :type permission_arn: str
        """

        self._permission_arn = permission_arn

    @property
    def permission_version(self):
        """Gets the permission_version of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that use this version of the managed permission. If you don't provide a value for this parameter, then the operation returns information about associations with resource shares that use any version of the managed permission.

        :return: The permission_version of this ListPermissionAssociationsRequest.
        :rtype: int
        """
        return self._permission_version

    @permission_version.setter
    def permission_version(self, permission_version):
        """Sets the permission_version of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that use this version of the managed permission. If you don't provide a value for this parameter, then the operation returns information about associations with resource shares that use any version of the managed permission.

        :param permission_version: The permission_version of this ListPermissionAssociationsRequest.
        :type permission_version: int
        """

        self._permission_version = permission_version

    @property
    def association_status(self):
        """Gets the association_status of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that match this status.

        :return: The association_status of this ListPermissionAssociationsRequest.
        :rtype: str
        """
        return self._association_status

    @association_status.setter
    def association_status(self, association_status):
        """Sets the association_status of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that match this status.

        :param association_status: The association_status of this ListPermissionAssociationsRequest.
        :type association_status: str
        """
        allowed_values = ["ASSOCIATING", "ASSOCIATED", "FAILED", "DISASSOCIATING", "DISASSOCIATED"]  # noqa: E501
        if association_status not in allowed_values:
            raise ValueError(
                "Invalid value for `association_status` ({0}), must be one of {1}"
                .format(association_status, allowed_values)
            )

        self._association_status = association_status

    @property
    def resource_type(self):
        """Gets the resource_type of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that include at least one resource of this resource type.

        :return: The resource_type of this ListPermissionAssociationsRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that include at least one resource of this resource type.

        :param resource_type: The resource_type of this ListPermissionAssociationsRequest.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def feature_set(self):
        """Gets the feature_set of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that have a <code>featureSet</code> with this value.

        :return: The feature_set of this ListPermissionAssociationsRequest.
        :rtype: str
        """
        return self._feature_set

    @feature_set.setter
    def feature_set(self, feature_set):
        """Sets the feature_set of this ListPermissionAssociationsRequest.

        Specifies that you want to list only those associations with resource shares that have a <code>featureSet</code> with this value.

        :param feature_set: The feature_set of this ListPermissionAssociationsRequest.
        :type feature_set: str
        """
        allowed_values = ["CREATED_FROM_POLICY", "PROMOTING_TO_STANDARD", "STANDARD"]  # noqa: E501
        if feature_set not in allowed_values:
            raise ValueError(
                "Invalid value for `feature_set` ({0}), must be one of {1}"
                .format(feature_set, allowed_values)
            )

        self._feature_set = feature_set

    @property
    def default_version(self):
        """Gets the default_version of this ListPermissionAssociationsRequest.

        <p>When <code>true</code>, specifies that you want to list only those associations with resource shares that use the default version of the specified managed permission.</p> <p>When <code>false</code> (the default value), lists associations with resource shares that use any version of the specified managed permission.</p>

        :return: The default_version of this ListPermissionAssociationsRequest.
        :rtype: bool
        """
        return self._default_version

    @default_version.setter
    def default_version(self, default_version):
        """Sets the default_version of this ListPermissionAssociationsRequest.

        <p>When <code>true</code>, specifies that you want to list only those associations with resource shares that use the default version of the specified managed permission.</p> <p>When <code>false</code> (the default value), lists associations with resource shares that use any version of the specified managed permission.</p>

        :param default_version: The default_version of this ListPermissionAssociationsRequest.
        :type default_version: bool
        """

        self._default_version = default_version

    @property
    def next_token(self):
        """Gets the next_token of this ListPermissionAssociationsRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :return: The next_token of this ListPermissionAssociationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPermissionAssociationsRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :param next_token: The next_token of this ListPermissionAssociationsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListPermissionAssociationsRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this ListPermissionAssociationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListPermissionAssociationsRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this ListPermissionAssociationsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 500:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `500`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
