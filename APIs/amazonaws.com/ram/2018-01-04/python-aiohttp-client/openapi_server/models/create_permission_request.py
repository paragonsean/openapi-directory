# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreatePermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, resource_type: str=None, policy_template: str=None, client_token: str=None, tags: List[Tag]=None):
        """CreatePermissionRequest - a model defined in OpenAPI

        :param name: The name of this CreatePermissionRequest.
        :param resource_type: The resource_type of this CreatePermissionRequest.
        :param policy_template: The policy_template of this CreatePermissionRequest.
        :param client_token: The client_token of this CreatePermissionRequest.
        :param tags: The tags of this CreatePermissionRequest.
        """
        self.openapi_types = {
            'name': str,
            'resource_type': str,
            'policy_template': str,
            'client_token': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'name': 'name',
            'resource_type': 'resourceType',
            'policy_template': 'policyTemplate',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._name = name
        self._resource_type = resource_type
        self._policy_template = policy_template
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePermission_request of this CreatePermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreatePermissionRequest.

        Specifies the name of the customer managed permission. The name must be unique within the Amazon Web Services Region.

        :return: The name of this CreatePermissionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreatePermissionRequest.

        Specifies the name of the customer managed permission. The name must be unique within the Amazon Web Services Region.

        :param name: The name of this CreatePermissionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 36:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `36`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'[\w.-]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\w.-]*/`")

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this CreatePermissionRequest.

        <p>Specifies the name of the resource type that this customer managed permission applies to.</p> <p>The format is <code> <i>&lt;service-code&gt;</i>:<i>&lt;resource-type&gt;</i> </code> and is not case sensitive. For example, to specify an Amazon EC2 Subnet, you can use the string <code>ec2:subnet</code>. To see the list of valid values for this parameter, query the <a>ListResourceTypes</a> operation.</p>

        :return: The resource_type of this CreatePermissionRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CreatePermissionRequest.

        <p>Specifies the name of the resource type that this customer managed permission applies to.</p> <p>The format is <code> <i>&lt;service-code&gt;</i>:<i>&lt;resource-type&gt;</i> </code> and is not case sensitive. For example, to specify an Amazon EC2 Subnet, you can use the string <code>ec2:subnet</code>. To see the list of valid values for this parameter, query the <a>ListResourceTypes</a> operation.</p>

        :param resource_type: The resource_type of this CreatePermissionRequest.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def policy_template(self):
        """Gets the policy_template of this CreatePermissionRequest.

        <p>A string in JSON format string that contains the following elements of a resource-based policy:</p> <ul> <li> <p> <b>Effect</b>: must be set to <code>ALLOW</code>.</p> </li> <li> <p> <b>Action</b>: specifies the actions that are allowed by this customer managed permission. The list must contain only actions that are supported by the specified resource type. For a list of all actions supported by each resource type, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html\">Actions, resources, and condition keys for Amazon Web Services services</a> in the <i>Identity and Access Management User Guide</i>.</p> </li> <li> <p> <b>Condition</b>: (optional) specifies conditional parameters that must evaluate to true when a user attempts an action for that action to be allowed. For more information about the Condition element, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\">IAM policies: Condition element</a> in the <i>Identity and Access Management User Guide</i>.</p> </li> </ul> <p>This template can't include either the <code>Resource</code> or <code>Principal</code> elements. Those are both filled in by RAM when it instantiates the resource-based policy on each resource shared using this managed permission. The <code>Resource</code> comes from the ARN of the specific resource that you are sharing. The <code>Principal</code> comes from the list of identities added to the resource share.</p>

        :return: The policy_template of this CreatePermissionRequest.
        :rtype: str
        """
        return self._policy_template

    @policy_template.setter
    def policy_template(self, policy_template):
        """Sets the policy_template of this CreatePermissionRequest.

        <p>A string in JSON format string that contains the following elements of a resource-based policy:</p> <ul> <li> <p> <b>Effect</b>: must be set to <code>ALLOW</code>.</p> </li> <li> <p> <b>Action</b>: specifies the actions that are allowed by this customer managed permission. The list must contain only actions that are supported by the specified resource type. For a list of all actions supported by each resource type, see <a href=\"https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html\">Actions, resources, and condition keys for Amazon Web Services services</a> in the <i>Identity and Access Management User Guide</i>.</p> </li> <li> <p> <b>Condition</b>: (optional) specifies conditional parameters that must evaluate to true when a user attempts an action for that action to be allowed. For more information about the Condition element, see <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html\">IAM policies: Condition element</a> in the <i>Identity and Access Management User Guide</i>.</p> </li> </ul> <p>This template can't include either the <code>Resource</code> or <code>Principal</code> elements. Those are both filled in by RAM when it instantiates the resource-based policy on each resource shared using this managed permission. The <code>Resource</code> comes from the ARN of the specific resource that you are sharing. The <code>Principal</code> comes from the list of identities added to the resource share.</p>

        :param policy_template: The policy_template of this CreatePermissionRequest.
        :type policy_template: str
        """
        if policy_template is None:
            raise ValueError("Invalid value for `policy_template`, must not be `None`")

        self._policy_template = policy_template

    @property
    def client_token(self):
        """Gets the client_token of this CreatePermissionRequest.

        <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href=\"https://wikipedia.org/wiki/Universally_unique_identifier\">UUID type of value.</a>.</p> <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p> <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>

        :return: The client_token of this CreatePermissionRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreatePermissionRequest.

        <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href=\"https://wikipedia.org/wiki/Universally_unique_identifier\">UUID type of value.</a>.</p> <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p> <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>

        :param client_token: The client_token of this CreatePermissionRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreatePermissionRequest.

        Specifies a list of one or more tag key and value pairs to attach to the permission.

        :return: The tags of this CreatePermissionRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePermissionRequest.

        Specifies a list of one or more tag key and value pairs to attach to the permission.

        :param tags: The tags of this CreatePermissionRequest.
        :type tags: List[Tag]
        """

        self._tags = tags
