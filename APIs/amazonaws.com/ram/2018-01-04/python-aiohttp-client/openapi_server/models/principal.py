# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Principal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, resource_share_arn: str=None, creation_time: datetime=None, last_updated_time: datetime=None, external: bool=None):
        """Principal - a model defined in OpenAPI

        :param id: The id of this Principal.
        :param resource_share_arn: The resource_share_arn of this Principal.
        :param creation_time: The creation_time of this Principal.
        :param last_updated_time: The last_updated_time of this Principal.
        :param external: The external of this Principal.
        """
        self.openapi_types = {
            'id': str,
            'resource_share_arn': str,
            'creation_time': datetime,
            'last_updated_time': datetime,
            'external': bool
        }

        self.attribute_map = {
            'id': 'id',
            'resource_share_arn': 'resourceShareArn',
            'creation_time': 'creationTime',
            'last_updated_time': 'lastUpdatedTime',
            'external': 'external'
        }

        self._id = id
        self._resource_share_arn = resource_share_arn
        self._creation_time = creation_time
        self._last_updated_time = last_updated_time
        self._external = external

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Principal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Principal of this Principal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Principal.


        :return: The id of this Principal.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Principal.


        :param id: The id of this Principal.
        :type id: str
        """

        self._id = id

    @property
    def resource_share_arn(self):
        """Gets the resource_share_arn of this Principal.


        :return: The resource_share_arn of this Principal.
        :rtype: str
        """
        return self._resource_share_arn

    @resource_share_arn.setter
    def resource_share_arn(self, resource_share_arn):
        """Sets the resource_share_arn of this Principal.


        :param resource_share_arn: The resource_share_arn of this Principal.
        :type resource_share_arn: str
        """

        self._resource_share_arn = resource_share_arn

    @property
    def creation_time(self):
        """Gets the creation_time of this Principal.


        :return: The creation_time of this Principal.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Principal.


        :param creation_time: The creation_time of this Principal.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this Principal.


        :return: The last_updated_time of this Principal.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this Principal.


        :param last_updated_time: The last_updated_time of this Principal.
        :type last_updated_time: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def external(self):
        """Gets the external of this Principal.


        :return: The external of this Principal.
        :rtype: bool
        """
        return self._external

    @external.setter
    def external(self, external):
        """Sets the external of this Principal.


        :param external: The external of this Principal.
        :type external: bool
        """

        self._external = external
