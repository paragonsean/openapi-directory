# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListPermissionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, next_token: str=None, max_results: int=None, permission_type: str=None):
        """ListPermissionsRequest - a model defined in OpenAPI

        :param resource_type: The resource_type of this ListPermissionsRequest.
        :param next_token: The next_token of this ListPermissionsRequest.
        :param max_results: The max_results of this ListPermissionsRequest.
        :param permission_type: The permission_type of this ListPermissionsRequest.
        """
        self.openapi_types = {
            'resource_type': str,
            'next_token': str,
            'max_results': int,
            'permission_type': str
        }

        self.attribute_map = {
            'resource_type': 'resourceType',
            'next_token': 'nextToken',
            'max_results': 'maxResults',
            'permission_type': 'permissionType'
        }

        self._resource_type = resource_type
        self._next_token = next_token
        self._max_results = max_results
        self._permission_type = permission_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListPermissionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListPermissions_request of this ListPermissionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this ListPermissionsRequest.

        <p>Specifies that you want to list only those permissions that apply to the specified resource type. This parameter is not case sensitive.</p> <p>For example, to list only permissions that apply to Amazon EC2 subnets, specify <code>ec2:subnet</code>. You can use the <a>ListResourceTypes</a> operation to get the specific string required.</p>

        :return: The resource_type of this ListPermissionsRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ListPermissionsRequest.

        <p>Specifies that you want to list only those permissions that apply to the specified resource type. This parameter is not case sensitive.</p> <p>For example, to list only permissions that apply to Amazon EC2 subnets, specify <code>ec2:subnet</code>. You can use the <a>ListResourceTypes</a> operation to get the specific string required.</p>

        :param resource_type: The resource_type of this ListPermissionsRequest.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def next_token(self):
        """Gets the next_token of this ListPermissionsRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :return: The next_token of this ListPermissionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListPermissionsRequest.

        Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.

        :param next_token: The next_token of this ListPermissionsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListPermissionsRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :return: The max_results of this ListPermissionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListPermissionsRequest.

        Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.

        :param max_results: The max_results of this ListPermissionsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 500:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `500`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def permission_type(self):
        """Gets the permission_type of this ListPermissionsRequest.

        <p>Specifies that you want to list only permissions of this type:</p> <ul> <li> <p> <code>AWS</code> – returns only Amazon Web Services managed permissions.</p> </li> <li> <p> <code>LOCAL</code> – returns only customer managed permissions</p> </li> <li> <p> <code>ALL</code> – returns both Amazon Web Services managed permissions and customer managed permissions.</p> </li> </ul> <p>If you don't specify this parameter, the default is <code>All</code>.</p>

        :return: The permission_type of this ListPermissionsRequest.
        :rtype: str
        """
        return self._permission_type

    @permission_type.setter
    def permission_type(self, permission_type):
        """Sets the permission_type of this ListPermissionsRequest.

        <p>Specifies that you want to list only permissions of this type:</p> <ul> <li> <p> <code>AWS</code> – returns only Amazon Web Services managed permissions.</p> </li> <li> <p> <code>LOCAL</code> – returns only customer managed permissions</p> </li> <li> <p> <code>ALL</code> – returns both Amazon Web Services managed permissions and customer managed permissions.</p> </li> </ul> <p>If you don't specify this parameter, the default is <code>All</code>.</p>

        :param permission_type: The permission_type of this ListPermissionsRequest.
        :type permission_type: str
        """
        allowed_values = ["ALL", "AWS_MANAGED", "CUSTOMER_MANAGED"]  # noqa: E501
        if permission_type not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_type` ({0}), must be one of {1}"
                .format(permission_type, allowed_values)
            )

        self._permission_type = permission_type
