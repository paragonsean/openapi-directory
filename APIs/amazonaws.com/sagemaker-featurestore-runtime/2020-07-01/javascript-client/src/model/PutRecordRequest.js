/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeatureValue from './FeatureValue';
import PutRecordRequestTtlDuration from './PutRecordRequestTtlDuration';
import TargetStore from './TargetStore';

/**
 * The PutRecordRequest model module.
 * @module model/PutRecordRequest
 * @version 2020-07-01
 */
class PutRecordRequest {
    /**
     * Constructs a new <code>PutRecordRequest</code>.
     * @alias module:model/PutRecordRequest
     * @param record {Array.<module:model/FeatureValue>} <p>List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:</p> <ul> <li> <p>Use <code>GetRecord</code> to retrieve the latest record.</p> </li> <li> <p>Update the record returned from <code>GetRecord</code>. </p> </li> <li> <p>Use <code>PutRecord</code> to update feature values.</p> </li> </ul>
     */
    constructor(record) { 
        
        PutRecordRequest.initialize(this, record);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, record) { 
        obj['Record'] = record;
    }

    /**
     * Constructs a <code>PutRecordRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutRecordRequest} obj Optional instance to populate.
     * @return {module:model/PutRecordRequest} The populated <code>PutRecordRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutRecordRequest();

            if (data.hasOwnProperty('Record')) {
                obj['Record'] = ApiClient.convertToType(data['Record'], [FeatureValue]);
            }
            if (data.hasOwnProperty('TargetStores')) {
                obj['TargetStores'] = ApiClient.convertToType(data['TargetStores'], [TargetStore]);
            }
            if (data.hasOwnProperty('TtlDuration')) {
                obj['TtlDuration'] = PutRecordRequestTtlDuration.constructFromObject(data['TtlDuration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutRecordRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutRecordRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutRecordRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['Record']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Record'])) {
                throw new Error("Expected the field `Record` to be an array in the JSON data but got " + data['Record']);
            }
            // validate the optional field `Record` (array)
            for (const item of data['Record']) {
                FeatureValue.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TargetStores'])) {
            throw new Error("Expected the field `TargetStores` to be an array in the JSON data but got " + data['TargetStores']);
        }
        // validate the optional field `TtlDuration`
        if (data['TtlDuration']) { // data not null
          PutRecordRequestTtlDuration.validateJSON(data['TtlDuration']);
        }

        return true;
    }


}

PutRecordRequest.RequiredProperties = ["Record"];

/**
 * <p>List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:</p> <ul> <li> <p>Use <code>GetRecord</code> to retrieve the latest record.</p> </li> <li> <p>Update the record returned from <code>GetRecord</code>. </p> </li> <li> <p>Use <code>PutRecord</code> to update feature values.</p> </li> </ul>
 * @member {Array.<module:model/FeatureValue>} Record
 */
PutRecordRequest.prototype['Record'] = undefined;

/**
 * A list of stores to which you're adding the record. By default, Feature Store adds the record to all of the stores that you're using for the <code>FeatureGroup</code>.
 * @member {Array.<module:model/TargetStore>} TargetStores
 */
PutRecordRequest.prototype['TargetStores'] = undefined;

/**
 * @member {module:model/PutRecordRequestTtlDuration} TtlDuration
 */
PutRecordRequest.prototype['TtlDuration'] = undefined;






export default PutRecordRequest;

