/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeatureValue model module.
 * @module model/FeatureValue
 * @version 2020-07-01
 */
class FeatureValue {
    /**
     * Constructs a new <code>FeatureValue</code>.
     * The value associated with a feature.
     * @alias module:model/FeatureValue
     * @param featureName {String} 
     * @param valueAsString {String} 
     */
    constructor(featureName, valueAsString) { 
        
        FeatureValue.initialize(this, featureName, valueAsString);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, featureName, valueAsString) { 
        obj['FeatureName'] = featureName;
        obj['ValueAsString'] = valueAsString;
    }

    /**
     * Constructs a <code>FeatureValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureValue} obj Optional instance to populate.
     * @return {module:model/FeatureValue} The populated <code>FeatureValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureValue();

            if (data.hasOwnProperty('FeatureName')) {
                obj['FeatureName'] = ApiClient.convertToType(data['FeatureName'], 'String');
            }
            if (data.hasOwnProperty('ValueAsString')) {
                obj['ValueAsString'] = ApiClient.convertToType(data['ValueAsString'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureValue</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeatureValue.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `FeatureName`
        if (data['FeatureName']) { // data not null
          String.validateJSON(data['FeatureName']);
        }
        // validate the optional field `ValueAsString`
        if (data['ValueAsString']) { // data not null
          String.validateJSON(data['ValueAsString']);
        }

        return true;
    }


}

FeatureValue.RequiredProperties = ["FeatureName", "ValueAsString"];

/**
 * @member {String} FeatureName
 */
FeatureValue.prototype['FeatureName'] = undefined;

/**
 * @member {String} ValueAsString
 */
FeatureValue.prototype['ValueAsString'] = undefined;






export default FeatureValue;

