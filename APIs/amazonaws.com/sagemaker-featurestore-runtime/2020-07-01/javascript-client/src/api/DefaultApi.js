/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchGetRecordRequest from '../model/BatchGetRecordRequest';
import BatchGetRecordResponse from '../model/BatchGetRecordResponse';
import GetRecordResponse from '../model/GetRecordResponse';
import PutRecordRequest from '../model/PutRecordRequest';
import TargetStore from '../model/TargetStore';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-07-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetRecord operation.
     * @callback module:api/DefaultApi~batchGetRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a batch of <code>Records</code> from a <code>FeatureGroup</code>.
     * @param {module:model/BatchGetRecordRequest} batchGetRecordRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetRecordResponse}
     */
    batchGetRecord(batchGetRecordRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetRecordRequest;
      // verify the required parameter 'batchGetRecordRequest' is set
      if (batchGetRecordRequest === undefined || batchGetRecordRequest === null) {
        throw new Error("Missing the required parameter 'batchGetRecordRequest' when calling batchGetRecord");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetRecordResponse;
      return this.apiClient.callApi(
        '/BatchGetRecord', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecord operation.
     * @callback module:api/DefaultApi~deleteRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a <code>Record</code> from a <code>FeatureGroup</code> in the <code>OnlineStore</code>. Feature Store supports both <code>SoftDelete</code> and <code>HardDelete</code>. For <code>SoftDelete</code> (default), feature columns are set to <code>null</code> and the record is no longer retrievable by <code>GetRecord</code> or <code>BatchGetRecord</code>. For <code>HardDelete</code>, the complete <code>Record</code> is removed from the <code>OnlineStore</code>. In both cases, Feature Store appends the deleted record marker to the <code>OfflineStore</code> with feature values set to <code>null</code>, <code>is_deleted</code> value set to <code>True</code>, and <code>EventTime</code> set to the delete input <code>EventTime</code>.</p> <p>Note that the <code>EventTime</code> specified in <code>DeleteRecord</code> should be set later than the <code>EventTime</code> of the existing record in the <code>OnlineStore</code> for that <code>RecordIdentifer</code>. If it is not, the deletion does not occur:</p> <ul> <li> <p>For <code>SoftDelete</code>, the existing (undeleted) record remains in the <code>OnlineStore</code>, though the delete record marker is still written to the <code>OfflineStore</code>.</p> </li> <li> <p> <code>HardDelete</code> returns <code>EventTime</code>: <code>400 ValidationException</code> to indicate that the delete operation failed. No delete record marker is written to the <code>OfflineStore</code>.</p> </li> </ul>
     * @param {String} featureGroupName The name or Amazon Resource Name (ARN) of the feature group to delete the record from. 
     * @param {String} recordIdentifierValueAsString The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. 
     * @param {String} eventTime Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<module:model/TargetStore>} [targetStores] A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.
     * @param {module:model/String} [deletionMode] The name of the deletion mode for deleting the record. By default, the deletion mode is set to <code>SoftDelete</code>.
     * @param {module:api/DefaultApi~deleteRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecord(featureGroupName, recordIdentifierValueAsString, eventTime, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'featureGroupName' is set
      if (featureGroupName === undefined || featureGroupName === null) {
        throw new Error("Missing the required parameter 'featureGroupName' when calling deleteRecord");
      }
      // verify the required parameter 'recordIdentifierValueAsString' is set
      if (recordIdentifierValueAsString === undefined || recordIdentifierValueAsString === null) {
        throw new Error("Missing the required parameter 'recordIdentifierValueAsString' when calling deleteRecord");
      }
      // verify the required parameter 'eventTime' is set
      if (eventTime === undefined || eventTime === null) {
        throw new Error("Missing the required parameter 'eventTime' when calling deleteRecord");
      }

      let pathParams = {
        'FeatureGroupName': featureGroupName
      };
      let queryParams = {
        'RecordIdentifierValueAsString': recordIdentifierValueAsString,
        'EventTime': eventTime,
        'TargetStores': this.apiClient.buildCollectionParam(opts['targetStores'], 'multi'),
        'DeletionMode': opts['deletionMode']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/FeatureGroup/{FeatureGroupName}#RecordIdentifierValueAsString&EventTime', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecord operation.
     * @callback module:api/DefaultApi~getRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecordResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use for <code>OnlineStore</code> serving from a <code>FeatureStore</code>. Only the latest records stored in the <code>OnlineStore</code> can be retrieved. If no Record with <code>RecordIdentifierValue</code> is found, then an empty result is returned. 
     * @param {String} featureGroupName The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record.
     * @param {String} recordIdentifierValueAsString The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>. 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Array.<String>} [featureName] List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.
     * @param {module:model/String} [expirationTimeResponse] Parameter to request <code>ExpiresAt</code> in response. If <code>Enabled</code>, <code>GetRecord</code> will return the value of <code>ExpiresAt</code>, if it is not null. If <code>Disabled</code> and null, <code>GetRecord</code> will return null.
     * @param {module:api/DefaultApi~getRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecordResponse}
     */
    getRecord(featureGroupName, recordIdentifierValueAsString, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'featureGroupName' is set
      if (featureGroupName === undefined || featureGroupName === null) {
        throw new Error("Missing the required parameter 'featureGroupName' when calling getRecord");
      }
      // verify the required parameter 'recordIdentifierValueAsString' is set
      if (recordIdentifierValueAsString === undefined || recordIdentifierValueAsString === null) {
        throw new Error("Missing the required parameter 'recordIdentifierValueAsString' when calling getRecord");
      }

      let pathParams = {
        'FeatureGroupName': featureGroupName
      };
      let queryParams = {
        'RecordIdentifierValueAsString': recordIdentifierValueAsString,
        'FeatureName': this.apiClient.buildCollectionParam(opts['featureName'], 'multi'),
        'ExpirationTimeResponse': opts['expirationTimeResponse']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecordResponse;
      return this.apiClient.callApi(
        '/FeatureGroup/{FeatureGroupName}#RecordIdentifierValueAsString', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putRecord operation.
     * @callback module:api/DefaultApi~putRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>The <code>PutRecord</code> API is used to ingest a list of <code>Records</code> into your feature group. </p> <p>If a new record’s <code>EventTime</code> is greater, the new record is written to both the <code>OnlineStore</code> and <code>OfflineStore</code>. Otherwise, the record is a historic record and it is written only to the <code>OfflineStore</code>. </p> <p>You can specify the ingestion to be applied to the <code>OnlineStore</code>, <code>OfflineStore</code>, or both by using the <code>TargetStores</code> request parameter. </p> <p>You can set the ingested record to expire at a given time to live (TTL) duration after the record’s event time, <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>, by specifying the <code>TtlDuration</code> parameter. A record level <code>TtlDuration</code> is set when specifying the <code>TtlDuration</code> parameter using the <code>PutRecord</code> API call. If the input <code>TtlDuration</code> is <code>null</code> or unspecified, <code>TtlDuration</code> is set to the default feature group level <code>TtlDuration</code>. A record level <code>TtlDuration</code> supersedes the group level <code>TtlDuration</code>.</p>
     * @param {String} featureGroupName The name or Amazon Resource Name (ARN) of the feature group that you want to insert the record into.
     * @param {module:model/PutRecordRequest} putRecordRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putRecord(featureGroupName, putRecordRequest, opts, callback) {
      opts = opts || {};
      let postBody = putRecordRequest;
      // verify the required parameter 'featureGroupName' is set
      if (featureGroupName === undefined || featureGroupName === null) {
        throw new Error("Missing the required parameter 'featureGroupName' when calling putRecord");
      }
      // verify the required parameter 'putRecordRequest' is set
      if (putRecordRequest === undefined || putRecordRequest === null) {
        throw new Error("Missing the required parameter 'putRecordRequest' when calling putRecord");
      }

      let pathParams = {
        'FeatureGroupName': featureGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/FeatureGroup/{FeatureGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
