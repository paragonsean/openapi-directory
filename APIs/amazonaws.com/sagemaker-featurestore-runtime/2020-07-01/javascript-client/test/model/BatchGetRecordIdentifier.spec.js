/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonSageMakerFeatureStoreRuntime);
  }
}(this, function(expect, AmazonSageMakerFeatureStoreRuntime) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonSageMakerFeatureStoreRuntime.BatchGetRecordIdentifier();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BatchGetRecordIdentifier', function() {
    it('should create an instance of BatchGetRecordIdentifier', function() {
      // uncomment below and update the code to test BatchGetRecordIdentifier
      //var instance = new AmazonSageMakerFeatureStoreRuntime.BatchGetRecordIdentifier();
      //expect(instance).to.be.a(AmazonSageMakerFeatureStoreRuntime.BatchGetRecordIdentifier);
    });

    it('should have the property featureGroupName (base name: "FeatureGroupName")', function() {
      // uncomment below and update the code to test the property featureGroupName
      //var instance = new AmazonSageMakerFeatureStoreRuntime.BatchGetRecordIdentifier();
      //expect(instance).to.be();
    });

    it('should have the property recordIdentifiersValueAsString (base name: "RecordIdentifiersValueAsString")', function() {
      // uncomment below and update the code to test the property recordIdentifiersValueAsString
      //var instance = new AmazonSageMakerFeatureStoreRuntime.BatchGetRecordIdentifier();
      //expect(instance).to.be();
    });

    it('should have the property featureNames (base name: "FeatureNames")', function() {
      // uncomment below and update the code to test the property featureNames
      //var instance = new AmazonSageMakerFeatureStoreRuntime.BatchGetRecordIdentifier();
      //expect(instance).to.be();
    });

  });

}));
