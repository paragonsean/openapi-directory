/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetRecord_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetRecord_request::OAIBatchGetRecord_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetRecord_request::OAIBatchGetRecord_request() {
    this->initializeModel();
}

OAIBatchGetRecord_request::~OAIBatchGetRecord_request() {}

void OAIBatchGetRecord_request::initializeModel() {

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_expiration_time_response_isSet = false;
    m_expiration_time_response_isValid = false;
}

void OAIBatchGetRecord_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetRecord_request::fromJsonObject(QJsonObject json) {

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("Identifiers")]);
    m_identifiers_isSet = !json[QString("Identifiers")].isNull() && m_identifiers_isValid;

    m_expiration_time_response_isValid = ::OpenAPI::fromJsonValue(m_expiration_time_response, json[QString("ExpirationTimeResponse")]);
    m_expiration_time_response_isSet = !json[QString("ExpirationTimeResponse")].isNull() && m_expiration_time_response_isValid;
}

QString OAIBatchGetRecord_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetRecord_request::asJsonObject() const {
    QJsonObject obj;
    if (m_identifiers.size() > 0) {
        obj.insert(QString("Identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_expiration_time_response_isSet) {
        obj.insert(QString("ExpirationTimeResponse"), ::OpenAPI::toJsonValue(m_expiration_time_response));
    }
    return obj;
}

QList<OAIBatchGetRecordIdentifier> OAIBatchGetRecord_request::getIdentifiers() const {
    return m_identifiers;
}
void OAIBatchGetRecord_request::setIdentifiers(const QList<OAIBatchGetRecordIdentifier> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIBatchGetRecord_request::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIBatchGetRecord_request::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QString OAIBatchGetRecord_request::getExpirationTimeResponse() const {
    return m_expiration_time_response;
}
void OAIBatchGetRecord_request::setExpirationTimeResponse(const QString &expiration_time_response) {
    m_expiration_time_response = expiration_time_response;
    m_expiration_time_response_isSet = true;
}

bool OAIBatchGetRecord_request::is_expiration_time_response_Set() const{
    return m_expiration_time_response_isSet;
}

bool OAIBatchGetRecord_request::is_expiration_time_response_Valid() const{
    return m_expiration_time_response_isValid;
}

bool OAIBatchGetRecord_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_response_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetRecord_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_identifiers_isValid && true;
}

} // namespace OpenAPI
