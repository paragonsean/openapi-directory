/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITtlDurationUnit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITtlDurationUnit::OAITtlDurationUnit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITtlDurationUnit::OAITtlDurationUnit() {
    this->initializeModel();
}

OAITtlDurationUnit::~OAITtlDurationUnit() {}

void OAITtlDurationUnit::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITtlDurationUnit::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITtlDurationUnit::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Seconds", Qt::CaseInsensitive) == 0) {
        m_value = eOAITtlDurationUnit::SECONDS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Minutes", Qt::CaseInsensitive) == 0) {
        m_value = eOAITtlDurationUnit::MINUTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Hours", Qt::CaseInsensitive) == 0) {
        m_value = eOAITtlDurationUnit::HOURS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Days", Qt::CaseInsensitive) == 0) {
        m_value = eOAITtlDurationUnit::DAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Weeks", Qt::CaseInsensitive) == 0) {
        m_value = eOAITtlDurationUnit::WEEKS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITtlDurationUnit::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITtlDurationUnit::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITtlDurationUnit::SECONDS:
            val = "Seconds";
            break;
        case eOAITtlDurationUnit::MINUTES:
            val = "Minutes";
            break;
        case eOAITtlDurationUnit::HOURS:
            val = "Hours";
            break;
        case eOAITtlDurationUnit::DAYS:
            val = "Days";
            break;
        case eOAITtlDurationUnit::WEEKS:
            val = "Weeks";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITtlDurationUnit::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITtlDurationUnit::eOAITtlDurationUnit OAITtlDurationUnit::getValue() const {
    return m_value;
}

void OAITtlDurationUnit::setValue(const OAITtlDurationUnit::eOAITtlDurationUnit& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITtlDurationUnit::isSet() const {
    
    return m_value_isSet;
}

bool OAITtlDurationUnit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
