/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutRecordRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutRecordRequest::OAIPutRecordRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutRecordRequest::OAIPutRecordRequest() {
    this->initializeModel();
}

OAIPutRecordRequest::~OAIPutRecordRequest() {}

void OAIPutRecordRequest::initializeModel() {

    m_record_isSet = false;
    m_record_isValid = false;

    m_target_stores_isSet = false;
    m_target_stores_isValid = false;

    m_ttl_duration_isSet = false;
    m_ttl_duration_isValid = false;
}

void OAIPutRecordRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutRecordRequest::fromJsonObject(QJsonObject json) {

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("Record")]);
    m_record_isSet = !json[QString("Record")].isNull() && m_record_isValid;

    m_target_stores_isValid = ::OpenAPI::fromJsonValue(m_target_stores, json[QString("TargetStores")]);
    m_target_stores_isSet = !json[QString("TargetStores")].isNull() && m_target_stores_isValid;

    m_ttl_duration_isValid = ::OpenAPI::fromJsonValue(m_ttl_duration, json[QString("TtlDuration")]);
    m_ttl_duration_isSet = !json[QString("TtlDuration")].isNull() && m_ttl_duration_isValid;
}

QString OAIPutRecordRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutRecordRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_record.isSet()) {
        obj.insert(QString("Record"), ::OpenAPI::toJsonValue(m_record));
    }
    if (m_target_stores.isSet()) {
        obj.insert(QString("TargetStores"), ::OpenAPI::toJsonValue(m_target_stores));
    }
    if (m_ttl_duration.isSet()) {
        obj.insert(QString("TtlDuration"), ::OpenAPI::toJsonValue(m_ttl_duration));
    }
    return obj;
}

QList OAIPutRecordRequest::getRecord() const {
    return m_record;
}
void OAIPutRecordRequest::setRecord(const QList &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAIPutRecordRequest::is_record_Set() const{
    return m_record_isSet;
}

bool OAIPutRecordRequest::is_record_Valid() const{
    return m_record_isValid;
}

QList OAIPutRecordRequest::getTargetStores() const {
    return m_target_stores;
}
void OAIPutRecordRequest::setTargetStores(const QList &target_stores) {
    m_target_stores = target_stores;
    m_target_stores_isSet = true;
}

bool OAIPutRecordRequest::is_target_stores_Set() const{
    return m_target_stores_isSet;
}

bool OAIPutRecordRequest::is_target_stores_Valid() const{
    return m_target_stores_isValid;
}

OAIPutRecordRequest_TtlDuration OAIPutRecordRequest::getTtlDuration() const {
    return m_ttl_duration;
}
void OAIPutRecordRequest::setTtlDuration(const OAIPutRecordRequest_TtlDuration &ttl_duration) {
    m_ttl_duration = ttl_duration;
    m_ttl_duration_isSet = true;
}

bool OAIPutRecordRequest::is_ttl_duration_Set() const{
    return m_ttl_duration_isSet;
}

bool OAIPutRecordRequest::is_ttl_duration_Valid() const{
    return m_ttl_duration_isValid;
}

bool OAIPutRecordRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_stores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_duration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutRecordRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_record_isValid && true;
}

} // namespace OpenAPI
