/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetRecordResultDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetRecordResultDetail::OAIBatchGetRecordResultDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetRecordResultDetail::OAIBatchGetRecordResultDetail() {
    this->initializeModel();
}

OAIBatchGetRecordResultDetail::~OAIBatchGetRecordResultDetail() {}

void OAIBatchGetRecordResultDetail::initializeModel() {

    m_feature_group_name_isSet = false;
    m_feature_group_name_isValid = false;

    m_record_identifier_value_as_string_isSet = false;
    m_record_identifier_value_as_string_isValid = false;

    m_record_isSet = false;
    m_record_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;
}

void OAIBatchGetRecordResultDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetRecordResultDetail::fromJsonObject(QJsonObject json) {

    m_feature_group_name_isValid = ::OpenAPI::fromJsonValue(m_feature_group_name, json[QString("FeatureGroupName")]);
    m_feature_group_name_isSet = !json[QString("FeatureGroupName")].isNull() && m_feature_group_name_isValid;

    m_record_identifier_value_as_string_isValid = ::OpenAPI::fromJsonValue(m_record_identifier_value_as_string, json[QString("RecordIdentifierValueAsString")]);
    m_record_identifier_value_as_string_isSet = !json[QString("RecordIdentifierValueAsString")].isNull() && m_record_identifier_value_as_string_isValid;

    m_record_isValid = ::OpenAPI::fromJsonValue(m_record, json[QString("Record")]);
    m_record_isSet = !json[QString("Record")].isNull() && m_record_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("ExpiresAt")]);
    m_expires_at_isSet = !json[QString("ExpiresAt")].isNull() && m_expires_at_isValid;
}

QString OAIBatchGetRecordResultDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetRecordResultDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_group_name_isSet) {
        obj.insert(QString("FeatureGroupName"), ::OpenAPI::toJsonValue(m_feature_group_name));
    }
    if (m_record_identifier_value_as_string_isSet) {
        obj.insert(QString("RecordIdentifierValueAsString"), ::OpenAPI::toJsonValue(m_record_identifier_value_as_string));
    }
    if (m_record.isSet()) {
        obj.insert(QString("Record"), ::OpenAPI::toJsonValue(m_record));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("ExpiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    return obj;
}

QString OAIBatchGetRecordResultDetail::getFeatureGroupName() const {
    return m_feature_group_name;
}
void OAIBatchGetRecordResultDetail::setFeatureGroupName(const QString &feature_group_name) {
    m_feature_group_name = feature_group_name;
    m_feature_group_name_isSet = true;
}

bool OAIBatchGetRecordResultDetail::is_feature_group_name_Set() const{
    return m_feature_group_name_isSet;
}

bool OAIBatchGetRecordResultDetail::is_feature_group_name_Valid() const{
    return m_feature_group_name_isValid;
}

QString OAIBatchGetRecordResultDetail::getRecordIdentifierValueAsString() const {
    return m_record_identifier_value_as_string;
}
void OAIBatchGetRecordResultDetail::setRecordIdentifierValueAsString(const QString &record_identifier_value_as_string) {
    m_record_identifier_value_as_string = record_identifier_value_as_string;
    m_record_identifier_value_as_string_isSet = true;
}

bool OAIBatchGetRecordResultDetail::is_record_identifier_value_as_string_Set() const{
    return m_record_identifier_value_as_string_isSet;
}

bool OAIBatchGetRecordResultDetail::is_record_identifier_value_as_string_Valid() const{
    return m_record_identifier_value_as_string_isValid;
}

QList OAIBatchGetRecordResultDetail::getRecord() const {
    return m_record;
}
void OAIBatchGetRecordResultDetail::setRecord(const QList &record) {
    m_record = record;
    m_record_isSet = true;
}

bool OAIBatchGetRecordResultDetail::is_record_Set() const{
    return m_record_isSet;
}

bool OAIBatchGetRecordResultDetail::is_record_Valid() const{
    return m_record_isValid;
}

QString OAIBatchGetRecordResultDetail::getExpiresAt() const {
    return m_expires_at;
}
void OAIBatchGetRecordResultDetail::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIBatchGetRecordResultDetail::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIBatchGetRecordResultDetail::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIBatchGetRecordResultDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_identifier_value_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetRecordResultDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feature_group_name_isValid && m_record_identifier_value_as_string_isValid && m_record_isValid && true;
}

} // namespace OpenAPI
