/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureValue::OAIFeatureValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureValue::OAIFeatureValue() {
    this->initializeModel();
}

OAIFeatureValue::~OAIFeatureValue() {}

void OAIFeatureValue::initializeModel() {

    m_feature_name_isSet = false;
    m_feature_name_isValid = false;

    m_value_as_string_isSet = false;
    m_value_as_string_isValid = false;
}

void OAIFeatureValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureValue::fromJsonObject(QJsonObject json) {

    m_feature_name_isValid = ::OpenAPI::fromJsonValue(m_feature_name, json[QString("FeatureName")]);
    m_feature_name_isSet = !json[QString("FeatureName")].isNull() && m_feature_name_isValid;

    m_value_as_string_isValid = ::OpenAPI::fromJsonValue(m_value_as_string, json[QString("ValueAsString")]);
    m_value_as_string_isSet = !json[QString("ValueAsString")].isNull() && m_value_as_string_isValid;
}

QString OAIFeatureValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureValue::asJsonObject() const {
    QJsonObject obj;
    if (m_feature_name_isSet) {
        obj.insert(QString("FeatureName"), ::OpenAPI::toJsonValue(m_feature_name));
    }
    if (m_value_as_string_isSet) {
        obj.insert(QString("ValueAsString"), ::OpenAPI::toJsonValue(m_value_as_string));
    }
    return obj;
}

QString OAIFeatureValue::getFeatureName() const {
    return m_feature_name;
}
void OAIFeatureValue::setFeatureName(const QString &feature_name) {
    m_feature_name = feature_name;
    m_feature_name_isSet = true;
}

bool OAIFeatureValue::is_feature_name_Set() const{
    return m_feature_name_isSet;
}

bool OAIFeatureValue::is_feature_name_Valid() const{
    return m_feature_name_isValid;
}

QString OAIFeatureValue::getValueAsString() const {
    return m_value_as_string;
}
void OAIFeatureValue::setValueAsString(const QString &value_as_string) {
    m_value_as_string = value_as_string;
    m_value_as_string_isSet = true;
}

bool OAIFeatureValue::is_value_as_string_Set() const{
    return m_value_as_string_isSet;
}

bool OAIFeatureValue::is_value_as_string_Valid() const{
    return m_value_as_string_isValid;
}

bool OAIFeatureValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feature_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_as_string_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feature_name_isValid && m_value_as_string_isValid && true;
}

} // namespace OpenAPI
