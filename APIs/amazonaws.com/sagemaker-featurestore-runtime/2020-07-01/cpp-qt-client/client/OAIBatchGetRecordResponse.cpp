/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetRecordResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetRecordResponse::OAIBatchGetRecordResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetRecordResponse::OAIBatchGetRecordResponse() {
    this->initializeModel();
}

OAIBatchGetRecordResponse::~OAIBatchGetRecordResponse() {}

void OAIBatchGetRecordResponse::initializeModel() {

    m_records_isSet = false;
    m_records_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_unprocessed_identifiers_isSet = false;
    m_unprocessed_identifiers_isValid = false;
}

void OAIBatchGetRecordResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetRecordResponse::fromJsonObject(QJsonObject json) {

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("Records")]);
    m_records_isSet = !json[QString("Records")].isNull() && m_records_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_unprocessed_identifiers_isValid = ::OpenAPI::fromJsonValue(m_unprocessed_identifiers, json[QString("UnprocessedIdentifiers")]);
    m_unprocessed_identifiers_isSet = !json[QString("UnprocessedIdentifiers")].isNull() && m_unprocessed_identifiers_isValid;
}

QString OAIBatchGetRecordResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetRecordResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_records.isSet()) {
        obj.insert(QString("Records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_unprocessed_identifiers.isSet()) {
        obj.insert(QString("UnprocessedIdentifiers"), ::OpenAPI::toJsonValue(m_unprocessed_identifiers));
    }
    return obj;
}

QList OAIBatchGetRecordResponse::getRecords() const {
    return m_records;
}
void OAIBatchGetRecordResponse::setRecords(const QList &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIBatchGetRecordResponse::is_records_Set() const{
    return m_records_isSet;
}

bool OAIBatchGetRecordResponse::is_records_Valid() const{
    return m_records_isValid;
}

QList OAIBatchGetRecordResponse::getErrors() const {
    return m_errors;
}
void OAIBatchGetRecordResponse::setErrors(const QList &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIBatchGetRecordResponse::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIBatchGetRecordResponse::is_errors_Valid() const{
    return m_errors_isValid;
}

QList OAIBatchGetRecordResponse::getUnprocessedIdentifiers() const {
    return m_unprocessed_identifiers;
}
void OAIBatchGetRecordResponse::setUnprocessedIdentifiers(const QList &unprocessed_identifiers) {
    m_unprocessed_identifiers = unprocessed_identifiers;
    m_unprocessed_identifiers_isSet = true;
}

bool OAIBatchGetRecordResponse::is_unprocessed_identifiers_Set() const{
    return m_unprocessed_identifiers_isSet;
}

bool OAIBatchGetRecordResponse::is_unprocessed_identifiers_Valid() const{
    return m_unprocessed_identifiers_isValid;
}

bool OAIBatchGetRecordResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unprocessed_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetRecordResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_records_isValid && m_errors_isValid && m_unprocessed_identifiers_isValid && true;
}

} // namespace OpenAPI
