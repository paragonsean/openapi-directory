/**
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutRecord_request_TtlDuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutRecord_request_TtlDuration::OAIPutRecord_request_TtlDuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutRecord_request_TtlDuration::OAIPutRecord_request_TtlDuration() {
    this->initializeModel();
}

OAIPutRecord_request_TtlDuration::~OAIPutRecord_request_TtlDuration() {}

void OAIPutRecord_request_TtlDuration::initializeModel() {

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPutRecord_request_TtlDuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutRecord_request_TtlDuration::fromJsonObject(QJsonObject json) {

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("Unit")]);
    m_unit_isSet = !json[QString("Unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIPutRecord_request_TtlDuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutRecord_request_TtlDuration::asJsonObject() const {
    QJsonObject obj;
    if (m_unit.isSet()) {
        obj.insert(QString("Unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAITtlDurationUnit OAIPutRecord_request_TtlDuration::getUnit() const {
    return m_unit;
}
void OAIPutRecord_request_TtlDuration::setUnit(const OAITtlDurationUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIPutRecord_request_TtlDuration::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIPutRecord_request_TtlDuration::is_unit_Valid() const{
    return m_unit_isValid;
}

qint32 OAIPutRecord_request_TtlDuration::getValue() const {
    return m_value;
}
void OAIPutRecord_request_TtlDuration::setValue(const qint32 &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPutRecord_request_TtlDuration::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPutRecord_request_TtlDuration::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPutRecord_request_TtlDuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutRecord_request_TtlDuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
