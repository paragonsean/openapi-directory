# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetRecordResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, records: List=None, errors: List=None, unprocessed_identifiers: List=None):
        """BatchGetRecordResponse - a model defined in OpenAPI

        :param records: The records of this BatchGetRecordResponse.
        :param errors: The errors of this BatchGetRecordResponse.
        :param unprocessed_identifiers: The unprocessed_identifiers of this BatchGetRecordResponse.
        """
        self.openapi_types = {
            'records': List,
            'errors': List,
            'unprocessed_identifiers': List
        }

        self.attribute_map = {
            'records': 'Records',
            'errors': 'Errors',
            'unprocessed_identifiers': 'UnprocessedIdentifiers'
        }

        self._records = records
        self._errors = errors
        self._unprocessed_identifiers = unprocessed_identifiers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetRecordResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetRecordResponse of this BatchGetRecordResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def records(self):
        """Gets the records of this BatchGetRecordResponse.


        :return: The records of this BatchGetRecordResponse.
        :rtype: List
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this BatchGetRecordResponse.


        :param records: The records of this BatchGetRecordResponse.
        :type records: List
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")

        self._records = records

    @property
    def errors(self):
        """Gets the errors of this BatchGetRecordResponse.


        :return: The errors of this BatchGetRecordResponse.
        :rtype: List
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this BatchGetRecordResponse.


        :param errors: The errors of this BatchGetRecordResponse.
        :type errors: List
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def unprocessed_identifiers(self):
        """Gets the unprocessed_identifiers of this BatchGetRecordResponse.


        :return: The unprocessed_identifiers of this BatchGetRecordResponse.
        :rtype: List
        """
        return self._unprocessed_identifiers

    @unprocessed_identifiers.setter
    def unprocessed_identifiers(self, unprocessed_identifiers):
        """Sets the unprocessed_identifiers of this BatchGetRecordResponse.


        :param unprocessed_identifiers: The unprocessed_identifiers of this BatchGetRecordResponse.
        :type unprocessed_identifiers: List
        """
        if unprocessed_identifiers is None:
            raise ValueError("Invalid value for `unprocessed_identifiers`, must not be `None`")

        self._unprocessed_identifiers = unprocessed_identifiers
