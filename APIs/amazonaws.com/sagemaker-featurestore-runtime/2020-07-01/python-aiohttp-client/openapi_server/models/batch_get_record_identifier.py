# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetRecordIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_group_name: str=None, record_identifiers_value_as_string: List=None, feature_names: List=None):
        """BatchGetRecordIdentifier - a model defined in OpenAPI

        :param feature_group_name: The feature_group_name of this BatchGetRecordIdentifier.
        :param record_identifiers_value_as_string: The record_identifiers_value_as_string of this BatchGetRecordIdentifier.
        :param feature_names: The feature_names of this BatchGetRecordIdentifier.
        """
        self.openapi_types = {
            'feature_group_name': str,
            'record_identifiers_value_as_string': List,
            'feature_names': List
        }

        self.attribute_map = {
            'feature_group_name': 'FeatureGroupName',
            'record_identifiers_value_as_string': 'RecordIdentifiersValueAsString',
            'feature_names': 'FeatureNames'
        }

        self._feature_group_name = feature_group_name
        self._record_identifiers_value_as_string = record_identifiers_value_as_string
        self._feature_names = feature_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetRecordIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetRecordIdentifier of this BatchGetRecordIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_group_name(self):
        """Gets the feature_group_name of this BatchGetRecordIdentifier.


        :return: The feature_group_name of this BatchGetRecordIdentifier.
        :rtype: str
        """
        return self._feature_group_name

    @feature_group_name.setter
    def feature_group_name(self, feature_group_name):
        """Sets the feature_group_name of this BatchGetRecordIdentifier.


        :param feature_group_name: The feature_group_name of this BatchGetRecordIdentifier.
        :type feature_group_name: str
        """
        if feature_group_name is None:
            raise ValueError("Invalid value for `feature_group_name`, must not be `None`")

        self._feature_group_name = feature_group_name

    @property
    def record_identifiers_value_as_string(self):
        """Gets the record_identifiers_value_as_string of this BatchGetRecordIdentifier.


        :return: The record_identifiers_value_as_string of this BatchGetRecordIdentifier.
        :rtype: List
        """
        return self._record_identifiers_value_as_string

    @record_identifiers_value_as_string.setter
    def record_identifiers_value_as_string(self, record_identifiers_value_as_string):
        """Sets the record_identifiers_value_as_string of this BatchGetRecordIdentifier.


        :param record_identifiers_value_as_string: The record_identifiers_value_as_string of this BatchGetRecordIdentifier.
        :type record_identifiers_value_as_string: List
        """
        if record_identifiers_value_as_string is None:
            raise ValueError("Invalid value for `record_identifiers_value_as_string`, must not be `None`")

        self._record_identifiers_value_as_string = record_identifiers_value_as_string

    @property
    def feature_names(self):
        """Gets the feature_names of this BatchGetRecordIdentifier.


        :return: The feature_names of this BatchGetRecordIdentifier.
        :rtype: List
        """
        return self._feature_names

    @feature_names.setter
    def feature_names(self, feature_names):
        """Sets the feature_names of this BatchGetRecordIdentifier.


        :param feature_names: The feature_names of this BatchGetRecordIdentifier.
        :type feature_names: List
        """

        self._feature_names = feature_names
