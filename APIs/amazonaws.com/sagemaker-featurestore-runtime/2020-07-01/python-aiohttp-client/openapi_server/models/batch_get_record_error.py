# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetRecordError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_group_name: str=None, record_identifier_value_as_string: str=None, error_code: str=None, error_message: str=None):
        """BatchGetRecordError - a model defined in OpenAPI

        :param feature_group_name: The feature_group_name of this BatchGetRecordError.
        :param record_identifier_value_as_string: The record_identifier_value_as_string of this BatchGetRecordError.
        :param error_code: The error_code of this BatchGetRecordError.
        :param error_message: The error_message of this BatchGetRecordError.
        """
        self.openapi_types = {
            'feature_group_name': str,
            'record_identifier_value_as_string': str,
            'error_code': str,
            'error_message': str
        }

        self.attribute_map = {
            'feature_group_name': 'FeatureGroupName',
            'record_identifier_value_as_string': 'RecordIdentifierValueAsString',
            'error_code': 'ErrorCode',
            'error_message': 'ErrorMessage'
        }

        self._feature_group_name = feature_group_name
        self._record_identifier_value_as_string = record_identifier_value_as_string
        self._error_code = error_code
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetRecordError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetRecordError of this BatchGetRecordError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_group_name(self):
        """Gets the feature_group_name of this BatchGetRecordError.


        :return: The feature_group_name of this BatchGetRecordError.
        :rtype: str
        """
        return self._feature_group_name

    @feature_group_name.setter
    def feature_group_name(self, feature_group_name):
        """Sets the feature_group_name of this BatchGetRecordError.


        :param feature_group_name: The feature_group_name of this BatchGetRecordError.
        :type feature_group_name: str
        """
        if feature_group_name is None:
            raise ValueError("Invalid value for `feature_group_name`, must not be `None`")

        self._feature_group_name = feature_group_name

    @property
    def record_identifier_value_as_string(self):
        """Gets the record_identifier_value_as_string of this BatchGetRecordError.


        :return: The record_identifier_value_as_string of this BatchGetRecordError.
        :rtype: str
        """
        return self._record_identifier_value_as_string

    @record_identifier_value_as_string.setter
    def record_identifier_value_as_string(self, record_identifier_value_as_string):
        """Sets the record_identifier_value_as_string of this BatchGetRecordError.


        :param record_identifier_value_as_string: The record_identifier_value_as_string of this BatchGetRecordError.
        :type record_identifier_value_as_string: str
        """
        if record_identifier_value_as_string is None:
            raise ValueError("Invalid value for `record_identifier_value_as_string`, must not be `None`")

        self._record_identifier_value_as_string = record_identifier_value_as_string

    @property
    def error_code(self):
        """Gets the error_code of this BatchGetRecordError.


        :return: The error_code of this BatchGetRecordError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this BatchGetRecordError.


        :param error_code: The error_code of this BatchGetRecordError.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this BatchGetRecordError.


        :return: The error_message of this BatchGetRecordError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this BatchGetRecordError.


        :param error_message: The error_message of this BatchGetRecordError.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message
