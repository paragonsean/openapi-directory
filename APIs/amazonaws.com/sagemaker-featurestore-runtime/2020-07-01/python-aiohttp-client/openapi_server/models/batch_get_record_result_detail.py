# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchGetRecordResultDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_group_name: str=None, record_identifier_value_as_string: str=None, record: List=None, expires_at: str=None):
        """BatchGetRecordResultDetail - a model defined in OpenAPI

        :param feature_group_name: The feature_group_name of this BatchGetRecordResultDetail.
        :param record_identifier_value_as_string: The record_identifier_value_as_string of this BatchGetRecordResultDetail.
        :param record: The record of this BatchGetRecordResultDetail.
        :param expires_at: The expires_at of this BatchGetRecordResultDetail.
        """
        self.openapi_types = {
            'feature_group_name': str,
            'record_identifier_value_as_string': str,
            'record': List,
            'expires_at': str
        }

        self.attribute_map = {
            'feature_group_name': 'FeatureGroupName',
            'record_identifier_value_as_string': 'RecordIdentifierValueAsString',
            'record': 'Record',
            'expires_at': 'ExpiresAt'
        }

        self._feature_group_name = feature_group_name
        self._record_identifier_value_as_string = record_identifier_value_as_string
        self._record = record
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetRecordResultDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetRecordResultDetail of this BatchGetRecordResultDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_group_name(self):
        """Gets the feature_group_name of this BatchGetRecordResultDetail.


        :return: The feature_group_name of this BatchGetRecordResultDetail.
        :rtype: str
        """
        return self._feature_group_name

    @feature_group_name.setter
    def feature_group_name(self, feature_group_name):
        """Sets the feature_group_name of this BatchGetRecordResultDetail.


        :param feature_group_name: The feature_group_name of this BatchGetRecordResultDetail.
        :type feature_group_name: str
        """
        if feature_group_name is None:
            raise ValueError("Invalid value for `feature_group_name`, must not be `None`")

        self._feature_group_name = feature_group_name

    @property
    def record_identifier_value_as_string(self):
        """Gets the record_identifier_value_as_string of this BatchGetRecordResultDetail.


        :return: The record_identifier_value_as_string of this BatchGetRecordResultDetail.
        :rtype: str
        """
        return self._record_identifier_value_as_string

    @record_identifier_value_as_string.setter
    def record_identifier_value_as_string(self, record_identifier_value_as_string):
        """Sets the record_identifier_value_as_string of this BatchGetRecordResultDetail.


        :param record_identifier_value_as_string: The record_identifier_value_as_string of this BatchGetRecordResultDetail.
        :type record_identifier_value_as_string: str
        """
        if record_identifier_value_as_string is None:
            raise ValueError("Invalid value for `record_identifier_value_as_string`, must not be `None`")

        self._record_identifier_value_as_string = record_identifier_value_as_string

    @property
    def record(self):
        """Gets the record of this BatchGetRecordResultDetail.


        :return: The record of this BatchGetRecordResultDetail.
        :rtype: List
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this BatchGetRecordResultDetail.


        :param record: The record of this BatchGetRecordResultDetail.
        :type record: List
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")

        self._record = record

    @property
    def expires_at(self):
        """Gets the expires_at of this BatchGetRecordResultDetail.


        :return: The expires_at of this BatchGetRecordResultDetail.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this BatchGetRecordResultDetail.


        :param expires_at: The expires_at of this BatchGetRecordResultDetail.
        :type expires_at: str
        """

        self._expires_at = expires_at
