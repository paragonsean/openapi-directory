# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_value import FeatureValue
from openapi_server.models.put_record_request_ttl_duration import PutRecordRequestTtlDuration
from openapi_server.models.target_store import TargetStore
from openapi_server import util


class PutRecordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, record: List[FeatureValue]=None, target_stores: List[TargetStore]=None, ttl_duration: PutRecordRequestTtlDuration=None):
        """PutRecordRequest - a model defined in OpenAPI

        :param record: The record of this PutRecordRequest.
        :param target_stores: The target_stores of this PutRecordRequest.
        :param ttl_duration: The ttl_duration of this PutRecordRequest.
        """
        self.openapi_types = {
            'record': List[FeatureValue],
            'target_stores': List[TargetStore],
            'ttl_duration': PutRecordRequestTtlDuration
        }

        self.attribute_map = {
            'record': 'Record',
            'target_stores': 'TargetStores',
            'ttl_duration': 'TtlDuration'
        }

        self._record = record
        self._target_stores = target_stores
        self._ttl_duration = ttl_duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutRecordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutRecord_request of this PutRecordRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def record(self):
        """Gets the record of this PutRecordRequest.

        <p>List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:</p> <ul> <li> <p>Use <code>GetRecord</code> to retrieve the latest record.</p> </li> <li> <p>Update the record returned from <code>GetRecord</code>. </p> </li> <li> <p>Use <code>PutRecord</code> to update feature values.</p> </li> </ul>

        :return: The record of this PutRecordRequest.
        :rtype: List[FeatureValue]
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this PutRecordRequest.

        <p>List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:</p> <ul> <li> <p>Use <code>GetRecord</code> to retrieve the latest record.</p> </li> <li> <p>Update the record returned from <code>GetRecord</code>. </p> </li> <li> <p>Use <code>PutRecord</code> to update feature values.</p> </li> </ul>

        :param record: The record of this PutRecordRequest.
        :type record: List[FeatureValue]
        """
        if record is None:
            raise ValueError("Invalid value for `record`, must not be `None`")
        if record is not None and len(record) < 1:
            raise ValueError("Invalid value for `record`, number of items must be greater than or equal to `1`")

        self._record = record

    @property
    def target_stores(self):
        """Gets the target_stores of this PutRecordRequest.

        A list of stores to which you're adding the record. By default, Feature Store adds the record to all of the stores that you're using for the <code>FeatureGroup</code>.

        :return: The target_stores of this PutRecordRequest.
        :rtype: List[TargetStore]
        """
        return self._target_stores

    @target_stores.setter
    def target_stores(self, target_stores):
        """Sets the target_stores of this PutRecordRequest.

        A list of stores to which you're adding the record. By default, Feature Store adds the record to all of the stores that you're using for the <code>FeatureGroup</code>.

        :param target_stores: The target_stores of this PutRecordRequest.
        :type target_stores: List[TargetStore]
        """
        if target_stores is not None and len(target_stores) > 2:
            raise ValueError("Invalid value for `target_stores`, number of items must be less than or equal to `2`")
        if target_stores is not None and len(target_stores) < 1:
            raise ValueError("Invalid value for `target_stores`, number of items must be greater than or equal to `1`")

        self._target_stores = target_stores

    @property
    def ttl_duration(self):
        """Gets the ttl_duration of this PutRecordRequest.


        :return: The ttl_duration of this PutRecordRequest.
        :rtype: PutRecordRequestTtlDuration
        """
        return self._ttl_duration

    @ttl_duration.setter
    def ttl_duration(self, ttl_duration):
        """Sets the ttl_duration of this PutRecordRequest.


        :param ttl_duration: The ttl_duration of this PutRecordRequest.
        :type ttl_duration: PutRecordRequestTtlDuration
        """

        self._ttl_duration = ttl_duration
