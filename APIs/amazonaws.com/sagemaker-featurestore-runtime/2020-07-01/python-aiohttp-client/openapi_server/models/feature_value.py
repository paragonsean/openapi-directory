# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_name: str=None, value_as_string: str=None):
        """FeatureValue - a model defined in OpenAPI

        :param feature_name: The feature_name of this FeatureValue.
        :param value_as_string: The value_as_string of this FeatureValue.
        """
        self.openapi_types = {
            'feature_name': str,
            'value_as_string': str
        }

        self.attribute_map = {
            'feature_name': 'FeatureName',
            'value_as_string': 'ValueAsString'
        }

        self._feature_name = feature_name
        self._value_as_string = value_as_string

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureValue of this FeatureValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_name(self):
        """Gets the feature_name of this FeatureValue.


        :return: The feature_name of this FeatureValue.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this FeatureValue.


        :param feature_name: The feature_name of this FeatureValue.
        :type feature_name: str
        """
        if feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")

        self._feature_name = feature_name

    @property
    def value_as_string(self):
        """Gets the value_as_string of this FeatureValue.


        :return: The value_as_string of this FeatureValue.
        :rtype: str
        """
        return self._value_as_string

    @value_as_string.setter
    def value_as_string(self, value_as_string):
        """Sets the value_as_string of this FeatureValue.


        :param value_as_string: The value_as_string of this FeatureValue.
        :type value_as_string: str
        """
        if value_as_string is None:
            raise ValueError("Invalid value for `value_as_string`, must not be `None`")

        self._value_as_string = value_as_string
