# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_get_record_identifier import BatchGetRecordIdentifier
from openapi_server import util


class BatchGetRecordRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifiers: List[BatchGetRecordIdentifier]=None, expiration_time_response: str=None):
        """BatchGetRecordRequest - a model defined in OpenAPI

        :param identifiers: The identifiers of this BatchGetRecordRequest.
        :param expiration_time_response: The expiration_time_response of this BatchGetRecordRequest.
        """
        self.openapi_types = {
            'identifiers': List[BatchGetRecordIdentifier],
            'expiration_time_response': str
        }

        self.attribute_map = {
            'identifiers': 'Identifiers',
            'expiration_time_response': 'ExpirationTimeResponse'
        }

        self._identifiers = identifiers
        self._expiration_time_response = expiration_time_response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetRecordRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetRecord_request of this BatchGetRecordRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifiers(self):
        """Gets the identifiers of this BatchGetRecordRequest.

        A list containing the name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code>, the list of names of <code>Feature</code>s to be retrieved, and the corresponding <code>RecordIdentifier</code> values as strings.

        :return: The identifiers of this BatchGetRecordRequest.
        :rtype: List[BatchGetRecordIdentifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this BatchGetRecordRequest.

        A list containing the name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code>, the list of names of <code>Feature</code>s to be retrieved, and the corresponding <code>RecordIdentifier</code> values as strings.

        :param identifiers: The identifiers of this BatchGetRecordRequest.
        :type identifiers: List[BatchGetRecordIdentifier]
        """
        if identifiers is None:
            raise ValueError("Invalid value for `identifiers`, must not be `None`")
        if identifiers is not None and len(identifiers) > 10:
            raise ValueError("Invalid value for `identifiers`, number of items must be less than or equal to `10`")
        if identifiers is not None and len(identifiers) < 1:
            raise ValueError("Invalid value for `identifiers`, number of items must be greater than or equal to `1`")

        self._identifiers = identifiers

    @property
    def expiration_time_response(self):
        """Gets the expiration_time_response of this BatchGetRecordRequest.

        Parameter to request <code>ExpiresAt</code> in response. If <code>Enabled</code>, <code>BatchGetRecord</code> will return the value of <code>ExpiresAt</code>, if it is not null. If <code>Disabled</code> and null, <code>BatchGetRecord</code> will return null.

        :return: The expiration_time_response of this BatchGetRecordRequest.
        :rtype: str
        """
        return self._expiration_time_response

    @expiration_time_response.setter
    def expiration_time_response(self, expiration_time_response):
        """Sets the expiration_time_response of this BatchGetRecordRequest.

        Parameter to request <code>ExpiresAt</code> in response. If <code>Enabled</code>, <code>BatchGetRecord</code> will return the value of <code>ExpiresAt</code>, if it is not null. If <code>Disabled</code> and null, <code>BatchGetRecord</code> will return null.

        :param expiration_time_response: The expiration_time_response of this BatchGetRecordRequest.
        :type expiration_time_response: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if expiration_time_response not in allowed_values:
            raise ValueError(
                "Invalid value for `expiration_time_response` ({0}), must be one of {1}"
                .format(expiration_time_response, allowed_values)
            )

        self._expiration_time_response = expiration_time_response
