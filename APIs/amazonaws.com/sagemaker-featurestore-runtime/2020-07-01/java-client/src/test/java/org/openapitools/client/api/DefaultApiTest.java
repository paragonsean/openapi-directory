/*
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchGetRecordRequest;
import org.openapitools.client.model.BatchGetRecordResponse;
import org.openapitools.client.model.GetRecordResponse;
import org.openapitools.client.model.PutRecordRequest;
import org.openapitools.client.model.TargetStore;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Retrieves a batch of &lt;code&gt;Records&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGetRecordTest() throws ApiException {
        BatchGetRecordRequest batchGetRecordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGetRecordResponse response = api.batchGetRecord(batchGetRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes a &lt;code&gt;Record&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt; in the &lt;code&gt;OnlineStore&lt;/code&gt;. Feature Store supports both &lt;code&gt;SoftDelete&lt;/code&gt; and &lt;code&gt;HardDelete&lt;/code&gt;. For &lt;code&gt;SoftDelete&lt;/code&gt; (default), feature columns are set to &lt;code&gt;null&lt;/code&gt; and the record is no longer retrievable by &lt;code&gt;GetRecord&lt;/code&gt; or &lt;code&gt;BatchGetRecord&lt;/code&gt;. For &lt;code&gt;HardDelete&lt;/code&gt;, the complete &lt;code&gt;Record&lt;/code&gt; is removed from the &lt;code&gt;OnlineStore&lt;/code&gt;. In both cases, Feature Store appends the deleted record marker to the &lt;code&gt;OfflineStore&lt;/code&gt; with feature values set to &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;is_deleted&lt;/code&gt; value set to &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;EventTime&lt;/code&gt; set to the delete input &lt;code&gt;EventTime&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note that the &lt;code&gt;EventTime&lt;/code&gt; specified in &lt;code&gt;DeleteRecord&lt;/code&gt; should be set later than the &lt;code&gt;EventTime&lt;/code&gt; of the existing record in the &lt;code&gt;OnlineStore&lt;/code&gt; for that &lt;code&gt;RecordIdentifer&lt;/code&gt;. If it is not, the deletion does not occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;SoftDelete&lt;/code&gt;, the existing (undeleted) record remains in the &lt;code&gt;OnlineStore&lt;/code&gt;, though the delete record marker is still written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HardDelete&lt;/code&gt; returns &lt;code&gt;EventTime&lt;/code&gt;: &lt;code&gt;400 ValidationException&lt;/code&gt; to indicate that the delete operation failed. No delete record marker is written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRecordTest() throws ApiException {
        String featureGroupName = null;
        String recordIdentifierValueAsString = null;
        String eventTime = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<TargetStore> targetStores = null;
        String deletionMode = null;
        api.deleteRecord(featureGroupName, recordIdentifierValueAsString, eventTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetStores, deletionMode);
        // TODO: test validations
    }

    /**
     * Use for &lt;code&gt;OnlineStore&lt;/code&gt; serving from a &lt;code&gt;FeatureStore&lt;/code&gt;. Only the latest records stored in the &lt;code&gt;OnlineStore&lt;/code&gt; can be retrieved. If no Record with &lt;code&gt;RecordIdentifierValue&lt;/code&gt; is found, then an empty result is returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecordTest() throws ApiException {
        String featureGroupName = null;
        String recordIdentifierValueAsString = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        List<String> featureName = null;
        String expirationTimeResponse = null;
        GetRecordResponse response = api.getRecord(featureGroupName, recordIdentifierValueAsString, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, expirationTimeResponse);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;The &lt;code&gt;PutRecord&lt;/code&gt; API is used to ingest a list of &lt;code&gt;Records&lt;/code&gt; into your feature group. &lt;/p&gt; &lt;p&gt;If a new record’s &lt;code&gt;EventTime&lt;/code&gt; is greater, the new record is written to both the &lt;code&gt;OnlineStore&lt;/code&gt; and &lt;code&gt;OfflineStore&lt;/code&gt;. Otherwise, the record is a historic record and it is written only to the &lt;code&gt;OfflineStore&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can specify the ingestion to be applied to the &lt;code&gt;OnlineStore&lt;/code&gt;, &lt;code&gt;OfflineStore&lt;/code&gt;, or both by using the &lt;code&gt;TargetStores&lt;/code&gt; request parameter. &lt;/p&gt; &lt;p&gt;You can set the ingested record to expire at a given time to live (TTL) duration after the record’s event time, &lt;code&gt;ExpiresAt&lt;/code&gt; &#x3D; &lt;code&gt;EventTime&lt;/code&gt; + &lt;code&gt;TtlDuration&lt;/code&gt;, by specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter. A record level &lt;code&gt;TtlDuration&lt;/code&gt; is set when specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter using the &lt;code&gt;PutRecord&lt;/code&gt; API call. If the input &lt;code&gt;TtlDuration&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or unspecified, &lt;code&gt;TtlDuration&lt;/code&gt; is set to the default feature group level &lt;code&gt;TtlDuration&lt;/code&gt;. A record level &lt;code&gt;TtlDuration&lt;/code&gt; supersedes the group level &lt;code&gt;TtlDuration&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRecordTest() throws ApiException {
        String featureGroupName = null;
        PutRecordRequest putRecordRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.putRecord(featureGroupName, putRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
