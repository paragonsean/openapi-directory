/*
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchGetRecordIdentifier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchGetRecordRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:25.274003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetRecordRequest {
  public static final String SERIALIZED_NAME_IDENTIFIERS = "Identifiers";
  @SerializedName(SERIALIZED_NAME_IDENTIFIERS)
  private List<BatchGetRecordIdentifier> identifiers = new ArrayList<>();

  /**
   * Parameter to request &lt;code&gt;ExpiresAt&lt;/code&gt; in response. If &lt;code&gt;Enabled&lt;/code&gt;, &lt;code&gt;BatchGetRecord&lt;/code&gt; will return the value of &lt;code&gt;ExpiresAt&lt;/code&gt;, if it is not null. If &lt;code&gt;Disabled&lt;/code&gt; and null, &lt;code&gt;BatchGetRecord&lt;/code&gt; will return null.
   */
  @JsonAdapter(ExpirationTimeResponseEnum.Adapter.class)
  public enum ExpirationTimeResponseEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    ExpirationTimeResponseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpirationTimeResponseEnum fromValue(String value) {
      for (ExpirationTimeResponseEnum b : ExpirationTimeResponseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpirationTimeResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpirationTimeResponseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpirationTimeResponseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpirationTimeResponseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpirationTimeResponseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRATION_TIME_RESPONSE = "ExpirationTimeResponse";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME_RESPONSE)
  private ExpirationTimeResponseEnum expirationTimeResponse;

  public BatchGetRecordRequest() {
  }

  public BatchGetRecordRequest identifiers(List<BatchGetRecordIdentifier> identifiers) {
    this.identifiers = identifiers;
    return this;
  }

  public BatchGetRecordRequest addIdentifiersItem(BatchGetRecordIdentifier identifiersItem) {
    if (this.identifiers == null) {
      this.identifiers = new ArrayList<>();
    }
    this.identifiers.add(identifiersItem);
    return this;
  }

  /**
   * A list containing the name or Amazon Resource Name (ARN) of the &lt;code&gt;FeatureGroup&lt;/code&gt;, the list of names of &lt;code&gt;Feature&lt;/code&gt;s to be retrieved, and the corresponding &lt;code&gt;RecordIdentifier&lt;/code&gt; values as strings.
   * @return identifiers
   */
  @javax.annotation.Nonnull
  public List<BatchGetRecordIdentifier> getIdentifiers() {
    return identifiers;
  }

  public void setIdentifiers(List<BatchGetRecordIdentifier> identifiers) {
    this.identifiers = identifiers;
  }


  public BatchGetRecordRequest expirationTimeResponse(ExpirationTimeResponseEnum expirationTimeResponse) {
    this.expirationTimeResponse = expirationTimeResponse;
    return this;
  }

  /**
   * Parameter to request &lt;code&gt;ExpiresAt&lt;/code&gt; in response. If &lt;code&gt;Enabled&lt;/code&gt;, &lt;code&gt;BatchGetRecord&lt;/code&gt; will return the value of &lt;code&gt;ExpiresAt&lt;/code&gt;, if it is not null. If &lt;code&gt;Disabled&lt;/code&gt; and null, &lt;code&gt;BatchGetRecord&lt;/code&gt; will return null.
   * @return expirationTimeResponse
   */
  @javax.annotation.Nullable
  public ExpirationTimeResponseEnum getExpirationTimeResponse() {
    return expirationTimeResponse;
  }

  public void setExpirationTimeResponse(ExpirationTimeResponseEnum expirationTimeResponse) {
    this.expirationTimeResponse = expirationTimeResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetRecordRequest batchGetRecordRequest = (BatchGetRecordRequest) o;
    return Objects.equals(this.identifiers, batchGetRecordRequest.identifiers) &&
        Objects.equals(this.expirationTimeResponse, batchGetRecordRequest.expirationTimeResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifiers, expirationTimeResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetRecordRequest {\n");
    sb.append("    identifiers: ").append(toIndentedString(identifiers)).append("\n");
    sb.append("    expirationTimeResponse: ").append(toIndentedString(expirationTimeResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Identifiers");
    openapiFields.add("ExpirationTimeResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Identifiers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetRecordRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetRecordRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetRecordRequest is not found in the empty JSON string", BatchGetRecordRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetRecordRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetRecordRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchGetRecordRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Identifiers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Identifiers` to be an array in the JSON string but got `%s`", jsonObj.get("Identifiers").toString()));
      }

      JsonArray jsonArrayidentifiers = jsonObj.getAsJsonArray("Identifiers");
      // validate the required field `Identifiers` (array)
      for (int i = 0; i < jsonArrayidentifiers.size(); i++) {
        BatchGetRecordIdentifier.validateJsonElement(jsonArrayidentifiers.get(i));
      };
      if ((jsonObj.get("ExpirationTimeResponse") != null && !jsonObj.get("ExpirationTimeResponse").isJsonNull()) && !jsonObj.get("ExpirationTimeResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ExpirationTimeResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ExpirationTimeResponse").toString()));
      }
      // validate the optional field `ExpirationTimeResponse`
      if (jsonObj.get("ExpirationTimeResponse") != null && !jsonObj.get("ExpirationTimeResponse").isJsonNull()) {
        ExpirationTimeResponseEnum.validateJsonElement(jsonObj.get("ExpirationTimeResponse"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetRecordRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetRecordRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetRecordRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetRecordRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetRecordRequest>() {
           @Override
           public void write(JsonWriter out, BatchGetRecordRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetRecordRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetRecordRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetRecordRequest
   * @throws IOException if the JSON string is invalid with respect to BatchGetRecordRequest
   */
  public static BatchGetRecordRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetRecordRequest.class);
  }

  /**
   * Convert an instance of BatchGetRecordRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

