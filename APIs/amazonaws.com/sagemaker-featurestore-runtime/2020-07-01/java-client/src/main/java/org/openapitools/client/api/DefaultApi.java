/*
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchGetRecordRequest;
import org.openapitools.client.model.BatchGetRecordResponse;
import org.openapitools.client.model.GetRecordResponse;
import org.openapitools.client.model.PutRecordRequest;
import org.openapitools.client.model.TargetStore;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for batchGetRecord
     * @param batchGetRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetRecordCall(BatchGetRecordRequest batchGetRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchGetRecordRequest;

        // create path and map variables
        String localVarPath = "/BatchGetRecord";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchGetRecordValidateBeforeCall(BatchGetRecordRequest batchGetRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchGetRecordRequest' is set
        if (batchGetRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'batchGetRecordRequest' when calling batchGetRecord(Async)");
        }

        return batchGetRecordCall(batchGetRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves a batch of &lt;code&gt;Records&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt;.
     * @param batchGetRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchGetRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public BatchGetRecordResponse batchGetRecord(BatchGetRecordRequest batchGetRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchGetRecordResponse> localVarResp = batchGetRecordWithHttpInfo(batchGetRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a batch of &lt;code&gt;Records&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt;.
     * @param batchGetRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchGetRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchGetRecordResponse> batchGetRecordWithHttpInfo(BatchGetRecordRequest batchGetRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchGetRecordValidateBeforeCall(batchGetRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchGetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a batch of &lt;code&gt;Records&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt;.
     * @param batchGetRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchGetRecordAsync(BatchGetRecordRequest batchGetRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchGetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchGetRecordValidateBeforeCall(batchGetRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchGetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRecord
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group to delete the record from.  (required)
     * @param recordIdentifierValueAsString The value for the &lt;code&gt;RecordIdentifier&lt;/code&gt; that uniquely identifies the record, in string format.  (required)
     * @param eventTime Timestamp indicating when the deletion event occurred. &lt;code&gt;EventTime&lt;/code&gt; can be used to query data at a certain point in time. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetStores A list of stores from which you&#39;re deleting the record. By default, Feature Store deletes the record from all of the stores that you&#39;re using for the &lt;code&gt;FeatureGroup&lt;/code&gt;. (optional)
     * @param deletionMode The name of the deletion mode for deleting the record. By default, the deletion mode is set to &lt;code&gt;SoftDelete&lt;/code&gt;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordCall(String featureGroupName, String recordIdentifierValueAsString, String eventTime, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetStore> targetStores, String deletionMode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/FeatureGroup/{FeatureGroupName}#RecordIdentifierValueAsString&EventTime"
            .replace("{" + "FeatureGroupName" + "}", localVarApiClient.escapeString(featureGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordIdentifierValueAsString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RecordIdentifierValueAsString", recordIdentifierValueAsString));
        }

        if (eventTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EventTime", eventTime));
        }

        if (targetStores != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "TargetStores", targetStores));
        }

        if (deletionMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeletionMode", deletionMode));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRecordValidateBeforeCall(String featureGroupName, String recordIdentifierValueAsString, String eventTime, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetStore> targetStores, String deletionMode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureGroupName' is set
        if (featureGroupName == null) {
            throw new ApiException("Missing the required parameter 'featureGroupName' when calling deleteRecord(Async)");
        }

        // verify the required parameter 'recordIdentifierValueAsString' is set
        if (recordIdentifierValueAsString == null) {
            throw new ApiException("Missing the required parameter 'recordIdentifierValueAsString' when calling deleteRecord(Async)");
        }

        // verify the required parameter 'eventTime' is set
        if (eventTime == null) {
            throw new ApiException("Missing the required parameter 'eventTime' when calling deleteRecord(Async)");
        }

        return deleteRecordCall(featureGroupName, recordIdentifierValueAsString, eventTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetStores, deletionMode, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a &lt;code&gt;Record&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt; in the &lt;code&gt;OnlineStore&lt;/code&gt;. Feature Store supports both &lt;code&gt;SoftDelete&lt;/code&gt; and &lt;code&gt;HardDelete&lt;/code&gt;. For &lt;code&gt;SoftDelete&lt;/code&gt; (default), feature columns are set to &lt;code&gt;null&lt;/code&gt; and the record is no longer retrievable by &lt;code&gt;GetRecord&lt;/code&gt; or &lt;code&gt;BatchGetRecord&lt;/code&gt;. For &lt;code&gt;HardDelete&lt;/code&gt;, the complete &lt;code&gt;Record&lt;/code&gt; is removed from the &lt;code&gt;OnlineStore&lt;/code&gt;. In both cases, Feature Store appends the deleted record marker to the &lt;code&gt;OfflineStore&lt;/code&gt; with feature values set to &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;is_deleted&lt;/code&gt; value set to &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;EventTime&lt;/code&gt; set to the delete input &lt;code&gt;EventTime&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note that the &lt;code&gt;EventTime&lt;/code&gt; specified in &lt;code&gt;DeleteRecord&lt;/code&gt; should be set later than the &lt;code&gt;EventTime&lt;/code&gt; of the existing record in the &lt;code&gt;OnlineStore&lt;/code&gt; for that &lt;code&gt;RecordIdentifer&lt;/code&gt;. If it is not, the deletion does not occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;SoftDelete&lt;/code&gt;, the existing (undeleted) record remains in the &lt;code&gt;OnlineStore&lt;/code&gt;, though the delete record marker is still written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HardDelete&lt;/code&gt; returns &lt;code&gt;EventTime&lt;/code&gt;: &lt;code&gt;400 ValidationException&lt;/code&gt; to indicate that the delete operation failed. No delete record marker is written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group to delete the record from.  (required)
     * @param recordIdentifierValueAsString The value for the &lt;code&gt;RecordIdentifier&lt;/code&gt; that uniquely identifies the record, in string format.  (required)
     * @param eventTime Timestamp indicating when the deletion event occurred. &lt;code&gt;EventTime&lt;/code&gt; can be used to query data at a certain point in time. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetStores A list of stores from which you&#39;re deleting the record. By default, Feature Store deletes the record from all of the stores that you&#39;re using for the &lt;code&gt;FeatureGroup&lt;/code&gt;. (optional)
     * @param deletionMode The name of the deletion mode for deleting the record. By default, the deletion mode is set to &lt;code&gt;SoftDelete&lt;/code&gt;. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRecord(String featureGroupName, String recordIdentifierValueAsString, String eventTime, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetStore> targetStores, String deletionMode) throws ApiException {
        deleteRecordWithHttpInfo(featureGroupName, recordIdentifierValueAsString, eventTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetStores, deletionMode);
    }

    /**
     * 
     * &lt;p&gt;Deletes a &lt;code&gt;Record&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt; in the &lt;code&gt;OnlineStore&lt;/code&gt;. Feature Store supports both &lt;code&gt;SoftDelete&lt;/code&gt; and &lt;code&gt;HardDelete&lt;/code&gt;. For &lt;code&gt;SoftDelete&lt;/code&gt; (default), feature columns are set to &lt;code&gt;null&lt;/code&gt; and the record is no longer retrievable by &lt;code&gt;GetRecord&lt;/code&gt; or &lt;code&gt;BatchGetRecord&lt;/code&gt;. For &lt;code&gt;HardDelete&lt;/code&gt;, the complete &lt;code&gt;Record&lt;/code&gt; is removed from the &lt;code&gt;OnlineStore&lt;/code&gt;. In both cases, Feature Store appends the deleted record marker to the &lt;code&gt;OfflineStore&lt;/code&gt; with feature values set to &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;is_deleted&lt;/code&gt; value set to &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;EventTime&lt;/code&gt; set to the delete input &lt;code&gt;EventTime&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note that the &lt;code&gt;EventTime&lt;/code&gt; specified in &lt;code&gt;DeleteRecord&lt;/code&gt; should be set later than the &lt;code&gt;EventTime&lt;/code&gt; of the existing record in the &lt;code&gt;OnlineStore&lt;/code&gt; for that &lt;code&gt;RecordIdentifer&lt;/code&gt;. If it is not, the deletion does not occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;SoftDelete&lt;/code&gt;, the existing (undeleted) record remains in the &lt;code&gt;OnlineStore&lt;/code&gt;, though the delete record marker is still written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HardDelete&lt;/code&gt; returns &lt;code&gt;EventTime&lt;/code&gt;: &lt;code&gt;400 ValidationException&lt;/code&gt; to indicate that the delete operation failed. No delete record marker is written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group to delete the record from.  (required)
     * @param recordIdentifierValueAsString The value for the &lt;code&gt;RecordIdentifier&lt;/code&gt; that uniquely identifies the record, in string format.  (required)
     * @param eventTime Timestamp indicating when the deletion event occurred. &lt;code&gt;EventTime&lt;/code&gt; can be used to query data at a certain point in time. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetStores A list of stores from which you&#39;re deleting the record. By default, Feature Store deletes the record from all of the stores that you&#39;re using for the &lt;code&gt;FeatureGroup&lt;/code&gt;. (optional)
     * @param deletionMode The name of the deletion mode for deleting the record. By default, the deletion mode is set to &lt;code&gt;SoftDelete&lt;/code&gt;. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRecordWithHttpInfo(String featureGroupName, String recordIdentifierValueAsString, String eventTime, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetStore> targetStores, String deletionMode) throws ApiException {
        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(featureGroupName, recordIdentifierValueAsString, eventTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetStores, deletionMode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a &lt;code&gt;Record&lt;/code&gt; from a &lt;code&gt;FeatureGroup&lt;/code&gt; in the &lt;code&gt;OnlineStore&lt;/code&gt;. Feature Store supports both &lt;code&gt;SoftDelete&lt;/code&gt; and &lt;code&gt;HardDelete&lt;/code&gt;. For &lt;code&gt;SoftDelete&lt;/code&gt; (default), feature columns are set to &lt;code&gt;null&lt;/code&gt; and the record is no longer retrievable by &lt;code&gt;GetRecord&lt;/code&gt; or &lt;code&gt;BatchGetRecord&lt;/code&gt;. For &lt;code&gt;HardDelete&lt;/code&gt;, the complete &lt;code&gt;Record&lt;/code&gt; is removed from the &lt;code&gt;OnlineStore&lt;/code&gt;. In both cases, Feature Store appends the deleted record marker to the &lt;code&gt;OfflineStore&lt;/code&gt; with feature values set to &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;is_deleted&lt;/code&gt; value set to &lt;code&gt;True&lt;/code&gt;, and &lt;code&gt;EventTime&lt;/code&gt; set to the delete input &lt;code&gt;EventTime&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note that the &lt;code&gt;EventTime&lt;/code&gt; specified in &lt;code&gt;DeleteRecord&lt;/code&gt; should be set later than the &lt;code&gt;EventTime&lt;/code&gt; of the existing record in the &lt;code&gt;OnlineStore&lt;/code&gt; for that &lt;code&gt;RecordIdentifer&lt;/code&gt;. If it is not, the deletion does not occur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For &lt;code&gt;SoftDelete&lt;/code&gt;, the existing (undeleted) record remains in the &lt;code&gt;OnlineStore&lt;/code&gt;, though the delete record marker is still written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;HardDelete&lt;/code&gt; returns &lt;code&gt;EventTime&lt;/code&gt;: &lt;code&gt;400 ValidationException&lt;/code&gt; to indicate that the delete operation failed. No delete record marker is written to the &lt;code&gt;OfflineStore&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group to delete the record from.  (required)
     * @param recordIdentifierValueAsString The value for the &lt;code&gt;RecordIdentifier&lt;/code&gt; that uniquely identifies the record, in string format.  (required)
     * @param eventTime Timestamp indicating when the deletion event occurred. &lt;code&gt;EventTime&lt;/code&gt; can be used to query data at a certain point in time. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param targetStores A list of stores from which you&#39;re deleting the record. By default, Feature Store deletes the record from all of the stores that you&#39;re using for the &lt;code&gt;FeatureGroup&lt;/code&gt;. (optional)
     * @param deletionMode The name of the deletion mode for deleting the record. By default, the deletion mode is set to &lt;code&gt;SoftDelete&lt;/code&gt;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRecordAsync(String featureGroupName, String recordIdentifierValueAsString, String eventTime, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<TargetStore> targetStores, String deletionMode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRecordValidateBeforeCall(featureGroupName, recordIdentifierValueAsString, eventTime, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, targetStores, deletionMode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecord
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record. (required)
     * @param recordIdentifierValueAsString The value that corresponds to &lt;code&gt;RecordIdentifier&lt;/code&gt; type and uniquely identifies the record in the &lt;code&gt;FeatureGroup&lt;/code&gt;.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned. (optional)
     * @param expirationTimeResponse Parameter to request &lt;code&gt;ExpiresAt&lt;/code&gt; in response. If &lt;code&gt;Enabled&lt;/code&gt;, &lt;code&gt;GetRecord&lt;/code&gt; will return the value of &lt;code&gt;ExpiresAt&lt;/code&gt;, if it is not null. If &lt;code&gt;Disabled&lt;/code&gt; and null, &lt;code&gt;GetRecord&lt;/code&gt; will return null. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordCall(String featureGroupName, String recordIdentifierValueAsString, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> featureName, String expirationTimeResponse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/FeatureGroup/{FeatureGroupName}#RecordIdentifierValueAsString"
            .replace("{" + "FeatureGroupName" + "}", localVarApiClient.escapeString(featureGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recordIdentifierValueAsString != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("RecordIdentifierValueAsString", recordIdentifierValueAsString));
        }

        if (featureName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "FeatureName", featureName));
        }

        if (expirationTimeResponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ExpirationTimeResponse", expirationTimeResponse));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecordValidateBeforeCall(String featureGroupName, String recordIdentifierValueAsString, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> featureName, String expirationTimeResponse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureGroupName' is set
        if (featureGroupName == null) {
            throw new ApiException("Missing the required parameter 'featureGroupName' when calling getRecord(Async)");
        }

        // verify the required parameter 'recordIdentifierValueAsString' is set
        if (recordIdentifierValueAsString == null) {
            throw new ApiException("Missing the required parameter 'recordIdentifierValueAsString' when calling getRecord(Async)");
        }

        return getRecordCall(featureGroupName, recordIdentifierValueAsString, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, expirationTimeResponse, _callback);

    }

    /**
     * 
     * Use for &lt;code&gt;OnlineStore&lt;/code&gt; serving from a &lt;code&gt;FeatureStore&lt;/code&gt;. Only the latest records stored in the &lt;code&gt;OnlineStore&lt;/code&gt; can be retrieved. If no Record with &lt;code&gt;RecordIdentifierValue&lt;/code&gt; is found, then an empty result is returned. 
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record. (required)
     * @param recordIdentifierValueAsString The value that corresponds to &lt;code&gt;RecordIdentifier&lt;/code&gt; type and uniquely identifies the record in the &lt;code&gt;FeatureGroup&lt;/code&gt;.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned. (optional)
     * @param expirationTimeResponse Parameter to request &lt;code&gt;ExpiresAt&lt;/code&gt; in response. If &lt;code&gt;Enabled&lt;/code&gt;, &lt;code&gt;GetRecord&lt;/code&gt; will return the value of &lt;code&gt;ExpiresAt&lt;/code&gt;, if it is not null. If &lt;code&gt;Disabled&lt;/code&gt; and null, &lt;code&gt;GetRecord&lt;/code&gt; will return null. (optional)
     * @return GetRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public GetRecordResponse getRecord(String featureGroupName, String recordIdentifierValueAsString, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> featureName, String expirationTimeResponse) throws ApiException {
        ApiResponse<GetRecordResponse> localVarResp = getRecordWithHttpInfo(featureGroupName, recordIdentifierValueAsString, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, expirationTimeResponse);
        return localVarResp.getData();
    }

    /**
     * 
     * Use for &lt;code&gt;OnlineStore&lt;/code&gt; serving from a &lt;code&gt;FeatureStore&lt;/code&gt;. Only the latest records stored in the &lt;code&gt;OnlineStore&lt;/code&gt; can be retrieved. If no Record with &lt;code&gt;RecordIdentifierValue&lt;/code&gt; is found, then an empty result is returned. 
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record. (required)
     * @param recordIdentifierValueAsString The value that corresponds to &lt;code&gt;RecordIdentifier&lt;/code&gt; type and uniquely identifies the record in the &lt;code&gt;FeatureGroup&lt;/code&gt;.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned. (optional)
     * @param expirationTimeResponse Parameter to request &lt;code&gt;ExpiresAt&lt;/code&gt; in response. If &lt;code&gt;Enabled&lt;/code&gt;, &lt;code&gt;GetRecord&lt;/code&gt; will return the value of &lt;code&gt;ExpiresAt&lt;/code&gt;, if it is not null. If &lt;code&gt;Disabled&lt;/code&gt; and null, &lt;code&gt;GetRecord&lt;/code&gt; will return null. (optional)
     * @return ApiResponse&lt;GetRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRecordResponse> getRecordWithHttpInfo(String featureGroupName, String recordIdentifierValueAsString, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> featureName, String expirationTimeResponse) throws ApiException {
        okhttp3.Call localVarCall = getRecordValidateBeforeCall(featureGroupName, recordIdentifierValueAsString, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, expirationTimeResponse, null);
        Type localVarReturnType = new TypeToken<GetRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Use for &lt;code&gt;OnlineStore&lt;/code&gt; serving from a &lt;code&gt;FeatureStore&lt;/code&gt;. Only the latest records stored in the &lt;code&gt;OnlineStore&lt;/code&gt; can be retrieved. If no Record with &lt;code&gt;RecordIdentifierValue&lt;/code&gt; is found, then an empty result is returned. 
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record. (required)
     * @param recordIdentifierValueAsString The value that corresponds to &lt;code&gt;RecordIdentifier&lt;/code&gt; type and uniquely identifies the record in the &lt;code&gt;FeatureGroup&lt;/code&gt;.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param featureName List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned. (optional)
     * @param expirationTimeResponse Parameter to request &lt;code&gt;ExpiresAt&lt;/code&gt; in response. If &lt;code&gt;Enabled&lt;/code&gt;, &lt;code&gt;GetRecord&lt;/code&gt; will return the value of &lt;code&gt;ExpiresAt&lt;/code&gt;, if it is not null. If &lt;code&gt;Disabled&lt;/code&gt; and null, &lt;code&gt;GetRecord&lt;/code&gt; will return null. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ResourceNotFound </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecordAsync(String featureGroupName, String recordIdentifierValueAsString, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, List<String> featureName, String expirationTimeResponse, final ApiCallback<GetRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecordValidateBeforeCall(featureGroupName, recordIdentifierValueAsString, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, featureName, expirationTimeResponse, _callback);
        Type localVarReturnType = new TypeToken<GetRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRecord
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group that you want to insert the record into. (required)
     * @param putRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRecordCall(String featureGroupName, PutRecordRequest putRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRecordRequest;

        // create path and map variables
        String localVarPath = "/FeatureGroup/{FeatureGroupName}"
            .replace("{" + "FeatureGroupName" + "}", localVarApiClient.escapeString(featureGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRecordValidateBeforeCall(String featureGroupName, PutRecordRequest putRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureGroupName' is set
        if (featureGroupName == null) {
            throw new ApiException("Missing the required parameter 'featureGroupName' when calling putRecord(Async)");
        }

        // verify the required parameter 'putRecordRequest' is set
        if (putRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'putRecordRequest' when calling putRecord(Async)");
        }

        return putRecordCall(featureGroupName, putRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;PutRecord&lt;/code&gt; API is used to ingest a list of &lt;code&gt;Records&lt;/code&gt; into your feature group. &lt;/p&gt; &lt;p&gt;If a new record’s &lt;code&gt;EventTime&lt;/code&gt; is greater, the new record is written to both the &lt;code&gt;OnlineStore&lt;/code&gt; and &lt;code&gt;OfflineStore&lt;/code&gt;. Otherwise, the record is a historic record and it is written only to the &lt;code&gt;OfflineStore&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can specify the ingestion to be applied to the &lt;code&gt;OnlineStore&lt;/code&gt;, &lt;code&gt;OfflineStore&lt;/code&gt;, or both by using the &lt;code&gt;TargetStores&lt;/code&gt; request parameter. &lt;/p&gt; &lt;p&gt;You can set the ingested record to expire at a given time to live (TTL) duration after the record’s event time, &lt;code&gt;ExpiresAt&lt;/code&gt; &#x3D; &lt;code&gt;EventTime&lt;/code&gt; + &lt;code&gt;TtlDuration&lt;/code&gt;, by specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter. A record level &lt;code&gt;TtlDuration&lt;/code&gt; is set when specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter using the &lt;code&gt;PutRecord&lt;/code&gt; API call. If the input &lt;code&gt;TtlDuration&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or unspecified, &lt;code&gt;TtlDuration&lt;/code&gt; is set to the default feature group level &lt;code&gt;TtlDuration&lt;/code&gt;. A record level &lt;code&gt;TtlDuration&lt;/code&gt; supersedes the group level &lt;code&gt;TtlDuration&lt;/code&gt;.&lt;/p&gt;
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group that you want to insert the record into. (required)
     * @param putRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public void putRecord(String featureGroupName, PutRecordRequest putRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        putRecordWithHttpInfo(featureGroupName, putRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;The &lt;code&gt;PutRecord&lt;/code&gt; API is used to ingest a list of &lt;code&gt;Records&lt;/code&gt; into your feature group. &lt;/p&gt; &lt;p&gt;If a new record’s &lt;code&gt;EventTime&lt;/code&gt; is greater, the new record is written to both the &lt;code&gt;OnlineStore&lt;/code&gt; and &lt;code&gt;OfflineStore&lt;/code&gt;. Otherwise, the record is a historic record and it is written only to the &lt;code&gt;OfflineStore&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can specify the ingestion to be applied to the &lt;code&gt;OnlineStore&lt;/code&gt;, &lt;code&gt;OfflineStore&lt;/code&gt;, or both by using the &lt;code&gt;TargetStores&lt;/code&gt; request parameter. &lt;/p&gt; &lt;p&gt;You can set the ingested record to expire at a given time to live (TTL) duration after the record’s event time, &lt;code&gt;ExpiresAt&lt;/code&gt; &#x3D; &lt;code&gt;EventTime&lt;/code&gt; + &lt;code&gt;TtlDuration&lt;/code&gt;, by specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter. A record level &lt;code&gt;TtlDuration&lt;/code&gt; is set when specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter using the &lt;code&gt;PutRecord&lt;/code&gt; API call. If the input &lt;code&gt;TtlDuration&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or unspecified, &lt;code&gt;TtlDuration&lt;/code&gt; is set to the default feature group level &lt;code&gt;TtlDuration&lt;/code&gt;. A record level &lt;code&gt;TtlDuration&lt;/code&gt; supersedes the group level &lt;code&gt;TtlDuration&lt;/code&gt;.&lt;/p&gt;
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group that you want to insert the record into. (required)
     * @param putRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putRecordWithHttpInfo(String featureGroupName, PutRecordRequest putRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putRecordValidateBeforeCall(featureGroupName, putRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The &lt;code&gt;PutRecord&lt;/code&gt; API is used to ingest a list of &lt;code&gt;Records&lt;/code&gt; into your feature group. &lt;/p&gt; &lt;p&gt;If a new record’s &lt;code&gt;EventTime&lt;/code&gt; is greater, the new record is written to both the &lt;code&gt;OnlineStore&lt;/code&gt; and &lt;code&gt;OfflineStore&lt;/code&gt;. Otherwise, the record is a historic record and it is written only to the &lt;code&gt;OfflineStore&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;You can specify the ingestion to be applied to the &lt;code&gt;OnlineStore&lt;/code&gt;, &lt;code&gt;OfflineStore&lt;/code&gt;, or both by using the &lt;code&gt;TargetStores&lt;/code&gt; request parameter. &lt;/p&gt; &lt;p&gt;You can set the ingested record to expire at a given time to live (TTL) duration after the record’s event time, &lt;code&gt;ExpiresAt&lt;/code&gt; &#x3D; &lt;code&gt;EventTime&lt;/code&gt; + &lt;code&gt;TtlDuration&lt;/code&gt;, by specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter. A record level &lt;code&gt;TtlDuration&lt;/code&gt; is set when specifying the &lt;code&gt;TtlDuration&lt;/code&gt; parameter using the &lt;code&gt;PutRecord&lt;/code&gt; API call. If the input &lt;code&gt;TtlDuration&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; or unspecified, &lt;code&gt;TtlDuration&lt;/code&gt; is set to the default feature group level &lt;code&gt;TtlDuration&lt;/code&gt;. A record level &lt;code&gt;TtlDuration&lt;/code&gt; supersedes the group level &lt;code&gt;TtlDuration&lt;/code&gt;.&lt;/p&gt;
     * @param featureGroupName The name or Amazon Resource Name (ARN) of the feature group that you want to insert the record into. (required)
     * @param putRecordRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ValidationError </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InternalFailure </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ServiceUnavailable </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessForbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRecordAsync(String featureGroupName, PutRecordRequest putRecordRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRecordValidateBeforeCall(featureGroupName, putRecordRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
