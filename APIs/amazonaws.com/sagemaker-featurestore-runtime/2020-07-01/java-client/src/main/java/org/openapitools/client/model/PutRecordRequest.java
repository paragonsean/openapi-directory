/*
 * Amazon SageMaker Feature Store Runtime
 * <p>Contains all data plane API operations and data types for the Amazon SageMaker Feature Store. Use this API to put, delete, and retrieve (get) features from a feature store.</p> <p>Use the following operations to configure your <code>OnlineStore</code> and <code>OfflineStore</code> features, and to create and manage feature groups:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFeatureGroup.html\">CreateFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteFeatureGroup.html\">DeleteFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeFeatureGroup.html\">DescribeFeatureGroup</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListFeatureGroups.html\">ListFeatureGroups</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2020-07-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeatureValue;
import org.openapitools.client.model.PutRecordRequestTtlDuration;
import org.openapitools.client.model.TargetStore;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutRecordRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:25.274003-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutRecordRequest {
  public static final String SERIALIZED_NAME_RECORD = "Record";
  @SerializedName(SERIALIZED_NAME_RECORD)
  private List<FeatureValue> record = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_STORES = "TargetStores";
  @SerializedName(SERIALIZED_NAME_TARGET_STORES)
  private List<TargetStore> targetStores = new ArrayList<>();

  public static final String SERIALIZED_NAME_TTL_DURATION = "TtlDuration";
  @SerializedName(SERIALIZED_NAME_TTL_DURATION)
  private PutRecordRequestTtlDuration ttlDuration;

  public PutRecordRequest() {
  }

  public PutRecordRequest record(List<FeatureValue> record) {
    this.record = record;
    return this;
  }

  public PutRecordRequest addRecordItem(FeatureValue recordItem) {
    if (this.record == null) {
      this.record = new ArrayList<>();
    }
    this.record.add(recordItem);
    return this;
  }

  /**
   * &lt;p&gt;List of FeatureValues to be inserted. This will be a full over-write. If you only want to update few of the feature values, do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;GetRecord&lt;/code&gt; to retrieve the latest record.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Update the record returned from &lt;code&gt;GetRecord&lt;/code&gt;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;PutRecord&lt;/code&gt; to update feature values.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return record
   */
  @javax.annotation.Nonnull
  public List<FeatureValue> getRecord() {
    return record;
  }

  public void setRecord(List<FeatureValue> record) {
    this.record = record;
  }


  public PutRecordRequest targetStores(List<TargetStore> targetStores) {
    this.targetStores = targetStores;
    return this;
  }

  public PutRecordRequest addTargetStoresItem(TargetStore targetStoresItem) {
    if (this.targetStores == null) {
      this.targetStores = new ArrayList<>();
    }
    this.targetStores.add(targetStoresItem);
    return this;
  }

  /**
   * A list of stores to which you&#39;re adding the record. By default, Feature Store adds the record to all of the stores that you&#39;re using for the &lt;code&gt;FeatureGroup&lt;/code&gt;.
   * @return targetStores
   */
  @javax.annotation.Nullable
  public List<TargetStore> getTargetStores() {
    return targetStores;
  }

  public void setTargetStores(List<TargetStore> targetStores) {
    this.targetStores = targetStores;
  }


  public PutRecordRequest ttlDuration(PutRecordRequestTtlDuration ttlDuration) {
    this.ttlDuration = ttlDuration;
    return this;
  }

  /**
   * Get ttlDuration
   * @return ttlDuration
   */
  @javax.annotation.Nullable
  public PutRecordRequestTtlDuration getTtlDuration() {
    return ttlDuration;
  }

  public void setTtlDuration(PutRecordRequestTtlDuration ttlDuration) {
    this.ttlDuration = ttlDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutRecordRequest putRecordRequest = (PutRecordRequest) o;
    return Objects.equals(this.record, putRecordRequest.record) &&
        Objects.equals(this.targetStores, putRecordRequest.targetStores) &&
        Objects.equals(this.ttlDuration, putRecordRequest.ttlDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(record, targetStores, ttlDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutRecordRequest {\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    targetStores: ").append(toIndentedString(targetStores)).append("\n");
    sb.append("    ttlDuration: ").append(toIndentedString(ttlDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Record");
    openapiFields.add("TargetStores");
    openapiFields.add("TtlDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Record");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutRecordRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutRecordRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutRecordRequest is not found in the empty JSON string", PutRecordRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutRecordRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutRecordRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutRecordRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Record").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Record` to be an array in the JSON string but got `%s`", jsonObj.get("Record").toString()));
      }

      JsonArray jsonArrayrecord = jsonObj.getAsJsonArray("Record");
      // validate the required field `Record` (array)
      for (int i = 0; i < jsonArrayrecord.size(); i++) {
        FeatureValue.validateJsonElement(jsonArrayrecord.get(i));
      };
      // ensure the optional json data is an array if present
      if (jsonObj.get("TargetStores") != null && !jsonObj.get("TargetStores").isJsonNull() && !jsonObj.get("TargetStores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetStores` to be an array in the JSON string but got `%s`", jsonObj.get("TargetStores").toString()));
      }
      // validate the optional field `TtlDuration`
      if (jsonObj.get("TtlDuration") != null && !jsonObj.get("TtlDuration").isJsonNull()) {
        PutRecordRequestTtlDuration.validateJsonElement(jsonObj.get("TtlDuration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutRecordRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutRecordRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutRecordRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutRecordRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutRecordRequest>() {
           @Override
           public void write(JsonWriter out, PutRecordRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutRecordRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutRecordRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutRecordRequest
   * @throws IOException if the JSON string is invalid with respect to PutRecordRequest
   */
  public static PutRecordRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutRecordRequest.class);
  }

  /**
   * Convert an instance of PutRecordRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

