# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_resource_classification_update_classification_type_update import S3ResourceClassificationUpdateClassificationTypeUpdate
from openapi_server import util


class S3ResourceClassificationUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_name: str=None, prefix: str=None, classification_type_update: S3ResourceClassificationUpdateClassificationTypeUpdate=None):
        """S3ResourceClassificationUpdate - a model defined in OpenAPI

        :param bucket_name: The bucket_name of this S3ResourceClassificationUpdate.
        :param prefix: The prefix of this S3ResourceClassificationUpdate.
        :param classification_type_update: The classification_type_update of this S3ResourceClassificationUpdate.
        """
        self.openapi_types = {
            'bucket_name': str,
            'prefix': str,
            'classification_type_update': S3ResourceClassificationUpdateClassificationTypeUpdate
        }

        self.attribute_map = {
            'bucket_name': 'bucketName',
            'prefix': 'prefix',
            'classification_type_update': 'classificationTypeUpdate'
        }

        self._bucket_name = bucket_name
        self._prefix = prefix
        self._classification_type_update = classification_type_update

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3ResourceClassificationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3ResourceClassificationUpdate of this S3ResourceClassificationUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_name(self):
        """Gets the bucket_name of this S3ResourceClassificationUpdate.


        :return: The bucket_name of this S3ResourceClassificationUpdate.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this S3ResourceClassificationUpdate.


        :param bucket_name: The bucket_name of this S3ResourceClassificationUpdate.
        :type bucket_name: str
        """
        if bucket_name is None:
            raise ValueError("Invalid value for `bucket_name`, must not be `None`")

        self._bucket_name = bucket_name

    @property
    def prefix(self):
        """Gets the prefix of this S3ResourceClassificationUpdate.


        :return: The prefix of this S3ResourceClassificationUpdate.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this S3ResourceClassificationUpdate.


        :param prefix: The prefix of this S3ResourceClassificationUpdate.
        :type prefix: str
        """

        self._prefix = prefix

    @property
    def classification_type_update(self):
        """Gets the classification_type_update of this S3ResourceClassificationUpdate.


        :return: The classification_type_update of this S3ResourceClassificationUpdate.
        :rtype: S3ResourceClassificationUpdateClassificationTypeUpdate
        """
        return self._classification_type_update

    @classification_type_update.setter
    def classification_type_update(self, classification_type_update):
        """Sets the classification_type_update of this S3ResourceClassificationUpdate.


        :param classification_type_update: The classification_type_update of this S3ResourceClassificationUpdate.
        :type classification_type_update: S3ResourceClassificationUpdateClassificationTypeUpdate
        """
        if classification_type_update is None:
            raise ValueError("Invalid value for `classification_type_update`, must not be `None`")

        self._classification_type_update = classification_type_update
