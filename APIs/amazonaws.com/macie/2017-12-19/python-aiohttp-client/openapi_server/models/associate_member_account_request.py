# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssociateMemberAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_account_id: str=None):
        """AssociateMemberAccountRequest - a model defined in OpenAPI

        :param member_account_id: The member_account_id of this AssociateMemberAccountRequest.
        """
        self.openapi_types = {
            'member_account_id': str
        }

        self.attribute_map = {
            'member_account_id': 'memberAccountId'
        }

        self._member_account_id = member_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateMemberAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateMemberAccountRequest of this AssociateMemberAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_account_id(self):
        """Gets the member_account_id of this AssociateMemberAccountRequest.


        :return: The member_account_id of this AssociateMemberAccountRequest.
        :rtype: str
        """
        return self._member_account_id

    @member_account_id.setter
    def member_account_id(self, member_account_id):
        """Sets the member_account_id of this AssociateMemberAccountRequest.


        :param member_account_id: The member_account_id of this AssociateMemberAccountRequest.
        :type member_account_id: str
        """
        if member_account_id is None:
            raise ValueError("Invalid value for `member_account_id`, must not be `None`")

        self._member_account_id = member_account_id
