# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_continuous_classification_type import S3ContinuousClassificationType
from openapi_server.models.s3_one_time_classification_type import S3OneTimeClassificationType
from openapi_server import util


class S3ResourceClassificationUpdateClassificationTypeUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, one_time: S3OneTimeClassificationType=None, continuous: S3ContinuousClassificationType=None):
        """S3ResourceClassificationUpdateClassificationTypeUpdate - a model defined in OpenAPI

        :param one_time: The one_time of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        :param continuous: The continuous of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        """
        self.openapi_types = {
            'one_time': S3OneTimeClassificationType,
            'continuous': S3ContinuousClassificationType
        }

        self.attribute_map = {
            'one_time': 'oneTime',
            'continuous': 'continuous'
        }

        self._one_time = one_time
        self._continuous = continuous

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3ResourceClassificationUpdateClassificationTypeUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3ResourceClassificationUpdate_classificationTypeUpdate of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def one_time(self):
        """Gets the one_time of this S3ResourceClassificationUpdateClassificationTypeUpdate.


        :return: The one_time of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        :rtype: S3OneTimeClassificationType
        """
        return self._one_time

    @one_time.setter
    def one_time(self, one_time):
        """Sets the one_time of this S3ResourceClassificationUpdateClassificationTypeUpdate.


        :param one_time: The one_time of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        :type one_time: S3OneTimeClassificationType
        """

        self._one_time = one_time

    @property
    def continuous(self):
        """Gets the continuous of this S3ResourceClassificationUpdateClassificationTypeUpdate.


        :return: The continuous of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        :rtype: S3ContinuousClassificationType
        """
        return self._continuous

    @continuous.setter
    def continuous(self, continuous):
        """Sets the continuous of this S3ResourceClassificationUpdateClassificationTypeUpdate.


        :param continuous: The continuous of this S3ResourceClassificationUpdateClassificationTypeUpdate.
        :type continuous: S3ContinuousClassificationType
        """

        self._continuous = continuous
