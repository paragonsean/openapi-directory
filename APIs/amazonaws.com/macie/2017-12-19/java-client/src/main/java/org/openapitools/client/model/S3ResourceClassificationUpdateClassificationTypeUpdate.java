/*
 * Amazon Macie
 * <fullname>Amazon Macie Classic</fullname> <p>Amazon Macie Classic has been discontinued and is no longer available.</p> <p>A new Amazon Macie is now available with significant design improvements and additional features, at a lower price and in most Amazon Web Services Regions. We encourage you to take advantage of the new and improved features, and benefit from the reduced cost. To learn about features and pricing for the new Macie, see <a href=\"http://aws.amazon.com/macie/\">Amazon Macie</a>. To learn how to use the new Macie, see the <a href=\"https://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\">Amazon Macie User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-12-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3ContinuousClassificationType;
import org.openapitools.client.model.S3OneTimeClassificationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * S3ResourceClassificationUpdateClassificationTypeUpdate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:13.287738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3ResourceClassificationUpdateClassificationTypeUpdate {
  public static final String SERIALIZED_NAME_ONE_TIME = "oneTime";
  @SerializedName(SERIALIZED_NAME_ONE_TIME)
  private S3OneTimeClassificationType oneTime;

  public static final String SERIALIZED_NAME_CONTINUOUS = "continuous";
  @SerializedName(SERIALIZED_NAME_CONTINUOUS)
  private S3ContinuousClassificationType continuous;

  public S3ResourceClassificationUpdateClassificationTypeUpdate() {
  }

  public S3ResourceClassificationUpdateClassificationTypeUpdate oneTime(S3OneTimeClassificationType oneTime) {
    this.oneTime = oneTime;
    return this;
  }

  /**
   * Get oneTime
   * @return oneTime
   */
  @javax.annotation.Nullable
  public S3OneTimeClassificationType getOneTime() {
    return oneTime;
  }

  public void setOneTime(S3OneTimeClassificationType oneTime) {
    this.oneTime = oneTime;
  }


  public S3ResourceClassificationUpdateClassificationTypeUpdate continuous(S3ContinuousClassificationType continuous) {
    this.continuous = continuous;
    return this;
  }

  /**
   * Get continuous
   * @return continuous
   */
  @javax.annotation.Nullable
  public S3ContinuousClassificationType getContinuous() {
    return continuous;
  }

  public void setContinuous(S3ContinuousClassificationType continuous) {
    this.continuous = continuous;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3ResourceClassificationUpdateClassificationTypeUpdate s3ResourceClassificationUpdateClassificationTypeUpdate = (S3ResourceClassificationUpdateClassificationTypeUpdate) o;
    return Objects.equals(this.oneTime, s3ResourceClassificationUpdateClassificationTypeUpdate.oneTime) &&
        Objects.equals(this.continuous, s3ResourceClassificationUpdateClassificationTypeUpdate.continuous);
  }

  @Override
  public int hashCode() {
    return Objects.hash(oneTime, continuous);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3ResourceClassificationUpdateClassificationTypeUpdate {\n");
    sb.append("    oneTime: ").append(toIndentedString(oneTime)).append("\n");
    sb.append("    continuous: ").append(toIndentedString(continuous)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("oneTime");
    openapiFields.add("continuous");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3ResourceClassificationUpdateClassificationTypeUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3ResourceClassificationUpdateClassificationTypeUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3ResourceClassificationUpdateClassificationTypeUpdate is not found in the empty JSON string", S3ResourceClassificationUpdateClassificationTypeUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3ResourceClassificationUpdateClassificationTypeUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3ResourceClassificationUpdateClassificationTypeUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `oneTime`
      if (jsonObj.get("oneTime") != null && !jsonObj.get("oneTime").isJsonNull()) {
        S3OneTimeClassificationType.validateJsonElement(jsonObj.get("oneTime"));
      }
      // validate the optional field `continuous`
      if (jsonObj.get("continuous") != null && !jsonObj.get("continuous").isJsonNull()) {
        S3ContinuousClassificationType.validateJsonElement(jsonObj.get("continuous"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3ResourceClassificationUpdateClassificationTypeUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3ResourceClassificationUpdateClassificationTypeUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3ResourceClassificationUpdateClassificationTypeUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3ResourceClassificationUpdateClassificationTypeUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<S3ResourceClassificationUpdateClassificationTypeUpdate>() {
           @Override
           public void write(JsonWriter out, S3ResourceClassificationUpdateClassificationTypeUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3ResourceClassificationUpdateClassificationTypeUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3ResourceClassificationUpdateClassificationTypeUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3ResourceClassificationUpdateClassificationTypeUpdate
   * @throws IOException if the JSON string is invalid with respect to S3ResourceClassificationUpdateClassificationTypeUpdate
   */
  public static S3ResourceClassificationUpdateClassificationTypeUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3ResourceClassificationUpdateClassificationTypeUpdate.class);
  }

  /**
   * Convert an instance of S3ResourceClassificationUpdateClassificationTypeUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

