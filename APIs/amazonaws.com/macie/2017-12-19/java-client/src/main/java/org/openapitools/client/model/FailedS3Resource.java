/*
 * Amazon Macie
 * <fullname>Amazon Macie Classic</fullname> <p>Amazon Macie Classic has been discontinued and is no longer available.</p> <p>A new Amazon Macie is now available with significant design improvements and additional features, at a lower price and in most Amazon Web Services Regions. We encourage you to take advantage of the new and improved features, and benefit from the reduced cost. To learn about features and pricing for the new Macie, see <a href=\"http://aws.amazon.com/macie/\">Amazon Macie</a>. To learn how to use the new Macie, see the <a href=\"https://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\">Amazon Macie User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-12-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailedS3ResourceFailedItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * (Discontinued) Includes details about the failed S3 resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:13.287738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FailedS3Resource {
  public static final String SERIALIZED_NAME_FAILED_ITEM = "failedItem";
  @SerializedName(SERIALIZED_NAME_FAILED_ITEM)
  private FailedS3ResourceFailedItem failedItem;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private String errorCode;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "errorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public FailedS3Resource() {
  }

  public FailedS3Resource failedItem(FailedS3ResourceFailedItem failedItem) {
    this.failedItem = failedItem;
    return this;
  }

  /**
   * Get failedItem
   * @return failedItem
   */
  @javax.annotation.Nullable
  public FailedS3ResourceFailedItem getFailedItem() {
    return failedItem;
  }

  public void setFailedItem(FailedS3ResourceFailedItem failedItem) {
    this.failedItem = failedItem;
  }


  public FailedS3Resource errorCode(String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Get errorCode
   * @return errorCode
   */
  @javax.annotation.Nullable
  public String getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(String errorCode) {
    this.errorCode = errorCode;
  }


  public FailedS3Resource errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FailedS3Resource failedS3Resource = (FailedS3Resource) o;
    return Objects.equals(this.failedItem, failedS3Resource.failedItem) &&
        Objects.equals(this.errorCode, failedS3Resource.errorCode) &&
        Objects.equals(this.errorMessage, failedS3Resource.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failedItem, errorCode, errorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FailedS3Resource {\n");
    sb.append("    failedItem: ").append(toIndentedString(failedItem)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failedItem");
    openapiFields.add("errorCode");
    openapiFields.add("errorMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FailedS3Resource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FailedS3Resource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FailedS3Resource is not found in the empty JSON string", FailedS3Resource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FailedS3Resource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FailedS3Resource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failedItem`
      if (jsonObj.get("failedItem") != null && !jsonObj.get("failedItem").isJsonNull()) {
        FailedS3ResourceFailedItem.validateJsonElement(jsonObj.get("failedItem"));
      }
      // validate the optional field `errorCode`
      if (jsonObj.get("errorCode") != null && !jsonObj.get("errorCode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("errorCode"));
      }
      // validate the optional field `errorMessage`
      if (jsonObj.get("errorMessage") != null && !jsonObj.get("errorMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("errorMessage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FailedS3Resource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FailedS3Resource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FailedS3Resource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FailedS3Resource.class));

       return (TypeAdapter<T>) new TypeAdapter<FailedS3Resource>() {
           @Override
           public void write(JsonWriter out, FailedS3Resource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FailedS3Resource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FailedS3Resource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FailedS3Resource
   * @throws IOException if the JSON string is invalid with respect to FailedS3Resource
   */
  public static FailedS3Resource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FailedS3Resource.class);
  }

  /**
   * Convert an instance of FailedS3Resource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

