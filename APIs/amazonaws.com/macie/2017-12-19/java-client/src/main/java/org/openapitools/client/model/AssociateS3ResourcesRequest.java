/*
 * Amazon Macie
 * <fullname>Amazon Macie Classic</fullname> <p>Amazon Macie Classic has been discontinued and is no longer available.</p> <p>A new Amazon Macie is now available with significant design improvements and additional features, at a lower price and in most Amazon Web Services Regions. We encourage you to take advantage of the new and improved features, and benefit from the reduced cost. To learn about features and pricing for the new Macie, see <a href=\"http://aws.amazon.com/macie/\">Amazon Macie</a>. To learn how to use the new Macie, see the <a href=\"https://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\">Amazon Macie User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-12-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssociateS3ResourcesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:13.287738-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssociateS3ResourcesRequest {
  public static final String SERIALIZED_NAME_MEMBER_ACCOUNT_ID = "memberAccountId";
  @SerializedName(SERIALIZED_NAME_MEMBER_ACCOUNT_ID)
  private String memberAccountId;

  public static final String SERIALIZED_NAME_S3_RESOURCES = "s3Resources";
  @SerializedName(SERIALIZED_NAME_S3_RESOURCES)
  private List s3Resources;

  public AssociateS3ResourcesRequest() {
  }

  public AssociateS3ResourcesRequest memberAccountId(String memberAccountId) {
    this.memberAccountId = memberAccountId;
    return this;
  }

  /**
   * Get memberAccountId
   * @return memberAccountId
   */
  @javax.annotation.Nullable
  public String getMemberAccountId() {
    return memberAccountId;
  }

  public void setMemberAccountId(String memberAccountId) {
    this.memberAccountId = memberAccountId;
  }


  public AssociateS3ResourcesRequest s3Resources(List s3Resources) {
    this.s3Resources = s3Resources;
    return this;
  }

  /**
   * Get s3Resources
   * @return s3Resources
   */
  @javax.annotation.Nonnull
  public List getS3Resources() {
    return s3Resources;
  }

  public void setS3Resources(List s3Resources) {
    this.s3Resources = s3Resources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociateS3ResourcesRequest associateS3ResourcesRequest = (AssociateS3ResourcesRequest) o;
    return Objects.equals(this.memberAccountId, associateS3ResourcesRequest.memberAccountId) &&
        Objects.equals(this.s3Resources, associateS3ResourcesRequest.s3Resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(memberAccountId, s3Resources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociateS3ResourcesRequest {\n");
    sb.append("    memberAccountId: ").append(toIndentedString(memberAccountId)).append("\n");
    sb.append("    s3Resources: ").append(toIndentedString(s3Resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("memberAccountId");
    openapiFields.add("s3Resources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("s3Resources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssociateS3ResourcesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssociateS3ResourcesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociateS3ResourcesRequest is not found in the empty JSON string", AssociateS3ResourcesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssociateS3ResourcesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssociateS3ResourcesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociateS3ResourcesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `memberAccountId`
      if (jsonObj.get("memberAccountId") != null && !jsonObj.get("memberAccountId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("memberAccountId"));
      }
      // validate the required field `s3Resources`
      List.validateJsonElement(jsonObj.get("s3Resources"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociateS3ResourcesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociateS3ResourcesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociateS3ResourcesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociateS3ResourcesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociateS3ResourcesRequest>() {
           @Override
           public void write(JsonWriter out, AssociateS3ResourcesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociateS3ResourcesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssociateS3ResourcesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssociateS3ResourcesRequest
   * @throws IOException if the JSON string is invalid with respect to AssociateS3ResourcesRequest
   */
  public static AssociateS3ResourcesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociateS3ResourcesRequest.class);
  }

  /**
   * Convert an instance of AssociateS3ResourcesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

