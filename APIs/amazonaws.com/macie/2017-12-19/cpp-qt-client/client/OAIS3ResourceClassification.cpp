/**
 * Amazon Macie
 * <fullname>Amazon Macie Classic</fullname> <p>Amazon Macie Classic has been discontinued and is no longer available.</p> <p>A new Amazon Macie is now available with significant design improvements and additional features, at a lower price and in most Amazon Web Services Regions. We encourage you to take advantage of the new and improved features, and benefit from the reduced cost. To learn about features and pricing for the new Macie, see <a href=\"http://aws.amazon.com/macie/\">Amazon Macie</a>. To learn how to use the new Macie, see the <a href=\"https://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\">Amazon Macie User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-12-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ResourceClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ResourceClassification::OAIS3ResourceClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ResourceClassification::OAIS3ResourceClassification() {
    this->initializeModel();
}

OAIS3ResourceClassification::~OAIS3ResourceClassification() {}

void OAIS3ResourceClassification::initializeModel() {

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_classification_type_isSet = false;
    m_classification_type_isValid = false;
}

void OAIS3ResourceClassification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ResourceClassification::fromJsonObject(QJsonObject json) {

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_classification_type_isValid = ::OpenAPI::fromJsonValue(m_classification_type, json[QString("classificationType")]);
    m_classification_type_isSet = !json[QString("classificationType")].isNull() && m_classification_type_isValid;
}

QString OAIS3ResourceClassification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ResourceClassification::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_classification_type.isSet()) {
        obj.insert(QString("classificationType"), ::OpenAPI::toJsonValue(m_classification_type));
    }
    return obj;
}

QString OAIS3ResourceClassification::getBucketName() const {
    return m_bucket_name;
}
void OAIS3ResourceClassification::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIS3ResourceClassification::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIS3ResourceClassification::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIS3ResourceClassification::getPrefix() const {
    return m_prefix;
}
void OAIS3ResourceClassification::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIS3ResourceClassification::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIS3ResourceClassification::is_prefix_Valid() const{
    return m_prefix_isValid;
}

OAIS3ResourceClassification_classificationType OAIS3ResourceClassification::getClassificationType() const {
    return m_classification_type;
}
void OAIS3ResourceClassification::setClassificationType(const OAIS3ResourceClassification_classificationType &classification_type) {
    m_classification_type = classification_type;
    m_classification_type_isSet = true;
}

bool OAIS3ResourceClassification::is_classification_type_Set() const{
    return m_classification_type_isSet;
}

bool OAIS3ResourceClassification::is_classification_type_Valid() const{
    return m_classification_type_isValid;
}

bool OAIS3ResourceClassification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ResourceClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bucket_name_isValid && m_classification_type_isValid && true;
}

} // namespace OpenAPI
