/**
 * Amazon Macie
 * <fullname>Amazon Macie Classic</fullname> <p>Amazon Macie Classic has been discontinued and is no longer available.</p> <p>A new Amazon Macie is now available with significant design improvements and additional features, at a lower price and in most Amazon Web Services Regions. We encourage you to take advantage of the new and improved features, and benefit from the reduced cost. To learn about features and pricing for the new Macie, see <a href=\"http://aws.amazon.com/macie/\">Amazon Macie</a>. To learn how to use the new Macie, see the <a href=\"https://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\">Amazon Macie User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-12-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassificationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassificationType::OAIClassificationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassificationType::OAIClassificationType() {
    this->initializeModel();
}

OAIClassificationType::~OAIClassificationType() {}

void OAIClassificationType::initializeModel() {

    m_one_time_isSet = false;
    m_one_time_isValid = false;

    m_continuous_isSet = false;
    m_continuous_isValid = false;
}

void OAIClassificationType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassificationType::fromJsonObject(QJsonObject json) {

    m_one_time_isValid = ::OpenAPI::fromJsonValue(m_one_time, json[QString("oneTime")]);
    m_one_time_isSet = !json[QString("oneTime")].isNull() && m_one_time_isValid;

    m_continuous_isValid = ::OpenAPI::fromJsonValue(m_continuous, json[QString("continuous")]);
    m_continuous_isSet = !json[QString("continuous")].isNull() && m_continuous_isValid;
}

QString OAIClassificationType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassificationType::asJsonObject() const {
    QJsonObject obj;
    if (m_one_time.isSet()) {
        obj.insert(QString("oneTime"), ::OpenAPI::toJsonValue(m_one_time));
    }
    if (m_continuous.isSet()) {
        obj.insert(QString("continuous"), ::OpenAPI::toJsonValue(m_continuous));
    }
    return obj;
}

OAIS3OneTimeClassificationType OAIClassificationType::getOneTime() const {
    return m_one_time;
}
void OAIClassificationType::setOneTime(const OAIS3OneTimeClassificationType &one_time) {
    m_one_time = one_time;
    m_one_time_isSet = true;
}

bool OAIClassificationType::is_one_time_Set() const{
    return m_one_time_isSet;
}

bool OAIClassificationType::is_one_time_Valid() const{
    return m_one_time_isValid;
}

OAIS3ContinuousClassificationType OAIClassificationType::getContinuous() const {
    return m_continuous;
}
void OAIClassificationType::setContinuous(const OAIS3ContinuousClassificationType &continuous) {
    m_continuous = continuous;
    m_continuous_isSet = true;
}

bool OAIClassificationType::is_continuous_Set() const{
    return m_continuous_isSet;
}

bool OAIClassificationType::is_continuous_Valid() const{
    return m_continuous_isValid;
}

bool OAIClassificationType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_one_time.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassificationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_one_time_isValid && m_continuous_isValid && true;
}

} // namespace OpenAPI
