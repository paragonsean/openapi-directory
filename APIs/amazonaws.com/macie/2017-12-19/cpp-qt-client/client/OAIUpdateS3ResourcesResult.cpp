/**
 * Amazon Macie
 * <fullname>Amazon Macie Classic</fullname> <p>Amazon Macie Classic has been discontinued and is no longer available.</p> <p>A new Amazon Macie is now available with significant design improvements and additional features, at a lower price and in most Amazon Web Services Regions. We encourage you to take advantage of the new and improved features, and benefit from the reduced cost. To learn about features and pricing for the new Macie, see <a href=\"http://aws.amazon.com/macie/\">Amazon Macie</a>. To learn how to use the new Macie, see the <a href=\"https://docs.aws.amazon.com/macie/latest/user/what-is-macie.html\">Amazon Macie User Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-12-19
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateS3ResourcesResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateS3ResourcesResult::OAIUpdateS3ResourcesResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateS3ResourcesResult::OAIUpdateS3ResourcesResult() {
    this->initializeModel();
}

OAIUpdateS3ResourcesResult::~OAIUpdateS3ResourcesResult() {}

void OAIUpdateS3ResourcesResult::initializeModel() {

    m_failed_s3_resources_isSet = false;
    m_failed_s3_resources_isValid = false;
}

void OAIUpdateS3ResourcesResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateS3ResourcesResult::fromJsonObject(QJsonObject json) {

    m_failed_s3_resources_isValid = ::OpenAPI::fromJsonValue(m_failed_s3_resources, json[QString("failedS3Resources")]);
    m_failed_s3_resources_isSet = !json[QString("failedS3Resources")].isNull() && m_failed_s3_resources_isValid;
}

QString OAIUpdateS3ResourcesResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateS3ResourcesResult::asJsonObject() const {
    QJsonObject obj;
    if (m_failed_s3_resources.isSet()) {
        obj.insert(QString("failedS3Resources"), ::OpenAPI::toJsonValue(m_failed_s3_resources));
    }
    return obj;
}

QList OAIUpdateS3ResourcesResult::getFailedS3Resources() const {
    return m_failed_s3_resources;
}
void OAIUpdateS3ResourcesResult::setFailedS3Resources(const QList &failed_s3_resources) {
    m_failed_s3_resources = failed_s3_resources;
    m_failed_s3_resources_isSet = true;
}

bool OAIUpdateS3ResourcesResult::is_failed_s3_resources_Set() const{
    return m_failed_s3_resources_isSet;
}

bool OAIUpdateS3ResourcesResult::is_failed_s3_resources_Valid() const{
    return m_failed_s3_resources_isValid;
}

bool OAIUpdateS3ResourcesResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failed_s3_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateS3ResourcesResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
