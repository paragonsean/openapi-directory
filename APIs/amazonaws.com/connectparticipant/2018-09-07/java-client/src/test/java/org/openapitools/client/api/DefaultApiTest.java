/*
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CompleteAttachmentUploadRequest;
import org.openapitools.client.model.CreateParticipantConnectionRequest;
import org.openapitools.client.model.CreateParticipantConnectionResponse;
import org.openapitools.client.model.DisconnectParticipantRequest;
import org.openapitools.client.model.GetAttachmentRequest;
import org.openapitools.client.model.GetAttachmentResponse;
import org.openapitools.client.model.GetTranscriptRequest;
import org.openapitools.client.model.GetTranscriptResponse;
import org.openapitools.client.model.SendEventRequest;
import org.openapitools.client.model.SendEventResponse;
import org.openapitools.client.model.SendMessageRequest;
import org.openapitools.client.model.SendMessageResponse;
import org.openapitools.client.model.StartAttachmentUploadRequest;
import org.openapitools.client.model.StartAttachmentUploadResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;Allows you to confirm that the attachment has been uploaded using the pre-signed URL provided in StartAttachmentUpload API. &lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeAttachmentUploadTest() throws ApiException {
        String xAmzBearer = null;
        CompleteAttachmentUploadRequest completeAttachmentUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.completeAttachmentUpload(xAmzBearer, completeAttachmentUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates the participant&#39;s connection. &lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ParticipantToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ConnectionToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The participant token is valid for the lifetime of the participant â€“ until they are part of a contact.&lt;/p&gt; &lt;p&gt;The response URL for &lt;code&gt;WEBSOCKET&lt;/code&gt; Type has a connect expiry timeout of 100s. Clients must manually connect to the returned websocket URL and subscribe to the desired topic. &lt;/p&gt; &lt;p&gt;For chat, you need to publish the following on the established websocket connection:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{\&quot;topic\&quot;:\&quot;aws/subscribe\&quot;,\&quot;content\&quot;:{\&quot;topics\&quot;:[\&quot;aws/chat\&quot;]}}&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Upon websocket URL expiry, as specified in the response ConnectionExpiry parameter, clients need to call this API again to obtain a new websocket URL and perform the same steps as before.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Message streaming support&lt;/b&gt;: This API can also be used together with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/APIReference/API_StartContactStreaming.html\&quot;&gt;StartContactStreaming&lt;/a&gt; API to create a participant connection for chat contacts that are not using a websocket. For more information about message streaming, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/chat-message-streaming.html\&quot;&gt;Enable real-time chat message streaming&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Feature specifications&lt;/b&gt;: For information about feature specifications, such as the allowed number of open websocket connections per participant, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\&quot;&gt;Feature specifications&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createParticipantConnectionTest() throws ApiException {
        String xAmzBearer = null;
        CreateParticipantConnectionRequest createParticipantConnectionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateParticipantConnectionResponse response = api.createParticipantConnection(xAmzBearer, createParticipantConnectionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Disconnects a participant. &lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disconnectParticipantTest() throws ApiException {
        String xAmzBearer = null;
        DisconnectParticipantRequest disconnectParticipantRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disconnectParticipant(xAmzBearer, disconnectParticipantRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides a pre-signed URL for download of a completed attachment. This is an asynchronous API for use with active contacts.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentTest() throws ApiException {
        String xAmzBearer = null;
        GetAttachmentRequest getAttachmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAttachmentResponse response = api.getAttachment(xAmzBearer, getAttachmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves a transcript of the session, including details about any attachments. For information about accessing past chat contact transcripts for a persistent chat, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html\&quot;&gt;Enable persistent chat&lt;/a&gt;. &lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTranscriptTest() throws ApiException {
        String xAmzBearer = null;
        GetTranscriptRequest getTranscriptRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetTranscriptResponse response = api.getTranscript(xAmzBearer, getTranscriptRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends an event. &lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEventTest() throws ApiException {
        String xAmzBearer = null;
        SendEventRequest sendEventRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendEventResponse response = api.sendEvent(xAmzBearer, sendEventRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sends a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        String xAmzBearer = null;
        SendMessageRequest sendMessageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SendMessageResponse response = api.sendMessage(xAmzBearer, sendMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Provides a pre-signed Amazon S3 URL in response for uploading the file directly to S3.&lt;/p&gt; &lt;note&gt; &lt;p&gt; &lt;code&gt;ConnectionToken&lt;/code&gt; is used for invoking this API instead of &lt;code&gt;ParticipantToken&lt;/code&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Amazon Connect Participant Service APIs do not use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\&quot;&gt;Signature Version 4 authentication&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAttachmentUploadTest() throws ApiException {
        String xAmzBearer = null;
        StartAttachmentUploadRequest startAttachmentUploadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartAttachmentUploadResponse response = api.startAttachmentUpload(xAmzBearer, startAttachmentUploadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
