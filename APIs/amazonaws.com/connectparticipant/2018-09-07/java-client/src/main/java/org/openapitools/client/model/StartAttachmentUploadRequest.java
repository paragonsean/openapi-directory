/*
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartAttachmentUploadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:47.705152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartAttachmentUploadRequest {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_ATTACHMENT_SIZE_IN_BYTES = "AttachmentSizeInBytes";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_SIZE_IN_BYTES)
  private Integer attachmentSizeInBytes;

  public static final String SERIALIZED_NAME_ATTACHMENT_NAME = "AttachmentName";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_NAME)
  private String attachmentName;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public StartAttachmentUploadRequest() {
  }

  public StartAttachmentUploadRequest contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Describes the MIME file type of the attachment. For a list of supported file types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/connect/latest/adminguide/feature-limits.html\&quot;&gt;Feature specifications&lt;/a&gt; in the &lt;i&gt;Amazon Connect Administrator Guide&lt;/i&gt;.
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public StartAttachmentUploadRequest attachmentSizeInBytes(Integer attachmentSizeInBytes) {
    this.attachmentSizeInBytes = attachmentSizeInBytes;
    return this;
  }

  /**
   * The size of the attachment in bytes.
   * minimum: 1
   * @return attachmentSizeInBytes
   */
  @javax.annotation.Nonnull
  public Integer getAttachmentSizeInBytes() {
    return attachmentSizeInBytes;
  }

  public void setAttachmentSizeInBytes(Integer attachmentSizeInBytes) {
    this.attachmentSizeInBytes = attachmentSizeInBytes;
  }


  public StartAttachmentUploadRequest attachmentName(String attachmentName) {
    this.attachmentName = attachmentName;
    return this;
  }

  /**
   * A case-sensitive name of the attachment being uploaded.
   * @return attachmentName
   */
  @javax.annotation.Nonnull
  public String getAttachmentName() {
    return attachmentName;
  }

  public void setAttachmentName(String attachmentName) {
    this.attachmentName = attachmentName;
  }


  public StartAttachmentUploadRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\&quot;&gt;Making retries safe with idempotent APIs&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartAttachmentUploadRequest startAttachmentUploadRequest = (StartAttachmentUploadRequest) o;
    return Objects.equals(this.contentType, startAttachmentUploadRequest.contentType) &&
        Objects.equals(this.attachmentSizeInBytes, startAttachmentUploadRequest.attachmentSizeInBytes) &&
        Objects.equals(this.attachmentName, startAttachmentUploadRequest.attachmentName) &&
        Objects.equals(this.clientToken, startAttachmentUploadRequest.clientToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, attachmentSizeInBytes, attachmentName, clientToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartAttachmentUploadRequest {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    attachmentSizeInBytes: ").append(toIndentedString(attachmentSizeInBytes)).append("\n");
    sb.append("    attachmentName: ").append(toIndentedString(attachmentName)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContentType");
    openapiFields.add("AttachmentSizeInBytes");
    openapiFields.add("AttachmentName");
    openapiFields.add("ClientToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ContentType");
    openapiRequiredFields.add("AttachmentSizeInBytes");
    openapiRequiredFields.add("AttachmentName");
    openapiRequiredFields.add("ClientToken");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartAttachmentUploadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartAttachmentUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartAttachmentUploadRequest is not found in the empty JSON string", StartAttachmentUploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartAttachmentUploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartAttachmentUploadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartAttachmentUploadRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentType").toString()));
      }
      if (!jsonObj.get("AttachmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttachmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AttachmentName").toString()));
      }
      if (!jsonObj.get("ClientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartAttachmentUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartAttachmentUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartAttachmentUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartAttachmentUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartAttachmentUploadRequest>() {
           @Override
           public void write(JsonWriter out, StartAttachmentUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartAttachmentUploadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartAttachmentUploadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartAttachmentUploadRequest
   * @throws IOException if the JSON string is invalid with respect to StartAttachmentUploadRequest
   */
  public static StartAttachmentUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartAttachmentUploadRequest.class);
  }

  /**
   * Convert an instance of StartAttachmentUploadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

