/*
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GetTranscriptRequestStartPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTranscriptRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:47.705152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTranscriptRequest {
  public static final String SERIALIZED_NAME_CONTACT_ID = "ContactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  /**
   * The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. 
   */
  @JsonAdapter(ScanDirectionEnum.Adapter.class)
  public enum ScanDirectionEnum {
    FORWARD("FORWARD"),
    
    BACKWARD("BACKWARD");

    private String value;

    ScanDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScanDirectionEnum fromValue(String value) {
      for (ScanDirectionEnum b : ScanDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScanDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScanDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScanDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScanDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScanDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCAN_DIRECTION = "ScanDirection";
  @SerializedName(SERIALIZED_NAME_SCAN_DIRECTION)
  private ScanDirectionEnum scanDirection;

  /**
   * The sort order for the records. Default: DESCENDING.
   */
  @JsonAdapter(SortOrderEnum.Adapter.class)
  public enum SortOrderEnum {
    DESCENDING("DESCENDING"),
    
    ASCENDING("ASCENDING");

    private String value;

    SortOrderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortOrderEnum fromValue(String value) {
      for (SortOrderEnum b : SortOrderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortOrderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortOrderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortOrderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortOrderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SortOrderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private SortOrderEnum sortOrder;

  public static final String SERIALIZED_NAME_START_POSITION = "StartPosition";
  @SerializedName(SERIALIZED_NAME_START_POSITION)
  private GetTranscriptRequestStartPosition startPosition;

  public GetTranscriptRequest() {
  }

  public GetTranscriptRequest contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * The contactId from the current contact chain for which transcript is needed.
   * @return contactId
   */
  @javax.annotation.Nullable
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }


  public GetTranscriptRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return in the page. Default: 10. 
   * minimum: 0
   * maximum: 100
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GetTranscriptRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public GetTranscriptRequest scanDirection(ScanDirectionEnum scanDirection) {
    this.scanDirection = scanDirection;
    return this;
  }

  /**
   * The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. 
   * @return scanDirection
   */
  @javax.annotation.Nullable
  public ScanDirectionEnum getScanDirection() {
    return scanDirection;
  }

  public void setScanDirection(ScanDirectionEnum scanDirection) {
    this.scanDirection = scanDirection;
  }


  public GetTranscriptRequest sortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

  /**
   * The sort order for the records. Default: DESCENDING.
   * @return sortOrder
   */
  @javax.annotation.Nullable
  public SortOrderEnum getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(SortOrderEnum sortOrder) {
    this.sortOrder = sortOrder;
  }


  public GetTranscriptRequest startPosition(GetTranscriptRequestStartPosition startPosition) {
    this.startPosition = startPosition;
    return this;
  }

  /**
   * Get startPosition
   * @return startPosition
   */
  @javax.annotation.Nullable
  public GetTranscriptRequestStartPosition getStartPosition() {
    return startPosition;
  }

  public void setStartPosition(GetTranscriptRequestStartPosition startPosition) {
    this.startPosition = startPosition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTranscriptRequest getTranscriptRequest = (GetTranscriptRequest) o;
    return Objects.equals(this.contactId, getTranscriptRequest.contactId) &&
        Objects.equals(this.maxResults, getTranscriptRequest.maxResults) &&
        Objects.equals(this.nextToken, getTranscriptRequest.nextToken) &&
        Objects.equals(this.scanDirection, getTranscriptRequest.scanDirection) &&
        Objects.equals(this.sortOrder, getTranscriptRequest.sortOrder) &&
        Objects.equals(this.startPosition, getTranscriptRequest.startPosition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactId, maxResults, nextToken, scanDirection, sortOrder, startPosition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTranscriptRequest {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    scanDirection: ").append(toIndentedString(scanDirection)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    startPosition: ").append(toIndentedString(startPosition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContactId");
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");
    openapiFields.add("ScanDirection");
    openapiFields.add("SortOrder");
    openapiFields.add("StartPosition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTranscriptRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTranscriptRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTranscriptRequest is not found in the empty JSON string", GetTranscriptRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTranscriptRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTranscriptRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ContactId") != null && !jsonObj.get("ContactId").isJsonNull()) && !jsonObj.get("ContactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactId").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("ScanDirection") != null && !jsonObj.get("ScanDirection").isJsonNull()) && !jsonObj.get("ScanDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ScanDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ScanDirection").toString()));
      }
      // validate the optional field `ScanDirection`
      if (jsonObj.get("ScanDirection") != null && !jsonObj.get("ScanDirection").isJsonNull()) {
        ScanDirectionEnum.validateJsonElement(jsonObj.get("ScanDirection"));
      }
      if ((jsonObj.get("SortOrder") != null && !jsonObj.get("SortOrder").isJsonNull()) && !jsonObj.get("SortOrder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SortOrder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SortOrder").toString()));
      }
      // validate the optional field `SortOrder`
      if (jsonObj.get("SortOrder") != null && !jsonObj.get("SortOrder").isJsonNull()) {
        SortOrderEnum.validateJsonElement(jsonObj.get("SortOrder"));
      }
      // validate the optional field `StartPosition`
      if (jsonObj.get("StartPosition") != null && !jsonObj.get("StartPosition").isJsonNull()) {
        GetTranscriptRequestStartPosition.validateJsonElement(jsonObj.get("StartPosition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTranscriptRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTranscriptRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTranscriptRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTranscriptRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTranscriptRequest>() {
           @Override
           public void write(JsonWriter out, GetTranscriptRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTranscriptRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTranscriptRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTranscriptRequest
   * @throws IOException if the JSON string is invalid with respect to GetTranscriptRequest
   */
  public static GetTranscriptRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTranscriptRequest.class);
  }

  /**
   * Convert an instance of GetTranscriptRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

