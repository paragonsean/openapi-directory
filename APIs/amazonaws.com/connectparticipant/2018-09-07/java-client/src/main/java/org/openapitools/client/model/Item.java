/*
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChatItemType;
import org.openapitools.client.model.ItemMessageMetadata;
import org.openapitools.client.model.ParticipantRole;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An item - message or event - that has been sent. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:47.705152-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_ABSOLUTE_TIME = "AbsoluteTime";
  @SerializedName(SERIALIZED_NAME_ABSOLUTE_TIME)
  private String absoluteTime;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ChatItemType type;

  public static final String SERIALIZED_NAME_PARTICIPANT_ID = "ParticipantId";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ID)
  private String participantId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "DisplayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_PARTICIPANT_ROLE = "ParticipantRole";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_ROLE)
  private ParticipantRole participantRole;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "Attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List attachments;

  public static final String SERIALIZED_NAME_MESSAGE_METADATA = "MessageMetadata";
  @SerializedName(SERIALIZED_NAME_MESSAGE_METADATA)
  private ItemMessageMetadata messageMetadata;

  public static final String SERIALIZED_NAME_RELATED_CONTACT_ID = "RelatedContactId";
  @SerializedName(SERIALIZED_NAME_RELATED_CONTACT_ID)
  private String relatedContactId;

  public static final String SERIALIZED_NAME_CONTACT_ID = "ContactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public Item() {
  }

  public Item absoluteTime(String absoluteTime) {
    this.absoluteTime = absoluteTime;
    return this;
  }

  /**
   * Get absoluteTime
   * @return absoluteTime
   */
  @javax.annotation.Nullable
  public String getAbsoluteTime() {
    return absoluteTime;
  }

  public void setAbsoluteTime(String absoluteTime) {
    this.absoluteTime = absoluteTime;
  }


  public Item content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public Item contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Get contentType
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public Item id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Item type(ChatItemType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public ChatItemType getType() {
    return type;
  }

  public void setType(ChatItemType type) {
    this.type = type;
  }


  public Item participantId(String participantId) {
    this.participantId = participantId;
    return this;
  }

  /**
   * Get participantId
   * @return participantId
   */
  @javax.annotation.Nullable
  public String getParticipantId() {
    return participantId;
  }

  public void setParticipantId(String participantId) {
    this.participantId = participantId;
  }


  public Item displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Item participantRole(ParticipantRole participantRole) {
    this.participantRole = participantRole;
    return this;
  }

  /**
   * Get participantRole
   * @return participantRole
   */
  @javax.annotation.Nullable
  public ParticipantRole getParticipantRole() {
    return participantRole;
  }

  public void setParticipantRole(ParticipantRole participantRole) {
    this.participantRole = participantRole;
  }


  public Item attachments(List attachments) {
    this.attachments = attachments;
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List getAttachments() {
    return attachments;
  }

  public void setAttachments(List attachments) {
    this.attachments = attachments;
  }


  public Item messageMetadata(ItemMessageMetadata messageMetadata) {
    this.messageMetadata = messageMetadata;
    return this;
  }

  /**
   * Get messageMetadata
   * @return messageMetadata
   */
  @javax.annotation.Nullable
  public ItemMessageMetadata getMessageMetadata() {
    return messageMetadata;
  }

  public void setMessageMetadata(ItemMessageMetadata messageMetadata) {
    this.messageMetadata = messageMetadata;
  }


  public Item relatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
    return this;
  }

  /**
   * Get relatedContactId
   * @return relatedContactId
   */
  @javax.annotation.Nullable
  public String getRelatedContactId() {
    return relatedContactId;
  }

  public void setRelatedContactId(String relatedContactId) {
    this.relatedContactId = relatedContactId;
  }


  public Item contactId(String contactId) {
    this.contactId = contactId;
    return this;
  }

  /**
   * Get contactId
   * @return contactId
   */
  @javax.annotation.Nullable
  public String getContactId() {
    return contactId;
  }

  public void setContactId(String contactId) {
    this.contactId = contactId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.absoluteTime, item.absoluteTime) &&
        Objects.equals(this.content, item.content) &&
        Objects.equals(this.contentType, item.contentType) &&
        Objects.equals(this.id, item.id) &&
        Objects.equals(this.type, item.type) &&
        Objects.equals(this.participantId, item.participantId) &&
        Objects.equals(this.displayName, item.displayName) &&
        Objects.equals(this.participantRole, item.participantRole) &&
        Objects.equals(this.attachments, item.attachments) &&
        Objects.equals(this.messageMetadata, item.messageMetadata) &&
        Objects.equals(this.relatedContactId, item.relatedContactId) &&
        Objects.equals(this.contactId, item.contactId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(absoluteTime, content, contentType, id, type, participantId, displayName, participantRole, attachments, messageMetadata, relatedContactId, contactId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    absoluteTime: ").append(toIndentedString(absoluteTime)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    participantRole: ").append(toIndentedString(participantRole)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    messageMetadata: ").append(toIndentedString(messageMetadata)).append("\n");
    sb.append("    relatedContactId: ").append(toIndentedString(relatedContactId)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AbsoluteTime");
    openapiFields.add("Content");
    openapiFields.add("ContentType");
    openapiFields.add("Id");
    openapiFields.add("Type");
    openapiFields.add("ParticipantId");
    openapiFields.add("DisplayName");
    openapiFields.add("ParticipantRole");
    openapiFields.add("Attachments");
    openapiFields.add("MessageMetadata");
    openapiFields.add("RelatedContactId");
    openapiFields.add("ContactId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AbsoluteTime`
      if (jsonObj.get("AbsoluteTime") != null && !jsonObj.get("AbsoluteTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AbsoluteTime"));
      }
      // validate the optional field `Content`
      if (jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Content"));
      }
      // validate the optional field `ContentType`
      if (jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContentType"));
      }
      // validate the optional field `Id`
      if (jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Id"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        ChatItemType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `ParticipantId`
      if (jsonObj.get("ParticipantId") != null && !jsonObj.get("ParticipantId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ParticipantId"));
      }
      // validate the optional field `DisplayName`
      if (jsonObj.get("DisplayName") != null && !jsonObj.get("DisplayName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DisplayName"));
      }
      // validate the optional field `ParticipantRole`
      if (jsonObj.get("ParticipantRole") != null && !jsonObj.get("ParticipantRole").isJsonNull()) {
        ParticipantRole.validateJsonElement(jsonObj.get("ParticipantRole"));
      }
      // validate the optional field `Attachments`
      if (jsonObj.get("Attachments") != null && !jsonObj.get("Attachments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Attachments"));
      }
      // validate the optional field `MessageMetadata`
      if (jsonObj.get("MessageMetadata") != null && !jsonObj.get("MessageMetadata").isJsonNull()) {
        ItemMessageMetadata.validateJsonElement(jsonObj.get("MessageMetadata"));
      }
      // validate the optional field `RelatedContactId`
      if (jsonObj.get("RelatedContactId") != null && !jsonObj.get("RelatedContactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RelatedContactId"));
      }
      // validate the optional field `ContactId`
      if (jsonObj.get("ContactId") != null && !jsonObj.get("ContactId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ContactId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

