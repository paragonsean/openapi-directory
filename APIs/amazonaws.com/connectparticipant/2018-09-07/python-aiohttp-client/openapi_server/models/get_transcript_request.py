# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_transcript_request_start_position import GetTranscriptRequestStartPosition
from openapi_server import util


class GetTranscriptRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_id: str=None, max_results: int=None, next_token: str=None, scan_direction: str=None, sort_order: str=None, start_position: GetTranscriptRequestStartPosition=None):
        """GetTranscriptRequest - a model defined in OpenAPI

        :param contact_id: The contact_id of this GetTranscriptRequest.
        :param max_results: The max_results of this GetTranscriptRequest.
        :param next_token: The next_token of this GetTranscriptRequest.
        :param scan_direction: The scan_direction of this GetTranscriptRequest.
        :param sort_order: The sort_order of this GetTranscriptRequest.
        :param start_position: The start_position of this GetTranscriptRequest.
        """
        self.openapi_types = {
            'contact_id': str,
            'max_results': int,
            'next_token': str,
            'scan_direction': str,
            'sort_order': str,
            'start_position': GetTranscriptRequestStartPosition
        }

        self.attribute_map = {
            'contact_id': 'ContactId',
            'max_results': 'MaxResults',
            'next_token': 'NextToken',
            'scan_direction': 'ScanDirection',
            'sort_order': 'SortOrder',
            'start_position': 'StartPosition'
        }

        self._contact_id = contact_id
        self._max_results = max_results
        self._next_token = next_token
        self._scan_direction = scan_direction
        self._sort_order = sort_order
        self._start_position = start_position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTranscriptRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTranscript_request of this GetTranscriptRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_id(self):
        """Gets the contact_id of this GetTranscriptRequest.

        The contactId from the current contact chain for which transcript is needed.

        :return: The contact_id of this GetTranscriptRequest.
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this GetTranscriptRequest.

        The contactId from the current contact chain for which transcript is needed.

        :param contact_id: The contact_id of this GetTranscriptRequest.
        :type contact_id: str
        """
        if contact_id is not None and len(contact_id) > 256:
            raise ValueError("Invalid value for `contact_id`, length must be less than or equal to `256`")
        if contact_id is not None and len(contact_id) < 1:
            raise ValueError("Invalid value for `contact_id`, length must be greater than or equal to `1`")

        self._contact_id = contact_id

    @property
    def max_results(self):
        """Gets the max_results of this GetTranscriptRequest.

        The maximum number of results to return in the page. Default: 10. 

        :return: The max_results of this GetTranscriptRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GetTranscriptRequest.

        The maximum number of results to return in the page. Default: 10. 

        :param max_results: The max_results of this GetTranscriptRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 0:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `0`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this GetTranscriptRequest.

        The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.

        :return: The next_token of this GetTranscriptRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this GetTranscriptRequest.

        The pagination token. Use the value returned previously in the next subsequent request to retrieve the next set of results.

        :param next_token: The next_token of this GetTranscriptRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1000:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1000`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")

        self._next_token = next_token

    @property
    def scan_direction(self):
        """Gets the scan_direction of this GetTranscriptRequest.

        The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. 

        :return: The scan_direction of this GetTranscriptRequest.
        :rtype: str
        """
        return self._scan_direction

    @scan_direction.setter
    def scan_direction(self, scan_direction):
        """Sets the scan_direction of this GetTranscriptRequest.

        The direction from StartPosition from which to retrieve message. Default: BACKWARD when no StartPosition is provided, FORWARD with StartPosition. 

        :param scan_direction: The scan_direction of this GetTranscriptRequest.
        :type scan_direction: str
        """
        allowed_values = ["FORWARD", "BACKWARD"]  # noqa: E501
        if scan_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `scan_direction` ({0}), must be one of {1}"
                .format(scan_direction, allowed_values)
            )

        self._scan_direction = scan_direction

    @property
    def sort_order(self):
        """Gets the sort_order of this GetTranscriptRequest.

        The sort order for the records. Default: DESCENDING.

        :return: The sort_order of this GetTranscriptRequest.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this GetTranscriptRequest.

        The sort order for the records. Default: DESCENDING.

        :param sort_order: The sort_order of this GetTranscriptRequest.
        :type sort_order: str
        """
        allowed_values = ["DESCENDING", "ASCENDING"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order

    @property
    def start_position(self):
        """Gets the start_position of this GetTranscriptRequest.


        :return: The start_position of this GetTranscriptRequest.
        :rtype: GetTranscriptRequestStartPosition
        """
        return self._start_position

    @start_position.setter
    def start_position(self, start_position):
        """Sets the start_position of this GetTranscriptRequest.


        :param start_position: The start_position of this GetTranscriptRequest.
        :type start_position: GetTranscriptRequestStartPosition
        """

        self._start_position = start_position
