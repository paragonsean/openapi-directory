# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.artifact_status import ArtifactStatus
from openapi_server import util


class AttachmentItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, attachment_id: str=None, attachment_name: str=None, status: ArtifactStatus=None):
        """AttachmentItem - a model defined in OpenAPI

        :param content_type: The content_type of this AttachmentItem.
        :param attachment_id: The attachment_id of this AttachmentItem.
        :param attachment_name: The attachment_name of this AttachmentItem.
        :param status: The status of this AttachmentItem.
        """
        self.openapi_types = {
            'content_type': str,
            'attachment_id': str,
            'attachment_name': str,
            'status': ArtifactStatus
        }

        self.attribute_map = {
            'content_type': 'ContentType',
            'attachment_id': 'AttachmentId',
            'attachment_name': 'AttachmentName',
            'status': 'Status'
        }

        self._content_type = content_type
        self._attachment_id = attachment_id
        self._attachment_name = attachment_name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachmentItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachmentItem of this AttachmentItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this AttachmentItem.


        :return: The content_type of this AttachmentItem.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AttachmentItem.


        :param content_type: The content_type of this AttachmentItem.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def attachment_id(self):
        """Gets the attachment_id of this AttachmentItem.


        :return: The attachment_id of this AttachmentItem.
        :rtype: str
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this AttachmentItem.


        :param attachment_id: The attachment_id of this AttachmentItem.
        :type attachment_id: str
        """

        self._attachment_id = attachment_id

    @property
    def attachment_name(self):
        """Gets the attachment_name of this AttachmentItem.


        :return: The attachment_name of this AttachmentItem.
        :rtype: str
        """
        return self._attachment_name

    @attachment_name.setter
    def attachment_name(self, attachment_name):
        """Sets the attachment_name of this AttachmentItem.


        :param attachment_name: The attachment_name of this AttachmentItem.
        :type attachment_name: str
        """

        self._attachment_name = attachment_name

    @property
    def status(self):
        """Gets the status of this AttachmentItem.


        :return: The status of this AttachmentItem.
        :rtype: ArtifactStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AttachmentItem.


        :param status: The status of this AttachmentItem.
        :type status: ArtifactStatus
        """

        self._status = status
