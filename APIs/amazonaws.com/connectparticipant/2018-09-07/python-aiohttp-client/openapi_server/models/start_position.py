# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartPosition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, absolute_time: str=None, most_recent: int=None):
        """StartPosition - a model defined in OpenAPI

        :param id: The id of this StartPosition.
        :param absolute_time: The absolute_time of this StartPosition.
        :param most_recent: The most_recent of this StartPosition.
        """
        self.openapi_types = {
            'id': str,
            'absolute_time': str,
            'most_recent': int
        }

        self.attribute_map = {
            'id': 'Id',
            'absolute_time': 'AbsoluteTime',
            'most_recent': 'MostRecent'
        }

        self._id = id
        self._absolute_time = absolute_time
        self._most_recent = most_recent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartPosition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartPosition of this StartPosition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this StartPosition.


        :return: The id of this StartPosition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StartPosition.


        :param id: The id of this StartPosition.
        :type id: str
        """

        self._id = id

    @property
    def absolute_time(self):
        """Gets the absolute_time of this StartPosition.


        :return: The absolute_time of this StartPosition.
        :rtype: str
        """
        return self._absolute_time

    @absolute_time.setter
    def absolute_time(self, absolute_time):
        """Sets the absolute_time of this StartPosition.


        :param absolute_time: The absolute_time of this StartPosition.
        :type absolute_time: str
        """

        self._absolute_time = absolute_time

    @property
    def most_recent(self):
        """Gets the most_recent of this StartPosition.


        :return: The most_recent of this StartPosition.
        :rtype: int
        """
        return self._most_recent

    @most_recent.setter
    def most_recent(self, most_recent):
        """Sets the most_recent of this StartPosition.


        :param most_recent: The most_recent of this StartPosition.
        :type most_recent: int
        """

        self._most_recent = most_recent
