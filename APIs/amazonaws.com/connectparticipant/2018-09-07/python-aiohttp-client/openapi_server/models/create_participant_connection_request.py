# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.connection_type import ConnectionType
from openapi_server import util


class CreateParticipantConnectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: List[ConnectionType]=None, connect_participant: bool=None):
        """CreateParticipantConnectionRequest - a model defined in OpenAPI

        :param type: The type of this CreateParticipantConnectionRequest.
        :param connect_participant: The connect_participant of this CreateParticipantConnectionRequest.
        """
        self.openapi_types = {
            'type': List[ConnectionType],
            'connect_participant': bool
        }

        self.attribute_map = {
            'type': 'Type',
            'connect_participant': 'ConnectParticipant'
        }

        self._type = type
        self._connect_participant = connect_participant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateParticipantConnectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateParticipantConnection_request of this CreateParticipantConnectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CreateParticipantConnectionRequest.

        Type of connection information required. This can be omitted if <code>ConnectParticipant</code> is <code>true</code>.

        :return: The type of this CreateParticipantConnectionRequest.
        :rtype: List[ConnectionType]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateParticipantConnectionRequest.

        Type of connection information required. This can be omitted if <code>ConnectParticipant</code> is <code>true</code>.

        :param type: The type of this CreateParticipantConnectionRequest.
        :type type: List[ConnectionType]
        """
        if type is not None and len(type) < 1:
            raise ValueError("Invalid value for `type`, number of items must be greater than or equal to `1`")

        self._type = type

    @property
    def connect_participant(self):
        """Gets the connect_participant of this CreateParticipantConnectionRequest.

        Amazon Connect Participant is used to mark the participant as connected for customer participant in message streaming, as well as for agent or manager participant in non-streaming chats.

        :return: The connect_participant of this CreateParticipantConnectionRequest.
        :rtype: bool
        """
        return self._connect_participant

    @connect_participant.setter
    def connect_participant(self, connect_participant):
        """Sets the connect_participant of this CreateParticipantConnectionRequest.

        Amazon Connect Participant is used to mark the participant as connected for customer participant in message streaming, as well as for agent or manager participant in non-streaming chats.

        :param connect_participant: The connect_participant of this CreateParticipantConnectionRequest.
        :type connect_participant: bool
        """

        self._connect_participant = connect_participant
