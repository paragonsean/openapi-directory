# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CompleteAttachmentUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_ids: List[str]=None, client_token: str=None):
        """CompleteAttachmentUploadRequest - a model defined in OpenAPI

        :param attachment_ids: The attachment_ids of this CompleteAttachmentUploadRequest.
        :param client_token: The client_token of this CompleteAttachmentUploadRequest.
        """
        self.openapi_types = {
            'attachment_ids': List[str],
            'client_token': str
        }

        self.attribute_map = {
            'attachment_ids': 'AttachmentIds',
            'client_token': 'ClientToken'
        }

        self._attachment_ids = attachment_ids
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompleteAttachmentUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompleteAttachmentUpload_request of this CompleteAttachmentUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_ids(self):
        """Gets the attachment_ids of this CompleteAttachmentUploadRequest.

        A list of unique identifiers for the attachments.

        :return: The attachment_ids of this CompleteAttachmentUploadRequest.
        :rtype: List[str]
        """
        return self._attachment_ids

    @attachment_ids.setter
    def attachment_ids(self, attachment_ids):
        """Sets the attachment_ids of this CompleteAttachmentUploadRequest.

        A list of unique identifiers for the attachments.

        :param attachment_ids: The attachment_ids of this CompleteAttachmentUploadRequest.
        :type attachment_ids: List[str]
        """
        if attachment_ids is None:
            raise ValueError("Invalid value for `attachment_ids`, must not be `None`")
        if attachment_ids is not None and len(attachment_ids) > 1:
            raise ValueError("Invalid value for `attachment_ids`, number of items must be less than or equal to `1`")
        if attachment_ids is not None and len(attachment_ids) < 1:
            raise ValueError("Invalid value for `attachment_ids`, number of items must be greater than or equal to `1`")

        self._attachment_ids = attachment_ids

    @property
    def client_token(self):
        """Gets the client_token of this CompleteAttachmentUploadRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this CompleteAttachmentUploadRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CompleteAttachmentUploadRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this CompleteAttachmentUploadRequest.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token
