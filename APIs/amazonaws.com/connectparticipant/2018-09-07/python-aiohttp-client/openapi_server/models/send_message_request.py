# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, content: str=None, client_token: str=None):
        """SendMessageRequest - a model defined in OpenAPI

        :param content_type: The content_type of this SendMessageRequest.
        :param content: The content of this SendMessageRequest.
        :param client_token: The client_token of this SendMessageRequest.
        """
        self.openapi_types = {
            'content_type': str,
            'content': str,
            'client_token': str
        }

        self.attribute_map = {
            'content_type': 'ContentType',
            'content': 'Content',
            'client_token': 'ClientToken'
        }

        self._content_type = content_type
        self._content = content
        self._client_token = client_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessage_request of this SendMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this SendMessageRequest.

        The type of the content. Supported types are <code>text/plain</code>, <code>text/markdown</code>, <code>application/json</code>, and <code>application/vnd.amazonaws.connect.message.interactive.response</code>.

        :return: The content_type of this SendMessageRequest.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this SendMessageRequest.

        The type of the content. Supported types are <code>text/plain</code>, <code>text/markdown</code>, <code>application/json</code>, and <code>application/vnd.amazonaws.connect.message.interactive.response</code>.

        :param content_type: The content_type of this SendMessageRequest.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")
        if content_type is not None and len(content_type) > 100:
            raise ValueError("Invalid value for `content_type`, length must be less than or equal to `100`")
        if content_type is not None and len(content_type) < 1:
            raise ValueError("Invalid value for `content_type`, length must be greater than or equal to `1`")

        self._content_type = content_type

    @property
    def content(self):
        """Gets the content of this SendMessageRequest.

        <p>The content of the message. </p> <ul> <li> <p>For <code>text/plain</code> and <code>text/markdown</code>, the Length Constraints are Minimum of 1, Maximum of 1024. </p> </li> <li> <p>For <code>application/json</code>, the Length Constraints are Minimum of 1, Maximum of 12000. </p> </li> <li> <p>For <code>application/vnd.amazonaws.connect.message.interactive.response</code>, the Length Constraints are Minimum of 1, Maximum of 12288.</p> </li> </ul>

        :return: The content of this SendMessageRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SendMessageRequest.

        <p>The content of the message. </p> <ul> <li> <p>For <code>text/plain</code> and <code>text/markdown</code>, the Length Constraints are Minimum of 1, Maximum of 1024. </p> </li> <li> <p>For <code>application/json</code>, the Length Constraints are Minimum of 1, Maximum of 12000. </p> </li> <li> <p>For <code>application/vnd.amazonaws.connect.message.interactive.response</code>, the Length Constraints are Minimum of 1, Maximum of 12288.</p> </li> </ul>

        :param content: The content of this SendMessageRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 16384:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `16384`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def client_token(self):
        """Gets the client_token of this SendMessageRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :return: The client_token of this SendMessageRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this SendMessageRequest.

        A unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If not provided, the Amazon Web Services SDK populates this field. For more information about idempotency, see <a href=\"https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/\">Making retries safe with idempotent APIs</a>.

        :param client_token: The client_token of this SendMessageRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 500:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `500`")

        self._client_token = client_token
