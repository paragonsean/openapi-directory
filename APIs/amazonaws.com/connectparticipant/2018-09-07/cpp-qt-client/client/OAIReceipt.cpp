/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceipt::OAIReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceipt::OAIReceipt() {
    this->initializeModel();
}

OAIReceipt::~OAIReceipt() {}

void OAIReceipt::initializeModel() {

    m_delivered_timestamp_isSet = false;
    m_delivered_timestamp_isValid = false;

    m_read_timestamp_isSet = false;
    m_read_timestamp_isValid = false;

    m_recipient_participant_id_isSet = false;
    m_recipient_participant_id_isValid = false;
}

void OAIReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceipt::fromJsonObject(QJsonObject json) {

    m_delivered_timestamp_isValid = ::OpenAPI::fromJsonValue(m_delivered_timestamp, json[QString("DeliveredTimestamp")]);
    m_delivered_timestamp_isSet = !json[QString("DeliveredTimestamp")].isNull() && m_delivered_timestamp_isValid;

    m_read_timestamp_isValid = ::OpenAPI::fromJsonValue(m_read_timestamp, json[QString("ReadTimestamp")]);
    m_read_timestamp_isSet = !json[QString("ReadTimestamp")].isNull() && m_read_timestamp_isValid;

    m_recipient_participant_id_isValid = ::OpenAPI::fromJsonValue(m_recipient_participant_id, json[QString("RecipientParticipantId")]);
    m_recipient_participant_id_isSet = !json[QString("RecipientParticipantId")].isNull() && m_recipient_participant_id_isValid;
}

QString OAIReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_delivered_timestamp_isSet) {
        obj.insert(QString("DeliveredTimestamp"), ::OpenAPI::toJsonValue(m_delivered_timestamp));
    }
    if (m_read_timestamp_isSet) {
        obj.insert(QString("ReadTimestamp"), ::OpenAPI::toJsonValue(m_read_timestamp));
    }
    if (m_recipient_participant_id_isSet) {
        obj.insert(QString("RecipientParticipantId"), ::OpenAPI::toJsonValue(m_recipient_participant_id));
    }
    return obj;
}

QString OAIReceipt::getDeliveredTimestamp() const {
    return m_delivered_timestamp;
}
void OAIReceipt::setDeliveredTimestamp(const QString &delivered_timestamp) {
    m_delivered_timestamp = delivered_timestamp;
    m_delivered_timestamp_isSet = true;
}

bool OAIReceipt::is_delivered_timestamp_Set() const{
    return m_delivered_timestamp_isSet;
}

bool OAIReceipt::is_delivered_timestamp_Valid() const{
    return m_delivered_timestamp_isValid;
}

QString OAIReceipt::getReadTimestamp() const {
    return m_read_timestamp;
}
void OAIReceipt::setReadTimestamp(const QString &read_timestamp) {
    m_read_timestamp = read_timestamp;
    m_read_timestamp_isSet = true;
}

bool OAIReceipt::is_read_timestamp_Set() const{
    return m_read_timestamp_isSet;
}

bool OAIReceipt::is_read_timestamp_Valid() const{
    return m_read_timestamp_isValid;
}

QString OAIReceipt::getRecipientParticipantId() const {
    return m_recipient_participant_id;
}
void OAIReceipt::setRecipientParticipantId(const QString &recipient_participant_id) {
    m_recipient_participant_id = recipient_participant_id;
    m_recipient_participant_id_isSet = true;
}

bool OAIReceipt::is_recipient_participant_id_Set() const{
    return m_recipient_participant_id_isSet;
}

bool OAIReceipt::is_recipient_participant_id_Valid() const{
    return m_recipient_participant_id_isValid;
}

bool OAIReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delivered_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_participant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
