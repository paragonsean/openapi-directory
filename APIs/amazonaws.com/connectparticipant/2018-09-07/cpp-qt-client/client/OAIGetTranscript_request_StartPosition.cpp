/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTranscript_request_StartPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTranscript_request_StartPosition::OAIGetTranscript_request_StartPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTranscript_request_StartPosition::OAIGetTranscript_request_StartPosition() {
    this->initializeModel();
}

OAIGetTranscript_request_StartPosition::~OAIGetTranscript_request_StartPosition() {}

void OAIGetTranscript_request_StartPosition::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_absolute_time_isSet = false;
    m_absolute_time_isValid = false;

    m_most_recent_isSet = false;
    m_most_recent_isValid = false;
}

void OAIGetTranscript_request_StartPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTranscript_request_StartPosition::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_absolute_time_isValid = ::OpenAPI::fromJsonValue(m_absolute_time, json[QString("AbsoluteTime")]);
    m_absolute_time_isSet = !json[QString("AbsoluteTime")].isNull() && m_absolute_time_isValid;

    m_most_recent_isValid = ::OpenAPI::fromJsonValue(m_most_recent, json[QString("MostRecent")]);
    m_most_recent_isSet = !json[QString("MostRecent")].isNull() && m_most_recent_isValid;
}

QString OAIGetTranscript_request_StartPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTranscript_request_StartPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_absolute_time_isSet) {
        obj.insert(QString("AbsoluteTime"), ::OpenAPI::toJsonValue(m_absolute_time));
    }
    if (m_most_recent_isSet) {
        obj.insert(QString("MostRecent"), ::OpenAPI::toJsonValue(m_most_recent));
    }
    return obj;
}

QString OAIGetTranscript_request_StartPosition::getId() const {
    return m_id;
}
void OAIGetTranscript_request_StartPosition::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetTranscript_request_StartPosition::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetTranscript_request_StartPosition::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGetTranscript_request_StartPosition::getAbsoluteTime() const {
    return m_absolute_time;
}
void OAIGetTranscript_request_StartPosition::setAbsoluteTime(const QString &absolute_time) {
    m_absolute_time = absolute_time;
    m_absolute_time_isSet = true;
}

bool OAIGetTranscript_request_StartPosition::is_absolute_time_Set() const{
    return m_absolute_time_isSet;
}

bool OAIGetTranscript_request_StartPosition::is_absolute_time_Valid() const{
    return m_absolute_time_isValid;
}

qint32 OAIGetTranscript_request_StartPosition::getMostRecent() const {
    return m_most_recent;
}
void OAIGetTranscript_request_StartPosition::setMostRecent(const qint32 &most_recent) {
    m_most_recent = most_recent;
    m_most_recent_isSet = true;
}

bool OAIGetTranscript_request_StartPosition::is_most_recent_Set() const{
    return m_most_recent_isSet;
}

bool OAIGetTranscript_request_StartPosition::is_most_recent_Valid() const{
    return m_most_recent_isValid;
}

bool OAIGetTranscript_request_StartPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_absolute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_most_recent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTranscript_request_StartPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
