/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTranscript_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTranscript_request::OAIGetTranscript_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTranscript_request::OAIGetTranscript_request() {
    this->initializeModel();
}

OAIGetTranscript_request::~OAIGetTranscript_request() {}

void OAIGetTranscript_request::initializeModel() {

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_scan_direction_isSet = false;
    m_scan_direction_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;

    m_start_position_isSet = false;
    m_start_position_isValid = false;
}

void OAIGetTranscript_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTranscript_request::fromJsonObject(QJsonObject json) {

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_scan_direction_isValid = ::OpenAPI::fromJsonValue(m_scan_direction, json[QString("ScanDirection")]);
    m_scan_direction_isSet = !json[QString("ScanDirection")].isNull() && m_scan_direction_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;

    m_start_position_isValid = ::OpenAPI::fromJsonValue(m_start_position, json[QString("StartPosition")]);
    m_start_position_isSet = !json[QString("StartPosition")].isNull() && m_start_position_isValid;
}

QString OAIGetTranscript_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTranscript_request::asJsonObject() const {
    QJsonObject obj;
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_scan_direction_isSet) {
        obj.insert(QString("ScanDirection"), ::OpenAPI::toJsonValue(m_scan_direction));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    if (m_start_position.isSet()) {
        obj.insert(QString("StartPosition"), ::OpenAPI::toJsonValue(m_start_position));
    }
    return obj;
}

QString OAIGetTranscript_request::getContactId() const {
    return m_contact_id;
}
void OAIGetTranscript_request::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIGetTranscript_request::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIGetTranscript_request::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

qint32 OAIGetTranscript_request::getMaxResults() const {
    return m_max_results;
}
void OAIGetTranscript_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetTranscript_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetTranscript_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetTranscript_request::getNextToken() const {
    return m_next_token;
}
void OAIGetTranscript_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetTranscript_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetTranscript_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QString OAIGetTranscript_request::getScanDirection() const {
    return m_scan_direction;
}
void OAIGetTranscript_request::setScanDirection(const QString &scan_direction) {
    m_scan_direction = scan_direction;
    m_scan_direction_isSet = true;
}

bool OAIGetTranscript_request::is_scan_direction_Set() const{
    return m_scan_direction_isSet;
}

bool OAIGetTranscript_request::is_scan_direction_Valid() const{
    return m_scan_direction_isValid;
}

QString OAIGetTranscript_request::getSortOrder() const {
    return m_sort_order;
}
void OAIGetTranscript_request::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIGetTranscript_request::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIGetTranscript_request::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

OAIGetTranscript_request_StartPosition OAIGetTranscript_request::getStartPosition() const {
    return m_start_position;
}
void OAIGetTranscript_request::setStartPosition(const OAIGetTranscript_request_StartPosition &start_position) {
    m_start_position = start_position;
    m_start_position_isSet = true;
}

bool OAIGetTranscript_request::is_start_position_Set() const{
    return m_start_position_isSet;
}

bool OAIGetTranscript_request::is_start_position_Valid() const{
    return m_start_position_isValid;
}

bool OAIGetTranscript_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scan_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTranscript_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
