/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatItemType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatItemType::OAIChatItemType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatItemType::OAIChatItemType() {
    this->initializeModel();
}

OAIChatItemType::~OAIChatItemType() {}

void OAIChatItemType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIChatItemType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIChatItemType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TYPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::TYPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTICIPANT_JOINED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::PARTICIPANT_JOINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PARTICIPANT_LEFT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::PARTICIPANT_LEFT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CHAT_ENDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::CHAT_ENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSFER_SUCCEEDED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::TRANSFER_SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TRANSFER_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::TRANSFER_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MESSAGE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::MESSAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EVENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::EVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ATTACHMENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::ATTACHMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONNECTION_ACK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::CONNECTION_ACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MESSAGE_DELIVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::MESSAGE_DELIVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MESSAGE_READ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIChatItemType::MESSAGE_READ;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIChatItemType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIChatItemType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIChatItemType::TYPING:
            val = "TYPING";
            break;
        case eOAIChatItemType::PARTICIPANT_JOINED:
            val = "PARTICIPANT_JOINED";
            break;
        case eOAIChatItemType::PARTICIPANT_LEFT:
            val = "PARTICIPANT_LEFT";
            break;
        case eOAIChatItemType::CHAT_ENDED:
            val = "CHAT_ENDED";
            break;
        case eOAIChatItemType::TRANSFER_SUCCEEDED:
            val = "TRANSFER_SUCCEEDED";
            break;
        case eOAIChatItemType::TRANSFER_FAILED:
            val = "TRANSFER_FAILED";
            break;
        case eOAIChatItemType::MESSAGE:
            val = "MESSAGE";
            break;
        case eOAIChatItemType::EVENT:
            val = "EVENT";
            break;
        case eOAIChatItemType::ATTACHMENT:
            val = "ATTACHMENT";
            break;
        case eOAIChatItemType::CONNECTION_ACK:
            val = "CONNECTION_ACK";
            break;
        case eOAIChatItemType::MESSAGE_DELIVERED:
            val = "MESSAGE_DELIVERED";
            break;
        case eOAIChatItemType::MESSAGE_READ:
            val = "MESSAGE_READ";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIChatItemType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIChatItemType::eOAIChatItemType OAIChatItemType::getValue() const {
    return m_value;
}

void OAIChatItemType::setValue(const OAIChatItemType::eOAIChatItemType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIChatItemType::isSet() const {
    
    return m_value_isSet;
}

bool OAIChatItemType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
