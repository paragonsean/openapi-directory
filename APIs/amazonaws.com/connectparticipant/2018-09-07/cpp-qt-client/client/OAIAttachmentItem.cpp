/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentItem::OAIAttachmentItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentItem::OAIAttachmentItem() {
    this->initializeModel();
}

OAIAttachmentItem::~OAIAttachmentItem() {}

void OAIAttachmentItem::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_attachment_id_isSet = false;
    m_attachment_id_isValid = false;

    m_attachment_name_isSet = false;
    m_attachment_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAttachmentItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentItem::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_attachment_id_isValid = ::OpenAPI::fromJsonValue(m_attachment_id, json[QString("AttachmentId")]);
    m_attachment_id_isSet = !json[QString("AttachmentId")].isNull() && m_attachment_id_isValid;

    m_attachment_name_isValid = ::OpenAPI::fromJsonValue(m_attachment_name, json[QString("AttachmentName")]);
    m_attachment_name_isSet = !json[QString("AttachmentName")].isNull() && m_attachment_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIAttachmentItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentItem::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_attachment_id_isSet) {
        obj.insert(QString("AttachmentId"), ::OpenAPI::toJsonValue(m_attachment_id));
    }
    if (m_attachment_name_isSet) {
        obj.insert(QString("AttachmentName"), ::OpenAPI::toJsonValue(m_attachment_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAttachmentItem::getContentType() const {
    return m_content_type;
}
void OAIAttachmentItem::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIAttachmentItem::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIAttachmentItem::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIAttachmentItem::getAttachmentId() const {
    return m_attachment_id;
}
void OAIAttachmentItem::setAttachmentId(const QString &attachment_id) {
    m_attachment_id = attachment_id;
    m_attachment_id_isSet = true;
}

bool OAIAttachmentItem::is_attachment_id_Set() const{
    return m_attachment_id_isSet;
}

bool OAIAttachmentItem::is_attachment_id_Valid() const{
    return m_attachment_id_isValid;
}

QString OAIAttachmentItem::getAttachmentName() const {
    return m_attachment_name;
}
void OAIAttachmentItem::setAttachmentName(const QString &attachment_name) {
    m_attachment_name = attachment_name;
    m_attachment_name_isSet = true;
}

bool OAIAttachmentItem::is_attachment_name_Set() const{
    return m_attachment_name_isSet;
}

bool OAIAttachmentItem::is_attachment_name_Valid() const{
    return m_attachment_name_isValid;
}

OAIArtifactStatus OAIAttachmentItem::getStatus() const {
    return m_status;
}
void OAIAttachmentItem::setStatus(const OAIArtifactStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAttachmentItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAttachmentItem::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAttachmentItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
