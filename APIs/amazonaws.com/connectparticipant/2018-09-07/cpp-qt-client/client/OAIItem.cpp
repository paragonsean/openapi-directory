/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_absolute_time_isSet = false;
    m_absolute_time_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_participant_id_isSet = false;
    m_participant_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_participant_role_isSet = false;
    m_participant_role_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_message_metadata_isSet = false;
    m_message_metadata_isValid = false;

    m_related_contact_id_isSet = false;
    m_related_contact_id_isValid = false;

    m_contact_id_isSet = false;
    m_contact_id_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_absolute_time_isValid = ::OpenAPI::fromJsonValue(m_absolute_time, json[QString("AbsoluteTime")]);
    m_absolute_time_isSet = !json[QString("AbsoluteTime")].isNull() && m_absolute_time_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_participant_id_isValid = ::OpenAPI::fromJsonValue(m_participant_id, json[QString("ParticipantId")]);
    m_participant_id_isSet = !json[QString("ParticipantId")].isNull() && m_participant_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_participant_role_isValid = ::OpenAPI::fromJsonValue(m_participant_role, json[QString("ParticipantRole")]);
    m_participant_role_isSet = !json[QString("ParticipantRole")].isNull() && m_participant_role_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("Attachments")]);
    m_attachments_isSet = !json[QString("Attachments")].isNull() && m_attachments_isValid;

    m_message_metadata_isValid = ::OpenAPI::fromJsonValue(m_message_metadata, json[QString("MessageMetadata")]);
    m_message_metadata_isSet = !json[QString("MessageMetadata")].isNull() && m_message_metadata_isValid;

    m_related_contact_id_isValid = ::OpenAPI::fromJsonValue(m_related_contact_id, json[QString("RelatedContactId")]);
    m_related_contact_id_isSet = !json[QString("RelatedContactId")].isNull() && m_related_contact_id_isValid;

    m_contact_id_isValid = ::OpenAPI::fromJsonValue(m_contact_id, json[QString("ContactId")]);
    m_contact_id_isSet = !json[QString("ContactId")].isNull() && m_contact_id_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_time_isSet) {
        obj.insert(QString("AbsoluteTime"), ::OpenAPI::toJsonValue(m_absolute_time));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_participant_id_isSet) {
        obj.insert(QString("ParticipantId"), ::OpenAPI::toJsonValue(m_participant_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_participant_role.isSet()) {
        obj.insert(QString("ParticipantRole"), ::OpenAPI::toJsonValue(m_participant_role));
    }
    if (m_attachments.isSet()) {
        obj.insert(QString("Attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_message_metadata.isSet()) {
        obj.insert(QString("MessageMetadata"), ::OpenAPI::toJsonValue(m_message_metadata));
    }
    if (m_related_contact_id_isSet) {
        obj.insert(QString("RelatedContactId"), ::OpenAPI::toJsonValue(m_related_contact_id));
    }
    if (m_contact_id_isSet) {
        obj.insert(QString("ContactId"), ::OpenAPI::toJsonValue(m_contact_id));
    }
    return obj;
}

QString OAIItem::getAbsoluteTime() const {
    return m_absolute_time;
}
void OAIItem::setAbsoluteTime(const QString &absolute_time) {
    m_absolute_time = absolute_time;
    m_absolute_time_isSet = true;
}

bool OAIItem::is_absolute_time_Set() const{
    return m_absolute_time_isSet;
}

bool OAIItem::is_absolute_time_Valid() const{
    return m_absolute_time_isValid;
}

QString OAIItem::getContent() const {
    return m_content;
}
void OAIItem::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIItem::is_content_Set() const{
    return m_content_isSet;
}

bool OAIItem::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIItem::getContentType() const {
    return m_content_type;
}
void OAIItem::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIItem::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIItem::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIItem::getId() const {
    return m_id;
}
void OAIItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAIItem::is_id_Valid() const{
    return m_id_isValid;
}

OAIChatItemType OAIItem::getType() const {
    return m_type;
}
void OAIItem::setType(const OAIChatItemType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIItem::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIItem::getParticipantId() const {
    return m_participant_id;
}
void OAIItem::setParticipantId(const QString &participant_id) {
    m_participant_id = participant_id;
    m_participant_id_isSet = true;
}

bool OAIItem::is_participant_id_Set() const{
    return m_participant_id_isSet;
}

bool OAIItem::is_participant_id_Valid() const{
    return m_participant_id_isValid;
}

QString OAIItem::getDisplayName() const {
    return m_display_name;
}
void OAIItem::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIItem::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIItem::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIParticipantRole OAIItem::getParticipantRole() const {
    return m_participant_role;
}
void OAIItem::setParticipantRole(const OAIParticipantRole &participant_role) {
    m_participant_role = participant_role;
    m_participant_role_isSet = true;
}

bool OAIItem::is_participant_role_Set() const{
    return m_participant_role_isSet;
}

bool OAIItem::is_participant_role_Valid() const{
    return m_participant_role_isValid;
}

QList OAIItem::getAttachments() const {
    return m_attachments;
}
void OAIItem::setAttachments(const QList &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIItem::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIItem::is_attachments_Valid() const{
    return m_attachments_isValid;
}

OAIItem_MessageMetadata OAIItem::getMessageMetadata() const {
    return m_message_metadata;
}
void OAIItem::setMessageMetadata(const OAIItem_MessageMetadata &message_metadata) {
    m_message_metadata = message_metadata;
    m_message_metadata_isSet = true;
}

bool OAIItem::is_message_metadata_Set() const{
    return m_message_metadata_isSet;
}

bool OAIItem::is_message_metadata_Valid() const{
    return m_message_metadata_isValid;
}

QString OAIItem::getRelatedContactId() const {
    return m_related_contact_id;
}
void OAIItem::setRelatedContactId(const QString &related_contact_id) {
    m_related_contact_id = related_contact_id;
    m_related_contact_id_isSet = true;
}

bool OAIItem::is_related_contact_id_Set() const{
    return m_related_contact_id_isSet;
}

bool OAIItem::is_related_contact_id_Valid() const{
    return m_related_contact_id_isValid;
}

QString OAIItem::getContactId() const {
    return m_contact_id;
}
void OAIItem::setContactId(const QString &contact_id) {
    m_contact_id = contact_id;
    m_contact_id_isSet = true;
}

bool OAIItem::is_contact_id_Set() const{
    return m_contact_id_isSet;
}

bool OAIItem::is_contact_id_Valid() const{
    return m_contact_id_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participant_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
