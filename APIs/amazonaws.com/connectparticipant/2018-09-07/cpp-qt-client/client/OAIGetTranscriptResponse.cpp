/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTranscriptResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTranscriptResponse::OAIGetTranscriptResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTranscriptResponse::OAIGetTranscriptResponse() {
    this->initializeModel();
}

OAIGetTranscriptResponse::~OAIGetTranscriptResponse() {}

void OAIGetTranscriptResponse::initializeModel() {

    m_initial_contact_id_isSet = false;
    m_initial_contact_id_isValid = false;

    m_transcript_isSet = false;
    m_transcript_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetTranscriptResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTranscriptResponse::fromJsonObject(QJsonObject json) {

    m_initial_contact_id_isValid = ::OpenAPI::fromJsonValue(m_initial_contact_id, json[QString("InitialContactId")]);
    m_initial_contact_id_isSet = !json[QString("InitialContactId")].isNull() && m_initial_contact_id_isValid;

    m_transcript_isValid = ::OpenAPI::fromJsonValue(m_transcript, json[QString("Transcript")]);
    m_transcript_isSet = !json[QString("Transcript")].isNull() && m_transcript_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetTranscriptResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTranscriptResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_initial_contact_id_isSet) {
        obj.insert(QString("InitialContactId"), ::OpenAPI::toJsonValue(m_initial_contact_id));
    }
    if (m_transcript.isSet()) {
        obj.insert(QString("Transcript"), ::OpenAPI::toJsonValue(m_transcript));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIGetTranscriptResponse::getInitialContactId() const {
    return m_initial_contact_id;
}
void OAIGetTranscriptResponse::setInitialContactId(const QString &initial_contact_id) {
    m_initial_contact_id = initial_contact_id;
    m_initial_contact_id_isSet = true;
}

bool OAIGetTranscriptResponse::is_initial_contact_id_Set() const{
    return m_initial_contact_id_isSet;
}

bool OAIGetTranscriptResponse::is_initial_contact_id_Valid() const{
    return m_initial_contact_id_isValid;
}

QList OAIGetTranscriptResponse::getTranscript() const {
    return m_transcript;
}
void OAIGetTranscriptResponse::setTranscript(const QList &transcript) {
    m_transcript = transcript;
    m_transcript_isSet = true;
}

bool OAIGetTranscriptResponse::is_transcript_Set() const{
    return m_transcript_isSet;
}

bool OAIGetTranscriptResponse::is_transcript_Valid() const{
    return m_transcript_isValid;
}

QString OAIGetTranscriptResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetTranscriptResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetTranscriptResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetTranscriptResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetTranscriptResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_initial_contact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcript.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTranscriptResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
