/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTranscript_request.h
 *
 * 
 */

#ifndef OAIGetTranscript_request_H
#define OAIGetTranscript_request_H

#include <QJsonObject>

#include "OAIGetTranscript_request_StartPosition.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGetTranscript_request_StartPosition;

class OAIGetTranscript_request : public OAIObject {
public:
    OAIGetTranscript_request();
    OAIGetTranscript_request(QString json);
    ~OAIGetTranscript_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContactId() const;
    void setContactId(const QString &contact_id);
    bool is_contact_id_Set() const;
    bool is_contact_id_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    QString getScanDirection() const;
    void setScanDirection(const QString &scan_direction);
    bool is_scan_direction_Set() const;
    bool is_scan_direction_Valid() const;

    QString getSortOrder() const;
    void setSortOrder(const QString &sort_order);
    bool is_sort_order_Set() const;
    bool is_sort_order_Valid() const;

    OAIGetTranscript_request_StartPosition getStartPosition() const;
    void setStartPosition(const OAIGetTranscript_request_StartPosition &start_position);
    bool is_start_position_Set() const;
    bool is_start_position_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_contact_id;
    bool m_contact_id_isSet;
    bool m_contact_id_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;

    QString m_scan_direction;
    bool m_scan_direction_isSet;
    bool m_scan_direction_isValid;

    QString m_sort_order;
    bool m_sort_order_isSet;
    bool m_sort_order_isValid;

    OAIGetTranscript_request_StartPosition m_start_position;
    bool m_start_position_isSet;
    bool m_start_position_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTranscript_request)

#endif // OAIGetTranscript_request_H
