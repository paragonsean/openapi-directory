/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ArtifactStatus from './model/ArtifactStatus';
import AttachmentItem from './model/AttachmentItem';
import ChatItemType from './model/ChatItemType';
import CompleteAttachmentUploadRequest from './model/CompleteAttachmentUploadRequest';
import ConnectionCredentials from './model/ConnectionCredentials';
import ConnectionType from './model/ConnectionType';
import CreateParticipantConnectionRequest from './model/CreateParticipantConnectionRequest';
import CreateParticipantConnectionResponse from './model/CreateParticipantConnectionResponse';
import CreateParticipantConnectionResponseConnectionCredentials from './model/CreateParticipantConnectionResponseConnectionCredentials';
import CreateParticipantConnectionResponseWebsocket from './model/CreateParticipantConnectionResponseWebsocket';
import DisconnectParticipantRequest from './model/DisconnectParticipantRequest';
import GetAttachmentRequest from './model/GetAttachmentRequest';
import GetAttachmentResponse from './model/GetAttachmentResponse';
import GetTranscriptRequest from './model/GetTranscriptRequest';
import GetTranscriptRequestStartPosition from './model/GetTranscriptRequestStartPosition';
import GetTranscriptResponse from './model/GetTranscriptResponse';
import Item from './model/Item';
import ItemMessageMetadata from './model/ItemMessageMetadata';
import MessageMetadata from './model/MessageMetadata';
import ParticipantRole from './model/ParticipantRole';
import Receipt from './model/Receipt';
import ScanDirection from './model/ScanDirection';
import SendEventRequest from './model/SendEventRequest';
import SendEventResponse from './model/SendEventResponse';
import SendMessageRequest from './model/SendMessageRequest';
import SendMessageResponse from './model/SendMessageResponse';
import SortKey from './model/SortKey';
import StartAttachmentUploadRequest from './model/StartAttachmentUploadRequest';
import StartAttachmentUploadResponse from './model/StartAttachmentUploadResponse';
import StartAttachmentUploadResponseUploadMetadata from './model/StartAttachmentUploadResponseUploadMetadata';
import StartPosition from './model/StartPosition';
import UploadMetadata from './model/UploadMetadata';
import Websocket from './model/Websocket';
import DefaultApi from './api/DefaultApi';


/**
* &lt;p&gt;Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. &lt;/p&gt; &lt;p&gt;Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant&#39;s connection state and message events, and retrieving chat transcripts.&lt;/p&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AmazonConnectParticipantService = require('index'); // See note below*.
* var xxxSvc = new AmazonConnectParticipantService.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AmazonConnectParticipantService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AmazonConnectParticipantService.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AmazonConnectParticipantService.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-09-07
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ArtifactStatus model constructor.
     * @property {module:model/ArtifactStatus}
     */
    ArtifactStatus,

    /**
     * The AttachmentItem model constructor.
     * @property {module:model/AttachmentItem}
     */
    AttachmentItem,

    /**
     * The ChatItemType model constructor.
     * @property {module:model/ChatItemType}
     */
    ChatItemType,

    /**
     * The CompleteAttachmentUploadRequest model constructor.
     * @property {module:model/CompleteAttachmentUploadRequest}
     */
    CompleteAttachmentUploadRequest,

    /**
     * The ConnectionCredentials model constructor.
     * @property {module:model/ConnectionCredentials}
     */
    ConnectionCredentials,

    /**
     * The ConnectionType model constructor.
     * @property {module:model/ConnectionType}
     */
    ConnectionType,

    /**
     * The CreateParticipantConnectionRequest model constructor.
     * @property {module:model/CreateParticipantConnectionRequest}
     */
    CreateParticipantConnectionRequest,

    /**
     * The CreateParticipantConnectionResponse model constructor.
     * @property {module:model/CreateParticipantConnectionResponse}
     */
    CreateParticipantConnectionResponse,

    /**
     * The CreateParticipantConnectionResponseConnectionCredentials model constructor.
     * @property {module:model/CreateParticipantConnectionResponseConnectionCredentials}
     */
    CreateParticipantConnectionResponseConnectionCredentials,

    /**
     * The CreateParticipantConnectionResponseWebsocket model constructor.
     * @property {module:model/CreateParticipantConnectionResponseWebsocket}
     */
    CreateParticipantConnectionResponseWebsocket,

    /**
     * The DisconnectParticipantRequest model constructor.
     * @property {module:model/DisconnectParticipantRequest}
     */
    DisconnectParticipantRequest,

    /**
     * The GetAttachmentRequest model constructor.
     * @property {module:model/GetAttachmentRequest}
     */
    GetAttachmentRequest,

    /**
     * The GetAttachmentResponse model constructor.
     * @property {module:model/GetAttachmentResponse}
     */
    GetAttachmentResponse,

    /**
     * The GetTranscriptRequest model constructor.
     * @property {module:model/GetTranscriptRequest}
     */
    GetTranscriptRequest,

    /**
     * The GetTranscriptRequestStartPosition model constructor.
     * @property {module:model/GetTranscriptRequestStartPosition}
     */
    GetTranscriptRequestStartPosition,

    /**
     * The GetTranscriptResponse model constructor.
     * @property {module:model/GetTranscriptResponse}
     */
    GetTranscriptResponse,

    /**
     * The Item model constructor.
     * @property {module:model/Item}
     */
    Item,

    /**
     * The ItemMessageMetadata model constructor.
     * @property {module:model/ItemMessageMetadata}
     */
    ItemMessageMetadata,

    /**
     * The MessageMetadata model constructor.
     * @property {module:model/MessageMetadata}
     */
    MessageMetadata,

    /**
     * The ParticipantRole model constructor.
     * @property {module:model/ParticipantRole}
     */
    ParticipantRole,

    /**
     * The Receipt model constructor.
     * @property {module:model/Receipt}
     */
    Receipt,

    /**
     * The ScanDirection model constructor.
     * @property {module:model/ScanDirection}
     */
    ScanDirection,

    /**
     * The SendEventRequest model constructor.
     * @property {module:model/SendEventRequest}
     */
    SendEventRequest,

    /**
     * The SendEventResponse model constructor.
     * @property {module:model/SendEventResponse}
     */
    SendEventResponse,

    /**
     * The SendMessageRequest model constructor.
     * @property {module:model/SendMessageRequest}
     */
    SendMessageRequest,

    /**
     * The SendMessageResponse model constructor.
     * @property {module:model/SendMessageResponse}
     */
    SendMessageResponse,

    /**
     * The SortKey model constructor.
     * @property {module:model/SortKey}
     */
    SortKey,

    /**
     * The StartAttachmentUploadRequest model constructor.
     * @property {module:model/StartAttachmentUploadRequest}
     */
    StartAttachmentUploadRequest,

    /**
     * The StartAttachmentUploadResponse model constructor.
     * @property {module:model/StartAttachmentUploadResponse}
     */
    StartAttachmentUploadResponse,

    /**
     * The StartAttachmentUploadResponseUploadMetadata model constructor.
     * @property {module:model/StartAttachmentUploadResponseUploadMetadata}
     */
    StartAttachmentUploadResponseUploadMetadata,

    /**
     * The StartPosition model constructor.
     * @property {module:model/StartPosition}
     */
    StartPosition,

    /**
     * The UploadMetadata model constructor.
     * @property {module:model/UploadMetadata}
     */
    UploadMetadata,

    /**
     * The Websocket model constructor.
     * @property {module:model/Websocket}
     */
    Websocket,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
