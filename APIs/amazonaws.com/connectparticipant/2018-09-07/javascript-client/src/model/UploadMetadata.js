/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UploadMetadata model module.
 * @module model/UploadMetadata
 * @version 2018-09-07
 */
class UploadMetadata {
    /**
     * Constructs a new <code>UploadMetadata</code>.
     * Fields to be used while uploading the attachment.
     * @alias module:model/UploadMetadata
     */
    constructor() { 
        
        UploadMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UploadMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadMetadata} obj Optional instance to populate.
     * @return {module:model/UploadMetadata} The populated <code>UploadMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadMetadata();

            if (data.hasOwnProperty('Url')) {
                obj['Url'] = ApiClient.convertToType(data['Url'], 'String');
            }
            if (data.hasOwnProperty('UrlExpiry')) {
                obj['UrlExpiry'] = ApiClient.convertToType(data['UrlExpiry'], 'String');
            }
            if (data.hasOwnProperty('HeadersToInclude')) {
                obj['HeadersToInclude'] = ApiClient.convertToType(data['HeadersToInclude'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadMetadata</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Url`
        if (data['Url']) { // data not null
          String.validateJSON(data['Url']);
        }
        // validate the optional field `UrlExpiry`
        if (data['UrlExpiry']) { // data not null
          String.validateJSON(data['UrlExpiry']);
        }
        // validate the optional field `HeadersToInclude`
        if (data['HeadersToInclude']) { // data not null
          Object.validateJSON(data['HeadersToInclude']);
        }

        return true;
    }


}



/**
 * @member {String} Url
 */
UploadMetadata.prototype['Url'] = undefined;

/**
 * @member {String} UrlExpiry
 */
UploadMetadata.prototype['UrlExpiry'] = undefined;

/**
 * @member {Object} HeadersToInclude
 */
UploadMetadata.prototype['HeadersToInclude'] = undefined;






export default UploadMetadata;

