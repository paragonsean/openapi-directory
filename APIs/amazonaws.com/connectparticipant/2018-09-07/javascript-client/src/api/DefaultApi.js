/**
 * Amazon Connect Participant Service
 * <p>Amazon Connect is an easy-to-use omnichannel cloud contact center service that enables companies of any size to deliver superior customer service at a lower cost. Amazon Connect communications capabilities make it easy for companies to deliver personalized interactions across communication channels, including chat. </p> <p>Use the Amazon Connect Participant Service to manage participants (for example, agents, customers, and managers listening in), and to send messages and events within a chat contact. The APIs in the service enable the following: sending chat messages, attachment sharing, managing a participant's connection state and message events, and retrieving chat transcripts.</p>
 *
 * The version of the OpenAPI document: 2018-09-07
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CompleteAttachmentUploadRequest from '../model/CompleteAttachmentUploadRequest';
import CreateParticipantConnectionRequest from '../model/CreateParticipantConnectionRequest';
import CreateParticipantConnectionResponse from '../model/CreateParticipantConnectionResponse';
import DisconnectParticipantRequest from '../model/DisconnectParticipantRequest';
import GetAttachmentRequest from '../model/GetAttachmentRequest';
import GetAttachmentResponse from '../model/GetAttachmentResponse';
import GetTranscriptRequest from '../model/GetTranscriptRequest';
import GetTranscriptResponse from '../model/GetTranscriptResponse';
import SendEventRequest from '../model/SendEventRequest';
import SendEventResponse from '../model/SendEventResponse';
import SendMessageRequest from '../model/SendMessageRequest';
import SendMessageResponse from '../model/SendMessageResponse';
import StartAttachmentUploadRequest from '../model/StartAttachmentUploadRequest';
import StartAttachmentUploadResponse from '../model/StartAttachmentUploadResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-09-07
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the completeAttachmentUpload operation.
     * @callback module:api/DefaultApi~completeAttachmentUploadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Allows you to confirm that the attachment has been uploaded using the pre-signed URL provided in StartAttachmentUpload API. </p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the participant's connection.
     * @param {module:model/CompleteAttachmentUploadRequest} completeAttachmentUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~completeAttachmentUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    completeAttachmentUpload(xAmzBearer, completeAttachmentUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = completeAttachmentUploadRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling completeAttachmentUpload");
      }
      // verify the required parameter 'completeAttachmentUploadRequest' is set
      if (completeAttachmentUploadRequest === undefined || completeAttachmentUploadRequest === null) {
        throw new Error("Missing the required parameter 'completeAttachmentUploadRequest' when calling completeAttachmentUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/participant/complete-attachment-upload#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createParticipantConnection operation.
     * @callback module:api/DefaultApi~createParticipantConnectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateParticipantConnectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates the participant's connection. </p> <note> <p> <code>ParticipantToken</code> is used for invoking this API instead of <code>ConnectionToken</code>.</p> </note> <p>The participant token is valid for the lifetime of the participant â€“ until they are part of a contact.</p> <p>The response URL for <code>WEBSOCKET</code> Type has a connect expiry timeout of 100s. Clients must manually connect to the returned websocket URL and subscribe to the desired topic. </p> <p>For chat, you need to publish the following on the established websocket connection:</p> <p> <code>{\"topic\":\"aws/subscribe\",\"content\":{\"topics\":[\"aws/chat\"]}}</code> </p> <p>Upon websocket URL expiry, as specified in the response ConnectionExpiry parameter, clients need to call this API again to obtain a new websocket URL and perform the same steps as before.</p> <p> <b>Message streaming support</b>: This API can also be used together with the <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_StartContactStreaming.html\">StartContactStreaming</a> API to create a participant connection for chat contacts that are not using a websocket. For more information about message streaming, <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/chat-message-streaming.html\">Enable real-time chat message streaming</a> in the <i>Amazon Connect Administrator Guide</i>.</p> <p> <b>Feature specifications</b>: For information about feature specifications, such as the allowed number of open websocket connections per participant, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits\">Feature specifications</a> in the <i>Amazon Connect Administrator Guide</i>. </p> <note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p> </note>
     * @param {String} xAmzBearer <p>This is a header parameter.</p> <p>The ParticipantToken as obtained from <a href=\"https://docs.aws.amazon.com/connect/latest/APIReference/API_StartChatContact.html\">StartChatContact</a> API response.</p>
     * @param {module:model/CreateParticipantConnectionRequest} createParticipantConnectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createParticipantConnectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateParticipantConnectionResponse}
     */
    createParticipantConnection(xAmzBearer, createParticipantConnectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createParticipantConnectionRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling createParticipantConnection");
      }
      // verify the required parameter 'createParticipantConnectionRequest' is set
      if (createParticipantConnectionRequest === undefined || createParticipantConnectionRequest === null) {
        throw new Error("Missing the required parameter 'createParticipantConnectionRequest' when calling createParticipantConnection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateParticipantConnectionResponse;
      return this.apiClient.callApi(
        '/participant/connection#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disconnectParticipant operation.
     * @callback module:api/DefaultApi~disconnectParticipantCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Disconnects a participant. </p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the participant's connection.
     * @param {module:model/DisconnectParticipantRequest} disconnectParticipantRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disconnectParticipantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disconnectParticipant(xAmzBearer, disconnectParticipantRequest, opts, callback) {
      opts = opts || {};
      let postBody = disconnectParticipantRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling disconnectParticipant");
      }
      // verify the required parameter 'disconnectParticipantRequest' is set
      if (disconnectParticipantRequest === undefined || disconnectParticipantRequest === null) {
        throw new Error("Missing the required parameter 'disconnectParticipantRequest' when calling disconnectParticipant");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/participant/disconnect#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachment operation.
     * @callback module:api/DefaultApi~getAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a pre-signed URL for download of a completed attachment. This is an asynchronous API for use with active contacts.</p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the participant's connection.
     * @param {module:model/GetAttachmentRequest} getAttachmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAttachmentResponse}
     */
    getAttachment(xAmzBearer, getAttachmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAttachmentRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling getAttachment");
      }
      // verify the required parameter 'getAttachmentRequest' is set
      if (getAttachmentRequest === undefined || getAttachmentRequest === null) {
        throw new Error("Missing the required parameter 'getAttachmentRequest' when calling getAttachment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAttachmentResponse;
      return this.apiClient.callApi(
        '/participant/attachment#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscript operation.
     * @callback module:api/DefaultApi~getTranscriptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTranscriptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves a transcript of the session, including details about any attachments. For information about accessing past chat contact transcripts for a persistent chat, see <a href=\"https://docs.aws.amazon.com/connect/latest/adminguide/chat-persistence.html\">Enable persistent chat</a>. </p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the participant's connection.
     * @param {module:model/GetTranscriptRequest} getTranscriptRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getTranscriptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTranscriptResponse}
     */
    getTranscript(xAmzBearer, getTranscriptRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTranscriptRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling getTranscript");
      }
      // verify the required parameter 'getTranscriptRequest' is set
      if (getTranscriptRequest === undefined || getTranscriptRequest === null) {
        throw new Error("Missing the required parameter 'getTranscriptRequest' when calling getTranscript");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTranscriptResponse;
      return this.apiClient.callApi(
        '/participant/transcript#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendEvent operation.
     * @callback module:api/DefaultApi~sendEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sends an event. </p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the participant's connection.
     * @param {module:model/SendEventRequest} sendEventRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEventResponse}
     */
    sendEvent(xAmzBearer, sendEventRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendEventRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling sendEvent");
      }
      // verify the required parameter 'sendEventRequest' is set
      if (sendEventRequest === undefined || sendEventRequest === null) {
        throw new Error("Missing the required parameter 'sendEventRequest' when calling sendEvent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEventResponse;
      return this.apiClient.callApi(
        '/participant/event#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/DefaultApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendMessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sends a message.</p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the connection.
     * @param {module:model/SendMessageRequest} sendMessageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendMessageResponse}
     */
    sendMessage(xAmzBearer, sendMessageRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendMessageRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling sendMessage");
      }
      // verify the required parameter 'sendMessageRequest' is set
      if (sendMessageRequest === undefined || sendMessageRequest === null) {
        throw new Error("Missing the required parameter 'sendMessageRequest' when calling sendMessage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendMessageResponse;
      return this.apiClient.callApi(
        '/participant/message#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startAttachmentUpload operation.
     * @callback module:api/DefaultApi~startAttachmentUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartAttachmentUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides a pre-signed Amazon S3 URL in response for uploading the file directly to S3.</p> <note> <p> <code>ConnectionToken</code> is used for invoking this API instead of <code>ParticipantToken</code>.</p> </note> <p>The Amazon Connect Participant Service APIs do not use <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 authentication</a>.</p>
     * @param {String} xAmzBearer The authentication token associated with the participant's connection.
     * @param {module:model/StartAttachmentUploadRequest} startAttachmentUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startAttachmentUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartAttachmentUploadResponse}
     */
    startAttachmentUpload(xAmzBearer, startAttachmentUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = startAttachmentUploadRequest;
      // verify the required parameter 'xAmzBearer' is set
      if (xAmzBearer === undefined || xAmzBearer === null) {
        throw new Error("Missing the required parameter 'xAmzBearer' when calling startAttachmentUpload");
      }
      // verify the required parameter 'startAttachmentUploadRequest' is set
      if (startAttachmentUploadRequest === undefined || startAttachmentUploadRequest === null) {
        throw new Error("Missing the required parameter 'startAttachmentUploadRequest' when calling startAttachmentUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Bearer': xAmzBearer
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartAttachmentUploadResponse;
      return this.apiClient.callApi(
        '/participant/start-attachment-upload#X-Amz-Bearer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
