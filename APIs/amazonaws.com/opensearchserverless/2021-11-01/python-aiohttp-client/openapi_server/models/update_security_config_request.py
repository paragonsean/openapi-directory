# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_security_config_request_saml_options import UpdateSecurityConfigRequestSamlOptions
from openapi_server import util


class UpdateSecurityConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, config_version: str=None, description: str=None, id: str=None, saml_options: UpdateSecurityConfigRequestSamlOptions=None):
        """UpdateSecurityConfigRequest - a model defined in OpenAPI

        :param client_token: The client_token of this UpdateSecurityConfigRequest.
        :param config_version: The config_version of this UpdateSecurityConfigRequest.
        :param description: The description of this UpdateSecurityConfigRequest.
        :param id: The id of this UpdateSecurityConfigRequest.
        :param saml_options: The saml_options of this UpdateSecurityConfigRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'config_version': str,
            'description': str,
            'id': str,
            'saml_options': UpdateSecurityConfigRequestSamlOptions
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'config_version': 'configVersion',
            'description': 'description',
            'id': 'id',
            'saml_options': 'samlOptions'
        }

        self._client_token = client_token
        self._config_version = config_version
        self._description = description
        self._id = id
        self._saml_options = saml_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSecurityConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSecurityConfigRequest of this UpdateSecurityConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this UpdateSecurityConfigRequest.


        :return: The client_token of this UpdateSecurityConfigRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateSecurityConfigRequest.


        :param client_token: The client_token of this UpdateSecurityConfigRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def config_version(self):
        """Gets the config_version of this UpdateSecurityConfigRequest.


        :return: The config_version of this UpdateSecurityConfigRequest.
        :rtype: str
        """
        return self._config_version

    @config_version.setter
    def config_version(self, config_version):
        """Sets the config_version of this UpdateSecurityConfigRequest.


        :param config_version: The config_version of this UpdateSecurityConfigRequest.
        :type config_version: str
        """
        if config_version is None:
            raise ValueError("Invalid value for `config_version`, must not be `None`")

        self._config_version = config_version

    @property
    def description(self):
        """Gets the description of this UpdateSecurityConfigRequest.


        :return: The description of this UpdateSecurityConfigRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSecurityConfigRequest.


        :param description: The description of this UpdateSecurityConfigRequest.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this UpdateSecurityConfigRequest.


        :return: The id of this UpdateSecurityConfigRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateSecurityConfigRequest.


        :param id: The id of this UpdateSecurityConfigRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def saml_options(self):
        """Gets the saml_options of this UpdateSecurityConfigRequest.


        :return: The saml_options of this UpdateSecurityConfigRequest.
        :rtype: UpdateSecurityConfigRequestSamlOptions
        """
        return self._saml_options

    @saml_options.setter
    def saml_options(self, saml_options):
        """Sets the saml_options of this UpdateSecurityConfigRequest.


        :param saml_options: The saml_options of this UpdateSecurityConfigRequest.
        :type saml_options: UpdateSecurityConfigRequestSamlOptions
        """

        self._saml_options = saml_options
