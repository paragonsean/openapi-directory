# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, id: str=None):
        """UpdateCollectionRequest - a model defined in OpenAPI

        :param client_token: The client_token of this UpdateCollectionRequest.
        :param description: The description of this UpdateCollectionRequest.
        :param id: The id of this UpdateCollectionRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'id': str
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'id': 'id'
        }

        self._client_token = client_token
        self._description = description
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCollectionRequest of this UpdateCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this UpdateCollectionRequest.


        :return: The client_token of this UpdateCollectionRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateCollectionRequest.


        :param client_token: The client_token of this UpdateCollectionRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this UpdateCollectionRequest.


        :return: The description of this UpdateCollectionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateCollectionRequest.


        :param description: The description of this UpdateCollectionRequest.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this UpdateCollectionRequest.


        :return: The id of this UpdateCollectionRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateCollectionRequest.


        :param id: The id of this UpdateCollectionRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
