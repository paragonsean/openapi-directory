# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_security_config_request_saml_options import CreateSecurityConfigRequestSamlOptions
from openapi_server.models.security_config_type import SecurityConfigType
from openapi_server import util


class CreateSecurityConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, name: str=None, saml_options: CreateSecurityConfigRequestSamlOptions=None, type: SecurityConfigType=None):
        """CreateSecurityConfigRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateSecurityConfigRequest.
        :param description: The description of this CreateSecurityConfigRequest.
        :param name: The name of this CreateSecurityConfigRequest.
        :param saml_options: The saml_options of this CreateSecurityConfigRequest.
        :param type: The type of this CreateSecurityConfigRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'name': str,
            'saml_options': CreateSecurityConfigRequestSamlOptions,
            'type': SecurityConfigType
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'name': 'name',
            'saml_options': 'samlOptions',
            'type': 'type'
        }

        self._client_token = client_token
        self._description = description
        self._name = name
        self._saml_options = saml_options
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSecurityConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSecurityConfigRequest of this CreateSecurityConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateSecurityConfigRequest.


        :return: The client_token of this CreateSecurityConfigRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateSecurityConfigRequest.


        :param client_token: The client_token of this CreateSecurityConfigRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateSecurityConfigRequest.


        :return: The description of this CreateSecurityConfigRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSecurityConfigRequest.


        :param description: The description of this CreateSecurityConfigRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateSecurityConfigRequest.


        :return: The name of this CreateSecurityConfigRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSecurityConfigRequest.


        :param name: The name of this CreateSecurityConfigRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def saml_options(self):
        """Gets the saml_options of this CreateSecurityConfigRequest.


        :return: The saml_options of this CreateSecurityConfigRequest.
        :rtype: CreateSecurityConfigRequestSamlOptions
        """
        return self._saml_options

    @saml_options.setter
    def saml_options(self, saml_options):
        """Sets the saml_options of this CreateSecurityConfigRequest.


        :param saml_options: The saml_options of this CreateSecurityConfigRequest.
        :type saml_options: CreateSecurityConfigRequestSamlOptions
        """

        self._saml_options = saml_options

    @property
    def type(self):
        """Gets the type of this CreateSecurityConfigRequest.


        :return: The type of this CreateSecurityConfigRequest.
        :rtype: SecurityConfigType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSecurityConfigRequest.


        :param type: The type of this CreateSecurityConfigRequest.
        :type type: SecurityConfigType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
