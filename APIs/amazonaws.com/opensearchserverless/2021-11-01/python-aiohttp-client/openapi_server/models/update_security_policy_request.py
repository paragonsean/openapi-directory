# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.security_policy_type import SecurityPolicyType
from openapi_server import util


class UpdateSecurityPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, name: str=None, policy: str=None, policy_version: str=None, type: SecurityPolicyType=None):
        """UpdateSecurityPolicyRequest - a model defined in OpenAPI

        :param client_token: The client_token of this UpdateSecurityPolicyRequest.
        :param description: The description of this UpdateSecurityPolicyRequest.
        :param name: The name of this UpdateSecurityPolicyRequest.
        :param policy: The policy of this UpdateSecurityPolicyRequest.
        :param policy_version: The policy_version of this UpdateSecurityPolicyRequest.
        :param type: The type of this UpdateSecurityPolicyRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'name': str,
            'policy': str,
            'policy_version': str,
            'type': SecurityPolicyType
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'name': 'name',
            'policy': 'policy',
            'policy_version': 'policyVersion',
            'type': 'type'
        }

        self._client_token = client_token
        self._description = description
        self._name = name
        self._policy = policy
        self._policy_version = policy_version
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSecurityPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSecurityPolicyRequest of this UpdateSecurityPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this UpdateSecurityPolicyRequest.


        :return: The client_token of this UpdateSecurityPolicyRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this UpdateSecurityPolicyRequest.


        :param client_token: The client_token of this UpdateSecurityPolicyRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this UpdateSecurityPolicyRequest.


        :return: The description of this UpdateSecurityPolicyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSecurityPolicyRequest.


        :param description: The description of this UpdateSecurityPolicyRequest.
        :type description: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this UpdateSecurityPolicyRequest.


        :return: The name of this UpdateSecurityPolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSecurityPolicyRequest.


        :param name: The name of this UpdateSecurityPolicyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this UpdateSecurityPolicyRequest.


        :return: The policy of this UpdateSecurityPolicyRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this UpdateSecurityPolicyRequest.


        :param policy: The policy of this UpdateSecurityPolicyRequest.
        :type policy: str
        """

        self._policy = policy

    @property
    def policy_version(self):
        """Gets the policy_version of this UpdateSecurityPolicyRequest.


        :return: The policy_version of this UpdateSecurityPolicyRequest.
        :rtype: str
        """
        return self._policy_version

    @policy_version.setter
    def policy_version(self, policy_version):
        """Sets the policy_version of this UpdateSecurityPolicyRequest.


        :param policy_version: The policy_version of this UpdateSecurityPolicyRequest.
        :type policy_version: str
        """
        if policy_version is None:
            raise ValueError("Invalid value for `policy_version`, must not be `None`")

        self._policy_version = policy_version

    @property
    def type(self):
        """Gets the type of this UpdateSecurityPolicyRequest.


        :return: The type of this UpdateSecurityPolicyRequest.
        :rtype: SecurityPolicyType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateSecurityPolicyRequest.


        :param type: The type of this UpdateSecurityPolicyRequest.
        :type type: SecurityPolicyType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
