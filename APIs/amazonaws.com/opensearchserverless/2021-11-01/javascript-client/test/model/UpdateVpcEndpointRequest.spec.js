/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenSearchServiceServerless);
  }
}(this, function(expect, OpenSearchServiceServerless) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateVpcEndpointRequest', function() {
    it('should create an instance of UpdateVpcEndpointRequest', function() {
      // uncomment below and update the code to test UpdateVpcEndpointRequest
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be.a(OpenSearchServiceServerless.UpdateVpcEndpointRequest);
    });

    it('should have the property addSecurityGroupIds (base name: "addSecurityGroupIds")', function() {
      // uncomment below and update the code to test the property addSecurityGroupIds
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property addSubnetIds (base name: "addSubnetIds")', function() {
      // uncomment below and update the code to test the property addSubnetIds
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "clientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property removeSecurityGroupIds (base name: "removeSecurityGroupIds")', function() {
      // uncomment below and update the code to test the property removeSecurityGroupIds
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be();
    });

    it('should have the property removeSubnetIds (base name: "removeSubnetIds")', function() {
      // uncomment below and update the code to test the property removeSubnetIds
      //var instance = new OpenSearchServiceServerless.UpdateVpcEndpointRequest();
      //expect(instance).to.be();
    });

  });

}));
