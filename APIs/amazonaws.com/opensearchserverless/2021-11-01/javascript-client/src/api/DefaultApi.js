/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchGetCollectionRequest from '../model/BatchGetCollectionRequest';
import BatchGetCollectionResponse from '../model/BatchGetCollectionResponse';
import BatchGetVpcEndpointRequest from '../model/BatchGetVpcEndpointRequest';
import BatchGetVpcEndpointResponse from '../model/BatchGetVpcEndpointResponse';
import CreateAccessPolicyRequest from '../model/CreateAccessPolicyRequest';
import CreateAccessPolicyResponse from '../model/CreateAccessPolicyResponse';
import CreateCollectionRequest from '../model/CreateCollectionRequest';
import CreateCollectionResponse from '../model/CreateCollectionResponse';
import CreateSecurityConfigRequest from '../model/CreateSecurityConfigRequest';
import CreateSecurityConfigResponse from '../model/CreateSecurityConfigResponse';
import CreateSecurityPolicyRequest from '../model/CreateSecurityPolicyRequest';
import CreateSecurityPolicyResponse from '../model/CreateSecurityPolicyResponse';
import CreateVpcEndpointRequest from '../model/CreateVpcEndpointRequest';
import CreateVpcEndpointResponse from '../model/CreateVpcEndpointResponse';
import DeleteAccessPolicyRequest from '../model/DeleteAccessPolicyRequest';
import DeleteCollectionRequest from '../model/DeleteCollectionRequest';
import DeleteCollectionResponse from '../model/DeleteCollectionResponse';
import DeleteSecurityConfigRequest from '../model/DeleteSecurityConfigRequest';
import DeleteSecurityPolicyRequest from '../model/DeleteSecurityPolicyRequest';
import DeleteVpcEndpointRequest from '../model/DeleteVpcEndpointRequest';
import DeleteVpcEndpointResponse from '../model/DeleteVpcEndpointResponse';
import GetAccessPolicyRequest from '../model/GetAccessPolicyRequest';
import GetAccessPolicyResponse from '../model/GetAccessPolicyResponse';
import GetAccountSettingsResponse from '../model/GetAccountSettingsResponse';
import GetPoliciesStatsResponse from '../model/GetPoliciesStatsResponse';
import GetSecurityConfigRequest from '../model/GetSecurityConfigRequest';
import GetSecurityConfigResponse from '../model/GetSecurityConfigResponse';
import GetSecurityPolicyRequest from '../model/GetSecurityPolicyRequest';
import GetSecurityPolicyResponse from '../model/GetSecurityPolicyResponse';
import ListAccessPoliciesRequest from '../model/ListAccessPoliciesRequest';
import ListAccessPoliciesResponse from '../model/ListAccessPoliciesResponse';
import ListCollectionsRequest from '../model/ListCollectionsRequest';
import ListCollectionsResponse from '../model/ListCollectionsResponse';
import ListSecurityConfigsRequest from '../model/ListSecurityConfigsRequest';
import ListSecurityConfigsResponse from '../model/ListSecurityConfigsResponse';
import ListSecurityPoliciesRequest from '../model/ListSecurityPoliciesRequest';
import ListSecurityPoliciesResponse from '../model/ListSecurityPoliciesResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListVpcEndpointsRequest from '../model/ListVpcEndpointsRequest';
import ListVpcEndpointsResponse from '../model/ListVpcEndpointsResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateAccessPolicyRequest from '../model/UpdateAccessPolicyRequest';
import UpdateAccessPolicyResponse from '../model/UpdateAccessPolicyResponse';
import UpdateAccountSettingsRequest from '../model/UpdateAccountSettingsRequest';
import UpdateAccountSettingsResponse from '../model/UpdateAccountSettingsResponse';
import UpdateCollectionRequest from '../model/UpdateCollectionRequest';
import UpdateCollectionResponse from '../model/UpdateCollectionResponse';
import UpdateSecurityConfigRequest from '../model/UpdateSecurityConfigRequest';
import UpdateSecurityConfigResponse from '../model/UpdateSecurityConfigResponse';
import UpdateSecurityPolicyRequest from '../model/UpdateSecurityPolicyRequest';
import UpdateSecurityPolicyResponse from '../model/UpdateSecurityPolicyResponse';
import UpdateVpcEndpointRequest from '../model/UpdateVpcEndpointRequest';
import UpdateVpcEndpointResponse from '../model/UpdateVpcEndpointResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-11-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchGetCollection operation.
     * @callback module:api/DefaultApi~batchGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns attributes for one or more collections, including the collection endpoint and the OpenSearch Dashboards endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-manage.html\">Creating and managing Amazon OpenSearch Serverless collections</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetCollectionRequest} batchGetCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetCollectionResponse}
     */
    batchGetCollection(xAmzTarget, batchGetCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetCollectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetCollection");
      }
      // verify the required parameter 'batchGetCollectionRequest' is set
      if (batchGetCollectionRequest === undefined || batchGetCollectionRequest === null) {
        throw new Error("Missing the required parameter 'batchGetCollectionRequest' when calling batchGetCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetCollectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.BatchGetCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGetVpcEndpoint operation.
     * @callback module:api/DefaultApi~batchGetVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGetVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns attributes for one or more VPC endpoints associated with the current account. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-vpc.html\">Access Amazon OpenSearch Serverless using an interface endpoint</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/BatchGetVpcEndpointRequest} batchGetVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGetVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGetVpcEndpointResponse}
     */
    batchGetVpcEndpoint(xAmzTarget, batchGetVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGetVpcEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling batchGetVpcEndpoint");
      }
      // verify the required parameter 'batchGetVpcEndpointRequest' is set
      if (batchGetVpcEndpointRequest === undefined || batchGetVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'batchGetVpcEndpointRequest' when calling batchGetVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGetVpcEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.BatchGetVpcEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccessPolicy operation.
     * @callback module:api/DefaultApi~createAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccessPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a data access policy for OpenSearch Serverless. Access policies limit access to collections and the resources within them, and allow a user to access that data irrespective of the access mechanism or network source. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html\">Data access control for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAccessPolicyRequest} createAccessPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccessPolicyResponse}
     */
    createAccessPolicy(xAmzTarget, createAccessPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAccessPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAccessPolicy");
      }
      // verify the required parameter 'createAccessPolicyRequest' is set
      if (createAccessPolicyRequest === undefined || createAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createAccessPolicyRequest' when calling createAccessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAccessPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.CreateAccessPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollection operation.
     * @callback module:api/DefaultApi~createCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new OpenSearch Serverless collection. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-manage.html\">Creating and managing Amazon OpenSearch Serverless collections</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateCollectionRequest} createCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCollectionResponse}
     */
    createCollection(xAmzTarget, createCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCollectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createCollection");
      }
      // verify the required parameter 'createCollectionRequest' is set
      if (createCollectionRequest === undefined || createCollectionRequest === null) {
        throw new Error("Missing the required parameter 'createCollectionRequest' when calling createCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCollectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.CreateCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSecurityConfig operation.
     * @callback module:api/DefaultApi~createSecurityConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecurityConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Specifies a security configuration for OpenSearch Serverless. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-saml.html\">SAML authentication for Amazon OpenSearch Serverless</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSecurityConfigRequest} createSecurityConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSecurityConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecurityConfigResponse}
     */
    createSecurityConfig(xAmzTarget, createSecurityConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSecurityConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSecurityConfig");
      }
      // verify the required parameter 'createSecurityConfigRequest' is set
      if (createSecurityConfigRequest === undefined || createSecurityConfigRequest === null) {
        throw new Error("Missing the required parameter 'createSecurityConfigRequest' when calling createSecurityConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecurityConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.CreateSecurityConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSecurityPolicy operation.
     * @callback module:api/DefaultApi~createSecurityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSecurityPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a security policy to be used by one or more OpenSearch Serverless collections. Security policies provide access to a collection and its OpenSearch Dashboards endpoint from public networks or specific VPC endpoints. They also allow you to secure a collection with a KMS encryption key. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html\">Network access for Amazon OpenSearch Serverless</a> and <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html\">Encryption at rest for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateSecurityPolicyRequest} createSecurityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSecurityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSecurityPolicyResponse}
     */
    createSecurityPolicy(xAmzTarget, createSecurityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSecurityPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createSecurityPolicy");
      }
      // verify the required parameter 'createSecurityPolicyRequest' is set
      if (createSecurityPolicyRequest === undefined || createSecurityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'createSecurityPolicyRequest' when calling createSecurityPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSecurityPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.CreateSecurityPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcEndpoint operation.
     * @callback module:api/DefaultApi~createVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an OpenSearch Serverless-managed interface VPC endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-vpc.html\">Access Amazon OpenSearch Serverless using an interface endpoint</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateVpcEndpointRequest} createVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcEndpointResponse}
     */
    createVpcEndpoint(xAmzTarget, createVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVpcEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createVpcEndpoint");
      }
      // verify the required parameter 'createVpcEndpointRequest' is set
      if (createVpcEndpointRequest === undefined || createVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'createVpcEndpointRequest' when calling createVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVpcEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.CreateVpcEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccessPolicy operation.
     * @callback module:api/DefaultApi~deleteAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an OpenSearch Serverless access policy. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html\">Data access control for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteAccessPolicyRequest} deleteAccessPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteAccessPolicy(xAmzTarget, deleteAccessPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteAccessPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteAccessPolicy");
      }
      // verify the required parameter 'deleteAccessPolicyRequest' is set
      if (deleteAccessPolicyRequest === undefined || deleteAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteAccessPolicyRequest' when calling deleteAccessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.DeleteAccessPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/DefaultApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an OpenSearch Serverless collection. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-manage.html\">Creating and managing Amazon OpenSearch Serverless collections</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteCollectionRequest} deleteCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCollectionResponse}
     */
    deleteCollection(xAmzTarget, deleteCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteCollectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteCollection");
      }
      // verify the required parameter 'deleteCollectionRequest' is set
      if (deleteCollectionRequest === undefined || deleteCollectionRequest === null) {
        throw new Error("Missing the required parameter 'deleteCollectionRequest' when calling deleteCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteCollectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.DeleteCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurityConfig operation.
     * @callback module:api/DefaultApi~deleteSecurityConfigCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a security configuration for OpenSearch Serverless. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-saml.html\">SAML authentication for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSecurityConfigRequest} deleteSecurityConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSecurityConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSecurityConfig(xAmzTarget, deleteSecurityConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSecurityConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSecurityConfig");
      }
      // verify the required parameter 'deleteSecurityConfigRequest' is set
      if (deleteSecurityConfigRequest === undefined || deleteSecurityConfigRequest === null) {
        throw new Error("Missing the required parameter 'deleteSecurityConfigRequest' when calling deleteSecurityConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.DeleteSecurityConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSecurityPolicy operation.
     * @callback module:api/DefaultApi~deleteSecurityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an OpenSearch Serverless security policy.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteSecurityPolicyRequest} deleteSecurityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSecurityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSecurityPolicy(xAmzTarget, deleteSecurityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSecurityPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteSecurityPolicy");
      }
      // verify the required parameter 'deleteSecurityPolicyRequest' is set
      if (deleteSecurityPolicyRequest === undefined || deleteSecurityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'deleteSecurityPolicyRequest' when calling deleteSecurityPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.DeleteSecurityPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcEndpoint operation.
     * @callback module:api/DefaultApi~deleteVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an OpenSearch Serverless-managed interface endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-vpc.html\">Access Amazon OpenSearch Serverless using an interface endpoint</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteVpcEndpointRequest} deleteVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteVpcEndpointResponse}
     */
    deleteVpcEndpoint(xAmzTarget, deleteVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteVpcEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteVpcEndpoint");
      }
      // verify the required parameter 'deleteVpcEndpointRequest' is set
      if (deleteVpcEndpointRequest === undefined || deleteVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'deleteVpcEndpointRequest' when calling deleteVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteVpcEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.DeleteVpcEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccessPolicy operation.
     * @callback module:api/DefaultApi~getAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccessPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an OpenSearch Serverless access policy. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html\">Data access control for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAccessPolicyRequest} getAccessPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccessPolicyResponse}
     */
    getAccessPolicy(xAmzTarget, getAccessPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAccessPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAccessPolicy");
      }
      // verify the required parameter 'getAccessPolicyRequest' is set
      if (getAccessPolicyRequest === undefined || getAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getAccessPolicyRequest' when calling getAccessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccessPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.GetAccessPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccountSettings operation.
     * @callback module:api/DefaultApi~getAccountSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns account-level settings related to OpenSearch Serverless.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccountSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountSettingsResponse}
     */
    getAccountSettings(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAccountSettings");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountSettingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.GetAccountSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPoliciesStats operation.
     * @callback module:api/DefaultApi~getPoliciesStatsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPoliciesStatsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns statistical information about your OpenSearch Serverless access policies, security configurations, and security policies.
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getPoliciesStatsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPoliciesStatsResponse}
     */
    getPoliciesStats(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getPoliciesStats");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getPoliciesStats");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetPoliciesStatsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.GetPoliciesStats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityConfig operation.
     * @callback module:api/DefaultApi~getSecurityConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about an OpenSearch Serverless security configuration. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-saml.html\">SAML authentication for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSecurityConfigRequest} getSecurityConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSecurityConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityConfigResponse}
     */
    getSecurityConfig(xAmzTarget, getSecurityConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSecurityConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSecurityConfig");
      }
      // verify the required parameter 'getSecurityConfigRequest' is set
      if (getSecurityConfigRequest === undefined || getSecurityConfigRequest === null) {
        throw new Error("Missing the required parameter 'getSecurityConfigRequest' when calling getSecurityConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSecurityConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.GetSecurityConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSecurityPolicy operation.
     * @callback module:api/DefaultApi~getSecurityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a configured OpenSearch Serverless security policy. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html\">Network access for Amazon OpenSearch Serverless</a> and <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html\">Encryption at rest for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSecurityPolicyRequest} getSecurityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSecurityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityPolicyResponse}
     */
    getSecurityPolicy(xAmzTarget, getSecurityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSecurityPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSecurityPolicy");
      }
      // verify the required parameter 'getSecurityPolicyRequest' is set
      if (getSecurityPolicyRequest === undefined || getSecurityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'getSecurityPolicyRequest' when calling getSecurityPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSecurityPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.GetSecurityPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAccessPolicies operation.
     * @callback module:api/DefaultApi~listAccessPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAccessPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a list of OpenSearch Serverless access policies.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListAccessPoliciesRequest} listAccessPoliciesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listAccessPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAccessPoliciesResponse}
     */
    listAccessPolicies(xAmzTarget, listAccessPoliciesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listAccessPoliciesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listAccessPolicies");
      }
      // verify the required parameter 'listAccessPoliciesRequest' is set
      if (listAccessPoliciesRequest === undefined || listAccessPoliciesRequest === null) {
        throw new Error("Missing the required parameter 'listAccessPoliciesRequest' when calling listAccessPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListAccessPoliciesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.ListAccessPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCollections operation.
     * @callback module:api/DefaultApi~listCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCollectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists all OpenSearch Serverless collections. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-manage.html\">Creating and managing Amazon OpenSearch Serverless collections</a>.</p> <note> <p>Make sure to include an empty request body {} if you don't include any collection filters in the request.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCollectionsRequest} listCollectionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCollectionsResponse}
     */
    listCollections(xAmzTarget, listCollectionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCollectionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCollections");
      }
      // verify the required parameter 'listCollectionsRequest' is set
      if (listCollectionsRequest === undefined || listCollectionsRequest === null) {
        throw new Error("Missing the required parameter 'listCollectionsRequest' when calling listCollections");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCollectionsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.ListCollections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityConfigs operation.
     * @callback module:api/DefaultApi~listSecurityConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSecurityConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about configured OpenSearch Serverless security configurations. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-saml.html\">SAML authentication for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSecurityConfigsRequest} listSecurityConfigsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSecurityConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSecurityConfigsResponse}
     */
    listSecurityConfigs(xAmzTarget, listSecurityConfigsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSecurityConfigsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSecurityConfigs");
      }
      // verify the required parameter 'listSecurityConfigsRequest' is set
      if (listSecurityConfigsRequest === undefined || listSecurityConfigsRequest === null) {
        throw new Error("Missing the required parameter 'listSecurityConfigsRequest' when calling listSecurityConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSecurityConfigsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.ListSecurityConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSecurityPolicies operation.
     * @callback module:api/DefaultApi~listSecurityPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSecurityPoliciesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about configured OpenSearch Serverless security policies.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListSecurityPoliciesRequest} listSecurityPoliciesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSecurityPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSecurityPoliciesResponse}
     */
    listSecurityPolicies(xAmzTarget, listSecurityPoliciesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSecurityPoliciesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listSecurityPolicies");
      }
      // verify the required parameter 'listSecurityPoliciesRequest' is set
      if (listSecurityPoliciesRequest === undefined || listSecurityPoliciesRequest === null) {
        throw new Error("Missing the required parameter 'listSecurityPoliciesRequest' when calling listSecurityPolicies");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSecurityPoliciesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.ListSecurityPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags for an OpenSearch Serverless resource. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/tag-collection.html\">Tagging Amazon OpenSearch Serverless collections</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVpcEndpoints operation.
     * @callback module:api/DefaultApi~listVpcEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVpcEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the OpenSearch Serverless-managed interface VPC endpoints associated with the current account. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-vpc.html\">Access Amazon OpenSearch Serverless using an interface endpoint</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListVpcEndpointsRequest} listVpcEndpointsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listVpcEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVpcEndpointsResponse}
     */
    listVpcEndpoints(xAmzTarget, listVpcEndpointsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listVpcEndpointsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listVpcEndpoints");
      }
      // verify the required parameter 'listVpcEndpointsRequest' is set
      if (listVpcEndpointsRequest === undefined || listVpcEndpointsRequest === null) {
        throw new Error("Missing the required parameter 'listVpcEndpointsRequest' when calling listVpcEndpoints");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListVpcEndpointsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.ListVpcEndpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates tags with an OpenSearch Serverless resource. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/tag-collection.html\">Tagging Amazon OpenSearch Serverless collections</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag or set of tags from an OpenSearch Serverless resource. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/tag-collection.html\">Tagging Amazon OpenSearch Serverless collections</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccessPolicy operation.
     * @callback module:api/DefaultApi~updateAccessPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAccessPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an OpenSearch Serverless access policy. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-data-access.html\">Data access control for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAccessPolicyRequest} updateAccessPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccessPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAccessPolicyResponse}
     */
    updateAccessPolicy(xAmzTarget, updateAccessPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAccessPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAccessPolicy");
      }
      // verify the required parameter 'updateAccessPolicyRequest' is set
      if (updateAccessPolicyRequest === undefined || updateAccessPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateAccessPolicyRequest' when calling updateAccessPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccessPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UpdateAccessPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountSettings operation.
     * @callback module:api/DefaultApi~updateAccountSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAccountSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the OpenSearch Serverless settings for the current Amazon Web Services account. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-scaling.html\">Managing capacity limits for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateAccountSettingsRequest} updateAccountSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAccountSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAccountSettingsResponse}
     */
    updateAccountSettings(xAmzTarget, updateAccountSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAccountSettingsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateAccountSettings");
      }
      // verify the required parameter 'updateAccountSettingsRequest' is set
      if (updateAccountSettingsRequest === undefined || updateAccountSettingsRequest === null) {
        throw new Error("Missing the required parameter 'updateAccountSettingsRequest' when calling updateAccountSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccountSettingsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UpdateAccountSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/DefaultApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCollectionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an OpenSearch Serverless collection.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateCollectionRequest} updateCollectionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCollectionResponse}
     */
    updateCollection(xAmzTarget, updateCollectionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCollectionRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateCollection");
      }
      // verify the required parameter 'updateCollectionRequest' is set
      if (updateCollectionRequest === undefined || updateCollectionRequest === null) {
        throw new Error("Missing the required parameter 'updateCollectionRequest' when calling updateCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCollectionResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UpdateCollection', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityConfig operation.
     * @callback module:api/DefaultApi~updateSecurityConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSecurityConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a security configuration for OpenSearch Serverless. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-saml.html\">SAML authentication for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateSecurityConfigRequest} updateSecurityConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSecurityConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSecurityConfigResponse}
     */
    updateSecurityConfig(xAmzTarget, updateSecurityConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSecurityConfigRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateSecurityConfig");
      }
      // verify the required parameter 'updateSecurityConfigRequest' is set
      if (updateSecurityConfigRequest === undefined || updateSecurityConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateSecurityConfigRequest' when calling updateSecurityConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecurityConfigResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UpdateSecurityConfig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSecurityPolicy operation.
     * @callback module:api/DefaultApi~updateSecurityPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSecurityPolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an OpenSearch Serverless security policy. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html\">Network access for Amazon OpenSearch Serverless</a> and <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html\">Encryption at rest for Amazon OpenSearch Serverless</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateSecurityPolicyRequest} updateSecurityPolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSecurityPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSecurityPolicyResponse}
     */
    updateSecurityPolicy(xAmzTarget, updateSecurityPolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSecurityPolicyRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateSecurityPolicy");
      }
      // verify the required parameter 'updateSecurityPolicyRequest' is set
      if (updateSecurityPolicyRequest === undefined || updateSecurityPolicyRequest === null) {
        throw new Error("Missing the required parameter 'updateSecurityPolicyRequest' when calling updateSecurityPolicy");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSecurityPolicyResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UpdateSecurityPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVpcEndpoint operation.
     * @callback module:api/DefaultApi~updateVpcEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVpcEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an OpenSearch Serverless-managed interface endpoint. For more information, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-vpc.html\">Access Amazon OpenSearch Serverless using an interface endpoint</a>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateVpcEndpointRequest} updateVpcEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVpcEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVpcEndpointResponse}
     */
    updateVpcEndpoint(xAmzTarget, updateVpcEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVpcEndpointRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateVpcEndpoint");
      }
      // verify the required parameter 'updateVpcEndpointRequest' is set
      if (updateVpcEndpointRequest === undefined || updateVpcEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateVpcEndpointRequest' when calling updateVpcEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVpcEndpointResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=OpenSearchServerless.UpdateVpcEndpoint', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
