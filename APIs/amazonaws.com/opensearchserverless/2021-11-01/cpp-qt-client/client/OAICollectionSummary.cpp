/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionSummary::OAICollectionSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionSummary::OAICollectionSummary() {
    this->initializeModel();
}

OAICollectionSummary::~OAICollectionSummary() {}

void OAICollectionSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICollectionSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICollectionSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAICollectionSummary::getArn() const {
    return m_arn;
}
void OAICollectionSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICollectionSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICollectionSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICollectionSummary::getId() const {
    return m_id;
}
void OAICollectionSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollectionSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollectionSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollectionSummary::getName() const {
    return m_name;
}
void OAICollectionSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollectionSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollectionSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAICollectionStatus OAICollectionSummary::getStatus() const {
    return m_status;
}
void OAICollectionSummary::setStatus(const OAICollectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICollectionSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAICollectionSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICollectionSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
