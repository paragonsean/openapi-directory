/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessPolicyDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessPolicyDetail::OAIAccessPolicyDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessPolicyDetail::OAIAccessPolicyDetail() {
    this->initializeModel();
}

OAIAccessPolicyDetail::~OAIAccessPolicyDetail() {}

void OAIAccessPolicyDetail::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_policy_version_isSet = false;
    m_policy_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAccessPolicyDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessPolicyDetail::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_policy_version_isValid = ::OpenAPI::fromJsonValue(m_policy_version, json[QString("policyVersion")]);
    m_policy_version_isSet = !json[QString("policyVersion")].isNull() && m_policy_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAccessPolicyDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessPolicyDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_policy_version_isSet) {
        obj.insert(QString("policyVersion"), ::OpenAPI::toJsonValue(m_policy_version));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIAccessPolicyDetail::getCreatedDate() const {
    return m_created_date;
}
void OAIAccessPolicyDetail::setCreatedDate(const qint32 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAccessPolicyDetail::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAccessPolicyDetail::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIAccessPolicyDetail::getDescription() const {
    return m_description;
}
void OAIAccessPolicyDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccessPolicyDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccessPolicyDetail::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAccessPolicyDetail::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIAccessPolicyDetail::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIAccessPolicyDetail::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIAccessPolicyDetail::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIAccessPolicyDetail::getName() const {
    return m_name;
}
void OAIAccessPolicyDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccessPolicyDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccessPolicyDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIAccessPolicyDetail::getPolicy() const {
    return m_policy;
}
void OAIAccessPolicyDetail::setPolicy(const OAIObject &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIAccessPolicyDetail::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIAccessPolicyDetail::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIAccessPolicyDetail::getPolicyVersion() const {
    return m_policy_version;
}
void OAIAccessPolicyDetail::setPolicyVersion(const QString &policy_version) {
    m_policy_version = policy_version;
    m_policy_version_isSet = true;
}

bool OAIAccessPolicyDetail::is_policy_version_Set() const{
    return m_policy_version_isSet;
}

bool OAIAccessPolicyDetail::is_policy_version_Valid() const{
    return m_policy_version_isValid;
}

OAIAccessPolicyType OAIAccessPolicyDetail::getType() const {
    return m_type;
}
void OAIAccessPolicyDetail::setType(const OAIAccessPolicyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAccessPolicyDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAccessPolicyDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAccessPolicyDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessPolicyDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
