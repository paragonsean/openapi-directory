/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVpcEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVpcEndpointResponse::OAIUpdateVpcEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVpcEndpointResponse::OAIUpdateVpcEndpointResponse() {
    this->initializeModel();
}

OAIUpdateVpcEndpointResponse::~OAIUpdateVpcEndpointResponse() {}

void OAIUpdateVpcEndpointResponse::initializeModel() {

    m_update_vpc_endpoint_detail_isSet = false;
    m_update_vpc_endpoint_detail_isValid = false;
}

void OAIUpdateVpcEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVpcEndpointResponse::fromJsonObject(QJsonObject json) {

    m_update_vpc_endpoint_detail_isValid = ::OpenAPI::fromJsonValue(m_update_vpc_endpoint_detail, json[QString("UpdateVpcEndpointDetail")]);
    m_update_vpc_endpoint_detail_isSet = !json[QString("UpdateVpcEndpointDetail")].isNull() && m_update_vpc_endpoint_detail_isValid;
}

QString OAIUpdateVpcEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVpcEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_update_vpc_endpoint_detail.isSet()) {
        obj.insert(QString("UpdateVpcEndpointDetail"), ::OpenAPI::toJsonValue(m_update_vpc_endpoint_detail));
    }
    return obj;
}

OAIUpdateVpcEndpointResponse_UpdateVpcEndpointDetail OAIUpdateVpcEndpointResponse::getUpdateVpcEndpointDetail() const {
    return m_update_vpc_endpoint_detail;
}
void OAIUpdateVpcEndpointResponse::setUpdateVpcEndpointDetail(const OAIUpdateVpcEndpointResponse_UpdateVpcEndpointDetail &update_vpc_endpoint_detail) {
    m_update_vpc_endpoint_detail = update_vpc_endpoint_detail;
    m_update_vpc_endpoint_detail_isSet = true;
}

bool OAIUpdateVpcEndpointResponse::is_update_vpc_endpoint_detail_Set() const{
    return m_update_vpc_endpoint_detail_isSet;
}

bool OAIUpdateVpcEndpointResponse::is_update_vpc_endpoint_detail_Valid() const{
    return m_update_vpc_endpoint_detail_isValid;
}

bool OAIUpdateVpcEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_update_vpc_endpoint_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVpcEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
