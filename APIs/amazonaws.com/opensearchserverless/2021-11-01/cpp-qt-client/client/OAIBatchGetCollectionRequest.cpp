/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetCollectionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetCollectionRequest::OAIBatchGetCollectionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetCollectionRequest::OAIBatchGetCollectionRequest() {
    this->initializeModel();
}

OAIBatchGetCollectionRequest::~OAIBatchGetCollectionRequest() {}

void OAIBatchGetCollectionRequest::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;

    m_names_isSet = false;
    m_names_isValid = false;
}

void OAIBatchGetCollectionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetCollectionRequest::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;

    m_names_isValid = ::OpenAPI::fromJsonValue(m_names, json[QString("names")]);
    m_names_isSet = !json[QString("names")].isNull() && m_names_isValid;
}

QString OAIBatchGetCollectionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetCollectionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    if (m_names.isSet()) {
        obj.insert(QString("names"), ::OpenAPI::toJsonValue(m_names));
    }
    return obj;
}

QList OAIBatchGetCollectionRequest::getIds() const {
    return m_ids;
}
void OAIBatchGetCollectionRequest::setIds(const QList &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIBatchGetCollectionRequest::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIBatchGetCollectionRequest::is_ids_Valid() const{
    return m_ids_isValid;
}

QList OAIBatchGetCollectionRequest::getNames() const {
    return m_names;
}
void OAIBatchGetCollectionRequest::setNames(const QList &names) {
    m_names = names;
    m_names_isSet = true;
}

bool OAIBatchGetCollectionRequest::is_names_Set() const{
    return m_names_isSet;
}

bool OAIBatchGetCollectionRequest::is_names_Valid() const{
    return m_names_isValid;
}

bool OAIBatchGetCollectionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetCollectionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
