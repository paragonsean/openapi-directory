/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcEndpointDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcEndpointDetail::OAIVpcEndpointDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcEndpointDetail::OAIVpcEndpointDetail() {
    this->initializeModel();
}

OAIVpcEndpointDetail::~OAIVpcEndpointDetail() {}

void OAIVpcEndpointDetail::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAIVpcEndpointDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcEndpointDetail::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;
}

QString OAIVpcEndpointDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcEndpointDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

qint32 OAIVpcEndpointDetail::getCreatedDate() const {
    return m_created_date;
}
void OAIVpcEndpointDetail::setCreatedDate(const qint32 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIVpcEndpointDetail::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIVpcEndpointDetail::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIVpcEndpointDetail::getId() const {
    return m_id;
}
void OAIVpcEndpointDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVpcEndpointDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVpcEndpointDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVpcEndpointDetail::getName() const {
    return m_name;
}
void OAIVpcEndpointDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVpcEndpointDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVpcEndpointDetail::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIVpcEndpointDetail::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIVpcEndpointDetail::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIVpcEndpointDetail::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIVpcEndpointDetail::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

OAIVpcEndpointStatus OAIVpcEndpointDetail::getStatus() const {
    return m_status;
}
void OAIVpcEndpointDetail::setStatus(const OAIVpcEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVpcEndpointDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVpcEndpointDetail::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIVpcEndpointDetail::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIVpcEndpointDetail::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIVpcEndpointDetail::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIVpcEndpointDetail::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QString OAIVpcEndpointDetail::getVpcId() const {
    return m_vpc_id;
}
void OAIVpcEndpointDetail::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAIVpcEndpointDetail::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAIVpcEndpointDetail::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAIVpcEndpointDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcEndpointDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
