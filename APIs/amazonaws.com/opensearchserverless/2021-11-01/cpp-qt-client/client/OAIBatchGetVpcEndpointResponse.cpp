/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetVpcEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetVpcEndpointResponse::OAIBatchGetVpcEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetVpcEndpointResponse::OAIBatchGetVpcEndpointResponse() {
    this->initializeModel();
}

OAIBatchGetVpcEndpointResponse::~OAIBatchGetVpcEndpointResponse() {}

void OAIBatchGetVpcEndpointResponse::initializeModel() {

    m_vpc_endpoint_details_isSet = false;
    m_vpc_endpoint_details_isValid = false;

    m_vpc_endpoint_error_details_isSet = false;
    m_vpc_endpoint_error_details_isValid = false;
}

void OAIBatchGetVpcEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetVpcEndpointResponse::fromJsonObject(QJsonObject json) {

    m_vpc_endpoint_details_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_details, json[QString("vpcEndpointDetails")]);
    m_vpc_endpoint_details_isSet = !json[QString("vpcEndpointDetails")].isNull() && m_vpc_endpoint_details_isValid;

    m_vpc_endpoint_error_details_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_error_details, json[QString("vpcEndpointErrorDetails")]);
    m_vpc_endpoint_error_details_isSet = !json[QString("vpcEndpointErrorDetails")].isNull() && m_vpc_endpoint_error_details_isValid;
}

QString OAIBatchGetVpcEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetVpcEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_vpc_endpoint_details.isSet()) {
        obj.insert(QString("vpcEndpointDetails"), ::OpenAPI::toJsonValue(m_vpc_endpoint_details));
    }
    if (m_vpc_endpoint_error_details.isSet()) {
        obj.insert(QString("vpcEndpointErrorDetails"), ::OpenAPI::toJsonValue(m_vpc_endpoint_error_details));
    }
    return obj;
}

QList OAIBatchGetVpcEndpointResponse::getVpcEndpointDetails() const {
    return m_vpc_endpoint_details;
}
void OAIBatchGetVpcEndpointResponse::setVpcEndpointDetails(const QList &vpc_endpoint_details) {
    m_vpc_endpoint_details = vpc_endpoint_details;
    m_vpc_endpoint_details_isSet = true;
}

bool OAIBatchGetVpcEndpointResponse::is_vpc_endpoint_details_Set() const{
    return m_vpc_endpoint_details_isSet;
}

bool OAIBatchGetVpcEndpointResponse::is_vpc_endpoint_details_Valid() const{
    return m_vpc_endpoint_details_isValid;
}

QList OAIBatchGetVpcEndpointResponse::getVpcEndpointErrorDetails() const {
    return m_vpc_endpoint_error_details;
}
void OAIBatchGetVpcEndpointResponse::setVpcEndpointErrorDetails(const QList &vpc_endpoint_error_details) {
    m_vpc_endpoint_error_details = vpc_endpoint_error_details;
    m_vpc_endpoint_error_details_isSet = true;
}

bool OAIBatchGetVpcEndpointResponse::is_vpc_endpoint_error_details_Set() const{
    return m_vpc_endpoint_error_details_isSet;
}

bool OAIBatchGetVpcEndpointResponse::is_vpc_endpoint_error_details_Valid() const{
    return m_vpc_endpoint_error_details_isValid;
}

bool OAIBatchGetVpcEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_vpc_endpoint_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetVpcEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
