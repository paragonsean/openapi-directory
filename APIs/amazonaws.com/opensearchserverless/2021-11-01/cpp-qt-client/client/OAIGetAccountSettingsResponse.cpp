/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAccountSettingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAccountSettingsResponse::OAIGetAccountSettingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAccountSettingsResponse::OAIGetAccountSettingsResponse() {
    this->initializeModel();
}

OAIGetAccountSettingsResponse::~OAIGetAccountSettingsResponse() {}

void OAIGetAccountSettingsResponse::initializeModel() {

    m_account_settings_detail_isSet = false;
    m_account_settings_detail_isValid = false;
}

void OAIGetAccountSettingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAccountSettingsResponse::fromJsonObject(QJsonObject json) {

    m_account_settings_detail_isValid = ::OpenAPI::fromJsonValue(m_account_settings_detail, json[QString("accountSettingsDetail")]);
    m_account_settings_detail_isSet = !json[QString("accountSettingsDetail")].isNull() && m_account_settings_detail_isValid;
}

QString OAIGetAccountSettingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAccountSettingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_settings_detail.isSet()) {
        obj.insert(QString("accountSettingsDetail"), ::OpenAPI::toJsonValue(m_account_settings_detail));
    }
    return obj;
}

OAIGetAccountSettingsResponse_accountSettingsDetail OAIGetAccountSettingsResponse::getAccountSettingsDetail() const {
    return m_account_settings_detail;
}
void OAIGetAccountSettingsResponse::setAccountSettingsDetail(const OAIGetAccountSettingsResponse_accountSettingsDetail &account_settings_detail) {
    m_account_settings_detail = account_settings_detail;
    m_account_settings_detail_isSet = true;
}

bool OAIGetAccountSettingsResponse::is_account_settings_detail_Set() const{
    return m_account_settings_detail_isSet;
}

bool OAIGetAccountSettingsResponse::is_account_settings_detail_Valid() const{
    return m_account_settings_detail_isValid;
}

bool OAIGetAccountSettingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_settings_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAccountSettingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
