/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetVpcEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetVpcEndpointRequest::OAIBatchGetVpcEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetVpcEndpointRequest::OAIBatchGetVpcEndpointRequest() {
    this->initializeModel();
}

OAIBatchGetVpcEndpointRequest::~OAIBatchGetVpcEndpointRequest() {}

void OAIBatchGetVpcEndpointRequest::initializeModel() {

    m_ids_isSet = false;
    m_ids_isValid = false;
}

void OAIBatchGetVpcEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetVpcEndpointRequest::fromJsonObject(QJsonObject json) {

    m_ids_isValid = ::OpenAPI::fromJsonValue(m_ids, json[QString("ids")]);
    m_ids_isSet = !json[QString("ids")].isNull() && m_ids_isValid;
}

QString OAIBatchGetVpcEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetVpcEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_ids.isSet()) {
        obj.insert(QString("ids"), ::OpenAPI::toJsonValue(m_ids));
    }
    return obj;
}

QList OAIBatchGetVpcEndpointRequest::getIds() const {
    return m_ids;
}
void OAIBatchGetVpcEndpointRequest::setIds(const QList &ids) {
    m_ids = ids;
    m_ids_isSet = true;
}

bool OAIBatchGetVpcEndpointRequest::is_ids_Set() const{
    return m_ids_isSet;
}

bool OAIBatchGetVpcEndpointRequest::is_ids_Valid() const{
    return m_ids_isValid;
}

bool OAIBatchGetVpcEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetVpcEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ids_isValid && true;
}

} // namespace OpenAPI
