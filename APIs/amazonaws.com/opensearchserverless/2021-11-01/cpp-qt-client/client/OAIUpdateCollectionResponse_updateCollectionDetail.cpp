/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCollectionResponse_updateCollectionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCollectionResponse_updateCollectionDetail::OAIUpdateCollectionResponse_updateCollectionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCollectionResponse_updateCollectionDetail::OAIUpdateCollectionResponse_updateCollectionDetail() {
    this->initializeModel();
}

OAIUpdateCollectionResponse_updateCollectionDetail::~OAIUpdateCollectionResponse_updateCollectionDetail() {}

void OAIUpdateCollectionResponse_updateCollectionDetail::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdateCollectionResponse_updateCollectionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCollectionResponse_updateCollectionDetail::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUpdateCollectionResponse_updateCollectionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCollectionResponse_updateCollectionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUpdateCollectionResponse_updateCollectionDetail::getArn() const {
    return m_arn;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_arn_Valid() const{
    return m_arn_isValid;
}

qint32 OAIUpdateCollectionResponse_updateCollectionDetail::getCreatedDate() const {
    return m_created_date;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setCreatedDate(const qint32 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIUpdateCollectionResponse_updateCollectionDetail::getDescription() const {
    return m_description;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateCollectionResponse_updateCollectionDetail::getId() const {
    return m_id;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIUpdateCollectionResponse_updateCollectionDetail::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIUpdateCollectionResponse_updateCollectionDetail::getName() const {
    return m_name;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAICollectionStatus OAIUpdateCollectionResponse_updateCollectionDetail::getStatus() const {
    return m_status;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setStatus(const OAICollectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_status_Valid() const{
    return m_status_isValid;
}

OAICollectionType OAIUpdateCollectionResponse_updateCollectionDetail::getType() const {
    return m_type;
}
void OAIUpdateCollectionResponse_updateCollectionDetail::setType(const OAICollectionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCollectionResponse_updateCollectionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
