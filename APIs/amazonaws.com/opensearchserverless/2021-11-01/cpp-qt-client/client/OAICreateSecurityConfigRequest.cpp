/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSecurityConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSecurityConfigRequest::OAICreateSecurityConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSecurityConfigRequest::OAICreateSecurityConfigRequest() {
    this->initializeModel();
}

OAICreateSecurityConfigRequest::~OAICreateSecurityConfigRequest() {}

void OAICreateSecurityConfigRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_saml_options_isSet = false;
    m_saml_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateSecurityConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSecurityConfigRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_saml_options_isValid = ::OpenAPI::fromJsonValue(m_saml_options, json[QString("samlOptions")]);
    m_saml_options_isSet = !json[QString("samlOptions")].isNull() && m_saml_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateSecurityConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSecurityConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_saml_options.isSet()) {
        obj.insert(QString("samlOptions"), ::OpenAPI::toJsonValue(m_saml_options));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateSecurityConfigRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateSecurityConfigRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateSecurityConfigRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateSecurityConfigRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateSecurityConfigRequest::getDescription() const {
    return m_description;
}
void OAICreateSecurityConfigRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSecurityConfigRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSecurityConfigRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSecurityConfigRequest::getName() const {
    return m_name;
}
void OAICreateSecurityConfigRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSecurityConfigRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSecurityConfigRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateSecurityConfigRequest_samlOptions OAICreateSecurityConfigRequest::getSamlOptions() const {
    return m_saml_options;
}
void OAICreateSecurityConfigRequest::setSamlOptions(const OAICreateSecurityConfigRequest_samlOptions &saml_options) {
    m_saml_options = saml_options;
    m_saml_options_isSet = true;
}

bool OAICreateSecurityConfigRequest::is_saml_options_Set() const{
    return m_saml_options_isSet;
}

bool OAICreateSecurityConfigRequest::is_saml_options_Valid() const{
    return m_saml_options_isValid;
}

OAISecurityConfigType OAICreateSecurityConfigRequest::getType() const {
    return m_type;
}
void OAICreateSecurityConfigRequest::setType(const OAISecurityConfigType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateSecurityConfigRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateSecurityConfigRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateSecurityConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSecurityConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
