/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcEndpointSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcEndpointSummary::OAIVpcEndpointSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcEndpointSummary::OAIVpcEndpointSummary() {
    this->initializeModel();
}

OAIVpcEndpointSummary::~OAIVpcEndpointSummary() {}

void OAIVpcEndpointSummary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIVpcEndpointSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcEndpointSummary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIVpcEndpointSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcEndpointSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIVpcEndpointSummary::getId() const {
    return m_id;
}
void OAIVpcEndpointSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVpcEndpointSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVpcEndpointSummary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVpcEndpointSummary::getName() const {
    return m_name;
}
void OAIVpcEndpointSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVpcEndpointSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVpcEndpointSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIVpcEndpointStatus OAIVpcEndpointSummary::getStatus() const {
    return m_status;
}
void OAIVpcEndpointSummary::setStatus(const OAIVpcEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVpcEndpointSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVpcEndpointSummary::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIVpcEndpointSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcEndpointSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
