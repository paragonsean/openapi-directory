/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapacityLimits.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapacityLimits::OAICapacityLimits(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapacityLimits::OAICapacityLimits() {
    this->initializeModel();
}

OAICapacityLimits::~OAICapacityLimits() {}

void OAICapacityLimits::initializeModel() {

    m_max_indexing_capacity_in_ocu_isSet = false;
    m_max_indexing_capacity_in_ocu_isValid = false;

    m_max_search_capacity_in_ocu_isSet = false;
    m_max_search_capacity_in_ocu_isValid = false;
}

void OAICapacityLimits::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapacityLimits::fromJsonObject(QJsonObject json) {

    m_max_indexing_capacity_in_ocu_isValid = ::OpenAPI::fromJsonValue(m_max_indexing_capacity_in_ocu, json[QString("maxIndexingCapacityInOCU")]);
    m_max_indexing_capacity_in_ocu_isSet = !json[QString("maxIndexingCapacityInOCU")].isNull() && m_max_indexing_capacity_in_ocu_isValid;

    m_max_search_capacity_in_ocu_isValid = ::OpenAPI::fromJsonValue(m_max_search_capacity_in_ocu, json[QString("maxSearchCapacityInOCU")]);
    m_max_search_capacity_in_ocu_isSet = !json[QString("maxSearchCapacityInOCU")].isNull() && m_max_search_capacity_in_ocu_isValid;
}

QString OAICapacityLimits::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapacityLimits::asJsonObject() const {
    QJsonObject obj;
    if (m_max_indexing_capacity_in_ocu_isSet) {
        obj.insert(QString("maxIndexingCapacityInOCU"), ::OpenAPI::toJsonValue(m_max_indexing_capacity_in_ocu));
    }
    if (m_max_search_capacity_in_ocu_isSet) {
        obj.insert(QString("maxSearchCapacityInOCU"), ::OpenAPI::toJsonValue(m_max_search_capacity_in_ocu));
    }
    return obj;
}

qint32 OAICapacityLimits::getMaxIndexingCapacityInOcu() const {
    return m_max_indexing_capacity_in_ocu;
}
void OAICapacityLimits::setMaxIndexingCapacityInOcu(const qint32 &max_indexing_capacity_in_ocu) {
    m_max_indexing_capacity_in_ocu = max_indexing_capacity_in_ocu;
    m_max_indexing_capacity_in_ocu_isSet = true;
}

bool OAICapacityLimits::is_max_indexing_capacity_in_ocu_Set() const{
    return m_max_indexing_capacity_in_ocu_isSet;
}

bool OAICapacityLimits::is_max_indexing_capacity_in_ocu_Valid() const{
    return m_max_indexing_capacity_in_ocu_isValid;
}

qint32 OAICapacityLimits::getMaxSearchCapacityInOcu() const {
    return m_max_search_capacity_in_ocu;
}
void OAICapacityLimits::setMaxSearchCapacityInOcu(const qint32 &max_search_capacity_in_ocu) {
    m_max_search_capacity_in_ocu = max_search_capacity_in_ocu;
    m_max_search_capacity_in_ocu_isSet = true;
}

bool OAICapacityLimits::is_max_search_capacity_in_ocu_Set() const{
    return m_max_search_capacity_in_ocu_isSet;
}

bool OAICapacityLimits::is_max_search_capacity_in_ocu_Valid() const{
    return m_max_search_capacity_in_ocu_isValid;
}

bool OAICapacityLimits::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_indexing_capacity_in_ocu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_search_capacity_in_ocu_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapacityLimits::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
