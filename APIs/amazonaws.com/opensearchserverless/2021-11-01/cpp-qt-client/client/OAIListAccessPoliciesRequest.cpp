/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAccessPoliciesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAccessPoliciesRequest::OAIListAccessPoliciesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAccessPoliciesRequest::OAIListAccessPoliciesRequest() {
    this->initializeModel();
}

OAIListAccessPoliciesRequest::~OAIListAccessPoliciesRequest() {}

void OAIListAccessPoliciesRequest::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIListAccessPoliciesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAccessPoliciesRequest::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIListAccessPoliciesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAccessPoliciesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIListAccessPoliciesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAccessPoliciesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAccessPoliciesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAccessPoliciesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListAccessPoliciesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAccessPoliciesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAccessPoliciesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAccessPoliciesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListAccessPoliciesRequest::getResource() const {
    return m_resource;
}
void OAIListAccessPoliciesRequest::setResource(const QList &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIListAccessPoliciesRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIListAccessPoliciesRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIAccessPolicyType OAIListAccessPoliciesRequest::getType() const {
    return m_type;
}
void OAIListAccessPoliciesRequest::setType(const OAIAccessPolicyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIListAccessPoliciesRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIListAccessPoliciesRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIListAccessPoliciesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAccessPoliciesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
