/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSecurityPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSecurityPolicyRequest::OAIUpdateSecurityPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSecurityPolicyRequest::OAIUpdateSecurityPolicyRequest() {
    this->initializeModel();
}

OAIUpdateSecurityPolicyRequest::~OAIUpdateSecurityPolicyRequest() {}

void OAIUpdateSecurityPolicyRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_policy_version_isSet = false;
    m_policy_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdateSecurityPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSecurityPolicyRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_policy_version_isValid = ::OpenAPI::fromJsonValue(m_policy_version, json[QString("policyVersion")]);
    m_policy_version_isSet = !json[QString("policyVersion")].isNull() && m_policy_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUpdateSecurityPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSecurityPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_policy_version_isSet) {
        obj.insert(QString("policyVersion"), ::OpenAPI::toJsonValue(m_policy_version));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUpdateSecurityPolicyRequest::getClientToken() const {
    return m_client_token;
}
void OAIUpdateSecurityPolicyRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateSecurityPolicyRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateSecurityPolicyRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateSecurityPolicyRequest::getDescription() const {
    return m_description;
}
void OAIUpdateSecurityPolicyRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateSecurityPolicyRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateSecurityPolicyRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateSecurityPolicyRequest::getName() const {
    return m_name;
}
void OAIUpdateSecurityPolicyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateSecurityPolicyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateSecurityPolicyRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateSecurityPolicyRequest::getPolicy() const {
    return m_policy;
}
void OAIUpdateSecurityPolicyRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIUpdateSecurityPolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIUpdateSecurityPolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIUpdateSecurityPolicyRequest::getPolicyVersion() const {
    return m_policy_version;
}
void OAIUpdateSecurityPolicyRequest::setPolicyVersion(const QString &policy_version) {
    m_policy_version = policy_version;
    m_policy_version_isSet = true;
}

bool OAIUpdateSecurityPolicyRequest::is_policy_version_Set() const{
    return m_policy_version_isSet;
}

bool OAIUpdateSecurityPolicyRequest::is_policy_version_Valid() const{
    return m_policy_version_isValid;
}

OAISecurityPolicyType OAIUpdateSecurityPolicyRequest::getType() const {
    return m_type;
}
void OAIUpdateSecurityPolicyRequest::setType(const OAISecurityPolicyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateSecurityPolicyRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateSecurityPolicyRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdateSecurityPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSecurityPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_policy_version_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
