/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSecurityPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSecurityPolicyResponse::OAICreateSecurityPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSecurityPolicyResponse::OAICreateSecurityPolicyResponse() {
    this->initializeModel();
}

OAICreateSecurityPolicyResponse::~OAICreateSecurityPolicyResponse() {}

void OAICreateSecurityPolicyResponse::initializeModel() {

    m_security_policy_detail_isSet = false;
    m_security_policy_detail_isValid = false;
}

void OAICreateSecurityPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSecurityPolicyResponse::fromJsonObject(QJsonObject json) {

    m_security_policy_detail_isValid = ::OpenAPI::fromJsonValue(m_security_policy_detail, json[QString("securityPolicyDetail")]);
    m_security_policy_detail_isSet = !json[QString("securityPolicyDetail")].isNull() && m_security_policy_detail_isValid;
}

QString OAICreateSecurityPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSecurityPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_security_policy_detail.isSet()) {
        obj.insert(QString("securityPolicyDetail"), ::OpenAPI::toJsonValue(m_security_policy_detail));
    }
    return obj;
}

OAICreateSecurityPolicyResponse_securityPolicyDetail OAICreateSecurityPolicyResponse::getSecurityPolicyDetail() const {
    return m_security_policy_detail;
}
void OAICreateSecurityPolicyResponse::setSecurityPolicyDetail(const OAICreateSecurityPolicyResponse_securityPolicyDetail &security_policy_detail) {
    m_security_policy_detail = security_policy_detail;
    m_security_policy_detail_isSet = true;
}

bool OAICreateSecurityPolicyResponse::is_security_policy_detail_Set() const{
    return m_security_policy_detail_isSet;
}

bool OAICreateSecurityPolicyResponse::is_security_policy_detail_Valid() const{
    return m_security_policy_detail_isValid;
}

bool OAICreateSecurityPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_security_policy_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSecurityPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
