/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCollectionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCollectionsResponse::OAIListCollectionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCollectionsResponse::OAIListCollectionsResponse() {
    this->initializeModel();
}

OAIListCollectionsResponse::~OAIListCollectionsResponse() {}

void OAIListCollectionsResponse::initializeModel() {

    m_collection_summaries_isSet = false;
    m_collection_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListCollectionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCollectionsResponse::fromJsonObject(QJsonObject json) {

    m_collection_summaries_isValid = ::OpenAPI::fromJsonValue(m_collection_summaries, json[QString("collectionSummaries")]);
    m_collection_summaries_isSet = !json[QString("collectionSummaries")].isNull() && m_collection_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListCollectionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCollectionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_summaries.isSet()) {
        obj.insert(QString("collectionSummaries"), ::OpenAPI::toJsonValue(m_collection_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListCollectionsResponse::getCollectionSummaries() const {
    return m_collection_summaries;
}
void OAIListCollectionsResponse::setCollectionSummaries(const QList &collection_summaries) {
    m_collection_summaries = collection_summaries;
    m_collection_summaries_isSet = true;
}

bool OAIListCollectionsResponse::is_collection_summaries_Set() const{
    return m_collection_summaries_isSet;
}

bool OAIListCollectionsResponse::is_collection_summaries_Valid() const{
    return m_collection_summaries_isValid;
}

QString OAIListCollectionsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListCollectionsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCollectionsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCollectionsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListCollectionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCollectionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
