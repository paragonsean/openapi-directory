/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListVpcEndpointsRequest_vpcEndpointFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListVpcEndpointsRequest_vpcEndpointFilters::OAIListVpcEndpointsRequest_vpcEndpointFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListVpcEndpointsRequest_vpcEndpointFilters::OAIListVpcEndpointsRequest_vpcEndpointFilters() {
    this->initializeModel();
}

OAIListVpcEndpointsRequest_vpcEndpointFilters::~OAIListVpcEndpointsRequest_vpcEndpointFilters() {}

void OAIListVpcEndpointsRequest_vpcEndpointFilters::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListVpcEndpointsRequest_vpcEndpointFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListVpcEndpointsRequest_vpcEndpointFilters::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIListVpcEndpointsRequest_vpcEndpointFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListVpcEndpointsRequest_vpcEndpointFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIVpcEndpointStatus OAIListVpcEndpointsRequest_vpcEndpointFilters::getStatus() const {
    return m_status;
}
void OAIListVpcEndpointsRequest_vpcEndpointFilters::setStatus(const OAIVpcEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListVpcEndpointsRequest_vpcEndpointFilters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListVpcEndpointsRequest_vpcEndpointFilters::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListVpcEndpointsRequest_vpcEndpointFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListVpcEndpointsRequest_vpcEndpointFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
