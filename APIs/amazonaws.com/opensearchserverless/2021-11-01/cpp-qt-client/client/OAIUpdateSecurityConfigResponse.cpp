/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSecurityConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSecurityConfigResponse::OAIUpdateSecurityConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSecurityConfigResponse::OAIUpdateSecurityConfigResponse() {
    this->initializeModel();
}

OAIUpdateSecurityConfigResponse::~OAIUpdateSecurityConfigResponse() {}

void OAIUpdateSecurityConfigResponse::initializeModel() {

    m_security_config_detail_isSet = false;
    m_security_config_detail_isValid = false;
}

void OAIUpdateSecurityConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSecurityConfigResponse::fromJsonObject(QJsonObject json) {

    m_security_config_detail_isValid = ::OpenAPI::fromJsonValue(m_security_config_detail, json[QString("securityConfigDetail")]);
    m_security_config_detail_isSet = !json[QString("securityConfigDetail")].isNull() && m_security_config_detail_isValid;
}

QString OAIUpdateSecurityConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSecurityConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_security_config_detail.isSet()) {
        obj.insert(QString("securityConfigDetail"), ::OpenAPI::toJsonValue(m_security_config_detail));
    }
    return obj;
}

OAIUpdateSecurityConfigResponse_securityConfigDetail OAIUpdateSecurityConfigResponse::getSecurityConfigDetail() const {
    return m_security_config_detail;
}
void OAIUpdateSecurityConfigResponse::setSecurityConfigDetail(const OAIUpdateSecurityConfigResponse_securityConfigDetail &security_config_detail) {
    m_security_config_detail = security_config_detail;
    m_security_config_detail_isSet = true;
}

bool OAIUpdateSecurityConfigResponse::is_security_config_detail_Set() const{
    return m_security_config_detail_isSet;
}

bool OAIUpdateSecurityConfigResponse::is_security_config_detail_Valid() const{
    return m_security_config_detail_isValid;
}

bool OAIUpdateSecurityConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_security_config_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSecurityConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
