/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetCollectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetCollectionResponse::OAIBatchGetCollectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetCollectionResponse::OAIBatchGetCollectionResponse() {
    this->initializeModel();
}

OAIBatchGetCollectionResponse::~OAIBatchGetCollectionResponse() {}

void OAIBatchGetCollectionResponse::initializeModel() {

    m_collection_details_isSet = false;
    m_collection_details_isValid = false;

    m_collection_error_details_isSet = false;
    m_collection_error_details_isValid = false;
}

void OAIBatchGetCollectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetCollectionResponse::fromJsonObject(QJsonObject json) {

    m_collection_details_isValid = ::OpenAPI::fromJsonValue(m_collection_details, json[QString("collectionDetails")]);
    m_collection_details_isSet = !json[QString("collectionDetails")].isNull() && m_collection_details_isValid;

    m_collection_error_details_isValid = ::OpenAPI::fromJsonValue(m_collection_error_details, json[QString("collectionErrorDetails")]);
    m_collection_error_details_isSet = !json[QString("collectionErrorDetails")].isNull() && m_collection_error_details_isValid;
}

QString OAIBatchGetCollectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetCollectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_details.isSet()) {
        obj.insert(QString("collectionDetails"), ::OpenAPI::toJsonValue(m_collection_details));
    }
    if (m_collection_error_details.isSet()) {
        obj.insert(QString("collectionErrorDetails"), ::OpenAPI::toJsonValue(m_collection_error_details));
    }
    return obj;
}

QList OAIBatchGetCollectionResponse::getCollectionDetails() const {
    return m_collection_details;
}
void OAIBatchGetCollectionResponse::setCollectionDetails(const QList &collection_details) {
    m_collection_details = collection_details;
    m_collection_details_isSet = true;
}

bool OAIBatchGetCollectionResponse::is_collection_details_Set() const{
    return m_collection_details_isSet;
}

bool OAIBatchGetCollectionResponse::is_collection_details_Valid() const{
    return m_collection_details_isValid;
}

QList OAIBatchGetCollectionResponse::getCollectionErrorDetails() const {
    return m_collection_error_details;
}
void OAIBatchGetCollectionResponse::setCollectionErrorDetails(const QList &collection_error_details) {
    m_collection_error_details = collection_error_details;
    m_collection_error_details_isSet = true;
}

bool OAIBatchGetCollectionResponse::is_collection_error_details_Set() const{
    return m_collection_error_details_isSet;
}

bool OAIBatchGetCollectionResponse::is_collection_error_details_Valid() const{
    return m_collection_error_details_isValid;
}

bool OAIBatchGetCollectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_error_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetCollectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
