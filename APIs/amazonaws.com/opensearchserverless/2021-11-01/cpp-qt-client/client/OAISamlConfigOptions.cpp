/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISamlConfigOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISamlConfigOptions::OAISamlConfigOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISamlConfigOptions::OAISamlConfigOptions() {
    this->initializeModel();
}

OAISamlConfigOptions::~OAISamlConfigOptions() {}

void OAISamlConfigOptions::initializeModel() {

    m_group_attribute_isSet = false;
    m_group_attribute_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_session_timeout_isSet = false;
    m_session_timeout_isValid = false;

    m_user_attribute_isSet = false;
    m_user_attribute_isValid = false;
}

void OAISamlConfigOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISamlConfigOptions::fromJsonObject(QJsonObject json) {

    m_group_attribute_isValid = ::OpenAPI::fromJsonValue(m_group_attribute, json[QString("groupAttribute")]);
    m_group_attribute_isSet = !json[QString("groupAttribute")].isNull() && m_group_attribute_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_session_timeout_isValid = ::OpenAPI::fromJsonValue(m_session_timeout, json[QString("sessionTimeout")]);
    m_session_timeout_isSet = !json[QString("sessionTimeout")].isNull() && m_session_timeout_isValid;

    m_user_attribute_isValid = ::OpenAPI::fromJsonValue(m_user_attribute, json[QString("userAttribute")]);
    m_user_attribute_isSet = !json[QString("userAttribute")].isNull() && m_user_attribute_isValid;
}

QString OAISamlConfigOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISamlConfigOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_group_attribute_isSet) {
        obj.insert(QString("groupAttribute"), ::OpenAPI::toJsonValue(m_group_attribute));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_session_timeout_isSet) {
        obj.insert(QString("sessionTimeout"), ::OpenAPI::toJsonValue(m_session_timeout));
    }
    if (m_user_attribute_isSet) {
        obj.insert(QString("userAttribute"), ::OpenAPI::toJsonValue(m_user_attribute));
    }
    return obj;
}

QString OAISamlConfigOptions::getGroupAttribute() const {
    return m_group_attribute;
}
void OAISamlConfigOptions::setGroupAttribute(const QString &group_attribute) {
    m_group_attribute = group_attribute;
    m_group_attribute_isSet = true;
}

bool OAISamlConfigOptions::is_group_attribute_Set() const{
    return m_group_attribute_isSet;
}

bool OAISamlConfigOptions::is_group_attribute_Valid() const{
    return m_group_attribute_isValid;
}

QString OAISamlConfigOptions::getMetadata() const {
    return m_metadata;
}
void OAISamlConfigOptions::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISamlConfigOptions::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISamlConfigOptions::is_metadata_Valid() const{
    return m_metadata_isValid;
}

qint32 OAISamlConfigOptions::getSessionTimeout() const {
    return m_session_timeout;
}
void OAISamlConfigOptions::setSessionTimeout(const qint32 &session_timeout) {
    m_session_timeout = session_timeout;
    m_session_timeout_isSet = true;
}

bool OAISamlConfigOptions::is_session_timeout_Set() const{
    return m_session_timeout_isSet;
}

bool OAISamlConfigOptions::is_session_timeout_Valid() const{
    return m_session_timeout_isValid;
}

QString OAISamlConfigOptions::getUserAttribute() const {
    return m_user_attribute;
}
void OAISamlConfigOptions::setUserAttribute(const QString &user_attribute) {
    m_user_attribute = user_attribute;
    m_user_attribute_isSet = true;
}

bool OAISamlConfigOptions::is_user_attribute_Set() const{
    return m_user_attribute_isSet;
}

bool OAISamlConfigOptions::is_user_attribute_Valid() const{
    return m_user_attribute_isValid;
}

bool OAISamlConfigOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISamlConfigOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metadata_isValid && true;
}

} // namespace OpenAPI
