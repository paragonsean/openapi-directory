/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityConfigSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityConfigSummary::OAISecurityConfigSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityConfigSummary::OAISecurityConfigSummary() {
    this->initializeModel();
}

OAISecurityConfigSummary::~OAISecurityConfigSummary() {}

void OAISecurityConfigSummary::initializeModel() {

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISecurityConfigSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityConfigSummary::fromJsonObject(QJsonObject json) {

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("configVersion")]);
    m_config_version_isSet = !json[QString("configVersion")].isNull() && m_config_version_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISecurityConfigSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityConfigSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_config_version_isSet) {
        obj.insert(QString("configVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISecurityConfigSummary::getConfigVersion() const {
    return m_config_version;
}
void OAISecurityConfigSummary::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAISecurityConfigSummary::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAISecurityConfigSummary::is_config_version_Valid() const{
    return m_config_version_isValid;
}

qint32 OAISecurityConfigSummary::getCreatedDate() const {
    return m_created_date;
}
void OAISecurityConfigSummary::setCreatedDate(const qint32 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAISecurityConfigSummary::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAISecurityConfigSummary::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAISecurityConfigSummary::getDescription() const {
    return m_description;
}
void OAISecurityConfigSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISecurityConfigSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAISecurityConfigSummary::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISecurityConfigSummary::getId() const {
    return m_id;
}
void OAISecurityConfigSummary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISecurityConfigSummary::is_id_Set() const{
    return m_id_isSet;
}

bool OAISecurityConfigSummary::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAISecurityConfigSummary::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAISecurityConfigSummary::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAISecurityConfigSummary::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAISecurityConfigSummary::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

OAISecurityConfigType OAISecurityConfigSummary::getType() const {
    return m_type;
}
void OAISecurityConfigSummary::setType(const OAISecurityConfigType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISecurityConfigSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAISecurityConfigSummary::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISecurityConfigSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityConfigSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
