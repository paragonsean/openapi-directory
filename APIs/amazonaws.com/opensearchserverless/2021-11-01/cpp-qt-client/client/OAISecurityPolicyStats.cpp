/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityPolicyStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityPolicyStats::OAISecurityPolicyStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityPolicyStats::OAISecurityPolicyStats() {
    this->initializeModel();
}

OAISecurityPolicyStats::~OAISecurityPolicyStats() {}

void OAISecurityPolicyStats::initializeModel() {

    m_encryption_policy_count_isSet = false;
    m_encryption_policy_count_isValid = false;

    m_network_policy_count_isSet = false;
    m_network_policy_count_isValid = false;
}

void OAISecurityPolicyStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityPolicyStats::fromJsonObject(QJsonObject json) {

    m_encryption_policy_count_isValid = ::OpenAPI::fromJsonValue(m_encryption_policy_count, json[QString("EncryptionPolicyCount")]);
    m_encryption_policy_count_isSet = !json[QString("EncryptionPolicyCount")].isNull() && m_encryption_policy_count_isValid;

    m_network_policy_count_isValid = ::OpenAPI::fromJsonValue(m_network_policy_count, json[QString("NetworkPolicyCount")]);
    m_network_policy_count_isSet = !json[QString("NetworkPolicyCount")].isNull() && m_network_policy_count_isValid;
}

QString OAISecurityPolicyStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityPolicyStats::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_policy_count_isSet) {
        obj.insert(QString("EncryptionPolicyCount"), ::OpenAPI::toJsonValue(m_encryption_policy_count));
    }
    if (m_network_policy_count_isSet) {
        obj.insert(QString("NetworkPolicyCount"), ::OpenAPI::toJsonValue(m_network_policy_count));
    }
    return obj;
}

qint32 OAISecurityPolicyStats::getEncryptionPolicyCount() const {
    return m_encryption_policy_count;
}
void OAISecurityPolicyStats::setEncryptionPolicyCount(const qint32 &encryption_policy_count) {
    m_encryption_policy_count = encryption_policy_count;
    m_encryption_policy_count_isSet = true;
}

bool OAISecurityPolicyStats::is_encryption_policy_count_Set() const{
    return m_encryption_policy_count_isSet;
}

bool OAISecurityPolicyStats::is_encryption_policy_count_Valid() const{
    return m_encryption_policy_count_isValid;
}

qint32 OAISecurityPolicyStats::getNetworkPolicyCount() const {
    return m_network_policy_count;
}
void OAISecurityPolicyStats::setNetworkPolicyCount(const qint32 &network_policy_count) {
    m_network_policy_count = network_policy_count;
    m_network_policy_count_isSet = true;
}

bool OAISecurityPolicyStats::is_network_policy_count_Set() const{
    return m_network_policy_count_isSet;
}

bool OAISecurityPolicyStats::is_network_policy_count_Valid() const{
    return m_network_policy_count_isValid;
}

bool OAISecurityPolicyStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityPolicyStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
