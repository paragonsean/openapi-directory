/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityPolicyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityPolicyType::OAISecurityPolicyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityPolicyType::OAISecurityPolicyType() {
    this->initializeModel();
}

OAISecurityPolicyType::~OAISecurityPolicyType() {}

void OAISecurityPolicyType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISecurityPolicyType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISecurityPolicyType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("encryption", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecurityPolicyType::ENCRYPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("network", Qt::CaseInsensitive) == 0) {
        m_value = eOAISecurityPolicyType::NETWORK;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISecurityPolicyType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISecurityPolicyType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISecurityPolicyType::ENCRYPTION:
            val = "encryption";
            break;
        case eOAISecurityPolicyType::NETWORK:
            val = "network";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISecurityPolicyType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISecurityPolicyType::eOAISecurityPolicyType OAISecurityPolicyType::getValue() const {
    return m_value;
}

void OAISecurityPolicyType::setValue(const OAISecurityPolicyType::eOAISecurityPolicyType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISecurityPolicyType::isSet() const {
    
    return m_value_isSet;
}

bool OAISecurityPolicyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
