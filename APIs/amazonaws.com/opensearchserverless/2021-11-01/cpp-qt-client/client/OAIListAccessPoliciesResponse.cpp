/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAccessPoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAccessPoliciesResponse::OAIListAccessPoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAccessPoliciesResponse::OAIListAccessPoliciesResponse() {
    this->initializeModel();
}

OAIListAccessPoliciesResponse::~OAIListAccessPoliciesResponse() {}

void OAIListAccessPoliciesResponse::initializeModel() {

    m_access_policy_summaries_isSet = false;
    m_access_policy_summaries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAccessPoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAccessPoliciesResponse::fromJsonObject(QJsonObject json) {

    m_access_policy_summaries_isValid = ::OpenAPI::fromJsonValue(m_access_policy_summaries, json[QString("accessPolicySummaries")]);
    m_access_policy_summaries_isSet = !json[QString("accessPolicySummaries")].isNull() && m_access_policy_summaries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAccessPoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAccessPoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policy_summaries.isSet()) {
        obj.insert(QString("accessPolicySummaries"), ::OpenAPI::toJsonValue(m_access_policy_summaries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAccessPoliciesResponse::getAccessPolicySummaries() const {
    return m_access_policy_summaries;
}
void OAIListAccessPoliciesResponse::setAccessPolicySummaries(const QList &access_policy_summaries) {
    m_access_policy_summaries = access_policy_summaries;
    m_access_policy_summaries_isSet = true;
}

bool OAIListAccessPoliciesResponse::is_access_policy_summaries_Set() const{
    return m_access_policy_summaries_isSet;
}

bool OAIListAccessPoliciesResponse::is_access_policy_summaries_Valid() const{
    return m_access_policy_summaries_isValid;
}

QString OAIListAccessPoliciesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAccessPoliciesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAccessPoliciesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAccessPoliciesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAccessPoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policy_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAccessPoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
