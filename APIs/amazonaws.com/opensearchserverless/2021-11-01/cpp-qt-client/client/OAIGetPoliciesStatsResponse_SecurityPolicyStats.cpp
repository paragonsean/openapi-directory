/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPoliciesStatsResponse_SecurityPolicyStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPoliciesStatsResponse_SecurityPolicyStats::OAIGetPoliciesStatsResponse_SecurityPolicyStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPoliciesStatsResponse_SecurityPolicyStats::OAIGetPoliciesStatsResponse_SecurityPolicyStats() {
    this->initializeModel();
}

OAIGetPoliciesStatsResponse_SecurityPolicyStats::~OAIGetPoliciesStatsResponse_SecurityPolicyStats() {}

void OAIGetPoliciesStatsResponse_SecurityPolicyStats::initializeModel() {

    m_encryption_policy_count_isSet = false;
    m_encryption_policy_count_isValid = false;

    m_network_policy_count_isSet = false;
    m_network_policy_count_isValid = false;
}

void OAIGetPoliciesStatsResponse_SecurityPolicyStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPoliciesStatsResponse_SecurityPolicyStats::fromJsonObject(QJsonObject json) {

    m_encryption_policy_count_isValid = ::OpenAPI::fromJsonValue(m_encryption_policy_count, json[QString("EncryptionPolicyCount")]);
    m_encryption_policy_count_isSet = !json[QString("EncryptionPolicyCount")].isNull() && m_encryption_policy_count_isValid;

    m_network_policy_count_isValid = ::OpenAPI::fromJsonValue(m_network_policy_count, json[QString("NetworkPolicyCount")]);
    m_network_policy_count_isSet = !json[QString("NetworkPolicyCount")].isNull() && m_network_policy_count_isValid;
}

QString OAIGetPoliciesStatsResponse_SecurityPolicyStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPoliciesStatsResponse_SecurityPolicyStats::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_policy_count_isSet) {
        obj.insert(QString("EncryptionPolicyCount"), ::OpenAPI::toJsonValue(m_encryption_policy_count));
    }
    if (m_network_policy_count_isSet) {
        obj.insert(QString("NetworkPolicyCount"), ::OpenAPI::toJsonValue(m_network_policy_count));
    }
    return obj;
}

qint32 OAIGetPoliciesStatsResponse_SecurityPolicyStats::getEncryptionPolicyCount() const {
    return m_encryption_policy_count;
}
void OAIGetPoliciesStatsResponse_SecurityPolicyStats::setEncryptionPolicyCount(const qint32 &encryption_policy_count) {
    m_encryption_policy_count = encryption_policy_count;
    m_encryption_policy_count_isSet = true;
}

bool OAIGetPoliciesStatsResponse_SecurityPolicyStats::is_encryption_policy_count_Set() const{
    return m_encryption_policy_count_isSet;
}

bool OAIGetPoliciesStatsResponse_SecurityPolicyStats::is_encryption_policy_count_Valid() const{
    return m_encryption_policy_count_isValid;
}

qint32 OAIGetPoliciesStatsResponse_SecurityPolicyStats::getNetworkPolicyCount() const {
    return m_network_policy_count;
}
void OAIGetPoliciesStatsResponse_SecurityPolicyStats::setNetworkPolicyCount(const qint32 &network_policy_count) {
    m_network_policy_count = network_policy_count;
    m_network_policy_count_isSet = true;
}

bool OAIGetPoliciesStatsResponse_SecurityPolicyStats::is_network_policy_count_Set() const{
    return m_network_policy_count_isSet;
}

bool OAIGetPoliciesStatsResponse_SecurityPolicyStats::is_network_policy_count_Valid() const{
    return m_network_policy_count_isValid;
}

bool OAIGetPoliciesStatsResponse_SecurityPolicyStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPoliciesStatsResponse_SecurityPolicyStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
