/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSecurityPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSecurityPolicyRequest::OAICreateSecurityPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSecurityPolicyRequest::OAICreateSecurityPolicyRequest() {
    this->initializeModel();
}

OAICreateSecurityPolicyRequest::~OAICreateSecurityPolicyRequest() {}

void OAICreateSecurityPolicyRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateSecurityPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSecurityPolicyRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICreateSecurityPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSecurityPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy_isSet) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateSecurityPolicyRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateSecurityPolicyRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateSecurityPolicyRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateSecurityPolicyRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateSecurityPolicyRequest::getDescription() const {
    return m_description;
}
void OAICreateSecurityPolicyRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSecurityPolicyRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSecurityPolicyRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSecurityPolicyRequest::getName() const {
    return m_name;
}
void OAICreateSecurityPolicyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSecurityPolicyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSecurityPolicyRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSecurityPolicyRequest::getPolicy() const {
    return m_policy;
}
void OAICreateSecurityPolicyRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAICreateSecurityPolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAICreateSecurityPolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

OAISecurityPolicyType OAICreateSecurityPolicyRequest::getType() const {
    return m_type;
}
void OAICreateSecurityPolicyRequest::setType(const OAISecurityPolicyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateSecurityPolicyRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateSecurityPolicyRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateSecurityPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSecurityPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_policy_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
