/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICapacityLimits.h
 *
 * The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-scaling.html\&quot;&gt;Managing capacity limits for Amazon OpenSearch Serverless&lt;/a&gt;.
 */

#ifndef OAICapacityLimits_H
#define OAICapacityLimits_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICapacityLimits : public OAIObject {
public:
    OAICapacityLimits();
    OAICapacityLimits(QString json);
    ~OAICapacityLimits() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getMaxIndexingCapacityInOcu() const;
    void setMaxIndexingCapacityInOcu(const qint32 &max_indexing_capacity_in_ocu);
    bool is_max_indexing_capacity_in_ocu_Set() const;
    bool is_max_indexing_capacity_in_ocu_Valid() const;

    qint32 getMaxSearchCapacityInOcu() const;
    void setMaxSearchCapacityInOcu(const qint32 &max_search_capacity_in_ocu);
    bool is_max_search_capacity_in_ocu_Set() const;
    bool is_max_search_capacity_in_ocu_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_max_indexing_capacity_in_ocu;
    bool m_max_indexing_capacity_in_ocu_isSet;
    bool m_max_indexing_capacity_in_ocu_isValid;

    qint32 m_max_search_capacity_in_ocu;
    bool m_max_search_capacity_in_ocu_isSet;
    bool m_max_search_capacity_in_ocu_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICapacityLimits)

#endif // OAICapacityLimits_H
