/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVpcEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVpcEndpointRequest::OAICreateVpcEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVpcEndpointRequest::OAICreateVpcEndpointRequest() {
    this->initializeModel();
}

OAICreateVpcEndpointRequest::~OAICreateVpcEndpointRequest() {}

void OAICreateVpcEndpointRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;

    m_vpc_id_isSet = false;
    m_vpc_id_isValid = false;
}

void OAICreateVpcEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVpcEndpointRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;

    m_vpc_id_isValid = ::OpenAPI::fromJsonValue(m_vpc_id, json[QString("vpcId")]);
    m_vpc_id_isSet = !json[QString("vpcId")].isNull() && m_vpc_id_isValid;
}

QString OAICreateVpcEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVpcEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    if (m_vpc_id_isSet) {
        obj.insert(QString("vpcId"), ::OpenAPI::toJsonValue(m_vpc_id));
    }
    return obj;
}

QString OAICreateVpcEndpointRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateVpcEndpointRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateVpcEndpointRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateVpcEndpointRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateVpcEndpointRequest::getName() const {
    return m_name;
}
void OAICreateVpcEndpointRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateVpcEndpointRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateVpcEndpointRequest::is_name_Valid() const{
    return m_name_isValid;
}

QList OAICreateVpcEndpointRequest::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAICreateVpcEndpointRequest::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAICreateVpcEndpointRequest::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAICreateVpcEndpointRequest::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

QList OAICreateVpcEndpointRequest::getSubnetIds() const {
    return m_subnet_ids;
}
void OAICreateVpcEndpointRequest::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAICreateVpcEndpointRequest::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAICreateVpcEndpointRequest::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

QString OAICreateVpcEndpointRequest::getVpcId() const {
    return m_vpc_id;
}
void OAICreateVpcEndpointRequest::setVpcId(const QString &vpc_id) {
    m_vpc_id = vpc_id;
    m_vpc_id_isSet = true;
}

bool OAICreateVpcEndpointRequest::is_vpc_id_Set() const{
    return m_vpc_id_isSet;
}

bool OAICreateVpcEndpointRequest::is_vpc_id_Valid() const{
    return m_vpc_id_isValid;
}

bool OAICreateVpcEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVpcEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_subnet_ids_isValid && m_vpc_id_isValid && true;
}

} // namespace OpenAPI
