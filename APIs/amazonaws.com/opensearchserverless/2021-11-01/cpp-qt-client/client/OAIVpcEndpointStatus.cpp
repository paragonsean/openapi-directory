/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcEndpointStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcEndpointStatus::OAIVpcEndpointStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcEndpointStatus::OAIVpcEndpointStatus() {
    this->initializeModel();
}

OAIVpcEndpointStatus::~OAIVpcEndpointStatus() {}

void OAIVpcEndpointStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIVpcEndpointStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIVpcEndpointStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcEndpointStatus::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DELETING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcEndpointStatus::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ACTIVE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcEndpointStatus::ACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIVpcEndpointStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIVpcEndpointStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIVpcEndpointStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIVpcEndpointStatus::PENDING:
            val = "PENDING";
            break;
        case eOAIVpcEndpointStatus::DELETING:
            val = "DELETING";
            break;
        case eOAIVpcEndpointStatus::ACTIVE:
            val = "ACTIVE";
            break;
        case eOAIVpcEndpointStatus::FAILED:
            val = "FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIVpcEndpointStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIVpcEndpointStatus::eOAIVpcEndpointStatus OAIVpcEndpointStatus::getValue() const {
    return m_value;
}

void OAIVpcEndpointStatus::setValue(const OAIVpcEndpointStatus::eOAIVpcEndpointStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIVpcEndpointStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIVpcEndpointStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
