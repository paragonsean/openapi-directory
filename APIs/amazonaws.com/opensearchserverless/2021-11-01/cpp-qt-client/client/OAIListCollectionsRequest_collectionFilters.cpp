/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCollectionsRequest_collectionFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCollectionsRequest_collectionFilters::OAIListCollectionsRequest_collectionFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCollectionsRequest_collectionFilters::OAIListCollectionsRequest_collectionFilters() {
    this->initializeModel();
}

OAIListCollectionsRequest_collectionFilters::~OAIListCollectionsRequest_collectionFilters() {}

void OAIListCollectionsRequest_collectionFilters::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIListCollectionsRequest_collectionFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCollectionsRequest_collectionFilters::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIListCollectionsRequest_collectionFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCollectionsRequest_collectionFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIListCollectionsRequest_collectionFilters::getName() const {
    return m_name;
}
void OAIListCollectionsRequest_collectionFilters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListCollectionsRequest_collectionFilters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListCollectionsRequest_collectionFilters::is_name_Valid() const{
    return m_name_isValid;
}

OAICollectionStatus OAIListCollectionsRequest_collectionFilters::getStatus() const {
    return m_status;
}
void OAIListCollectionsRequest_collectionFilters::setStatus(const OAICollectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIListCollectionsRequest_collectionFilters::is_status_Set() const{
    return m_status_isSet;
}

bool OAIListCollectionsRequest_collectionFilters::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIListCollectionsRequest_collectionFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCollectionsRequest_collectionFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
