/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAccessPolicyResponse_accessPolicyDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAccessPolicyResponse_accessPolicyDetail::OAIGetAccessPolicyResponse_accessPolicyDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAccessPolicyResponse_accessPolicyDetail::OAIGetAccessPolicyResponse_accessPolicyDetail() {
    this->initializeModel();
}

OAIGetAccessPolicyResponse_accessPolicyDetail::~OAIGetAccessPolicyResponse_accessPolicyDetail() {}

void OAIGetAccessPolicyResponse_accessPolicyDetail::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_policy_version_isSet = false;
    m_policy_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetAccessPolicyResponse_accessPolicyDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAccessPolicyResponse_accessPolicyDetail::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_policy_version_isValid = ::OpenAPI::fromJsonValue(m_policy_version, json[QString("policyVersion")]);
    m_policy_version_isSet = !json[QString("policyVersion")].isNull() && m_policy_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGetAccessPolicyResponse_accessPolicyDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAccessPolicyResponse_accessPolicyDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_policy_version_isSet) {
        obj.insert(QString("policyVersion"), ::OpenAPI::toJsonValue(m_policy_version));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIGetAccessPolicyResponse_accessPolicyDetail::getCreatedDate() const {
    return m_created_date;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setCreatedDate(const qint32 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIGetAccessPolicyResponse_accessPolicyDetail::getDescription() const {
    return m_description;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIGetAccessPolicyResponse_accessPolicyDetail::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIGetAccessPolicyResponse_accessPolicyDetail::getName() const {
    return m_name;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIGetAccessPolicyResponse_accessPolicyDetail::getPolicy() const {
    return m_policy;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setPolicy(const OAIObject &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAIGetAccessPolicyResponse_accessPolicyDetail::getPolicyVersion() const {
    return m_policy_version;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setPolicyVersion(const QString &policy_version) {
    m_policy_version = policy_version;
    m_policy_version_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_policy_version_Set() const{
    return m_policy_version_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_policy_version_Valid() const{
    return m_policy_version_isValid;
}

OAIAccessPolicyType OAIGetAccessPolicyResponse_accessPolicyDetail::getType() const {
    return m_type;
}
void OAIGetAccessPolicyResponse_accessPolicyDetail::setType(const OAIAccessPolicyType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAccessPolicyResponse_accessPolicyDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
