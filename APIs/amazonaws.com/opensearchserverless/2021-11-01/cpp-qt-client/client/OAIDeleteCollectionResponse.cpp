/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteCollectionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteCollectionResponse::OAIDeleteCollectionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteCollectionResponse::OAIDeleteCollectionResponse() {
    this->initializeModel();
}

OAIDeleteCollectionResponse::~OAIDeleteCollectionResponse() {}

void OAIDeleteCollectionResponse::initializeModel() {

    m_delete_collection_detail_isSet = false;
    m_delete_collection_detail_isValid = false;
}

void OAIDeleteCollectionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteCollectionResponse::fromJsonObject(QJsonObject json) {

    m_delete_collection_detail_isValid = ::OpenAPI::fromJsonValue(m_delete_collection_detail, json[QString("deleteCollectionDetail")]);
    m_delete_collection_detail_isSet = !json[QString("deleteCollectionDetail")].isNull() && m_delete_collection_detail_isValid;
}

QString OAIDeleteCollectionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteCollectionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_collection_detail.isSet()) {
        obj.insert(QString("deleteCollectionDetail"), ::OpenAPI::toJsonValue(m_delete_collection_detail));
    }
    return obj;
}

OAIDeleteCollectionResponse_deleteCollectionDetail OAIDeleteCollectionResponse::getDeleteCollectionDetail() const {
    return m_delete_collection_detail;
}
void OAIDeleteCollectionResponse::setDeleteCollectionDetail(const OAIDeleteCollectionResponse_deleteCollectionDetail &delete_collection_detail) {
    m_delete_collection_detail = delete_collection_detail;
    m_delete_collection_detail_isSet = true;
}

bool OAIDeleteCollectionResponse::is_delete_collection_detail_Set() const{
    return m_delete_collection_detail_isSet;
}

bool OAIDeleteCollectionResponse::is_delete_collection_detail_Valid() const{
    return m_delete_collection_detail_isValid;
}

bool OAIDeleteCollectionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_collection_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteCollectionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
