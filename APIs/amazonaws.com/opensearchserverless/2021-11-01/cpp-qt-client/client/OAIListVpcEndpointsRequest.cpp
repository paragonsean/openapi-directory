/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListVpcEndpointsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListVpcEndpointsRequest::OAIListVpcEndpointsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListVpcEndpointsRequest::OAIListVpcEndpointsRequest() {
    this->initializeModel();
}

OAIListVpcEndpointsRequest::~OAIListVpcEndpointsRequest() {}

void OAIListVpcEndpointsRequest::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_vpc_endpoint_filters_isSet = false;
    m_vpc_endpoint_filters_isValid = false;
}

void OAIListVpcEndpointsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListVpcEndpointsRequest::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_vpc_endpoint_filters_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_filters, json[QString("vpcEndpointFilters")]);
    m_vpc_endpoint_filters_isSet = !json[QString("vpcEndpointFilters")].isNull() && m_vpc_endpoint_filters_isValid;
}

QString OAIListVpcEndpointsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListVpcEndpointsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_vpc_endpoint_filters.isSet()) {
        obj.insert(QString("vpcEndpointFilters"), ::OpenAPI::toJsonValue(m_vpc_endpoint_filters));
    }
    return obj;
}

qint32 OAIListVpcEndpointsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListVpcEndpointsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListVpcEndpointsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListVpcEndpointsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListVpcEndpointsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListVpcEndpointsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListVpcEndpointsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListVpcEndpointsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIListVpcEndpointsRequest_vpcEndpointFilters OAIListVpcEndpointsRequest::getVpcEndpointFilters() const {
    return m_vpc_endpoint_filters;
}
void OAIListVpcEndpointsRequest::setVpcEndpointFilters(const OAIListVpcEndpointsRequest_vpcEndpointFilters &vpc_endpoint_filters) {
    m_vpc_endpoint_filters = vpc_endpoint_filters;
    m_vpc_endpoint_filters_isSet = true;
}

bool OAIListVpcEndpointsRequest::is_vpc_endpoint_filters_Set() const{
    return m_vpc_endpoint_filters_isSet;
}

bool OAIListVpcEndpointsRequest::is_vpc_endpoint_filters_Valid() const{
    return m_vpc_endpoint_filters_isValid;
}

bool OAIListVpcEndpointsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListVpcEndpointsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
