/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVpcEndpointErrorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVpcEndpointErrorDetail::OAIVpcEndpointErrorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVpcEndpointErrorDetail::OAIVpcEndpointErrorDetail() {
    this->initializeModel();
}

OAIVpcEndpointErrorDetail::~OAIVpcEndpointErrorDetail() {}

void OAIVpcEndpointErrorDetail::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIVpcEndpointErrorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVpcEndpointErrorDetail::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIVpcEndpointErrorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVpcEndpointErrorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIVpcEndpointErrorDetail::getErrorCode() const {
    return m_error_code;
}
void OAIVpcEndpointErrorDetail::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIVpcEndpointErrorDetail::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIVpcEndpointErrorDetail::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIVpcEndpointErrorDetail::getErrorMessage() const {
    return m_error_message;
}
void OAIVpcEndpointErrorDetail::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIVpcEndpointErrorDetail::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIVpcEndpointErrorDetail::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIVpcEndpointErrorDetail::getId() const {
    return m_id;
}
void OAIVpcEndpointErrorDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVpcEndpointErrorDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVpcEndpointErrorDetail::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIVpcEndpointErrorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVpcEndpointErrorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
