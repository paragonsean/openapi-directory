/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPoliciesStatsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPoliciesStatsResponse::OAIGetPoliciesStatsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPoliciesStatsResponse::OAIGetPoliciesStatsResponse() {
    this->initializeModel();
}

OAIGetPoliciesStatsResponse::~OAIGetPoliciesStatsResponse() {}

void OAIGetPoliciesStatsResponse::initializeModel() {

    m_access_policy_stats_isSet = false;
    m_access_policy_stats_isValid = false;

    m_security_config_stats_isSet = false;
    m_security_config_stats_isValid = false;

    m_security_policy_stats_isSet = false;
    m_security_policy_stats_isValid = false;

    m_total_policy_count_isSet = false;
    m_total_policy_count_isValid = false;
}

void OAIGetPoliciesStatsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPoliciesStatsResponse::fromJsonObject(QJsonObject json) {

    m_access_policy_stats_isValid = ::OpenAPI::fromJsonValue(m_access_policy_stats, json[QString("AccessPolicyStats")]);
    m_access_policy_stats_isSet = !json[QString("AccessPolicyStats")].isNull() && m_access_policy_stats_isValid;

    m_security_config_stats_isValid = ::OpenAPI::fromJsonValue(m_security_config_stats, json[QString("SecurityConfigStats")]);
    m_security_config_stats_isSet = !json[QString("SecurityConfigStats")].isNull() && m_security_config_stats_isValid;

    m_security_policy_stats_isValid = ::OpenAPI::fromJsonValue(m_security_policy_stats, json[QString("SecurityPolicyStats")]);
    m_security_policy_stats_isSet = !json[QString("SecurityPolicyStats")].isNull() && m_security_policy_stats_isValid;

    m_total_policy_count_isValid = ::OpenAPI::fromJsonValue(m_total_policy_count, json[QString("TotalPolicyCount")]);
    m_total_policy_count_isSet = !json[QString("TotalPolicyCount")].isNull() && m_total_policy_count_isValid;
}

QString OAIGetPoliciesStatsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPoliciesStatsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policy_stats.isSet()) {
        obj.insert(QString("AccessPolicyStats"), ::OpenAPI::toJsonValue(m_access_policy_stats));
    }
    if (m_security_config_stats.isSet()) {
        obj.insert(QString("SecurityConfigStats"), ::OpenAPI::toJsonValue(m_security_config_stats));
    }
    if (m_security_policy_stats.isSet()) {
        obj.insert(QString("SecurityPolicyStats"), ::OpenAPI::toJsonValue(m_security_policy_stats));
    }
    if (m_total_policy_count_isSet) {
        obj.insert(QString("TotalPolicyCount"), ::OpenAPI::toJsonValue(m_total_policy_count));
    }
    return obj;
}

OAIGetPoliciesStatsResponse_AccessPolicyStats OAIGetPoliciesStatsResponse::getAccessPolicyStats() const {
    return m_access_policy_stats;
}
void OAIGetPoliciesStatsResponse::setAccessPolicyStats(const OAIGetPoliciesStatsResponse_AccessPolicyStats &access_policy_stats) {
    m_access_policy_stats = access_policy_stats;
    m_access_policy_stats_isSet = true;
}

bool OAIGetPoliciesStatsResponse::is_access_policy_stats_Set() const{
    return m_access_policy_stats_isSet;
}

bool OAIGetPoliciesStatsResponse::is_access_policy_stats_Valid() const{
    return m_access_policy_stats_isValid;
}

OAIGetPoliciesStatsResponse_SecurityConfigStats OAIGetPoliciesStatsResponse::getSecurityConfigStats() const {
    return m_security_config_stats;
}
void OAIGetPoliciesStatsResponse::setSecurityConfigStats(const OAIGetPoliciesStatsResponse_SecurityConfigStats &security_config_stats) {
    m_security_config_stats = security_config_stats;
    m_security_config_stats_isSet = true;
}

bool OAIGetPoliciesStatsResponse::is_security_config_stats_Set() const{
    return m_security_config_stats_isSet;
}

bool OAIGetPoliciesStatsResponse::is_security_config_stats_Valid() const{
    return m_security_config_stats_isValid;
}

OAIGetPoliciesStatsResponse_SecurityPolicyStats OAIGetPoliciesStatsResponse::getSecurityPolicyStats() const {
    return m_security_policy_stats;
}
void OAIGetPoliciesStatsResponse::setSecurityPolicyStats(const OAIGetPoliciesStatsResponse_SecurityPolicyStats &security_policy_stats) {
    m_security_policy_stats = security_policy_stats;
    m_security_policy_stats_isSet = true;
}

bool OAIGetPoliciesStatsResponse::is_security_policy_stats_Set() const{
    return m_security_policy_stats_isSet;
}

bool OAIGetPoliciesStatsResponse::is_security_policy_stats_Valid() const{
    return m_security_policy_stats_isValid;
}

qint32 OAIGetPoliciesStatsResponse::getTotalPolicyCount() const {
    return m_total_policy_count;
}
void OAIGetPoliciesStatsResponse::setTotalPolicyCount(const qint32 &total_policy_count) {
    m_total_policy_count = total_policy_count;
    m_total_policy_count_isSet = true;
}

bool OAIGetPoliciesStatsResponse::is_total_policy_count_Set() const{
    return m_total_policy_count_isSet;
}

bool OAIGetPoliciesStatsResponse::is_total_policy_count_Valid() const{
    return m_total_policy_count_isValid;
}

bool OAIGetPoliciesStatsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policy_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_config_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPoliciesStatsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
