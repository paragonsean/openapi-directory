/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVpcEndpointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVpcEndpointRequest::OAIUpdateVpcEndpointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVpcEndpointRequest::OAIUpdateVpcEndpointRequest() {
    this->initializeModel();
}

OAIUpdateVpcEndpointRequest::~OAIUpdateVpcEndpointRequest() {}

void OAIUpdateVpcEndpointRequest::initializeModel() {

    m_add_security_group_ids_isSet = false;
    m_add_security_group_ids_isValid = false;

    m_add_subnet_ids_isSet = false;
    m_add_subnet_ids_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_remove_security_group_ids_isSet = false;
    m_remove_security_group_ids_isValid = false;

    m_remove_subnet_ids_isSet = false;
    m_remove_subnet_ids_isValid = false;
}

void OAIUpdateVpcEndpointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVpcEndpointRequest::fromJsonObject(QJsonObject json) {

    m_add_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_add_security_group_ids, json[QString("addSecurityGroupIds")]);
    m_add_security_group_ids_isSet = !json[QString("addSecurityGroupIds")].isNull() && m_add_security_group_ids_isValid;

    m_add_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_add_subnet_ids, json[QString("addSubnetIds")]);
    m_add_subnet_ids_isSet = !json[QString("addSubnetIds")].isNull() && m_add_subnet_ids_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_remove_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_remove_security_group_ids, json[QString("removeSecurityGroupIds")]);
    m_remove_security_group_ids_isSet = !json[QString("removeSecurityGroupIds")].isNull() && m_remove_security_group_ids_isValid;

    m_remove_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_remove_subnet_ids, json[QString("removeSubnetIds")]);
    m_remove_subnet_ids_isSet = !json[QString("removeSubnetIds")].isNull() && m_remove_subnet_ids_isValid;
}

QString OAIUpdateVpcEndpointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVpcEndpointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add_security_group_ids.isSet()) {
        obj.insert(QString("addSecurityGroupIds"), ::OpenAPI::toJsonValue(m_add_security_group_ids));
    }
    if (m_add_subnet_ids.isSet()) {
        obj.insert(QString("addSubnetIds"), ::OpenAPI::toJsonValue(m_add_subnet_ids));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_remove_security_group_ids.isSet()) {
        obj.insert(QString("removeSecurityGroupIds"), ::OpenAPI::toJsonValue(m_remove_security_group_ids));
    }
    if (m_remove_subnet_ids.isSet()) {
        obj.insert(QString("removeSubnetIds"), ::OpenAPI::toJsonValue(m_remove_subnet_ids));
    }
    return obj;
}

QList OAIUpdateVpcEndpointRequest::getAddSecurityGroupIds() const {
    return m_add_security_group_ids;
}
void OAIUpdateVpcEndpointRequest::setAddSecurityGroupIds(const QList &add_security_group_ids) {
    m_add_security_group_ids = add_security_group_ids;
    m_add_security_group_ids_isSet = true;
}

bool OAIUpdateVpcEndpointRequest::is_add_security_group_ids_Set() const{
    return m_add_security_group_ids_isSet;
}

bool OAIUpdateVpcEndpointRequest::is_add_security_group_ids_Valid() const{
    return m_add_security_group_ids_isValid;
}

QList OAIUpdateVpcEndpointRequest::getAddSubnetIds() const {
    return m_add_subnet_ids;
}
void OAIUpdateVpcEndpointRequest::setAddSubnetIds(const QList &add_subnet_ids) {
    m_add_subnet_ids = add_subnet_ids;
    m_add_subnet_ids_isSet = true;
}

bool OAIUpdateVpcEndpointRequest::is_add_subnet_ids_Set() const{
    return m_add_subnet_ids_isSet;
}

bool OAIUpdateVpcEndpointRequest::is_add_subnet_ids_Valid() const{
    return m_add_subnet_ids_isValid;
}

QString OAIUpdateVpcEndpointRequest::getClientToken() const {
    return m_client_token;
}
void OAIUpdateVpcEndpointRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateVpcEndpointRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateVpcEndpointRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateVpcEndpointRequest::getId() const {
    return m_id;
}
void OAIUpdateVpcEndpointRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateVpcEndpointRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateVpcEndpointRequest::is_id_Valid() const{
    return m_id_isValid;
}

QList OAIUpdateVpcEndpointRequest::getRemoveSecurityGroupIds() const {
    return m_remove_security_group_ids;
}
void OAIUpdateVpcEndpointRequest::setRemoveSecurityGroupIds(const QList &remove_security_group_ids) {
    m_remove_security_group_ids = remove_security_group_ids;
    m_remove_security_group_ids_isSet = true;
}

bool OAIUpdateVpcEndpointRequest::is_remove_security_group_ids_Set() const{
    return m_remove_security_group_ids_isSet;
}

bool OAIUpdateVpcEndpointRequest::is_remove_security_group_ids_Valid() const{
    return m_remove_security_group_ids_isValid;
}

QList OAIUpdateVpcEndpointRequest::getRemoveSubnetIds() const {
    return m_remove_subnet_ids;
}
void OAIUpdateVpcEndpointRequest::setRemoveSubnetIds(const QList &remove_subnet_ids) {
    m_remove_subnet_ids = remove_subnet_ids;
    m_remove_subnet_ids_isSet = true;
}

bool OAIUpdateVpcEndpointRequest::is_remove_subnet_ids_Set() const{
    return m_remove_subnet_ids_isSet;
}

bool OAIUpdateVpcEndpointRequest::is_remove_subnet_ids_Valid() const{
    return m_remove_subnet_ids_isValid;
}

bool OAIUpdateVpcEndpointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVpcEndpointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
