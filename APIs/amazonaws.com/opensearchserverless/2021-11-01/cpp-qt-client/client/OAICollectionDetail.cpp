/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionDetail::OAICollectionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionDetail::OAICollectionDetail() {
    this->initializeModel();
}

OAICollectionDetail::~OAICollectionDetail() {}

void OAICollectionDetail::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_collection_endpoint_isSet = false;
    m_collection_endpoint_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_dashboard_endpoint_isSet = false;
    m_dashboard_endpoint_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICollectionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionDetail::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_collection_endpoint_isValid = ::OpenAPI::fromJsonValue(m_collection_endpoint, json[QString("collectionEndpoint")]);
    m_collection_endpoint_isSet = !json[QString("collectionEndpoint")].isNull() && m_collection_endpoint_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_dashboard_endpoint_isValid = ::OpenAPI::fromJsonValue(m_dashboard_endpoint, json[QString("dashboardEndpoint")]);
    m_dashboard_endpoint_isSet = !json[QString("dashboardEndpoint")].isNull() && m_dashboard_endpoint_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("kmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("kmsKeyArn")].isNull() && m_kms_key_arn_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICollectionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_collection_endpoint_isSet) {
        obj.insert(QString("collectionEndpoint"), ::OpenAPI::toJsonValue(m_collection_endpoint));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_dashboard_endpoint_isSet) {
        obj.insert(QString("dashboardEndpoint"), ::OpenAPI::toJsonValue(m_dashboard_endpoint));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("kmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICollectionDetail::getArn() const {
    return m_arn;
}
void OAICollectionDetail::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICollectionDetail::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICollectionDetail::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICollectionDetail::getCollectionEndpoint() const {
    return m_collection_endpoint;
}
void OAICollectionDetail::setCollectionEndpoint(const QString &collection_endpoint) {
    m_collection_endpoint = collection_endpoint;
    m_collection_endpoint_isSet = true;
}

bool OAICollectionDetail::is_collection_endpoint_Set() const{
    return m_collection_endpoint_isSet;
}

bool OAICollectionDetail::is_collection_endpoint_Valid() const{
    return m_collection_endpoint_isValid;
}

qint32 OAICollectionDetail::getCreatedDate() const {
    return m_created_date;
}
void OAICollectionDetail::setCreatedDate(const qint32 &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICollectionDetail::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICollectionDetail::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAICollectionDetail::getDashboardEndpoint() const {
    return m_dashboard_endpoint;
}
void OAICollectionDetail::setDashboardEndpoint(const QString &dashboard_endpoint) {
    m_dashboard_endpoint = dashboard_endpoint;
    m_dashboard_endpoint_isSet = true;
}

bool OAICollectionDetail::is_dashboard_endpoint_Set() const{
    return m_dashboard_endpoint_isSet;
}

bool OAICollectionDetail::is_dashboard_endpoint_Valid() const{
    return m_dashboard_endpoint_isValid;
}

QString OAICollectionDetail::getDescription() const {
    return m_description;
}
void OAICollectionDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICollectionDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAICollectionDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICollectionDetail::getId() const {
    return m_id;
}
void OAICollectionDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollectionDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollectionDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollectionDetail::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAICollectionDetail::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAICollectionDetail::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAICollectionDetail::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

qint32 OAICollectionDetail::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAICollectionDetail::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAICollectionDetail::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAICollectionDetail::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAICollectionDetail::getName() const {
    return m_name;
}
void OAICollectionDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICollectionDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAICollectionDetail::is_name_Valid() const{
    return m_name_isValid;
}

OAICollectionStatus OAICollectionDetail::getStatus() const {
    return m_status;
}
void OAICollectionDetail::setStatus(const OAICollectionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICollectionDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAICollectionDetail::is_status_Valid() const{
    return m_status_isValid;
}

OAICollectionType OAICollectionDetail::getType() const {
    return m_type;
}
void OAICollectionDetail::setType(const OAICollectionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICollectionDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAICollectionDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICollectionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
