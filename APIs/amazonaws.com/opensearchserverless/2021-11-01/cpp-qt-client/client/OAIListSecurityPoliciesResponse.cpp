/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListSecurityPoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListSecurityPoliciesResponse::OAIListSecurityPoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListSecurityPoliciesResponse::OAIListSecurityPoliciesResponse() {
    this->initializeModel();
}

OAIListSecurityPoliciesResponse::~OAIListSecurityPoliciesResponse() {}

void OAIListSecurityPoliciesResponse::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_security_policy_summaries_isSet = false;
    m_security_policy_summaries_isValid = false;
}

void OAIListSecurityPoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListSecurityPoliciesResponse::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_security_policy_summaries_isValid = ::OpenAPI::fromJsonValue(m_security_policy_summaries, json[QString("securityPolicySummaries")]);
    m_security_policy_summaries_isSet = !json[QString("securityPolicySummaries")].isNull() && m_security_policy_summaries_isValid;
}

QString OAIListSecurityPoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListSecurityPoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_security_policy_summaries.isSet()) {
        obj.insert(QString("securityPolicySummaries"), ::OpenAPI::toJsonValue(m_security_policy_summaries));
    }
    return obj;
}

QString OAIListSecurityPoliciesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListSecurityPoliciesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListSecurityPoliciesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListSecurityPoliciesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

QList OAIListSecurityPoliciesResponse::getSecurityPolicySummaries() const {
    return m_security_policy_summaries;
}
void OAIListSecurityPoliciesResponse::setSecurityPolicySummaries(const QList &security_policy_summaries) {
    m_security_policy_summaries = security_policy_summaries;
    m_security_policy_summaries_isSet = true;
}

bool OAIListSecurityPoliciesResponse::is_security_policy_summaries_Set() const{
    return m_security_policy_summaries_isSet;
}

bool OAIListSecurityPoliciesResponse::is_security_policy_summaries_Valid() const{
    return m_security_policy_summaries_isValid;
}

bool OAIListSecurityPoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy_summaries.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListSecurityPoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
