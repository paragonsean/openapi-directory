/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetPoliciesStatsResponse_AccessPolicyStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetPoliciesStatsResponse_AccessPolicyStats::OAIGetPoliciesStatsResponse_AccessPolicyStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetPoliciesStatsResponse_AccessPolicyStats::OAIGetPoliciesStatsResponse_AccessPolicyStats() {
    this->initializeModel();
}

OAIGetPoliciesStatsResponse_AccessPolicyStats::~OAIGetPoliciesStatsResponse_AccessPolicyStats() {}

void OAIGetPoliciesStatsResponse_AccessPolicyStats::initializeModel() {

    m_data_policy_count_isSet = false;
    m_data_policy_count_isValid = false;
}

void OAIGetPoliciesStatsResponse_AccessPolicyStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetPoliciesStatsResponse_AccessPolicyStats::fromJsonObject(QJsonObject json) {

    m_data_policy_count_isValid = ::OpenAPI::fromJsonValue(m_data_policy_count, json[QString("DataPolicyCount")]);
    m_data_policy_count_isSet = !json[QString("DataPolicyCount")].isNull() && m_data_policy_count_isValid;
}

QString OAIGetPoliciesStatsResponse_AccessPolicyStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetPoliciesStatsResponse_AccessPolicyStats::asJsonObject() const {
    QJsonObject obj;
    if (m_data_policy_count_isSet) {
        obj.insert(QString("DataPolicyCount"), ::OpenAPI::toJsonValue(m_data_policy_count));
    }
    return obj;
}

qint32 OAIGetPoliciesStatsResponse_AccessPolicyStats::getDataPolicyCount() const {
    return m_data_policy_count;
}
void OAIGetPoliciesStatsResponse_AccessPolicyStats::setDataPolicyCount(const qint32 &data_policy_count) {
    m_data_policy_count = data_policy_count;
    m_data_policy_count_isSet = true;
}

bool OAIGetPoliciesStatsResponse_AccessPolicyStats::is_data_policy_count_Set() const{
    return m_data_policy_count_isSet;
}

bool OAIGetPoliciesStatsResponse_AccessPolicyStats::is_data_policy_count_Valid() const{
    return m_data_policy_count_isValid;
}

bool OAIGetPoliciesStatsResponse_AccessPolicyStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_policy_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetPoliciesStatsResponse_AccessPolicyStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
