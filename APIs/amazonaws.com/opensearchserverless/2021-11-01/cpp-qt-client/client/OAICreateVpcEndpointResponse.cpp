/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateVpcEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateVpcEndpointResponse::OAICreateVpcEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateVpcEndpointResponse::OAICreateVpcEndpointResponse() {
    this->initializeModel();
}

OAICreateVpcEndpointResponse::~OAICreateVpcEndpointResponse() {}

void OAICreateVpcEndpointResponse::initializeModel() {

    m_create_vpc_endpoint_detail_isSet = false;
    m_create_vpc_endpoint_detail_isValid = false;
}

void OAICreateVpcEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateVpcEndpointResponse::fromJsonObject(QJsonObject json) {

    m_create_vpc_endpoint_detail_isValid = ::OpenAPI::fromJsonValue(m_create_vpc_endpoint_detail, json[QString("createVpcEndpointDetail")]);
    m_create_vpc_endpoint_detail_isSet = !json[QString("createVpcEndpointDetail")].isNull() && m_create_vpc_endpoint_detail_isValid;
}

QString OAICreateVpcEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateVpcEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_create_vpc_endpoint_detail.isSet()) {
        obj.insert(QString("createVpcEndpointDetail"), ::OpenAPI::toJsonValue(m_create_vpc_endpoint_detail));
    }
    return obj;
}

OAICreateVpcEndpointResponse_createVpcEndpointDetail OAICreateVpcEndpointResponse::getCreateVpcEndpointDetail() const {
    return m_create_vpc_endpoint_detail;
}
void OAICreateVpcEndpointResponse::setCreateVpcEndpointDetail(const OAICreateVpcEndpointResponse_createVpcEndpointDetail &create_vpc_endpoint_detail) {
    m_create_vpc_endpoint_detail = create_vpc_endpoint_detail;
    m_create_vpc_endpoint_detail_isSet = true;
}

bool OAICreateVpcEndpointResponse::is_create_vpc_endpoint_detail_Set() const{
    return m_create_vpc_endpoint_detail_isSet;
}

bool OAICreateVpcEndpointResponse::is_create_vpc_endpoint_detail_Valid() const{
    return m_create_vpc_endpoint_detail_isValid;
}

bool OAICreateVpcEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_vpc_endpoint_detail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateVpcEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
