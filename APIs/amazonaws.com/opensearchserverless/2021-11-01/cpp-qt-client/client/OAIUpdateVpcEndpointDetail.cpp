/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateVpcEndpointDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateVpcEndpointDetail::OAIUpdateVpcEndpointDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateVpcEndpointDetail::OAIUpdateVpcEndpointDetail() {
    this->initializeModel();
}

OAIUpdateVpcEndpointDetail::~OAIUpdateVpcEndpointDetail() {}

void OAIUpdateVpcEndpointDetail::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_security_group_ids_isSet = false;
    m_security_group_ids_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subnet_ids_isSet = false;
    m_subnet_ids_isValid = false;
}

void OAIUpdateVpcEndpointDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateVpcEndpointDetail::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("lastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("lastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_security_group_ids_isValid = ::OpenAPI::fromJsonValue(m_security_group_ids, json[QString("securityGroupIds")]);
    m_security_group_ids_isSet = !json[QString("securityGroupIds")].isNull() && m_security_group_ids_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subnet_ids_isValid = ::OpenAPI::fromJsonValue(m_subnet_ids, json[QString("subnetIds")]);
    m_subnet_ids_isSet = !json[QString("subnetIds")].isNull() && m_subnet_ids_isValid;
}

QString OAIUpdateVpcEndpointDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateVpcEndpointDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("lastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_security_group_ids.isSet()) {
        obj.insert(QString("securityGroupIds"), ::OpenAPI::toJsonValue(m_security_group_ids));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subnet_ids.isSet()) {
        obj.insert(QString("subnetIds"), ::OpenAPI::toJsonValue(m_subnet_ids));
    }
    return obj;
}

QString OAIUpdateVpcEndpointDetail::getId() const {
    return m_id;
}
void OAIUpdateVpcEndpointDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateVpcEndpointDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateVpcEndpointDetail::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIUpdateVpcEndpointDetail::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIUpdateVpcEndpointDetail::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIUpdateVpcEndpointDetail::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIUpdateVpcEndpointDetail::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIUpdateVpcEndpointDetail::getName() const {
    return m_name;
}
void OAIUpdateVpcEndpointDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateVpcEndpointDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateVpcEndpointDetail::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIUpdateVpcEndpointDetail::getSecurityGroupIds() const {
    return m_security_group_ids;
}
void OAIUpdateVpcEndpointDetail::setSecurityGroupIds(const QList &security_group_ids) {
    m_security_group_ids = security_group_ids;
    m_security_group_ids_isSet = true;
}

bool OAIUpdateVpcEndpointDetail::is_security_group_ids_Set() const{
    return m_security_group_ids_isSet;
}

bool OAIUpdateVpcEndpointDetail::is_security_group_ids_Valid() const{
    return m_security_group_ids_isValid;
}

OAIVpcEndpointStatus OAIUpdateVpcEndpointDetail::getStatus() const {
    return m_status;
}
void OAIUpdateVpcEndpointDetail::setStatus(const OAIVpcEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateVpcEndpointDetail::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateVpcEndpointDetail::is_status_Valid() const{
    return m_status_isValid;
}

QList OAIUpdateVpcEndpointDetail::getSubnetIds() const {
    return m_subnet_ids;
}
void OAIUpdateVpcEndpointDetail::setSubnetIds(const QList &subnet_ids) {
    m_subnet_ids = subnet_ids;
    m_subnet_ids_isSet = true;
}

bool OAIUpdateVpcEndpointDetail::is_subnet_ids_Set() const{
    return m_subnet_ids_isSet;
}

bool OAIUpdateVpcEndpointDetail::is_subnet_ids_Valid() const{
    return m_subnet_ids_isValid;
}

bool OAIUpdateVpcEndpointDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_group_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateVpcEndpointDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
