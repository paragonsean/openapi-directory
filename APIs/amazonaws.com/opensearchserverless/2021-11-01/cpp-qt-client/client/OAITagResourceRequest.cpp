/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagResourceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagResourceRequest::OAITagResourceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagResourceRequest::OAITagResourceRequest() {
    this->initializeModel();
}

OAITagResourceRequest::~OAITagResourceRequest() {}

void OAITagResourceRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAITagResourceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagResourceRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("resourceArn")]);
    m_resource_arn_isSet = !json[QString("resourceArn")].isNull() && m_resource_arn_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAITagResourceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagResourceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("resourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAITagResourceRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAITagResourceRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAITagResourceRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAITagResourceRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QList OAITagResourceRequest::getTags() const {
    return m_tags;
}
void OAITagResourceRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAITagResourceRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAITagResourceRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAITagResourceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagResourceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_tags_isValid && true;
}

} // namespace OpenAPI
