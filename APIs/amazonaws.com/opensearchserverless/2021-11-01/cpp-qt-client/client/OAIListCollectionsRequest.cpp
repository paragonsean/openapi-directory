/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListCollectionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListCollectionsRequest::OAIListCollectionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListCollectionsRequest::OAIListCollectionsRequest() {
    this->initializeModel();
}

OAIListCollectionsRequest::~OAIListCollectionsRequest() {}

void OAIListCollectionsRequest::initializeModel() {

    m_collection_filters_isSet = false;
    m_collection_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListCollectionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListCollectionsRequest::fromJsonObject(QJsonObject json) {

    m_collection_filters_isValid = ::OpenAPI::fromJsonValue(m_collection_filters, json[QString("collectionFilters")]);
    m_collection_filters_isSet = !json[QString("collectionFilters")].isNull() && m_collection_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIListCollectionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListCollectionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_filters.isSet()) {
        obj.insert(QString("collectionFilters"), ::OpenAPI::toJsonValue(m_collection_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIListCollectionsRequest_collectionFilters OAIListCollectionsRequest::getCollectionFilters() const {
    return m_collection_filters;
}
void OAIListCollectionsRequest::setCollectionFilters(const OAIListCollectionsRequest_collectionFilters &collection_filters) {
    m_collection_filters = collection_filters;
    m_collection_filters_isSet = true;
}

bool OAIListCollectionsRequest::is_collection_filters_Set() const{
    return m_collection_filters_isSet;
}

bool OAIListCollectionsRequest::is_collection_filters_Valid() const{
    return m_collection_filters_isValid;
}

qint32 OAIListCollectionsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListCollectionsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListCollectionsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListCollectionsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListCollectionsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListCollectionsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListCollectionsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListCollectionsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListCollectionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListCollectionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
