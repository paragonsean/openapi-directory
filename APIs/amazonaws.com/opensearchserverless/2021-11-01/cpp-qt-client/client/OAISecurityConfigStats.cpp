/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityConfigStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityConfigStats::OAISecurityConfigStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityConfigStats::OAISecurityConfigStats() {
    this->initializeModel();
}

OAISecurityConfigStats::~OAISecurityConfigStats() {}

void OAISecurityConfigStats::initializeModel() {

    m_saml_config_count_isSet = false;
    m_saml_config_count_isValid = false;
}

void OAISecurityConfigStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityConfigStats::fromJsonObject(QJsonObject json) {

    m_saml_config_count_isValid = ::OpenAPI::fromJsonValue(m_saml_config_count, json[QString("SamlConfigCount")]);
    m_saml_config_count_isSet = !json[QString("SamlConfigCount")].isNull() && m_saml_config_count_isValid;
}

QString OAISecurityConfigStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityConfigStats::asJsonObject() const {
    QJsonObject obj;
    if (m_saml_config_count_isSet) {
        obj.insert(QString("SamlConfigCount"), ::OpenAPI::toJsonValue(m_saml_config_count));
    }
    return obj;
}

qint32 OAISecurityConfigStats::getSamlConfigCount() const {
    return m_saml_config_count;
}
void OAISecurityConfigStats::setSamlConfigCount(const qint32 &saml_config_count) {
    m_saml_config_count = saml_config_count;
    m_saml_config_count_isSet = true;
}

bool OAISecurityConfigStats::is_saml_config_count_Set() const{
    return m_saml_config_count_isSet;
}

bool OAISecurityConfigStats::is_saml_config_count_Valid() const{
    return m_saml_config_count_isValid;
}

bool OAISecurityConfigStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_saml_config_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityConfigStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
