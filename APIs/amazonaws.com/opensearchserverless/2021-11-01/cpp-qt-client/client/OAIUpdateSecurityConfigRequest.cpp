/**
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSecurityConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSecurityConfigRequest::OAIUpdateSecurityConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSecurityConfigRequest::OAIUpdateSecurityConfigRequest() {
    this->initializeModel();
}

OAIUpdateSecurityConfigRequest::~OAIUpdateSecurityConfigRequest() {}

void OAIUpdateSecurityConfigRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_config_version_isSet = false;
    m_config_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_saml_options_isSet = false;
    m_saml_options_isValid = false;
}

void OAIUpdateSecurityConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSecurityConfigRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_config_version_isValid = ::OpenAPI::fromJsonValue(m_config_version, json[QString("configVersion")]);
    m_config_version_isSet = !json[QString("configVersion")].isNull() && m_config_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_saml_options_isValid = ::OpenAPI::fromJsonValue(m_saml_options, json[QString("samlOptions")]);
    m_saml_options_isSet = !json[QString("samlOptions")].isNull() && m_saml_options_isValid;
}

QString OAIUpdateSecurityConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSecurityConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_config_version_isSet) {
        obj.insert(QString("configVersion"), ::OpenAPI::toJsonValue(m_config_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_saml_options.isSet()) {
        obj.insert(QString("samlOptions"), ::OpenAPI::toJsonValue(m_saml_options));
    }
    return obj;
}

QString OAIUpdateSecurityConfigRequest::getClientToken() const {
    return m_client_token;
}
void OAIUpdateSecurityConfigRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIUpdateSecurityConfigRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIUpdateSecurityConfigRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIUpdateSecurityConfigRequest::getConfigVersion() const {
    return m_config_version;
}
void OAIUpdateSecurityConfigRequest::setConfigVersion(const QString &config_version) {
    m_config_version = config_version;
    m_config_version_isSet = true;
}

bool OAIUpdateSecurityConfigRequest::is_config_version_Set() const{
    return m_config_version_isSet;
}

bool OAIUpdateSecurityConfigRequest::is_config_version_Valid() const{
    return m_config_version_isValid;
}

QString OAIUpdateSecurityConfigRequest::getDescription() const {
    return m_description;
}
void OAIUpdateSecurityConfigRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateSecurityConfigRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateSecurityConfigRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateSecurityConfigRequest::getId() const {
    return m_id;
}
void OAIUpdateSecurityConfigRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdateSecurityConfigRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdateSecurityConfigRequest::is_id_Valid() const{
    return m_id_isValid;
}

OAIUpdateSecurityConfigRequest_samlOptions OAIUpdateSecurityConfigRequest::getSamlOptions() const {
    return m_saml_options;
}
void OAIUpdateSecurityConfigRequest::setSamlOptions(const OAIUpdateSecurityConfigRequest_samlOptions &saml_options) {
    m_saml_options = saml_options;
    m_saml_options_isSet = true;
}

bool OAIUpdateSecurityConfigRequest::is_saml_options_Set() const{
    return m_saml_options_isSet;
}

bool OAIUpdateSecurityConfigRequest::is_saml_options_Valid() const{
    return m_saml_options_isValid;
}

bool OAIUpdateSecurityConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saml_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSecurityConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_config_version_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
