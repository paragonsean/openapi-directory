/*
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateSecurityConfigRequestSamlOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:30.101557-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSecurityConfigRequestSamlOptions {
  public static final String SERIALIZED_NAME_GROUP_ATTRIBUTE = "groupAttribute";
  @SerializedName(SERIALIZED_NAME_GROUP_ATTRIBUTE)
  private String groupAttribute;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_SESSION_TIMEOUT = "sessionTimeout";
  @SerializedName(SERIALIZED_NAME_SESSION_TIMEOUT)
  private Integer sessionTimeout;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTE = "userAttribute";
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTE)
  private String userAttribute;

  public UpdateSecurityConfigRequestSamlOptions() {
  }

  public UpdateSecurityConfigRequestSamlOptions groupAttribute(String groupAttribute) {
    this.groupAttribute = groupAttribute;
    return this;
  }

  /**
   * Get groupAttribute
   * @return groupAttribute
   */
  @javax.annotation.Nullable
  public String getGroupAttribute() {
    return groupAttribute;
  }

  public void setGroupAttribute(String groupAttribute) {
    this.groupAttribute = groupAttribute;
  }


  public UpdateSecurityConfigRequestSamlOptions metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nonnull
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public UpdateSecurityConfigRequestSamlOptions sessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
    return this;
  }

  /**
   * Get sessionTimeout
   * @return sessionTimeout
   */
  @javax.annotation.Nullable
  public Integer getSessionTimeout() {
    return sessionTimeout;
  }

  public void setSessionTimeout(Integer sessionTimeout) {
    this.sessionTimeout = sessionTimeout;
  }


  public UpdateSecurityConfigRequestSamlOptions userAttribute(String userAttribute) {
    this.userAttribute = userAttribute;
    return this;
  }

  /**
   * Get userAttribute
   * @return userAttribute
   */
  @javax.annotation.Nullable
  public String getUserAttribute() {
    return userAttribute;
  }

  public void setUserAttribute(String userAttribute) {
    this.userAttribute = userAttribute;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSecurityConfigRequestSamlOptions updateSecurityConfigRequestSamlOptions = (UpdateSecurityConfigRequestSamlOptions) o;
    return Objects.equals(this.groupAttribute, updateSecurityConfigRequestSamlOptions.groupAttribute) &&
        Objects.equals(this.metadata, updateSecurityConfigRequestSamlOptions.metadata) &&
        Objects.equals(this.sessionTimeout, updateSecurityConfigRequestSamlOptions.sessionTimeout) &&
        Objects.equals(this.userAttribute, updateSecurityConfigRequestSamlOptions.userAttribute);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupAttribute, metadata, sessionTimeout, userAttribute);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSecurityConfigRequestSamlOptions {\n");
    sb.append("    groupAttribute: ").append(toIndentedString(groupAttribute)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    sessionTimeout: ").append(toIndentedString(sessionTimeout)).append("\n");
    sb.append("    userAttribute: ").append(toIndentedString(userAttribute)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupAttribute");
    openapiFields.add("metadata");
    openapiFields.add("sessionTimeout");
    openapiFields.add("userAttribute");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metadata");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSecurityConfigRequestSamlOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSecurityConfigRequestSamlOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSecurityConfigRequestSamlOptions is not found in the empty JSON string", UpdateSecurityConfigRequestSamlOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSecurityConfigRequestSamlOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSecurityConfigRequestSamlOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateSecurityConfigRequestSamlOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `groupAttribute`
      if (jsonObj.get("groupAttribute") != null && !jsonObj.get("groupAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("groupAttribute"));
      }
      // validate the required field `metadata`
      String.validateJsonElement(jsonObj.get("metadata"));
      // validate the optional field `sessionTimeout`
      if (jsonObj.get("sessionTimeout") != null && !jsonObj.get("sessionTimeout").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("sessionTimeout"));
      }
      // validate the optional field `userAttribute`
      if (jsonObj.get("userAttribute") != null && !jsonObj.get("userAttribute").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userAttribute"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSecurityConfigRequestSamlOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSecurityConfigRequestSamlOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSecurityConfigRequestSamlOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSecurityConfigRequestSamlOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSecurityConfigRequestSamlOptions>() {
           @Override
           public void write(JsonWriter out, UpdateSecurityConfigRequestSamlOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSecurityConfigRequestSamlOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSecurityConfigRequestSamlOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSecurityConfigRequestSamlOptions
   * @throws IOException if the JSON string is invalid with respect to UpdateSecurityConfigRequestSamlOptions
   */
  public static UpdateSecurityConfigRequestSamlOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSecurityConfigRequestSamlOptions.class);
  }

  /**
   * Convert an instance of UpdateSecurityConfigRequestSamlOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

