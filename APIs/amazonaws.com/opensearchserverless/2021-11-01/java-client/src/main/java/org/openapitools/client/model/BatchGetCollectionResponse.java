/*
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchGetCollectionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:30.101557-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetCollectionResponse {
  public static final String SERIALIZED_NAME_COLLECTION_DETAILS = "collectionDetails";
  @SerializedName(SERIALIZED_NAME_COLLECTION_DETAILS)
  private List collectionDetails;

  public static final String SERIALIZED_NAME_COLLECTION_ERROR_DETAILS = "collectionErrorDetails";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ERROR_DETAILS)
  private List collectionErrorDetails;

  public BatchGetCollectionResponse() {
  }

  public BatchGetCollectionResponse collectionDetails(List collectionDetails) {
    this.collectionDetails = collectionDetails;
    return this;
  }

  /**
   * Get collectionDetails
   * @return collectionDetails
   */
  @javax.annotation.Nullable
  public List getCollectionDetails() {
    return collectionDetails;
  }

  public void setCollectionDetails(List collectionDetails) {
    this.collectionDetails = collectionDetails;
  }


  public BatchGetCollectionResponse collectionErrorDetails(List collectionErrorDetails) {
    this.collectionErrorDetails = collectionErrorDetails;
    return this;
  }

  /**
   * Get collectionErrorDetails
   * @return collectionErrorDetails
   */
  @javax.annotation.Nullable
  public List getCollectionErrorDetails() {
    return collectionErrorDetails;
  }

  public void setCollectionErrorDetails(List collectionErrorDetails) {
    this.collectionErrorDetails = collectionErrorDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetCollectionResponse batchGetCollectionResponse = (BatchGetCollectionResponse) o;
    return Objects.equals(this.collectionDetails, batchGetCollectionResponse.collectionDetails) &&
        Objects.equals(this.collectionErrorDetails, batchGetCollectionResponse.collectionErrorDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionDetails, collectionErrorDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetCollectionResponse {\n");
    sb.append("    collectionDetails: ").append(toIndentedString(collectionDetails)).append("\n");
    sb.append("    collectionErrorDetails: ").append(toIndentedString(collectionErrorDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collectionDetails");
    openapiFields.add("collectionErrorDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetCollectionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetCollectionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetCollectionResponse is not found in the empty JSON string", BatchGetCollectionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetCollectionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetCollectionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `collectionDetails`
      if (jsonObj.get("collectionDetails") != null && !jsonObj.get("collectionDetails").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("collectionDetails"));
      }
      // validate the optional field `collectionErrorDetails`
      if (jsonObj.get("collectionErrorDetails") != null && !jsonObj.get("collectionErrorDetails").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("collectionErrorDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetCollectionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetCollectionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetCollectionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetCollectionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetCollectionResponse>() {
           @Override
           public void write(JsonWriter out, BatchGetCollectionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetCollectionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetCollectionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetCollectionResponse
   * @throws IOException if the JSON string is invalid with respect to BatchGetCollectionResponse
   */
  public static BatchGetCollectionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetCollectionResponse.class);
  }

  /**
   * Convert an instance of BatchGetCollectionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

