/*
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The maximum capacity limits for all OpenSearch Serverless collections, in OpenSearch Compute Units (OCUs). These limits are used to scale your collections based on the current workload. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-scaling.html\&quot;&gt;Managing capacity limits for Amazon OpenSearch Serverless&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:30.101557-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CapacityLimits {
  public static final String SERIALIZED_NAME_MAX_INDEXING_CAPACITY_IN_O_C_U = "maxIndexingCapacityInOCU";
  @SerializedName(SERIALIZED_NAME_MAX_INDEXING_CAPACITY_IN_O_C_U)
  private Integer maxIndexingCapacityInOCU;

  public static final String SERIALIZED_NAME_MAX_SEARCH_CAPACITY_IN_O_C_U = "maxSearchCapacityInOCU";
  @SerializedName(SERIALIZED_NAME_MAX_SEARCH_CAPACITY_IN_O_C_U)
  private Integer maxSearchCapacityInOCU;

  public CapacityLimits() {
  }

  public CapacityLimits maxIndexingCapacityInOCU(Integer maxIndexingCapacityInOCU) {
    this.maxIndexingCapacityInOCU = maxIndexingCapacityInOCU;
    return this;
  }

  /**
   * Get maxIndexingCapacityInOCU
   * @return maxIndexingCapacityInOCU
   */
  @javax.annotation.Nullable
  public Integer getMaxIndexingCapacityInOCU() {
    return maxIndexingCapacityInOCU;
  }

  public void setMaxIndexingCapacityInOCU(Integer maxIndexingCapacityInOCU) {
    this.maxIndexingCapacityInOCU = maxIndexingCapacityInOCU;
  }


  public CapacityLimits maxSearchCapacityInOCU(Integer maxSearchCapacityInOCU) {
    this.maxSearchCapacityInOCU = maxSearchCapacityInOCU;
    return this;
  }

  /**
   * Get maxSearchCapacityInOCU
   * @return maxSearchCapacityInOCU
   */
  @javax.annotation.Nullable
  public Integer getMaxSearchCapacityInOCU() {
    return maxSearchCapacityInOCU;
  }

  public void setMaxSearchCapacityInOCU(Integer maxSearchCapacityInOCU) {
    this.maxSearchCapacityInOCU = maxSearchCapacityInOCU;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapacityLimits capacityLimits = (CapacityLimits) o;
    return Objects.equals(this.maxIndexingCapacityInOCU, capacityLimits.maxIndexingCapacityInOCU) &&
        Objects.equals(this.maxSearchCapacityInOCU, capacityLimits.maxSearchCapacityInOCU);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxIndexingCapacityInOCU, maxSearchCapacityInOCU);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapacityLimits {\n");
    sb.append("    maxIndexingCapacityInOCU: ").append(toIndentedString(maxIndexingCapacityInOCU)).append("\n");
    sb.append("    maxSearchCapacityInOCU: ").append(toIndentedString(maxSearchCapacityInOCU)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxIndexingCapacityInOCU");
    openapiFields.add("maxSearchCapacityInOCU");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CapacityLimits
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CapacityLimits.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CapacityLimits is not found in the empty JSON string", CapacityLimits.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CapacityLimits.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CapacityLimits` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `maxIndexingCapacityInOCU`
      if (jsonObj.get("maxIndexingCapacityInOCU") != null && !jsonObj.get("maxIndexingCapacityInOCU").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxIndexingCapacityInOCU"));
      }
      // validate the optional field `maxSearchCapacityInOCU`
      if (jsonObj.get("maxSearchCapacityInOCU") != null && !jsonObj.get("maxSearchCapacityInOCU").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("maxSearchCapacityInOCU"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CapacityLimits.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CapacityLimits' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CapacityLimits> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CapacityLimits.class));

       return (TypeAdapter<T>) new TypeAdapter<CapacityLimits>() {
           @Override
           public void write(JsonWriter out, CapacityLimits value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CapacityLimits read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CapacityLimits given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CapacityLimits
   * @throws IOException if the JSON string is invalid with respect to CapacityLimits
   */
  public static CapacityLimits fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CapacityLimits.class);
  }

  /**
   * Convert an instance of CapacityLimits to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

