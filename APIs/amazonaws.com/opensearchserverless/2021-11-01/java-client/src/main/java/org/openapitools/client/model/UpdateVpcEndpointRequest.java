/*
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateVpcEndpointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:30.101557-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateVpcEndpointRequest {
  public static final String SERIALIZED_NAME_ADD_SECURITY_GROUP_IDS = "addSecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_ADD_SECURITY_GROUP_IDS)
  private List addSecurityGroupIds;

  public static final String SERIALIZED_NAME_ADD_SUBNET_IDS = "addSubnetIds";
  @SerializedName(SERIALIZED_NAME_ADD_SUBNET_IDS)
  private List addSubnetIds;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REMOVE_SECURITY_GROUP_IDS = "removeSecurityGroupIds";
  @SerializedName(SERIALIZED_NAME_REMOVE_SECURITY_GROUP_IDS)
  private List removeSecurityGroupIds;

  public static final String SERIALIZED_NAME_REMOVE_SUBNET_IDS = "removeSubnetIds";
  @SerializedName(SERIALIZED_NAME_REMOVE_SUBNET_IDS)
  private List removeSubnetIds;

  public UpdateVpcEndpointRequest() {
  }

  public UpdateVpcEndpointRequest addSecurityGroupIds(List addSecurityGroupIds) {
    this.addSecurityGroupIds = addSecurityGroupIds;
    return this;
  }

  /**
   * Get addSecurityGroupIds
   * @return addSecurityGroupIds
   */
  @javax.annotation.Nullable
  public List getAddSecurityGroupIds() {
    return addSecurityGroupIds;
  }

  public void setAddSecurityGroupIds(List addSecurityGroupIds) {
    this.addSecurityGroupIds = addSecurityGroupIds;
  }


  public UpdateVpcEndpointRequest addSubnetIds(List addSubnetIds) {
    this.addSubnetIds = addSubnetIds;
    return this;
  }

  /**
   * Get addSubnetIds
   * @return addSubnetIds
   */
  @javax.annotation.Nullable
  public List getAddSubnetIds() {
    return addSubnetIds;
  }

  public void setAddSubnetIds(List addSubnetIds) {
    this.addSubnetIds = addSubnetIds;
  }


  public UpdateVpcEndpointRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public UpdateVpcEndpointRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UpdateVpcEndpointRequest removeSecurityGroupIds(List removeSecurityGroupIds) {
    this.removeSecurityGroupIds = removeSecurityGroupIds;
    return this;
  }

  /**
   * Get removeSecurityGroupIds
   * @return removeSecurityGroupIds
   */
  @javax.annotation.Nullable
  public List getRemoveSecurityGroupIds() {
    return removeSecurityGroupIds;
  }

  public void setRemoveSecurityGroupIds(List removeSecurityGroupIds) {
    this.removeSecurityGroupIds = removeSecurityGroupIds;
  }


  public UpdateVpcEndpointRequest removeSubnetIds(List removeSubnetIds) {
    this.removeSubnetIds = removeSubnetIds;
    return this;
  }

  /**
   * Get removeSubnetIds
   * @return removeSubnetIds
   */
  @javax.annotation.Nullable
  public List getRemoveSubnetIds() {
    return removeSubnetIds;
  }

  public void setRemoveSubnetIds(List removeSubnetIds) {
    this.removeSubnetIds = removeSubnetIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateVpcEndpointRequest updateVpcEndpointRequest = (UpdateVpcEndpointRequest) o;
    return Objects.equals(this.addSecurityGroupIds, updateVpcEndpointRequest.addSecurityGroupIds) &&
        Objects.equals(this.addSubnetIds, updateVpcEndpointRequest.addSubnetIds) &&
        Objects.equals(this.clientToken, updateVpcEndpointRequest.clientToken) &&
        Objects.equals(this.id, updateVpcEndpointRequest.id) &&
        Objects.equals(this.removeSecurityGroupIds, updateVpcEndpointRequest.removeSecurityGroupIds) &&
        Objects.equals(this.removeSubnetIds, updateVpcEndpointRequest.removeSubnetIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addSecurityGroupIds, addSubnetIds, clientToken, id, removeSecurityGroupIds, removeSubnetIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateVpcEndpointRequest {\n");
    sb.append("    addSecurityGroupIds: ").append(toIndentedString(addSecurityGroupIds)).append("\n");
    sb.append("    addSubnetIds: ").append(toIndentedString(addSubnetIds)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    removeSecurityGroupIds: ").append(toIndentedString(removeSecurityGroupIds)).append("\n");
    sb.append("    removeSubnetIds: ").append(toIndentedString(removeSubnetIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addSecurityGroupIds");
    openapiFields.add("addSubnetIds");
    openapiFields.add("clientToken");
    openapiFields.add("id");
    openapiFields.add("removeSecurityGroupIds");
    openapiFields.add("removeSubnetIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateVpcEndpointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateVpcEndpointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateVpcEndpointRequest is not found in the empty JSON string", UpdateVpcEndpointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateVpcEndpointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateVpcEndpointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateVpcEndpointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addSecurityGroupIds`
      if (jsonObj.get("addSecurityGroupIds") != null && !jsonObj.get("addSecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("addSecurityGroupIds"));
      }
      // validate the optional field `addSubnetIds`
      if (jsonObj.get("addSubnetIds") != null && !jsonObj.get("addSubnetIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("addSubnetIds"));
      }
      // validate the optional field `clientToken`
      if (jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("clientToken"));
      }
      // validate the required field `id`
      String.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `removeSecurityGroupIds`
      if (jsonObj.get("removeSecurityGroupIds") != null && !jsonObj.get("removeSecurityGroupIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("removeSecurityGroupIds"));
      }
      // validate the optional field `removeSubnetIds`
      if (jsonObj.get("removeSubnetIds") != null && !jsonObj.get("removeSubnetIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("removeSubnetIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateVpcEndpointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateVpcEndpointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateVpcEndpointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateVpcEndpointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateVpcEndpointRequest>() {
           @Override
           public void write(JsonWriter out, UpdateVpcEndpointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateVpcEndpointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateVpcEndpointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateVpcEndpointRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateVpcEndpointRequest
   */
  public static UpdateVpcEndpointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateVpcEndpointRequest.class);
  }

  /**
   * Convert an instance of UpdateVpcEndpointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

