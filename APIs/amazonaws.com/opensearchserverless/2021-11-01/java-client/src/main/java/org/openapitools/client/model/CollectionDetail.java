/*
 * OpenSearch Service Serverless
 * <p>Use the Amazon OpenSearch Serverless API to create, configure, and manage OpenSearch Serverless collections and security policies.</p> <p>OpenSearch Serverless is an on-demand, pre-provisioned serverless configuration for Amazon OpenSearch Service. OpenSearch Serverless removes the operational complexities of provisioning, configuring, and tuning your OpenSearch clusters. It enables you to easily search and analyze petabytes of data without having to worry about the underlying infrastructure and data management.</p> <p> To learn more about OpenSearch Serverless, see <a href=\"https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-overview.html\">What is Amazon OpenSearch Serverless?</a> </p>
 *
 * The version of the OpenAPI document: 2021-11-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CollectionStatus;
import org.openapitools.client.model.CollectionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about each OpenSearch Serverless collection, including the collection endpoint and the OpenSearch Dashboards endpoint.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:30.101557-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectionDetail {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_COLLECTION_ENDPOINT = "collectionEndpoint";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ENDPOINT)
  private String collectionEndpoint;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private Integer createdDate;

  public static final String SERIALIZED_NAME_DASHBOARD_ENDPOINT = "dashboardEndpoint";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_ENDPOINT)
  private String dashboardEndpoint;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KMS_KEY_ARN = "kmsKeyArn";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_ARN)
  private String kmsKeyArn;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "lastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private Integer lastModifiedDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private CollectionStatus status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private CollectionType type;

  public CollectionDetail() {
  }

  public CollectionDetail arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CollectionDetail collectionEndpoint(String collectionEndpoint) {
    this.collectionEndpoint = collectionEndpoint;
    return this;
  }

  /**
   * Get collectionEndpoint
   * @return collectionEndpoint
   */
  @javax.annotation.Nullable
  public String getCollectionEndpoint() {
    return collectionEndpoint;
  }

  public void setCollectionEndpoint(String collectionEndpoint) {
    this.collectionEndpoint = collectionEndpoint;
  }


  public CollectionDetail createdDate(Integer createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public Integer getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Integer createdDate) {
    this.createdDate = createdDate;
  }


  public CollectionDetail dashboardEndpoint(String dashboardEndpoint) {
    this.dashboardEndpoint = dashboardEndpoint;
    return this;
  }

  /**
   * Get dashboardEndpoint
   * @return dashboardEndpoint
   */
  @javax.annotation.Nullable
  public String getDashboardEndpoint() {
    return dashboardEndpoint;
  }

  public void setDashboardEndpoint(String dashboardEndpoint) {
    this.dashboardEndpoint = dashboardEndpoint;
  }


  public CollectionDetail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CollectionDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CollectionDetail kmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
    return this;
  }

  /**
   * Get kmsKeyArn
   * @return kmsKeyArn
   */
  @javax.annotation.Nullable
  public String getKmsKeyArn() {
    return kmsKeyArn;
  }

  public void setKmsKeyArn(String kmsKeyArn) {
    this.kmsKeyArn = kmsKeyArn;
  }


  public CollectionDetail lastModifiedDate(Integer lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public Integer getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(Integer lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public CollectionDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CollectionDetail status(CollectionStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public CollectionStatus getStatus() {
    return status;
  }

  public void setStatus(CollectionStatus status) {
    this.status = status;
  }


  public CollectionDetail type(CollectionType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public CollectionType getType() {
    return type;
  }

  public void setType(CollectionType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionDetail collectionDetail = (CollectionDetail) o;
    return Objects.equals(this.arn, collectionDetail.arn) &&
        Objects.equals(this.collectionEndpoint, collectionDetail.collectionEndpoint) &&
        Objects.equals(this.createdDate, collectionDetail.createdDate) &&
        Objects.equals(this.dashboardEndpoint, collectionDetail.dashboardEndpoint) &&
        Objects.equals(this.description, collectionDetail.description) &&
        Objects.equals(this.id, collectionDetail.id) &&
        Objects.equals(this.kmsKeyArn, collectionDetail.kmsKeyArn) &&
        Objects.equals(this.lastModifiedDate, collectionDetail.lastModifiedDate) &&
        Objects.equals(this.name, collectionDetail.name) &&
        Objects.equals(this.status, collectionDetail.status) &&
        Objects.equals(this.type, collectionDetail.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, collectionEndpoint, createdDate, dashboardEndpoint, description, id, kmsKeyArn, lastModifiedDate, name, status, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionDetail {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    collectionEndpoint: ").append(toIndentedString(collectionEndpoint)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dashboardEndpoint: ").append(toIndentedString(dashboardEndpoint)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kmsKeyArn: ").append(toIndentedString(kmsKeyArn)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("collectionEndpoint");
    openapiFields.add("createdDate");
    openapiFields.add("dashboardEndpoint");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("kmsKeyArn");
    openapiFields.add("lastModifiedDate");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectionDetail is not found in the empty JSON string", CollectionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `collectionEndpoint`
      if (jsonObj.get("collectionEndpoint") != null && !jsonObj.get("collectionEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("collectionEndpoint"));
      }
      // validate the optional field `createdDate`
      if (jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("createdDate"));
      }
      // validate the optional field `dashboardEndpoint`
      if (jsonObj.get("dashboardEndpoint") != null && !jsonObj.get("dashboardEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("dashboardEndpoint"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `id`
      if (jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("id"));
      }
      // validate the optional field `kmsKeyArn`
      if (jsonObj.get("kmsKeyArn") != null && !jsonObj.get("kmsKeyArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("kmsKeyArn"));
      }
      // validate the optional field `lastModifiedDate`
      if (jsonObj.get("lastModifiedDate") != null && !jsonObj.get("lastModifiedDate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("lastModifiedDate"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        CollectionStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        CollectionType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectionDetail>() {
           @Override
           public void write(JsonWriter out, CollectionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectionDetail
   * @throws IOException if the JSON string is invalid with respect to CollectionDetail
   */
  public static CollectionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectionDetail.class);
  }

  /**
   * Convert an instance of CollectionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

