# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.variation_config import VariationConfig
import re
from openapi_server import util


class UpdateFeatureRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_or_update_variations: List[VariationConfig]=None, default_variation: str=None, description: str=None, entity_overrides: Dict[str, str]=None, evaluation_strategy: str=None, remove_variations: List[str]=None):
        """UpdateFeatureRequest - a model defined in OpenAPI

        :param add_or_update_variations: The add_or_update_variations of this UpdateFeatureRequest.
        :param default_variation: The default_variation of this UpdateFeatureRequest.
        :param description: The description of this UpdateFeatureRequest.
        :param entity_overrides: The entity_overrides of this UpdateFeatureRequest.
        :param evaluation_strategy: The evaluation_strategy of this UpdateFeatureRequest.
        :param remove_variations: The remove_variations of this UpdateFeatureRequest.
        """
        self.openapi_types = {
            'add_or_update_variations': List[VariationConfig],
            'default_variation': str,
            'description': str,
            'entity_overrides': Dict[str, str],
            'evaluation_strategy': str,
            'remove_variations': List[str]
        }

        self.attribute_map = {
            'add_or_update_variations': 'addOrUpdateVariations',
            'default_variation': 'defaultVariation',
            'description': 'description',
            'entity_overrides': 'entityOverrides',
            'evaluation_strategy': 'evaluationStrategy',
            'remove_variations': 'removeVariations'
        }

        self._add_or_update_variations = add_or_update_variations
        self._default_variation = default_variation
        self._description = description
        self._entity_overrides = entity_overrides
        self._evaluation_strategy = evaluation_strategy
        self._remove_variations = remove_variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFeatureRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFeature_request of this UpdateFeatureRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_or_update_variations(self):
        """Gets the add_or_update_variations of this UpdateFeatureRequest.

        To update variation configurations for this feature, or add new ones, specify this structure. In this array, include any variations that you want to add or update. If the array includes a variation name that already exists for this feature, it is updated. If it includes a new variation name, it is added as a new variation.

        :return: The add_or_update_variations of this UpdateFeatureRequest.
        :rtype: List[VariationConfig]
        """
        return self._add_or_update_variations

    @add_or_update_variations.setter
    def add_or_update_variations(self, add_or_update_variations):
        """Sets the add_or_update_variations of this UpdateFeatureRequest.

        To update variation configurations for this feature, or add new ones, specify this structure. In this array, include any variations that you want to add or update. If the array includes a variation name that already exists for this feature, it is updated. If it includes a new variation name, it is added as a new variation.

        :param add_or_update_variations: The add_or_update_variations of this UpdateFeatureRequest.
        :type add_or_update_variations: List[VariationConfig]
        """
        if add_or_update_variations is not None and len(add_or_update_variations) > 5:
            raise ValueError("Invalid value for `add_or_update_variations`, number of items must be less than or equal to `5`")
        if add_or_update_variations is not None and len(add_or_update_variations) < 1:
            raise ValueError("Invalid value for `add_or_update_variations`, number of items must be greater than or equal to `1`")

        self._add_or_update_variations = add_or_update_variations

    @property
    def default_variation(self):
        """Gets the default_variation of this UpdateFeatureRequest.

        The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.

        :return: The default_variation of this UpdateFeatureRequest.
        :rtype: str
        """
        return self._default_variation

    @default_variation.setter
    def default_variation(self, default_variation):
        """Sets the default_variation of this UpdateFeatureRequest.

        The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.

        :param default_variation: The default_variation of this UpdateFeatureRequest.
        :type default_variation: str
        """
        if default_variation is not None and len(default_variation) > 127:
            raise ValueError("Invalid value for `default_variation`, length must be less than or equal to `127`")
        if default_variation is not None and len(default_variation) < 1:
            raise ValueError("Invalid value for `default_variation`, length must be greater than or equal to `1`")
        if default_variation is not None and not re.search(r'^[-a-zA-Z0-9._]*$', default_variation):
            raise ValueError("Invalid value for `default_variation`, must be a follow pattern or equal to `/^[-a-zA-Z0-9._]*$/`")

        self._default_variation = default_variation

    @property
    def description(self):
        """Gets the description of this UpdateFeatureRequest.

        An optional description of the feature.

        :return: The description of this UpdateFeatureRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateFeatureRequest.

        An optional description of the feature.

        :param description: The description of this UpdateFeatureRequest.
        :type description: str
        """
        if description is not None and len(description) > 160:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `160`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*/`")

        self._description = description

    @property
    def entity_overrides(self):
        """Gets the entity_overrides of this UpdateFeatureRequest.

        <p>Specified users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>

        :return: The entity_overrides of this UpdateFeatureRequest.
        :rtype: Dict[str, str]
        """
        return self._entity_overrides

    @entity_overrides.setter
    def entity_overrides(self, entity_overrides):
        """Sets the entity_overrides of this UpdateFeatureRequest.

        <p>Specified users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>

        :param entity_overrides: The entity_overrides of this UpdateFeatureRequest.
        :type entity_overrides: Dict[str, str]
        """
        if entity_overrides is not None and len(entity_overrides) > 2500:
            raise ValueError("Invalid value for `entity_overrides`, number of items must be less than or equal to `2500`")
        if entity_overrides is not None and len(entity_overrides) < 0:
            raise ValueError("Invalid value for `entity_overrides`, number of items must be greater than or equal to `0`")

        self._entity_overrides = entity_overrides

    @property
    def evaluation_strategy(self):
        """Gets the evaluation_strategy of this UpdateFeatureRequest.

        Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.

        :return: The evaluation_strategy of this UpdateFeatureRequest.
        :rtype: str
        """
        return self._evaluation_strategy

    @evaluation_strategy.setter
    def evaluation_strategy(self, evaluation_strategy):
        """Sets the evaluation_strategy of this UpdateFeatureRequest.

        Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.

        :param evaluation_strategy: The evaluation_strategy of this UpdateFeatureRequest.
        :type evaluation_strategy: str
        """
        allowed_values = ["ALL_RULES", "DEFAULT_VARIATION"]  # noqa: E501
        if evaluation_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_strategy` ({0}), must be one of {1}"
                .format(evaluation_strategy, allowed_values)
            )

        self._evaluation_strategy = evaluation_strategy

    @property
    def remove_variations(self):
        """Gets the remove_variations of this UpdateFeatureRequest.

        <p>Removes a variation from the feature. If the variation you specify doesn't exist, then this makes no change and does not report an error.</p> <p>This operation fails if you try to remove a variation that is part of an ongoing launch or experiment.</p>

        :return: The remove_variations of this UpdateFeatureRequest.
        :rtype: List[str]
        """
        return self._remove_variations

    @remove_variations.setter
    def remove_variations(self, remove_variations):
        """Sets the remove_variations of this UpdateFeatureRequest.

        <p>Removes a variation from the feature. If the variation you specify doesn't exist, then this makes no change and does not report an error.</p> <p>This operation fails if you try to remove a variation that is part of an ongoing launch or experiment.</p>

        :param remove_variations: The remove_variations of this UpdateFeatureRequest.
        :type remove_variations: List[str]
        """
        if remove_variations is not None and len(remove_variations) > 5:
            raise ValueError("Invalid value for `remove_variations`, number of items must be less than or equal to `5`")
        if remove_variations is not None and len(remove_variations) < 0:
            raise ValueError("Invalid value for `remove_variations`, number of items must be greater than or equal to `0`")

        self._remove_variations = remove_variations
