# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_result_response_type import ExperimentResultResponseType
from openapi_server import util


class ExperimentResultsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_name: str=None, result_stat: ExperimentResultResponseType=None, treatment_name: str=None, values: List=None):
        """ExperimentResultsData - a model defined in OpenAPI

        :param metric_name: The metric_name of this ExperimentResultsData.
        :param result_stat: The result_stat of this ExperimentResultsData.
        :param treatment_name: The treatment_name of this ExperimentResultsData.
        :param values: The values of this ExperimentResultsData.
        """
        self.openapi_types = {
            'metric_name': str,
            'result_stat': ExperimentResultResponseType,
            'treatment_name': str,
            'values': List
        }

        self.attribute_map = {
            'metric_name': 'metricName',
            'result_stat': 'resultStat',
            'treatment_name': 'treatmentName',
            'values': 'values'
        }

        self._metric_name = metric_name
        self._result_stat = result_stat
        self._treatment_name = treatment_name
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExperimentResultsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExperimentResultsData of this ExperimentResultsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_name(self):
        """Gets the metric_name of this ExperimentResultsData.


        :return: The metric_name of this ExperimentResultsData.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this ExperimentResultsData.


        :param metric_name: The metric_name of this ExperimentResultsData.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def result_stat(self):
        """Gets the result_stat of this ExperimentResultsData.


        :return: The result_stat of this ExperimentResultsData.
        :rtype: ExperimentResultResponseType
        """
        return self._result_stat

    @result_stat.setter
    def result_stat(self, result_stat):
        """Sets the result_stat of this ExperimentResultsData.


        :param result_stat: The result_stat of this ExperimentResultsData.
        :type result_stat: ExperimentResultResponseType
        """

        self._result_stat = result_stat

    @property
    def treatment_name(self):
        """Gets the treatment_name of this ExperimentResultsData.


        :return: The treatment_name of this ExperimentResultsData.
        :rtype: str
        """
        return self._treatment_name

    @treatment_name.setter
    def treatment_name(self, treatment_name):
        """Sets the treatment_name of this ExperimentResultsData.


        :param treatment_name: The treatment_name of this ExperimentResultsData.
        :type treatment_name: str
        """

        self._treatment_name = treatment_name

    @property
    def values(self):
        """Gets the values of this ExperimentResultsData.


        :return: The values of this ExperimentResultsData.
        :rtype: List
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ExperimentResultsData.


        :param values: The values of this ExperimentResultsData.
        :type values: List
        """

        self._values = values
