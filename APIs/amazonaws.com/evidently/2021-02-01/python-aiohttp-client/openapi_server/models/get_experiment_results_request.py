# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_report_name import ExperimentReportName
from openapi_server.models.experiment_result_request_type import ExperimentResultRequestType
from openapi_server import util


class GetExperimentResultsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_stat: str=None, end_time: datetime=None, metric_names: List[str]=None, period: int=None, report_names: List[ExperimentReportName]=None, result_stats: List[ExperimentResultRequestType]=None, start_time: datetime=None, treatment_names: List[str]=None):
        """GetExperimentResultsRequest - a model defined in OpenAPI

        :param base_stat: The base_stat of this GetExperimentResultsRequest.
        :param end_time: The end_time of this GetExperimentResultsRequest.
        :param metric_names: The metric_names of this GetExperimentResultsRequest.
        :param period: The period of this GetExperimentResultsRequest.
        :param report_names: The report_names of this GetExperimentResultsRequest.
        :param result_stats: The result_stats of this GetExperimentResultsRequest.
        :param start_time: The start_time of this GetExperimentResultsRequest.
        :param treatment_names: The treatment_names of this GetExperimentResultsRequest.
        """
        self.openapi_types = {
            'base_stat': str,
            'end_time': datetime,
            'metric_names': List[str],
            'period': int,
            'report_names': List[ExperimentReportName],
            'result_stats': List[ExperimentResultRequestType],
            'start_time': datetime,
            'treatment_names': List[str]
        }

        self.attribute_map = {
            'base_stat': 'baseStat',
            'end_time': 'endTime',
            'metric_names': 'metricNames',
            'period': 'period',
            'report_names': 'reportNames',
            'result_stats': 'resultStats',
            'start_time': 'startTime',
            'treatment_names': 'treatmentNames'
        }

        self._base_stat = base_stat
        self._end_time = end_time
        self._metric_names = metric_names
        self._period = period
        self._report_names = report_names
        self._result_stats = result_stats
        self._start_time = start_time
        self._treatment_names = treatment_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetExperimentResultsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetExperimentResults_request of this GetExperimentResultsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_stat(self):
        """Gets the base_stat of this GetExperimentResultsRequest.

        The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.

        :return: The base_stat of this GetExperimentResultsRequest.
        :rtype: str
        """
        return self._base_stat

    @base_stat.setter
    def base_stat(self, base_stat):
        """Sets the base_stat of this GetExperimentResultsRequest.

        The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.

        :param base_stat: The base_stat of this GetExperimentResultsRequest.
        :type base_stat: str
        """
        allowed_values = ["Mean"]  # noqa: E501
        if base_stat not in allowed_values:
            raise ValueError(
                "Invalid value for `base_stat` ({0}), must be one of {1}"
                .format(base_stat, allowed_values)
            )

        self._base_stat = base_stat

    @property
    def end_time(self):
        """Gets the end_time of this GetExperimentResultsRequest.

        The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.

        :return: The end_time of this GetExperimentResultsRequest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetExperimentResultsRequest.

        The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.

        :param end_time: The end_time of this GetExperimentResultsRequest.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def metric_names(self):
        """Gets the metric_names of this GetExperimentResultsRequest.

        The names of the experiment metrics that you want to see the results of.

        :return: The metric_names of this GetExperimentResultsRequest.
        :rtype: List[str]
        """
        return self._metric_names

    @metric_names.setter
    def metric_names(self, metric_names):
        """Sets the metric_names of this GetExperimentResultsRequest.

        The names of the experiment metrics that you want to see the results of.

        :param metric_names: The metric_names of this GetExperimentResultsRequest.
        :type metric_names: List[str]
        """
        if metric_names is None:
            raise ValueError("Invalid value for `metric_names`, must not be `None`")
        if metric_names is not None and len(metric_names) > 1:
            raise ValueError("Invalid value for `metric_names`, number of items must be less than or equal to `1`")
        if metric_names is not None and len(metric_names) < 1:
            raise ValueError("Invalid value for `metric_names`, number of items must be greater than or equal to `1`")

        self._metric_names = metric_names

    @property
    def period(self):
        """Gets the period of this GetExperimentResultsRequest.

        In seconds, the amount of time to aggregate results together. 

        :return: The period of this GetExperimentResultsRequest.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this GetExperimentResultsRequest.

        In seconds, the amount of time to aggregate results together. 

        :param period: The period of this GetExperimentResultsRequest.
        :type period: int
        """
        if period is not None and period > 90000:
            raise ValueError("Invalid value for `period`, must be a value less than or equal to `90000`")
        if period is not None and period < 300:
            raise ValueError("Invalid value for `period`, must be a value greater than or equal to `300`")

        self._period = period

    @property
    def report_names(self):
        """Gets the report_names of this GetExperimentResultsRequest.

        The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.

        :return: The report_names of this GetExperimentResultsRequest.
        :rtype: List[ExperimentReportName]
        """
        return self._report_names

    @report_names.setter
    def report_names(self, report_names):
        """Sets the report_names of this GetExperimentResultsRequest.

        The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.

        :param report_names: The report_names of this GetExperimentResultsRequest.
        :type report_names: List[ExperimentReportName]
        """
        if report_names is not None and len(report_names) > 5:
            raise ValueError("Invalid value for `report_names`, number of items must be less than or equal to `5`")
        if report_names is not None and len(report_names) < 0:
            raise ValueError("Invalid value for `report_names`, number of items must be greater than or equal to `0`")

        self._report_names = report_names

    @property
    def result_stats(self):
        """Gets the result_stats of this GetExperimentResultsRequest.

        <p>The statistics that you want to see in the returned results.</p> <ul> <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li> <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li> <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li> <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li> </ul>

        :return: The result_stats of this GetExperimentResultsRequest.
        :rtype: List[ExperimentResultRequestType]
        """
        return self._result_stats

    @result_stats.setter
    def result_stats(self, result_stats):
        """Sets the result_stats of this GetExperimentResultsRequest.

        <p>The statistics that you want to see in the returned results.</p> <ul> <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li> <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li> <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li> <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li> </ul>

        :param result_stats: The result_stats of this GetExperimentResultsRequest.
        :type result_stats: List[ExperimentResultRequestType]
        """
        if result_stats is not None and len(result_stats) > 5:
            raise ValueError("Invalid value for `result_stats`, number of items must be less than or equal to `5`")
        if result_stats is not None and len(result_stats) < 0:
            raise ValueError("Invalid value for `result_stats`, number of items must be greater than or equal to `0`")

        self._result_stats = result_stats

    @property
    def start_time(self):
        """Gets the start_time of this GetExperimentResultsRequest.

        The date and time that the experiment started.

        :return: The start_time of this GetExperimentResultsRequest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetExperimentResultsRequest.

        The date and time that the experiment started.

        :param start_time: The start_time of this GetExperimentResultsRequest.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def treatment_names(self):
        """Gets the treatment_names of this GetExperimentResultsRequest.

        The names of the experiment treatments that you want to see the results for.

        :return: The treatment_names of this GetExperimentResultsRequest.
        :rtype: List[str]
        """
        return self._treatment_names

    @treatment_names.setter
    def treatment_names(self, treatment_names):
        """Sets the treatment_names of this GetExperimentResultsRequest.

        The names of the experiment treatments that you want to see the results for.

        :param treatment_names: The treatment_names of this GetExperimentResultsRequest.
        :type treatment_names: List[str]
        """
        if treatment_names is None:
            raise ValueError("Invalid value for `treatment_names`, must not be `None`")
        if treatment_names is not None and len(treatment_names) > 5:
            raise ValueError("Invalid value for `treatment_names`, number of items must be less than or equal to `5`")
        if treatment_names is not None and len(treatment_names) < 1:
            raise ValueError("Invalid value for `treatment_names`, number of items must be greater than or equal to `1`")

        self._treatment_names = treatment_names
