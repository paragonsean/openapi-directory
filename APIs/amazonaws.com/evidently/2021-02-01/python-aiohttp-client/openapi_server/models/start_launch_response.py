# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_launch_response_launch import StartLaunchResponseLaunch
from openapi_server import util


class StartLaunchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, launch: StartLaunchResponseLaunch=None):
        """StartLaunchResponse - a model defined in OpenAPI

        :param launch: The launch of this StartLaunchResponse.
        """
        self.openapi_types = {
            'launch': StartLaunchResponseLaunch
        }

        self.attribute_map = {
            'launch': 'launch'
        }

        self._launch = launch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartLaunchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartLaunchResponse of this StartLaunchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def launch(self):
        """Gets the launch of this StartLaunchResponse.


        :return: The launch of this StartLaunchResponse.
        :rtype: StartLaunchResponseLaunch
        """
        return self._launch

    @launch.setter
    def launch(self, launch):
        """Sets the launch of this StartLaunchResponse.


        :param launch: The launch of this StartLaunchResponse.
        :type launch: StartLaunchResponseLaunch
        """
        if launch is None:
            raise ValueError("Invalid value for `launch`, must not be `None`")

        self._launch = launch
