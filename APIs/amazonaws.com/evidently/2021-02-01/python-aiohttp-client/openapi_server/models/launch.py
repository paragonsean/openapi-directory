# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.launch_execution import LaunchExecution
from openapi_server.models.launch_scheduled_splits_definition import LaunchScheduledSplitsDefinition
from openapi_server.models.launch_status import LaunchStatus
from openapi_server.models.launch_type import LaunchType
from openapi_server import util


class Launch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_time: datetime=None, description: str=None, execution: LaunchExecution=None, groups: List=None, last_updated_time: datetime=None, metric_monitors: List=None, name: str=None, project: str=None, randomization_salt: str=None, scheduled_splits_definition: LaunchScheduledSplitsDefinition=None, status: LaunchStatus=None, status_reason: str=None, tags: Dict=None, type: LaunchType=None):
        """Launch - a model defined in OpenAPI

        :param arn: The arn of this Launch.
        :param created_time: The created_time of this Launch.
        :param description: The description of this Launch.
        :param execution: The execution of this Launch.
        :param groups: The groups of this Launch.
        :param last_updated_time: The last_updated_time of this Launch.
        :param metric_monitors: The metric_monitors of this Launch.
        :param name: The name of this Launch.
        :param project: The project of this Launch.
        :param randomization_salt: The randomization_salt of this Launch.
        :param scheduled_splits_definition: The scheduled_splits_definition of this Launch.
        :param status: The status of this Launch.
        :param status_reason: The status_reason of this Launch.
        :param tags: The tags of this Launch.
        :param type: The type of this Launch.
        """
        self.openapi_types = {
            'arn': str,
            'created_time': datetime,
            'description': str,
            'execution': LaunchExecution,
            'groups': List,
            'last_updated_time': datetime,
            'metric_monitors': List,
            'name': str,
            'project': str,
            'randomization_salt': str,
            'scheduled_splits_definition': LaunchScheduledSplitsDefinition,
            'status': LaunchStatus,
            'status_reason': str,
            'tags': Dict,
            'type': LaunchType
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_time': 'createdTime',
            'description': 'description',
            'execution': 'execution',
            'groups': 'groups',
            'last_updated_time': 'lastUpdatedTime',
            'metric_monitors': 'metricMonitors',
            'name': 'name',
            'project': 'project',
            'randomization_salt': 'randomizationSalt',
            'scheduled_splits_definition': 'scheduledSplitsDefinition',
            'status': 'status',
            'status_reason': 'statusReason',
            'tags': 'tags',
            'type': 'type'
        }

        self._arn = arn
        self._created_time = created_time
        self._description = description
        self._execution = execution
        self._groups = groups
        self._last_updated_time = last_updated_time
        self._metric_monitors = metric_monitors
        self._name = name
        self._project = project
        self._randomization_salt = randomization_salt
        self._scheduled_splits_definition = scheduled_splits_definition
        self._status = status
        self._status_reason = status_reason
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Launch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Launch of this Launch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this Launch.


        :return: The arn of this Launch.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Launch.


        :param arn: The arn of this Launch.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_time(self):
        """Gets the created_time of this Launch.


        :return: The created_time of this Launch.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Launch.


        :param created_time: The created_time of this Launch.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Launch.


        :return: The description of this Launch.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Launch.


        :param description: The description of this Launch.
        :type description: str
        """

        self._description = description

    @property
    def execution(self):
        """Gets the execution of this Launch.


        :return: The execution of this Launch.
        :rtype: LaunchExecution
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this Launch.


        :param execution: The execution of this Launch.
        :type execution: LaunchExecution
        """

        self._execution = execution

    @property
    def groups(self):
        """Gets the groups of this Launch.


        :return: The groups of this Launch.
        :rtype: List
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Launch.


        :param groups: The groups of this Launch.
        :type groups: List
        """

        self._groups = groups

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this Launch.


        :return: The last_updated_time of this Launch.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this Launch.


        :param last_updated_time: The last_updated_time of this Launch.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def metric_monitors(self):
        """Gets the metric_monitors of this Launch.


        :return: The metric_monitors of this Launch.
        :rtype: List
        """
        return self._metric_monitors

    @metric_monitors.setter
    def metric_monitors(self, metric_monitors):
        """Sets the metric_monitors of this Launch.


        :param metric_monitors: The metric_monitors of this Launch.
        :type metric_monitors: List
        """

        self._metric_monitors = metric_monitors

    @property
    def name(self):
        """Gets the name of this Launch.


        :return: The name of this Launch.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Launch.


        :param name: The name of this Launch.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project(self):
        """Gets the project of this Launch.


        :return: The project of this Launch.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this Launch.


        :param project: The project of this Launch.
        :type project: str
        """

        self._project = project

    @property
    def randomization_salt(self):
        """Gets the randomization_salt of this Launch.


        :return: The randomization_salt of this Launch.
        :rtype: str
        """
        return self._randomization_salt

    @randomization_salt.setter
    def randomization_salt(self, randomization_salt):
        """Sets the randomization_salt of this Launch.


        :param randomization_salt: The randomization_salt of this Launch.
        :type randomization_salt: str
        """

        self._randomization_salt = randomization_salt

    @property
    def scheduled_splits_definition(self):
        """Gets the scheduled_splits_definition of this Launch.


        :return: The scheduled_splits_definition of this Launch.
        :rtype: LaunchScheduledSplitsDefinition
        """
        return self._scheduled_splits_definition

    @scheduled_splits_definition.setter
    def scheduled_splits_definition(self, scheduled_splits_definition):
        """Sets the scheduled_splits_definition of this Launch.


        :param scheduled_splits_definition: The scheduled_splits_definition of this Launch.
        :type scheduled_splits_definition: LaunchScheduledSplitsDefinition
        """

        self._scheduled_splits_definition = scheduled_splits_definition

    @property
    def status(self):
        """Gets the status of this Launch.


        :return: The status of this Launch.
        :rtype: LaunchStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Launch.


        :param status: The status of this Launch.
        :type status: LaunchStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this Launch.


        :return: The status_reason of this Launch.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this Launch.


        :param status_reason: The status_reason of this Launch.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def tags(self):
        """Gets the tags of this Launch.


        :return: The tags of this Launch.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Launch.


        :param tags: The tags of this Launch.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this Launch.


        :return: The type of this Launch.
        :rtype: LaunchType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Launch.


        :param type: The type of this Launch.
        :type type: LaunchType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
