# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_evaluation_strategy import FeatureEvaluationStrategy
from openapi_server.models.feature_status import FeatureStatus
from openapi_server.models.variation_value_type import VariationValueType
from openapi_server import util


class CreateFeatureResponseFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_time: datetime=None, default_variation: str=None, description: str=None, entity_overrides: Dict=None, evaluation_rules: List=None, evaluation_strategy: FeatureEvaluationStrategy=None, last_updated_time: datetime=None, name: str=None, project: str=None, status: FeatureStatus=None, tags: Dict=None, value_type: VariationValueType=None, variations: List=None):
        """CreateFeatureResponseFeature - a model defined in OpenAPI

        :param arn: The arn of this CreateFeatureResponseFeature.
        :param created_time: The created_time of this CreateFeatureResponseFeature.
        :param default_variation: The default_variation of this CreateFeatureResponseFeature.
        :param description: The description of this CreateFeatureResponseFeature.
        :param entity_overrides: The entity_overrides of this CreateFeatureResponseFeature.
        :param evaluation_rules: The evaluation_rules of this CreateFeatureResponseFeature.
        :param evaluation_strategy: The evaluation_strategy of this CreateFeatureResponseFeature.
        :param last_updated_time: The last_updated_time of this CreateFeatureResponseFeature.
        :param name: The name of this CreateFeatureResponseFeature.
        :param project: The project of this CreateFeatureResponseFeature.
        :param status: The status of this CreateFeatureResponseFeature.
        :param tags: The tags of this CreateFeatureResponseFeature.
        :param value_type: The value_type of this CreateFeatureResponseFeature.
        :param variations: The variations of this CreateFeatureResponseFeature.
        """
        self.openapi_types = {
            'arn': str,
            'created_time': datetime,
            'default_variation': str,
            'description': str,
            'entity_overrides': Dict,
            'evaluation_rules': List,
            'evaluation_strategy': FeatureEvaluationStrategy,
            'last_updated_time': datetime,
            'name': str,
            'project': str,
            'status': FeatureStatus,
            'tags': Dict,
            'value_type': VariationValueType,
            'variations': List
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_time': 'createdTime',
            'default_variation': 'defaultVariation',
            'description': 'description',
            'entity_overrides': 'entityOverrides',
            'evaluation_rules': 'evaluationRules',
            'evaluation_strategy': 'evaluationStrategy',
            'last_updated_time': 'lastUpdatedTime',
            'name': 'name',
            'project': 'project',
            'status': 'status',
            'tags': 'tags',
            'value_type': 'valueType',
            'variations': 'variations'
        }

        self._arn = arn
        self._created_time = created_time
        self._default_variation = default_variation
        self._description = description
        self._entity_overrides = entity_overrides
        self._evaluation_rules = evaluation_rules
        self._evaluation_strategy = evaluation_strategy
        self._last_updated_time = last_updated_time
        self._name = name
        self._project = project
        self._status = status
        self._tags = tags
        self._value_type = value_type
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFeatureResponseFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFeatureResponse_feature of this CreateFeatureResponseFeature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateFeatureResponseFeature.


        :return: The arn of this CreateFeatureResponseFeature.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateFeatureResponseFeature.


        :param arn: The arn of this CreateFeatureResponseFeature.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_time(self):
        """Gets the created_time of this CreateFeatureResponseFeature.


        :return: The created_time of this CreateFeatureResponseFeature.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CreateFeatureResponseFeature.


        :param created_time: The created_time of this CreateFeatureResponseFeature.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def default_variation(self):
        """Gets the default_variation of this CreateFeatureResponseFeature.


        :return: The default_variation of this CreateFeatureResponseFeature.
        :rtype: str
        """
        return self._default_variation

    @default_variation.setter
    def default_variation(self, default_variation):
        """Sets the default_variation of this CreateFeatureResponseFeature.


        :param default_variation: The default_variation of this CreateFeatureResponseFeature.
        :type default_variation: str
        """

        self._default_variation = default_variation

    @property
    def description(self):
        """Gets the description of this CreateFeatureResponseFeature.


        :return: The description of this CreateFeatureResponseFeature.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFeatureResponseFeature.


        :param description: The description of this CreateFeatureResponseFeature.
        :type description: str
        """

        self._description = description

    @property
    def entity_overrides(self):
        """Gets the entity_overrides of this CreateFeatureResponseFeature.


        :return: The entity_overrides of this CreateFeatureResponseFeature.
        :rtype: Dict
        """
        return self._entity_overrides

    @entity_overrides.setter
    def entity_overrides(self, entity_overrides):
        """Sets the entity_overrides of this CreateFeatureResponseFeature.


        :param entity_overrides: The entity_overrides of this CreateFeatureResponseFeature.
        :type entity_overrides: Dict
        """

        self._entity_overrides = entity_overrides

    @property
    def evaluation_rules(self):
        """Gets the evaluation_rules of this CreateFeatureResponseFeature.


        :return: The evaluation_rules of this CreateFeatureResponseFeature.
        :rtype: List
        """
        return self._evaluation_rules

    @evaluation_rules.setter
    def evaluation_rules(self, evaluation_rules):
        """Sets the evaluation_rules of this CreateFeatureResponseFeature.


        :param evaluation_rules: The evaluation_rules of this CreateFeatureResponseFeature.
        :type evaluation_rules: List
        """

        self._evaluation_rules = evaluation_rules

    @property
    def evaluation_strategy(self):
        """Gets the evaluation_strategy of this CreateFeatureResponseFeature.


        :return: The evaluation_strategy of this CreateFeatureResponseFeature.
        :rtype: FeatureEvaluationStrategy
        """
        return self._evaluation_strategy

    @evaluation_strategy.setter
    def evaluation_strategy(self, evaluation_strategy):
        """Sets the evaluation_strategy of this CreateFeatureResponseFeature.


        :param evaluation_strategy: The evaluation_strategy of this CreateFeatureResponseFeature.
        :type evaluation_strategy: FeatureEvaluationStrategy
        """
        if evaluation_strategy is None:
            raise ValueError("Invalid value for `evaluation_strategy`, must not be `None`")

        self._evaluation_strategy = evaluation_strategy

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this CreateFeatureResponseFeature.


        :return: The last_updated_time of this CreateFeatureResponseFeature.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this CreateFeatureResponseFeature.


        :param last_updated_time: The last_updated_time of this CreateFeatureResponseFeature.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this CreateFeatureResponseFeature.


        :return: The name of this CreateFeatureResponseFeature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFeatureResponseFeature.


        :param name: The name of this CreateFeatureResponseFeature.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project(self):
        """Gets the project of this CreateFeatureResponseFeature.


        :return: The project of this CreateFeatureResponseFeature.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CreateFeatureResponseFeature.


        :param project: The project of this CreateFeatureResponseFeature.
        :type project: str
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this CreateFeatureResponseFeature.


        :return: The status of this CreateFeatureResponseFeature.
        :rtype: FeatureStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateFeatureResponseFeature.


        :param status: The status of this CreateFeatureResponseFeature.
        :type status: FeatureStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this CreateFeatureResponseFeature.


        :return: The tags of this CreateFeatureResponseFeature.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFeatureResponseFeature.


        :param tags: The tags of this CreateFeatureResponseFeature.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def value_type(self):
        """Gets the value_type of this CreateFeatureResponseFeature.


        :return: The value_type of this CreateFeatureResponseFeature.
        :rtype: VariationValueType
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this CreateFeatureResponseFeature.


        :param value_type: The value_type of this CreateFeatureResponseFeature.
        :type value_type: VariationValueType
        """
        if value_type is None:
            raise ValueError("Invalid value for `value_type`, must not be `None`")

        self._value_type = value_type

    @property
    def variations(self):
        """Gets the variations of this CreateFeatureResponseFeature.


        :return: The variations of this CreateFeatureResponseFeature.
        :rtype: List
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this CreateFeatureResponseFeature.


        :param variations: The variations of this CreateFeatureResponseFeature.
        :type variations: List
        """
        if variations is None:
            raise ValueError("Invalid value for `variations`, must not be `None`")

        self._variations = variations
