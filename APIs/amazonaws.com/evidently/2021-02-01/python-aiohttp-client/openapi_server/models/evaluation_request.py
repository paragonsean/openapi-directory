# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvaluationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity_id: str=None, evaluation_context: str=None, feature: str=None):
        """EvaluationRequest - a model defined in OpenAPI

        :param entity_id: The entity_id of this EvaluationRequest.
        :param evaluation_context: The evaluation_context of this EvaluationRequest.
        :param feature: The feature of this EvaluationRequest.
        """
        self.openapi_types = {
            'entity_id': str,
            'evaluation_context': str,
            'feature': str
        }

        self.attribute_map = {
            'entity_id': 'entityId',
            'evaluation_context': 'evaluationContext',
            'feature': 'feature'
        }

        self._entity_id = entity_id
        self._evaluation_context = evaluation_context
        self._feature = feature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvaluationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EvaluationRequest of this EvaluationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity_id(self):
        """Gets the entity_id of this EvaluationRequest.


        :return: The entity_id of this EvaluationRequest.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this EvaluationRequest.


        :param entity_id: The entity_id of this EvaluationRequest.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id

    @property
    def evaluation_context(self):
        """Gets the evaluation_context of this EvaluationRequest.


        :return: The evaluation_context of this EvaluationRequest.
        :rtype: str
        """
        return self._evaluation_context

    @evaluation_context.setter
    def evaluation_context(self, evaluation_context):
        """Sets the evaluation_context of this EvaluationRequest.


        :param evaluation_context: The evaluation_context of this EvaluationRequest.
        :type evaluation_context: str
        """

        self._evaluation_context = evaluation_context

    @property
    def feature(self):
        """Gets the feature of this EvaluationRequest.


        :return: The feature of this EvaluationRequest.
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this EvaluationRequest.


        :param feature: The feature of this EvaluationRequest.
        :type feature: str
        """
        if feature is None:
            raise ValueError("Invalid value for `feature`, must not be `None`")

        self._feature = feature
