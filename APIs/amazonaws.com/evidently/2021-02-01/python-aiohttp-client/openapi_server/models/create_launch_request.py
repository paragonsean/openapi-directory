# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_launch_request_scheduled_splits_config import CreateLaunchRequestScheduledSplitsConfig
from openapi_server.models.launch_group_config import LaunchGroupConfig
from openapi_server.models.metric_monitor_config import MetricMonitorConfig
import re
from openapi_server import util


class CreateLaunchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, groups: List[LaunchGroupConfig]=None, metric_monitors: List[MetricMonitorConfig]=None, name: str=None, randomization_salt: str=None, scheduled_splits_config: CreateLaunchRequestScheduledSplitsConfig=None, tags: Dict[str, str]=None):
        """CreateLaunchRequest - a model defined in OpenAPI

        :param description: The description of this CreateLaunchRequest.
        :param groups: The groups of this CreateLaunchRequest.
        :param metric_monitors: The metric_monitors of this CreateLaunchRequest.
        :param name: The name of this CreateLaunchRequest.
        :param randomization_salt: The randomization_salt of this CreateLaunchRequest.
        :param scheduled_splits_config: The scheduled_splits_config of this CreateLaunchRequest.
        :param tags: The tags of this CreateLaunchRequest.
        """
        self.openapi_types = {
            'description': str,
            'groups': List[LaunchGroupConfig],
            'metric_monitors': List[MetricMonitorConfig],
            'name': str,
            'randomization_salt': str,
            'scheduled_splits_config': CreateLaunchRequestScheduledSplitsConfig,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'groups': 'groups',
            'metric_monitors': 'metricMonitors',
            'name': 'name',
            'randomization_salt': 'randomizationSalt',
            'scheduled_splits_config': 'scheduledSplitsConfig',
            'tags': 'tags'
        }

        self._description = description
        self._groups = groups
        self._metric_monitors = metric_monitors
        self._name = name
        self._randomization_salt = randomization_salt
        self._scheduled_splits_config = scheduled_splits_config
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLaunchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLaunch_request of this CreateLaunchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateLaunchRequest.

        An optional description for the launch.

        :return: The description of this CreateLaunchRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateLaunchRequest.

        An optional description for the launch.

        :param description: The description of this CreateLaunchRequest.
        :type description: str
        """
        if description is not None and len(description) > 160:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `160`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*/`")

        self._description = description

    @property
    def groups(self):
        """Gets the groups of this CreateLaunchRequest.

        An array of structures that contains the feature and variations that are to be used for the launch.

        :return: The groups of this CreateLaunchRequest.
        :rtype: List[LaunchGroupConfig]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this CreateLaunchRequest.

        An array of structures that contains the feature and variations that are to be used for the launch.

        :param groups: The groups of this CreateLaunchRequest.
        :type groups: List[LaunchGroupConfig]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")
        if groups is not None and len(groups) > 5:
            raise ValueError("Invalid value for `groups`, number of items must be less than or equal to `5`")
        if groups is not None and len(groups) < 1:
            raise ValueError("Invalid value for `groups`, number of items must be greater than or equal to `1`")

        self._groups = groups

    @property
    def metric_monitors(self):
        """Gets the metric_monitors of this CreateLaunchRequest.

        An array of structures that define the metrics that will be used to monitor the launch performance.

        :return: The metric_monitors of this CreateLaunchRequest.
        :rtype: List[MetricMonitorConfig]
        """
        return self._metric_monitors

    @metric_monitors.setter
    def metric_monitors(self, metric_monitors):
        """Sets the metric_monitors of this CreateLaunchRequest.

        An array of structures that define the metrics that will be used to monitor the launch performance.

        :param metric_monitors: The metric_monitors of this CreateLaunchRequest.
        :type metric_monitors: List[MetricMonitorConfig]
        """
        if metric_monitors is not None and len(metric_monitors) > 3:
            raise ValueError("Invalid value for `metric_monitors`, number of items must be less than or equal to `3`")
        if metric_monitors is not None and len(metric_monitors) < 0:
            raise ValueError("Invalid value for `metric_monitors`, number of items must be greater than or equal to `0`")

        self._metric_monitors = metric_monitors

    @property
    def name(self):
        """Gets the name of this CreateLaunchRequest.

        The name for the new launch.

        :return: The name of this CreateLaunchRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateLaunchRequest.

        The name for the new launch.

        :param name: The name of this CreateLaunchRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[-a-zA-Z0-9._]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[-a-zA-Z0-9._]*$/`")

        self._name = name

    @property
    def randomization_salt(self):
        """Gets the randomization_salt of this CreateLaunchRequest.

        When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.

        :return: The randomization_salt of this CreateLaunchRequest.
        :rtype: str
        """
        return self._randomization_salt

    @randomization_salt.setter
    def randomization_salt(self, randomization_salt):
        """Sets the randomization_salt of this CreateLaunchRequest.

        When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the launch name as the <code>randomizationSalt</code>.

        :param randomization_salt: The randomization_salt of this CreateLaunchRequest.
        :type randomization_salt: str
        """
        if randomization_salt is not None and len(randomization_salt) > 127:
            raise ValueError("Invalid value for `randomization_salt`, length must be less than or equal to `127`")
        if randomization_salt is not None and len(randomization_salt) < 0:
            raise ValueError("Invalid value for `randomization_salt`, length must be greater than or equal to `0`")
        if randomization_salt is not None and not re.search(r'.*', randomization_salt):
            raise ValueError("Invalid value for `randomization_salt`, must be a follow pattern or equal to `/.*/`")

        self._randomization_salt = randomization_salt

    @property
    def scheduled_splits_config(self):
        """Gets the scheduled_splits_config of this CreateLaunchRequest.


        :return: The scheduled_splits_config of this CreateLaunchRequest.
        :rtype: CreateLaunchRequestScheduledSplitsConfig
        """
        return self._scheduled_splits_config

    @scheduled_splits_config.setter
    def scheduled_splits_config(self, scheduled_splits_config):
        """Sets the scheduled_splits_config of this CreateLaunchRequest.


        :param scheduled_splits_config: The scheduled_splits_config of this CreateLaunchRequest.
        :type scheduled_splits_config: CreateLaunchRequestScheduledSplitsConfig
        """

        self._scheduled_splits_config = scheduled_splits_config

    @property
    def tags(self):
        """Gets the tags of this CreateLaunchRequest.

        <p>Assigns one or more tags (key-value pairs) to the launch.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a launch.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :return: The tags of this CreateLaunchRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLaunchRequest.

        <p>Assigns one or more tags (key-value pairs) to the launch.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a launch.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :param tags: The tags of this CreateLaunchRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
