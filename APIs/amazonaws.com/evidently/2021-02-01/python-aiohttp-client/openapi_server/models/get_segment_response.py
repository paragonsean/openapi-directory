# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_segment_response_segment import GetSegmentResponseSegment
from openapi_server import util


class GetSegmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segment: GetSegmentResponseSegment=None):
        """GetSegmentResponse - a model defined in OpenAPI

        :param segment: The segment of this GetSegmentResponse.
        """
        self.openapi_types = {
            'segment': GetSegmentResponseSegment
        }

        self.attribute_map = {
            'segment': 'segment'
        }

        self._segment = segment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetSegmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetSegmentResponse of this GetSegmentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segment(self):
        """Gets the segment of this GetSegmentResponse.


        :return: The segment of this GetSegmentResponse.
        :rtype: GetSegmentResponseSegment
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this GetSegmentResponse.


        :param segment: The segment of this GetSegmentResponse.
        :type segment: GetSegmentResponseSegment
        """
        if segment is None:
            raise ValueError("Invalid value for `segment`, must not be `None`")

        self._segment = segment
