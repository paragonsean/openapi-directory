# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestSegmentPatternRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pattern: str=None, payload: str=None):
        """TestSegmentPatternRequest - a model defined in OpenAPI

        :param pattern: The pattern of this TestSegmentPatternRequest.
        :param payload: The payload of this TestSegmentPatternRequest.
        """
        self.openapi_types = {
            'pattern': str,
            'payload': str
        }

        self.attribute_map = {
            'pattern': 'pattern',
            'payload': 'payload'
        }

        self._pattern = pattern
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestSegmentPatternRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestSegmentPattern_request of this TestSegmentPatternRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pattern(self):
        """Gets the pattern of this TestSegmentPatternRequest.

        The pattern to test.

        :return: The pattern of this TestSegmentPatternRequest.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this TestSegmentPatternRequest.

        The pattern to test.

        :param pattern: The pattern of this TestSegmentPatternRequest.
        :type pattern: str
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")
        if pattern is not None and len(pattern) > 1024:
            raise ValueError("Invalid value for `pattern`, length must be less than or equal to `1024`")
        if pattern is not None and len(pattern) < 1:
            raise ValueError("Invalid value for `pattern`, length must be greater than or equal to `1`")

        self._pattern = pattern

    @property
    def payload(self):
        """Gets the payload of this TestSegmentPatternRequest.

        A sample <code>evaluationContext</code> JSON block to test against the specified pattern.

        :return: The payload of this TestSegmentPatternRequest.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this TestSegmentPatternRequest.

        A sample <code>evaluationContext</code> JSON block to test against the specified pattern.

        :param payload: The payload of this TestSegmentPatternRequest.
        :type payload: str
        """
        if payload is None:
            raise ValueError("Invalid value for `payload`, must not be `None`")

        self._payload = payload
