# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.variation_config import VariationConfig
import re
from openapi_server import util


class CreateFeatureRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_variation: str=None, description: str=None, entity_overrides: Dict[str, str]=None, evaluation_strategy: str=None, name: str=None, tags: Dict[str, str]=None, variations: List[VariationConfig]=None):
        """CreateFeatureRequest - a model defined in OpenAPI

        :param default_variation: The default_variation of this CreateFeatureRequest.
        :param description: The description of this CreateFeatureRequest.
        :param entity_overrides: The entity_overrides of this CreateFeatureRequest.
        :param evaluation_strategy: The evaluation_strategy of this CreateFeatureRequest.
        :param name: The name of this CreateFeatureRequest.
        :param tags: The tags of this CreateFeatureRequest.
        :param variations: The variations of this CreateFeatureRequest.
        """
        self.openapi_types = {
            'default_variation': str,
            'description': str,
            'entity_overrides': Dict[str, str],
            'evaluation_strategy': str,
            'name': str,
            'tags': Dict[str, str],
            'variations': List[VariationConfig]
        }

        self.attribute_map = {
            'default_variation': 'defaultVariation',
            'description': 'description',
            'entity_overrides': 'entityOverrides',
            'evaluation_strategy': 'evaluationStrategy',
            'name': 'name',
            'tags': 'tags',
            'variations': 'variations'
        }

        self._default_variation = default_variation
        self._description = description
        self._entity_overrides = entity_overrides
        self._evaluation_strategy = evaluation_strategy
        self._name = name
        self._tags = tags
        self._variations = variations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFeatureRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFeature_request of this CreateFeatureRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_variation(self):
        """Gets the default_variation of this CreateFeatureRequest.

        <p>The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p> <p>This variation must also be listed in the <code>variations</code> structure.</p> <p>If you omit <code>defaultVariation</code>, the first variation listed in the <code>variations</code> structure is used as the default variation.</p>

        :return: The default_variation of this CreateFeatureRequest.
        :rtype: str
        """
        return self._default_variation

    @default_variation.setter
    def default_variation(self, default_variation):
        """Sets the default_variation of this CreateFeatureRequest.

        <p>The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.</p> <p>This variation must also be listed in the <code>variations</code> structure.</p> <p>If you omit <code>defaultVariation</code>, the first variation listed in the <code>variations</code> structure is used as the default variation.</p>

        :param default_variation: The default_variation of this CreateFeatureRequest.
        :type default_variation: str
        """
        if default_variation is not None and len(default_variation) > 127:
            raise ValueError("Invalid value for `default_variation`, length must be less than or equal to `127`")
        if default_variation is not None and len(default_variation) < 1:
            raise ValueError("Invalid value for `default_variation`, length must be greater than or equal to `1`")
        if default_variation is not None and not re.search(r'^[-a-zA-Z0-9._]*$', default_variation):
            raise ValueError("Invalid value for `default_variation`, must be a follow pattern or equal to `/^[-a-zA-Z0-9._]*$/`")

        self._default_variation = default_variation

    @property
    def description(self):
        """Gets the description of this CreateFeatureRequest.

        An optional description of the feature.

        :return: The description of this CreateFeatureRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFeatureRequest.

        An optional description of the feature.

        :param description: The description of this CreateFeatureRequest.
        :type description: str
        """
        if description is not None and len(description) > 160:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `160`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*/`")

        self._description = description

    @property
    def entity_overrides(self):
        """Gets the entity_overrides of this CreateFeatureRequest.

        <p>Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>

        :return: The entity_overrides of this CreateFeatureRequest.
        :rtype: Dict[str, str]
        """
        return self._entity_overrides

    @entity_overrides.setter
    def entity_overrides(self, entity_overrides):
        """Sets the entity_overrides of this CreateFeatureRequest.

        <p>Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>

        :param entity_overrides: The entity_overrides of this CreateFeatureRequest.
        :type entity_overrides: Dict[str, str]
        """
        if entity_overrides is not None and len(entity_overrides) > 2500:
            raise ValueError("Invalid value for `entity_overrides`, number of items must be less than or equal to `2500`")
        if entity_overrides is not None and len(entity_overrides) < 0:
            raise ValueError("Invalid value for `entity_overrides`, number of items must be greater than or equal to `0`")

        self._entity_overrides = entity_overrides

    @property
    def evaluation_strategy(self):
        """Gets the evaluation_strategy of this CreateFeatureRequest.

        Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.

        :return: The evaluation_strategy of this CreateFeatureRequest.
        :rtype: str
        """
        return self._evaluation_strategy

    @evaluation_strategy.setter
    def evaluation_strategy(self, evaluation_strategy):
        """Sets the evaluation_strategy of this CreateFeatureRequest.

        Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.

        :param evaluation_strategy: The evaluation_strategy of this CreateFeatureRequest.
        :type evaluation_strategy: str
        """
        allowed_values = ["ALL_RULES", "DEFAULT_VARIATION"]  # noqa: E501
        if evaluation_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `evaluation_strategy` ({0}), must be one of {1}"
                .format(evaluation_strategy, allowed_values)
            )

        self._evaluation_strategy = evaluation_strategy

    @property
    def name(self):
        """Gets the name of this CreateFeatureRequest.

        The name for the new feature.

        :return: The name of this CreateFeatureRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFeatureRequest.

        The name for the new feature.

        :param name: The name of this CreateFeatureRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[-a-zA-Z0-9._]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[-a-zA-Z0-9._]*$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateFeatureRequest.

        <p>Assigns one or more tags (key-value pairs) to the feature.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a feature.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :return: The tags of this CreateFeatureRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateFeatureRequest.

        <p>Assigns one or more tags (key-value pairs) to the feature.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a feature.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :param tags: The tags of this CreateFeatureRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def variations(self):
        """Gets the variations of this CreateFeatureRequest.

        An array of structures that contain the configuration of the feature's different variations.

        :return: The variations of this CreateFeatureRequest.
        :rtype: List[VariationConfig]
        """
        return self._variations

    @variations.setter
    def variations(self, variations):
        """Sets the variations of this CreateFeatureRequest.

        An array of structures that contain the configuration of the feature's different variations.

        :param variations: The variations of this CreateFeatureRequest.
        :type variations: List[VariationConfig]
        """
        if variations is None:
            raise ValueError("Invalid value for `variations`, must not be `None`")
        if variations is not None and len(variations) > 5:
            raise ValueError("Invalid value for `variations`, number of items must be less than or equal to `5`")
        if variations is not None and len(variations) < 1:
            raise ValueError("Invalid value for `variations`, number of items must be greater than or equal to `1`")

        self._variations = variations
