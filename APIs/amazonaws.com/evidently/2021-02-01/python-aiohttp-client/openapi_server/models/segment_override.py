# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evaluation_order: int=None, segment: str=None, weights: Dict=None):
        """SegmentOverride - a model defined in OpenAPI

        :param evaluation_order: The evaluation_order of this SegmentOverride.
        :param segment: The segment of this SegmentOverride.
        :param weights: The weights of this SegmentOverride.
        """
        self.openapi_types = {
            'evaluation_order': int,
            'segment': str,
            'weights': Dict
        }

        self.attribute_map = {
            'evaluation_order': 'evaluationOrder',
            'segment': 'segment',
            'weights': 'weights'
        }

        self._evaluation_order = evaluation_order
        self._segment = segment
        self._weights = weights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentOverride of this SegmentOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evaluation_order(self):
        """Gets the evaluation_order of this SegmentOverride.


        :return: The evaluation_order of this SegmentOverride.
        :rtype: int
        """
        return self._evaluation_order

    @evaluation_order.setter
    def evaluation_order(self, evaluation_order):
        """Sets the evaluation_order of this SegmentOverride.


        :param evaluation_order: The evaluation_order of this SegmentOverride.
        :type evaluation_order: int
        """
        if evaluation_order is None:
            raise ValueError("Invalid value for `evaluation_order`, must not be `None`")

        self._evaluation_order = evaluation_order

    @property
    def segment(self):
        """Gets the segment of this SegmentOverride.


        :return: The segment of this SegmentOverride.
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this SegmentOverride.


        :param segment: The segment of this SegmentOverride.
        :type segment: str
        """
        if segment is None:
            raise ValueError("Invalid value for `segment`, must not be `None`")

        self._segment = segment

    @property
    def weights(self):
        """Gets the weights of this SegmentOverride.


        :return: The weights of this SegmentOverride.
        :rtype: Dict
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """Sets the weights of this SegmentOverride.


        :param weights: The weights of this SegmentOverride.
        :type weights: Dict
        """
        if weights is None:
            raise ValueError("Invalid value for `weights`, must not be `None`")

        self._weights = weights
