# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TreatmentConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, feature: str=None, name: str=None, variation: str=None):
        """TreatmentConfig - a model defined in OpenAPI

        :param description: The description of this TreatmentConfig.
        :param feature: The feature of this TreatmentConfig.
        :param name: The name of this TreatmentConfig.
        :param variation: The variation of this TreatmentConfig.
        """
        self.openapi_types = {
            'description': str,
            'feature': str,
            'name': str,
            'variation': str
        }

        self.attribute_map = {
            'description': 'description',
            'feature': 'feature',
            'name': 'name',
            'variation': 'variation'
        }

        self._description = description
        self._feature = feature
        self._name = name
        self._variation = variation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TreatmentConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TreatmentConfig of this TreatmentConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this TreatmentConfig.


        :return: The description of this TreatmentConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TreatmentConfig.


        :param description: The description of this TreatmentConfig.
        :type description: str
        """

        self._description = description

    @property
    def feature(self):
        """Gets the feature of this TreatmentConfig.


        :return: The feature of this TreatmentConfig.
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this TreatmentConfig.


        :param feature: The feature of this TreatmentConfig.
        :type feature: str
        """
        if feature is None:
            raise ValueError("Invalid value for `feature`, must not be `None`")

        self._feature = feature

    @property
    def name(self):
        """Gets the name of this TreatmentConfig.


        :return: The name of this TreatmentConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TreatmentConfig.


        :param name: The name of this TreatmentConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def variation(self):
        """Gets the variation of this TreatmentConfig.


        :return: The variation of this TreatmentConfig.
        :rtype: str
        """
        return self._variation

    @variation.setter
    def variation(self, variation):
        """Sets the variation of this TreatmentConfig.


        :param variation: The variation of this TreatmentConfig.
        :type variation: str
        """
        if variation is None:
            raise ValueError("Invalid value for `variation`, must not be `None`")

        self._variation = variation
