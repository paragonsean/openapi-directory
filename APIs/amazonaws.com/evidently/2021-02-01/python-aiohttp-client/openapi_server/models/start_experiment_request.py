# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_complete_time: datetime=None):
        """StartExperimentRequest - a model defined in OpenAPI

        :param analysis_complete_time: The analysis_complete_time of this StartExperimentRequest.
        """
        self.openapi_types = {
            'analysis_complete_time': datetime
        }

        self.attribute_map = {
            'analysis_complete_time': 'analysisCompleteTime'
        }

        self._analysis_complete_time = analysis_complete_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartExperiment_request of this StartExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_complete_time(self):
        """Gets the analysis_complete_time of this StartExperimentRequest.

        The date and time to end the experiment. This must be no more than 30 days after the experiment starts.

        :return: The analysis_complete_time of this StartExperimentRequest.
        :rtype: datetime
        """
        return self._analysis_complete_time

    @analysis_complete_time.setter
    def analysis_complete_time(self, analysis_complete_time):
        """Sets the analysis_complete_time of this StartExperimentRequest.

        The date and time to end the experiment. This must be no more than 30 days after the experiment starts.

        :param analysis_complete_time: The analysis_complete_time of this StartExperimentRequest.
        :type analysis_complete_time: datetime
        """
        if analysis_complete_time is None:
            raise ValueError("Invalid value for `analysis_complete_time`, must not be `None`")

        self._analysis_complete_time = analysis_complete_time
