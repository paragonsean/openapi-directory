# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature_evaluation_strategy import FeatureEvaluationStrategy
from openapi_server.models.feature_status import FeatureStatus
from openapi_server import util


class FeatureSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_time: datetime=None, default_variation: str=None, evaluation_rules: List=None, evaluation_strategy: FeatureEvaluationStrategy=None, last_updated_time: datetime=None, name: str=None, project: str=None, status: FeatureStatus=None, tags: Dict=None):
        """FeatureSummary - a model defined in OpenAPI

        :param arn: The arn of this FeatureSummary.
        :param created_time: The created_time of this FeatureSummary.
        :param default_variation: The default_variation of this FeatureSummary.
        :param evaluation_rules: The evaluation_rules of this FeatureSummary.
        :param evaluation_strategy: The evaluation_strategy of this FeatureSummary.
        :param last_updated_time: The last_updated_time of this FeatureSummary.
        :param name: The name of this FeatureSummary.
        :param project: The project of this FeatureSummary.
        :param status: The status of this FeatureSummary.
        :param tags: The tags of this FeatureSummary.
        """
        self.openapi_types = {
            'arn': str,
            'created_time': datetime,
            'default_variation': str,
            'evaluation_rules': List,
            'evaluation_strategy': FeatureEvaluationStrategy,
            'last_updated_time': datetime,
            'name': str,
            'project': str,
            'status': FeatureStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_time': 'createdTime',
            'default_variation': 'defaultVariation',
            'evaluation_rules': 'evaluationRules',
            'evaluation_strategy': 'evaluationStrategy',
            'last_updated_time': 'lastUpdatedTime',
            'name': 'name',
            'project': 'project',
            'status': 'status',
            'tags': 'tags'
        }

        self._arn = arn
        self._created_time = created_time
        self._default_variation = default_variation
        self._evaluation_rules = evaluation_rules
        self._evaluation_strategy = evaluation_strategy
        self._last_updated_time = last_updated_time
        self._name = name
        self._project = project
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureSummary of this FeatureSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this FeatureSummary.


        :return: The arn of this FeatureSummary.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this FeatureSummary.


        :param arn: The arn of this FeatureSummary.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_time(self):
        """Gets the created_time of this FeatureSummary.


        :return: The created_time of this FeatureSummary.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this FeatureSummary.


        :param created_time: The created_time of this FeatureSummary.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def default_variation(self):
        """Gets the default_variation of this FeatureSummary.


        :return: The default_variation of this FeatureSummary.
        :rtype: str
        """
        return self._default_variation

    @default_variation.setter
    def default_variation(self, default_variation):
        """Sets the default_variation of this FeatureSummary.


        :param default_variation: The default_variation of this FeatureSummary.
        :type default_variation: str
        """

        self._default_variation = default_variation

    @property
    def evaluation_rules(self):
        """Gets the evaluation_rules of this FeatureSummary.


        :return: The evaluation_rules of this FeatureSummary.
        :rtype: List
        """
        return self._evaluation_rules

    @evaluation_rules.setter
    def evaluation_rules(self, evaluation_rules):
        """Sets the evaluation_rules of this FeatureSummary.


        :param evaluation_rules: The evaluation_rules of this FeatureSummary.
        :type evaluation_rules: List
        """

        self._evaluation_rules = evaluation_rules

    @property
    def evaluation_strategy(self):
        """Gets the evaluation_strategy of this FeatureSummary.


        :return: The evaluation_strategy of this FeatureSummary.
        :rtype: FeatureEvaluationStrategy
        """
        return self._evaluation_strategy

    @evaluation_strategy.setter
    def evaluation_strategy(self, evaluation_strategy):
        """Sets the evaluation_strategy of this FeatureSummary.


        :param evaluation_strategy: The evaluation_strategy of this FeatureSummary.
        :type evaluation_strategy: FeatureEvaluationStrategy
        """
        if evaluation_strategy is None:
            raise ValueError("Invalid value for `evaluation_strategy`, must not be `None`")

        self._evaluation_strategy = evaluation_strategy

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this FeatureSummary.


        :return: The last_updated_time of this FeatureSummary.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this FeatureSummary.


        :param last_updated_time: The last_updated_time of this FeatureSummary.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def name(self):
        """Gets the name of this FeatureSummary.


        :return: The name of this FeatureSummary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FeatureSummary.


        :param name: The name of this FeatureSummary.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def project(self):
        """Gets the project of this FeatureSummary.


        :return: The project of this FeatureSummary.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this FeatureSummary.


        :param project: The project of this FeatureSummary.
        :type project: str
        """

        self._project = project

    @property
    def status(self):
        """Gets the status of this FeatureSummary.


        :return: The status of this FeatureSummary.
        :rtype: FeatureStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FeatureSummary.


        :param status: The status of this FeatureSummary.
        :type status: FeatureStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this FeatureSummary.


        :return: The tags of this FeatureSummary.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this FeatureSummary.


        :param tags: The tags of this FeatureSummary.
        :type tags: Dict
        """

        self._tags = tags
