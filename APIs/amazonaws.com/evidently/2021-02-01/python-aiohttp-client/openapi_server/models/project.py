# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_app_config_resource import ProjectAppConfigResource
from openapi_server.models.project_data_delivery import ProjectDataDelivery
from openapi_server.models.project_status import ProjectStatus
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_experiment_count: int=None, active_launch_count: int=None, app_config_resource: ProjectAppConfigResource=None, arn: str=None, created_time: datetime=None, data_delivery: ProjectDataDelivery=None, description: str=None, experiment_count: int=None, feature_count: int=None, last_updated_time: datetime=None, launch_count: int=None, name: str=None, status: ProjectStatus=None, tags: Dict=None):
        """Project - a model defined in OpenAPI

        :param active_experiment_count: The active_experiment_count of this Project.
        :param active_launch_count: The active_launch_count of this Project.
        :param app_config_resource: The app_config_resource of this Project.
        :param arn: The arn of this Project.
        :param created_time: The created_time of this Project.
        :param data_delivery: The data_delivery of this Project.
        :param description: The description of this Project.
        :param experiment_count: The experiment_count of this Project.
        :param feature_count: The feature_count of this Project.
        :param last_updated_time: The last_updated_time of this Project.
        :param launch_count: The launch_count of this Project.
        :param name: The name of this Project.
        :param status: The status of this Project.
        :param tags: The tags of this Project.
        """
        self.openapi_types = {
            'active_experiment_count': int,
            'active_launch_count': int,
            'app_config_resource': ProjectAppConfigResource,
            'arn': str,
            'created_time': datetime,
            'data_delivery': ProjectDataDelivery,
            'description': str,
            'experiment_count': int,
            'feature_count': int,
            'last_updated_time': datetime,
            'launch_count': int,
            'name': str,
            'status': ProjectStatus,
            'tags': Dict
        }

        self.attribute_map = {
            'active_experiment_count': 'activeExperimentCount',
            'active_launch_count': 'activeLaunchCount',
            'app_config_resource': 'appConfigResource',
            'arn': 'arn',
            'created_time': 'createdTime',
            'data_delivery': 'dataDelivery',
            'description': 'description',
            'experiment_count': 'experimentCount',
            'feature_count': 'featureCount',
            'last_updated_time': 'lastUpdatedTime',
            'launch_count': 'launchCount',
            'name': 'name',
            'status': 'status',
            'tags': 'tags'
        }

        self._active_experiment_count = active_experiment_count
        self._active_launch_count = active_launch_count
        self._app_config_resource = app_config_resource
        self._arn = arn
        self._created_time = created_time
        self._data_delivery = data_delivery
        self._description = description
        self._experiment_count = experiment_count
        self._feature_count = feature_count
        self._last_updated_time = last_updated_time
        self._launch_count = launch_count
        self._name = name
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project of this Project.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_experiment_count(self):
        """Gets the active_experiment_count of this Project.


        :return: The active_experiment_count of this Project.
        :rtype: int
        """
        return self._active_experiment_count

    @active_experiment_count.setter
    def active_experiment_count(self, active_experiment_count):
        """Sets the active_experiment_count of this Project.


        :param active_experiment_count: The active_experiment_count of this Project.
        :type active_experiment_count: int
        """

        self._active_experiment_count = active_experiment_count

    @property
    def active_launch_count(self):
        """Gets the active_launch_count of this Project.


        :return: The active_launch_count of this Project.
        :rtype: int
        """
        return self._active_launch_count

    @active_launch_count.setter
    def active_launch_count(self, active_launch_count):
        """Sets the active_launch_count of this Project.


        :param active_launch_count: The active_launch_count of this Project.
        :type active_launch_count: int
        """

        self._active_launch_count = active_launch_count

    @property
    def app_config_resource(self):
        """Gets the app_config_resource of this Project.


        :return: The app_config_resource of this Project.
        :rtype: ProjectAppConfigResource
        """
        return self._app_config_resource

    @app_config_resource.setter
    def app_config_resource(self, app_config_resource):
        """Sets the app_config_resource of this Project.


        :param app_config_resource: The app_config_resource of this Project.
        :type app_config_resource: ProjectAppConfigResource
        """

        self._app_config_resource = app_config_resource

    @property
    def arn(self):
        """Gets the arn of this Project.


        :return: The arn of this Project.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Project.


        :param arn: The arn of this Project.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_time(self):
        """Gets the created_time of this Project.


        :return: The created_time of this Project.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Project.


        :param created_time: The created_time of this Project.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def data_delivery(self):
        """Gets the data_delivery of this Project.


        :return: The data_delivery of this Project.
        :rtype: ProjectDataDelivery
        """
        return self._data_delivery

    @data_delivery.setter
    def data_delivery(self, data_delivery):
        """Sets the data_delivery of this Project.


        :param data_delivery: The data_delivery of this Project.
        :type data_delivery: ProjectDataDelivery
        """

        self._data_delivery = data_delivery

    @property
    def description(self):
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def experiment_count(self):
        """Gets the experiment_count of this Project.


        :return: The experiment_count of this Project.
        :rtype: int
        """
        return self._experiment_count

    @experiment_count.setter
    def experiment_count(self, experiment_count):
        """Sets the experiment_count of this Project.


        :param experiment_count: The experiment_count of this Project.
        :type experiment_count: int
        """

        self._experiment_count = experiment_count

    @property
    def feature_count(self):
        """Gets the feature_count of this Project.


        :return: The feature_count of this Project.
        :rtype: int
        """
        return self._feature_count

    @feature_count.setter
    def feature_count(self, feature_count):
        """Sets the feature_count of this Project.


        :param feature_count: The feature_count of this Project.
        :type feature_count: int
        """

        self._feature_count = feature_count

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this Project.


        :return: The last_updated_time of this Project.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this Project.


        :param last_updated_time: The last_updated_time of this Project.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def launch_count(self):
        """Gets the launch_count of this Project.


        :return: The launch_count of this Project.
        :rtype: int
        """
        return self._launch_count

    @launch_count.setter
    def launch_count(self, launch_count):
        """Sets the launch_count of this Project.


        :param launch_count: The launch_count of this Project.
        :type launch_count: int
        """

        self._launch_count = launch_count

    @property
    def name(self):
        """Gets the name of this Project.


        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """Gets the status of this Project.


        :return: The status of this Project.
        :rtype: ProjectStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Project.


        :param status: The status of this Project.
        :type status: ProjectStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Project.


        :return: The tags of this Project.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Project.


        :param tags: The tags of this Project.
        :type tags: Dict
        """

        self._tags = tags
