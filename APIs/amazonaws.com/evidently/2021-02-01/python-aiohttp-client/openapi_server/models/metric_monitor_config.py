# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_monitor_config_metric_definition import MetricMonitorConfigMetricDefinition
from openapi_server import util


class MetricMonitorConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric_definition: MetricMonitorConfigMetricDefinition=None):
        """MetricMonitorConfig - a model defined in OpenAPI

        :param metric_definition: The metric_definition of this MetricMonitorConfig.
        """
        self.openapi_types = {
            'metric_definition': MetricMonitorConfigMetricDefinition
        }

        self.attribute_map = {
            'metric_definition': 'metricDefinition'
        }

        self._metric_definition = metric_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricMonitorConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricMonitorConfig of this MetricMonitorConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_definition(self):
        """Gets the metric_definition of this MetricMonitorConfig.


        :return: The metric_definition of this MetricMonitorConfig.
        :rtype: MetricMonitorConfigMetricDefinition
        """
        return self._metric_definition

    @metric_definition.setter
    def metric_definition(self, metric_definition):
        """Sets the metric_definition of this MetricMonitorConfig.


        :param metric_definition: The metric_definition of this MetricMonitorConfig.
        :type metric_definition: MetricMonitorConfigMetricDefinition
        """
        if metric_definition is None:
            raise ValueError("Invalid value for `metric_definition`, must not be `None`")

        self._metric_definition = metric_definition
