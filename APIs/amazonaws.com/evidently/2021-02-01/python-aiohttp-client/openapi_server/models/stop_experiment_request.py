# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StopExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_state: str=None, reason: str=None):
        """StopExperimentRequest - a model defined in OpenAPI

        :param desired_state: The desired_state of this StopExperimentRequest.
        :param reason: The reason of this StopExperimentRequest.
        """
        self.openapi_types = {
            'desired_state': str,
            'reason': str
        }

        self.attribute_map = {
            'desired_state': 'desiredState',
            'reason': 'reason'
        }

        self._desired_state = desired_state
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StopExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StopExperiment_request of this StopExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_state(self):
        """Gets the desired_state of this StopExperimentRequest.

        Specify whether the experiment is to be considered <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.

        :return: The desired_state of this StopExperimentRequest.
        :rtype: str
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this StopExperimentRequest.

        Specify whether the experiment is to be considered <code>COMPLETED</code> or <code>CANCELLED</code> after it stops.

        :param desired_state: The desired_state of this StopExperimentRequest.
        :type desired_state: str
        """
        allowed_values = ["COMPLETED", "CANCELLED"]  # noqa: E501
        if desired_state not in allowed_values:
            raise ValueError(
                "Invalid value for `desired_state` ({0}), must be one of {1}"
                .format(desired_state, allowed_values)
            )

        self._desired_state = desired_state

    @property
    def reason(self):
        """Gets the reason of this StopExperimentRequest.

        A string that describes why you are stopping the experiment.

        :return: The reason of this StopExperimentRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this StopExperimentRequest.

        A string that describes why you are stopping the experiment.

        :param reason: The reason of this StopExperimentRequest.
        :type reason: str
        """
        if reason is not None and len(reason) > 160:
            raise ValueError("Invalid value for `reason`, length must be less than or equal to `160`")
        if reason is not None and len(reason) < 0:
            raise ValueError("Invalid value for `reason`, length must be greater than or equal to `0`")
        if reason is not None and not re.search(r'.*', reason):
            raise ValueError("Invalid value for `reason`, must be a follow pattern or equal to `/.*/`")

        self._reason = reason
