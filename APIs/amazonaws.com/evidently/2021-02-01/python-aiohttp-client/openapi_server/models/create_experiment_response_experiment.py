# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.experiment_execution import ExperimentExecution
from openapi_server.models.experiment_online_ab_definition import ExperimentOnlineAbDefinition
from openapi_server.models.experiment_schedule import ExperimentSchedule
from openapi_server.models.experiment_status import ExperimentStatus
from openapi_server.models.experiment_type import ExperimentType
from openapi_server import util


class CreateExperimentResponseExperiment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, created_time: datetime=None, description: str=None, execution: ExperimentExecution=None, last_updated_time: datetime=None, metric_goals: List=None, name: str=None, online_ab_definition: ExperimentOnlineAbDefinition=None, project: str=None, randomization_salt: str=None, sampling_rate: int=None, schedule: ExperimentSchedule=None, segment: str=None, status: ExperimentStatus=None, status_reason: str=None, tags: Dict=None, treatments: List=None, type: ExperimentType=None):
        """CreateExperimentResponseExperiment - a model defined in OpenAPI

        :param arn: The arn of this CreateExperimentResponseExperiment.
        :param created_time: The created_time of this CreateExperimentResponseExperiment.
        :param description: The description of this CreateExperimentResponseExperiment.
        :param execution: The execution of this CreateExperimentResponseExperiment.
        :param last_updated_time: The last_updated_time of this CreateExperimentResponseExperiment.
        :param metric_goals: The metric_goals of this CreateExperimentResponseExperiment.
        :param name: The name of this CreateExperimentResponseExperiment.
        :param online_ab_definition: The online_ab_definition of this CreateExperimentResponseExperiment.
        :param project: The project of this CreateExperimentResponseExperiment.
        :param randomization_salt: The randomization_salt of this CreateExperimentResponseExperiment.
        :param sampling_rate: The sampling_rate of this CreateExperimentResponseExperiment.
        :param schedule: The schedule of this CreateExperimentResponseExperiment.
        :param segment: The segment of this CreateExperimentResponseExperiment.
        :param status: The status of this CreateExperimentResponseExperiment.
        :param status_reason: The status_reason of this CreateExperimentResponseExperiment.
        :param tags: The tags of this CreateExperimentResponseExperiment.
        :param treatments: The treatments of this CreateExperimentResponseExperiment.
        :param type: The type of this CreateExperimentResponseExperiment.
        """
        self.openapi_types = {
            'arn': str,
            'created_time': datetime,
            'description': str,
            'execution': ExperimentExecution,
            'last_updated_time': datetime,
            'metric_goals': List,
            'name': str,
            'online_ab_definition': ExperimentOnlineAbDefinition,
            'project': str,
            'randomization_salt': str,
            'sampling_rate': int,
            'schedule': ExperimentSchedule,
            'segment': str,
            'status': ExperimentStatus,
            'status_reason': str,
            'tags': Dict,
            'treatments': List,
            'type': ExperimentType
        }

        self.attribute_map = {
            'arn': 'arn',
            'created_time': 'createdTime',
            'description': 'description',
            'execution': 'execution',
            'last_updated_time': 'lastUpdatedTime',
            'metric_goals': 'metricGoals',
            'name': 'name',
            'online_ab_definition': 'onlineAbDefinition',
            'project': 'project',
            'randomization_salt': 'randomizationSalt',
            'sampling_rate': 'samplingRate',
            'schedule': 'schedule',
            'segment': 'segment',
            'status': 'status',
            'status_reason': 'statusReason',
            'tags': 'tags',
            'treatments': 'treatments',
            'type': 'type'
        }

        self._arn = arn
        self._created_time = created_time
        self._description = description
        self._execution = execution
        self._last_updated_time = last_updated_time
        self._metric_goals = metric_goals
        self._name = name
        self._online_ab_definition = online_ab_definition
        self._project = project
        self._randomization_salt = randomization_salt
        self._sampling_rate = sampling_rate
        self._schedule = schedule
        self._segment = segment
        self._status = status
        self._status_reason = status_reason
        self._tags = tags
        self._treatments = treatments
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExperimentResponseExperiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExperimentResponse_experiment of this CreateExperimentResponseExperiment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this CreateExperimentResponseExperiment.


        :return: The arn of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this CreateExperimentResponseExperiment.


        :param arn: The arn of this CreateExperimentResponseExperiment.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")

        self._arn = arn

    @property
    def created_time(self):
        """Gets the created_time of this CreateExperimentResponseExperiment.


        :return: The created_time of this CreateExperimentResponseExperiment.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CreateExperimentResponseExperiment.


        :param created_time: The created_time of this CreateExperimentResponseExperiment.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this CreateExperimentResponseExperiment.


        :return: The description of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateExperimentResponseExperiment.


        :param description: The description of this CreateExperimentResponseExperiment.
        :type description: str
        """

        self._description = description

    @property
    def execution(self):
        """Gets the execution of this CreateExperimentResponseExperiment.


        :return: The execution of this CreateExperimentResponseExperiment.
        :rtype: ExperimentExecution
        """
        return self._execution

    @execution.setter
    def execution(self, execution):
        """Sets the execution of this CreateExperimentResponseExperiment.


        :param execution: The execution of this CreateExperimentResponseExperiment.
        :type execution: ExperimentExecution
        """

        self._execution = execution

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this CreateExperimentResponseExperiment.


        :return: The last_updated_time of this CreateExperimentResponseExperiment.
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this CreateExperimentResponseExperiment.


        :param last_updated_time: The last_updated_time of this CreateExperimentResponseExperiment.
        :type last_updated_time: datetime
        """
        if last_updated_time is None:
            raise ValueError("Invalid value for `last_updated_time`, must not be `None`")

        self._last_updated_time = last_updated_time

    @property
    def metric_goals(self):
        """Gets the metric_goals of this CreateExperimentResponseExperiment.


        :return: The metric_goals of this CreateExperimentResponseExperiment.
        :rtype: List
        """
        return self._metric_goals

    @metric_goals.setter
    def metric_goals(self, metric_goals):
        """Sets the metric_goals of this CreateExperimentResponseExperiment.


        :param metric_goals: The metric_goals of this CreateExperimentResponseExperiment.
        :type metric_goals: List
        """

        self._metric_goals = metric_goals

    @property
    def name(self):
        """Gets the name of this CreateExperimentResponseExperiment.


        :return: The name of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateExperimentResponseExperiment.


        :param name: The name of this CreateExperimentResponseExperiment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def online_ab_definition(self):
        """Gets the online_ab_definition of this CreateExperimentResponseExperiment.


        :return: The online_ab_definition of this CreateExperimentResponseExperiment.
        :rtype: ExperimentOnlineAbDefinition
        """
        return self._online_ab_definition

    @online_ab_definition.setter
    def online_ab_definition(self, online_ab_definition):
        """Sets the online_ab_definition of this CreateExperimentResponseExperiment.


        :param online_ab_definition: The online_ab_definition of this CreateExperimentResponseExperiment.
        :type online_ab_definition: ExperimentOnlineAbDefinition
        """

        self._online_ab_definition = online_ab_definition

    @property
    def project(self):
        """Gets the project of this CreateExperimentResponseExperiment.


        :return: The project of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CreateExperimentResponseExperiment.


        :param project: The project of this CreateExperimentResponseExperiment.
        :type project: str
        """

        self._project = project

    @property
    def randomization_salt(self):
        """Gets the randomization_salt of this CreateExperimentResponseExperiment.


        :return: The randomization_salt of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._randomization_salt

    @randomization_salt.setter
    def randomization_salt(self, randomization_salt):
        """Sets the randomization_salt of this CreateExperimentResponseExperiment.


        :param randomization_salt: The randomization_salt of this CreateExperimentResponseExperiment.
        :type randomization_salt: str
        """

        self._randomization_salt = randomization_salt

    @property
    def sampling_rate(self):
        """Gets the sampling_rate of this CreateExperimentResponseExperiment.


        :return: The sampling_rate of this CreateExperimentResponseExperiment.
        :rtype: int
        """
        return self._sampling_rate

    @sampling_rate.setter
    def sampling_rate(self, sampling_rate):
        """Sets the sampling_rate of this CreateExperimentResponseExperiment.


        :param sampling_rate: The sampling_rate of this CreateExperimentResponseExperiment.
        :type sampling_rate: int
        """

        self._sampling_rate = sampling_rate

    @property
    def schedule(self):
        """Gets the schedule of this CreateExperimentResponseExperiment.


        :return: The schedule of this CreateExperimentResponseExperiment.
        :rtype: ExperimentSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CreateExperimentResponseExperiment.


        :param schedule: The schedule of this CreateExperimentResponseExperiment.
        :type schedule: ExperimentSchedule
        """

        self._schedule = schedule

    @property
    def segment(self):
        """Gets the segment of this CreateExperimentResponseExperiment.


        :return: The segment of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this CreateExperimentResponseExperiment.


        :param segment: The segment of this CreateExperimentResponseExperiment.
        :type segment: str
        """

        self._segment = segment

    @property
    def status(self):
        """Gets the status of this CreateExperimentResponseExperiment.


        :return: The status of this CreateExperimentResponseExperiment.
        :rtype: ExperimentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateExperimentResponseExperiment.


        :param status: The status of this CreateExperimentResponseExperiment.
        :type status: ExperimentStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this CreateExperimentResponseExperiment.


        :return: The status_reason of this CreateExperimentResponseExperiment.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this CreateExperimentResponseExperiment.


        :param status_reason: The status_reason of this CreateExperimentResponseExperiment.
        :type status_reason: str
        """

        self._status_reason = status_reason

    @property
    def tags(self):
        """Gets the tags of this CreateExperimentResponseExperiment.


        :return: The tags of this CreateExperimentResponseExperiment.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateExperimentResponseExperiment.


        :param tags: The tags of this CreateExperimentResponseExperiment.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def treatments(self):
        """Gets the treatments of this CreateExperimentResponseExperiment.


        :return: The treatments of this CreateExperimentResponseExperiment.
        :rtype: List
        """
        return self._treatments

    @treatments.setter
    def treatments(self, treatments):
        """Sets the treatments of this CreateExperimentResponseExperiment.


        :param treatments: The treatments of this CreateExperimentResponseExperiment.
        :type treatments: List
        """

        self._treatments = treatments

    @property
    def type(self):
        """Gets the type of this CreateExperimentResponseExperiment.


        :return: The type of this CreateExperimentResponseExperiment.
        :rtype: ExperimentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateExperimentResponseExperiment.


        :param type: The type of this CreateExperimentResponseExperiment.
        :type type: ExperimentType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
