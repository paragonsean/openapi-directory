# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_experiment_request_online_ab_config import CreateExperimentRequestOnlineAbConfig
from openapi_server.models.metric_goal_config import MetricGoalConfig
from openapi_server.models.treatment_config import TreatmentConfig
import re
from openapi_server import util


class CreateExperimentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, metric_goals: List[MetricGoalConfig]=None, name: str=None, online_ab_config: CreateExperimentRequestOnlineAbConfig=None, randomization_salt: str=None, sampling_rate: int=None, segment: str=None, tags: Dict[str, str]=None, treatments: List[TreatmentConfig]=None):
        """CreateExperimentRequest - a model defined in OpenAPI

        :param description: The description of this CreateExperimentRequest.
        :param metric_goals: The metric_goals of this CreateExperimentRequest.
        :param name: The name of this CreateExperimentRequest.
        :param online_ab_config: The online_ab_config of this CreateExperimentRequest.
        :param randomization_salt: The randomization_salt of this CreateExperimentRequest.
        :param sampling_rate: The sampling_rate of this CreateExperimentRequest.
        :param segment: The segment of this CreateExperimentRequest.
        :param tags: The tags of this CreateExperimentRequest.
        :param treatments: The treatments of this CreateExperimentRequest.
        """
        self.openapi_types = {
            'description': str,
            'metric_goals': List[MetricGoalConfig],
            'name': str,
            'online_ab_config': CreateExperimentRequestOnlineAbConfig,
            'randomization_salt': str,
            'sampling_rate': int,
            'segment': str,
            'tags': Dict[str, str],
            'treatments': List[TreatmentConfig]
        }

        self.attribute_map = {
            'description': 'description',
            'metric_goals': 'metricGoals',
            'name': 'name',
            'online_ab_config': 'onlineAbConfig',
            'randomization_salt': 'randomizationSalt',
            'sampling_rate': 'samplingRate',
            'segment': 'segment',
            'tags': 'tags',
            'treatments': 'treatments'
        }

        self._description = description
        self._metric_goals = metric_goals
        self._name = name
        self._online_ab_config = online_ab_config
        self._randomization_salt = randomization_salt
        self._sampling_rate = sampling_rate
        self._segment = segment
        self._tags = tags
        self._treatments = treatments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExperimentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExperiment_request of this CreateExperimentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateExperimentRequest.

        An optional description of the experiment.

        :return: The description of this CreateExperimentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateExperimentRequest.

        An optional description of the experiment.

        :param description: The description of this CreateExperimentRequest.
        :type description: str
        """
        if description is not None and len(description) > 160:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `160`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*/`")

        self._description = description

    @property
    def metric_goals(self):
        """Gets the metric_goals of this CreateExperimentRequest.

        An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.

        :return: The metric_goals of this CreateExperimentRequest.
        :rtype: List[MetricGoalConfig]
        """
        return self._metric_goals

    @metric_goals.setter
    def metric_goals(self, metric_goals):
        """Sets the metric_goals of this CreateExperimentRequest.

        An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.

        :param metric_goals: The metric_goals of this CreateExperimentRequest.
        :type metric_goals: List[MetricGoalConfig]
        """
        if metric_goals is None:
            raise ValueError("Invalid value for `metric_goals`, must not be `None`")
        if metric_goals is not None and len(metric_goals) > 3:
            raise ValueError("Invalid value for `metric_goals`, number of items must be less than or equal to `3`")
        if metric_goals is not None and len(metric_goals) < 1:
            raise ValueError("Invalid value for `metric_goals`, number of items must be greater than or equal to `1`")

        self._metric_goals = metric_goals

    @property
    def name(self):
        """Gets the name of this CreateExperimentRequest.

        A name for the new experiment.

        :return: The name of this CreateExperimentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateExperimentRequest.

        A name for the new experiment.

        :param name: The name of this CreateExperimentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 127:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `127`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[-a-zA-Z0-9._]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[-a-zA-Z0-9._]*$/`")

        self._name = name

    @property
    def online_ab_config(self):
        """Gets the online_ab_config of this CreateExperimentRequest.


        :return: The online_ab_config of this CreateExperimentRequest.
        :rtype: CreateExperimentRequestOnlineAbConfig
        """
        return self._online_ab_config

    @online_ab_config.setter
    def online_ab_config(self, online_ab_config):
        """Sets the online_ab_config of this CreateExperimentRequest.


        :param online_ab_config: The online_ab_config of this CreateExperimentRequest.
        :type online_ab_config: CreateExperimentRequestOnlineAbConfig
        """

        self._online_ab_config = online_ab_config

    @property
    def randomization_salt(self):
        """Gets the randomization_salt of this CreateExperimentRequest.

        When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.

        :return: The randomization_salt of this CreateExperimentRequest.
        :rtype: str
        """
        return self._randomization_salt

    @randomization_salt.setter
    def randomization_salt(self, randomization_salt):
        """Sets the randomization_salt of this CreateExperimentRequest.

        When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.

        :param randomization_salt: The randomization_salt of this CreateExperimentRequest.
        :type randomization_salt: str
        """
        if randomization_salt is not None and len(randomization_salt) > 127:
            raise ValueError("Invalid value for `randomization_salt`, length must be less than or equal to `127`")
        if randomization_salt is not None and len(randomization_salt) < 0:
            raise ValueError("Invalid value for `randomization_salt`, length must be greater than or equal to `0`")
        if randomization_salt is not None and not re.search(r'.*', randomization_salt):
            raise ValueError("Invalid value for `randomization_salt`, must be a follow pattern or equal to `/.*/`")

        self._randomization_salt = randomization_salt

    @property
    def sampling_rate(self):
        """Gets the sampling_rate of this CreateExperimentRequest.

        <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p> <p>This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.</p>

        :return: The sampling_rate of this CreateExperimentRequest.
        :rtype: int
        """
        return self._sampling_rate

    @sampling_rate.setter
    def sampling_rate(self, sampling_rate):
        """Sets the sampling_rate of this CreateExperimentRequest.

        <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p> <p>This is represented in thousandths of a percent. For example, specify 10,000 to allocate 10% of the available audience.</p>

        :param sampling_rate: The sampling_rate of this CreateExperimentRequest.
        :type sampling_rate: int
        """
        if sampling_rate is not None and sampling_rate > 100000:
            raise ValueError("Invalid value for `sampling_rate`, must be a value less than or equal to `100000`")
        if sampling_rate is not None and sampling_rate < 0:
            raise ValueError("Invalid value for `sampling_rate`, must be a value greater than or equal to `0`")

        self._sampling_rate = sampling_rate

    @property
    def segment(self):
        """Gets the segment of this CreateExperimentRequest.

        Specifies an audience <i>segment</i> to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.

        :return: The segment of this CreateExperimentRequest.
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this CreateExperimentRequest.

        Specifies an audience <i>segment</i> to use in the experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment.

        :param segment: The segment of this CreateExperimentRequest.
        :type segment: str
        """
        if segment is not None and len(segment) > 2048:
            raise ValueError("Invalid value for `segment`, length must be less than or equal to `2048`")
        if segment is not None and len(segment) < 0:
            raise ValueError("Invalid value for `segment`, length must be greater than or equal to `0`")
        if segment is not None and not re.search(r'(^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment\/[-a-zA-Z0-9._]*)', segment):
            raise ValueError("Invalid value for `segment`, must be a follow pattern or equal to `/(^[-a-zA-Z0-9._]*$)|(arn:[^:]*:[^:]*:[^:]*:[^:]*:segment\/[-a-zA-Z0-9._]*)/`")

        self._segment = segment

    @property
    def tags(self):
        """Gets the tags of this CreateExperimentRequest.

        <p>Assigns one or more tags (key-value pairs) to the experiment.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an experiment.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :return: The tags of this CreateExperimentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateExperimentRequest.

        <p>Assigns one or more tags (key-value pairs) to the experiment.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with an experiment.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :param tags: The tags of this CreateExperimentRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def treatments(self):
        """Gets the treatments of this CreateExperimentRequest.

        An array of structures that describe the configuration of each feature variation used in the experiment.

        :return: The treatments of this CreateExperimentRequest.
        :rtype: List[TreatmentConfig]
        """
        return self._treatments

    @treatments.setter
    def treatments(self, treatments):
        """Sets the treatments of this CreateExperimentRequest.

        An array of structures that describe the configuration of each feature variation used in the experiment.

        :param treatments: The treatments of this CreateExperimentRequest.
        :type treatments: List[TreatmentConfig]
        """
        if treatments is None:
            raise ValueError("Invalid value for `treatments`, must not be `None`")
        if treatments is not None and len(treatments) > 5:
            raise ValueError("Invalid value for `treatments`, number of items must be less than or equal to `5`")
        if treatments is not None and len(treatments) < 0:
            raise ValueError("Invalid value for `treatments`, number of items must be greater than or equal to `0`")

        self._treatments = treatments
