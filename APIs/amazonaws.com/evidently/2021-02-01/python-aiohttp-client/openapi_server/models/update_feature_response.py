# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_feature_response_feature import UpdateFeatureResponseFeature
from openapi_server import util


class UpdateFeatureResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature: UpdateFeatureResponseFeature=None):
        """UpdateFeatureResponse - a model defined in OpenAPI

        :param feature: The feature of this UpdateFeatureResponse.
        """
        self.openapi_types = {
            'feature': UpdateFeatureResponseFeature
        }

        self.attribute_map = {
            'feature': 'feature'
        }

        self._feature = feature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFeatureResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFeatureResponse of this UpdateFeatureResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature(self):
        """Gets the feature of this UpdateFeatureResponse.


        :return: The feature of this UpdateFeatureResponse.
        :rtype: UpdateFeatureResponseFeature
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this UpdateFeatureResponse.


        :param feature: The feature of this UpdateFeatureResponse.
        :type feature: UpdateFeatureResponseFeature
        """
        if feature is None:
            raise ValueError("Invalid value for `feature`, must not be `None`")

        self._feature = feature
