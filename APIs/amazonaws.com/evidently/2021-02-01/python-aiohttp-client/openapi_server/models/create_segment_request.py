# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateSegmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, name: str=None, pattern: str=None, tags: Dict[str, str]=None):
        """CreateSegmentRequest - a model defined in OpenAPI

        :param description: The description of this CreateSegmentRequest.
        :param name: The name of this CreateSegmentRequest.
        :param pattern: The pattern of this CreateSegmentRequest.
        :param tags: The tags of this CreateSegmentRequest.
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'pattern': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'description': 'description',
            'name': 'name',
            'pattern': 'pattern',
            'tags': 'tags'
        }

        self._description = description
        self._name = name
        self._pattern = pattern
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSegmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSegment_request of this CreateSegmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CreateSegmentRequest.

        An optional description for this segment.

        :return: The description of this CreateSegmentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSegmentRequest.

        An optional description for this segment.

        :param description: The description of this CreateSegmentRequest.
        :type description: str
        """
        if description is not None and len(description) > 160:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `160`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'.*', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/.*/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateSegmentRequest.

        A name for the segment.

        :return: The name of this CreateSegmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSegmentRequest.

        A name for the segment.

        :param name: The name of this CreateSegmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[-a-zA-Z0-9._]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[-a-zA-Z0-9._]*$/`")

        self._name = name

    @property
    def pattern(self):
        """Gets the pattern of this CreateSegmentRequest.

        The pattern to use for the segment. For more information about pattern syntax, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html\"> Segment rule pattern syntax</a>.

        :return: The pattern of this CreateSegmentRequest.
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this CreateSegmentRequest.

        The pattern to use for the segment. For more information about pattern syntax, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html\"> Segment rule pattern syntax</a>.

        :param pattern: The pattern of this CreateSegmentRequest.
        :type pattern: str
        """
        if pattern is None:
            raise ValueError("Invalid value for `pattern`, must not be `None`")
        if pattern is not None and len(pattern) > 1024:
            raise ValueError("Invalid value for `pattern`, length must be less than or equal to `1024`")
        if pattern is not None and len(pattern) < 1:
            raise ValueError("Invalid value for `pattern`, length must be greater than or equal to `1`")

        self._pattern = pattern

    @property
    def tags(self):
        """Gets the tags of this CreateSegmentRequest.

        <p>Assigns one or more tags (key-value pairs) to the segment.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a segment.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :return: The tags of this CreateSegmentRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSegmentRequest.

        <p>Assigns one or more tags (key-value pairs) to the segment.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can associate as many as 50 tags with a segment.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>

        :param tags: The tags of this CreateSegmentRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
