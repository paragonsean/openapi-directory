# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_direction_enum import ChangeDirectionEnum
from openapi_server.models.metric_goal_metric_definition import MetricGoalMetricDefinition
from openapi_server import util


class MetricGoal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, desired_change: ChangeDirectionEnum=None, metric_definition: MetricGoalMetricDefinition=None):
        """MetricGoal - a model defined in OpenAPI

        :param desired_change: The desired_change of this MetricGoal.
        :param metric_definition: The metric_definition of this MetricGoal.
        """
        self.openapi_types = {
            'desired_change': ChangeDirectionEnum,
            'metric_definition': MetricGoalMetricDefinition
        }

        self.attribute_map = {
            'desired_change': 'desiredChange',
            'metric_definition': 'metricDefinition'
        }

        self._desired_change = desired_change
        self._metric_definition = metric_definition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricGoal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricGoal of this MetricGoal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def desired_change(self):
        """Gets the desired_change of this MetricGoal.


        :return: The desired_change of this MetricGoal.
        :rtype: ChangeDirectionEnum
        """
        return self._desired_change

    @desired_change.setter
    def desired_change(self, desired_change):
        """Sets the desired_change of this MetricGoal.


        :param desired_change: The desired_change of this MetricGoal.
        :type desired_change: ChangeDirectionEnum
        """

        self._desired_change = desired_change

    @property
    def metric_definition(self):
        """Gets the metric_definition of this MetricGoal.


        :return: The metric_definition of this MetricGoal.
        :rtype: MetricGoalMetricDefinition
        """
        return self._metric_definition

    @metric_definition.setter
    def metric_definition(self, metric_definition):
        """Sets the metric_definition of this MetricGoal.


        :param metric_definition: The metric_definition of this MetricGoal.
        :type metric_definition: MetricGoalMetricDefinition
        """
        if metric_definition is None:
            raise ValueError("Invalid value for `metric_definition`, must not be `None`")

        self._metric_definition = metric_definition
