/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudWatchEvidently);
  }
}(this, function(expect, AmazonCloudWatchEvidently) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudWatchEvidently.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('batchEvaluateFeature', function() {
      it('should call batchEvaluateFeature successfully', function(done) {
        //uncomment below and update the code to test batchEvaluateFeature
        //instance.batchEvaluateFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createExperiment', function() {
      it('should call createExperiment successfully', function(done) {
        //uncomment below and update the code to test createExperiment
        //instance.createExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFeature', function() {
      it('should call createFeature successfully', function(done) {
        //uncomment below and update the code to test createFeature
        //instance.createFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLaunch', function() {
      it('should call createLaunch successfully', function(done) {
        //uncomment below and update the code to test createLaunch
        //instance.createLaunch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProject', function() {
      it('should call createProject successfully', function(done) {
        //uncomment below and update the code to test createProject
        //instance.createProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSegment', function() {
      it('should call createSegment successfully', function(done) {
        //uncomment below and update the code to test createSegment
        //instance.createSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteExperiment', function() {
      it('should call deleteExperiment successfully', function(done) {
        //uncomment below and update the code to test deleteExperiment
        //instance.deleteExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFeature', function() {
      it('should call deleteFeature successfully', function(done) {
        //uncomment below and update the code to test deleteFeature
        //instance.deleteFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLaunch', function() {
      it('should call deleteLaunch successfully', function(done) {
        //uncomment below and update the code to test deleteLaunch
        //instance.deleteLaunch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProject', function() {
      it('should call deleteProject successfully', function(done) {
        //uncomment below and update the code to test deleteProject
        //instance.deleteProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSegment', function() {
      it('should call deleteSegment successfully', function(done) {
        //uncomment below and update the code to test deleteSegment
        //instance.deleteSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('evaluateFeature', function() {
      it('should call evaluateFeature successfully', function(done) {
        //uncomment below and update the code to test evaluateFeature
        //instance.evaluateFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExperiment', function() {
      it('should call getExperiment successfully', function(done) {
        //uncomment below and update the code to test getExperiment
        //instance.getExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExperimentResults', function() {
      it('should call getExperimentResults successfully', function(done) {
        //uncomment below and update the code to test getExperimentResults
        //instance.getExperimentResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeature', function() {
      it('should call getFeature successfully', function(done) {
        //uncomment below and update the code to test getFeature
        //instance.getFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLaunch', function() {
      it('should call getLaunch successfully', function(done) {
        //uncomment below and update the code to test getLaunch
        //instance.getLaunch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProject', function() {
      it('should call getProject successfully', function(done) {
        //uncomment below and update the code to test getProject
        //instance.getProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSegment', function() {
      it('should call getSegment successfully', function(done) {
        //uncomment below and update the code to test getSegment
        //instance.getSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExperiments', function() {
      it('should call listExperiments successfully', function(done) {
        //uncomment below and update the code to test listExperiments
        //instance.listExperiments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFeatures', function() {
      it('should call listFeatures successfully', function(done) {
        //uncomment below and update the code to test listFeatures
        //instance.listFeatures(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLaunches', function() {
      it('should call listLaunches successfully', function(done) {
        //uncomment below and update the code to test listLaunches
        //instance.listLaunches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProjects', function() {
      it('should call listProjects successfully', function(done) {
        //uncomment below and update the code to test listProjects
        //instance.listProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSegmentReferences', function() {
      it('should call listSegmentReferences successfully', function(done) {
        //uncomment below and update the code to test listSegmentReferences
        //instance.listSegmentReferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSegments', function() {
      it('should call listSegments successfully', function(done) {
        //uncomment below and update the code to test listSegments
        //instance.listSegments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putProjectEvents', function() {
      it('should call putProjectEvents successfully', function(done) {
        //uncomment below and update the code to test putProjectEvents
        //instance.putProjectEvents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startExperiment', function() {
      it('should call startExperiment successfully', function(done) {
        //uncomment below and update the code to test startExperiment
        //instance.startExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startLaunch', function() {
      it('should call startLaunch successfully', function(done) {
        //uncomment below and update the code to test startLaunch
        //instance.startLaunch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopExperiment', function() {
      it('should call stopExperiment successfully', function(done) {
        //uncomment below and update the code to test stopExperiment
        //instance.stopExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopLaunch', function() {
      it('should call stopLaunch successfully', function(done) {
        //uncomment below and update the code to test stopLaunch
        //instance.stopLaunch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testSegmentPattern', function() {
      it('should call testSegmentPattern successfully', function(done) {
        //uncomment below and update the code to test testSegmentPattern
        //instance.testSegmentPattern(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateExperiment', function() {
      it('should call updateExperiment successfully', function(done) {
        //uncomment below and update the code to test updateExperiment
        //instance.updateExperiment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFeature', function() {
      it('should call updateFeature successfully', function(done) {
        //uncomment below and update the code to test updateFeature
        //instance.updateFeature(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLaunch', function() {
      it('should call updateLaunch successfully', function(done) {
        //uncomment below and update the code to test updateLaunch
        //instance.updateLaunch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProject', function() {
      it('should call updateProject successfully', function(done) {
        //uncomment below and update the code to test updateProject
        //instance.updateProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProjectDataDelivery', function() {
      it('should call updateProjectDataDelivery successfully', function(done) {
        //uncomment below and update the code to test updateProjectDataDelivery
        //instance.updateProjectDataDelivery(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
