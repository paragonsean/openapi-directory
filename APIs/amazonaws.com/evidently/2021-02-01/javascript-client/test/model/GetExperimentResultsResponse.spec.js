/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudWatchEvidently);
  }
}(this, function(expect, AmazonCloudWatchEvidently) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudWatchEvidently.GetExperimentResultsResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetExperimentResultsResponse', function() {
    it('should create an instance of GetExperimentResultsResponse', function() {
      // uncomment below and update the code to test GetExperimentResultsResponse
      //var instance = new AmazonCloudWatchEvidently.GetExperimentResultsResponse();
      //expect(instance).to.be.a(AmazonCloudWatchEvidently.GetExperimentResultsResponse);
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new AmazonCloudWatchEvidently.GetExperimentResultsResponse();
      //expect(instance).to.be();
    });

    it('should have the property reports (base name: "reports")', function() {
      // uncomment below and update the code to test the property reports
      //var instance = new AmazonCloudWatchEvidently.GetExperimentResultsResponse();
      //expect(instance).to.be();
    });

    it('should have the property resultsData (base name: "resultsData")', function() {
      // uncomment below and update the code to test the property resultsData
      //var instance = new AmazonCloudWatchEvidently.GetExperimentResultsResponse();
      //expect(instance).to.be();
    });

    it('should have the property timestamps (base name: "timestamps")', function() {
      // uncomment below and update the code to test the property timestamps
      //var instance = new AmazonCloudWatchEvidently.GetExperimentResultsResponse();
      //expect(instance).to.be();
    });

  });

}));
