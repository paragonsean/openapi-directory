/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchEvaluateFeatureRequest from '../model/BatchEvaluateFeatureRequest';
import BatchEvaluateFeatureResponse from '../model/BatchEvaluateFeatureResponse';
import CreateExperimentRequest from '../model/CreateExperimentRequest';
import CreateExperimentResponse from '../model/CreateExperimentResponse';
import CreateFeatureRequest from '../model/CreateFeatureRequest';
import CreateFeatureResponse from '../model/CreateFeatureResponse';
import CreateLaunchRequest from '../model/CreateLaunchRequest';
import CreateLaunchResponse from '../model/CreateLaunchResponse';
import CreateProjectRequest from '../model/CreateProjectRequest';
import CreateProjectResponse from '../model/CreateProjectResponse';
import CreateSegmentRequest from '../model/CreateSegmentRequest';
import CreateSegmentResponse from '../model/CreateSegmentResponse';
import EvaluateFeatureRequest from '../model/EvaluateFeatureRequest';
import EvaluateFeatureResponse from '../model/EvaluateFeatureResponse';
import GetExperimentResponse from '../model/GetExperimentResponse';
import GetExperimentResultsRequest from '../model/GetExperimentResultsRequest';
import GetExperimentResultsResponse from '../model/GetExperimentResultsResponse';
import GetFeatureResponse from '../model/GetFeatureResponse';
import GetLaunchResponse from '../model/GetLaunchResponse';
import GetProjectResponse from '../model/GetProjectResponse';
import GetSegmentResponse from '../model/GetSegmentResponse';
import ListExperimentsResponse from '../model/ListExperimentsResponse';
import ListFeaturesResponse from '../model/ListFeaturesResponse';
import ListLaunchesResponse from '../model/ListLaunchesResponse';
import ListProjectsResponse from '../model/ListProjectsResponse';
import ListSegmentReferencesResponse from '../model/ListSegmentReferencesResponse';
import ListSegmentsResponse from '../model/ListSegmentsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutProjectEventsRequest from '../model/PutProjectEventsRequest';
import PutProjectEventsResponse from '../model/PutProjectEventsResponse';
import StartExperimentRequest from '../model/StartExperimentRequest';
import StartExperimentResponse from '../model/StartExperimentResponse';
import StartLaunchResponse from '../model/StartLaunchResponse';
import StopExperimentRequest from '../model/StopExperimentRequest';
import StopExperimentResponse from '../model/StopExperimentResponse';
import StopLaunchRequest from '../model/StopLaunchRequest';
import StopLaunchResponse from '../model/StopLaunchResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import TestSegmentPatternRequest from '../model/TestSegmentPatternRequest';
import TestSegmentPatternResponse from '../model/TestSegmentPatternResponse';
import UpdateExperimentRequest from '../model/UpdateExperimentRequest';
import UpdateExperimentResponse from '../model/UpdateExperimentResponse';
import UpdateFeatureRequest from '../model/UpdateFeatureRequest';
import UpdateFeatureResponse from '../model/UpdateFeatureResponse';
import UpdateLaunchRequest from '../model/UpdateLaunchRequest';
import UpdateLaunchResponse from '../model/UpdateLaunchResponse';
import UpdateProjectDataDeliveryRequest from '../model/UpdateProjectDataDeliveryRequest';
import UpdateProjectDataDeliveryResponse from '../model/UpdateProjectDataDeliveryResponse';
import UpdateProjectRequest from '../model/UpdateProjectRequest';
import UpdateProjectResponse from '../model/UpdateProjectResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-02-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the batchEvaluateFeature operation.
     * @callback module:api/DefaultApi~batchEvaluateFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchEvaluateFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation assigns feature variation to user sessions. For each user session, you pass in an <code>entityID</code> that represents the user. Evidently then checks the evaluation rules and assigns the variation.</p> <p>The first rules that are evaluated are the override rules. If the user's <code>entityID</code> matches an override rule, the user is served the variation specified by that rule.</p> <p>Next, if there is a launch of the feature, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.</p> <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. </p> <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
     * @param {String} project The name or ARN of the project that contains the feature being evaluated.
     * @param {module:model/BatchEvaluateFeatureRequest} batchEvaluateFeatureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchEvaluateFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchEvaluateFeatureResponse}
     */
    batchEvaluateFeature(project, batchEvaluateFeatureRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchEvaluateFeatureRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling batchEvaluateFeature");
      }
      // verify the required parameter 'batchEvaluateFeatureRequest' is set
      if (batchEvaluateFeatureRequest === undefined || batchEvaluateFeatureRequest === null) {
        throw new Error("Missing the required parameter 'batchEvaluateFeatureRequest' when calling batchEvaluateFeature");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchEvaluateFeatureResponse;
      return this.apiClient.callApi(
        '/projects/{project}/evaluations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExperiment operation.
     * @callback module:api/DefaultApi~createExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Evidently <i>experiment</i>. Before you create an experiment, you must create the feature to use for the experiment.</p> <p>An experiment helps you make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides clear recommendations about which variations perform better.</p> <p>You can optionally specify a <code>segment</code> to have the experiment consider only certain audience types in the experiment, such as using only user sessions from a certain location or who use a certain internet browser.</p> <p>Don't use this operation to update an existing experiment. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html\">UpdateExperiment</a>. </p>
     * @param {String} project The name or ARN of the project that you want to create the new experiment in.
     * @param {module:model/CreateExperimentRequest} createExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExperimentResponse}
     */
    createExperiment(project, createExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExperimentRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createExperiment");
      }
      // verify the required parameter 'createExperimentRequest' is set
      if (createExperimentRequest === undefined || createExperimentRequest === null) {
        throw new Error("Missing the required parameter 'createExperimentRequest' when calling createExperiment");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExperimentResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFeature operation.
     * @callback module:api/DefaultApi~createFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Evidently <i>feature</i> that you want to launch or test. You can define up to five variations of a feature, and use these variations in your launches and experiments. A feature must be created in a project. For information about creating a project, see <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html\">CreateProject</a>.</p> <p>Don't use this operation to update an existing feature. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html\">UpdateFeature</a>. </p>
     * @param {String} project The name or ARN of the project that is to contain the new feature.
     * @param {module:model/CreateFeatureRequest} createFeatureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFeatureResponse}
     */
    createFeature(project, createFeatureRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFeatureRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createFeature");
      }
      // verify the required parameter 'createFeatureRequest' is set
      if (createFeatureRequest === undefined || createFeatureRequest === null) {
        throw new Error("Missing the required parameter 'createFeatureRequest' when calling createFeature");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFeatureResponse;
      return this.apiClient.callApi(
        '/projects/{project}/features', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLaunch operation.
     * @callback module:api/DefaultApi~createLaunchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLaunchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a <i>launch</i> of a given feature. Before you create a launch, you must create the feature to use for the launch.</p> <p>You can use a launch to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to more users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>Don't use this operation to update an existing launch. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html\">UpdateLaunch</a>. </p>
     * @param {String} project The name or ARN of the project that you want to create the launch in.
     * @param {module:model/CreateLaunchRequest} createLaunchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLaunchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLaunchResponse}
     */
    createLaunch(project, createLaunchRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLaunchRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createLaunch");
      }
      // verify the required parameter 'createLaunchRequest' is set
      if (createLaunchRequest === undefined || createLaunchRequest === null) {
        throw new Error("Missing the required parameter 'createLaunchRequest' when calling createLaunch");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLaunchResponse;
      return this.apiClient.callApi(
        '/projects/{project}/launches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/DefaultApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.</p> <p>To update an existing project, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html\">UpdateProject</a>.</p>
     * @param {module:model/CreateProjectRequest} createProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateProjectResponse}
     */
    createProject(createProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = createProjectRequest;
      // verify the required parameter 'createProjectRequest' is set
      if (createProjectRequest === undefined || createProjectRequest === null) {
        throw new Error("Missing the required parameter 'createProjectRequest' when calling createProject");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateProjectResponse;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSegment operation.
     * @callback module:api/DefaultApi~createSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Use this operation to define a <i>segment</i> of your audience. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age.</p> <p>Using a segment in an experiment limits that experiment to evaluate only the users who match the segment criteria. Using one or more segments in a launch allows you to define different traffic splits for the different audience segments.</p> <p>For more information about segment pattern syntax, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html\"> Segment rule pattern syntax</a>.</p> <p>The pattern that you define for a segment is matched against the value of <code>evaluationContext</code>, which is passed into Evidently in the <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html\">EvaluateFeature</a> operation, when Evidently assigns a feature variation to a user.</p>
     * @param {module:model/CreateSegmentRequest} createSegmentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSegmentResponse}
     */
    createSegment(createSegmentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSegmentRequest;
      // verify the required parameter 'createSegmentRequest' is set
      if (createSegmentRequest === undefined || createSegmentRequest === null) {
        throw new Error("Missing the required parameter 'createSegmentRequest' when calling createSegment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSegmentResponse;
      return this.apiClient.callApi(
        '/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:api/DefaultApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an Evidently experiment. The feature used for the experiment is not deleted.</p> <p>To stop an experiment without deleting it, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html\">StopExperiment</a>. </p>
     * @param {String} experiment The name of the experiment to delete.
     * @param {String} project The name or ARN of the project that contains the experiment to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteExperiment(experiment, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling deleteExperiment");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteExperiment");
      }

      let pathParams = {
        'experiment': experiment,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project}/experiments/{experiment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeature operation.
     * @callback module:api/DefaultApi~deleteFeatureCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Evidently feature.
     * @param {String} feature The name of the feature to delete.
     * @param {String} project The name or ARN of the project that contains the feature to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteFeature(feature, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling deleteFeature");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteFeature");
      }

      let pathParams = {
        'feature': feature,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project}/features/{feature}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLaunch operation.
     * @callback module:api/DefaultApi~deleteLaunchCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an Evidently launch. The feature used for the launch is not deleted.</p> <p>To stop a launch without deleting it, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html\">StopLaunch</a>. </p>
     * @param {String} launch The name of the launch to delete.
     * @param {String} project The name or ARN of the project that contains the launch to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLaunchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLaunch(launch, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launch' is set
      if (launch === undefined || launch === null) {
        throw new Error("Missing the required parameter 'launch' when calling deleteLaunch");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteLaunch");
      }

      let pathParams = {
        'launch': launch,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project}/launches/{launch}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/DefaultApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Evidently project. Before you can delete a project, you must delete all the features that the project contains. To delete a feature, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html\">DeleteFeature</a>.
     * @param {String} project The name or ARN of the project to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteProject(project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteProject");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/projects/{project}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSegment operation.
     * @callback module:api/DefaultApi~deleteSegmentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a segment. You can't delete a segment that is being used in a launch or experiment, even if that launch or experiment is not currently running.
     * @param {String} segment Specifies the segment to delete.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSegment(segment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'segment' is set
      if (segment === undefined || segment === null) {
        throw new Error("Missing the required parameter 'segment' when calling deleteSegment");
      }

      let pathParams = {
        'segment': segment
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/segments/{segment}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the evaluateFeature operation.
     * @callback module:api/DefaultApi~evaluateFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EvaluateFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>This operation assigns a feature variation to one given user session. You pass in an <code>entityID</code> that represents the user. Evidently then checks the evaluation rules and assigns the variation.</p> <p>The first rules that are evaluated are the override rules. If the user's <code>entityID</code> matches an override rule, the user is served the variation specified by that rule.</p> <p>If there is a current launch with this feature that uses segment overrides, and if the user session's <code>evaluationContext</code> matches a segment rule defined in a segment override, the configuration in the segment overrides is used. For more information about segments, see <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html\">CreateSegment</a> and <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html\">Use segments to focus your audience</a>.</p> <p>If there is a launch with no segment overrides, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.</p> <p>If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment.</p> <p>If the experiment uses a segment, then only user sessions with <code>evaluationContext</code> values that match the segment rule are used in the experiment.</p> <p>If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. </p> <p>If the user is not assigned to a launch or experiment, they are served the default variation.</p>
     * @param {String} feature The name of the feature being evaluated.
     * @param {String} project The name or ARN of the project that contains this feature.
     * @param {module:model/EvaluateFeatureRequest} evaluateFeatureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~evaluateFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EvaluateFeatureResponse}
     */
    evaluateFeature(feature, project, evaluateFeatureRequest, opts, callback) {
      opts = opts || {};
      let postBody = evaluateFeatureRequest;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling evaluateFeature");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling evaluateFeature");
      }
      // verify the required parameter 'evaluateFeatureRequest' is set
      if (evaluateFeatureRequest === undefined || evaluateFeatureRequest === null) {
        throw new Error("Missing the required parameter 'evaluateFeatureRequest' when calling evaluateFeature");
      }

      let pathParams = {
        'feature': feature,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EvaluateFeatureResponse;
      return this.apiClient.callApi(
        '/projects/{project}/evaluations/{feature}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiment operation.
     * @callback module:api/DefaultApi~getExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details about one experiment. You must already know the experiment name. To retrieve a list of experiments in your account, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html\">ListExperiments</a>.
     * @param {String} experiment The name of the experiment that you want to see the details of.
     * @param {String} project The name or ARN of the project that contains the experiment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExperimentResponse}
     */
    getExperiment(experiment, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling getExperiment");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getExperiment");
      }

      let pathParams = {
        'experiment': experiment,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExperimentResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments/{experiment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperimentResults operation.
     * @callback module:api/DefaultApi~getExperimentResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExperimentResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Retrieves the results of a running or completed experiment. No results are available until there have been 100 events for each variation and at least 10 minutes have passed since the start of the experiment. To increase the statistical power, Evidently performs an additional offline p-value analysis at the end of the experiment. Offline p-value analysis can detect statistical significance in some cases where the anytime p-values used during the experiment do not find statistical significance.</p> <p>Experiment results are available up to 63 days after the start of the experiment. They are not available after that because of CloudWatch data retention policies.</p>
     * @param {String} experiment The name of the experiment to retrieve the results of.
     * @param {String} project The name or ARN of the project that contains the experiment that you want to see the results of.
     * @param {module:model/GetExperimentResultsRequest} getExperimentResultsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getExperimentResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExperimentResultsResponse}
     */
    getExperimentResults(experiment, project, getExperimentResultsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getExperimentResultsRequest;
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling getExperimentResults");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getExperimentResults");
      }
      // verify the required parameter 'getExperimentResultsRequest' is set
      if (getExperimentResultsRequest === undefined || getExperimentResultsRequest === null) {
        throw new Error("Missing the required parameter 'getExperimentResultsRequest' when calling getExperimentResults");
      }

      let pathParams = {
        'experiment': experiment,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetExperimentResultsResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments/{experiment}/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeature operation.
     * @callback module:api/DefaultApi~getFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details about one feature. You must already know the feature name. To retrieve a list of features in your account, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html\">ListFeatures</a>.
     * @param {String} feature The name of the feature that you want to retrieve information for.
     * @param {String} project The name or ARN of the project that contains the feature.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeatureResponse}
     */
    getFeature(feature, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling getFeature");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getFeature");
      }

      let pathParams = {
        'feature': feature,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeatureResponse;
      return this.apiClient.callApi(
        '/projects/{project}/features/{feature}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLaunch operation.
     * @callback module:api/DefaultApi~getLaunchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLaunchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details about one launch. You must already know the launch name. To retrieve a list of launches in your account, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html\">ListLaunches</a>.
     * @param {String} launch The name of the launch that you want to see the details of.
     * @param {String} project The name or ARN of the project that contains the launch.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLaunchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLaunchResponse}
     */
    getLaunch(launch, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launch' is set
      if (launch === undefined || launch === null) {
        throw new Error("Missing the required parameter 'launch' when calling getLaunch");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getLaunch");
      }

      let pathParams = {
        'launch': launch,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLaunchResponse;
      return this.apiClient.callApi(
        '/projects/{project}/launches/{launch}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/DefaultApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details about one launch. You must already know the project name. To retrieve a list of projects in your account, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html\">ListProjects</a>.
     * @param {String} project The name or ARN of the project that you want to see the details of.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProjectResponse}
     */
    getProject(project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getProject");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetProjectResponse;
      return this.apiClient.callApi(
        '/projects/{project}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSegment operation.
     * @callback module:api/DefaultApi~getSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the specified segment. Specify the segment you want to view by specifying its ARN.
     * @param {String} segment The ARN of the segment to return information for.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSegmentResponse}
     */
    getSegment(segment, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'segment' is set
      if (segment === undefined || segment === null) {
        throw new Error("Missing the required parameter 'segment' when calling getSegment");
      }

      let pathParams = {
        'segment': segment
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSegmentResponse;
      return this.apiClient.callApi(
        '/segments/{segment}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExperiments operation.
     * @callback module:api/DefaultApi~listExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration details about all the experiments in the specified project.
     * @param {String} project The name or ARN of the project to return the experiment list from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextToken] The token to use when requesting the next set of results. You received this token from a previous <code>ListExperiments</code> operation.
     * @param {module:model/String} [status] Use this optional parameter to limit the returned results to only the experiments with the status that you specify here.
     * @param {module:api/DefaultApi~listExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExperimentsResponse}
     */
    listExperiments(project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listExperiments");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListExperimentsResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listFeatures operation.
     * @callback module:api/DefaultApi~listFeaturesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListFeaturesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration details about all the features in the specified project.
     * @param {String} project The name or ARN of the project to return the feature list from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextToken] The token to use when requesting the next set of results. You received this token from a previous <code>ListFeatures</code> operation.
     * @param {module:api/DefaultApi~listFeaturesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListFeaturesResponse}
     */
    listFeatures(project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listFeatures");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListFeaturesResponse;
      return this.apiClient.callApi(
        '/projects/{project}/features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLaunches operation.
     * @callback module:api/DefaultApi~listLaunchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLaunchesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration details about all the launches in the specified project.
     * @param {String} project The name or ARN of the project to return the launch list from.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextToken] The token to use when requesting the next set of results. You received this token from a previous <code>ListLaunches</code> operation.
     * @param {module:model/String} [status] Use this optional parameter to limit the returned results to only the launches with the status that you specify here.
     * @param {module:api/DefaultApi~listLaunchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLaunchesResponse}
     */
    listLaunches(project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listLaunches");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLaunchesResponse;
      return this.apiClient.callApi(
        '/projects/{project}/launches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/DefaultApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns configuration details about all the projects in the current Region in your account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response.
     * @param {String} [nextToken] The token to use when requesting the next set of results. You received this token from a previous <code>ListProjects</code> operation.
     * @param {module:api/DefaultApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListProjectsResponse}
     */
    listProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListProjectsResponse;
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSegmentReferences operation.
     * @callback module:api/DefaultApi~listSegmentReferencesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSegmentReferencesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this operation to find which experiments or launches are using a specified segment.
     * @param {String} segment The ARN of the segment that you want to view information for.
     * @param {module:model/String} type Specifies whether to return information about launches or experiments that use this segment.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response. If you omit this, the default of 50 is used.
     * @param {String} [nextToken] The token to use when requesting the next set of results. You received this token from a previous <code>ListSegmentReferences</code> operation.
     * @param {module:api/DefaultApi~listSegmentReferencesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSegmentReferencesResponse}
     */
    listSegmentReferences(segment, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'segment' is set
      if (segment === undefined || segment === null) {
        throw new Error("Missing the required parameter 'segment' when calling listSegmentReferences");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling listSegmentReferences");
      }

      let pathParams = {
        'segment': segment
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'type': type
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSegmentReferencesResponse;
      return this.apiClient.callApi(
        '/segments/{segment}/references#type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSegments operation.
     * @callback module:api/DefaultApi~listSegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of audience segments that you have created in your account in this Region.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results to include in the response. If you omit this, the default of 50 is used.
     * @param {String} [nextToken] The token to use when requesting the next set of results. You received this token from a previous <code>ListSegments</code> operation.
     * @param {module:api/DefaultApi~listSegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSegmentsResponse}
     */
    listSegments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSegmentsResponse;
      return this.apiClient.callApi(
        '/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the tags associated with an Evidently resource.
     * @param {String} resourceArn The ARN of the resource that you want to see the tags of.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProjectEvents operation.
     * @callback module:api/DefaultApi~putProjectEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutProjectEventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends performance events to Evidently. These events can be used to evaluate a launch or an experiment.
     * @param {String} project The name or ARN of the project to write the events to.
     * @param {module:model/PutProjectEventsRequest} putProjectEventsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putProjectEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutProjectEventsResponse}
     */
    putProjectEvents(project, putProjectEventsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putProjectEventsRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling putProjectEvents");
      }
      // verify the required parameter 'putProjectEventsRequest' is set
      if (putProjectEventsRequest === undefined || putProjectEventsRequest === null) {
        throw new Error("Missing the required parameter 'putProjectEventsRequest' when calling putProjectEvents");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutProjectEventsResponse;
      return this.apiClient.callApi(
        '/events/projects/{project}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startExperiment operation.
     * @callback module:api/DefaultApi~startExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an existing experiment. To create an experiment, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html\">CreateExperiment</a>.
     * @param {String} experiment The name of the experiment to start.
     * @param {String} project The name or ARN of the project that contains the experiment to start.
     * @param {module:model/StartExperimentRequest} startExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartExperimentResponse}
     */
    startExperiment(experiment, project, startExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = startExperimentRequest;
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling startExperiment");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling startExperiment");
      }
      // verify the required parameter 'startExperimentRequest' is set
      if (startExperimentRequest === undefined || startExperimentRequest === null) {
        throw new Error("Missing the required parameter 'startExperimentRequest' when calling startExperiment");
      }

      let pathParams = {
        'experiment': experiment,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartExperimentResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments/{experiment}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startLaunch operation.
     * @callback module:api/DefaultApi~startLaunchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartLaunchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts an existing launch. To create a launch, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html\">CreateLaunch</a>.
     * @param {String} launch The name of the launch to start.
     * @param {String} project The name or ARN of the project that contains the launch to start.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startLaunchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartLaunchResponse}
     */
    startLaunch(launch, project, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'launch' is set
      if (launch === undefined || launch === null) {
        throw new Error("Missing the required parameter 'launch' when calling startLaunch");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling startLaunch");
      }

      let pathParams = {
        'launch': launch,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartLaunchResponse;
      return this.apiClient.callApi(
        '/projects/{project}/launches/{launch}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopExperiment operation.
     * @callback module:api/DefaultApi~stopExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops an experiment that is currently running. If you stop an experiment, you can't resume it or restart it.
     * @param {String} experiment The name of the experiment to stop.
     * @param {String} project The name or ARN of the project that contains the experiment to stop.
     * @param {module:model/StopExperimentRequest} stopExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopExperimentResponse}
     */
    stopExperiment(experiment, project, stopExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopExperimentRequest;
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling stopExperiment");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopExperiment");
      }
      // verify the required parameter 'stopExperimentRequest' is set
      if (stopExperimentRequest === undefined || stopExperimentRequest === null) {
        throw new Error("Missing the required parameter 'stopExperimentRequest' when calling stopExperiment");
      }

      let pathParams = {
        'experiment': experiment,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopExperimentResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments/{experiment}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopLaunch operation.
     * @callback module:api/DefaultApi~stopLaunchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopLaunchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it. Also, it will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch will instead be available to the feature's experiment, if there is one. Otherwise, all traffic will be served the default variation after the launch is stopped.
     * @param {String} launch The name of the launch to stop.
     * @param {String} project The name or ARN of the project that contains the launch that you want to stop.
     * @param {module:model/StopLaunchRequest} stopLaunchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopLaunchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopLaunchResponse}
     */
    stopLaunch(launch, project, stopLaunchRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopLaunchRequest;
      // verify the required parameter 'launch' is set
      if (launch === undefined || launch === null) {
        throw new Error("Missing the required parameter 'launch' when calling stopLaunch");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopLaunch");
      }
      // verify the required parameter 'stopLaunchRequest' is set
      if (stopLaunchRequest === undefined || stopLaunchRequest === null) {
        throw new Error("Missing the required parameter 'stopLaunchRequest' when calling stopLaunch");
      }

      let pathParams = {
        'launch': launch,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopLaunchResponse;
      return this.apiClient.callApi(
        '/projects/{project}/launches/{launch}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects, features, launches, and experiments can be tagged.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.</p> <p>Tags don't have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.</p> <p>You can use the <code>TagResource</code> action with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p> <p>You can associate as many as 50 tags with a resource.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\">Tagging Amazon Web Services resources</a>.</p>
     * @param {String} resourceArn The ARN of the CloudWatch Evidently resource that you're adding tags to.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testSegmentPattern operation.
     * @callback module:api/DefaultApi~testSegmentPatternCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestSegmentPatternResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Use this operation to test a rules pattern that you plan to use to create an audience segment. For more information about segments, see <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html\">CreateSegment</a>.
     * @param {module:model/TestSegmentPatternRequest} testSegmentPatternRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~testSegmentPatternCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestSegmentPatternResponse}
     */
    testSegmentPattern(testSegmentPatternRequest, opts, callback) {
      opts = opts || {};
      let postBody = testSegmentPatternRequest;
      // verify the required parameter 'testSegmentPatternRequest' is set
      if (testSegmentPatternRequest === undefined || testSegmentPatternRequest === null) {
        throw new Error("Missing the required parameter 'testSegmentPatternRequest' when calling testSegmentPattern");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestSegmentPatternResponse;
      return this.apiClient.callApi(
        '/test-segment-pattern', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes one or more tags from the specified resource.
     * @param {String} resourceArn The ARN of the CloudWatch Evidently resource that you're removing tags from.
     * @param {Array.<String>} tagKeys The list of tag keys to remove from the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment operation.
     * @callback module:api/DefaultApi~updateExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateExperimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an Evidently experiment. </p> <p>Don't use this operation to update an experiment's tag. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\">TagResource</a>. </p>
     * @param {String} experiment The name of the experiment to update.
     * @param {String} project The name or ARN of the project that contains the experiment that you want to update.
     * @param {module:model/UpdateExperimentRequest} updateExperimentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateExperimentResponse}
     */
    updateExperiment(experiment, project, updateExperimentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateExperimentRequest;
      // verify the required parameter 'experiment' is set
      if (experiment === undefined || experiment === null) {
        throw new Error("Missing the required parameter 'experiment' when calling updateExperiment");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateExperiment");
      }
      // verify the required parameter 'updateExperimentRequest' is set
      if (updateExperimentRequest === undefined || updateExperimentRequest === null) {
        throw new Error("Missing the required parameter 'updateExperimentRequest' when calling updateExperiment");
      }

      let pathParams = {
        'experiment': experiment,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateExperimentResponse;
      return this.apiClient.callApi(
        '/projects/{project}/experiments/{experiment}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeature operation.
     * @callback module:api/DefaultApi~updateFeatureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateFeatureResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates an existing feature.</p> <p>You can't use this operation to update the tags of an existing feature. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\">TagResource</a>. </p>
     * @param {String} feature The name of the feature to be updated.
     * @param {String} project The name or ARN of the project that contains the feature to be updated.
     * @param {module:model/UpdateFeatureRequest} updateFeatureRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateFeatureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateFeatureResponse}
     */
    updateFeature(feature, project, updateFeatureRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFeatureRequest;
      // verify the required parameter 'feature' is set
      if (feature === undefined || feature === null) {
        throw new Error("Missing the required parameter 'feature' when calling updateFeature");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateFeature");
      }
      // verify the required parameter 'updateFeatureRequest' is set
      if (updateFeatureRequest === undefined || updateFeatureRequest === null) {
        throw new Error("Missing the required parameter 'updateFeatureRequest' when calling updateFeature");
      }

      let pathParams = {
        'feature': feature,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateFeatureResponse;
      return this.apiClient.callApi(
        '/projects/{project}/features/{feature}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLaunch operation.
     * @callback module:api/DefaultApi~updateLaunchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateLaunchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates a launch of a given feature. </p> <p>Don't use this operation to update the tags of an existing launch. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\">TagResource</a>. </p>
     * @param {String} launch The name of the launch that is to be updated.
     * @param {String} project The name or ARN of the project that contains the launch that you want to update.
     * @param {module:model/UpdateLaunchRequest} updateLaunchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLaunchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateLaunchResponse}
     */
    updateLaunch(launch, project, updateLaunchRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLaunchRequest;
      // verify the required parameter 'launch' is set
      if (launch === undefined || launch === null) {
        throw new Error("Missing the required parameter 'launch' when calling updateLaunch");
      }
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateLaunch");
      }
      // verify the required parameter 'updateLaunchRequest' is set
      if (updateLaunchRequest === undefined || updateLaunchRequest === null) {
        throw new Error("Missing the required parameter 'updateLaunchRequest' when calling updateLaunch");
      }

      let pathParams = {
        'launch': launch,
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateLaunchResponse;
      return this.apiClient.callApi(
        '/projects/{project}/launches/{launch}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback module:api/DefaultApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the description of an existing project.</p> <p>To create a new project, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html\">CreateProject</a>.</p> <p>Don't use this operation to update the data storage options of a project. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html\">UpdateProjectDataDelivery</a>. </p> <p>Don't use this operation to update the tags of a project. Instead, use <a href=\"https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\">TagResource</a>. </p>
     * @param {String} project The name or ARN of the project to update.
     * @param {module:model/UpdateProjectRequest} updateProjectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProjectResponse}
     */
    updateProject(project, updateProjectRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateProject");
      }
      // verify the required parameter 'updateProjectRequest' is set
      if (updateProjectRequest === undefined || updateProjectRequest === null) {
        throw new Error("Missing the required parameter 'updateProjectRequest' when calling updateProject");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProjectResponse;
      return this.apiClient.callApi(
        '/projects/{project}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProjectDataDelivery operation.
     * @callback module:api/DefaultApi~updateProjectDataDeliveryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateProjectDataDeliveryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.</p> <p>You can't specify both <code>cloudWatchLogs</code> and <code>s3Destination</code> in the same operation.</p>
     * @param {String} project The name or ARN of the project that you want to modify the data storage options for.
     * @param {module:model/UpdateProjectDataDeliveryRequest} updateProjectDataDeliveryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateProjectDataDeliveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateProjectDataDeliveryResponse}
     */
    updateProjectDataDelivery(project, updateProjectDataDeliveryRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateProjectDataDeliveryRequest;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateProjectDataDelivery");
      }
      // verify the required parameter 'updateProjectDataDeliveryRequest' is set
      if (updateProjectDataDeliveryRequest === undefined || updateProjectDataDeliveryRequest === null) {
        throw new Error("Missing the required parameter 'updateProjectDataDeliveryRequest' when calling updateProjectDataDelivery");
      }

      let pathParams = {
        'project': project
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateProjectDataDeliveryResponse;
      return this.apiClient.callApi(
        '/projects/{project}/data-delivery', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
