/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExperimentReportName from './ExperimentReportName';
import ExperimentResultRequestType from './ExperimentResultRequestType';

/**
 * The GetExperimentResultsRequest model module.
 * @module model/GetExperimentResultsRequest
 * @version 2021-02-01
 */
class GetExperimentResultsRequest {
    /**
     * Constructs a new <code>GetExperimentResultsRequest</code>.
     * @alias module:model/GetExperimentResultsRequest
     * @param metricNames {Array.<String>} The names of the experiment metrics that you want to see the results of.
     * @param treatmentNames {Array.<String>} The names of the experiment treatments that you want to see the results for.
     */
    constructor(metricNames, treatmentNames) { 
        
        GetExperimentResultsRequest.initialize(this, metricNames, treatmentNames);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricNames, treatmentNames) { 
        obj['metricNames'] = metricNames;
        obj['treatmentNames'] = treatmentNames;
    }

    /**
     * Constructs a <code>GetExperimentResultsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetExperimentResultsRequest} obj Optional instance to populate.
     * @return {module:model/GetExperimentResultsRequest} The populated <code>GetExperimentResultsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetExperimentResultsRequest();

            if (data.hasOwnProperty('baseStat')) {
                obj['baseStat'] = ApiClient.convertToType(data['baseStat'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('metricNames')) {
                obj['metricNames'] = ApiClient.convertToType(data['metricNames'], ['String']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('reportNames')) {
                obj['reportNames'] = ApiClient.convertToType(data['reportNames'], [ExperimentReportName]);
            }
            if (data.hasOwnProperty('resultStats')) {
                obj['resultStats'] = ApiClient.convertToType(data['resultStats'], [ExperimentResultRequestType]);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('treatmentNames')) {
                obj['treatmentNames'] = ApiClient.convertToType(data['treatmentNames'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetExperimentResultsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetExperimentResultsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetExperimentResultsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['baseStat'] && !(typeof data['baseStat'] === 'string' || data['baseStat'] instanceof String)) {
            throw new Error("Expected the field `baseStat` to be a primitive type in the JSON string but got " + data['baseStat']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['metricNames'])) {
            throw new Error("Expected the field `metricNames` to be an array in the JSON data but got " + data['metricNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reportNames'])) {
            throw new Error("Expected the field `reportNames` to be an array in the JSON data but got " + data['reportNames']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resultStats'])) {
            throw new Error("Expected the field `resultStats` to be an array in the JSON data but got " + data['resultStats']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['treatmentNames'])) {
            throw new Error("Expected the field `treatmentNames` to be an array in the JSON data but got " + data['treatmentNames']);
        }

        return true;
    }


}

GetExperimentResultsRequest.RequiredProperties = ["metricNames", "treatmentNames"];

/**
 * The statistic used to calculate experiment results. Currently the only valid value is <code>mean</code>, which uses the mean of the collected values as the statistic.
 * @member {module:model/GetExperimentResultsRequest.BaseStatEnum} baseStat
 */
GetExperimentResultsRequest.prototype['baseStat'] = undefined;

/**
 * The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.
 * @member {Date} endTime
 */
GetExperimentResultsRequest.prototype['endTime'] = undefined;

/**
 * The names of the experiment metrics that you want to see the results of.
 * @member {Array.<String>} metricNames
 */
GetExperimentResultsRequest.prototype['metricNames'] = undefined;

/**
 * In seconds, the amount of time to aggregate results together. 
 * @member {Number} period
 */
GetExperimentResultsRequest.prototype['period'] = undefined;

/**
 * The names of the report types that you want to see. Currently, <code>BayesianInference</code> is the only valid value.
 * @member {Array.<module:model/ExperimentReportName>} reportNames
 */
GetExperimentResultsRequest.prototype['reportNames'] = undefined;

/**
 * <p>The statistics that you want to see in the returned results.</p> <ul> <li> <p> <code>PValue</code> specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.</p> </li> <li> <p> <code>ConfidenceInterval</code> specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the <code>baseStat</code> of a variation and the baseline. Evidently returns the 95% confidence interval. </p> </li> <li> <p> <code>TreatmentEffect</code> is the difference in the statistic specified by the <code>baseStat</code> parameter between each variation and the default variation. </p> </li> <li> <p> <code>BaseStat</code> returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the <code>baseStat</code> parameter. Therefore, if <code>baseStat</code> is <code>mean</code>, this returns the mean of the values collected for each variation.</p> </li> </ul>
 * @member {Array.<module:model/ExperimentResultRequestType>} resultStats
 */
GetExperimentResultsRequest.prototype['resultStats'] = undefined;

/**
 * The date and time that the experiment started.
 * @member {Date} startTime
 */
GetExperimentResultsRequest.prototype['startTime'] = undefined;

/**
 * The names of the experiment treatments that you want to see the results for.
 * @member {Array.<String>} treatmentNames
 */
GetExperimentResultsRequest.prototype['treatmentNames'] = undefined;





/**
 * Allowed values for the <code>baseStat</code> property.
 * @enum {String}
 * @readonly
 */
GetExperimentResultsRequest['BaseStatEnum'] = {

    /**
     * value: "Mean"
     * @const
     */
    "Mean": "Mean"
};



export default GetExperimentResultsRequest;

