/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateExperimentRequestOnlineAbConfig from './CreateExperimentRequestOnlineAbConfig';
import MetricGoalConfig from './MetricGoalConfig';
import TreatmentConfig from './TreatmentConfig';

/**
 * The UpdateExperimentRequest model module.
 * @module model/UpdateExperimentRequest
 * @version 2021-02-01
 */
class UpdateExperimentRequest {
    /**
     * Constructs a new <code>UpdateExperimentRequest</code>.
     * @alias module:model/UpdateExperimentRequest
     */
    constructor() { 
        
        UpdateExperimentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateExperimentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateExperimentRequest} obj Optional instance to populate.
     * @return {module:model/UpdateExperimentRequest} The populated <code>UpdateExperimentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateExperimentRequest();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metricGoals')) {
                obj['metricGoals'] = ApiClient.convertToType(data['metricGoals'], [MetricGoalConfig]);
            }
            if (data.hasOwnProperty('onlineAbConfig')) {
                obj['onlineAbConfig'] = CreateExperimentRequestOnlineAbConfig.constructFromObject(data['onlineAbConfig']);
            }
            if (data.hasOwnProperty('randomizationSalt')) {
                obj['randomizationSalt'] = ApiClient.convertToType(data['randomizationSalt'], 'String');
            }
            if (data.hasOwnProperty('removeSegment')) {
                obj['removeSegment'] = ApiClient.convertToType(data['removeSegment'], 'Boolean');
            }
            if (data.hasOwnProperty('samplingRate')) {
                obj['samplingRate'] = ApiClient.convertToType(data['samplingRate'], 'Number');
            }
            if (data.hasOwnProperty('segment')) {
                obj['segment'] = ApiClient.convertToType(data['segment'], 'String');
            }
            if (data.hasOwnProperty('treatments')) {
                obj['treatments'] = ApiClient.convertToType(data['treatments'], [TreatmentConfig]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateExperimentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateExperimentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['metricGoals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricGoals'])) {
                throw new Error("Expected the field `metricGoals` to be an array in the JSON data but got " + data['metricGoals']);
            }
            // validate the optional field `metricGoals` (array)
            for (const item of data['metricGoals']) {
                MetricGoalConfig.validateJSON(item);
            };
        }
        // validate the optional field `onlineAbConfig`
        if (data['onlineAbConfig']) { // data not null
          CreateExperimentRequestOnlineAbConfig.validateJSON(data['onlineAbConfig']);
        }
        // ensure the json data is a string
        if (data['randomizationSalt'] && !(typeof data['randomizationSalt'] === 'string' || data['randomizationSalt'] instanceof String)) {
            throw new Error("Expected the field `randomizationSalt` to be a primitive type in the JSON string but got " + data['randomizationSalt']);
        }
        // ensure the json data is a string
        if (data['segment'] && !(typeof data['segment'] === 'string' || data['segment'] instanceof String)) {
            throw new Error("Expected the field `segment` to be a primitive type in the JSON string but got " + data['segment']);
        }
        if (data['treatments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['treatments'])) {
                throw new Error("Expected the field `treatments` to be an array in the JSON data but got " + data['treatments']);
            }
            // validate the optional field `treatments` (array)
            for (const item of data['treatments']) {
                TreatmentConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An optional description of the experiment.
 * @member {String} description
 */
UpdateExperimentRequest.prototype['description'] = undefined;

/**
 * An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.
 * @member {Array.<module:model/MetricGoalConfig>} metricGoals
 */
UpdateExperimentRequest.prototype['metricGoals'] = undefined;

/**
 * @member {module:model/CreateExperimentRequestOnlineAbConfig} onlineAbConfig
 */
UpdateExperimentRequest.prototype['onlineAbConfig'] = undefined;

/**
 * When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and <code>randomizationSalt</code>. If you omit <code>randomizationSalt</code>, Evidently uses the experiment name as the <code>randomizationSalt</code>.
 * @member {String} randomizationSalt
 */
UpdateExperimentRequest.prototype['randomizationSalt'] = undefined;

/**
 * Removes a segment from being used in an experiment. You can't use this parameter if the experiment is currently running.
 * @member {Boolean} removeSegment
 */
UpdateExperimentRequest.prototype['removeSegment'] = undefined;

/**
 * <p>The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.</p> <p>This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.</p>
 * @member {Number} samplingRate
 */
UpdateExperimentRequest.prototype['samplingRate'] = undefined;

/**
 * Adds an audience <i>segment</i> to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can't use this parameter if the experiment is currently running.
 * @member {String} segment
 */
UpdateExperimentRequest.prototype['segment'] = undefined;

/**
 * An array of structures that define the variations being tested in the experiment.
 * @member {Array.<module:model/TreatmentConfig>} treatments
 */
UpdateExperimentRequest.prototype['treatments'] = undefined;






export default UpdateExperimentRequest;

