/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TreatmentConfig model module.
 * @module model/TreatmentConfig
 * @version 2021-02-01
 */
class TreatmentConfig {
    /**
     * Constructs a new <code>TreatmentConfig</code>.
     * A structure that defines one treatment in an experiment. A treatment is a variation of the feature that you are including in the experiment.
     * @alias module:model/TreatmentConfig
     * @param feature {String} 
     * @param name {String} 
     * @param variation {String} 
     */
    constructor(feature, name, variation) { 
        
        TreatmentConfig.initialize(this, feature, name, variation);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, feature, name, variation) { 
        obj['feature'] = feature;
        obj['name'] = name;
        obj['variation'] = variation;
    }

    /**
     * Constructs a <code>TreatmentConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TreatmentConfig} obj Optional instance to populate.
     * @return {module:model/TreatmentConfig} The populated <code>TreatmentConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TreatmentConfig();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('feature')) {
                obj['feature'] = ApiClient.convertToType(data['feature'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('variation')) {
                obj['variation'] = ApiClient.convertToType(data['variation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TreatmentConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TreatmentConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TreatmentConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `feature`
        if (data['feature']) { // data not null
          String.validateJSON(data['feature']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `variation`
        if (data['variation']) { // data not null
          String.validateJSON(data['variation']);
        }

        return true;
    }


}

TreatmentConfig.RequiredProperties = ["feature", "name", "variation"];

/**
 * @member {String} description
 */
TreatmentConfig.prototype['description'] = undefined;

/**
 * @member {String} feature
 */
TreatmentConfig.prototype['feature'] = undefined;

/**
 * @member {String} name
 */
TreatmentConfig.prototype['name'] = undefined;

/**
 * @member {String} variation
 */
TreatmentConfig.prototype['variation'] = undefined;






export default TreatmentConfig;

