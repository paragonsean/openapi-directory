/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VariationConfig from './VariationConfig';

/**
 * The UpdateFeatureRequest model module.
 * @module model/UpdateFeatureRequest
 * @version 2021-02-01
 */
class UpdateFeatureRequest {
    /**
     * Constructs a new <code>UpdateFeatureRequest</code>.
     * @alias module:model/UpdateFeatureRequest
     */
    constructor() { 
        
        UpdateFeatureRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateFeatureRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateFeatureRequest} obj Optional instance to populate.
     * @return {module:model/UpdateFeatureRequest} The populated <code>UpdateFeatureRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateFeatureRequest();

            if (data.hasOwnProperty('addOrUpdateVariations')) {
                obj['addOrUpdateVariations'] = ApiClient.convertToType(data['addOrUpdateVariations'], [VariationConfig]);
            }
            if (data.hasOwnProperty('defaultVariation')) {
                obj['defaultVariation'] = ApiClient.convertToType(data['defaultVariation'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('entityOverrides')) {
                obj['entityOverrides'] = ApiClient.convertToType(data['entityOverrides'], {'String': 'String'});
            }
            if (data.hasOwnProperty('evaluationStrategy')) {
                obj['evaluationStrategy'] = ApiClient.convertToType(data['evaluationStrategy'], 'String');
            }
            if (data.hasOwnProperty('removeVariations')) {
                obj['removeVariations'] = ApiClient.convertToType(data['removeVariations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateFeatureRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateFeatureRequest</code>.
     */
    static validateJSON(data) {
        if (data['addOrUpdateVariations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['addOrUpdateVariations'])) {
                throw new Error("Expected the field `addOrUpdateVariations` to be an array in the JSON data but got " + data['addOrUpdateVariations']);
            }
            // validate the optional field `addOrUpdateVariations` (array)
            for (const item of data['addOrUpdateVariations']) {
                VariationConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defaultVariation'] && !(typeof data['defaultVariation'] === 'string' || data['defaultVariation'] instanceof String)) {
            throw new Error("Expected the field `defaultVariation` to be a primitive type in the JSON string but got " + data['defaultVariation']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['evaluationStrategy'] && !(typeof data['evaluationStrategy'] === 'string' || data['evaluationStrategy'] instanceof String)) {
            throw new Error("Expected the field `evaluationStrategy` to be a primitive type in the JSON string but got " + data['evaluationStrategy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['removeVariations'])) {
            throw new Error("Expected the field `removeVariations` to be an array in the JSON data but got " + data['removeVariations']);
        }

        return true;
    }


}



/**
 * To update variation configurations for this feature, or add new ones, specify this structure. In this array, include any variations that you want to add or update. If the array includes a variation name that already exists for this feature, it is updated. If it includes a new variation name, it is added as a new variation.
 * @member {Array.<module:model/VariationConfig>} addOrUpdateVariations
 */
UpdateFeatureRequest.prototype['addOrUpdateVariations'] = undefined;

/**
 * The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
 * @member {String} defaultVariation
 */
UpdateFeatureRequest.prototype['defaultVariation'] = undefined;

/**
 * An optional description of the feature.
 * @member {String} description
 */
UpdateFeatureRequest.prototype['description'] = undefined;

/**
 * <p>Specified users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.</p> <p>This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.</p>
 * @member {Object.<String, String>} entityOverrides
 */
UpdateFeatureRequest.prototype['entityOverrides'] = undefined;

/**
 * Specify <code>ALL_RULES</code> to activate the traffic allocation specified by any ongoing launches or experiments. Specify <code>DEFAULT_VARIATION</code> to serve the default variation to all users instead.
 * @member {module:model/UpdateFeatureRequest.EvaluationStrategyEnum} evaluationStrategy
 */
UpdateFeatureRequest.prototype['evaluationStrategy'] = undefined;

/**
 * <p>Removes a variation from the feature. If the variation you specify doesn't exist, then this makes no change and does not report an error.</p> <p>This operation fails if you try to remove a variation that is part of an ongoing launch or experiment.</p>
 * @member {Array.<String>} removeVariations
 */
UpdateFeatureRequest.prototype['removeVariations'] = undefined;





/**
 * Allowed values for the <code>evaluationStrategy</code> property.
 * @enum {String}
 * @readonly
 */
UpdateFeatureRequest['EvaluationStrategyEnum'] = {

    /**
     * value: "ALL_RULES"
     * @const
     */
    "ALL_RULES": "ALL_RULES",

    /**
     * value: "DEFAULT_VARIATION"
     * @const
     */
    "DEFAULT_VARIATION": "DEFAULT_VARIATION"
};



export default UpdateFeatureRequest;

