/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLaunchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLaunchRequest::OAIUpdateLaunchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLaunchRequest::OAIUpdateLaunchRequest() {
    this->initializeModel();
}

OAIUpdateLaunchRequest::~OAIUpdateLaunchRequest() {}

void OAIUpdateLaunchRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_metric_monitors_isSet = false;
    m_metric_monitors_isValid = false;

    m_randomization_salt_isSet = false;
    m_randomization_salt_isValid = false;

    m_scheduled_splits_config_isSet = false;
    m_scheduled_splits_config_isValid = false;
}

void OAIUpdateLaunchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLaunchRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_metric_monitors_isValid = ::OpenAPI::fromJsonValue(m_metric_monitors, json[QString("metricMonitors")]);
    m_metric_monitors_isSet = !json[QString("metricMonitors")].isNull() && m_metric_monitors_isValid;

    m_randomization_salt_isValid = ::OpenAPI::fromJsonValue(m_randomization_salt, json[QString("randomizationSalt")]);
    m_randomization_salt_isSet = !json[QString("randomizationSalt")].isNull() && m_randomization_salt_isValid;

    m_scheduled_splits_config_isValid = ::OpenAPI::fromJsonValue(m_scheduled_splits_config, json[QString("scheduledSplitsConfig")]);
    m_scheduled_splits_config_isSet = !json[QString("scheduledSplitsConfig")].isNull() && m_scheduled_splits_config_isValid;
}

QString OAIUpdateLaunchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLaunchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_metric_monitors.isSet()) {
        obj.insert(QString("metricMonitors"), ::OpenAPI::toJsonValue(m_metric_monitors));
    }
    if (m_randomization_salt_isSet) {
        obj.insert(QString("randomizationSalt"), ::OpenAPI::toJsonValue(m_randomization_salt));
    }
    if (m_scheduled_splits_config.isSet()) {
        obj.insert(QString("scheduledSplitsConfig"), ::OpenAPI::toJsonValue(m_scheduled_splits_config));
    }
    return obj;
}

QString OAIUpdateLaunchRequest::getDescription() const {
    return m_description;
}
void OAIUpdateLaunchRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateLaunchRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateLaunchRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateLaunchRequest::getGroups() const {
    return m_groups;
}
void OAIUpdateLaunchRequest::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIUpdateLaunchRequest::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIUpdateLaunchRequest::is_groups_Valid() const{
    return m_groups_isValid;
}

QList OAIUpdateLaunchRequest::getMetricMonitors() const {
    return m_metric_monitors;
}
void OAIUpdateLaunchRequest::setMetricMonitors(const QList &metric_monitors) {
    m_metric_monitors = metric_monitors;
    m_metric_monitors_isSet = true;
}

bool OAIUpdateLaunchRequest::is_metric_monitors_Set() const{
    return m_metric_monitors_isSet;
}

bool OAIUpdateLaunchRequest::is_metric_monitors_Valid() const{
    return m_metric_monitors_isValid;
}

QString OAIUpdateLaunchRequest::getRandomizationSalt() const {
    return m_randomization_salt;
}
void OAIUpdateLaunchRequest::setRandomizationSalt(const QString &randomization_salt) {
    m_randomization_salt = randomization_salt;
    m_randomization_salt_isSet = true;
}

bool OAIUpdateLaunchRequest::is_randomization_salt_Set() const{
    return m_randomization_salt_isSet;
}

bool OAIUpdateLaunchRequest::is_randomization_salt_Valid() const{
    return m_randomization_salt_isValid;
}

OAICreateLaunchRequest_scheduledSplitsConfig OAIUpdateLaunchRequest::getScheduledSplitsConfig() const {
    return m_scheduled_splits_config;
}
void OAIUpdateLaunchRequest::setScheduledSplitsConfig(const OAICreateLaunchRequest_scheduledSplitsConfig &scheduled_splits_config) {
    m_scheduled_splits_config = scheduled_splits_config;
    m_scheduled_splits_config_isSet = true;
}

bool OAIUpdateLaunchRequest::is_scheduled_splits_config_Set() const{
    return m_scheduled_splits_config_isSet;
}

bool OAIUpdateLaunchRequest::is_scheduled_splits_config_Valid() const{
    return m_scheduled_splits_config_isValid;
}

bool OAIUpdateLaunchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_monitors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomization_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_splits_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLaunchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
