/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILaunchGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILaunchGroup::OAILaunchGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILaunchGroup::OAILaunchGroup() {
    this->initializeModel();
}

OAILaunchGroup::~OAILaunchGroup() {}

void OAILaunchGroup::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_feature_variations_isSet = false;
    m_feature_variations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILaunchGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILaunchGroup::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_feature_variations_isValid = ::OpenAPI::fromJsonValue(m_feature_variations, json[QString("featureVariations")]);
    m_feature_variations_isSet = !json[QString("featureVariations")].isNull() && m_feature_variations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILaunchGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILaunchGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_feature_variations.isSet()) {
        obj.insert(QString("featureVariations"), ::OpenAPI::toJsonValue(m_feature_variations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAILaunchGroup::getDescription() const {
    return m_description;
}
void OAILaunchGroup::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILaunchGroup::is_description_Set() const{
    return m_description_isSet;
}

bool OAILaunchGroup::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAILaunchGroup::getFeatureVariations() const {
    return m_feature_variations;
}
void OAILaunchGroup::setFeatureVariations(const QMap &feature_variations) {
    m_feature_variations = feature_variations;
    m_feature_variations_isSet = true;
}

bool OAILaunchGroup::is_feature_variations_Set() const{
    return m_feature_variations_isSet;
}

bool OAILaunchGroup::is_feature_variations_Valid() const{
    return m_feature_variations_isValid;
}

QString OAILaunchGroup::getName() const {
    return m_name;
}
void OAILaunchGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILaunchGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAILaunchGroup::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILaunchGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_variations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILaunchGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_feature_variations_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
