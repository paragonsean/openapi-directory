/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExperimentResultsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExperimentResultsResponse::OAIGetExperimentResultsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExperimentResultsResponse::OAIGetExperimentResultsResponse() {
    this->initializeModel();
}

OAIGetExperimentResultsResponse::~OAIGetExperimentResultsResponse() {}

void OAIGetExperimentResultsResponse::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_reports_isSet = false;
    m_reports_isValid = false;

    m_results_data_isSet = false;
    m_results_data_isValid = false;

    m_timestamps_isSet = false;
    m_timestamps_isValid = false;
}

void OAIGetExperimentResultsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExperimentResultsResponse::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_reports_isValid = ::OpenAPI::fromJsonValue(m_reports, json[QString("reports")]);
    m_reports_isSet = !json[QString("reports")].isNull() && m_reports_isValid;

    m_results_data_isValid = ::OpenAPI::fromJsonValue(m_results_data, json[QString("resultsData")]);
    m_results_data_isSet = !json[QString("resultsData")].isNull() && m_results_data_isValid;

    m_timestamps_isValid = ::OpenAPI::fromJsonValue(m_timestamps, json[QString("timestamps")]);
    m_timestamps_isSet = !json[QString("timestamps")].isNull() && m_timestamps_isValid;
}

QString OAIGetExperimentResultsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExperimentResultsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_reports.isSet()) {
        obj.insert(QString("reports"), ::OpenAPI::toJsonValue(m_reports));
    }
    if (m_results_data.isSet()) {
        obj.insert(QString("resultsData"), ::OpenAPI::toJsonValue(m_results_data));
    }
    if (m_timestamps.isSet()) {
        obj.insert(QString("timestamps"), ::OpenAPI::toJsonValue(m_timestamps));
    }
    return obj;
}

QString OAIGetExperimentResultsResponse::getDetails() const {
    return m_details;
}
void OAIGetExperimentResultsResponse::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIGetExperimentResultsResponse::is_details_Set() const{
    return m_details_isSet;
}

bool OAIGetExperimentResultsResponse::is_details_Valid() const{
    return m_details_isValid;
}

QList OAIGetExperimentResultsResponse::getReports() const {
    return m_reports;
}
void OAIGetExperimentResultsResponse::setReports(const QList &reports) {
    m_reports = reports;
    m_reports_isSet = true;
}

bool OAIGetExperimentResultsResponse::is_reports_Set() const{
    return m_reports_isSet;
}

bool OAIGetExperimentResultsResponse::is_reports_Valid() const{
    return m_reports_isValid;
}

QList OAIGetExperimentResultsResponse::getResultsData() const {
    return m_results_data;
}
void OAIGetExperimentResultsResponse::setResultsData(const QList &results_data) {
    m_results_data = results_data;
    m_results_data_isSet = true;
}

bool OAIGetExperimentResultsResponse::is_results_data_Set() const{
    return m_results_data_isSet;
}

bool OAIGetExperimentResultsResponse::is_results_data_Valid() const{
    return m_results_data_isValid;
}

QList OAIGetExperimentResultsResponse::getTimestamps() const {
    return m_timestamps;
}
void OAIGetExperimentResultsResponse::setTimestamps(const QList &timestamps) {
    m_timestamps = timestamps;
    m_timestamps_isSet = true;
}

bool OAIGetExperimentResultsResponse::is_timestamps_Set() const{
    return m_timestamps_isSet;
}

bool OAIGetExperimentResultsResponse::is_timestamps_Valid() const{
    return m_timestamps_isValid;
}

bool OAIGetExperimentResultsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reports.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExperimentResultsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
