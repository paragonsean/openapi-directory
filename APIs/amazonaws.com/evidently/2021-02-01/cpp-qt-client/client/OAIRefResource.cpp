/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefResource::OAIRefResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefResource::OAIRefResource() {
    this->initializeModel();
}

OAIRefResource::~OAIRefResource() {}

void OAIRefResource::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_last_updated_on_isSet = false;
    m_last_updated_on_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRefResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefResource::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_last_updated_on_isValid = ::OpenAPI::fromJsonValue(m_last_updated_on, json[QString("lastUpdatedOn")]);
    m_last_updated_on_isSet = !json[QString("lastUpdatedOn")].isNull() && m_last_updated_on_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRefResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefResource::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_last_updated_on_isSet) {
        obj.insert(QString("lastUpdatedOn"), ::OpenAPI::toJsonValue(m_last_updated_on));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRefResource::getArn() const {
    return m_arn;
}
void OAIRefResource::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIRefResource::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIRefResource::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIRefResource::getEndTime() const {
    return m_end_time;
}
void OAIRefResource::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRefResource::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRefResource::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIRefResource::getLastUpdatedOn() const {
    return m_last_updated_on;
}
void OAIRefResource::setLastUpdatedOn(const QString &last_updated_on) {
    m_last_updated_on = last_updated_on;
    m_last_updated_on_isSet = true;
}

bool OAIRefResource::is_last_updated_on_Set() const{
    return m_last_updated_on_isSet;
}

bool OAIRefResource::is_last_updated_on_Valid() const{
    return m_last_updated_on_isValid;
}

QString OAIRefResource::getName() const {
    return m_name;
}
void OAIRefResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRefResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRefResource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRefResource::getStartTime() const {
    return m_start_time;
}
void OAIRefResource::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRefResource::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRefResource::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIRefResource::getStatus() const {
    return m_status;
}
void OAIRefResource::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRefResource::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRefResource::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRefResource::getType() const {
    return m_type;
}
void OAIRefResource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRefResource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRefResource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRefResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
