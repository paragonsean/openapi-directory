/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricGoalConfig.h
 *
 * Use this structure to tell Evidently whether higher or lower values are desired for a metric that is used in an experiment.
 */

#ifndef OAIMetricGoalConfig_H
#define OAIMetricGoalConfig_H

#include <QJsonObject>

#include "OAIChangeDirectionEnum.h"
#include "OAIMetricGoalConfig_metricDefinition.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricGoalConfig_metricDefinition;

class OAIMetricGoalConfig : public OAIObject {
public:
    OAIMetricGoalConfig();
    OAIMetricGoalConfig(QString json);
    ~OAIMetricGoalConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIChangeDirectionEnum getDesiredChange() const;
    void setDesiredChange(const OAIChangeDirectionEnum &desired_change);
    bool is_desired_change_Set() const;
    bool is_desired_change_Valid() const;

    OAIMetricGoalConfig_metricDefinition getMetricDefinition() const;
    void setMetricDefinition(const OAIMetricGoalConfig_metricDefinition &metric_definition);
    bool is_metric_definition_Set() const;
    bool is_metric_definition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIChangeDirectionEnum m_desired_change;
    bool m_desired_change_isSet;
    bool m_desired_change_isValid;

    OAIMetricGoalConfig_metricDefinition m_metric_definition;
    bool m_metric_definition_isSet;
    bool m_metric_definition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricGoalConfig)

#endif // OAIMetricGoalConfig_H
