/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentReport::OAIExperimentReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentReport::OAIExperimentReport() {
    this->initializeModel();
}

OAIExperimentReport::~OAIExperimentReport() {}

void OAIExperimentReport::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_report_name_isSet = false;
    m_report_name_isValid = false;

    m_treatment_name_isSet = false;
    m_treatment_name_isValid = false;
}

void OAIExperimentReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentReport::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_report_name_isValid = ::OpenAPI::fromJsonValue(m_report_name, json[QString("reportName")]);
    m_report_name_isSet = !json[QString("reportName")].isNull() && m_report_name_isValid;

    m_treatment_name_isValid = ::OpenAPI::fromJsonValue(m_treatment_name, json[QString("treatmentName")]);
    m_treatment_name_isSet = !json[QString("treatmentName")].isNull() && m_treatment_name_isValid;
}

QString OAIExperimentReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentReport::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_report_name.isSet()) {
        obj.insert(QString("reportName"), ::OpenAPI::toJsonValue(m_report_name));
    }
    if (m_treatment_name_isSet) {
        obj.insert(QString("treatmentName"), ::OpenAPI::toJsonValue(m_treatment_name));
    }
    return obj;
}

QString OAIExperimentReport::getContent() const {
    return m_content;
}
void OAIExperimentReport::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIExperimentReport::is_content_Set() const{
    return m_content_isSet;
}

bool OAIExperimentReport::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIExperimentReport::getMetricName() const {
    return m_metric_name;
}
void OAIExperimentReport::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIExperimentReport::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIExperimentReport::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

OAIExperimentReportName OAIExperimentReport::getReportName() const {
    return m_report_name;
}
void OAIExperimentReport::setReportName(const OAIExperimentReportName &report_name) {
    m_report_name = report_name;
    m_report_name_isSet = true;
}

bool OAIExperimentReport::is_report_name_Set() const{
    return m_report_name_isSet;
}

bool OAIExperimentReport::is_report_name_Valid() const{
    return m_report_name_isValid;
}

QString OAIExperimentReport::getTreatmentName() const {
    return m_treatment_name;
}
void OAIExperimentReport::setTreatmentName(const QString &treatment_name) {
    m_treatment_name = treatment_name;
    m_treatment_name_isSet = true;
}

bool OAIExperimentReport::is_treatment_name_Set() const{
    return m_treatment_name_isSet;
}

bool OAIExperimentReport::is_treatment_name_Valid() const{
    return m_treatment_name_isValid;
}

bool OAIExperimentReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
