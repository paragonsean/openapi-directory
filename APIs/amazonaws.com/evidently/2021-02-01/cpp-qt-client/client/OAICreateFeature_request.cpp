/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFeature_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFeature_request::OAICreateFeature_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFeature_request::OAICreateFeature_request() {
    this->initializeModel();
}

OAICreateFeature_request::~OAICreateFeature_request() {}

void OAICreateFeature_request::initializeModel() {

    m_default_variation_isSet = false;
    m_default_variation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_overrides_isSet = false;
    m_entity_overrides_isValid = false;

    m_evaluation_strategy_isSet = false;
    m_evaluation_strategy_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;
}

void OAICreateFeature_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFeature_request::fromJsonObject(QJsonObject json) {

    m_default_variation_isValid = ::OpenAPI::fromJsonValue(m_default_variation, json[QString("defaultVariation")]);
    m_default_variation_isSet = !json[QString("defaultVariation")].isNull() && m_default_variation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_overrides_isValid = ::OpenAPI::fromJsonValue(m_entity_overrides, json[QString("entityOverrides")]);
    m_entity_overrides_isSet = !json[QString("entityOverrides")].isNull() && m_entity_overrides_isValid;

    m_evaluation_strategy_isValid = ::OpenAPI::fromJsonValue(m_evaluation_strategy, json[QString("evaluationStrategy")]);
    m_evaluation_strategy_isSet = !json[QString("evaluationStrategy")].isNull() && m_evaluation_strategy_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;
}

QString OAICreateFeature_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFeature_request::asJsonObject() const {
    QJsonObject obj;
    if (m_default_variation_isSet) {
        obj.insert(QString("defaultVariation"), ::OpenAPI::toJsonValue(m_default_variation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_overrides.size() > 0) {
        obj.insert(QString("entityOverrides"), ::OpenAPI::toJsonValue(m_entity_overrides));
    }
    if (m_evaluation_strategy_isSet) {
        obj.insert(QString("evaluationStrategy"), ::OpenAPI::toJsonValue(m_evaluation_strategy));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_variations.size() > 0) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    return obj;
}

QString OAICreateFeature_request::getDefaultVariation() const {
    return m_default_variation;
}
void OAICreateFeature_request::setDefaultVariation(const QString &default_variation) {
    m_default_variation = default_variation;
    m_default_variation_isSet = true;
}

bool OAICreateFeature_request::is_default_variation_Set() const{
    return m_default_variation_isSet;
}

bool OAICreateFeature_request::is_default_variation_Valid() const{
    return m_default_variation_isValid;
}

QString OAICreateFeature_request::getDescription() const {
    return m_description;
}
void OAICreateFeature_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFeature_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFeature_request::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAICreateFeature_request::getEntityOverrides() const {
    return m_entity_overrides;
}
void OAICreateFeature_request::setEntityOverrides(const QMap<QString, QString> &entity_overrides) {
    m_entity_overrides = entity_overrides;
    m_entity_overrides_isSet = true;
}

bool OAICreateFeature_request::is_entity_overrides_Set() const{
    return m_entity_overrides_isSet;
}

bool OAICreateFeature_request::is_entity_overrides_Valid() const{
    return m_entity_overrides_isValid;
}

QString OAICreateFeature_request::getEvaluationStrategy() const {
    return m_evaluation_strategy;
}
void OAICreateFeature_request::setEvaluationStrategy(const QString &evaluation_strategy) {
    m_evaluation_strategy = evaluation_strategy;
    m_evaluation_strategy_isSet = true;
}

bool OAICreateFeature_request::is_evaluation_strategy_Set() const{
    return m_evaluation_strategy_isSet;
}

bool OAICreateFeature_request::is_evaluation_strategy_Valid() const{
    return m_evaluation_strategy_isValid;
}

QString OAICreateFeature_request::getName() const {
    return m_name;
}
void OAICreateFeature_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFeature_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFeature_request::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICreateFeature_request::getTags() const {
    return m_tags;
}
void OAICreateFeature_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFeature_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFeature_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAIVariationConfig> OAICreateFeature_request::getVariations() const {
    return m_variations;
}
void OAICreateFeature_request::setVariations(const QList<OAIVariationConfig> &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAICreateFeature_request::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAICreateFeature_request::is_variations_Valid() const{
    return m_variations_isValid;
}

bool OAICreateFeature_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_variation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFeature_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_variations_isValid && true;
}

} // namespace OpenAPI
