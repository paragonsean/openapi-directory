/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProjectRequest_dataDelivery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProjectRequest_dataDelivery::OAICreateProjectRequest_dataDelivery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProjectRequest_dataDelivery::OAICreateProjectRequest_dataDelivery() {
    this->initializeModel();
}

OAICreateProjectRequest_dataDelivery::~OAICreateProjectRequest_dataDelivery() {}

void OAICreateProjectRequest_dataDelivery::initializeModel() {

    m_cloud_watch_logs_isSet = false;
    m_cloud_watch_logs_isValid = false;

    m_s3_destination_isSet = false;
    m_s3_destination_isValid = false;
}

void OAICreateProjectRequest_dataDelivery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProjectRequest_dataDelivery::fromJsonObject(QJsonObject json) {

    m_cloud_watch_logs_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs, json[QString("cloudWatchLogs")]);
    m_cloud_watch_logs_isSet = !json[QString("cloudWatchLogs")].isNull() && m_cloud_watch_logs_isValid;

    m_s3_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_destination, json[QString("s3Destination")]);
    m_s3_destination_isSet = !json[QString("s3Destination")].isNull() && m_s3_destination_isValid;
}

QString OAICreateProjectRequest_dataDelivery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProjectRequest_dataDelivery::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_logs.isSet()) {
        obj.insert(QString("cloudWatchLogs"), ::OpenAPI::toJsonValue(m_cloud_watch_logs));
    }
    if (m_s3_destination.isSet()) {
        obj.insert(QString("s3Destination"), ::OpenAPI::toJsonValue(m_s3_destination));
    }
    return obj;
}

OAICreateProject_request_dataDelivery_cloudWatchLogs OAICreateProjectRequest_dataDelivery::getCloudWatchLogs() const {
    return m_cloud_watch_logs;
}
void OAICreateProjectRequest_dataDelivery::setCloudWatchLogs(const OAICreateProject_request_dataDelivery_cloudWatchLogs &cloud_watch_logs) {
    m_cloud_watch_logs = cloud_watch_logs;
    m_cloud_watch_logs_isSet = true;
}

bool OAICreateProjectRequest_dataDelivery::is_cloud_watch_logs_Set() const{
    return m_cloud_watch_logs_isSet;
}

bool OAICreateProjectRequest_dataDelivery::is_cloud_watch_logs_Valid() const{
    return m_cloud_watch_logs_isValid;
}

OAICreateProject_request_dataDelivery_s3Destination OAICreateProjectRequest_dataDelivery::getS3Destination() const {
    return m_s3_destination;
}
void OAICreateProjectRequest_dataDelivery::setS3Destination(const OAICreateProject_request_dataDelivery_s3Destination &s3_destination) {
    m_s3_destination = s3_destination;
    m_s3_destination_isSet = true;
}

bool OAICreateProjectRequest_dataDelivery::is_s3_destination_Set() const{
    return m_s3_destination_isSet;
}

bool OAICreateProjectRequest_dataDelivery::is_s3_destination_Valid() const{
    return m_s3_destination_isValid;
}

bool OAICreateProjectRequest_dataDelivery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProjectRequest_dataDelivery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
