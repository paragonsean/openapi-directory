/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariableValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariableValue::OAIVariableValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariableValue::OAIVariableValue() {
    this->initializeModel();
}

OAIVariableValue::~OAIVariableValue() {}

void OAIVariableValue::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_long_value_isSet = false;
    m_long_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIVariableValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariableValue::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_long_value_isValid = ::OpenAPI::fromJsonValue(m_long_value, json[QString("longValue")]);
    m_long_value_isSet = !json[QString("longValue")].isNull() && m_long_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIVariableValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariableValue::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_long_value_isSet) {
        obj.insert(QString("longValue"), ::OpenAPI::toJsonValue(m_long_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

bool OAIVariableValue::getBoolValue() const {
    return m_bool_value;
}
void OAIVariableValue::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIVariableValue::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIVariableValue::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

double OAIVariableValue::getDoubleValue() const {
    return m_double_value;
}
void OAIVariableValue::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIVariableValue::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIVariableValue::is_double_value_Valid() const{
    return m_double_value_isValid;
}

qint32 OAIVariableValue::getLongValue() const {
    return m_long_value;
}
void OAIVariableValue::setLongValue(const qint32 &long_value) {
    m_long_value = long_value;
    m_long_value_isSet = true;
}

bool OAIVariableValue::is_long_value_Set() const{
    return m_long_value_isSet;
}

bool OAIVariableValue::is_long_value_Valid() const{
    return m_long_value_isValid;
}

QString OAIVariableValue::getStringValue() const {
    return m_string_value;
}
void OAIVariableValue::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIVariableValue::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIVariableValue::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIVariableValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariableValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
