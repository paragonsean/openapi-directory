/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExperimentReport.h
 *
 * A structure that contains results of an experiment.
 */

#ifndef OAIExperimentReport_H
#define OAIExperimentReport_H

#include <QJsonObject>

#include "OAIExperimentReportName.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExperimentReport : public OAIObject {
public:
    OAIExperimentReport();
    OAIExperimentReport(QString json);
    ~OAIExperimentReport() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getMetricName() const;
    void setMetricName(const QString &metric_name);
    bool is_metric_name_Set() const;
    bool is_metric_name_Valid() const;

    OAIExperimentReportName getReportName() const;
    void setReportName(const OAIExperimentReportName &report_name);
    bool is_report_name_Set() const;
    bool is_report_name_Valid() const;

    QString getTreatmentName() const;
    void setTreatmentName(const QString &treatment_name);
    bool is_treatment_name_Set() const;
    bool is_treatment_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_metric_name;
    bool m_metric_name_isSet;
    bool m_metric_name_isValid;

    OAIExperimentReportName m_report_name;
    bool m_report_name_isSet;
    bool m_report_name_isValid;

    QString m_treatment_name;
    bool m_treatment_name_isSet;
    bool m_treatment_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExperimentReport)

#endif // OAIExperimentReport_H
