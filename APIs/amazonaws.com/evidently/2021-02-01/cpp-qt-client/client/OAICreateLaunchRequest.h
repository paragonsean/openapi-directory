/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateLaunchRequest.h
 *
 * 
 */

#ifndef OAICreateLaunchRequest_H
#define OAICreateLaunchRequest_H

#include <QJsonObject>

#include "OAICreateLaunchRequest_scheduledSplitsConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLaunchRequest_scheduledSplitsConfig;

class OAICreateLaunchRequest : public OAIObject {
public:
    OAICreateLaunchRequest();
    OAICreateLaunchRequest(QString json);
    ~OAICreateLaunchRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList getGroups() const;
    void setGroups(const QList &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    QList getMetricMonitors() const;
    void setMetricMonitors(const QList &metric_monitors);
    bool is_metric_monitors_Set() const;
    bool is_metric_monitors_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRandomizationSalt() const;
    void setRandomizationSalt(const QString &randomization_salt);
    bool is_randomization_salt_Set() const;
    bool is_randomization_salt_Valid() const;

    OAICreateLaunchRequest_scheduledSplitsConfig getScheduledSplitsConfig() const;
    void setScheduledSplitsConfig(const OAICreateLaunchRequest_scheduledSplitsConfig &scheduled_splits_config);
    bool is_scheduled_splits_config_Set() const;
    bool is_scheduled_splits_config_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    QList m_metric_monitors;
    bool m_metric_monitors_isSet;
    bool m_metric_monitors_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_randomization_salt;
    bool m_randomization_salt_isSet;
    bool m_randomization_salt_isValid;

    OAICreateLaunchRequest_scheduledSplitsConfig m_scheduled_splits_config;
    bool m_scheduled_splits_config_isSet;
    bool m_scheduled_splits_config_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateLaunchRequest)

#endif // OAICreateLaunchRequest_H
