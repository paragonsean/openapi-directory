/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProject_request::OAIUpdateProject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProject_request::OAIUpdateProject_request() {
    this->initializeModel();
}

OAIUpdateProject_request::~OAIUpdateProject_request() {}

void OAIUpdateProject_request::initializeModel() {

    m_app_config_resource_isSet = false;
    m_app_config_resource_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIUpdateProject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProject_request::fromJsonObject(QJsonObject json) {

    m_app_config_resource_isValid = ::OpenAPI::fromJsonValue(m_app_config_resource, json[QString("appConfigResource")]);
    m_app_config_resource_isSet = !json[QString("appConfigResource")].isNull() && m_app_config_resource_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;
}

QString OAIUpdateProject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_config_resource.isSet()) {
        obj.insert(QString("appConfigResource"), ::OpenAPI::toJsonValue(m_app_config_resource));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

OAICreateProject_request_appConfigResource OAIUpdateProject_request::getAppConfigResource() const {
    return m_app_config_resource;
}
void OAIUpdateProject_request::setAppConfigResource(const OAICreateProject_request_appConfigResource &app_config_resource) {
    m_app_config_resource = app_config_resource;
    m_app_config_resource_isSet = true;
}

bool OAIUpdateProject_request::is_app_config_resource_Set() const{
    return m_app_config_resource_isSet;
}

bool OAIUpdateProject_request::is_app_config_resource_Valid() const{
    return m_app_config_resource_isValid;
}

QString OAIUpdateProject_request::getDescription() const {
    return m_description;
}
void OAIUpdateProject_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateProject_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateProject_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateProject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_config_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
