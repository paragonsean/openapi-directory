/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProjectEventsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProjectEventsResponse::OAIPutProjectEventsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProjectEventsResponse::OAIPutProjectEventsResponse() {
    this->initializeModel();
}

OAIPutProjectEventsResponse::~OAIPutProjectEventsResponse() {}

void OAIPutProjectEventsResponse::initializeModel() {

    m_event_results_isSet = false;
    m_event_results_isValid = false;

    m_failed_event_count_isSet = false;
    m_failed_event_count_isValid = false;
}

void OAIPutProjectEventsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProjectEventsResponse::fromJsonObject(QJsonObject json) {

    m_event_results_isValid = ::OpenAPI::fromJsonValue(m_event_results, json[QString("eventResults")]);
    m_event_results_isSet = !json[QString("eventResults")].isNull() && m_event_results_isValid;

    m_failed_event_count_isValid = ::OpenAPI::fromJsonValue(m_failed_event_count, json[QString("failedEventCount")]);
    m_failed_event_count_isSet = !json[QString("failedEventCount")].isNull() && m_failed_event_count_isValid;
}

QString OAIPutProjectEventsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProjectEventsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_event_results.isSet()) {
        obj.insert(QString("eventResults"), ::OpenAPI::toJsonValue(m_event_results));
    }
    if (m_failed_event_count_isSet) {
        obj.insert(QString("failedEventCount"), ::OpenAPI::toJsonValue(m_failed_event_count));
    }
    return obj;
}

QList OAIPutProjectEventsResponse::getEventResults() const {
    return m_event_results;
}
void OAIPutProjectEventsResponse::setEventResults(const QList &event_results) {
    m_event_results = event_results;
    m_event_results_isSet = true;
}

bool OAIPutProjectEventsResponse::is_event_results_Set() const{
    return m_event_results_isSet;
}

bool OAIPutProjectEventsResponse::is_event_results_Valid() const{
    return m_event_results_isValid;
}

qint32 OAIPutProjectEventsResponse::getFailedEventCount() const {
    return m_failed_event_count;
}
void OAIPutProjectEventsResponse::setFailedEventCount(const qint32 &failed_event_count) {
    m_failed_event_count = failed_event_count;
    m_failed_event_count_isSet = true;
}

bool OAIPutProjectEventsResponse::is_failed_event_count_Set() const{
    return m_failed_event_count_isSet;
}

bool OAIPutProjectEventsResponse::is_failed_event_count_Valid() const{
    return m_failed_event_count_isValid;
}

bool OAIPutProjectEventsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_event_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProjectEventsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
