/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeatureSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeatureSummary::OAIFeatureSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeatureSummary::OAIFeatureSummary() {
    this->initializeModel();
}

OAIFeatureSummary::~OAIFeatureSummary() {}

void OAIFeatureSummary::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_default_variation_isSet = false;
    m_default_variation_isValid = false;

    m_evaluation_rules_isSet = false;
    m_evaluation_rules_isValid = false;

    m_evaluation_strategy_isSet = false;
    m_evaluation_strategy_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIFeatureSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeatureSummary::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_default_variation_isValid = ::OpenAPI::fromJsonValue(m_default_variation, json[QString("defaultVariation")]);
    m_default_variation_isSet = !json[QString("defaultVariation")].isNull() && m_default_variation_isValid;

    m_evaluation_rules_isValid = ::OpenAPI::fromJsonValue(m_evaluation_rules, json[QString("evaluationRules")]);
    m_evaluation_rules_isSet = !json[QString("evaluationRules")].isNull() && m_evaluation_rules_isValid;

    m_evaluation_strategy_isValid = ::OpenAPI::fromJsonValue(m_evaluation_strategy, json[QString("evaluationStrategy")]);
    m_evaluation_strategy_isSet = !json[QString("evaluationStrategy")].isNull() && m_evaluation_strategy_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIFeatureSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeatureSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_default_variation_isSet) {
        obj.insert(QString("defaultVariation"), ::OpenAPI::toJsonValue(m_default_variation));
    }
    if (m_evaluation_rules.isSet()) {
        obj.insert(QString("evaluationRules"), ::OpenAPI::toJsonValue(m_evaluation_rules));
    }
    if (m_evaluation_strategy.isSet()) {
        obj.insert(QString("evaluationStrategy"), ::OpenAPI::toJsonValue(m_evaluation_strategy));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIFeatureSummary::getArn() const {
    return m_arn;
}
void OAIFeatureSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIFeatureSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIFeatureSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIFeatureSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIFeatureSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIFeatureSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIFeatureSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIFeatureSummary::getDefaultVariation() const {
    return m_default_variation;
}
void OAIFeatureSummary::setDefaultVariation(const QString &default_variation) {
    m_default_variation = default_variation;
    m_default_variation_isSet = true;
}

bool OAIFeatureSummary::is_default_variation_Set() const{
    return m_default_variation_isSet;
}

bool OAIFeatureSummary::is_default_variation_Valid() const{
    return m_default_variation_isValid;
}

QList OAIFeatureSummary::getEvaluationRules() const {
    return m_evaluation_rules;
}
void OAIFeatureSummary::setEvaluationRules(const QList &evaluation_rules) {
    m_evaluation_rules = evaluation_rules;
    m_evaluation_rules_isSet = true;
}

bool OAIFeatureSummary::is_evaluation_rules_Set() const{
    return m_evaluation_rules_isSet;
}

bool OAIFeatureSummary::is_evaluation_rules_Valid() const{
    return m_evaluation_rules_isValid;
}

OAIFeatureEvaluationStrategy OAIFeatureSummary::getEvaluationStrategy() const {
    return m_evaluation_strategy;
}
void OAIFeatureSummary::setEvaluationStrategy(const OAIFeatureEvaluationStrategy &evaluation_strategy) {
    m_evaluation_strategy = evaluation_strategy;
    m_evaluation_strategy_isSet = true;
}

bool OAIFeatureSummary::is_evaluation_strategy_Set() const{
    return m_evaluation_strategy_isSet;
}

bool OAIFeatureSummary::is_evaluation_strategy_Valid() const{
    return m_evaluation_strategy_isValid;
}

QDateTime OAIFeatureSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIFeatureSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIFeatureSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIFeatureSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAIFeatureSummary::getName() const {
    return m_name;
}
void OAIFeatureSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeatureSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeatureSummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFeatureSummary::getProject() const {
    return m_project;
}
void OAIFeatureSummary::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIFeatureSummary::is_project_Set() const{
    return m_project_isSet;
}

bool OAIFeatureSummary::is_project_Valid() const{
    return m_project_isValid;
}

OAIFeatureStatus OAIFeatureSummary::getStatus() const {
    return m_status;
}
void OAIFeatureSummary::setStatus(const OAIFeatureStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeatureSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeatureSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIFeatureSummary::getTags() const {
    return m_tags;
}
void OAIFeatureSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIFeatureSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIFeatureSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIFeatureSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_variation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeatureSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_time_isValid && m_evaluation_strategy_isValid && m_last_updated_time_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
