/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchRequest::OAICreateLaunchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchRequest::OAICreateLaunchRequest() {
    this->initializeModel();
}

OAICreateLaunchRequest::~OAICreateLaunchRequest() {}

void OAICreateLaunchRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_metric_monitors_isSet = false;
    m_metric_monitors_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_randomization_salt_isSet = false;
    m_randomization_salt_isValid = false;

    m_scheduled_splits_config_isSet = false;
    m_scheduled_splits_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateLaunchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_metric_monitors_isValid = ::OpenAPI::fromJsonValue(m_metric_monitors, json[QString("metricMonitors")]);
    m_metric_monitors_isSet = !json[QString("metricMonitors")].isNull() && m_metric_monitors_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_randomization_salt_isValid = ::OpenAPI::fromJsonValue(m_randomization_salt, json[QString("randomizationSalt")]);
    m_randomization_salt_isSet = !json[QString("randomizationSalt")].isNull() && m_randomization_salt_isValid;

    m_scheduled_splits_config_isValid = ::OpenAPI::fromJsonValue(m_scheduled_splits_config, json[QString("scheduledSplitsConfig")]);
    m_scheduled_splits_config_isSet = !json[QString("scheduledSplitsConfig")].isNull() && m_scheduled_splits_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateLaunchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_metric_monitors.isSet()) {
        obj.insert(QString("metricMonitors"), ::OpenAPI::toJsonValue(m_metric_monitors));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_randomization_salt_isSet) {
        obj.insert(QString("randomizationSalt"), ::OpenAPI::toJsonValue(m_randomization_salt));
    }
    if (m_scheduled_splits_config.isSet()) {
        obj.insert(QString("scheduledSplitsConfig"), ::OpenAPI::toJsonValue(m_scheduled_splits_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateLaunchRequest::getDescription() const {
    return m_description;
}
void OAICreateLaunchRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateLaunchRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateLaunchRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateLaunchRequest::getGroups() const {
    return m_groups;
}
void OAICreateLaunchRequest::setGroups(const QList &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAICreateLaunchRequest::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAICreateLaunchRequest::is_groups_Valid() const{
    return m_groups_isValid;
}

QList OAICreateLaunchRequest::getMetricMonitors() const {
    return m_metric_monitors;
}
void OAICreateLaunchRequest::setMetricMonitors(const QList &metric_monitors) {
    m_metric_monitors = metric_monitors;
    m_metric_monitors_isSet = true;
}

bool OAICreateLaunchRequest::is_metric_monitors_Set() const{
    return m_metric_monitors_isSet;
}

bool OAICreateLaunchRequest::is_metric_monitors_Valid() const{
    return m_metric_monitors_isValid;
}

QString OAICreateLaunchRequest::getName() const {
    return m_name;
}
void OAICreateLaunchRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateLaunchRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateLaunchRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateLaunchRequest::getRandomizationSalt() const {
    return m_randomization_salt;
}
void OAICreateLaunchRequest::setRandomizationSalt(const QString &randomization_salt) {
    m_randomization_salt = randomization_salt;
    m_randomization_salt_isSet = true;
}

bool OAICreateLaunchRequest::is_randomization_salt_Set() const{
    return m_randomization_salt_isSet;
}

bool OAICreateLaunchRequest::is_randomization_salt_Valid() const{
    return m_randomization_salt_isValid;
}

OAICreateLaunchRequest_scheduledSplitsConfig OAICreateLaunchRequest::getScheduledSplitsConfig() const {
    return m_scheduled_splits_config;
}
void OAICreateLaunchRequest::setScheduledSplitsConfig(const OAICreateLaunchRequest_scheduledSplitsConfig &scheduled_splits_config) {
    m_scheduled_splits_config = scheduled_splits_config;
    m_scheduled_splits_config_isSet = true;
}

bool OAICreateLaunchRequest::is_scheduled_splits_config_Set() const{
    return m_scheduled_splits_config_isSet;
}

bool OAICreateLaunchRequest::is_scheduled_splits_config_Valid() const{
    return m_scheduled_splits_config_isValid;
}

QMap OAICreateLaunchRequest::getTags() const {
    return m_tags;
}
void OAICreateLaunchRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLaunchRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLaunchRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateLaunchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_monitors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomization_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_splits_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_groups_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
