/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationResult::OAIEvaluationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationResult::OAIEvaluationResult() {
    this->initializeModel();
}

OAIEvaluationResult::~OAIEvaluationResult() {}

void OAIEvaluationResult::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_feature_isSet = false;
    m_feature_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_variation_isSet = false;
    m_variation_isValid = false;
}

void OAIEvaluationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationResult::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_variation_isValid = ::OpenAPI::fromJsonValue(m_variation, json[QString("variation")]);
    m_variation_isSet = !json[QString("variation")].isNull() && m_variation_isValid;
}

QString OAIEvaluationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_feature_isSet) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_value.isSet()) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_variation_isSet) {
        obj.insert(QString("variation"), ::OpenAPI::toJsonValue(m_variation));
    }
    return obj;
}

QString OAIEvaluationResult::getDetails() const {
    return m_details;
}
void OAIEvaluationResult::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIEvaluationResult::is_details_Set() const{
    return m_details_isSet;
}

bool OAIEvaluationResult::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIEvaluationResult::getEntityId() const {
    return m_entity_id;
}
void OAIEvaluationResult::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEvaluationResult::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEvaluationResult::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIEvaluationResult::getFeature() const {
    return m_feature;
}
void OAIEvaluationResult::setFeature(const QString &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIEvaluationResult::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIEvaluationResult::is_feature_Valid() const{
    return m_feature_isValid;
}

QString OAIEvaluationResult::getProject() const {
    return m_project;
}
void OAIEvaluationResult::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIEvaluationResult::is_project_Set() const{
    return m_project_isSet;
}

bool OAIEvaluationResult::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIEvaluationResult::getReason() const {
    return m_reason;
}
void OAIEvaluationResult::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIEvaluationResult::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIEvaluationResult::is_reason_Valid() const{
    return m_reason_isValid;
}

OAIEvaluateFeatureResponse_value OAIEvaluationResult::getValue() const {
    return m_value;
}
void OAIEvaluationResult::setValue(const OAIEvaluateFeatureResponse_value &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEvaluationResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEvaluationResult::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIEvaluationResult::getVariation() const {
    return m_variation;
}
void OAIEvaluationResult::setVariation(const QString &variation) {
    m_variation = variation;
    m_variation_isSet = true;
}

bool OAIEvaluationResult::is_variation_Set() const{
    return m_variation_isSet;
}

bool OAIEvaluationResult::is_variation_Valid() const{
    return m_variation_isValid;
}

bool OAIEvaluationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_id_isValid && m_feature_isValid && true;
}

} // namespace OpenAPI
