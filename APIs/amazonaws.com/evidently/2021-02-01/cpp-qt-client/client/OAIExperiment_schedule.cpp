/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperiment_schedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperiment_schedule::OAIExperiment_schedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperiment_schedule::OAIExperiment_schedule() {
    this->initializeModel();
}

OAIExperiment_schedule::~OAIExperiment_schedule() {}

void OAIExperiment_schedule::initializeModel() {

    m_analysis_complete_time_isSet = false;
    m_analysis_complete_time_isValid = false;
}

void OAIExperiment_schedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperiment_schedule::fromJsonObject(QJsonObject json) {

    m_analysis_complete_time_isValid = ::OpenAPI::fromJsonValue(m_analysis_complete_time, json[QString("analysisCompleteTime")]);
    m_analysis_complete_time_isSet = !json[QString("analysisCompleteTime")].isNull() && m_analysis_complete_time_isValid;
}

QString OAIExperiment_schedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperiment_schedule::asJsonObject() const {
    QJsonObject obj;
    if (m_analysis_complete_time_isSet) {
        obj.insert(QString("analysisCompleteTime"), ::OpenAPI::toJsonValue(m_analysis_complete_time));
    }
    return obj;
}

QDateTime OAIExperiment_schedule::getAnalysisCompleteTime() const {
    return m_analysis_complete_time;
}
void OAIExperiment_schedule::setAnalysisCompleteTime(const QDateTime &analysis_complete_time) {
    m_analysis_complete_time = analysis_complete_time;
    m_analysis_complete_time_isSet = true;
}

bool OAIExperiment_schedule::is_analysis_complete_time_Set() const{
    return m_analysis_complete_time_isSet;
}

bool OAIExperiment_schedule::is_analysis_complete_time_Valid() const{
    return m_analysis_complete_time_isValid;
}

bool OAIExperiment_schedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_analysis_complete_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperiment_schedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
