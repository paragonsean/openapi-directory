/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutProjectEventsResultEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutProjectEventsResultEntry::OAIPutProjectEventsResultEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutProjectEventsResultEntry::OAIPutProjectEventsResultEntry() {
    this->initializeModel();
}

OAIPutProjectEventsResultEntry::~OAIPutProjectEventsResultEntry() {}

void OAIPutProjectEventsResultEntry::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;
}

void OAIPutProjectEventsResultEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutProjectEventsResultEntry::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;
}

QString OAIPutProjectEventsResultEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutProjectEventsResultEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    return obj;
}

QString OAIPutProjectEventsResultEntry::getErrorCode() const {
    return m_error_code;
}
void OAIPutProjectEventsResultEntry::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIPutProjectEventsResultEntry::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIPutProjectEventsResultEntry::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIPutProjectEventsResultEntry::getErrorMessage() const {
    return m_error_message;
}
void OAIPutProjectEventsResultEntry::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIPutProjectEventsResultEntry::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIPutProjectEventsResultEntry::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIPutProjectEventsResultEntry::getEventId() const {
    return m_event_id;
}
void OAIPutProjectEventsResultEntry::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIPutProjectEventsResultEntry::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIPutProjectEventsResultEntry::is_event_id_Valid() const{
    return m_event_id_isValid;
}

bool OAIPutProjectEventsResultEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutProjectEventsResultEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
