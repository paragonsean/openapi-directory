/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegmentOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegmentOverride::OAISegmentOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegmentOverride::OAISegmentOverride() {
    this->initializeModel();
}

OAISegmentOverride::~OAISegmentOverride() {}

void OAISegmentOverride::initializeModel() {

    m_evaluation_order_isSet = false;
    m_evaluation_order_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_weights_isSet = false;
    m_weights_isValid = false;
}

void OAISegmentOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegmentOverride::fromJsonObject(QJsonObject json) {

    m_evaluation_order_isValid = ::OpenAPI::fromJsonValue(m_evaluation_order, json[QString("evaluationOrder")]);
    m_evaluation_order_isSet = !json[QString("evaluationOrder")].isNull() && m_evaluation_order_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_weights_isValid = ::OpenAPI::fromJsonValue(m_weights, json[QString("weights")]);
    m_weights_isSet = !json[QString("weights")].isNull() && m_weights_isValid;
}

QString OAISegmentOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegmentOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_evaluation_order_isSet) {
        obj.insert(QString("evaluationOrder"), ::OpenAPI::toJsonValue(m_evaluation_order));
    }
    if (m_segment_isSet) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_weights.isSet()) {
        obj.insert(QString("weights"), ::OpenAPI::toJsonValue(m_weights));
    }
    return obj;
}

qint32 OAISegmentOverride::getEvaluationOrder() const {
    return m_evaluation_order;
}
void OAISegmentOverride::setEvaluationOrder(const qint32 &evaluation_order) {
    m_evaluation_order = evaluation_order;
    m_evaluation_order_isSet = true;
}

bool OAISegmentOverride::is_evaluation_order_Set() const{
    return m_evaluation_order_isSet;
}

bool OAISegmentOverride::is_evaluation_order_Valid() const{
    return m_evaluation_order_isValid;
}

QString OAISegmentOverride::getSegment() const {
    return m_segment;
}
void OAISegmentOverride::setSegment(const QString &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAISegmentOverride::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAISegmentOverride::is_segment_Valid() const{
    return m_segment_isValid;
}

QMap OAISegmentOverride::getWeights() const {
    return m_weights;
}
void OAISegmentOverride::setWeights(const QMap &weights) {
    m_weights = weights;
    m_weights_isSet = true;
}

bool OAISegmentOverride::is_weights_Set() const{
    return m_weights_isSet;
}

bool OAISegmentOverride::is_weights_Valid() const{
    return m_weights_isValid;
}

bool OAISegmentOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evaluation_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weights.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegmentOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_evaluation_order_isValid && m_segment_isValid && m_weights_isValid && true;
}

} // namespace OpenAPI
