/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetProjectResponse_project.h
 *
 * 
 */

#ifndef OAIGetProjectResponse_project_H
#define OAIGetProjectResponse_project_H

#include <QJsonObject>

#include "OAIProjectStatus.h"
#include "OAIProject_appConfigResource.h"
#include "OAIProject_dataDelivery.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIProject_appConfigResource;
class OAIProject_dataDelivery;

class OAIGetProjectResponse_project : public OAIObject {
public:
    OAIGetProjectResponse_project();
    OAIGetProjectResponse_project(QString json);
    ~OAIGetProjectResponse_project() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActiveExperimentCount() const;
    void setActiveExperimentCount(const qint32 &active_experiment_count);
    bool is_active_experiment_count_Set() const;
    bool is_active_experiment_count_Valid() const;

    qint32 getActiveLaunchCount() const;
    void setActiveLaunchCount(const qint32 &active_launch_count);
    bool is_active_launch_count_Set() const;
    bool is_active_launch_count_Valid() const;

    OAIProject_appConfigResource getAppConfigResource() const;
    void setAppConfigResource(const OAIProject_appConfigResource &app_config_resource);
    bool is_app_config_resource_Set() const;
    bool is_app_config_resource_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    OAIProject_dataDelivery getDataDelivery() const;
    void setDataDelivery(const OAIProject_dataDelivery &data_delivery);
    bool is_data_delivery_Set() const;
    bool is_data_delivery_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    qint32 getExperimentCount() const;
    void setExperimentCount(const qint32 &experiment_count);
    bool is_experiment_count_Set() const;
    bool is_experiment_count_Valid() const;

    qint32 getFeatureCount() const;
    void setFeatureCount(const qint32 &feature_count);
    bool is_feature_count_Set() const;
    bool is_feature_count_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    qint32 getLaunchCount() const;
    void setLaunchCount(const qint32 &launch_count);
    bool is_launch_count_Set() const;
    bool is_launch_count_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIProjectStatus getStatus() const;
    void setStatus(const OAIProjectStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active_experiment_count;
    bool m_active_experiment_count_isSet;
    bool m_active_experiment_count_isValid;

    qint32 m_active_launch_count;
    bool m_active_launch_count_isSet;
    bool m_active_launch_count_isValid;

    OAIProject_appConfigResource m_app_config_resource;
    bool m_app_config_resource_isSet;
    bool m_app_config_resource_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    OAIProject_dataDelivery m_data_delivery;
    bool m_data_delivery_isSet;
    bool m_data_delivery_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    qint32 m_experiment_count;
    bool m_experiment_count_isSet;
    bool m_experiment_count_isValid;

    qint32 m_feature_count;
    bool m_feature_count_isSet;
    bool m_feature_count_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    qint32 m_launch_count;
    bool m_launch_count_isSet;
    bool m_launch_count_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIProjectStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetProjectResponse_project)

#endif // OAIGetProjectResponse_project_H
