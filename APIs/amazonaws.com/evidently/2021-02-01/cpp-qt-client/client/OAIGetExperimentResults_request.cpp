/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetExperimentResults_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetExperimentResults_request::OAIGetExperimentResults_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetExperimentResults_request::OAIGetExperimentResults_request() {
    this->initializeModel();
}

OAIGetExperimentResults_request::~OAIGetExperimentResults_request() {}

void OAIGetExperimentResults_request::initializeModel() {

    m_base_stat_isSet = false;
    m_base_stat_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_metric_names_isSet = false;
    m_metric_names_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_report_names_isSet = false;
    m_report_names_isValid = false;

    m_result_stats_isSet = false;
    m_result_stats_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_treatment_names_isSet = false;
    m_treatment_names_isValid = false;
}

void OAIGetExperimentResults_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetExperimentResults_request::fromJsonObject(QJsonObject json) {

    m_base_stat_isValid = ::OpenAPI::fromJsonValue(m_base_stat, json[QString("baseStat")]);
    m_base_stat_isSet = !json[QString("baseStat")].isNull() && m_base_stat_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_metric_names_isValid = ::OpenAPI::fromJsonValue(m_metric_names, json[QString("metricNames")]);
    m_metric_names_isSet = !json[QString("metricNames")].isNull() && m_metric_names_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_report_names_isValid = ::OpenAPI::fromJsonValue(m_report_names, json[QString("reportNames")]);
    m_report_names_isSet = !json[QString("reportNames")].isNull() && m_report_names_isValid;

    m_result_stats_isValid = ::OpenAPI::fromJsonValue(m_result_stats, json[QString("resultStats")]);
    m_result_stats_isSet = !json[QString("resultStats")].isNull() && m_result_stats_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_treatment_names_isValid = ::OpenAPI::fromJsonValue(m_treatment_names, json[QString("treatmentNames")]);
    m_treatment_names_isSet = !json[QString("treatmentNames")].isNull() && m_treatment_names_isValid;
}

QString OAIGetExperimentResults_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetExperimentResults_request::asJsonObject() const {
    QJsonObject obj;
    if (m_base_stat_isSet) {
        obj.insert(QString("baseStat"), ::OpenAPI::toJsonValue(m_base_stat));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_metric_names.size() > 0) {
        obj.insert(QString("metricNames"), ::OpenAPI::toJsonValue(m_metric_names));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_report_names.size() > 0) {
        obj.insert(QString("reportNames"), ::OpenAPI::toJsonValue(m_report_names));
    }
    if (m_result_stats.size() > 0) {
        obj.insert(QString("resultStats"), ::OpenAPI::toJsonValue(m_result_stats));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_treatment_names.size() > 0) {
        obj.insert(QString("treatmentNames"), ::OpenAPI::toJsonValue(m_treatment_names));
    }
    return obj;
}

QString OAIGetExperimentResults_request::getBaseStat() const {
    return m_base_stat;
}
void OAIGetExperimentResults_request::setBaseStat(const QString &base_stat) {
    m_base_stat = base_stat;
    m_base_stat_isSet = true;
}

bool OAIGetExperimentResults_request::is_base_stat_Set() const{
    return m_base_stat_isSet;
}

bool OAIGetExperimentResults_request::is_base_stat_Valid() const{
    return m_base_stat_isValid;
}

QDateTime OAIGetExperimentResults_request::getEndTime() const {
    return m_end_time;
}
void OAIGetExperimentResults_request::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetExperimentResults_request::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetExperimentResults_request::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QList<QString> OAIGetExperimentResults_request::getMetricNames() const {
    return m_metric_names;
}
void OAIGetExperimentResults_request::setMetricNames(const QList<QString> &metric_names) {
    m_metric_names = metric_names;
    m_metric_names_isSet = true;
}

bool OAIGetExperimentResults_request::is_metric_names_Set() const{
    return m_metric_names_isSet;
}

bool OAIGetExperimentResults_request::is_metric_names_Valid() const{
    return m_metric_names_isValid;
}

qint32 OAIGetExperimentResults_request::getPeriod() const {
    return m_period;
}
void OAIGetExperimentResults_request::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIGetExperimentResults_request::is_period_Set() const{
    return m_period_isSet;
}

bool OAIGetExperimentResults_request::is_period_Valid() const{
    return m_period_isValid;
}

QList<OAIExperimentReportName> OAIGetExperimentResults_request::getReportNames() const {
    return m_report_names;
}
void OAIGetExperimentResults_request::setReportNames(const QList<OAIExperimentReportName> &report_names) {
    m_report_names = report_names;
    m_report_names_isSet = true;
}

bool OAIGetExperimentResults_request::is_report_names_Set() const{
    return m_report_names_isSet;
}

bool OAIGetExperimentResults_request::is_report_names_Valid() const{
    return m_report_names_isValid;
}

QList<OAIExperimentResultRequestType> OAIGetExperimentResults_request::getResultStats() const {
    return m_result_stats;
}
void OAIGetExperimentResults_request::setResultStats(const QList<OAIExperimentResultRequestType> &result_stats) {
    m_result_stats = result_stats;
    m_result_stats_isSet = true;
}

bool OAIGetExperimentResults_request::is_result_stats_Set() const{
    return m_result_stats_isSet;
}

bool OAIGetExperimentResults_request::is_result_stats_Valid() const{
    return m_result_stats_isValid;
}

QDateTime OAIGetExperimentResults_request::getStartTime() const {
    return m_start_time;
}
void OAIGetExperimentResults_request::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetExperimentResults_request::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetExperimentResults_request::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<QString> OAIGetExperimentResults_request::getTreatmentNames() const {
    return m_treatment_names;
}
void OAIGetExperimentResults_request::setTreatmentNames(const QList<QString> &treatment_names) {
    m_treatment_names = treatment_names;
    m_treatment_names_isSet = true;
}

bool OAIGetExperimentResults_request::is_treatment_names_Set() const{
    return m_treatment_names_isSet;
}

bool OAIGetExperimentResults_request::is_treatment_names_Valid() const{
    return m_treatment_names_isValid;
}

bool OAIGetExperimentResults_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_stat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetExperimentResults_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_names_isValid && m_treatment_names_isValid && true;
}

} // namespace OpenAPI
