/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvaluateFeatureResponse.h
 *
 * 
 */

#ifndef OAIEvaluateFeatureResponse_H
#define OAIEvaluateFeatureResponse_H

#include <QJsonObject>

#include "OAIEvaluateFeatureResponse_value.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEvaluateFeatureResponse_value;

class OAIEvaluateFeatureResponse : public OAIObject {
public:
    OAIEvaluateFeatureResponse();
    OAIEvaluateFeatureResponse(QString json);
    ~OAIEvaluateFeatureResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetails() const;
    void setDetails(const QString &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    OAIEvaluateFeatureResponse_value getValue() const;
    void setValue(const OAIEvaluateFeatureResponse_value &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    QString getVariation() const;
    void setVariation(const QString &variation);
    bool is_variation_Set() const;
    bool is_variation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    OAIEvaluateFeatureResponse_value m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    QString m_variation;
    bool m_variation_isSet;
    bool m_variation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvaluateFeatureResponse)

#endif // OAIEvaluateFeatureResponse_H
