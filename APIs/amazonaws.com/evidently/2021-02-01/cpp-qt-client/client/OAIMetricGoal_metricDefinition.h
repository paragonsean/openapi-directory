/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMetricGoal_metricDefinition.h
 *
 * 
 */

#ifndef OAIMetricGoal_metricDefinition_H
#define OAIMetricGoal_metricDefinition_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMetricGoal_metricDefinition : public OAIObject {
public:
    OAIMetricGoal_metricDefinition();
    OAIMetricGoal_metricDefinition(QString json);
    ~OAIMetricGoal_metricDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEntityIdKey() const;
    void setEntityIdKey(const QString &entity_id_key);
    bool is_entity_id_key_Set() const;
    bool is_entity_id_key_Valid() const;

    QString getEventPattern() const;
    void setEventPattern(const QString &event_pattern);
    bool is_event_pattern_Set() const;
    bool is_event_pattern_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUnitLabel() const;
    void setUnitLabel(const QString &unit_label);
    bool is_unit_label_Set() const;
    bool is_unit_label_Valid() const;

    QString getValueKey() const;
    void setValueKey(const QString &value_key);
    bool is_value_key_Set() const;
    bool is_value_key_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_entity_id_key;
    bool m_entity_id_key_isSet;
    bool m_entity_id_key_isValid;

    QString m_event_pattern;
    bool m_event_pattern_isSet;
    bool m_event_pattern_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_unit_label;
    bool m_unit_label_isSet;
    bool m_unit_label_isValid;

    QString m_value_key;
    bool m_value_key_isSet;
    bool m_value_key_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMetricGoal_metricDefinition)

#endif // OAIMetricGoal_metricDefinition_H
