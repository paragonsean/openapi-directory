/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateExperimentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateExperimentRequest::OAIUpdateExperimentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateExperimentRequest::OAIUpdateExperimentRequest() {
    this->initializeModel();
}

OAIUpdateExperimentRequest::~OAIUpdateExperimentRequest() {}

void OAIUpdateExperimentRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_metric_goals_isSet = false;
    m_metric_goals_isValid = false;

    m_online_ab_config_isSet = false;
    m_online_ab_config_isValid = false;

    m_randomization_salt_isSet = false;
    m_randomization_salt_isValid = false;

    m_remove_segment_isSet = false;
    m_remove_segment_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_treatments_isSet = false;
    m_treatments_isValid = false;
}

void OAIUpdateExperimentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateExperimentRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metric_goals_isValid = ::OpenAPI::fromJsonValue(m_metric_goals, json[QString("metricGoals")]);
    m_metric_goals_isSet = !json[QString("metricGoals")].isNull() && m_metric_goals_isValid;

    m_online_ab_config_isValid = ::OpenAPI::fromJsonValue(m_online_ab_config, json[QString("onlineAbConfig")]);
    m_online_ab_config_isSet = !json[QString("onlineAbConfig")].isNull() && m_online_ab_config_isValid;

    m_randomization_salt_isValid = ::OpenAPI::fromJsonValue(m_randomization_salt, json[QString("randomizationSalt")]);
    m_randomization_salt_isSet = !json[QString("randomizationSalt")].isNull() && m_randomization_salt_isValid;

    m_remove_segment_isValid = ::OpenAPI::fromJsonValue(m_remove_segment, json[QString("removeSegment")]);
    m_remove_segment_isSet = !json[QString("removeSegment")].isNull() && m_remove_segment_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("samplingRate")]);
    m_sampling_rate_isSet = !json[QString("samplingRate")].isNull() && m_sampling_rate_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_treatments_isValid = ::OpenAPI::fromJsonValue(m_treatments, json[QString("treatments")]);
    m_treatments_isSet = !json[QString("treatments")].isNull() && m_treatments_isValid;
}

QString OAIUpdateExperimentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateExperimentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metric_goals.isSet()) {
        obj.insert(QString("metricGoals"), ::OpenAPI::toJsonValue(m_metric_goals));
    }
    if (m_online_ab_config.isSet()) {
        obj.insert(QString("onlineAbConfig"), ::OpenAPI::toJsonValue(m_online_ab_config));
    }
    if (m_randomization_salt_isSet) {
        obj.insert(QString("randomizationSalt"), ::OpenAPI::toJsonValue(m_randomization_salt));
    }
    if (m_remove_segment_isSet) {
        obj.insert(QString("removeSegment"), ::OpenAPI::toJsonValue(m_remove_segment));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("samplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    if (m_segment_isSet) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_treatments.isSet()) {
        obj.insert(QString("treatments"), ::OpenAPI::toJsonValue(m_treatments));
    }
    return obj;
}

QString OAIUpdateExperimentRequest::getDescription() const {
    return m_description;
}
void OAIUpdateExperimentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateExperimentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateExperimentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAIUpdateExperimentRequest::getMetricGoals() const {
    return m_metric_goals;
}
void OAIUpdateExperimentRequest::setMetricGoals(const QList &metric_goals) {
    m_metric_goals = metric_goals;
    m_metric_goals_isSet = true;
}

bool OAIUpdateExperimentRequest::is_metric_goals_Set() const{
    return m_metric_goals_isSet;
}

bool OAIUpdateExperimentRequest::is_metric_goals_Valid() const{
    return m_metric_goals_isValid;
}

OAIUpdateExperimentRequest_onlineAbConfig OAIUpdateExperimentRequest::getOnlineAbConfig() const {
    return m_online_ab_config;
}
void OAIUpdateExperimentRequest::setOnlineAbConfig(const OAIUpdateExperimentRequest_onlineAbConfig &online_ab_config) {
    m_online_ab_config = online_ab_config;
    m_online_ab_config_isSet = true;
}

bool OAIUpdateExperimentRequest::is_online_ab_config_Set() const{
    return m_online_ab_config_isSet;
}

bool OAIUpdateExperimentRequest::is_online_ab_config_Valid() const{
    return m_online_ab_config_isValid;
}

QString OAIUpdateExperimentRequest::getRandomizationSalt() const {
    return m_randomization_salt;
}
void OAIUpdateExperimentRequest::setRandomizationSalt(const QString &randomization_salt) {
    m_randomization_salt = randomization_salt;
    m_randomization_salt_isSet = true;
}

bool OAIUpdateExperimentRequest::is_randomization_salt_Set() const{
    return m_randomization_salt_isSet;
}

bool OAIUpdateExperimentRequest::is_randomization_salt_Valid() const{
    return m_randomization_salt_isValid;
}

bool OAIUpdateExperimentRequest::getRemoveSegment() const {
    return m_remove_segment;
}
void OAIUpdateExperimentRequest::setRemoveSegment(const bool &remove_segment) {
    m_remove_segment = remove_segment;
    m_remove_segment_isSet = true;
}

bool OAIUpdateExperimentRequest::is_remove_segment_Set() const{
    return m_remove_segment_isSet;
}

bool OAIUpdateExperimentRequest::is_remove_segment_Valid() const{
    return m_remove_segment_isValid;
}

qint32 OAIUpdateExperimentRequest::getSamplingRate() const {
    return m_sampling_rate;
}
void OAIUpdateExperimentRequest::setSamplingRate(const qint32 &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAIUpdateExperimentRequest::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAIUpdateExperimentRequest::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

QString OAIUpdateExperimentRequest::getSegment() const {
    return m_segment;
}
void OAIUpdateExperimentRequest::setSegment(const QString &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIUpdateExperimentRequest::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIUpdateExperimentRequest::is_segment_Valid() const{
    return m_segment_isValid;
}

QList OAIUpdateExperimentRequest::getTreatments() const {
    return m_treatments;
}
void OAIUpdateExperimentRequest::setTreatments(const QList &treatments) {
    m_treatments = treatments;
    m_treatments_isSet = true;
}

bool OAIUpdateExperimentRequest::is_treatments_Set() const{
    return m_treatments_isSet;
}

bool OAIUpdateExperimentRequest::is_treatments_Valid() const{
    return m_treatments_isValid;
}

bool OAIUpdateExperimentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_ab_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomization_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateExperimentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
