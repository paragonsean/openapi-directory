/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateExperimentResponse_experiment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateExperimentResponse_experiment::OAIUpdateExperimentResponse_experiment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateExperimentResponse_experiment::OAIUpdateExperimentResponse_experiment() {
    this->initializeModel();
}

OAIUpdateExperimentResponse_experiment::~OAIUpdateExperimentResponse_experiment() {}

void OAIUpdateExperimentResponse_experiment::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_execution_isSet = false;
    m_execution_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_metric_goals_isSet = false;
    m_metric_goals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_online_ab_definition_isSet = false;
    m_online_ab_definition_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_randomization_salt_isSet = false;
    m_randomization_salt_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_treatments_isSet = false;
    m_treatments_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdateExperimentResponse_experiment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateExperimentResponse_experiment::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_execution_isValid = ::OpenAPI::fromJsonValue(m_execution, json[QString("execution")]);
    m_execution_isSet = !json[QString("execution")].isNull() && m_execution_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_metric_goals_isValid = ::OpenAPI::fromJsonValue(m_metric_goals, json[QString("metricGoals")]);
    m_metric_goals_isSet = !json[QString("metricGoals")].isNull() && m_metric_goals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_online_ab_definition_isValid = ::OpenAPI::fromJsonValue(m_online_ab_definition, json[QString("onlineAbDefinition")]);
    m_online_ab_definition_isSet = !json[QString("onlineAbDefinition")].isNull() && m_online_ab_definition_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_randomization_salt_isValid = ::OpenAPI::fromJsonValue(m_randomization_salt, json[QString("randomizationSalt")]);
    m_randomization_salt_isSet = !json[QString("randomizationSalt")].isNull() && m_randomization_salt_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("samplingRate")]);
    m_sampling_rate_isSet = !json[QString("samplingRate")].isNull() && m_sampling_rate_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_treatments_isValid = ::OpenAPI::fromJsonValue(m_treatments, json[QString("treatments")]);
    m_treatments_isSet = !json[QString("treatments")].isNull() && m_treatments_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUpdateExperimentResponse_experiment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateExperimentResponse_experiment::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_execution.isSet()) {
        obj.insert(QString("execution"), ::OpenAPI::toJsonValue(m_execution));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_metric_goals.isSet()) {
        obj.insert(QString("metricGoals"), ::OpenAPI::toJsonValue(m_metric_goals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_online_ab_definition.isSet()) {
        obj.insert(QString("onlineAbDefinition"), ::OpenAPI::toJsonValue(m_online_ab_definition));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_randomization_salt_isSet) {
        obj.insert(QString("randomizationSalt"), ::OpenAPI::toJsonValue(m_randomization_salt));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("samplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_segment_isSet) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_treatments.isSet()) {
        obj.insert(QString("treatments"), ::OpenAPI::toJsonValue(m_treatments));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUpdateExperimentResponse_experiment::getArn() const {
    return m_arn;
}
void OAIUpdateExperimentResponse_experiment::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIUpdateExperimentResponse_experiment::getCreatedTime() const {
    return m_created_time;
}
void OAIUpdateExperimentResponse_experiment::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIUpdateExperimentResponse_experiment::getDescription() const {
    return m_description;
}
void OAIUpdateExperimentResponse_experiment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_description_Valid() const{
    return m_description_isValid;
}

OAIExperiment_execution OAIUpdateExperimentResponse_experiment::getExecution() const {
    return m_execution;
}
void OAIUpdateExperimentResponse_experiment::setExecution(const OAIExperiment_execution &execution) {
    m_execution = execution;
    m_execution_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_execution_Set() const{
    return m_execution_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_execution_Valid() const{
    return m_execution_isValid;
}

QDateTime OAIUpdateExperimentResponse_experiment::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIUpdateExperimentResponse_experiment::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QList OAIUpdateExperimentResponse_experiment::getMetricGoals() const {
    return m_metric_goals;
}
void OAIUpdateExperimentResponse_experiment::setMetricGoals(const QList &metric_goals) {
    m_metric_goals = metric_goals;
    m_metric_goals_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_metric_goals_Set() const{
    return m_metric_goals_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_metric_goals_Valid() const{
    return m_metric_goals_isValid;
}

QString OAIUpdateExperimentResponse_experiment::getName() const {
    return m_name;
}
void OAIUpdateExperimentResponse_experiment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_name_Valid() const{
    return m_name_isValid;
}

OAIExperiment_onlineAbDefinition OAIUpdateExperimentResponse_experiment::getOnlineAbDefinition() const {
    return m_online_ab_definition;
}
void OAIUpdateExperimentResponse_experiment::setOnlineAbDefinition(const OAIExperiment_onlineAbDefinition &online_ab_definition) {
    m_online_ab_definition = online_ab_definition;
    m_online_ab_definition_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_online_ab_definition_Set() const{
    return m_online_ab_definition_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_online_ab_definition_Valid() const{
    return m_online_ab_definition_isValid;
}

QString OAIUpdateExperimentResponse_experiment::getProject() const {
    return m_project;
}
void OAIUpdateExperimentResponse_experiment::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_project_Set() const{
    return m_project_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIUpdateExperimentResponse_experiment::getRandomizationSalt() const {
    return m_randomization_salt;
}
void OAIUpdateExperimentResponse_experiment::setRandomizationSalt(const QString &randomization_salt) {
    m_randomization_salt = randomization_salt;
    m_randomization_salt_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_randomization_salt_Set() const{
    return m_randomization_salt_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_randomization_salt_Valid() const{
    return m_randomization_salt_isValid;
}

qint32 OAIUpdateExperimentResponse_experiment::getSamplingRate() const {
    return m_sampling_rate;
}
void OAIUpdateExperimentResponse_experiment::setSamplingRate(const qint32 &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

OAIExperiment_schedule OAIUpdateExperimentResponse_experiment::getSchedule() const {
    return m_schedule;
}
void OAIUpdateExperimentResponse_experiment::setSchedule(const OAIExperiment_schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIUpdateExperimentResponse_experiment::getSegment() const {
    return m_segment;
}
void OAIUpdateExperimentResponse_experiment::setSegment(const QString &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_segment_Valid() const{
    return m_segment_isValid;
}

OAIExperimentStatus OAIUpdateExperimentResponse_experiment::getStatus() const {
    return m_status;
}
void OAIUpdateExperimentResponse_experiment::setStatus(const OAIExperimentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIUpdateExperimentResponse_experiment::getStatusReason() const {
    return m_status_reason;
}
void OAIUpdateExperimentResponse_experiment::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

QMap OAIUpdateExperimentResponse_experiment::getTags() const {
    return m_tags;
}
void OAIUpdateExperimentResponse_experiment::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAIUpdateExperimentResponse_experiment::getTreatments() const {
    return m_treatments;
}
void OAIUpdateExperimentResponse_experiment::setTreatments(const QList &treatments) {
    m_treatments = treatments;
    m_treatments_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_treatments_Set() const{
    return m_treatments_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_treatments_Valid() const{
    return m_treatments_isValid;
}

OAIExperimentType OAIUpdateExperimentResponse_experiment::getType() const {
    return m_type;
}
void OAIUpdateExperimentResponse_experiment::setType(const OAIExperimentType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateExperimentResponse_experiment::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateExperimentResponse_experiment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdateExperimentResponse_experiment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_ab_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomization_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateExperimentResponse_experiment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_time_isValid && m_last_updated_time_isValid && m_name_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
