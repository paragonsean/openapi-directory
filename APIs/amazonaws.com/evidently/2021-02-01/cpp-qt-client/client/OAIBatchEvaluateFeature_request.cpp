/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchEvaluateFeature_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchEvaluateFeature_request::OAIBatchEvaluateFeature_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchEvaluateFeature_request::OAIBatchEvaluateFeature_request() {
    this->initializeModel();
}

OAIBatchEvaluateFeature_request::~OAIBatchEvaluateFeature_request() {}

void OAIBatchEvaluateFeature_request::initializeModel() {

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIBatchEvaluateFeature_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchEvaluateFeature_request::fromJsonObject(QJsonObject json) {

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIBatchEvaluateFeature_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchEvaluateFeature_request::asJsonObject() const {
    QJsonObject obj;
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QList<OAIEvaluationRequest> OAIBatchEvaluateFeature_request::getRequests() const {
    return m_requests;
}
void OAIBatchEvaluateFeature_request::setRequests(const QList<OAIEvaluationRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIBatchEvaluateFeature_request::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIBatchEvaluateFeature_request::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIBatchEvaluateFeature_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchEvaluateFeature_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_requests_isValid && true;
}

} // namespace OpenAPI
