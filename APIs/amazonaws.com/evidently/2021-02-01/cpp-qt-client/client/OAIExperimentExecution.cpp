/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentExecution::OAIExperimentExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentExecution::OAIExperimentExecution() {
    this->initializeModel();
}

OAIExperimentExecution::~OAIExperimentExecution() {}

void OAIExperimentExecution::initializeModel() {

    m_ended_time_isSet = false;
    m_ended_time_isValid = false;

    m_started_time_isSet = false;
    m_started_time_isValid = false;
}

void OAIExperimentExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentExecution::fromJsonObject(QJsonObject json) {

    m_ended_time_isValid = ::OpenAPI::fromJsonValue(m_ended_time, json[QString("endedTime")]);
    m_ended_time_isSet = !json[QString("endedTime")].isNull() && m_ended_time_isValid;

    m_started_time_isValid = ::OpenAPI::fromJsonValue(m_started_time, json[QString("startedTime")]);
    m_started_time_isSet = !json[QString("startedTime")].isNull() && m_started_time_isValid;
}

QString OAIExperimentExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_ended_time_isSet) {
        obj.insert(QString("endedTime"), ::OpenAPI::toJsonValue(m_ended_time));
    }
    if (m_started_time_isSet) {
        obj.insert(QString("startedTime"), ::OpenAPI::toJsonValue(m_started_time));
    }
    return obj;
}

QDateTime OAIExperimentExecution::getEndedTime() const {
    return m_ended_time;
}
void OAIExperimentExecution::setEndedTime(const QDateTime &ended_time) {
    m_ended_time = ended_time;
    m_ended_time_isSet = true;
}

bool OAIExperimentExecution::is_ended_time_Set() const{
    return m_ended_time_isSet;
}

bool OAIExperimentExecution::is_ended_time_Valid() const{
    return m_ended_time_isValid;
}

QDateTime OAIExperimentExecution::getStartedTime() const {
    return m_started_time;
}
void OAIExperimentExecution::setStartedTime(const QDateTime &started_time) {
    m_started_time = started_time;
    m_started_time_isSet = true;
}

bool OAIExperimentExecution::is_started_time_Set() const{
    return m_started_time_isSet;
}

bool OAIExperimentExecution::is_started_time_Valid() const{
    return m_started_time_isValid;
}

bool OAIExperimentExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ended_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
