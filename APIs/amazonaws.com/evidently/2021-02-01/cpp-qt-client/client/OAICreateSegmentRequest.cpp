/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSegmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSegmentRequest::OAICreateSegmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSegmentRequest::OAICreateSegmentRequest() {
    this->initializeModel();
}

OAICreateSegmentRequest::~OAICreateSegmentRequest() {}

void OAICreateSegmentRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSegmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSegmentRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateSegmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSegmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSegmentRequest::getDescription() const {
    return m_description;
}
void OAICreateSegmentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSegmentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSegmentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSegmentRequest::getName() const {
    return m_name;
}
void OAICreateSegmentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSegmentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSegmentRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSegmentRequest::getPattern() const {
    return m_pattern;
}
void OAICreateSegmentRequest::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAICreateSegmentRequest::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAICreateSegmentRequest::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QMap OAICreateSegmentRequest::getTags() const {
    return m_tags;
}
void OAICreateSegmentRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSegmentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSegmentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSegmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSegmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_pattern_isValid && true;
}

} // namespace OpenAPI
