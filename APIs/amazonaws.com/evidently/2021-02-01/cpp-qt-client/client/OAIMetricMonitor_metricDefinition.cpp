/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricMonitor_metricDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricMonitor_metricDefinition::OAIMetricMonitor_metricDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricMonitor_metricDefinition::OAIMetricMonitor_metricDefinition() {
    this->initializeModel();
}

OAIMetricMonitor_metricDefinition::~OAIMetricMonitor_metricDefinition() {}

void OAIMetricMonitor_metricDefinition::initializeModel() {

    m_entity_id_key_isSet = false;
    m_entity_id_key_isValid = false;

    m_event_pattern_isSet = false;
    m_event_pattern_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_unit_label_isSet = false;
    m_unit_label_isValid = false;

    m_value_key_isSet = false;
    m_value_key_isValid = false;
}

void OAIMetricMonitor_metricDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricMonitor_metricDefinition::fromJsonObject(QJsonObject json) {

    m_entity_id_key_isValid = ::OpenAPI::fromJsonValue(m_entity_id_key, json[QString("entityIdKey")]);
    m_entity_id_key_isSet = !json[QString("entityIdKey")].isNull() && m_entity_id_key_isValid;

    m_event_pattern_isValid = ::OpenAPI::fromJsonValue(m_event_pattern, json[QString("eventPattern")]);
    m_event_pattern_isSet = !json[QString("eventPattern")].isNull() && m_event_pattern_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_unit_label_isValid = ::OpenAPI::fromJsonValue(m_unit_label, json[QString("unitLabel")]);
    m_unit_label_isSet = !json[QString("unitLabel")].isNull() && m_unit_label_isValid;

    m_value_key_isValid = ::OpenAPI::fromJsonValue(m_value_key, json[QString("valueKey")]);
    m_value_key_isSet = !json[QString("valueKey")].isNull() && m_value_key_isValid;
}

QString OAIMetricMonitor_metricDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricMonitor_metricDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_key_isSet) {
        obj.insert(QString("entityIdKey"), ::OpenAPI::toJsonValue(m_entity_id_key));
    }
    if (m_event_pattern_isSet) {
        obj.insert(QString("eventPattern"), ::OpenAPI::toJsonValue(m_event_pattern));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_unit_label_isSet) {
        obj.insert(QString("unitLabel"), ::OpenAPI::toJsonValue(m_unit_label));
    }
    if (m_value_key_isSet) {
        obj.insert(QString("valueKey"), ::OpenAPI::toJsonValue(m_value_key));
    }
    return obj;
}

QString OAIMetricMonitor_metricDefinition::getEntityIdKey() const {
    return m_entity_id_key;
}
void OAIMetricMonitor_metricDefinition::setEntityIdKey(const QString &entity_id_key) {
    m_entity_id_key = entity_id_key;
    m_entity_id_key_isSet = true;
}

bool OAIMetricMonitor_metricDefinition::is_entity_id_key_Set() const{
    return m_entity_id_key_isSet;
}

bool OAIMetricMonitor_metricDefinition::is_entity_id_key_Valid() const{
    return m_entity_id_key_isValid;
}

QString OAIMetricMonitor_metricDefinition::getEventPattern() const {
    return m_event_pattern;
}
void OAIMetricMonitor_metricDefinition::setEventPattern(const QString &event_pattern) {
    m_event_pattern = event_pattern;
    m_event_pattern_isSet = true;
}

bool OAIMetricMonitor_metricDefinition::is_event_pattern_Set() const{
    return m_event_pattern_isSet;
}

bool OAIMetricMonitor_metricDefinition::is_event_pattern_Valid() const{
    return m_event_pattern_isValid;
}

QString OAIMetricMonitor_metricDefinition::getName() const {
    return m_name;
}
void OAIMetricMonitor_metricDefinition::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricMonitor_metricDefinition::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricMonitor_metricDefinition::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetricMonitor_metricDefinition::getUnitLabel() const {
    return m_unit_label;
}
void OAIMetricMonitor_metricDefinition::setUnitLabel(const QString &unit_label) {
    m_unit_label = unit_label;
    m_unit_label_isSet = true;
}

bool OAIMetricMonitor_metricDefinition::is_unit_label_Set() const{
    return m_unit_label_isSet;
}

bool OAIMetricMonitor_metricDefinition::is_unit_label_Valid() const{
    return m_unit_label_isValid;
}

QString OAIMetricMonitor_metricDefinition::getValueKey() const {
    return m_value_key;
}
void OAIMetricMonitor_metricDefinition::setValueKey(const QString &value_key) {
    m_value_key = value_key;
    m_value_key_isSet = true;
}

bool OAIMetricMonitor_metricDefinition::is_value_key_Set() const{
    return m_value_key_isSet;
}

bool OAIMetricMonitor_metricDefinition::is_value_key_Valid() const{
    return m_value_key_isValid;
}

bool OAIMetricMonitor_metricDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricMonitor_metricDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
