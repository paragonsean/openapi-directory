/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetExperimentResults_request.h
 *
 * 
 */

#ifndef OAIGetExperimentResults_request_H
#define OAIGetExperimentResults_request_H

#include <QJsonObject>

#include "OAIExperimentReportName.h"
#include "OAIExperimentResultRequestType.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetExperimentResults_request : public OAIObject {
public:
    OAIGetExperimentResults_request();
    OAIGetExperimentResults_request(QString json);
    ~OAIGetExperimentResults_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBaseStat() const;
    void setBaseStat(const QString &base_stat);
    bool is_base_stat_Set() const;
    bool is_base_stat_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QList<QString> getMetricNames() const;
    void setMetricNames(const QList<QString> &metric_names);
    bool is_metric_names_Set() const;
    bool is_metric_names_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    QList<OAIExperimentReportName> getReportNames() const;
    void setReportNames(const QList<OAIExperimentReportName> &report_names);
    bool is_report_names_Set() const;
    bool is_report_names_Valid() const;

    QList<OAIExperimentResultRequestType> getResultStats() const;
    void setResultStats(const QList<OAIExperimentResultRequestType> &result_stats);
    bool is_result_stats_Set() const;
    bool is_result_stats_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QList<QString> getTreatmentNames() const;
    void setTreatmentNames(const QList<QString> &treatment_names);
    bool is_treatment_names_Set() const;
    bool is_treatment_names_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_base_stat;
    bool m_base_stat_isSet;
    bool m_base_stat_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QList<QString> m_metric_names;
    bool m_metric_names_isSet;
    bool m_metric_names_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    QList<OAIExperimentReportName> m_report_names;
    bool m_report_names_isSet;
    bool m_report_names_isValid;

    QList<OAIExperimentResultRequestType> m_result_stats;
    bool m_result_stats_isSet;
    bool m_result_stats_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QList<QString> m_treatment_names;
    bool m_treatment_names_isSet;
    bool m_treatment_names_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetExperimentResults_request)

#endif // OAIGetExperimentResults_request_H
