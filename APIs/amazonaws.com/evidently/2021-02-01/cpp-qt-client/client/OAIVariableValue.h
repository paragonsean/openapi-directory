/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVariableValue.h
 *
 * The value assigned to a feature variation. This structure must contain exactly one field. It can be &lt;code&gt;boolValue&lt;/code&gt;, &lt;code&gt;doubleValue&lt;/code&gt;, &lt;code&gt;longValue&lt;/code&gt;, or &lt;code&gt;stringValue&lt;/code&gt;.
 */

#ifndef OAIVariableValue_H
#define OAIVariableValue_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIVariableValue : public OAIObject {
public:
    OAIVariableValue();
    OAIVariableValue(QString json);
    ~OAIVariableValue() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getBoolValue() const;
    void setBoolValue(const bool &bool_value);
    bool is_bool_value_Set() const;
    bool is_bool_value_Valid() const;

    double getDoubleValue() const;
    void setDoubleValue(const double &double_value);
    bool is_double_value_Set() const;
    bool is_double_value_Valid() const;

    qint32 getLongValue() const;
    void setLongValue(const qint32 &long_value);
    bool is_long_value_Set() const;
    bool is_long_value_Valid() const;

    QString getStringValue() const;
    void setStringValue(const QString &string_value);
    bool is_string_value_Set() const;
    bool is_string_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_bool_value;
    bool m_bool_value_isSet;
    bool m_bool_value_isValid;

    double m_double_value;
    bool m_double_value_isSet;
    bool m_double_value_isValid;

    qint32 m_long_value;
    bool m_long_value_isSet;
    bool m_long_value_isValid;

    QString m_string_value;
    bool m_string_value_isSet;
    bool m_string_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVariableValue)

#endif // OAIVariableValue_H
