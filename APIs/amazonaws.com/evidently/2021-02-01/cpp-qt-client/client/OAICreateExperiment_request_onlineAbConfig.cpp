/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExperiment_request_onlineAbConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExperiment_request_onlineAbConfig::OAICreateExperiment_request_onlineAbConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExperiment_request_onlineAbConfig::OAICreateExperiment_request_onlineAbConfig() {
    this->initializeModel();
}

OAICreateExperiment_request_onlineAbConfig::~OAICreateExperiment_request_onlineAbConfig() {}

void OAICreateExperiment_request_onlineAbConfig::initializeModel() {

    m_control_treatment_name_isSet = false;
    m_control_treatment_name_isValid = false;

    m_treatment_weights_isSet = false;
    m_treatment_weights_isValid = false;
}

void OAICreateExperiment_request_onlineAbConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExperiment_request_onlineAbConfig::fromJsonObject(QJsonObject json) {

    m_control_treatment_name_isValid = ::OpenAPI::fromJsonValue(m_control_treatment_name, json[QString("controlTreatmentName")]);
    m_control_treatment_name_isSet = !json[QString("controlTreatmentName")].isNull() && m_control_treatment_name_isValid;

    m_treatment_weights_isValid = ::OpenAPI::fromJsonValue(m_treatment_weights, json[QString("treatmentWeights")]);
    m_treatment_weights_isSet = !json[QString("treatmentWeights")].isNull() && m_treatment_weights_isValid;
}

QString OAICreateExperiment_request_onlineAbConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExperiment_request_onlineAbConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_control_treatment_name_isSet) {
        obj.insert(QString("controlTreatmentName"), ::OpenAPI::toJsonValue(m_control_treatment_name));
    }
    if (m_treatment_weights.isSet()) {
        obj.insert(QString("treatmentWeights"), ::OpenAPI::toJsonValue(m_treatment_weights));
    }
    return obj;
}

QString OAICreateExperiment_request_onlineAbConfig::getControlTreatmentName() const {
    return m_control_treatment_name;
}
void OAICreateExperiment_request_onlineAbConfig::setControlTreatmentName(const QString &control_treatment_name) {
    m_control_treatment_name = control_treatment_name;
    m_control_treatment_name_isSet = true;
}

bool OAICreateExperiment_request_onlineAbConfig::is_control_treatment_name_Set() const{
    return m_control_treatment_name_isSet;
}

bool OAICreateExperiment_request_onlineAbConfig::is_control_treatment_name_Valid() const{
    return m_control_treatment_name_isValid;
}

QMap OAICreateExperiment_request_onlineAbConfig::getTreatmentWeights() const {
    return m_treatment_weights;
}
void OAICreateExperiment_request_onlineAbConfig::setTreatmentWeights(const QMap &treatment_weights) {
    m_treatment_weights = treatment_weights;
    m_treatment_weights_isSet = true;
}

bool OAICreateExperiment_request_onlineAbConfig::is_treatment_weights_Set() const{
    return m_treatment_weights_isSet;
}

bool OAICreateExperiment_request_onlineAbConfig::is_treatment_weights_Valid() const{
    return m_treatment_weights_isValid;
}

bool OAICreateExperiment_request_onlineAbConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_control_treatment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_weights.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExperiment_request_onlineAbConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
