/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledSplitConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledSplitConfig::OAIScheduledSplitConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledSplitConfig::OAIScheduledSplitConfig() {
    this->initializeModel();
}

OAIScheduledSplitConfig::~OAIScheduledSplitConfig() {}

void OAIScheduledSplitConfig::initializeModel() {

    m_group_weights_isSet = false;
    m_group_weights_isValid = false;

    m_segment_overrides_isSet = false;
    m_segment_overrides_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIScheduledSplitConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledSplitConfig::fromJsonObject(QJsonObject json) {

    m_group_weights_isValid = ::OpenAPI::fromJsonValue(m_group_weights, json[QString("groupWeights")]);
    m_group_weights_isSet = !json[QString("groupWeights")].isNull() && m_group_weights_isValid;

    m_segment_overrides_isValid = ::OpenAPI::fromJsonValue(m_segment_overrides, json[QString("segmentOverrides")]);
    m_segment_overrides_isSet = !json[QString("segmentOverrides")].isNull() && m_segment_overrides_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIScheduledSplitConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledSplitConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_group_weights.isSet()) {
        obj.insert(QString("groupWeights"), ::OpenAPI::toJsonValue(m_group_weights));
    }
    if (m_segment_overrides.isSet()) {
        obj.insert(QString("segmentOverrides"), ::OpenAPI::toJsonValue(m_segment_overrides));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QMap OAIScheduledSplitConfig::getGroupWeights() const {
    return m_group_weights;
}
void OAIScheduledSplitConfig::setGroupWeights(const QMap &group_weights) {
    m_group_weights = group_weights;
    m_group_weights_isSet = true;
}

bool OAIScheduledSplitConfig::is_group_weights_Set() const{
    return m_group_weights_isSet;
}

bool OAIScheduledSplitConfig::is_group_weights_Valid() const{
    return m_group_weights_isValid;
}

QList OAIScheduledSplitConfig::getSegmentOverrides() const {
    return m_segment_overrides;
}
void OAIScheduledSplitConfig::setSegmentOverrides(const QList &segment_overrides) {
    m_segment_overrides = segment_overrides;
    m_segment_overrides_isSet = true;
}

bool OAIScheduledSplitConfig::is_segment_overrides_Set() const{
    return m_segment_overrides_isSet;
}

bool OAIScheduledSplitConfig::is_segment_overrides_Valid() const{
    return m_segment_overrides_isValid;
}

QDateTime OAIScheduledSplitConfig::getStartTime() const {
    return m_start_time;
}
void OAIScheduledSplitConfig::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIScheduledSplitConfig::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIScheduledSplitConfig::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIScheduledSplitConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_weights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledSplitConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_weights_isValid && m_start_time_isValid && true;
}

} // namespace OpenAPI
