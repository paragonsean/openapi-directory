/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluateFeatureResponse_value.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluateFeatureResponse_value::OAIEvaluateFeatureResponse_value(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluateFeatureResponse_value::OAIEvaluateFeatureResponse_value() {
    this->initializeModel();
}

OAIEvaluateFeatureResponse_value::~OAIEvaluateFeatureResponse_value() {}

void OAIEvaluateFeatureResponse_value::initializeModel() {

    m_bool_value_isSet = false;
    m_bool_value_isValid = false;

    m_double_value_isSet = false;
    m_double_value_isValid = false;

    m_long_value_isSet = false;
    m_long_value_isValid = false;

    m_string_value_isSet = false;
    m_string_value_isValid = false;
}

void OAIEvaluateFeatureResponse_value::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluateFeatureResponse_value::fromJsonObject(QJsonObject json) {

    m_bool_value_isValid = ::OpenAPI::fromJsonValue(m_bool_value, json[QString("boolValue")]);
    m_bool_value_isSet = !json[QString("boolValue")].isNull() && m_bool_value_isValid;

    m_double_value_isValid = ::OpenAPI::fromJsonValue(m_double_value, json[QString("doubleValue")]);
    m_double_value_isSet = !json[QString("doubleValue")].isNull() && m_double_value_isValid;

    m_long_value_isValid = ::OpenAPI::fromJsonValue(m_long_value, json[QString("longValue")]);
    m_long_value_isSet = !json[QString("longValue")].isNull() && m_long_value_isValid;

    m_string_value_isValid = ::OpenAPI::fromJsonValue(m_string_value, json[QString("stringValue")]);
    m_string_value_isSet = !json[QString("stringValue")].isNull() && m_string_value_isValid;
}

QString OAIEvaluateFeatureResponse_value::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluateFeatureResponse_value::asJsonObject() const {
    QJsonObject obj;
    if (m_bool_value_isSet) {
        obj.insert(QString("boolValue"), ::OpenAPI::toJsonValue(m_bool_value));
    }
    if (m_double_value_isSet) {
        obj.insert(QString("doubleValue"), ::OpenAPI::toJsonValue(m_double_value));
    }
    if (m_long_value_isSet) {
        obj.insert(QString("longValue"), ::OpenAPI::toJsonValue(m_long_value));
    }
    if (m_string_value_isSet) {
        obj.insert(QString("stringValue"), ::OpenAPI::toJsonValue(m_string_value));
    }
    return obj;
}

bool OAIEvaluateFeatureResponse_value::getBoolValue() const {
    return m_bool_value;
}
void OAIEvaluateFeatureResponse_value::setBoolValue(const bool &bool_value) {
    m_bool_value = bool_value;
    m_bool_value_isSet = true;
}

bool OAIEvaluateFeatureResponse_value::is_bool_value_Set() const{
    return m_bool_value_isSet;
}

bool OAIEvaluateFeatureResponse_value::is_bool_value_Valid() const{
    return m_bool_value_isValid;
}

double OAIEvaluateFeatureResponse_value::getDoubleValue() const {
    return m_double_value;
}
void OAIEvaluateFeatureResponse_value::setDoubleValue(const double &double_value) {
    m_double_value = double_value;
    m_double_value_isSet = true;
}

bool OAIEvaluateFeatureResponse_value::is_double_value_Set() const{
    return m_double_value_isSet;
}

bool OAIEvaluateFeatureResponse_value::is_double_value_Valid() const{
    return m_double_value_isValid;
}

qint32 OAIEvaluateFeatureResponse_value::getLongValue() const {
    return m_long_value;
}
void OAIEvaluateFeatureResponse_value::setLongValue(const qint32 &long_value) {
    m_long_value = long_value;
    m_long_value_isSet = true;
}

bool OAIEvaluateFeatureResponse_value::is_long_value_Set() const{
    return m_long_value_isSet;
}

bool OAIEvaluateFeatureResponse_value::is_long_value_Valid() const{
    return m_long_value_isValid;
}

QString OAIEvaluateFeatureResponse_value::getStringValue() const {
    return m_string_value;
}
void OAIEvaluateFeatureResponse_value::setStringValue(const QString &string_value) {
    m_string_value = string_value;
    m_string_value_isSet = true;
}

bool OAIEvaluateFeatureResponse_value::is_string_value_Set() const{
    return m_string_value_isSet;
}

bool OAIEvaluateFeatureResponse_value::is_string_value_Valid() const{
    return m_string_value_isValid;
}

bool OAIEvaluateFeatureResponse_value::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bool_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_double_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluateFeatureResponse_value::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
