/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateExperiment_request.h
 *
 * 
 */

#ifndef OAICreateExperiment_request_H
#define OAICreateExperiment_request_H

#include <QJsonObject>

#include "OAICreateExperiment_request_onlineAbConfig.h"
#include "OAIMetricGoalConfig.h"
#include "OAITreatmentConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMetricGoalConfig;
class OAICreateExperiment_request_onlineAbConfig;
class OAITreatmentConfig;

class OAICreateExperiment_request : public OAIObject {
public:
    OAICreateExperiment_request();
    OAICreateExperiment_request(QString json);
    ~OAICreateExperiment_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<OAIMetricGoalConfig> getMetricGoals() const;
    void setMetricGoals(const QList<OAIMetricGoalConfig> &metric_goals);
    bool is_metric_goals_Set() const;
    bool is_metric_goals_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICreateExperiment_request_onlineAbConfig getOnlineAbConfig() const;
    void setOnlineAbConfig(const OAICreateExperiment_request_onlineAbConfig &online_ab_config);
    bool is_online_ab_config_Set() const;
    bool is_online_ab_config_Valid() const;

    QString getRandomizationSalt() const;
    void setRandomizationSalt(const QString &randomization_salt);
    bool is_randomization_salt_Set() const;
    bool is_randomization_salt_Valid() const;

    qint32 getSamplingRate() const;
    void setSamplingRate(const qint32 &sampling_rate);
    bool is_sampling_rate_Set() const;
    bool is_sampling_rate_Valid() const;

    QString getSegment() const;
    void setSegment(const QString &segment);
    bool is_segment_Set() const;
    bool is_segment_Valid() const;

    QMap<QString, QString> getTags() const;
    void setTags(const QMap<QString, QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList<OAITreatmentConfig> getTreatments() const;
    void setTreatments(const QList<OAITreatmentConfig> &treatments);
    bool is_treatments_Set() const;
    bool is_treatments_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<OAIMetricGoalConfig> m_metric_goals;
    bool m_metric_goals_isSet;
    bool m_metric_goals_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICreateExperiment_request_onlineAbConfig m_online_ab_config;
    bool m_online_ab_config_isSet;
    bool m_online_ab_config_isValid;

    QString m_randomization_salt;
    bool m_randomization_salt_isSet;
    bool m_randomization_salt_isValid;

    qint32 m_sampling_rate;
    bool m_sampling_rate_isSet;
    bool m_sampling_rate_isValid;

    QString m_segment;
    bool m_segment_isSet;
    bool m_segment_isValid;

    QMap<QString, QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList<OAITreatmentConfig> m_treatments;
    bool m_treatments_isSet;
    bool m_treatments_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateExperiment_request)

#endif // OAICreateExperiment_request_H
