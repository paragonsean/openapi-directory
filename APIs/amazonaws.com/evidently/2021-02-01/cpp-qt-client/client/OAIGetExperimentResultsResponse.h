/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetExperimentResultsResponse.h
 *
 * 
 */

#ifndef OAIGetExperimentResultsResponse_H
#define OAIGetExperimentResultsResponse_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetExperimentResultsResponse : public OAIObject {
public:
    OAIGetExperimentResultsResponse();
    OAIGetExperimentResultsResponse(QString json);
    ~OAIGetExperimentResultsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetails() const;
    void setDetails(const QString &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QList getReports() const;
    void setReports(const QList &reports);
    bool is_reports_Set() const;
    bool is_reports_Valid() const;

    QList getResultsData() const;
    void setResultsData(const QList &results_data);
    bool is_results_data_Set() const;
    bool is_results_data_Valid() const;

    QList getTimestamps() const;
    void setTimestamps(const QList &timestamps);
    bool is_timestamps_Set() const;
    bool is_timestamps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QList m_reports;
    bool m_reports_isSet;
    bool m_reports_isValid;

    QList m_results_data;
    bool m_results_data_isSet;
    bool m_results_data_isValid;

    QList m_timestamps;
    bool m_timestamps_isSet;
    bool m_timestamps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetExperimentResultsResponse)

#endif // OAIGetExperimentResultsResponse_H
