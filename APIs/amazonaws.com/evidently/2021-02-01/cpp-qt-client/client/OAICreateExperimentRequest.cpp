/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExperimentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExperimentRequest::OAICreateExperimentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExperimentRequest::OAICreateExperimentRequest() {
    this->initializeModel();
}

OAICreateExperimentRequest::~OAICreateExperimentRequest() {}

void OAICreateExperimentRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_metric_goals_isSet = false;
    m_metric_goals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_online_ab_config_isSet = false;
    m_online_ab_config_isValid = false;

    m_randomization_salt_isSet = false;
    m_randomization_salt_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_treatments_isSet = false;
    m_treatments_isValid = false;
}

void OAICreateExperimentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExperimentRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metric_goals_isValid = ::OpenAPI::fromJsonValue(m_metric_goals, json[QString("metricGoals")]);
    m_metric_goals_isSet = !json[QString("metricGoals")].isNull() && m_metric_goals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_online_ab_config_isValid = ::OpenAPI::fromJsonValue(m_online_ab_config, json[QString("onlineAbConfig")]);
    m_online_ab_config_isSet = !json[QString("onlineAbConfig")].isNull() && m_online_ab_config_isValid;

    m_randomization_salt_isValid = ::OpenAPI::fromJsonValue(m_randomization_salt, json[QString("randomizationSalt")]);
    m_randomization_salt_isSet = !json[QString("randomizationSalt")].isNull() && m_randomization_salt_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("samplingRate")]);
    m_sampling_rate_isSet = !json[QString("samplingRate")].isNull() && m_sampling_rate_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_treatments_isValid = ::OpenAPI::fromJsonValue(m_treatments, json[QString("treatments")]);
    m_treatments_isSet = !json[QString("treatments")].isNull() && m_treatments_isValid;
}

QString OAICreateExperimentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExperimentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metric_goals.isSet()) {
        obj.insert(QString("metricGoals"), ::OpenAPI::toJsonValue(m_metric_goals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_online_ab_config.isSet()) {
        obj.insert(QString("onlineAbConfig"), ::OpenAPI::toJsonValue(m_online_ab_config));
    }
    if (m_randomization_salt_isSet) {
        obj.insert(QString("randomizationSalt"), ::OpenAPI::toJsonValue(m_randomization_salt));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("samplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    if (m_segment_isSet) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_treatments.isSet()) {
        obj.insert(QString("treatments"), ::OpenAPI::toJsonValue(m_treatments));
    }
    return obj;
}

QString OAICreateExperimentRequest::getDescription() const {
    return m_description;
}
void OAICreateExperimentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateExperimentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateExperimentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QList OAICreateExperimentRequest::getMetricGoals() const {
    return m_metric_goals;
}
void OAICreateExperimentRequest::setMetricGoals(const QList &metric_goals) {
    m_metric_goals = metric_goals;
    m_metric_goals_isSet = true;
}

bool OAICreateExperimentRequest::is_metric_goals_Set() const{
    return m_metric_goals_isSet;
}

bool OAICreateExperimentRequest::is_metric_goals_Valid() const{
    return m_metric_goals_isValid;
}

QString OAICreateExperimentRequest::getName() const {
    return m_name;
}
void OAICreateExperimentRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateExperimentRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateExperimentRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateExperimentRequest_onlineAbConfig OAICreateExperimentRequest::getOnlineAbConfig() const {
    return m_online_ab_config;
}
void OAICreateExperimentRequest::setOnlineAbConfig(const OAICreateExperimentRequest_onlineAbConfig &online_ab_config) {
    m_online_ab_config = online_ab_config;
    m_online_ab_config_isSet = true;
}

bool OAICreateExperimentRequest::is_online_ab_config_Set() const{
    return m_online_ab_config_isSet;
}

bool OAICreateExperimentRequest::is_online_ab_config_Valid() const{
    return m_online_ab_config_isValid;
}

QString OAICreateExperimentRequest::getRandomizationSalt() const {
    return m_randomization_salt;
}
void OAICreateExperimentRequest::setRandomizationSalt(const QString &randomization_salt) {
    m_randomization_salt = randomization_salt;
    m_randomization_salt_isSet = true;
}

bool OAICreateExperimentRequest::is_randomization_salt_Set() const{
    return m_randomization_salt_isSet;
}

bool OAICreateExperimentRequest::is_randomization_salt_Valid() const{
    return m_randomization_salt_isValid;
}

qint32 OAICreateExperimentRequest::getSamplingRate() const {
    return m_sampling_rate;
}
void OAICreateExperimentRequest::setSamplingRate(const qint32 &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAICreateExperimentRequest::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAICreateExperimentRequest::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

QString OAICreateExperimentRequest::getSegment() const {
    return m_segment;
}
void OAICreateExperimentRequest::setSegment(const QString &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAICreateExperimentRequest::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAICreateExperimentRequest::is_segment_Valid() const{
    return m_segment_isValid;
}

QMap OAICreateExperimentRequest::getTags() const {
    return m_tags;
}
void OAICreateExperimentRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateExperimentRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateExperimentRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QList OAICreateExperimentRequest::getTreatments() const {
    return m_treatments;
}
void OAICreateExperimentRequest::setTreatments(const QList &treatments) {
    m_treatments = treatments;
    m_treatments_isSet = true;
}

bool OAICreateExperimentRequest::is_treatments_Set() const{
    return m_treatments_isSet;
}

bool OAICreateExperimentRequest::is_treatments_Valid() const{
    return m_treatments_isValid;
}

bool OAICreateExperimentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_goals.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_ab_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomization_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExperimentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_goals_isValid && m_name_isValid && m_treatments_isValid && true;
}

} // namespace OpenAPI
