/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProject_request::OAICreateProject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProject_request::OAICreateProject_request() {
    this->initializeModel();
}

OAICreateProject_request::~OAICreateProject_request() {}

void OAICreateProject_request::initializeModel() {

    m_app_config_resource_isSet = false;
    m_app_config_resource_isValid = false;

    m_data_delivery_isSet = false;
    m_data_delivery_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateProject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProject_request::fromJsonObject(QJsonObject json) {

    m_app_config_resource_isValid = ::OpenAPI::fromJsonValue(m_app_config_resource, json[QString("appConfigResource")]);
    m_app_config_resource_isSet = !json[QString("appConfigResource")].isNull() && m_app_config_resource_isValid;

    m_data_delivery_isValid = ::OpenAPI::fromJsonValue(m_data_delivery, json[QString("dataDelivery")]);
    m_data_delivery_isSet = !json[QString("dataDelivery")].isNull() && m_data_delivery_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateProject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_config_resource.isSet()) {
        obj.insert(QString("appConfigResource"), ::OpenAPI::toJsonValue(m_app_config_resource));
    }
    if (m_data_delivery.isSet()) {
        obj.insert(QString("dataDelivery"), ::OpenAPI::toJsonValue(m_data_delivery));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateProject_request_appConfigResource OAICreateProject_request::getAppConfigResource() const {
    return m_app_config_resource;
}
void OAICreateProject_request::setAppConfigResource(const OAICreateProject_request_appConfigResource &app_config_resource) {
    m_app_config_resource = app_config_resource;
    m_app_config_resource_isSet = true;
}

bool OAICreateProject_request::is_app_config_resource_Set() const{
    return m_app_config_resource_isSet;
}

bool OAICreateProject_request::is_app_config_resource_Valid() const{
    return m_app_config_resource_isValid;
}

OAICreateProject_request_dataDelivery OAICreateProject_request::getDataDelivery() const {
    return m_data_delivery;
}
void OAICreateProject_request::setDataDelivery(const OAICreateProject_request_dataDelivery &data_delivery) {
    m_data_delivery = data_delivery;
    m_data_delivery_isSet = true;
}

bool OAICreateProject_request::is_data_delivery_Set() const{
    return m_data_delivery_isSet;
}

bool OAICreateProject_request::is_data_delivery_Valid() const{
    return m_data_delivery_isValid;
}

QString OAICreateProject_request::getDescription() const {
    return m_description;
}
void OAICreateProject_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateProject_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateProject_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateProject_request::getName() const {
    return m_name;
}
void OAICreateProject_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateProject_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateProject_request::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAICreateProject_request::getTags() const {
    return m_tags;
}
void OAICreateProject_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateProject_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateProject_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateProject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_config_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_delivery.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
