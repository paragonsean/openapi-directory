/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateFeatureRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateFeatureRequest::OAIUpdateFeatureRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateFeatureRequest::OAIUpdateFeatureRequest() {
    this->initializeModel();
}

OAIUpdateFeatureRequest::~OAIUpdateFeatureRequest() {}

void OAIUpdateFeatureRequest::initializeModel() {

    m_add_or_update_variations_isSet = false;
    m_add_or_update_variations_isValid = false;

    m_default_variation_isSet = false;
    m_default_variation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_overrides_isSet = false;
    m_entity_overrides_isValid = false;

    m_evaluation_strategy_isSet = false;
    m_evaluation_strategy_isValid = false;

    m_remove_variations_isSet = false;
    m_remove_variations_isValid = false;
}

void OAIUpdateFeatureRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateFeatureRequest::fromJsonObject(QJsonObject json) {

    m_add_or_update_variations_isValid = ::OpenAPI::fromJsonValue(m_add_or_update_variations, json[QString("addOrUpdateVariations")]);
    m_add_or_update_variations_isSet = !json[QString("addOrUpdateVariations")].isNull() && m_add_or_update_variations_isValid;

    m_default_variation_isValid = ::OpenAPI::fromJsonValue(m_default_variation, json[QString("defaultVariation")]);
    m_default_variation_isSet = !json[QString("defaultVariation")].isNull() && m_default_variation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_overrides_isValid = ::OpenAPI::fromJsonValue(m_entity_overrides, json[QString("entityOverrides")]);
    m_entity_overrides_isSet = !json[QString("entityOverrides")].isNull() && m_entity_overrides_isValid;

    m_evaluation_strategy_isValid = ::OpenAPI::fromJsonValue(m_evaluation_strategy, json[QString("evaluationStrategy")]);
    m_evaluation_strategy_isSet = !json[QString("evaluationStrategy")].isNull() && m_evaluation_strategy_isValid;

    m_remove_variations_isValid = ::OpenAPI::fromJsonValue(m_remove_variations, json[QString("removeVariations")]);
    m_remove_variations_isSet = !json[QString("removeVariations")].isNull() && m_remove_variations_isValid;
}

QString OAIUpdateFeatureRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateFeatureRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_add_or_update_variations.isSet()) {
        obj.insert(QString("addOrUpdateVariations"), ::OpenAPI::toJsonValue(m_add_or_update_variations));
    }
    if (m_default_variation_isSet) {
        obj.insert(QString("defaultVariation"), ::OpenAPI::toJsonValue(m_default_variation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_overrides.isSet()) {
        obj.insert(QString("entityOverrides"), ::OpenAPI::toJsonValue(m_entity_overrides));
    }
    if (m_evaluation_strategy.isSet()) {
        obj.insert(QString("evaluationStrategy"), ::OpenAPI::toJsonValue(m_evaluation_strategy));
    }
    if (m_remove_variations.isSet()) {
        obj.insert(QString("removeVariations"), ::OpenAPI::toJsonValue(m_remove_variations));
    }
    return obj;
}

QList OAIUpdateFeatureRequest::getAddOrUpdateVariations() const {
    return m_add_or_update_variations;
}
void OAIUpdateFeatureRequest::setAddOrUpdateVariations(const QList &add_or_update_variations) {
    m_add_or_update_variations = add_or_update_variations;
    m_add_or_update_variations_isSet = true;
}

bool OAIUpdateFeatureRequest::is_add_or_update_variations_Set() const{
    return m_add_or_update_variations_isSet;
}

bool OAIUpdateFeatureRequest::is_add_or_update_variations_Valid() const{
    return m_add_or_update_variations_isValid;
}

QString OAIUpdateFeatureRequest::getDefaultVariation() const {
    return m_default_variation;
}
void OAIUpdateFeatureRequest::setDefaultVariation(const QString &default_variation) {
    m_default_variation = default_variation;
    m_default_variation_isSet = true;
}

bool OAIUpdateFeatureRequest::is_default_variation_Set() const{
    return m_default_variation_isSet;
}

bool OAIUpdateFeatureRequest::is_default_variation_Valid() const{
    return m_default_variation_isValid;
}

QString OAIUpdateFeatureRequest::getDescription() const {
    return m_description;
}
void OAIUpdateFeatureRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateFeatureRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateFeatureRequest::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAIUpdateFeatureRequest::getEntityOverrides() const {
    return m_entity_overrides;
}
void OAIUpdateFeatureRequest::setEntityOverrides(const QMap &entity_overrides) {
    m_entity_overrides = entity_overrides;
    m_entity_overrides_isSet = true;
}

bool OAIUpdateFeatureRequest::is_entity_overrides_Set() const{
    return m_entity_overrides_isSet;
}

bool OAIUpdateFeatureRequest::is_entity_overrides_Valid() const{
    return m_entity_overrides_isValid;
}

OAIFeatureEvaluationStrategy OAIUpdateFeatureRequest::getEvaluationStrategy() const {
    return m_evaluation_strategy;
}
void OAIUpdateFeatureRequest::setEvaluationStrategy(const OAIFeatureEvaluationStrategy &evaluation_strategy) {
    m_evaluation_strategy = evaluation_strategy;
    m_evaluation_strategy_isSet = true;
}

bool OAIUpdateFeatureRequest::is_evaluation_strategy_Set() const{
    return m_evaluation_strategy_isSet;
}

bool OAIUpdateFeatureRequest::is_evaluation_strategy_Valid() const{
    return m_evaluation_strategy_isValid;
}

QList OAIUpdateFeatureRequest::getRemoveVariations() const {
    return m_remove_variations;
}
void OAIUpdateFeatureRequest::setRemoveVariations(const QList &remove_variations) {
    m_remove_variations = remove_variations;
    m_remove_variations_isSet = true;
}

bool OAIUpdateFeatureRequest::is_remove_variations_Set() const{
    return m_remove_variations_isSet;
}

bool OAIUpdateFeatureRequest::is_remove_variations_Valid() const{
    return m_remove_variations_isValid;
}

bool OAIUpdateFeatureRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_add_or_update_variations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_variation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_variations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateFeatureRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
