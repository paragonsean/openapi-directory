/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSegment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSegment_request::OAICreateSegment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSegment_request::OAICreateSegment_request() {
    this->initializeModel();
}

OAICreateSegment_request::~OAICreateSegment_request() {}

void OAICreateSegment_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pattern_isSet = false;
    m_pattern_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSegment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSegment_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pattern_isValid = ::OpenAPI::fromJsonValue(m_pattern, json[QString("pattern")]);
    m_pattern_isSet = !json[QString("pattern")].isNull() && m_pattern_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateSegment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSegment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pattern_isSet) {
        obj.insert(QString("pattern"), ::OpenAPI::toJsonValue(m_pattern));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSegment_request::getDescription() const {
    return m_description;
}
void OAICreateSegment_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateSegment_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateSegment_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateSegment_request::getName() const {
    return m_name;
}
void OAICreateSegment_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSegment_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSegment_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateSegment_request::getPattern() const {
    return m_pattern;
}
void OAICreateSegment_request::setPattern(const QString &pattern) {
    m_pattern = pattern;
    m_pattern_isSet = true;
}

bool OAICreateSegment_request::is_pattern_Set() const{
    return m_pattern_isSet;
}

bool OAICreateSegment_request::is_pattern_Valid() const{
    return m_pattern_isValid;
}

QMap<QString, QString> OAICreateSegment_request::getTags() const {
    return m_tags;
}
void OAICreateSegment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSegment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSegment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSegment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSegment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_pattern_isValid && true;
}

} // namespace OpenAPI
