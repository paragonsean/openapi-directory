/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationRequest::OAIEvaluationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationRequest::OAIEvaluationRequest() {
    this->initializeModel();
}

OAIEvaluationRequest::~OAIEvaluationRequest() {}

void OAIEvaluationRequest::initializeModel() {

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_evaluation_context_isSet = false;
    m_evaluation_context_isValid = false;

    m_feature_isSet = false;
    m_feature_isValid = false;
}

void OAIEvaluationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationRequest::fromJsonObject(QJsonObject json) {

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("entityId")]);
    m_entity_id_isSet = !json[QString("entityId")].isNull() && m_entity_id_isValid;

    m_evaluation_context_isValid = ::OpenAPI::fromJsonValue(m_evaluation_context, json[QString("evaluationContext")]);
    m_evaluation_context_isSet = !json[QString("evaluationContext")].isNull() && m_evaluation_context_isValid;

    m_feature_isValid = ::OpenAPI::fromJsonValue(m_feature, json[QString("feature")]);
    m_feature_isSet = !json[QString("feature")].isNull() && m_feature_isValid;
}

QString OAIEvaluationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_id_isSet) {
        obj.insert(QString("entityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_evaluation_context_isSet) {
        obj.insert(QString("evaluationContext"), ::OpenAPI::toJsonValue(m_evaluation_context));
    }
    if (m_feature_isSet) {
        obj.insert(QString("feature"), ::OpenAPI::toJsonValue(m_feature));
    }
    return obj;
}

QString OAIEvaluationRequest::getEntityId() const {
    return m_entity_id;
}
void OAIEvaluationRequest::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEvaluationRequest::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEvaluationRequest::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIEvaluationRequest::getEvaluationContext() const {
    return m_evaluation_context;
}
void OAIEvaluationRequest::setEvaluationContext(const QString &evaluation_context) {
    m_evaluation_context = evaluation_context;
    m_evaluation_context_isSet = true;
}

bool OAIEvaluationRequest::is_evaluation_context_Set() const{
    return m_evaluation_context_isSet;
}

bool OAIEvaluationRequest::is_evaluation_context_Valid() const{
    return m_evaluation_context_isValid;
}

QString OAIEvaluationRequest::getFeature() const {
    return m_feature;
}
void OAIEvaluationRequest::setFeature(const QString &feature) {
    m_feature = feature;
    m_feature_isSet = true;
}

bool OAIEvaluationRequest::is_feature_Set() const{
    return m_feature_isSet;
}

bool OAIEvaluationRequest::is_feature_Valid() const{
    return m_feature_isValid;
}

bool OAIEvaluationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entity_id_isValid && m_feature_isValid && true;
}

} // namespace OpenAPI
