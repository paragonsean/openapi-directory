/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduledSplitConfig.h
 *
 * This structure defines the traffic allocation percentages among the feature variations during one step of a launch, and the start time of that step.
 */

#ifndef OAIScheduledSplitConfig_H
#define OAIScheduledSplitConfig_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIScheduledSplitConfig : public OAIObject {
public:
    OAIScheduledSplitConfig();
    OAIScheduledSplitConfig(QString json);
    ~OAIScheduledSplitConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap getGroupWeights() const;
    void setGroupWeights(const QMap &group_weights);
    bool is_group_weights_Set() const;
    bool is_group_weights_Valid() const;

    QList getSegmentOverrides() const;
    void setSegmentOverrides(const QList &segment_overrides);
    bool is_segment_overrides_Set() const;
    bool is_segment_overrides_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap m_group_weights;
    bool m_group_weights_isSet;
    bool m_group_weights_isValid;

    QList m_segment_overrides;
    bool m_segment_overrides_isSet;
    bool m_segment_overrides_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduledSplitConfig)

#endif // OAIScheduledSplitConfig_H
