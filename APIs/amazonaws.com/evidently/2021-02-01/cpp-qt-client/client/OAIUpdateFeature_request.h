/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateFeature_request.h
 *
 * 
 */

#ifndef OAIUpdateFeature_request_H
#define OAIUpdateFeature_request_H

#include <QJsonObject>

#include "OAIVariationConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVariationConfig;

class OAIUpdateFeature_request : public OAIObject {
public:
    OAIUpdateFeature_request();
    OAIUpdateFeature_request(QString json);
    ~OAIUpdateFeature_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIVariationConfig> getAddOrUpdateVariations() const;
    void setAddOrUpdateVariations(const QList<OAIVariationConfig> &add_or_update_variations);
    bool is_add_or_update_variations_Set() const;
    bool is_add_or_update_variations_Valid() const;

    QString getDefaultVariation() const;
    void setDefaultVariation(const QString &default_variation);
    bool is_default_variation_Set() const;
    bool is_default_variation_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, QString> getEntityOverrides() const;
    void setEntityOverrides(const QMap<QString, QString> &entity_overrides);
    bool is_entity_overrides_Set() const;
    bool is_entity_overrides_Valid() const;

    QString getEvaluationStrategy() const;
    void setEvaluationStrategy(const QString &evaluation_strategy);
    bool is_evaluation_strategy_Set() const;
    bool is_evaluation_strategy_Valid() const;

    QList<QString> getRemoveVariations() const;
    void setRemoveVariations(const QList<QString> &remove_variations);
    bool is_remove_variations_Set() const;
    bool is_remove_variations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIVariationConfig> m_add_or_update_variations;
    bool m_add_or_update_variations_isSet;
    bool m_add_or_update_variations_isValid;

    QString m_default_variation;
    bool m_default_variation_isSet;
    bool m_default_variation_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, QString> m_entity_overrides;
    bool m_entity_overrides_isSet;
    bool m_entity_overrides_isValid;

    QString m_evaluation_strategy;
    bool m_evaluation_strategy_isSet;
    bool m_evaluation_strategy_isValid;

    QList<QString> m_remove_variations;
    bool m_remove_variations_isSet;
    bool m_remove_variations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateFeature_request)

#endif // OAIUpdateFeature_request_H
