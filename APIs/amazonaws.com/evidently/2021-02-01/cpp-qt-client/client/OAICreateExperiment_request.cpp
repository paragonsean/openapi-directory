/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateExperiment_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateExperiment_request::OAICreateExperiment_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateExperiment_request::OAICreateExperiment_request() {
    this->initializeModel();
}

OAICreateExperiment_request::~OAICreateExperiment_request() {}

void OAICreateExperiment_request::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_metric_goals_isSet = false;
    m_metric_goals_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_online_ab_config_isSet = false;
    m_online_ab_config_isValid = false;

    m_randomization_salt_isSet = false;
    m_randomization_salt_isValid = false;

    m_sampling_rate_isSet = false;
    m_sampling_rate_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_treatments_isSet = false;
    m_treatments_isValid = false;
}

void OAICreateExperiment_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateExperiment_request::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metric_goals_isValid = ::OpenAPI::fromJsonValue(m_metric_goals, json[QString("metricGoals")]);
    m_metric_goals_isSet = !json[QString("metricGoals")].isNull() && m_metric_goals_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_online_ab_config_isValid = ::OpenAPI::fromJsonValue(m_online_ab_config, json[QString("onlineAbConfig")]);
    m_online_ab_config_isSet = !json[QString("onlineAbConfig")].isNull() && m_online_ab_config_isValid;

    m_randomization_salt_isValid = ::OpenAPI::fromJsonValue(m_randomization_salt, json[QString("randomizationSalt")]);
    m_randomization_salt_isSet = !json[QString("randomizationSalt")].isNull() && m_randomization_salt_isValid;

    m_sampling_rate_isValid = ::OpenAPI::fromJsonValue(m_sampling_rate, json[QString("samplingRate")]);
    m_sampling_rate_isSet = !json[QString("samplingRate")].isNull() && m_sampling_rate_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_treatments_isValid = ::OpenAPI::fromJsonValue(m_treatments, json[QString("treatments")]);
    m_treatments_isSet = !json[QString("treatments")].isNull() && m_treatments_isValid;
}

QString OAICreateExperiment_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateExperiment_request::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metric_goals.size() > 0) {
        obj.insert(QString("metricGoals"), ::OpenAPI::toJsonValue(m_metric_goals));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_online_ab_config.isSet()) {
        obj.insert(QString("onlineAbConfig"), ::OpenAPI::toJsonValue(m_online_ab_config));
    }
    if (m_randomization_salt_isSet) {
        obj.insert(QString("randomizationSalt"), ::OpenAPI::toJsonValue(m_randomization_salt));
    }
    if (m_sampling_rate_isSet) {
        obj.insert(QString("samplingRate"), ::OpenAPI::toJsonValue(m_sampling_rate));
    }
    if (m_segment_isSet) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_treatments.size() > 0) {
        obj.insert(QString("treatments"), ::OpenAPI::toJsonValue(m_treatments));
    }
    return obj;
}

QString OAICreateExperiment_request::getDescription() const {
    return m_description;
}
void OAICreateExperiment_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateExperiment_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateExperiment_request::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIMetricGoalConfig> OAICreateExperiment_request::getMetricGoals() const {
    return m_metric_goals;
}
void OAICreateExperiment_request::setMetricGoals(const QList<OAIMetricGoalConfig> &metric_goals) {
    m_metric_goals = metric_goals;
    m_metric_goals_isSet = true;
}

bool OAICreateExperiment_request::is_metric_goals_Set() const{
    return m_metric_goals_isSet;
}

bool OAICreateExperiment_request::is_metric_goals_Valid() const{
    return m_metric_goals_isValid;
}

QString OAICreateExperiment_request::getName() const {
    return m_name;
}
void OAICreateExperiment_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateExperiment_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateExperiment_request::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateExperiment_request_onlineAbConfig OAICreateExperiment_request::getOnlineAbConfig() const {
    return m_online_ab_config;
}
void OAICreateExperiment_request::setOnlineAbConfig(const OAICreateExperiment_request_onlineAbConfig &online_ab_config) {
    m_online_ab_config = online_ab_config;
    m_online_ab_config_isSet = true;
}

bool OAICreateExperiment_request::is_online_ab_config_Set() const{
    return m_online_ab_config_isSet;
}

bool OAICreateExperiment_request::is_online_ab_config_Valid() const{
    return m_online_ab_config_isValid;
}

QString OAICreateExperiment_request::getRandomizationSalt() const {
    return m_randomization_salt;
}
void OAICreateExperiment_request::setRandomizationSalt(const QString &randomization_salt) {
    m_randomization_salt = randomization_salt;
    m_randomization_salt_isSet = true;
}

bool OAICreateExperiment_request::is_randomization_salt_Set() const{
    return m_randomization_salt_isSet;
}

bool OAICreateExperiment_request::is_randomization_salt_Valid() const{
    return m_randomization_salt_isValid;
}

qint32 OAICreateExperiment_request::getSamplingRate() const {
    return m_sampling_rate;
}
void OAICreateExperiment_request::setSamplingRate(const qint32 &sampling_rate) {
    m_sampling_rate = sampling_rate;
    m_sampling_rate_isSet = true;
}

bool OAICreateExperiment_request::is_sampling_rate_Set() const{
    return m_sampling_rate_isSet;
}

bool OAICreateExperiment_request::is_sampling_rate_Valid() const{
    return m_sampling_rate_isValid;
}

QString OAICreateExperiment_request::getSegment() const {
    return m_segment;
}
void OAICreateExperiment_request::setSegment(const QString &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAICreateExperiment_request::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAICreateExperiment_request::is_segment_Valid() const{
    return m_segment_isValid;
}

QMap<QString, QString> OAICreateExperiment_request::getTags() const {
    return m_tags;
}
void OAICreateExperiment_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateExperiment_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateExperiment_request::is_tags_Valid() const{
    return m_tags_isValid;
}

QList<OAITreatmentConfig> OAICreateExperiment_request::getTreatments() const {
    return m_treatments;
}
void OAICreateExperiment_request::setTreatments(const QList<OAITreatmentConfig> &treatments) {
    m_treatments = treatments;
    m_treatments_isSet = true;
}

bool OAICreateExperiment_request::is_treatments_Set() const{
    return m_treatments_isSet;
}

bool OAICreateExperiment_request::is_treatments_Valid() const{
    return m_treatments_isValid;
}

bool OAICreateExperiment_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_goals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_ab_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_randomization_salt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sampling_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateExperiment_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_goals_isValid && m_name_isValid && m_treatments_isValid && true;
}

} // namespace OpenAPI
