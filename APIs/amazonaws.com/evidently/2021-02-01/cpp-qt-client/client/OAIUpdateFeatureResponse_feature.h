/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateFeatureResponse_feature.h
 *
 * 
 */

#ifndef OAIUpdateFeatureResponse_feature_H
#define OAIUpdateFeatureResponse_feature_H

#include <QJsonObject>

#include "OAIFeatureEvaluationStrategy.h"
#include "OAIFeatureStatus.h"
#include "OAIVariationValueType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateFeatureResponse_feature : public OAIObject {
public:
    OAIUpdateFeatureResponse_feature();
    OAIUpdateFeatureResponse_feature(QString json);
    ~OAIUpdateFeatureResponse_feature() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getDefaultVariation() const;
    void setDefaultVariation(const QString &default_variation);
    bool is_default_variation_Set() const;
    bool is_default_variation_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap getEntityOverrides() const;
    void setEntityOverrides(const QMap &entity_overrides);
    bool is_entity_overrides_Set() const;
    bool is_entity_overrides_Valid() const;

    QList getEvaluationRules() const;
    void setEvaluationRules(const QList &evaluation_rules);
    bool is_evaluation_rules_Set() const;
    bool is_evaluation_rules_Valid() const;

    OAIFeatureEvaluationStrategy getEvaluationStrategy() const;
    void setEvaluationStrategy(const OAIFeatureEvaluationStrategy &evaluation_strategy);
    bool is_evaluation_strategy_Set() const;
    bool is_evaluation_strategy_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    OAIFeatureStatus getStatus() const;
    void setStatus(const OAIFeatureStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAIVariationValueType getValueType() const;
    void setValueType(const OAIVariationValueType &value_type);
    bool is_value_type_Set() const;
    bool is_value_type_Valid() const;

    QList getVariations() const;
    void setVariations(const QList &variations);
    bool is_variations_Set() const;
    bool is_variations_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_default_variation;
    bool m_default_variation_isSet;
    bool m_default_variation_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap m_entity_overrides;
    bool m_entity_overrides_isSet;
    bool m_entity_overrides_isValid;

    QList m_evaluation_rules;
    bool m_evaluation_rules_isSet;
    bool m_evaluation_rules_isValid;

    OAIFeatureEvaluationStrategy m_evaluation_strategy;
    bool m_evaluation_strategy_isSet;
    bool m_evaluation_strategy_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    OAIFeatureStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAIVariationValueType m_value_type;
    bool m_value_type_isSet;
    bool m_value_type_isValid;

    QList m_variations;
    bool m_variations_isSet;
    bool m_variations_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateFeatureResponse_feature)

#endif // OAIUpdateFeatureResponse_feature_H
