/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExperimentResultsData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExperimentResultsData::OAIExperimentResultsData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExperimentResultsData::OAIExperimentResultsData() {
    this->initializeModel();
}

OAIExperimentResultsData::~OAIExperimentResultsData() {}

void OAIExperimentResultsData::initializeModel() {

    m_metric_name_isSet = false;
    m_metric_name_isValid = false;

    m_result_stat_isSet = false;
    m_result_stat_isValid = false;

    m_treatment_name_isSet = false;
    m_treatment_name_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIExperimentResultsData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExperimentResultsData::fromJsonObject(QJsonObject json) {

    m_metric_name_isValid = ::OpenAPI::fromJsonValue(m_metric_name, json[QString("metricName")]);
    m_metric_name_isSet = !json[QString("metricName")].isNull() && m_metric_name_isValid;

    m_result_stat_isValid = ::OpenAPI::fromJsonValue(m_result_stat, json[QString("resultStat")]);
    m_result_stat_isSet = !json[QString("resultStat")].isNull() && m_result_stat_isValid;

    m_treatment_name_isValid = ::OpenAPI::fromJsonValue(m_treatment_name, json[QString("treatmentName")]);
    m_treatment_name_isSet = !json[QString("treatmentName")].isNull() && m_treatment_name_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIExperimentResultsData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExperimentResultsData::asJsonObject() const {
    QJsonObject obj;
    if (m_metric_name_isSet) {
        obj.insert(QString("metricName"), ::OpenAPI::toJsonValue(m_metric_name));
    }
    if (m_result_stat.isSet()) {
        obj.insert(QString("resultStat"), ::OpenAPI::toJsonValue(m_result_stat));
    }
    if (m_treatment_name_isSet) {
        obj.insert(QString("treatmentName"), ::OpenAPI::toJsonValue(m_treatment_name));
    }
    if (m_values.isSet()) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIExperimentResultsData::getMetricName() const {
    return m_metric_name;
}
void OAIExperimentResultsData::setMetricName(const QString &metric_name) {
    m_metric_name = metric_name;
    m_metric_name_isSet = true;
}

bool OAIExperimentResultsData::is_metric_name_Set() const{
    return m_metric_name_isSet;
}

bool OAIExperimentResultsData::is_metric_name_Valid() const{
    return m_metric_name_isValid;
}

OAIExperimentResultResponseType OAIExperimentResultsData::getResultStat() const {
    return m_result_stat;
}
void OAIExperimentResultsData::setResultStat(const OAIExperimentResultResponseType &result_stat) {
    m_result_stat = result_stat;
    m_result_stat_isSet = true;
}

bool OAIExperimentResultsData::is_result_stat_Set() const{
    return m_result_stat_isSet;
}

bool OAIExperimentResultsData::is_result_stat_Valid() const{
    return m_result_stat_isValid;
}

QString OAIExperimentResultsData::getTreatmentName() const {
    return m_treatment_name;
}
void OAIExperimentResultsData::setTreatmentName(const QString &treatment_name) {
    m_treatment_name = treatment_name;
    m_treatment_name_isSet = true;
}

bool OAIExperimentResultsData::is_treatment_name_Set() const{
    return m_treatment_name_isSet;
}

bool OAIExperimentResultsData::is_treatment_name_Valid() const{
    return m_treatment_name_isValid;
}

QList OAIExperimentResultsData::getValues() const {
    return m_values;
}
void OAIExperimentResultsData::setValues(const QList &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIExperimentResultsData::is_values_Set() const{
    return m_values_isSet;
}

bool OAIExperimentResultsData::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIExperimentResultsData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metric_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_stat.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_treatment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExperimentResultsData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
