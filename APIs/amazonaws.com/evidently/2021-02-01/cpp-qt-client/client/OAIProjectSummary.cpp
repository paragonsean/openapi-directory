/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectSummary::OAIProjectSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectSummary::OAIProjectSummary() {
    this->initializeModel();
}

OAIProjectSummary::~OAIProjectSummary() {}

void OAIProjectSummary::initializeModel() {

    m_active_experiment_count_isSet = false;
    m_active_experiment_count_isValid = false;

    m_active_launch_count_isSet = false;
    m_active_launch_count_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_experiment_count_isSet = false;
    m_experiment_count_isValid = false;

    m_feature_count_isSet = false;
    m_feature_count_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_launch_count_isSet = false;
    m_launch_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIProjectSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectSummary::fromJsonObject(QJsonObject json) {

    m_active_experiment_count_isValid = ::OpenAPI::fromJsonValue(m_active_experiment_count, json[QString("activeExperimentCount")]);
    m_active_experiment_count_isSet = !json[QString("activeExperimentCount")].isNull() && m_active_experiment_count_isValid;

    m_active_launch_count_isValid = ::OpenAPI::fromJsonValue(m_active_launch_count, json[QString("activeLaunchCount")]);
    m_active_launch_count_isSet = !json[QString("activeLaunchCount")].isNull() && m_active_launch_count_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_experiment_count_isValid = ::OpenAPI::fromJsonValue(m_experiment_count, json[QString("experimentCount")]);
    m_experiment_count_isSet = !json[QString("experimentCount")].isNull() && m_experiment_count_isValid;

    m_feature_count_isValid = ::OpenAPI::fromJsonValue(m_feature_count, json[QString("featureCount")]);
    m_feature_count_isSet = !json[QString("featureCount")].isNull() && m_feature_count_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_launch_count_isValid = ::OpenAPI::fromJsonValue(m_launch_count, json[QString("launchCount")]);
    m_launch_count_isSet = !json[QString("launchCount")].isNull() && m_launch_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIProjectSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_active_experiment_count_isSet) {
        obj.insert(QString("activeExperimentCount"), ::OpenAPI::toJsonValue(m_active_experiment_count));
    }
    if (m_active_launch_count_isSet) {
        obj.insert(QString("activeLaunchCount"), ::OpenAPI::toJsonValue(m_active_launch_count));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_experiment_count_isSet) {
        obj.insert(QString("experimentCount"), ::OpenAPI::toJsonValue(m_experiment_count));
    }
    if (m_feature_count_isSet) {
        obj.insert(QString("featureCount"), ::OpenAPI::toJsonValue(m_feature_count));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_launch_count_isSet) {
        obj.insert(QString("launchCount"), ::OpenAPI::toJsonValue(m_launch_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

qint32 OAIProjectSummary::getActiveExperimentCount() const {
    return m_active_experiment_count;
}
void OAIProjectSummary::setActiveExperimentCount(const qint32 &active_experiment_count) {
    m_active_experiment_count = active_experiment_count;
    m_active_experiment_count_isSet = true;
}

bool OAIProjectSummary::is_active_experiment_count_Set() const{
    return m_active_experiment_count_isSet;
}

bool OAIProjectSummary::is_active_experiment_count_Valid() const{
    return m_active_experiment_count_isValid;
}

qint32 OAIProjectSummary::getActiveLaunchCount() const {
    return m_active_launch_count;
}
void OAIProjectSummary::setActiveLaunchCount(const qint32 &active_launch_count) {
    m_active_launch_count = active_launch_count;
    m_active_launch_count_isSet = true;
}

bool OAIProjectSummary::is_active_launch_count_Set() const{
    return m_active_launch_count_isSet;
}

bool OAIProjectSummary::is_active_launch_count_Valid() const{
    return m_active_launch_count_isValid;
}

QString OAIProjectSummary::getArn() const {
    return m_arn;
}
void OAIProjectSummary::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIProjectSummary::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIProjectSummary::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAIProjectSummary::getCreatedTime() const {
    return m_created_time;
}
void OAIProjectSummary::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIProjectSummary::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIProjectSummary::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIProjectSummary::getDescription() const {
    return m_description;
}
void OAIProjectSummary::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectSummary::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectSummary::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIProjectSummary::getExperimentCount() const {
    return m_experiment_count;
}
void OAIProjectSummary::setExperimentCount(const qint32 &experiment_count) {
    m_experiment_count = experiment_count;
    m_experiment_count_isSet = true;
}

bool OAIProjectSummary::is_experiment_count_Set() const{
    return m_experiment_count_isSet;
}

bool OAIProjectSummary::is_experiment_count_Valid() const{
    return m_experiment_count_isValid;
}

qint32 OAIProjectSummary::getFeatureCount() const {
    return m_feature_count;
}
void OAIProjectSummary::setFeatureCount(const qint32 &feature_count) {
    m_feature_count = feature_count;
    m_feature_count_isSet = true;
}

bool OAIProjectSummary::is_feature_count_Set() const{
    return m_feature_count_isSet;
}

bool OAIProjectSummary::is_feature_count_Valid() const{
    return m_feature_count_isValid;
}

QDateTime OAIProjectSummary::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAIProjectSummary::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAIProjectSummary::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAIProjectSummary::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

qint32 OAIProjectSummary::getLaunchCount() const {
    return m_launch_count;
}
void OAIProjectSummary::setLaunchCount(const qint32 &launch_count) {
    m_launch_count = launch_count;
    m_launch_count_isSet = true;
}

bool OAIProjectSummary::is_launch_count_Set() const{
    return m_launch_count_isSet;
}

bool OAIProjectSummary::is_launch_count_Valid() const{
    return m_launch_count_isValid;
}

QString OAIProjectSummary::getName() const {
    return m_name;
}
void OAIProjectSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIProjectStatus OAIProjectSummary::getStatus() const {
    return m_status;
}
void OAIProjectSummary::setStatus(const OAIProjectStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProjectSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProjectSummary::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIProjectSummary::getTags() const {
    return m_tags;
}
void OAIProjectSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProjectSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProjectSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIProjectSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_experiment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_launch_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feature_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_time_isValid && m_last_updated_time_isValid && m_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
