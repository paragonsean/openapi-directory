/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFeatureResponse_feature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFeatureResponse_feature::OAICreateFeatureResponse_feature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFeatureResponse_feature::OAICreateFeatureResponse_feature() {
    this->initializeModel();
}

OAICreateFeatureResponse_feature::~OAICreateFeatureResponse_feature() {}

void OAICreateFeatureResponse_feature::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_default_variation_isSet = false;
    m_default_variation_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_entity_overrides_isSet = false;
    m_entity_overrides_isValid = false;

    m_evaluation_rules_isSet = false;
    m_evaluation_rules_isValid = false;

    m_evaluation_strategy_isSet = false;
    m_evaluation_strategy_isValid = false;

    m_last_updated_time_isSet = false;
    m_last_updated_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_value_type_isSet = false;
    m_value_type_isValid = false;

    m_variations_isSet = false;
    m_variations_isValid = false;
}

void OAICreateFeatureResponse_feature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFeatureResponse_feature::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_default_variation_isValid = ::OpenAPI::fromJsonValue(m_default_variation, json[QString("defaultVariation")]);
    m_default_variation_isSet = !json[QString("defaultVariation")].isNull() && m_default_variation_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_entity_overrides_isValid = ::OpenAPI::fromJsonValue(m_entity_overrides, json[QString("entityOverrides")]);
    m_entity_overrides_isSet = !json[QString("entityOverrides")].isNull() && m_entity_overrides_isValid;

    m_evaluation_rules_isValid = ::OpenAPI::fromJsonValue(m_evaluation_rules, json[QString("evaluationRules")]);
    m_evaluation_rules_isSet = !json[QString("evaluationRules")].isNull() && m_evaluation_rules_isValid;

    m_evaluation_strategy_isValid = ::OpenAPI::fromJsonValue(m_evaluation_strategy, json[QString("evaluationStrategy")]);
    m_evaluation_strategy_isSet = !json[QString("evaluationStrategy")].isNull() && m_evaluation_strategy_isValid;

    m_last_updated_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_time, json[QString("lastUpdatedTime")]);
    m_last_updated_time_isSet = !json[QString("lastUpdatedTime")].isNull() && m_last_updated_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_value_type_isValid = ::OpenAPI::fromJsonValue(m_value_type, json[QString("valueType")]);
    m_value_type_isSet = !json[QString("valueType")].isNull() && m_value_type_isValid;

    m_variations_isValid = ::OpenAPI::fromJsonValue(m_variations, json[QString("variations")]);
    m_variations_isSet = !json[QString("variations")].isNull() && m_variations_isValid;
}

QString OAICreateFeatureResponse_feature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFeatureResponse_feature::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_default_variation_isSet) {
        obj.insert(QString("defaultVariation"), ::OpenAPI::toJsonValue(m_default_variation));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_entity_overrides.isSet()) {
        obj.insert(QString("entityOverrides"), ::OpenAPI::toJsonValue(m_entity_overrides));
    }
    if (m_evaluation_rules.isSet()) {
        obj.insert(QString("evaluationRules"), ::OpenAPI::toJsonValue(m_evaluation_rules));
    }
    if (m_evaluation_strategy.isSet()) {
        obj.insert(QString("evaluationStrategy"), ::OpenAPI::toJsonValue(m_evaluation_strategy));
    }
    if (m_last_updated_time_isSet) {
        obj.insert(QString("lastUpdatedTime"), ::OpenAPI::toJsonValue(m_last_updated_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_value_type.isSet()) {
        obj.insert(QString("valueType"), ::OpenAPI::toJsonValue(m_value_type));
    }
    if (m_variations.isSet()) {
        obj.insert(QString("variations"), ::OpenAPI::toJsonValue(m_variations));
    }
    return obj;
}

QString OAICreateFeatureResponse_feature::getArn() const {
    return m_arn;
}
void OAICreateFeatureResponse_feature::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateFeatureResponse_feature::is_arn_Valid() const{
    return m_arn_isValid;
}

QDateTime OAICreateFeatureResponse_feature::getCreatedTime() const {
    return m_created_time;
}
void OAICreateFeatureResponse_feature::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICreateFeatureResponse_feature::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAICreateFeatureResponse_feature::getDefaultVariation() const {
    return m_default_variation;
}
void OAICreateFeatureResponse_feature::setDefaultVariation(const QString &default_variation) {
    m_default_variation = default_variation;
    m_default_variation_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_default_variation_Set() const{
    return m_default_variation_isSet;
}

bool OAICreateFeatureResponse_feature::is_default_variation_Valid() const{
    return m_default_variation_isValid;
}

QString OAICreateFeatureResponse_feature::getDescription() const {
    return m_description;
}
void OAICreateFeatureResponse_feature::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateFeatureResponse_feature::is_description_Valid() const{
    return m_description_isValid;
}

QMap OAICreateFeatureResponse_feature::getEntityOverrides() const {
    return m_entity_overrides;
}
void OAICreateFeatureResponse_feature::setEntityOverrides(const QMap &entity_overrides) {
    m_entity_overrides = entity_overrides;
    m_entity_overrides_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_entity_overrides_Set() const{
    return m_entity_overrides_isSet;
}

bool OAICreateFeatureResponse_feature::is_entity_overrides_Valid() const{
    return m_entity_overrides_isValid;
}

QList OAICreateFeatureResponse_feature::getEvaluationRules() const {
    return m_evaluation_rules;
}
void OAICreateFeatureResponse_feature::setEvaluationRules(const QList &evaluation_rules) {
    m_evaluation_rules = evaluation_rules;
    m_evaluation_rules_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_evaluation_rules_Set() const{
    return m_evaluation_rules_isSet;
}

bool OAICreateFeatureResponse_feature::is_evaluation_rules_Valid() const{
    return m_evaluation_rules_isValid;
}

OAIFeatureEvaluationStrategy OAICreateFeatureResponse_feature::getEvaluationStrategy() const {
    return m_evaluation_strategy;
}
void OAICreateFeatureResponse_feature::setEvaluationStrategy(const OAIFeatureEvaluationStrategy &evaluation_strategy) {
    m_evaluation_strategy = evaluation_strategy;
    m_evaluation_strategy_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_evaluation_strategy_Set() const{
    return m_evaluation_strategy_isSet;
}

bool OAICreateFeatureResponse_feature::is_evaluation_strategy_Valid() const{
    return m_evaluation_strategy_isValid;
}

QDateTime OAICreateFeatureResponse_feature::getLastUpdatedTime() const {
    return m_last_updated_time;
}
void OAICreateFeatureResponse_feature::setLastUpdatedTime(const QDateTime &last_updated_time) {
    m_last_updated_time = last_updated_time;
    m_last_updated_time_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_last_updated_time_Set() const{
    return m_last_updated_time_isSet;
}

bool OAICreateFeatureResponse_feature::is_last_updated_time_Valid() const{
    return m_last_updated_time_isValid;
}

QString OAICreateFeatureResponse_feature::getName() const {
    return m_name;
}
void OAICreateFeatureResponse_feature::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFeatureResponse_feature::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateFeatureResponse_feature::getProject() const {
    return m_project;
}
void OAICreateFeatureResponse_feature::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_project_Set() const{
    return m_project_isSet;
}

bool OAICreateFeatureResponse_feature::is_project_Valid() const{
    return m_project_isValid;
}

OAIFeatureStatus OAICreateFeatureResponse_feature::getStatus() const {
    return m_status;
}
void OAICreateFeatureResponse_feature::setStatus(const OAIFeatureStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateFeatureResponse_feature::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAICreateFeatureResponse_feature::getTags() const {
    return m_tags;
}
void OAICreateFeatureResponse_feature::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateFeatureResponse_feature::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIVariationValueType OAICreateFeatureResponse_feature::getValueType() const {
    return m_value_type;
}
void OAICreateFeatureResponse_feature::setValueType(const OAIVariationValueType &value_type) {
    m_value_type = value_type;
    m_value_type_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_value_type_Set() const{
    return m_value_type_isSet;
}

bool OAICreateFeatureResponse_feature::is_value_type_Valid() const{
    return m_value_type_isValid;
}

QList OAICreateFeatureResponse_feature::getVariations() const {
    return m_variations;
}
void OAICreateFeatureResponse_feature::setVariations(const QList &variations) {
    m_variations = variations;
    m_variations_isSet = true;
}

bool OAICreateFeatureResponse_feature::is_variations_Set() const{
    return m_variations_isSet;
}

bool OAICreateFeatureResponse_feature::is_variations_Valid() const{
    return m_variations_isValid;
}

bool OAICreateFeatureResponse_feature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_variation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFeatureResponse_feature::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_arn_isValid && m_created_time_isValid && m_evaluation_strategy_isValid && m_last_updated_time_isValid && m_name_isValid && m_status_isValid && m_value_type_isValid && m_variations_isValid && true;
}

} // namespace OpenAPI
