/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExperiment.h
 *
 * A structure containing the configuration details of an experiment.
 */

#ifndef OAIExperiment_H
#define OAIExperiment_H

#include <QJsonObject>

#include "OAIExperimentStatus.h"
#include "OAIExperimentType.h"
#include "OAIExperiment_execution.h"
#include "OAIExperiment_onlineAbDefinition.h"
#include "OAIExperiment_schedule.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExperiment_execution;
class OAIExperiment_onlineAbDefinition;
class OAIExperiment_schedule;

class OAIExperiment : public OAIObject {
public:
    OAIExperiment();
    OAIExperiment(QString json);
    ~OAIExperiment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    OAIExperiment_execution getExecution() const;
    void setExecution(const OAIExperiment_execution &execution);
    bool is_execution_Set() const;
    bool is_execution_Valid() const;

    QDateTime getLastUpdatedTime() const;
    void setLastUpdatedTime(const QDateTime &last_updated_time);
    bool is_last_updated_time_Set() const;
    bool is_last_updated_time_Valid() const;

    QList getMetricGoals() const;
    void setMetricGoals(const QList &metric_goals);
    bool is_metric_goals_Set() const;
    bool is_metric_goals_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIExperiment_onlineAbDefinition getOnlineAbDefinition() const;
    void setOnlineAbDefinition(const OAIExperiment_onlineAbDefinition &online_ab_definition);
    bool is_online_ab_definition_Set() const;
    bool is_online_ab_definition_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    QString getRandomizationSalt() const;
    void setRandomizationSalt(const QString &randomization_salt);
    bool is_randomization_salt_Set() const;
    bool is_randomization_salt_Valid() const;

    qint32 getSamplingRate() const;
    void setSamplingRate(const qint32 &sampling_rate);
    bool is_sampling_rate_Set() const;
    bool is_sampling_rate_Valid() const;

    OAIExperiment_schedule getSchedule() const;
    void setSchedule(const OAIExperiment_schedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    QString getSegment() const;
    void setSegment(const QString &segment);
    bool is_segment_Set() const;
    bool is_segment_Valid() const;

    OAIExperimentStatus getStatus() const;
    void setStatus(const OAIExperimentStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStatusReason() const;
    void setStatusReason(const QString &status_reason);
    bool is_status_reason_Set() const;
    bool is_status_reason_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QList getTreatments() const;
    void setTreatments(const QList &treatments);
    bool is_treatments_Set() const;
    bool is_treatments_Valid() const;

    OAIExperimentType getType() const;
    void setType(const OAIExperimentType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    OAIExperiment_execution m_execution;
    bool m_execution_isSet;
    bool m_execution_isValid;

    QDateTime m_last_updated_time;
    bool m_last_updated_time_isSet;
    bool m_last_updated_time_isValid;

    QList m_metric_goals;
    bool m_metric_goals_isSet;
    bool m_metric_goals_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIExperiment_onlineAbDefinition m_online_ab_definition;
    bool m_online_ab_definition_isSet;
    bool m_online_ab_definition_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    QString m_randomization_salt;
    bool m_randomization_salt_isSet;
    bool m_randomization_salt_isValid;

    qint32 m_sampling_rate;
    bool m_sampling_rate_isSet;
    bool m_sampling_rate_isValid;

    OAIExperiment_schedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    QString m_segment;
    bool m_segment_isSet;
    bool m_segment_isValid;

    OAIExperimentStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_status_reason;
    bool m_status_reason_isSet;
    bool m_status_reason_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QList m_treatments;
    bool m_treatments_isSet;
    bool m_treatments_isValid;

    OAIExperimentType m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExperiment)

#endif // OAIExperiment_H
