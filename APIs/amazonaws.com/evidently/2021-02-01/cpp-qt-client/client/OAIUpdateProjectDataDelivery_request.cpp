/**
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateProjectDataDelivery_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateProjectDataDelivery_request::OAIUpdateProjectDataDelivery_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateProjectDataDelivery_request::OAIUpdateProjectDataDelivery_request() {
    this->initializeModel();
}

OAIUpdateProjectDataDelivery_request::~OAIUpdateProjectDataDelivery_request() {}

void OAIUpdateProjectDataDelivery_request::initializeModel() {

    m_cloud_watch_logs_isSet = false;
    m_cloud_watch_logs_isValid = false;

    m_s3_destination_isSet = false;
    m_s3_destination_isValid = false;
}

void OAIUpdateProjectDataDelivery_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateProjectDataDelivery_request::fromJsonObject(QJsonObject json) {

    m_cloud_watch_logs_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_logs, json[QString("cloudWatchLogs")]);
    m_cloud_watch_logs_isSet = !json[QString("cloudWatchLogs")].isNull() && m_cloud_watch_logs_isValid;

    m_s3_destination_isValid = ::OpenAPI::fromJsonValue(m_s3_destination, json[QString("s3Destination")]);
    m_s3_destination_isSet = !json[QString("s3Destination")].isNull() && m_s3_destination_isValid;
}

QString OAIUpdateProjectDataDelivery_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateProjectDataDelivery_request::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_watch_logs.isSet()) {
        obj.insert(QString("cloudWatchLogs"), ::OpenAPI::toJsonValue(m_cloud_watch_logs));
    }
    if (m_s3_destination.isSet()) {
        obj.insert(QString("s3Destination"), ::OpenAPI::toJsonValue(m_s3_destination));
    }
    return obj;
}

OAIUpdateProjectDataDelivery_request_cloudWatchLogs OAIUpdateProjectDataDelivery_request::getCloudWatchLogs() const {
    return m_cloud_watch_logs;
}
void OAIUpdateProjectDataDelivery_request::setCloudWatchLogs(const OAIUpdateProjectDataDelivery_request_cloudWatchLogs &cloud_watch_logs) {
    m_cloud_watch_logs = cloud_watch_logs;
    m_cloud_watch_logs_isSet = true;
}

bool OAIUpdateProjectDataDelivery_request::is_cloud_watch_logs_Set() const{
    return m_cloud_watch_logs_isSet;
}

bool OAIUpdateProjectDataDelivery_request::is_cloud_watch_logs_Valid() const{
    return m_cloud_watch_logs_isValid;
}

OAIUpdateProjectDataDelivery_request_s3Destination OAIUpdateProjectDataDelivery_request::getS3Destination() const {
    return m_s3_destination;
}
void OAIUpdateProjectDataDelivery_request::setS3Destination(const OAIUpdateProjectDataDelivery_request_s3Destination &s3_destination) {
    m_s3_destination = s3_destination;
    m_s3_destination_isSet = true;
}

bool OAIUpdateProjectDataDelivery_request::is_s3_destination_Set() const{
    return m_s3_destination_isSet;
}

bool OAIUpdateProjectDataDelivery_request::is_s3_destination_Valid() const{
    return m_s3_destination_isValid;
}

bool OAIUpdateProjectDataDelivery_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_watch_logs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateProjectDataDelivery_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
