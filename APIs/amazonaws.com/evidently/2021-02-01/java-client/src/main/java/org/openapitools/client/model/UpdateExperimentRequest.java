/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateExperimentRequestOnlineAbConfig;
import org.openapitools.client.model.MetricGoalConfig;
import org.openapitools.client.model.TreatmentConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateExperimentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateExperimentRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_METRIC_GOALS = "metricGoals";
  @SerializedName(SERIALIZED_NAME_METRIC_GOALS)
  private List<MetricGoalConfig> metricGoals = new ArrayList<>();

  public static final String SERIALIZED_NAME_ONLINE_AB_CONFIG = "onlineAbConfig";
  @SerializedName(SERIALIZED_NAME_ONLINE_AB_CONFIG)
  private CreateExperimentRequestOnlineAbConfig onlineAbConfig;

  public static final String SERIALIZED_NAME_RANDOMIZATION_SALT = "randomizationSalt";
  @SerializedName(SERIALIZED_NAME_RANDOMIZATION_SALT)
  private String randomizationSalt;

  public static final String SERIALIZED_NAME_REMOVE_SEGMENT = "removeSegment";
  @SerializedName(SERIALIZED_NAME_REMOVE_SEGMENT)
  private Boolean removeSegment;

  public static final String SERIALIZED_NAME_SAMPLING_RATE = "samplingRate";
  @SerializedName(SERIALIZED_NAME_SAMPLING_RATE)
  private Integer samplingRate;

  public static final String SERIALIZED_NAME_SEGMENT = "segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public static final String SERIALIZED_NAME_TREATMENTS = "treatments";
  @SerializedName(SERIALIZED_NAME_TREATMENTS)
  private List<TreatmentConfig> treatments = new ArrayList<>();

  public UpdateExperimentRequest() {
  }

  public UpdateExperimentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the experiment.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateExperimentRequest metricGoals(List<MetricGoalConfig> metricGoals) {
    this.metricGoals = metricGoals;
    return this;
  }

  public UpdateExperimentRequest addMetricGoalsItem(MetricGoalConfig metricGoalsItem) {
    if (this.metricGoals == null) {
      this.metricGoals = new ArrayList<>();
    }
    this.metricGoals.add(metricGoalsItem);
    return this;
  }

  /**
   * An array of structures that defines the metrics used for the experiment, and whether a higher or lower value for each metric is the goal.
   * @return metricGoals
   */
  @javax.annotation.Nullable
  public List<MetricGoalConfig> getMetricGoals() {
    return metricGoals;
  }

  public void setMetricGoals(List<MetricGoalConfig> metricGoals) {
    this.metricGoals = metricGoals;
  }


  public UpdateExperimentRequest onlineAbConfig(CreateExperimentRequestOnlineAbConfig onlineAbConfig) {
    this.onlineAbConfig = onlineAbConfig;
    return this;
  }

  /**
   * Get onlineAbConfig
   * @return onlineAbConfig
   */
  @javax.annotation.Nullable
  public CreateExperimentRequestOnlineAbConfig getOnlineAbConfig() {
    return onlineAbConfig;
  }

  public void setOnlineAbConfig(CreateExperimentRequestOnlineAbConfig onlineAbConfig) {
    this.onlineAbConfig = onlineAbConfig;
  }


  public UpdateExperimentRequest randomizationSalt(String randomizationSalt) {
    this.randomizationSalt = randomizationSalt;
    return this;
  }

  /**
   * When Evidently assigns a particular user session to an experiment, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and &lt;code&gt;randomizationSalt&lt;/code&gt;. If you omit &lt;code&gt;randomizationSalt&lt;/code&gt;, Evidently uses the experiment name as the &lt;code&gt;randomizationSalt&lt;/code&gt;.
   * @return randomizationSalt
   */
  @javax.annotation.Nullable
  public String getRandomizationSalt() {
    return randomizationSalt;
  }

  public void setRandomizationSalt(String randomizationSalt) {
    this.randomizationSalt = randomizationSalt;
  }


  public UpdateExperimentRequest removeSegment(Boolean removeSegment) {
    this.removeSegment = removeSegment;
    return this;
  }

  /**
   * Removes a segment from being used in an experiment. You can&#39;t use this parameter if the experiment is currently running.
   * @return removeSegment
   */
  @javax.annotation.Nullable
  public Boolean getRemoveSegment() {
    return removeSegment;
  }

  public void setRemoveSegment(Boolean removeSegment) {
    this.removeSegment = removeSegment;
  }


  public UpdateExperimentRequest samplingRate(Integer samplingRate) {
    this.samplingRate = samplingRate;
    return this;
  }

  /**
   * &lt;p&gt;The portion of the available audience that you want to allocate to this experiment, in thousandths of a percent. The available audience is the total audience minus the audience that you have allocated to overrides or current launches of this feature.&lt;/p&gt; &lt;p&gt;This is represented in thousandths of a percent. For example, specify 20,000 to allocate 20% of the available audience.&lt;/p&gt;
   * minimum: 0
   * maximum: 100000
   * @return samplingRate
   */
  @javax.annotation.Nullable
  public Integer getSamplingRate() {
    return samplingRate;
  }

  public void setSamplingRate(Integer samplingRate) {
    this.samplingRate = samplingRate;
  }


  public UpdateExperimentRequest segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * Adds an audience &lt;i&gt;segment&lt;/i&gt; to an experiment. When a segment is used in an experiment, only user sessions that match the segment pattern are used in the experiment. You can&#39;t use this parameter if the experiment is currently running.
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }


  public UpdateExperimentRequest treatments(List<TreatmentConfig> treatments) {
    this.treatments = treatments;
    return this;
  }

  public UpdateExperimentRequest addTreatmentsItem(TreatmentConfig treatmentsItem) {
    if (this.treatments == null) {
      this.treatments = new ArrayList<>();
    }
    this.treatments.add(treatmentsItem);
    return this;
  }

  /**
   * An array of structures that define the variations being tested in the experiment.
   * @return treatments
   */
  @javax.annotation.Nullable
  public List<TreatmentConfig> getTreatments() {
    return treatments;
  }

  public void setTreatments(List<TreatmentConfig> treatments) {
    this.treatments = treatments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateExperimentRequest updateExperimentRequest = (UpdateExperimentRequest) o;
    return Objects.equals(this.description, updateExperimentRequest.description) &&
        Objects.equals(this.metricGoals, updateExperimentRequest.metricGoals) &&
        Objects.equals(this.onlineAbConfig, updateExperimentRequest.onlineAbConfig) &&
        Objects.equals(this.randomizationSalt, updateExperimentRequest.randomizationSalt) &&
        Objects.equals(this.removeSegment, updateExperimentRequest.removeSegment) &&
        Objects.equals(this.samplingRate, updateExperimentRequest.samplingRate) &&
        Objects.equals(this.segment, updateExperimentRequest.segment) &&
        Objects.equals(this.treatments, updateExperimentRequest.treatments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, metricGoals, onlineAbConfig, randomizationSalt, removeSegment, samplingRate, segment, treatments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateExperimentRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metricGoals: ").append(toIndentedString(metricGoals)).append("\n");
    sb.append("    onlineAbConfig: ").append(toIndentedString(onlineAbConfig)).append("\n");
    sb.append("    randomizationSalt: ").append(toIndentedString(randomizationSalt)).append("\n");
    sb.append("    removeSegment: ").append(toIndentedString(removeSegment)).append("\n");
    sb.append("    samplingRate: ").append(toIndentedString(samplingRate)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    treatments: ").append(toIndentedString(treatments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("metricGoals");
    openapiFields.add("onlineAbConfig");
    openapiFields.add("randomizationSalt");
    openapiFields.add("removeSegment");
    openapiFields.add("samplingRate");
    openapiFields.add("segment");
    openapiFields.add("treatments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateExperimentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateExperimentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateExperimentRequest is not found in the empty JSON string", UpdateExperimentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateExperimentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateExperimentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("metricGoals") != null && !jsonObj.get("metricGoals").isJsonNull()) {
        JsonArray jsonArraymetricGoals = jsonObj.getAsJsonArray("metricGoals");
        if (jsonArraymetricGoals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricGoals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricGoals` to be an array in the JSON string but got `%s`", jsonObj.get("metricGoals").toString()));
          }

          // validate the optional field `metricGoals` (array)
          for (int i = 0; i < jsonArraymetricGoals.size(); i++) {
            MetricGoalConfig.validateJsonElement(jsonArraymetricGoals.get(i));
          };
        }
      }
      // validate the optional field `onlineAbConfig`
      if (jsonObj.get("onlineAbConfig") != null && !jsonObj.get("onlineAbConfig").isJsonNull()) {
        CreateExperimentRequestOnlineAbConfig.validateJsonElement(jsonObj.get("onlineAbConfig"));
      }
      if ((jsonObj.get("randomizationSalt") != null && !jsonObj.get("randomizationSalt").isJsonNull()) && !jsonObj.get("randomizationSalt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `randomizationSalt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("randomizationSalt").toString()));
      }
      if ((jsonObj.get("segment") != null && !jsonObj.get("segment").isJsonNull()) && !jsonObj.get("segment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("segment").toString()));
      }
      if (jsonObj.get("treatments") != null && !jsonObj.get("treatments").isJsonNull()) {
        JsonArray jsonArraytreatments = jsonObj.getAsJsonArray("treatments");
        if (jsonArraytreatments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("treatments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `treatments` to be an array in the JSON string but got `%s`", jsonObj.get("treatments").toString()));
          }

          // validate the optional field `treatments` (array)
          for (int i = 0; i < jsonArraytreatments.size(); i++) {
            TreatmentConfig.validateJsonElement(jsonArraytreatments.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateExperimentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateExperimentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateExperimentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateExperimentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateExperimentRequest>() {
           @Override
           public void write(JsonWriter out, UpdateExperimentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateExperimentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateExperimentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateExperimentRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateExperimentRequest
   */
  public static UpdateExperimentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateExperimentRequest.class);
  }

  /**
   * Convert an instance of UpdateExperimentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

