/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateProjectRequestAppConfigResource;
import org.openapitools.client.model.CreateProjectRequestDataDelivery;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProjectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProjectRequest {
  public static final String SERIALIZED_NAME_APP_CONFIG_RESOURCE = "appConfigResource";
  @SerializedName(SERIALIZED_NAME_APP_CONFIG_RESOURCE)
  private CreateProjectRequestAppConfigResource appConfigResource;

  public static final String SERIALIZED_NAME_DATA_DELIVERY = "dataDelivery";
  @SerializedName(SERIALIZED_NAME_DATA_DELIVERY)
  private CreateProjectRequestDataDelivery dataDelivery;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateProjectRequest() {
  }

  public CreateProjectRequest appConfigResource(CreateProjectRequestAppConfigResource appConfigResource) {
    this.appConfigResource = appConfigResource;
    return this;
  }

  /**
   * Get appConfigResource
   * @return appConfigResource
   */
  @javax.annotation.Nullable
  public CreateProjectRequestAppConfigResource getAppConfigResource() {
    return appConfigResource;
  }

  public void setAppConfigResource(CreateProjectRequestAppConfigResource appConfigResource) {
    this.appConfigResource = appConfigResource;
  }


  public CreateProjectRequest dataDelivery(CreateProjectRequestDataDelivery dataDelivery) {
    this.dataDelivery = dataDelivery;
    return this;
  }

  /**
   * Get dataDelivery
   * @return dataDelivery
   */
  @javax.annotation.Nullable
  public CreateProjectRequestDataDelivery getDataDelivery() {
    return dataDelivery;
  }

  public void setDataDelivery(CreateProjectRequestDataDelivery dataDelivery) {
    this.dataDelivery = dataDelivery;
  }


  public CreateProjectRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the project.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateProjectRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the project.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateProjectRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateProjectRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Assigns one or more tags (key-value pairs) to the project.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a project.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProjectRequest createProjectRequest = (CreateProjectRequest) o;
    return Objects.equals(this.appConfigResource, createProjectRequest.appConfigResource) &&
        Objects.equals(this.dataDelivery, createProjectRequest.dataDelivery) &&
        Objects.equals(this.description, createProjectRequest.description) &&
        Objects.equals(this.name, createProjectRequest.name) &&
        Objects.equals(this.tags, createProjectRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appConfigResource, dataDelivery, description, name, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProjectRequest {\n");
    sb.append("    appConfigResource: ").append(toIndentedString(appConfigResource)).append("\n");
    sb.append("    dataDelivery: ").append(toIndentedString(dataDelivery)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appConfigResource");
    openapiFields.add("dataDelivery");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProjectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProjectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProjectRequest is not found in the empty JSON string", CreateProjectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProjectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProjectRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProjectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appConfigResource`
      if (jsonObj.get("appConfigResource") != null && !jsonObj.get("appConfigResource").isJsonNull()) {
        CreateProjectRequestAppConfigResource.validateJsonElement(jsonObj.get("appConfigResource"));
      }
      // validate the optional field `dataDelivery`
      if (jsonObj.get("dataDelivery") != null && !jsonObj.get("dataDelivery").isJsonNull()) {
        CreateProjectRequestDataDelivery.validateJsonElement(jsonObj.get("dataDelivery"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProjectRequest>() {
           @Override
           public void write(JsonWriter out, CreateProjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProjectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProjectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProjectRequest
   * @throws IOException if the JSON string is invalid with respect to CreateProjectRequest
   */
  public static CreateProjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProjectRequest.class);
  }

  /**
   * Convert an instance of CreateProjectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

