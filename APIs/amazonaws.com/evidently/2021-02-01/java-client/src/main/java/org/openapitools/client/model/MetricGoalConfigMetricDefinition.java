/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MetricGoalConfigMetricDefinition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricGoalConfigMetricDefinition {
  public static final String SERIALIZED_NAME_ENTITY_ID_KEY = "entityIdKey";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID_KEY)
  private String entityIdKey;

  public static final String SERIALIZED_NAME_EVENT_PATTERN = "eventPattern";
  @SerializedName(SERIALIZED_NAME_EVENT_PATTERN)
  private String eventPattern;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNIT_LABEL = "unitLabel";
  @SerializedName(SERIALIZED_NAME_UNIT_LABEL)
  private String unitLabel;

  public static final String SERIALIZED_NAME_VALUE_KEY = "valueKey";
  @SerializedName(SERIALIZED_NAME_VALUE_KEY)
  private String valueKey;

  public MetricGoalConfigMetricDefinition() {
  }

  public MetricGoalConfigMetricDefinition entityIdKey(String entityIdKey) {
    this.entityIdKey = entityIdKey;
    return this;
  }

  /**
   * Get entityIdKey
   * @return entityIdKey
   */
  @javax.annotation.Nonnull
  public String getEntityIdKey() {
    return entityIdKey;
  }

  public void setEntityIdKey(String entityIdKey) {
    this.entityIdKey = entityIdKey;
  }


  public MetricGoalConfigMetricDefinition eventPattern(String eventPattern) {
    this.eventPattern = eventPattern;
    return this;
  }

  /**
   * Get eventPattern
   * @return eventPattern
   */
  @javax.annotation.Nullable
  public String getEventPattern() {
    return eventPattern;
  }

  public void setEventPattern(String eventPattern) {
    this.eventPattern = eventPattern;
  }


  public MetricGoalConfigMetricDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MetricGoalConfigMetricDefinition unitLabel(String unitLabel) {
    this.unitLabel = unitLabel;
    return this;
  }

  /**
   * Get unitLabel
   * @return unitLabel
   */
  @javax.annotation.Nullable
  public String getUnitLabel() {
    return unitLabel;
  }

  public void setUnitLabel(String unitLabel) {
    this.unitLabel = unitLabel;
  }


  public MetricGoalConfigMetricDefinition valueKey(String valueKey) {
    this.valueKey = valueKey;
    return this;
  }

  /**
   * Get valueKey
   * @return valueKey
   */
  @javax.annotation.Nonnull
  public String getValueKey() {
    return valueKey;
  }

  public void setValueKey(String valueKey) {
    this.valueKey = valueKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricGoalConfigMetricDefinition metricGoalConfigMetricDefinition = (MetricGoalConfigMetricDefinition) o;
    return Objects.equals(this.entityIdKey, metricGoalConfigMetricDefinition.entityIdKey) &&
        Objects.equals(this.eventPattern, metricGoalConfigMetricDefinition.eventPattern) &&
        Objects.equals(this.name, metricGoalConfigMetricDefinition.name) &&
        Objects.equals(this.unitLabel, metricGoalConfigMetricDefinition.unitLabel) &&
        Objects.equals(this.valueKey, metricGoalConfigMetricDefinition.valueKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityIdKey, eventPattern, name, unitLabel, valueKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricGoalConfigMetricDefinition {\n");
    sb.append("    entityIdKey: ").append(toIndentedString(entityIdKey)).append("\n");
    sb.append("    eventPattern: ").append(toIndentedString(eventPattern)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unitLabel: ").append(toIndentedString(unitLabel)).append("\n");
    sb.append("    valueKey: ").append(toIndentedString(valueKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("entityIdKey");
    openapiFields.add("eventPattern");
    openapiFields.add("name");
    openapiFields.add("unitLabel");
    openapiFields.add("valueKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("entityIdKey");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("valueKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricGoalConfigMetricDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricGoalConfigMetricDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricGoalConfigMetricDefinition is not found in the empty JSON string", MetricGoalConfigMetricDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricGoalConfigMetricDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricGoalConfigMetricDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricGoalConfigMetricDefinition.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `entityIdKey`
      String.validateJsonElement(jsonObj.get("entityIdKey"));
      // validate the optional field `eventPattern`
      if (jsonObj.get("eventPattern") != null && !jsonObj.get("eventPattern").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventPattern"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `unitLabel`
      if (jsonObj.get("unitLabel") != null && !jsonObj.get("unitLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("unitLabel"));
      }
      // validate the required field `valueKey`
      String.validateJsonElement(jsonObj.get("valueKey"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricGoalConfigMetricDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricGoalConfigMetricDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricGoalConfigMetricDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricGoalConfigMetricDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricGoalConfigMetricDefinition>() {
           @Override
           public void write(JsonWriter out, MetricGoalConfigMetricDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricGoalConfigMetricDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricGoalConfigMetricDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricGoalConfigMetricDefinition
   * @throws IOException if the JSON string is invalid with respect to MetricGoalConfigMetricDefinition
   */
  public static MetricGoalConfigMetricDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricGoalConfigMetricDefinition.class);
  }

  /**
   * Convert an instance of MetricGoalConfigMetricDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

