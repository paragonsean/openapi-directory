/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.VariationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFeatureRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFeatureRequest {
  public static final String SERIALIZED_NAME_DEFAULT_VARIATION = "defaultVariation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VARIATION)
  private String defaultVariation;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITY_OVERRIDES = "entityOverrides";
  @SerializedName(SERIALIZED_NAME_ENTITY_OVERRIDES)
  private Map<String, String> entityOverrides = new HashMap<>();

  /**
   * Specify &lt;code&gt;ALL_RULES&lt;/code&gt; to activate the traffic allocation specified by any ongoing launches or experiments. Specify &lt;code&gt;DEFAULT_VARIATION&lt;/code&gt; to serve the default variation to all users instead.
   */
  @JsonAdapter(EvaluationStrategyEnum.Adapter.class)
  public enum EvaluationStrategyEnum {
    ALL_RULES("ALL_RULES"),
    
    DEFAULT_VARIATION("DEFAULT_VARIATION");

    private String value;

    EvaluationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationStrategyEnum fromValue(String value) {
      for (EvaluationStrategyEnum b : EvaluationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_STRATEGY = "evaluationStrategy";
  @SerializedName(SERIALIZED_NAME_EVALUATION_STRATEGY)
  private EvaluationStrategyEnum evaluationStrategy;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<VariationConfig> variations = new ArrayList<>();

  public CreateFeatureRequest() {
  }

  public CreateFeatureRequest defaultVariation(String defaultVariation) {
    this.defaultVariation = defaultVariation;
    return this;
  }

  /**
   * &lt;p&gt;The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.&lt;/p&gt; &lt;p&gt;This variation must also be listed in the &lt;code&gt;variations&lt;/code&gt; structure.&lt;/p&gt; &lt;p&gt;If you omit &lt;code&gt;defaultVariation&lt;/code&gt;, the first variation listed in the &lt;code&gt;variations&lt;/code&gt; structure is used as the default variation.&lt;/p&gt;
   * @return defaultVariation
   */
  @javax.annotation.Nullable
  public String getDefaultVariation() {
    return defaultVariation;
  }

  public void setDefaultVariation(String defaultVariation) {
    this.defaultVariation = defaultVariation;
  }


  public CreateFeatureRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the feature.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateFeatureRequest entityOverrides(Map<String, String> entityOverrides) {
    this.entityOverrides = entityOverrides;
    return this;
  }

  public CreateFeatureRequest putEntityOverridesItem(String key, String entityOverridesItem) {
    if (this.entityOverrides == null) {
      this.entityOverrides = new HashMap<>();
    }
    this.entityOverrides.put(key, entityOverridesItem);
    return this;
  }

  /**
   * &lt;p&gt;Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.&lt;/p&gt; &lt;p&gt;This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.&lt;/p&gt;
   * @return entityOverrides
   */
  @javax.annotation.Nullable
  public Map<String, String> getEntityOverrides() {
    return entityOverrides;
  }

  public void setEntityOverrides(Map<String, String> entityOverrides) {
    this.entityOverrides = entityOverrides;
  }


  public CreateFeatureRequest evaluationStrategy(EvaluationStrategyEnum evaluationStrategy) {
    this.evaluationStrategy = evaluationStrategy;
    return this;
  }

  /**
   * Specify &lt;code&gt;ALL_RULES&lt;/code&gt; to activate the traffic allocation specified by any ongoing launches or experiments. Specify &lt;code&gt;DEFAULT_VARIATION&lt;/code&gt; to serve the default variation to all users instead.
   * @return evaluationStrategy
   */
  @javax.annotation.Nullable
  public EvaluationStrategyEnum getEvaluationStrategy() {
    return evaluationStrategy;
  }

  public void setEvaluationStrategy(EvaluationStrategyEnum evaluationStrategy) {
    this.evaluationStrategy = evaluationStrategy;
  }


  public CreateFeatureRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name for the new feature.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFeatureRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateFeatureRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * &lt;p&gt;Assigns one or more tags (key-value pairs) to the feature.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a feature.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateFeatureRequest variations(List<VariationConfig> variations) {
    this.variations = variations;
    return this;
  }

  public CreateFeatureRequest addVariationsItem(VariationConfig variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

  /**
   * An array of structures that contain the configuration of the feature&#39;s different variations.
   * @return variations
   */
  @javax.annotation.Nonnull
  public List<VariationConfig> getVariations() {
    return variations;
  }

  public void setVariations(List<VariationConfig> variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFeatureRequest createFeatureRequest = (CreateFeatureRequest) o;
    return Objects.equals(this.defaultVariation, createFeatureRequest.defaultVariation) &&
        Objects.equals(this.description, createFeatureRequest.description) &&
        Objects.equals(this.entityOverrides, createFeatureRequest.entityOverrides) &&
        Objects.equals(this.evaluationStrategy, createFeatureRequest.evaluationStrategy) &&
        Objects.equals(this.name, createFeatureRequest.name) &&
        Objects.equals(this.tags, createFeatureRequest.tags) &&
        Objects.equals(this.variations, createFeatureRequest.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultVariation, description, entityOverrides, evaluationStrategy, name, tags, variations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFeatureRequest {\n");
    sb.append("    defaultVariation: ").append(toIndentedString(defaultVariation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityOverrides: ").append(toIndentedString(entityOverrides)).append("\n");
    sb.append("    evaluationStrategy: ").append(toIndentedString(evaluationStrategy)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defaultVariation");
    openapiFields.add("description");
    openapiFields.add("entityOverrides");
    openapiFields.add("evaluationStrategy");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("variations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFeatureRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFeatureRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFeatureRequest is not found in the empty JSON string", CreateFeatureRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFeatureRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFeatureRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFeatureRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("defaultVariation") != null && !jsonObj.get("defaultVariation").isJsonNull()) && !jsonObj.get("defaultVariation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultVariation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultVariation").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("evaluationStrategy") != null && !jsonObj.get("evaluationStrategy").isJsonNull()) && !jsonObj.get("evaluationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationStrategy").toString()));
      }
      // validate the optional field `evaluationStrategy`
      if (jsonObj.get("evaluationStrategy") != null && !jsonObj.get("evaluationStrategy").isJsonNull()) {
        EvaluationStrategyEnum.validateJsonElement(jsonObj.get("evaluationStrategy"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("variations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `variations` to be an array in the JSON string but got `%s`", jsonObj.get("variations").toString()));
      }

      JsonArray jsonArrayvariations = jsonObj.getAsJsonArray("variations");
      // validate the required field `variations` (array)
      for (int i = 0; i < jsonArrayvariations.size(); i++) {
        VariationConfig.validateJsonElement(jsonArrayvariations.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFeatureRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFeatureRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFeatureRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFeatureRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFeatureRequest>() {
           @Override
           public void write(JsonWriter out, CreateFeatureRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFeatureRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFeatureRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFeatureRequest
   * @throws IOException if the JSON string is invalid with respect to CreateFeatureRequest
   */
  public static CreateFeatureRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFeatureRequest.class);
  }

  /**
   * Convert an instance of CreateFeatureRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

