/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExperimentReportName;
import org.openapitools.client.model.ExperimentResultRequestType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetExperimentResultsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetExperimentResultsRequest {
  /**
   * The statistic used to calculate experiment results. Currently the only valid value is &lt;code&gt;mean&lt;/code&gt;, which uses the mean of the collected values as the statistic.
   */
  @JsonAdapter(BaseStatEnum.Adapter.class)
  public enum BaseStatEnum {
    MEAN("Mean");

    private String value;

    BaseStatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BaseStatEnum fromValue(String value) {
      for (BaseStatEnum b : BaseStatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BaseStatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BaseStatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BaseStatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BaseStatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BaseStatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BASE_STAT = "baseStat";
  @SerializedName(SERIALIZED_NAME_BASE_STAT)
  private BaseStatEnum baseStat;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_METRIC_NAMES = "metricNames";
  @SerializedName(SERIALIZED_NAME_METRIC_NAMES)
  private List<String> metricNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_REPORT_NAMES = "reportNames";
  @SerializedName(SERIALIZED_NAME_REPORT_NAMES)
  private List<ExperimentReportName> reportNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_STATS = "resultStats";
  @SerializedName(SERIALIZED_NAME_RESULT_STATS)
  private List<ExperimentResultRequestType> resultStats = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_TREATMENT_NAMES = "treatmentNames";
  @SerializedName(SERIALIZED_NAME_TREATMENT_NAMES)
  private List<String> treatmentNames = new ArrayList<>();

  public GetExperimentResultsRequest() {
  }

  public GetExperimentResultsRequest baseStat(BaseStatEnum baseStat) {
    this.baseStat = baseStat;
    return this;
  }

  /**
   * The statistic used to calculate experiment results. Currently the only valid value is &lt;code&gt;mean&lt;/code&gt;, which uses the mean of the collected values as the statistic.
   * @return baseStat
   */
  @javax.annotation.Nullable
  public BaseStatEnum getBaseStat() {
    return baseStat;
  }

  public void setBaseStat(BaseStatEnum baseStat) {
    this.baseStat = baseStat;
  }


  public GetExperimentResultsRequest endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The date and time that the experiment ended, if it is completed. This must be no longer than 30 days after the experiment start time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public GetExperimentResultsRequest metricNames(List<String> metricNames) {
    this.metricNames = metricNames;
    return this;
  }

  public GetExperimentResultsRequest addMetricNamesItem(String metricNamesItem) {
    if (this.metricNames == null) {
      this.metricNames = new ArrayList<>();
    }
    this.metricNames.add(metricNamesItem);
    return this;
  }

  /**
   * The names of the experiment metrics that you want to see the results of.
   * @return metricNames
   */
  @javax.annotation.Nonnull
  public List<String> getMetricNames() {
    return metricNames;
  }

  public void setMetricNames(List<String> metricNames) {
    this.metricNames = metricNames;
  }


  public GetExperimentResultsRequest period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * In seconds, the amount of time to aggregate results together. 
   * minimum: 300
   * maximum: 90000
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public GetExperimentResultsRequest reportNames(List<ExperimentReportName> reportNames) {
    this.reportNames = reportNames;
    return this;
  }

  public GetExperimentResultsRequest addReportNamesItem(ExperimentReportName reportNamesItem) {
    if (this.reportNames == null) {
      this.reportNames = new ArrayList<>();
    }
    this.reportNames.add(reportNamesItem);
    return this;
  }

  /**
   * The names of the report types that you want to see. Currently, &lt;code&gt;BayesianInference&lt;/code&gt; is the only valid value.
   * @return reportNames
   */
  @javax.annotation.Nullable
  public List<ExperimentReportName> getReportNames() {
    return reportNames;
  }

  public void setReportNames(List<ExperimentReportName> reportNames) {
    this.reportNames = reportNames;
  }


  public GetExperimentResultsRequest resultStats(List<ExperimentResultRequestType> resultStats) {
    this.resultStats = resultStats;
    return this;
  }

  public GetExperimentResultsRequest addResultStatsItem(ExperimentResultRequestType resultStatsItem) {
    if (this.resultStats == null) {
      this.resultStats = new ArrayList<>();
    }
    this.resultStats.add(resultStatsItem);
    return this;
  }

  /**
   * &lt;p&gt;The statistics that you want to see in the returned results.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;PValue&lt;/code&gt; specifies to use p-values for the results. A p-value is used in hypothesis testing to measure how often you are willing to make a mistake in rejecting the null hypothesis. A general practice is to reject the null hypothesis and declare that the results are statistically significant when the p-value is less than 0.05.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ConfidenceInterval&lt;/code&gt; specifies a confidence interval for the results. The confidence interval represents the range of values for the chosen metric that is likely to contain the true difference between the &lt;code&gt;baseStat&lt;/code&gt; of a variation and the baseline. Evidently returns the 95% confidence interval. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;TreatmentEffect&lt;/code&gt; is the difference in the statistic specified by the &lt;code&gt;baseStat&lt;/code&gt; parameter between each variation and the default variation. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;BaseStat&lt;/code&gt; returns the statistical values collected for the metric for each variation. The statistic uses the same statistic specified in the &lt;code&gt;baseStat&lt;/code&gt; parameter. Therefore, if &lt;code&gt;baseStat&lt;/code&gt; is &lt;code&gt;mean&lt;/code&gt;, this returns the mean of the values collected for each variation.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return resultStats
   */
  @javax.annotation.Nullable
  public List<ExperimentResultRequestType> getResultStats() {
    return resultStats;
  }

  public void setResultStats(List<ExperimentResultRequestType> resultStats) {
    this.resultStats = resultStats;
  }


  public GetExperimentResultsRequest startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The date and time that the experiment started.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public GetExperimentResultsRequest treatmentNames(List<String> treatmentNames) {
    this.treatmentNames = treatmentNames;
    return this;
  }

  public GetExperimentResultsRequest addTreatmentNamesItem(String treatmentNamesItem) {
    if (this.treatmentNames == null) {
      this.treatmentNames = new ArrayList<>();
    }
    this.treatmentNames.add(treatmentNamesItem);
    return this;
  }

  /**
   * The names of the experiment treatments that you want to see the results for.
   * @return treatmentNames
   */
  @javax.annotation.Nonnull
  public List<String> getTreatmentNames() {
    return treatmentNames;
  }

  public void setTreatmentNames(List<String> treatmentNames) {
    this.treatmentNames = treatmentNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetExperimentResultsRequest getExperimentResultsRequest = (GetExperimentResultsRequest) o;
    return Objects.equals(this.baseStat, getExperimentResultsRequest.baseStat) &&
        Objects.equals(this.endTime, getExperimentResultsRequest.endTime) &&
        Objects.equals(this.metricNames, getExperimentResultsRequest.metricNames) &&
        Objects.equals(this.period, getExperimentResultsRequest.period) &&
        Objects.equals(this.reportNames, getExperimentResultsRequest.reportNames) &&
        Objects.equals(this.resultStats, getExperimentResultsRequest.resultStats) &&
        Objects.equals(this.startTime, getExperimentResultsRequest.startTime) &&
        Objects.equals(this.treatmentNames, getExperimentResultsRequest.treatmentNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseStat, endTime, metricNames, period, reportNames, resultStats, startTime, treatmentNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetExperimentResultsRequest {\n");
    sb.append("    baseStat: ").append(toIndentedString(baseStat)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    metricNames: ").append(toIndentedString(metricNames)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    reportNames: ").append(toIndentedString(reportNames)).append("\n");
    sb.append("    resultStats: ").append(toIndentedString(resultStats)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    treatmentNames: ").append(toIndentedString(treatmentNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseStat");
    openapiFields.add("endTime");
    openapiFields.add("metricNames");
    openapiFields.add("period");
    openapiFields.add("reportNames");
    openapiFields.add("resultStats");
    openapiFields.add("startTime");
    openapiFields.add("treatmentNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metricNames");
    openapiRequiredFields.add("treatmentNames");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetExperimentResultsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetExperimentResultsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetExperimentResultsRequest is not found in the empty JSON string", GetExperimentResultsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetExperimentResultsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetExperimentResultsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetExperimentResultsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseStat") != null && !jsonObj.get("baseStat").isJsonNull()) && !jsonObj.get("baseStat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseStat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseStat").toString()));
      }
      // validate the optional field `baseStat`
      if (jsonObj.get("baseStat") != null && !jsonObj.get("baseStat").isJsonNull()) {
        BaseStatEnum.validateJsonElement(jsonObj.get("baseStat"));
      }
      // ensure the required json array is present
      if (jsonObj.get("metricNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("metricNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricNames` to be an array in the JSON string but got `%s`", jsonObj.get("metricNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reportNames") != null && !jsonObj.get("reportNames").isJsonNull() && !jsonObj.get("reportNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportNames` to be an array in the JSON string but got `%s`", jsonObj.get("reportNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resultStats") != null && !jsonObj.get("resultStats").isJsonNull() && !jsonObj.get("resultStats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultStats` to be an array in the JSON string but got `%s`", jsonObj.get("resultStats").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("treatmentNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("treatmentNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `treatmentNames` to be an array in the JSON string but got `%s`", jsonObj.get("treatmentNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetExperimentResultsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetExperimentResultsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetExperimentResultsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetExperimentResultsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetExperimentResultsRequest>() {
           @Override
           public void write(JsonWriter out, GetExperimentResultsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetExperimentResultsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetExperimentResultsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetExperimentResultsRequest
   * @throws IOException if the JSON string is invalid with respect to GetExperimentResultsRequest
   */
  public static GetExperimentResultsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetExperimentResultsRequest.class);
  }

  /**
   * Convert an instance of GetExperimentResultsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

