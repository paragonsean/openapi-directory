/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateLaunchRequestScheduledSplitsConfig;
import org.openapitools.client.model.LaunchGroupConfig;
import org.openapitools.client.model.MetricMonitorConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLaunchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLaunchRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<LaunchGroupConfig> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRIC_MONITORS = "metricMonitors";
  @SerializedName(SERIALIZED_NAME_METRIC_MONITORS)
  private List<MetricMonitorConfig> metricMonitors = new ArrayList<>();

  public static final String SERIALIZED_NAME_RANDOMIZATION_SALT = "randomizationSalt";
  @SerializedName(SERIALIZED_NAME_RANDOMIZATION_SALT)
  private String randomizationSalt;

  public static final String SERIALIZED_NAME_SCHEDULED_SPLITS_CONFIG = "scheduledSplitsConfig";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_SPLITS_CONFIG)
  private CreateLaunchRequestScheduledSplitsConfig scheduledSplitsConfig;

  public UpdateLaunchRequest() {
  }

  public UpdateLaunchRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description for the launch.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateLaunchRequest groups(List<LaunchGroupConfig> groups) {
    this.groups = groups;
    return this;
  }

  public UpdateLaunchRequest addGroupsItem(LaunchGroupConfig groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

  /**
   * An array of structures that contains the feature and variations that are to be used for the launch.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<LaunchGroupConfig> getGroups() {
    return groups;
  }

  public void setGroups(List<LaunchGroupConfig> groups) {
    this.groups = groups;
  }


  public UpdateLaunchRequest metricMonitors(List<MetricMonitorConfig> metricMonitors) {
    this.metricMonitors = metricMonitors;
    return this;
  }

  public UpdateLaunchRequest addMetricMonitorsItem(MetricMonitorConfig metricMonitorsItem) {
    if (this.metricMonitors == null) {
      this.metricMonitors = new ArrayList<>();
    }
    this.metricMonitors.add(metricMonitorsItem);
    return this;
  }

  /**
   * An array of structures that define the metrics that will be used to monitor the launch performance.
   * @return metricMonitors
   */
  @javax.annotation.Nullable
  public List<MetricMonitorConfig> getMetricMonitors() {
    return metricMonitors;
  }

  public void setMetricMonitors(List<MetricMonitorConfig> metricMonitors) {
    this.metricMonitors = metricMonitors;
  }


  public UpdateLaunchRequest randomizationSalt(String randomizationSalt) {
    this.randomizationSalt = randomizationSalt;
    return this;
  }

  /**
   * When Evidently assigns a particular user session to a launch, it must use a randomization ID to determine which variation the user session is served. This randomization ID is a combination of the entity ID and &lt;code&gt;randomizationSalt&lt;/code&gt;. If you omit &lt;code&gt;randomizationSalt&lt;/code&gt;, Evidently uses the launch name as the &lt;code&gt;randomizationSalt&lt;/code&gt;.
   * @return randomizationSalt
   */
  @javax.annotation.Nullable
  public String getRandomizationSalt() {
    return randomizationSalt;
  }

  public void setRandomizationSalt(String randomizationSalt) {
    this.randomizationSalt = randomizationSalt;
  }


  public UpdateLaunchRequest scheduledSplitsConfig(CreateLaunchRequestScheduledSplitsConfig scheduledSplitsConfig) {
    this.scheduledSplitsConfig = scheduledSplitsConfig;
    return this;
  }

  /**
   * Get scheduledSplitsConfig
   * @return scheduledSplitsConfig
   */
  @javax.annotation.Nullable
  public CreateLaunchRequestScheduledSplitsConfig getScheduledSplitsConfig() {
    return scheduledSplitsConfig;
  }

  public void setScheduledSplitsConfig(CreateLaunchRequestScheduledSplitsConfig scheduledSplitsConfig) {
    this.scheduledSplitsConfig = scheduledSplitsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLaunchRequest updateLaunchRequest = (UpdateLaunchRequest) o;
    return Objects.equals(this.description, updateLaunchRequest.description) &&
        Objects.equals(this.groups, updateLaunchRequest.groups) &&
        Objects.equals(this.metricMonitors, updateLaunchRequest.metricMonitors) &&
        Objects.equals(this.randomizationSalt, updateLaunchRequest.randomizationSalt) &&
        Objects.equals(this.scheduledSplitsConfig, updateLaunchRequest.scheduledSplitsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, groups, metricMonitors, randomizationSalt, scheduledSplitsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLaunchRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    metricMonitors: ").append(toIndentedString(metricMonitors)).append("\n");
    sb.append("    randomizationSalt: ").append(toIndentedString(randomizationSalt)).append("\n");
    sb.append("    scheduledSplitsConfig: ").append(toIndentedString(scheduledSplitsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("groups");
    openapiFields.add("metricMonitors");
    openapiFields.add("randomizationSalt");
    openapiFields.add("scheduledSplitsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLaunchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLaunchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLaunchRequest is not found in the empty JSON string", UpdateLaunchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLaunchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLaunchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            LaunchGroupConfig.validateJsonElement(jsonArraygroups.get(i));
          };
        }
      }
      if (jsonObj.get("metricMonitors") != null && !jsonObj.get("metricMonitors").isJsonNull()) {
        JsonArray jsonArraymetricMonitors = jsonObj.getAsJsonArray("metricMonitors");
        if (jsonArraymetricMonitors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metricMonitors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metricMonitors` to be an array in the JSON string but got `%s`", jsonObj.get("metricMonitors").toString()));
          }

          // validate the optional field `metricMonitors` (array)
          for (int i = 0; i < jsonArraymetricMonitors.size(); i++) {
            MetricMonitorConfig.validateJsonElement(jsonArraymetricMonitors.get(i));
          };
        }
      }
      if ((jsonObj.get("randomizationSalt") != null && !jsonObj.get("randomizationSalt").isJsonNull()) && !jsonObj.get("randomizationSalt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `randomizationSalt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("randomizationSalt").toString()));
      }
      // validate the optional field `scheduledSplitsConfig`
      if (jsonObj.get("scheduledSplitsConfig") != null && !jsonObj.get("scheduledSplitsConfig").isJsonNull()) {
        CreateLaunchRequestScheduledSplitsConfig.validateJsonElement(jsonObj.get("scheduledSplitsConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLaunchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLaunchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLaunchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLaunchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLaunchRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLaunchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLaunchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLaunchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLaunchRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLaunchRequest
   */
  public static UpdateLaunchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLaunchRequest.class);
  }

  /**
   * Convert an instance of UpdateLaunchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

