/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutProjectEventsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutProjectEventsResponse {
  public static final String SERIALIZED_NAME_EVENT_RESULTS = "eventResults";
  @SerializedName(SERIALIZED_NAME_EVENT_RESULTS)
  private List eventResults;

  public static final String SERIALIZED_NAME_FAILED_EVENT_COUNT = "failedEventCount";
  @SerializedName(SERIALIZED_NAME_FAILED_EVENT_COUNT)
  private Integer failedEventCount;

  public PutProjectEventsResponse() {
  }

  public PutProjectEventsResponse eventResults(List eventResults) {
    this.eventResults = eventResults;
    return this;
  }

  /**
   * Get eventResults
   * @return eventResults
   */
  @javax.annotation.Nullable
  public List getEventResults() {
    return eventResults;
  }

  public void setEventResults(List eventResults) {
    this.eventResults = eventResults;
  }


  public PutProjectEventsResponse failedEventCount(Integer failedEventCount) {
    this.failedEventCount = failedEventCount;
    return this;
  }

  /**
   * Get failedEventCount
   * @return failedEventCount
   */
  @javax.annotation.Nullable
  public Integer getFailedEventCount() {
    return failedEventCount;
  }

  public void setFailedEventCount(Integer failedEventCount) {
    this.failedEventCount = failedEventCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutProjectEventsResponse putProjectEventsResponse = (PutProjectEventsResponse) o;
    return Objects.equals(this.eventResults, putProjectEventsResponse.eventResults) &&
        Objects.equals(this.failedEventCount, putProjectEventsResponse.failedEventCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventResults, failedEventCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutProjectEventsResponse {\n");
    sb.append("    eventResults: ").append(toIndentedString(eventResults)).append("\n");
    sb.append("    failedEventCount: ").append(toIndentedString(failedEventCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventResults");
    openapiFields.add("failedEventCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutProjectEventsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutProjectEventsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutProjectEventsResponse is not found in the empty JSON string", PutProjectEventsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutProjectEventsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutProjectEventsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventResults`
      if (jsonObj.get("eventResults") != null && !jsonObj.get("eventResults").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("eventResults"));
      }
      // validate the optional field `failedEventCount`
      if (jsonObj.get("failedEventCount") != null && !jsonObj.get("failedEventCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("failedEventCount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutProjectEventsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutProjectEventsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutProjectEventsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutProjectEventsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PutProjectEventsResponse>() {
           @Override
           public void write(JsonWriter out, PutProjectEventsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutProjectEventsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutProjectEventsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutProjectEventsResponse
   * @throws IOException if the JSON string is invalid with respect to PutProjectEventsResponse
   */
  public static PutProjectEventsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutProjectEventsResponse.class);
  }

  /**
   * Convert an instance of PutProjectEventsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

