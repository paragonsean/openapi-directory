/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ExperimentExecution;
import org.openapitools.client.model.ExperimentOnlineAbDefinition;
import org.openapitools.client.model.ExperimentSchedule;
import org.openapitools.client.model.ExperimentStatus;
import org.openapitools.client.model.ExperimentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structure containing the configuration details of an experiment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Experiment {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXECUTION = "execution";
  @SerializedName(SERIALIZED_NAME_EXECUTION)
  private ExperimentExecution execution;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_METRIC_GOALS = "metricGoals";
  @SerializedName(SERIALIZED_NAME_METRIC_GOALS)
  private List metricGoals;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONLINE_AB_DEFINITION = "onlineAbDefinition";
  @SerializedName(SERIALIZED_NAME_ONLINE_AB_DEFINITION)
  private ExperimentOnlineAbDefinition onlineAbDefinition;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_RANDOMIZATION_SALT = "randomizationSalt";
  @SerializedName(SERIALIZED_NAME_RANDOMIZATION_SALT)
  private String randomizationSalt;

  public static final String SERIALIZED_NAME_SAMPLING_RATE = "samplingRate";
  @SerializedName(SERIALIZED_NAME_SAMPLING_RATE)
  private Integer samplingRate;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private ExperimentSchedule schedule;

  public static final String SERIALIZED_NAME_SEGMENT = "segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private String segment;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExperimentStatus status;

  public static final String SERIALIZED_NAME_STATUS_REASON = "statusReason";
  @SerializedName(SERIALIZED_NAME_STATUS_REASON)
  private String statusReason;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TREATMENTS = "treatments";
  @SerializedName(SERIALIZED_NAME_TREATMENTS)
  private List treatments;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private ExperimentType type;

  public Experiment() {
  }

  public Experiment arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Experiment createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public Experiment description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Experiment execution(ExperimentExecution execution) {
    this.execution = execution;
    return this;
  }

  /**
   * Get execution
   * @return execution
   */
  @javax.annotation.Nullable
  public ExperimentExecution getExecution() {
    return execution;
  }

  public void setExecution(ExperimentExecution execution) {
    this.execution = execution;
  }


  public Experiment lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public Experiment metricGoals(List metricGoals) {
    this.metricGoals = metricGoals;
    return this;
  }

  /**
   * Get metricGoals
   * @return metricGoals
   */
  @javax.annotation.Nullable
  public List getMetricGoals() {
    return metricGoals;
  }

  public void setMetricGoals(List metricGoals) {
    this.metricGoals = metricGoals;
  }


  public Experiment name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Experiment onlineAbDefinition(ExperimentOnlineAbDefinition onlineAbDefinition) {
    this.onlineAbDefinition = onlineAbDefinition;
    return this;
  }

  /**
   * Get onlineAbDefinition
   * @return onlineAbDefinition
   */
  @javax.annotation.Nullable
  public ExperimentOnlineAbDefinition getOnlineAbDefinition() {
    return onlineAbDefinition;
  }

  public void setOnlineAbDefinition(ExperimentOnlineAbDefinition onlineAbDefinition) {
    this.onlineAbDefinition = onlineAbDefinition;
  }


  public Experiment project(String project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public Experiment randomizationSalt(String randomizationSalt) {
    this.randomizationSalt = randomizationSalt;
    return this;
  }

  /**
   * Get randomizationSalt
   * @return randomizationSalt
   */
  @javax.annotation.Nullable
  public String getRandomizationSalt() {
    return randomizationSalt;
  }

  public void setRandomizationSalt(String randomizationSalt) {
    this.randomizationSalt = randomizationSalt;
  }


  public Experiment samplingRate(Integer samplingRate) {
    this.samplingRate = samplingRate;
    return this;
  }

  /**
   * Get samplingRate
   * @return samplingRate
   */
  @javax.annotation.Nullable
  public Integer getSamplingRate() {
    return samplingRate;
  }

  public void setSamplingRate(Integer samplingRate) {
    this.samplingRate = samplingRate;
  }


  public Experiment schedule(ExperimentSchedule schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Get schedule
   * @return schedule
   */
  @javax.annotation.Nullable
  public ExperimentSchedule getSchedule() {
    return schedule;
  }

  public void setSchedule(ExperimentSchedule schedule) {
    this.schedule = schedule;
  }


  public Experiment segment(String segment) {
    this.segment = segment;
    return this;
  }

  /**
   * Get segment
   * @return segment
   */
  @javax.annotation.Nullable
  public String getSegment() {
    return segment;
  }

  public void setSegment(String segment) {
    this.segment = segment;
  }


  public Experiment status(ExperimentStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ExperimentStatus getStatus() {
    return status;
  }

  public void setStatus(ExperimentStatus status) {
    this.status = status;
  }


  public Experiment statusReason(String statusReason) {
    this.statusReason = statusReason;
    return this;
  }

  /**
   * Get statusReason
   * @return statusReason
   */
  @javax.annotation.Nullable
  public String getStatusReason() {
    return statusReason;
  }

  public void setStatusReason(String statusReason) {
    this.statusReason = statusReason;
  }


  public Experiment tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public Experiment treatments(List treatments) {
    this.treatments = treatments;
    return this;
  }

  /**
   * Get treatments
   * @return treatments
   */
  @javax.annotation.Nullable
  public List getTreatments() {
    return treatments;
  }

  public void setTreatments(List treatments) {
    this.treatments = treatments;
  }


  public Experiment type(ExperimentType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public ExperimentType getType() {
    return type;
  }

  public void setType(ExperimentType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Experiment experiment = (Experiment) o;
    return Objects.equals(this.arn, experiment.arn) &&
        Objects.equals(this.createdTime, experiment.createdTime) &&
        Objects.equals(this.description, experiment.description) &&
        Objects.equals(this.execution, experiment.execution) &&
        Objects.equals(this.lastUpdatedTime, experiment.lastUpdatedTime) &&
        Objects.equals(this.metricGoals, experiment.metricGoals) &&
        Objects.equals(this.name, experiment.name) &&
        Objects.equals(this.onlineAbDefinition, experiment.onlineAbDefinition) &&
        Objects.equals(this.project, experiment.project) &&
        Objects.equals(this.randomizationSalt, experiment.randomizationSalt) &&
        Objects.equals(this.samplingRate, experiment.samplingRate) &&
        Objects.equals(this.schedule, experiment.schedule) &&
        Objects.equals(this.segment, experiment.segment) &&
        Objects.equals(this.status, experiment.status) &&
        Objects.equals(this.statusReason, experiment.statusReason) &&
        Objects.equals(this.tags, experiment.tags) &&
        Objects.equals(this.treatments, experiment.treatments) &&
        Objects.equals(this.type, experiment.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, createdTime, description, execution, lastUpdatedTime, metricGoals, name, onlineAbDefinition, project, randomizationSalt, samplingRate, schedule, segment, status, statusReason, tags, treatments, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Experiment {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    execution: ").append(toIndentedString(execution)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    metricGoals: ").append(toIndentedString(metricGoals)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onlineAbDefinition: ").append(toIndentedString(onlineAbDefinition)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    randomizationSalt: ").append(toIndentedString(randomizationSalt)).append("\n");
    sb.append("    samplingRate: ").append(toIndentedString(samplingRate)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusReason: ").append(toIndentedString(statusReason)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    treatments: ").append(toIndentedString(treatments)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("createdTime");
    openapiFields.add("description");
    openapiFields.add("execution");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("metricGoals");
    openapiFields.add("name");
    openapiFields.add("onlineAbDefinition");
    openapiFields.add("project");
    openapiFields.add("randomizationSalt");
    openapiFields.add("samplingRate");
    openapiFields.add("schedule");
    openapiFields.add("segment");
    openapiFields.add("status");
    openapiFields.add("statusReason");
    openapiFields.add("tags");
    openapiFields.add("treatments");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("lastUpdatedTime");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Experiment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Experiment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Experiment is not found in the empty JSON string", Experiment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Experiment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Experiment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Experiment.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `createdTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdTime"));
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `execution`
      if (jsonObj.get("execution") != null && !jsonObj.get("execution").isJsonNull()) {
        ExperimentExecution.validateJsonElement(jsonObj.get("execution"));
      }
      // validate the required field `lastUpdatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      // validate the optional field `metricGoals`
      if (jsonObj.get("metricGoals") != null && !jsonObj.get("metricGoals").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("metricGoals"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `onlineAbDefinition`
      if (jsonObj.get("onlineAbDefinition") != null && !jsonObj.get("onlineAbDefinition").isJsonNull()) {
        ExperimentOnlineAbDefinition.validateJsonElement(jsonObj.get("onlineAbDefinition"));
      }
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("project"));
      }
      // validate the optional field `randomizationSalt`
      if (jsonObj.get("randomizationSalt") != null && !jsonObj.get("randomizationSalt").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("randomizationSalt"));
      }
      // validate the optional field `samplingRate`
      if (jsonObj.get("samplingRate") != null && !jsonObj.get("samplingRate").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("samplingRate"));
      }
      // validate the optional field `schedule`
      if (jsonObj.get("schedule") != null && !jsonObj.get("schedule").isJsonNull()) {
        ExperimentSchedule.validateJsonElement(jsonObj.get("schedule"));
      }
      // validate the optional field `segment`
      if (jsonObj.get("segment") != null && !jsonObj.get("segment").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("segment"));
      }
      // validate the required field `status`
      ExperimentStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `statusReason`
      if (jsonObj.get("statusReason") != null && !jsonObj.get("statusReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("statusReason"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `treatments`
      if (jsonObj.get("treatments") != null && !jsonObj.get("treatments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("treatments"));
      }
      // validate the required field `type`
      ExperimentType.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Experiment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Experiment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Experiment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Experiment.class));

       return (TypeAdapter<T>) new TypeAdapter<Experiment>() {
           @Override
           public void write(JsonWriter out, Experiment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Experiment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Experiment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Experiment
   * @throws IOException if the JSON string is invalid with respect to Experiment
   */
  public static Experiment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Experiment.class);
  }

  /**
   * Convert an instance of Experiment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

