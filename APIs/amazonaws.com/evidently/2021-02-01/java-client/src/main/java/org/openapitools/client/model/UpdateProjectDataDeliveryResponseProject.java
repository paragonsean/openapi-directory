/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ProjectAppConfigResource;
import org.openapitools.client.model.ProjectDataDelivery;
import org.openapitools.client.model.ProjectStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateProjectDataDeliveryResponseProject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateProjectDataDeliveryResponseProject {
  public static final String SERIALIZED_NAME_ACTIVE_EXPERIMENT_COUNT = "activeExperimentCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_EXPERIMENT_COUNT)
  private Integer activeExperimentCount;

  public static final String SERIALIZED_NAME_ACTIVE_LAUNCH_COUNT = "activeLaunchCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_LAUNCH_COUNT)
  private Integer activeLaunchCount;

  public static final String SERIALIZED_NAME_APP_CONFIG_RESOURCE = "appConfigResource";
  @SerializedName(SERIALIZED_NAME_APP_CONFIG_RESOURCE)
  private ProjectAppConfigResource appConfigResource;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DATA_DELIVERY = "dataDelivery";
  @SerializedName(SERIALIZED_NAME_DATA_DELIVERY)
  private ProjectDataDelivery dataDelivery;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPERIMENT_COUNT = "experimentCount";
  @SerializedName(SERIALIZED_NAME_EXPERIMENT_COUNT)
  private Integer experimentCount;

  public static final String SERIALIZED_NAME_FEATURE_COUNT = "featureCount";
  @SerializedName(SERIALIZED_NAME_FEATURE_COUNT)
  private Integer featureCount;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_LAUNCH_COUNT = "launchCount";
  @SerializedName(SERIALIZED_NAME_LAUNCH_COUNT)
  private Integer launchCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ProjectStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public UpdateProjectDataDeliveryResponseProject() {
  }

  public UpdateProjectDataDeliveryResponseProject activeExperimentCount(Integer activeExperimentCount) {
    this.activeExperimentCount = activeExperimentCount;
    return this;
  }

  /**
   * Get activeExperimentCount
   * @return activeExperimentCount
   */
  @javax.annotation.Nullable
  public Integer getActiveExperimentCount() {
    return activeExperimentCount;
  }

  public void setActiveExperimentCount(Integer activeExperimentCount) {
    this.activeExperimentCount = activeExperimentCount;
  }


  public UpdateProjectDataDeliveryResponseProject activeLaunchCount(Integer activeLaunchCount) {
    this.activeLaunchCount = activeLaunchCount;
    return this;
  }

  /**
   * Get activeLaunchCount
   * @return activeLaunchCount
   */
  @javax.annotation.Nullable
  public Integer getActiveLaunchCount() {
    return activeLaunchCount;
  }

  public void setActiveLaunchCount(Integer activeLaunchCount) {
    this.activeLaunchCount = activeLaunchCount;
  }


  public UpdateProjectDataDeliveryResponseProject appConfigResource(ProjectAppConfigResource appConfigResource) {
    this.appConfigResource = appConfigResource;
    return this;
  }

  /**
   * Get appConfigResource
   * @return appConfigResource
   */
  @javax.annotation.Nullable
  public ProjectAppConfigResource getAppConfigResource() {
    return appConfigResource;
  }

  public void setAppConfigResource(ProjectAppConfigResource appConfigResource) {
    this.appConfigResource = appConfigResource;
  }


  public UpdateProjectDataDeliveryResponseProject arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public UpdateProjectDataDeliveryResponseProject createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public UpdateProjectDataDeliveryResponseProject dataDelivery(ProjectDataDelivery dataDelivery) {
    this.dataDelivery = dataDelivery;
    return this;
  }

  /**
   * Get dataDelivery
   * @return dataDelivery
   */
  @javax.annotation.Nullable
  public ProjectDataDelivery getDataDelivery() {
    return dataDelivery;
  }

  public void setDataDelivery(ProjectDataDelivery dataDelivery) {
    this.dataDelivery = dataDelivery;
  }


  public UpdateProjectDataDeliveryResponseProject description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateProjectDataDeliveryResponseProject experimentCount(Integer experimentCount) {
    this.experimentCount = experimentCount;
    return this;
  }

  /**
   * Get experimentCount
   * @return experimentCount
   */
  @javax.annotation.Nullable
  public Integer getExperimentCount() {
    return experimentCount;
  }

  public void setExperimentCount(Integer experimentCount) {
    this.experimentCount = experimentCount;
  }


  public UpdateProjectDataDeliveryResponseProject featureCount(Integer featureCount) {
    this.featureCount = featureCount;
    return this;
  }

  /**
   * Get featureCount
   * @return featureCount
   */
  @javax.annotation.Nullable
  public Integer getFeatureCount() {
    return featureCount;
  }

  public void setFeatureCount(Integer featureCount) {
    this.featureCount = featureCount;
  }


  public UpdateProjectDataDeliveryResponseProject lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public UpdateProjectDataDeliveryResponseProject launchCount(Integer launchCount) {
    this.launchCount = launchCount;
    return this;
  }

  /**
   * Get launchCount
   * @return launchCount
   */
  @javax.annotation.Nullable
  public Integer getLaunchCount() {
    return launchCount;
  }

  public void setLaunchCount(Integer launchCount) {
    this.launchCount = launchCount;
  }


  public UpdateProjectDataDeliveryResponseProject name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateProjectDataDeliveryResponseProject status(ProjectStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public ProjectStatus getStatus() {
    return status;
  }

  public void setStatus(ProjectStatus status) {
    this.status = status;
  }


  public UpdateProjectDataDeliveryResponseProject tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateProjectDataDeliveryResponseProject updateProjectDataDeliveryResponseProject = (UpdateProjectDataDeliveryResponseProject) o;
    return Objects.equals(this.activeExperimentCount, updateProjectDataDeliveryResponseProject.activeExperimentCount) &&
        Objects.equals(this.activeLaunchCount, updateProjectDataDeliveryResponseProject.activeLaunchCount) &&
        Objects.equals(this.appConfigResource, updateProjectDataDeliveryResponseProject.appConfigResource) &&
        Objects.equals(this.arn, updateProjectDataDeliveryResponseProject.arn) &&
        Objects.equals(this.createdTime, updateProjectDataDeliveryResponseProject.createdTime) &&
        Objects.equals(this.dataDelivery, updateProjectDataDeliveryResponseProject.dataDelivery) &&
        Objects.equals(this.description, updateProjectDataDeliveryResponseProject.description) &&
        Objects.equals(this.experimentCount, updateProjectDataDeliveryResponseProject.experimentCount) &&
        Objects.equals(this.featureCount, updateProjectDataDeliveryResponseProject.featureCount) &&
        Objects.equals(this.lastUpdatedTime, updateProjectDataDeliveryResponseProject.lastUpdatedTime) &&
        Objects.equals(this.launchCount, updateProjectDataDeliveryResponseProject.launchCount) &&
        Objects.equals(this.name, updateProjectDataDeliveryResponseProject.name) &&
        Objects.equals(this.status, updateProjectDataDeliveryResponseProject.status) &&
        Objects.equals(this.tags, updateProjectDataDeliveryResponseProject.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeExperimentCount, activeLaunchCount, appConfigResource, arn, createdTime, dataDelivery, description, experimentCount, featureCount, lastUpdatedTime, launchCount, name, status, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateProjectDataDeliveryResponseProject {\n");
    sb.append("    activeExperimentCount: ").append(toIndentedString(activeExperimentCount)).append("\n");
    sb.append("    activeLaunchCount: ").append(toIndentedString(activeLaunchCount)).append("\n");
    sb.append("    appConfigResource: ").append(toIndentedString(appConfigResource)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    dataDelivery: ").append(toIndentedString(dataDelivery)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    experimentCount: ").append(toIndentedString(experimentCount)).append("\n");
    sb.append("    featureCount: ").append(toIndentedString(featureCount)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    launchCount: ").append(toIndentedString(launchCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeExperimentCount");
    openapiFields.add("activeLaunchCount");
    openapiFields.add("appConfigResource");
    openapiFields.add("arn");
    openapiFields.add("createdTime");
    openapiFields.add("dataDelivery");
    openapiFields.add("description");
    openapiFields.add("experimentCount");
    openapiFields.add("featureCount");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("launchCount");
    openapiFields.add("name");
    openapiFields.add("status");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("lastUpdatedTime");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateProjectDataDeliveryResponseProject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateProjectDataDeliveryResponseProject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateProjectDataDeliveryResponseProject is not found in the empty JSON string", UpdateProjectDataDeliveryResponseProject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateProjectDataDeliveryResponseProject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateProjectDataDeliveryResponseProject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateProjectDataDeliveryResponseProject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activeExperimentCount`
      if (jsonObj.get("activeExperimentCount") != null && !jsonObj.get("activeExperimentCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("activeExperimentCount"));
      }
      // validate the optional field `activeLaunchCount`
      if (jsonObj.get("activeLaunchCount") != null && !jsonObj.get("activeLaunchCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("activeLaunchCount"));
      }
      // validate the optional field `appConfigResource`
      if (jsonObj.get("appConfigResource") != null && !jsonObj.get("appConfigResource").isJsonNull()) {
        ProjectAppConfigResource.validateJsonElement(jsonObj.get("appConfigResource"));
      }
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `createdTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdTime"));
      // validate the optional field `dataDelivery`
      if (jsonObj.get("dataDelivery") != null && !jsonObj.get("dataDelivery").isJsonNull()) {
        ProjectDataDelivery.validateJsonElement(jsonObj.get("dataDelivery"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `experimentCount`
      if (jsonObj.get("experimentCount") != null && !jsonObj.get("experimentCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("experimentCount"));
      }
      // validate the optional field `featureCount`
      if (jsonObj.get("featureCount") != null && !jsonObj.get("featureCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("featureCount"));
      }
      // validate the required field `lastUpdatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      // validate the optional field `launchCount`
      if (jsonObj.get("launchCount") != null && !jsonObj.get("launchCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("launchCount"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the required field `status`
      ProjectStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateProjectDataDeliveryResponseProject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateProjectDataDeliveryResponseProject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateProjectDataDeliveryResponseProject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateProjectDataDeliveryResponseProject.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateProjectDataDeliveryResponseProject>() {
           @Override
           public void write(JsonWriter out, UpdateProjectDataDeliveryResponseProject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateProjectDataDeliveryResponseProject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateProjectDataDeliveryResponseProject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateProjectDataDeliveryResponseProject
   * @throws IOException if the JSON string is invalid with respect to UpdateProjectDataDeliveryResponseProject
   */
  public static UpdateProjectDataDeliveryResponseProject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateProjectDataDeliveryResponseProject.class);
  }

  /**
   * Convert an instance of UpdateProjectDataDeliveryResponseProject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

