/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetExperimentResultsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetExperimentResultsResponse {
  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_REPORTS = "reports";
  @SerializedName(SERIALIZED_NAME_REPORTS)
  private List reports;

  public static final String SERIALIZED_NAME_RESULTS_DATA = "resultsData";
  @SerializedName(SERIALIZED_NAME_RESULTS_DATA)
  private List resultsData;

  public static final String SERIALIZED_NAME_TIMESTAMPS = "timestamps";
  @SerializedName(SERIALIZED_NAME_TIMESTAMPS)
  private List timestamps;

  public GetExperimentResultsResponse() {
  }

  public GetExperimentResultsResponse details(String details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public GetExperimentResultsResponse reports(List reports) {
    this.reports = reports;
    return this;
  }

  /**
   * Get reports
   * @return reports
   */
  @javax.annotation.Nullable
  public List getReports() {
    return reports;
  }

  public void setReports(List reports) {
    this.reports = reports;
  }


  public GetExperimentResultsResponse resultsData(List resultsData) {
    this.resultsData = resultsData;
    return this;
  }

  /**
   * Get resultsData
   * @return resultsData
   */
  @javax.annotation.Nullable
  public List getResultsData() {
    return resultsData;
  }

  public void setResultsData(List resultsData) {
    this.resultsData = resultsData;
  }


  public GetExperimentResultsResponse timestamps(List timestamps) {
    this.timestamps = timestamps;
    return this;
  }

  /**
   * Get timestamps
   * @return timestamps
   */
  @javax.annotation.Nullable
  public List getTimestamps() {
    return timestamps;
  }

  public void setTimestamps(List timestamps) {
    this.timestamps = timestamps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetExperimentResultsResponse getExperimentResultsResponse = (GetExperimentResultsResponse) o;
    return Objects.equals(this.details, getExperimentResultsResponse.details) &&
        Objects.equals(this.reports, getExperimentResultsResponse.reports) &&
        Objects.equals(this.resultsData, getExperimentResultsResponse.resultsData) &&
        Objects.equals(this.timestamps, getExperimentResultsResponse.timestamps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(details, reports, resultsData, timestamps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetExperimentResultsResponse {\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    reports: ").append(toIndentedString(reports)).append("\n");
    sb.append("    resultsData: ").append(toIndentedString(resultsData)).append("\n");
    sb.append("    timestamps: ").append(toIndentedString(timestamps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("details");
    openapiFields.add("reports");
    openapiFields.add("resultsData");
    openapiFields.add("timestamps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetExperimentResultsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetExperimentResultsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetExperimentResultsResponse is not found in the empty JSON string", GetExperimentResultsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetExperimentResultsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetExperimentResultsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("details"));
      }
      // validate the optional field `reports`
      if (jsonObj.get("reports") != null && !jsonObj.get("reports").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("reports"));
      }
      // validate the optional field `resultsData`
      if (jsonObj.get("resultsData") != null && !jsonObj.get("resultsData").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("resultsData"));
      }
      // validate the optional field `timestamps`
      if (jsonObj.get("timestamps") != null && !jsonObj.get("timestamps").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("timestamps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetExperimentResultsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetExperimentResultsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetExperimentResultsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetExperimentResultsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetExperimentResultsResponse>() {
           @Override
           public void write(JsonWriter out, GetExperimentResultsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetExperimentResultsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetExperimentResultsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetExperimentResultsResponse
   * @throws IOException if the JSON string is invalid with respect to GetExperimentResultsResponse
   */
  public static GetExperimentResultsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetExperimentResultsResponse.class);
  }

  /**
   * Convert an instance of GetExperimentResultsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

