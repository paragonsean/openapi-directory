/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FeatureEvaluationStrategy;
import org.openapitools.client.model.FeatureStatus;
import org.openapitools.client.model.VariationValueType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateFeatureResponseFeature
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateFeatureResponseFeature {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DEFAULT_VARIATION = "defaultVariation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VARIATION)
  private String defaultVariation;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITY_OVERRIDES = "entityOverrides";
  @SerializedName(SERIALIZED_NAME_ENTITY_OVERRIDES)
  private Map entityOverrides;

  public static final String SERIALIZED_NAME_EVALUATION_RULES = "evaluationRules";
  @SerializedName(SERIALIZED_NAME_EVALUATION_RULES)
  private List evaluationRules;

  public static final String SERIALIZED_NAME_EVALUATION_STRATEGY = "evaluationStrategy";
  @SerializedName(SERIALIZED_NAME_EVALUATION_STRATEGY)
  private FeatureEvaluationStrategy evaluationStrategy;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "lastUpdatedTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private OffsetDateTime lastUpdatedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private FeatureStatus status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_VALUE_TYPE = "valueType";
  @SerializedName(SERIALIZED_NAME_VALUE_TYPE)
  private VariationValueType valueType;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List variations;

  public CreateFeatureResponseFeature() {
  }

  public CreateFeatureResponseFeature arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nonnull
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public CreateFeatureResponseFeature createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public CreateFeatureResponseFeature defaultVariation(String defaultVariation) {
    this.defaultVariation = defaultVariation;
    return this;
  }

  /**
   * Get defaultVariation
   * @return defaultVariation
   */
  @javax.annotation.Nullable
  public String getDefaultVariation() {
    return defaultVariation;
  }

  public void setDefaultVariation(String defaultVariation) {
    this.defaultVariation = defaultVariation;
  }


  public CreateFeatureResponseFeature description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateFeatureResponseFeature entityOverrides(Map entityOverrides) {
    this.entityOverrides = entityOverrides;
    return this;
  }

  /**
   * Get entityOverrides
   * @return entityOverrides
   */
  @javax.annotation.Nullable
  public Map getEntityOverrides() {
    return entityOverrides;
  }

  public void setEntityOverrides(Map entityOverrides) {
    this.entityOverrides = entityOverrides;
  }


  public CreateFeatureResponseFeature evaluationRules(List evaluationRules) {
    this.evaluationRules = evaluationRules;
    return this;
  }

  /**
   * Get evaluationRules
   * @return evaluationRules
   */
  @javax.annotation.Nullable
  public List getEvaluationRules() {
    return evaluationRules;
  }

  public void setEvaluationRules(List evaluationRules) {
    this.evaluationRules = evaluationRules;
  }


  public CreateFeatureResponseFeature evaluationStrategy(FeatureEvaluationStrategy evaluationStrategy) {
    this.evaluationStrategy = evaluationStrategy;
    return this;
  }

  /**
   * Get evaluationStrategy
   * @return evaluationStrategy
   */
  @javax.annotation.Nonnull
  public FeatureEvaluationStrategy getEvaluationStrategy() {
    return evaluationStrategy;
  }

  public void setEvaluationStrategy(FeatureEvaluationStrategy evaluationStrategy) {
    this.evaluationStrategy = evaluationStrategy;
  }


  public CreateFeatureResponseFeature lastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * Get lastUpdatedTime
   * @return lastUpdatedTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(OffsetDateTime lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public CreateFeatureResponseFeature name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateFeatureResponseFeature project(String project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public CreateFeatureResponseFeature status(FeatureStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nonnull
  public FeatureStatus getStatus() {
    return status;
  }

  public void setStatus(FeatureStatus status) {
    this.status = status;
  }


  public CreateFeatureResponseFeature tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public CreateFeatureResponseFeature valueType(VariationValueType valueType) {
    this.valueType = valueType;
    return this;
  }

  /**
   * Get valueType
   * @return valueType
   */
  @javax.annotation.Nonnull
  public VariationValueType getValueType() {
    return valueType;
  }

  public void setValueType(VariationValueType valueType) {
    this.valueType = valueType;
  }


  public CreateFeatureResponseFeature variations(List variations) {
    this.variations = variations;
    return this;
  }

  /**
   * Get variations
   * @return variations
   */
  @javax.annotation.Nonnull
  public List getVariations() {
    return variations;
  }

  public void setVariations(List variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFeatureResponseFeature createFeatureResponseFeature = (CreateFeatureResponseFeature) o;
    return Objects.equals(this.arn, createFeatureResponseFeature.arn) &&
        Objects.equals(this.createdTime, createFeatureResponseFeature.createdTime) &&
        Objects.equals(this.defaultVariation, createFeatureResponseFeature.defaultVariation) &&
        Objects.equals(this.description, createFeatureResponseFeature.description) &&
        Objects.equals(this.entityOverrides, createFeatureResponseFeature.entityOverrides) &&
        Objects.equals(this.evaluationRules, createFeatureResponseFeature.evaluationRules) &&
        Objects.equals(this.evaluationStrategy, createFeatureResponseFeature.evaluationStrategy) &&
        Objects.equals(this.lastUpdatedTime, createFeatureResponseFeature.lastUpdatedTime) &&
        Objects.equals(this.name, createFeatureResponseFeature.name) &&
        Objects.equals(this.project, createFeatureResponseFeature.project) &&
        Objects.equals(this.status, createFeatureResponseFeature.status) &&
        Objects.equals(this.tags, createFeatureResponseFeature.tags) &&
        Objects.equals(this.valueType, createFeatureResponseFeature.valueType) &&
        Objects.equals(this.variations, createFeatureResponseFeature.variations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, createdTime, defaultVariation, description, entityOverrides, evaluationRules, evaluationStrategy, lastUpdatedTime, name, project, status, tags, valueType, variations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFeatureResponseFeature {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    defaultVariation: ").append(toIndentedString(defaultVariation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityOverrides: ").append(toIndentedString(entityOverrides)).append("\n");
    sb.append("    evaluationRules: ").append(toIndentedString(evaluationRules)).append("\n");
    sb.append("    evaluationStrategy: ").append(toIndentedString(evaluationStrategy)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    valueType: ").append(toIndentedString(valueType)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("createdTime");
    openapiFields.add("defaultVariation");
    openapiFields.add("description");
    openapiFields.add("entityOverrides");
    openapiFields.add("evaluationRules");
    openapiFields.add("evaluationStrategy");
    openapiFields.add("lastUpdatedTime");
    openapiFields.add("name");
    openapiFields.add("project");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("valueType");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("arn");
    openapiRequiredFields.add("createdTime");
    openapiRequiredFields.add("evaluationStrategy");
    openapiRequiredFields.add("lastUpdatedTime");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("valueType");
    openapiRequiredFields.add("variations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateFeatureResponseFeature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateFeatureResponseFeature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateFeatureResponseFeature is not found in the empty JSON string", CreateFeatureResponseFeature.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateFeatureResponseFeature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateFeatureResponseFeature` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateFeatureResponseFeature.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `arn`
      String.validateJsonElement(jsonObj.get("arn"));
      // validate the required field `createdTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("createdTime"));
      // validate the optional field `defaultVariation`
      if (jsonObj.get("defaultVariation") != null && !jsonObj.get("defaultVariation").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("defaultVariation"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `entityOverrides`
      if (jsonObj.get("entityOverrides") != null && !jsonObj.get("entityOverrides").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("entityOverrides"));
      }
      // validate the optional field `evaluationRules`
      if (jsonObj.get("evaluationRules") != null && !jsonObj.get("evaluationRules").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("evaluationRules"));
      }
      // validate the required field `evaluationStrategy`
      FeatureEvaluationStrategy.validateJsonElement(jsonObj.get("evaluationStrategy"));
      // validate the required field `lastUpdatedTime`
      OffsetDateTime.validateJsonElement(jsonObj.get("lastUpdatedTime"));
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `project`
      if (jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("project"));
      }
      // validate the required field `status`
      FeatureStatus.validateJsonElement(jsonObj.get("status"));
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the required field `valueType`
      VariationValueType.validateJsonElement(jsonObj.get("valueType"));
      // validate the required field `variations`
      List.validateJsonElement(jsonObj.get("variations"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateFeatureResponseFeature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateFeatureResponseFeature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateFeatureResponseFeature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateFeatureResponseFeature.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateFeatureResponseFeature>() {
           @Override
           public void write(JsonWriter out, CreateFeatureResponseFeature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateFeatureResponseFeature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateFeatureResponseFeature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateFeatureResponseFeature
   * @throws IOException if the JSON string is invalid with respect to CreateFeatureResponseFeature
   */
  public static CreateFeatureResponseFeature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateFeatureResponseFeature.class);
  }

  /**
   * Convert an instance of CreateFeatureResponseFeature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

