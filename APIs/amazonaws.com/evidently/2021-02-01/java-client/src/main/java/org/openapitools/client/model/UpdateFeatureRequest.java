/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.VariationConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFeatureRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:01:50.620104-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFeatureRequest {
  public static final String SERIALIZED_NAME_ADD_OR_UPDATE_VARIATIONS = "addOrUpdateVariations";
  @SerializedName(SERIALIZED_NAME_ADD_OR_UPDATE_VARIATIONS)
  private List<VariationConfig> addOrUpdateVariations = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_VARIATION = "defaultVariation";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VARIATION)
  private String defaultVariation;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENTITY_OVERRIDES = "entityOverrides";
  @SerializedName(SERIALIZED_NAME_ENTITY_OVERRIDES)
  private Map<String, String> entityOverrides = new HashMap<>();

  /**
   * Specify &lt;code&gt;ALL_RULES&lt;/code&gt; to activate the traffic allocation specified by any ongoing launches or experiments. Specify &lt;code&gt;DEFAULT_VARIATION&lt;/code&gt; to serve the default variation to all users instead.
   */
  @JsonAdapter(EvaluationStrategyEnum.Adapter.class)
  public enum EvaluationStrategyEnum {
    ALL_RULES("ALL_RULES"),
    
    DEFAULT_VARIATION("DEFAULT_VARIATION");

    private String value;

    EvaluationStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EvaluationStrategyEnum fromValue(String value) {
      for (EvaluationStrategyEnum b : EvaluationStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EvaluationStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EvaluationStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EvaluationStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EvaluationStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EvaluationStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVALUATION_STRATEGY = "evaluationStrategy";
  @SerializedName(SERIALIZED_NAME_EVALUATION_STRATEGY)
  private EvaluationStrategyEnum evaluationStrategy;

  public static final String SERIALIZED_NAME_REMOVE_VARIATIONS = "removeVariations";
  @SerializedName(SERIALIZED_NAME_REMOVE_VARIATIONS)
  private List<String> removeVariations = new ArrayList<>();

  public UpdateFeatureRequest() {
  }

  public UpdateFeatureRequest addOrUpdateVariations(List<VariationConfig> addOrUpdateVariations) {
    this.addOrUpdateVariations = addOrUpdateVariations;
    return this;
  }

  public UpdateFeatureRequest addAddOrUpdateVariationsItem(VariationConfig addOrUpdateVariationsItem) {
    if (this.addOrUpdateVariations == null) {
      this.addOrUpdateVariations = new ArrayList<>();
    }
    this.addOrUpdateVariations.add(addOrUpdateVariationsItem);
    return this;
  }

  /**
   * To update variation configurations for this feature, or add new ones, specify this structure. In this array, include any variations that you want to add or update. If the array includes a variation name that already exists for this feature, it is updated. If it includes a new variation name, it is added as a new variation.
   * @return addOrUpdateVariations
   */
  @javax.annotation.Nullable
  public List<VariationConfig> getAddOrUpdateVariations() {
    return addOrUpdateVariations;
  }

  public void setAddOrUpdateVariations(List<VariationConfig> addOrUpdateVariations) {
    this.addOrUpdateVariations = addOrUpdateVariations;
  }


  public UpdateFeatureRequest defaultVariation(String defaultVariation) {
    this.defaultVariation = defaultVariation;
    return this;
  }

  /**
   * The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature.
   * @return defaultVariation
   */
  @javax.annotation.Nullable
  public String getDefaultVariation() {
    return defaultVariation;
  }

  public void setDefaultVariation(String defaultVariation) {
    this.defaultVariation = defaultVariation;
  }


  public UpdateFeatureRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the feature.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateFeatureRequest entityOverrides(Map<String, String> entityOverrides) {
    this.entityOverrides = entityOverrides;
    return this;
  }

  public UpdateFeatureRequest putEntityOverridesItem(String key, String entityOverridesItem) {
    if (this.entityOverrides == null) {
      this.entityOverrides = new HashMap<>();
    }
    this.entityOverrides.put(key, entityOverridesItem);
    return this;
  }

  /**
   * &lt;p&gt;Specified users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.&lt;/p&gt; &lt;p&gt;This parameter is limited to 2500 overrides or a total of 40KB. The 40KB limit includes an overhead of 6 bytes per override.&lt;/p&gt;
   * @return entityOverrides
   */
  @javax.annotation.Nullable
  public Map<String, String> getEntityOverrides() {
    return entityOverrides;
  }

  public void setEntityOverrides(Map<String, String> entityOverrides) {
    this.entityOverrides = entityOverrides;
  }


  public UpdateFeatureRequest evaluationStrategy(EvaluationStrategyEnum evaluationStrategy) {
    this.evaluationStrategy = evaluationStrategy;
    return this;
  }

  /**
   * Specify &lt;code&gt;ALL_RULES&lt;/code&gt; to activate the traffic allocation specified by any ongoing launches or experiments. Specify &lt;code&gt;DEFAULT_VARIATION&lt;/code&gt; to serve the default variation to all users instead.
   * @return evaluationStrategy
   */
  @javax.annotation.Nullable
  public EvaluationStrategyEnum getEvaluationStrategy() {
    return evaluationStrategy;
  }

  public void setEvaluationStrategy(EvaluationStrategyEnum evaluationStrategy) {
    this.evaluationStrategy = evaluationStrategy;
  }


  public UpdateFeatureRequest removeVariations(List<String> removeVariations) {
    this.removeVariations = removeVariations;
    return this;
  }

  public UpdateFeatureRequest addRemoveVariationsItem(String removeVariationsItem) {
    if (this.removeVariations == null) {
      this.removeVariations = new ArrayList<>();
    }
    this.removeVariations.add(removeVariationsItem);
    return this;
  }

  /**
   * &lt;p&gt;Removes a variation from the feature. If the variation you specify doesn&#39;t exist, then this makes no change and does not report an error.&lt;/p&gt; &lt;p&gt;This operation fails if you try to remove a variation that is part of an ongoing launch or experiment.&lt;/p&gt;
   * @return removeVariations
   */
  @javax.annotation.Nullable
  public List<String> getRemoveVariations() {
    return removeVariations;
  }

  public void setRemoveVariations(List<String> removeVariations) {
    this.removeVariations = removeVariations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFeatureRequest updateFeatureRequest = (UpdateFeatureRequest) o;
    return Objects.equals(this.addOrUpdateVariations, updateFeatureRequest.addOrUpdateVariations) &&
        Objects.equals(this.defaultVariation, updateFeatureRequest.defaultVariation) &&
        Objects.equals(this.description, updateFeatureRequest.description) &&
        Objects.equals(this.entityOverrides, updateFeatureRequest.entityOverrides) &&
        Objects.equals(this.evaluationStrategy, updateFeatureRequest.evaluationStrategy) &&
        Objects.equals(this.removeVariations, updateFeatureRequest.removeVariations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addOrUpdateVariations, defaultVariation, description, entityOverrides, evaluationStrategy, removeVariations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFeatureRequest {\n");
    sb.append("    addOrUpdateVariations: ").append(toIndentedString(addOrUpdateVariations)).append("\n");
    sb.append("    defaultVariation: ").append(toIndentedString(defaultVariation)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    entityOverrides: ").append(toIndentedString(entityOverrides)).append("\n");
    sb.append("    evaluationStrategy: ").append(toIndentedString(evaluationStrategy)).append("\n");
    sb.append("    removeVariations: ").append(toIndentedString(removeVariations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addOrUpdateVariations");
    openapiFields.add("defaultVariation");
    openapiFields.add("description");
    openapiFields.add("entityOverrides");
    openapiFields.add("evaluationStrategy");
    openapiFields.add("removeVariations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFeatureRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFeatureRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFeatureRequest is not found in the empty JSON string", UpdateFeatureRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFeatureRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFeatureRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("addOrUpdateVariations") != null && !jsonObj.get("addOrUpdateVariations").isJsonNull()) {
        JsonArray jsonArrayaddOrUpdateVariations = jsonObj.getAsJsonArray("addOrUpdateVariations");
        if (jsonArrayaddOrUpdateVariations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("addOrUpdateVariations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `addOrUpdateVariations` to be an array in the JSON string but got `%s`", jsonObj.get("addOrUpdateVariations").toString()));
          }

          // validate the optional field `addOrUpdateVariations` (array)
          for (int i = 0; i < jsonArrayaddOrUpdateVariations.size(); i++) {
            VariationConfig.validateJsonElement(jsonArrayaddOrUpdateVariations.get(i));
          };
        }
      }
      if ((jsonObj.get("defaultVariation") != null && !jsonObj.get("defaultVariation").isJsonNull()) && !jsonObj.get("defaultVariation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultVariation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultVariation").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("evaluationStrategy") != null && !jsonObj.get("evaluationStrategy").isJsonNull()) && !jsonObj.get("evaluationStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluationStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluationStrategy").toString()));
      }
      // validate the optional field `evaluationStrategy`
      if (jsonObj.get("evaluationStrategy") != null && !jsonObj.get("evaluationStrategy").isJsonNull()) {
        EvaluationStrategyEnum.validateJsonElement(jsonObj.get("evaluationStrategy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("removeVariations") != null && !jsonObj.get("removeVariations").isJsonNull() && !jsonObj.get("removeVariations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `removeVariations` to be an array in the JSON string but got `%s`", jsonObj.get("removeVariations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFeatureRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFeatureRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFeatureRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFeatureRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFeatureRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFeatureRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFeatureRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFeatureRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFeatureRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFeatureRequest
   */
  public static UpdateFeatureRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFeatureRequest.class);
  }

  /**
   * Convert an instance of UpdateFeatureRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

