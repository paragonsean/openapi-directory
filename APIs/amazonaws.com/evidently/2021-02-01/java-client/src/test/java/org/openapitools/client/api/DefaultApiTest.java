/*
 * Amazon CloudWatch Evidently
 * <p>You can use Amazon CloudWatch Evidently to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to your users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.</p> <p>You can also conduct A/B experiments to make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it using statistical methods. It also provides clear recommendations about which variations perform better. You can test both user-facing features and backend features.</p>
 *
 * The version of the OpenAPI document: 2021-02-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchEvaluateFeatureRequest;
import org.openapitools.client.model.BatchEvaluateFeatureResponse;
import org.openapitools.client.model.CreateExperimentRequest;
import org.openapitools.client.model.CreateExperimentResponse;
import org.openapitools.client.model.CreateFeatureRequest;
import org.openapitools.client.model.CreateFeatureResponse;
import org.openapitools.client.model.CreateLaunchRequest;
import org.openapitools.client.model.CreateLaunchResponse;
import org.openapitools.client.model.CreateProjectRequest;
import org.openapitools.client.model.CreateProjectResponse;
import org.openapitools.client.model.CreateSegmentRequest;
import org.openapitools.client.model.CreateSegmentResponse;
import org.openapitools.client.model.EvaluateFeatureRequest;
import org.openapitools.client.model.EvaluateFeatureResponse;
import org.openapitools.client.model.GetExperimentResponse;
import org.openapitools.client.model.GetExperimentResultsRequest;
import org.openapitools.client.model.GetExperimentResultsResponse;
import org.openapitools.client.model.GetFeatureResponse;
import org.openapitools.client.model.GetLaunchResponse;
import org.openapitools.client.model.GetProjectResponse;
import org.openapitools.client.model.GetSegmentResponse;
import org.openapitools.client.model.ListExperimentsResponse;
import org.openapitools.client.model.ListFeaturesResponse;
import org.openapitools.client.model.ListLaunchesResponse;
import org.openapitools.client.model.ListProjectsResponse;
import org.openapitools.client.model.ListSegmentReferencesResponse;
import org.openapitools.client.model.ListSegmentsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutProjectEventsRequest;
import org.openapitools.client.model.PutProjectEventsResponse;
import org.openapitools.client.model.StartExperimentRequest;
import org.openapitools.client.model.StartExperimentResponse;
import org.openapitools.client.model.StartLaunchResponse;
import org.openapitools.client.model.StopExperimentRequest;
import org.openapitools.client.model.StopExperimentResponse;
import org.openapitools.client.model.StopLaunchRequest;
import org.openapitools.client.model.StopLaunchResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TestSegmentPatternRequest;
import org.openapitools.client.model.TestSegmentPatternResponse;
import org.openapitools.client.model.UpdateExperimentRequest;
import org.openapitools.client.model.UpdateExperimentResponse;
import org.openapitools.client.model.UpdateFeatureRequest;
import org.openapitools.client.model.UpdateFeatureResponse;
import org.openapitools.client.model.UpdateLaunchRequest;
import org.openapitools.client.model.UpdateLaunchResponse;
import org.openapitools.client.model.UpdateProjectDataDeliveryRequest;
import org.openapitools.client.model.UpdateProjectDataDeliveryResponse;
import org.openapitools.client.model.UpdateProjectRequest;
import org.openapitools.client.model.UpdateProjectResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * &lt;p&gt;This operation assigns feature variation to user sessions. For each user session, you pass in an &lt;code&gt;entityID&lt;/code&gt; that represents the user. Evidently then checks the evaluation rules and assigns the variation.&lt;/p&gt; &lt;p&gt;The first rules that are evaluated are the override rules. If the user&#39;s &lt;code&gt;entityID&lt;/code&gt; matches an override rule, the user is served the variation specified by that rule.&lt;/p&gt; &lt;p&gt;Next, if there is a launch of the feature, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.&lt;/p&gt; &lt;p&gt;If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment. If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. &lt;/p&gt; &lt;p&gt;If the user is not assigned to a launch or experiment, they are served the default variation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchEvaluateFeatureTest() throws ApiException {
        String project = null;
        BatchEvaluateFeatureRequest batchEvaluateFeatureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchEvaluateFeatureResponse response = api.batchEvaluateFeature(project, batchEvaluateFeatureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Evidently &lt;i&gt;experiment&lt;/i&gt;. Before you create an experiment, you must create the feature to use for the experiment.&lt;/p&gt; &lt;p&gt;An experiment helps you make feature design decisions based on evidence and data. An experiment can test as many as five variations at once. Evidently collects experiment data and analyzes it by statistical methods, and provides clear recommendations about which variations perform better.&lt;/p&gt; &lt;p&gt;You can optionally specify a &lt;code&gt;segment&lt;/code&gt; to have the experiment consider only certain audience types in the experiment, such as using only user sessions from a certain location or who use a certain internet browser.&lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update an existing experiment. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateExperiment.html\&quot;&gt;UpdateExperiment&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createExperimentTest() throws ApiException {
        String project = null;
        CreateExperimentRequest createExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateExperimentResponse response = api.createExperiment(project, createExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an Evidently &lt;i&gt;feature&lt;/i&gt; that you want to launch or test. You can define up to five variations of a feature, and use these variations in your launches and experiments. A feature must be created in a project. For information about creating a project, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html\&quot;&gt;CreateProject&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update an existing feature. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateFeature.html\&quot;&gt;UpdateFeature&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFeatureTest() throws ApiException {
        String project = null;
        CreateFeatureRequest createFeatureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateFeatureResponse response = api.createFeature(project, createFeatureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a &lt;i&gt;launch&lt;/i&gt; of a given feature. Before you create a launch, you must create the feature to use for the launch.&lt;/p&gt; &lt;p&gt;You can use a launch to safely validate new features by serving them to a specified percentage of your users while you roll out the feature. You can monitor the performance of the new feature to help you decide when to ramp up traffic to more users. This helps you reduce risk and identify unintended consequences before you fully launch the feature.&lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update an existing launch. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateLaunch.html\&quot;&gt;UpdateLaunch&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLaunchTest() throws ApiException {
        String project = null;
        CreateLaunchRequest createLaunchRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLaunchResponse response = api.createLaunch(project, createLaunchRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a project, which is the logical object in Evidently that can contain features, launches, and experiments. Use projects to group similar features together.&lt;/p&gt; &lt;p&gt;To update an existing project, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProject.html\&quot;&gt;UpdateProject&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createProjectTest() throws ApiException {
        CreateProjectRequest createProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateProjectResponse response = api.createProject(createProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this operation to define a &lt;i&gt;segment&lt;/i&gt; of your audience. A segment is a portion of your audience that share one or more characteristics. Examples could be Chrome browser users, users in Europe, or Firefox browser users in Europe who also fit other criteria that your application collects, such as age.&lt;/p&gt; &lt;p&gt;Using a segment in an experiment limits that experiment to evaluate only the users who match the segment criteria. Using one or more segments in a launch allows you to define different traffic splits for the different audience segments.&lt;/p&gt; &lt;p&gt;For more information about segment pattern syntax, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html#CloudWatch-Evidently-segments-syntax.html\&quot;&gt; Segment rule pattern syntax&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The pattern that you define for a segment is matched against the value of &lt;code&gt;evaluationContext&lt;/code&gt;, which is passed into Evidently in the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_EvaluateFeature.html\&quot;&gt;EvaluateFeature&lt;/a&gt; operation, when Evidently assigns a feature variation to a user.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSegmentTest() throws ApiException {
        CreateSegmentRequest createSegmentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSegmentResponse response = api.createSegment(createSegmentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Evidently experiment. The feature used for the experiment is not deleted.&lt;/p&gt; &lt;p&gt;To stop an experiment without deleting it, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopExperiment.html\&quot;&gt;StopExperiment&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteExperimentTest() throws ApiException {
        String experiment = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteExperiment(experiment, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Evidently feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFeatureTest() throws ApiException {
        String feature = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFeature(feature, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes an Evidently launch. The feature used for the launch is not deleted.&lt;/p&gt; &lt;p&gt;To stop a launch without deleting it, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_StopLaunch.html\&quot;&gt;StopLaunch&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLaunchTest() throws ApiException {
        String launch = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLaunch(launch, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Evidently project. Before you can delete a project, you must delete all the features that the project contains. To delete a feature, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_DeleteFeature.html\&quot;&gt;DeleteFeature&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteProject(project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a segment. You can&#39;t delete a segment that is being used in a launch or experiment, even if that launch or experiment is not currently running.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSegmentTest() throws ApiException {
        String segment = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSegment(segment, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;This operation assigns a feature variation to one given user session. You pass in an &lt;code&gt;entityID&lt;/code&gt; that represents the user. Evidently then checks the evaluation rules and assigns the variation.&lt;/p&gt; &lt;p&gt;The first rules that are evaluated are the override rules. If the user&#39;s &lt;code&gt;entityID&lt;/code&gt; matches an override rule, the user is served the variation specified by that rule.&lt;/p&gt; &lt;p&gt;If there is a current launch with this feature that uses segment overrides, and if the user session&#39;s &lt;code&gt;evaluationContext&lt;/code&gt; matches a segment rule defined in a segment override, the configuration in the segment overrides is used. For more information about segments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html\&quot;&gt;CreateSegment&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-Evidently-segments.html\&quot;&gt;Use segments to focus your audience&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If there is a launch with no segment overrides, the user might be assigned to a variation in the launch. The chance of this depends on the percentage of users that are allocated to that launch. If the user is enrolled in the launch, the variation they are served depends on the allocation of the various feature variations used for the launch.&lt;/p&gt; &lt;p&gt;If the user is not assigned to a launch, and there is an ongoing experiment for this feature, the user might be assigned to a variation in the experiment. The chance of this depends on the percentage of users that are allocated to that experiment.&lt;/p&gt; &lt;p&gt;If the experiment uses a segment, then only user sessions with &lt;code&gt;evaluationContext&lt;/code&gt; values that match the segment rule are used in the experiment.&lt;/p&gt; &lt;p&gt;If the user is enrolled in the experiment, the variation they are served depends on the allocation of the various feature variations used for the experiment. &lt;/p&gt; &lt;p&gt;If the user is not assigned to a launch or experiment, they are served the default variation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void evaluateFeatureTest() throws ApiException {
        String feature = null;
        String project = null;
        EvaluateFeatureRequest evaluateFeatureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EvaluateFeatureResponse response = api.evaluateFeature(feature, project, evaluateFeatureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details about one experiment. You must already know the experiment name. To retrieve a list of experiments in your account, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListExperiments.html\&quot;&gt;ListExperiments&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExperimentTest() throws ApiException {
        String experiment = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExperimentResponse response = api.getExperiment(experiment, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves the results of a running or completed experiment. No results are available until there have been 100 events for each variation and at least 10 minutes have passed since the start of the experiment. To increase the statistical power, Evidently performs an additional offline p-value analysis at the end of the experiment. Offline p-value analysis can detect statistical significance in some cases where the anytime p-values used during the experiment do not find statistical significance.&lt;/p&gt; &lt;p&gt;Experiment results are available up to 63 days after the start of the experiment. They are not available after that because of CloudWatch data retention policies.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExperimentResultsTest() throws ApiException {
        String experiment = null;
        String project = null;
        GetExperimentResultsRequest getExperimentResultsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetExperimentResultsResponse response = api.getExperimentResults(experiment, project, getExperimentResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details about one feature. You must already know the feature name. To retrieve a list of features in your account, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListFeatures.html\&quot;&gt;ListFeatures&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeatureTest() throws ApiException {
        String feature = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFeatureResponse response = api.getFeature(feature, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details about one launch. You must already know the launch name. To retrieve a list of launches in your account, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListLaunches.html\&quot;&gt;ListLaunches&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaunchTest() throws ApiException {
        String launch = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLaunchResponse response = api.getLaunch(launch, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details about one launch. You must already know the project name. To retrieve a list of projects in your account, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_ListProjects.html\&quot;&gt;ListProjects&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetProjectResponse response = api.getProject(project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about the specified segment. Specify the segment you want to view by specifying its ARN.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSegmentTest() throws ApiException {
        String segment = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSegmentResponse response = api.getSegment(segment, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns configuration details about all the experiments in the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExperimentsTest() throws ApiException {
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String status = null;
        ListExperimentsResponse response = api.listExperiments(project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, status);
        // TODO: test validations
    }

    /**
     * Returns configuration details about all the features in the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFeaturesTest() throws ApiException {
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListFeaturesResponse response = api.listFeatures(project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns configuration details about all the launches in the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLaunchesTest() throws ApiException {
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String status = null;
        ListLaunchesResponse response = api.listLaunches(project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, status);
        // TODO: test validations
    }

    /**
     * Returns configuration details about all the projects in the current Region in your account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListProjectsResponse response = api.listProjects(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Use this operation to find which experiments or launches are using a specified segment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSegmentReferencesTest() throws ApiException {
        String segment = null;
        String type = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSegmentReferencesResponse response = api.listSegmentReferences(segment, type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of audience segments that you have created in your account in this Region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSegmentsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        ListSegmentsResponse response = api.listSegments(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Displays the tags associated with an Evidently resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Sends performance events to Evidently. These events can be used to evaluate a launch or an experiment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putProjectEventsTest() throws ApiException {
        String project = null;
        PutProjectEventsRequest putProjectEventsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutProjectEventsResponse response = api.putProjectEvents(project, putProjectEventsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an existing experiment. To create an experiment, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateExperiment.html\&quot;&gt;CreateExperiment&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startExperimentTest() throws ApiException {
        String experiment = null;
        String project = null;
        StartExperimentRequest startExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartExperimentResponse response = api.startExperiment(experiment, project, startExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts an existing launch. To create a launch, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateLaunch.html\&quot;&gt;CreateLaunch&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startLaunchTest() throws ApiException {
        String launch = null;
        String project = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartLaunchResponse response = api.startLaunch(launch, project, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops an experiment that is currently running. If you stop an experiment, you can&#39;t resume it or restart it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopExperimentTest() throws ApiException {
        String experiment = null;
        String project = null;
        StopExperimentRequest stopExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopExperimentResponse response = api.stopExperiment(experiment, project, stopExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops a launch that is currently running. After you stop a launch, you will not be able to resume it or restart it. Also, it will not be evaluated as a rule for traffic allocation, and the traffic that was allocated to the launch will instead be available to the feature&#39;s experiment, if there is one. Otherwise, all traffic will be served the default variation after the launch is stopped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopLaunchTest() throws ApiException {
        String launch = null;
        String project = null;
        StopLaunchRequest stopLaunchRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopLaunchResponse response = api.stopLaunch(launch, project, stopLaunchRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Assigns one or more tags (key-value pairs) to the specified CloudWatch Evidently resource. Projects, features, launches, and experiments can be tagged.&lt;/p&gt; &lt;p&gt;Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.&lt;/p&gt; &lt;p&gt;Tags don&#39;t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.&lt;/p&gt; &lt;p&gt;You can use the &lt;code&gt;TagResource&lt;/code&gt; action with a resource that already has tags. If you specify a new tag key for the resource, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.&lt;/p&gt; &lt;p&gt;You can associate as many as 50 tags with a resource.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html\&quot;&gt;Tagging Amazon Web Services resources&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Use this operation to test a rules pattern that you plan to use to create an audience segment. For more information about segments, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateSegment.html\&quot;&gt;CreateSegment&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testSegmentPatternTest() throws ApiException {
        TestSegmentPatternRequest testSegmentPatternRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TestSegmentPatternResponse response = api.testSegmentPattern(testSegmentPatternRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes one or more tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an Evidently experiment. &lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update an experiment&#39;s tag. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateExperimentTest() throws ApiException {
        String experiment = null;
        String project = null;
        UpdateExperimentRequest updateExperimentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateExperimentResponse response = api.updateExperiment(experiment, project, updateExperimentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates an existing feature.&lt;/p&gt; &lt;p&gt;You can&#39;t use this operation to update the tags of an existing feature. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFeatureTest() throws ApiException {
        String feature = null;
        String project = null;
        UpdateFeatureRequest updateFeatureRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateFeatureResponse response = api.updateFeature(feature, project, updateFeatureRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates a launch of a given feature. &lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update the tags of an existing launch. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLaunchTest() throws ApiException {
        String launch = null;
        String project = null;
        UpdateLaunchRequest updateLaunchRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateLaunchResponse response = api.updateLaunch(launch, project, updateLaunchRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the description of an existing project.&lt;/p&gt; &lt;p&gt;To create a new project, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_CreateProject.html\&quot;&gt;CreateProject&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update the data storage options of a project. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_UpdateProjectDataDelivery.html\&quot;&gt;UpdateProjectDataDelivery&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;Don&#39;t use this operation to update the tags of a project. Instead, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/cloudwatchevidently/latest/APIReference/API_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectTest() throws ApiException {
        String project = null;
        UpdateProjectRequest updateProjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProjectResponse response = api.updateProject(project, updateProjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the data storage options for this project. If you store evaluation events, you an keep them and analyze them on your own. If you choose not to store evaluation events, Evidently deletes them after using them to produce metrics and other experiment results that you can view.&lt;/p&gt; &lt;p&gt;You can&#39;t specify both &lt;code&gt;cloudWatchLogs&lt;/code&gt; and &lt;code&gt;s3Destination&lt;/code&gt; in the same operation.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProjectDataDeliveryTest() throws ApiException {
        String project = null;
        UpdateProjectDataDeliveryRequest updateProjectDataDeliveryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateProjectDataDeliveryResponse response = api.updateProjectDataDelivery(project, updateProjectDataDeliveryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
