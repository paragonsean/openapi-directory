/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateClusterRequest from '../model/CreateClusterRequest';
import CreateClusterResponse from '../model/CreateClusterResponse';
import CreateControlPanelRequest from '../model/CreateControlPanelRequest';
import CreateControlPanelResponse from '../model/CreateControlPanelResponse';
import CreateRoutingControlRequest from '../model/CreateRoutingControlRequest';
import CreateRoutingControlResponse from '../model/CreateRoutingControlResponse';
import CreateSafetyRuleRequest from '../model/CreateSafetyRuleRequest';
import CreateSafetyRuleResponse from '../model/CreateSafetyRuleResponse';
import DescribeClusterResponse from '../model/DescribeClusterResponse';
import DescribeControlPanelResponse from '../model/DescribeControlPanelResponse';
import DescribeRoutingControlResponse from '../model/DescribeRoutingControlResponse';
import DescribeSafetyRuleResponse from '../model/DescribeSafetyRuleResponse';
import ListAssociatedRoute53HealthChecksResponse from '../model/ListAssociatedRoute53HealthChecksResponse';
import ListClustersResponse from '../model/ListClustersResponse';
import ListControlPanelsResponse from '../model/ListControlPanelsResponse';
import ListRoutingControlsResponse from '../model/ListRoutingControlsResponse';
import ListSafetyRulesResponse from '../model/ListSafetyRulesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateControlPanelRequest from '../model/UpdateControlPanelRequest';
import UpdateControlPanelResponse from '../model/UpdateControlPanelResponse';
import UpdateRoutingControlRequest from '../model/UpdateRoutingControlRequest';
import UpdateRoutingControlResponse from '../model/UpdateRoutingControlResponse';
import UpdateSafetyRuleRequest from '../model/UpdateSafetyRuleRequest';
import UpdateSafetyRuleResponse from '../model/UpdateSafetyRuleResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-11-02
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCluster operation.
     * @callback module:api/DefaultApi~createClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new cluster. A cluster is a set of redundant Regional endpoints against which you can run API calls to update or get the state of one or more routing controls. Each cluster has a name, status, Amazon Resource Name (ARN), and an array of the five cluster endpoints (one for each supported Amazon Web Services Region) that you can use with API calls to the cluster data plane.
     * @param {module:model/CreateClusterRequest} createClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterResponse}
     */
    createCluster(createClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createClusterRequest;
      // verify the required parameter 'createClusterRequest' is set
      if (createClusterRequest === undefined || createClusterRequest === null) {
        throw new Error("Missing the required parameter 'createClusterRequest' when calling createCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterResponse;
      return this.apiClient.callApi(
        '/cluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createControlPanel operation.
     * @callback module:api/DefaultApi~createControlPanelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateControlPanelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new control panel. A control panel represents a group of routing controls that can be changed together in a single transaction. You can use a control panel to centrally view the operational status of applications across your organization, and trigger multi-app failovers in a single transaction, for example, to fail over an Availability Zone or Amazon Web Services Region.
     * @param {module:model/CreateControlPanelRequest} createControlPanelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createControlPanelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateControlPanelResponse}
     */
    createControlPanel(createControlPanelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createControlPanelRequest;
      // verify the required parameter 'createControlPanelRequest' is set
      if (createControlPanelRequest === undefined || createControlPanelRequest === null) {
        throw new Error("Missing the required parameter 'createControlPanelRequest' when calling createControlPanel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateControlPanelResponse;
      return this.apiClient.callApi(
        '/controlpanel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoutingControl operation.
     * @callback module:api/DefaultApi~createRoutingControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRoutingControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a new routing control.</p> <p>A routing control has one of two states: ON and OFF. You can map the routing control state to the state of an Amazon Route 53 health check, which can be used to control traffic routing.</p> <p>To get or update the routing control state, see the Recovery Cluster (data plane) API actions for Amazon Route 53 Application Recovery Controller.</p>
     * @param {module:model/CreateRoutingControlRequest} createRoutingControlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRoutingControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRoutingControlResponse}
     */
    createRoutingControl(createRoutingControlRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRoutingControlRequest;
      // verify the required parameter 'createRoutingControlRequest' is set
      if (createRoutingControlRequest === undefined || createRoutingControlRequest === null) {
        throw new Error("Missing the required parameter 'createRoutingControlRequest' when calling createRoutingControl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoutingControlResponse;
      return this.apiClient.callApi(
        '/routingcontrol', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSafetyRule operation.
     * @callback module:api/DefaultApi~createSafetyRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSafetyRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a safety rule in a control panel. Safety rules let you add safeguards around changing routing control states, and for enabling and disabling routing controls, to help prevent unexpected outcomes.</p> <p>There are two types of safety rules: assertion rules and gating rules.</p> <p>Assertion rule: An assertion rule enforces that, when you change a routing control state, that a certain criteria is met. For example, the criteria might be that at least one routing control state is On after the transaction so that traffic continues to flow to at least one cell for the application. This ensures that you avoid a fail-open scenario.</p> <p>Gating rule: A gating rule lets you configure a gating routing control as an overall \"on/off\" switch for a group of routing controls. Or, you can configure more complex gating scenarios, for example by configuring multiple gating routing controls.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/r53recovery/latest/dg/routing-control.safety-rules.html\">Safety rules</a> in the Amazon Route 53 Application Recovery Controller Developer Guide.</p>
     * @param {module:model/CreateSafetyRuleRequest} createSafetyRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSafetyRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSafetyRuleResponse}
     */
    createSafetyRule(createSafetyRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSafetyRuleRequest;
      // verify the required parameter 'createSafetyRuleRequest' is set
      if (createSafetyRuleRequest === undefined || createSafetyRuleRequest === null) {
        throw new Error("Missing the required parameter 'createSafetyRuleRequest' when calling createSafetyRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSafetyRuleResponse;
      return this.apiClient.callApi(
        '/safetyrule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCluster operation.
     * @callback module:api/DefaultApi~deleteClusterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cluster.
     * @param {String} clusterArn The Amazon Resource Name (ARN) of the cluster that you're deleting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCluster(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling deleteCluster");
      }

      let pathParams = {
        'ClusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cluster/{ClusterArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteControlPanel operation.
     * @callback module:api/DefaultApi~deleteControlPanelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a control panel.
     * @param {String} controlPanelArn The Amazon Resource Name (ARN) of the control panel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteControlPanelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteControlPanel(controlPanelArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlPanelArn' is set
      if (controlPanelArn === undefined || controlPanelArn === null) {
        throw new Error("Missing the required parameter 'controlPanelArn' when calling deleteControlPanel");
      }

      let pathParams = {
        'ControlPanelArn': controlPanelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/controlpanel/{ControlPanelArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoutingControl operation.
     * @callback module:api/DefaultApi~deleteRoutingControlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a routing control.
     * @param {String} routingControlArn The Amazon Resource Name (ARN) of the routing control that you're deleting.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRoutingControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteRoutingControl(routingControlArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'routingControlArn' is set
      if (routingControlArn === undefined || routingControlArn === null) {
        throw new Error("Missing the required parameter 'routingControlArn' when calling deleteRoutingControl");
      }

      let pathParams = {
        'RoutingControlArn': routingControlArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/routingcontrol/{RoutingControlArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSafetyRule operation.
     * @callback module:api/DefaultApi~deleteSafetyRuleCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a safety rule.</p>/&gt;
     * @param {String} safetyRuleArn The ARN of the safety rule.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSafetyRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSafetyRule(safetyRuleArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'safetyRuleArn' is set
      if (safetyRuleArn === undefined || safetyRuleArn === null) {
        throw new Error("Missing the required parameter 'safetyRuleArn' when calling deleteSafetyRule");
      }

      let pathParams = {
        'SafetyRuleArn': safetyRuleArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/safetyrule/{SafetyRuleArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCluster operation.
     * @callback module:api/DefaultApi~describeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClusterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display the details about a cluster. The response includes the cluster name, endpoints, status, and Amazon Resource Name (ARN).
     * @param {String} clusterArn The Amazon Resource Name (ARN) of the cluster.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClusterResponse}
     */
    describeCluster(clusterArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clusterArn' is set
      if (clusterArn === undefined || clusterArn === null) {
        throw new Error("Missing the required parameter 'clusterArn' when calling describeCluster");
      }

      let pathParams = {
        'ClusterArn': clusterArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeClusterResponse;
      return this.apiClient.callApi(
        '/cluster/{ClusterArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeControlPanel operation.
     * @callback module:api/DefaultApi~describeControlPanelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeControlPanelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays details about a control panel.
     * @param {String} controlPanelArn The Amazon Resource Name (ARN) of the control panel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeControlPanelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeControlPanelResponse}
     */
    describeControlPanel(controlPanelArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlPanelArn' is set
      if (controlPanelArn === undefined || controlPanelArn === null) {
        throw new Error("Missing the required parameter 'controlPanelArn' when calling describeControlPanel");
      }

      let pathParams = {
        'ControlPanelArn': controlPanelArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeControlPanelResponse;
      return this.apiClient.callApi(
        '/controlpanel/{ControlPanelArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRoutingControl operation.
     * @callback module:api/DefaultApi~describeRoutingControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRoutingControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Displays details about a routing control. A routing control has one of two states: ON and OFF. You can map the routing control state to the state of an Amazon Route 53 health check, which can be used to control routing.</p> <p>To get or update the routing control state, see the Recovery Cluster (data plane) API actions for Amazon Route 53 Application Recovery Controller.</p>
     * @param {String} routingControlArn The Amazon Resource Name (ARN) of the routing control.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRoutingControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRoutingControlResponse}
     */
    describeRoutingControl(routingControlArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'routingControlArn' is set
      if (routingControlArn === undefined || routingControlArn === null) {
        throw new Error("Missing the required parameter 'routingControlArn' when calling describeRoutingControl");
      }

      let pathParams = {
        'RoutingControlArn': routingControlArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRoutingControlResponse;
      return this.apiClient.callApi(
        '/routingcontrol/{RoutingControlArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSafetyRule operation.
     * @callback module:api/DefaultApi~describeSafetyRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSafetyRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a safety rule.
     * @param {String} safetyRuleArn The ARN of the safety rule.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeSafetyRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSafetyRuleResponse}
     */
    describeSafetyRule(safetyRuleArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'safetyRuleArn' is set
      if (safetyRuleArn === undefined || safetyRuleArn === null) {
        throw new Error("Missing the required parameter 'safetyRuleArn' when calling describeSafetyRule");
      }

      let pathParams = {
        'SafetyRuleArn': safetyRuleArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSafetyRuleResponse;
      return this.apiClient.callApi(
        '/safetyrule/{SafetyRuleArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssociatedRoute53HealthChecks operation.
     * @callback module:api/DefaultApi~listAssociatedRoute53HealthChecksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssociatedRoute53HealthChecksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of all Amazon Route 53 health checks associated with a specific routing control.
     * @param {String} routingControlArn The Amazon Resource Name (ARN) of the routing control.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {module:api/DefaultApi~listAssociatedRoute53HealthChecksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssociatedRoute53HealthChecksResponse}
     */
    listAssociatedRoute53HealthChecks(routingControlArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'routingControlArn' is set
      if (routingControlArn === undefined || routingControlArn === null) {
        throw new Error("Missing the required parameter 'routingControlArn' when calling listAssociatedRoute53HealthChecks");
      }

      let pathParams = {
        'RoutingControlArn': routingControlArn
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssociatedRoute53HealthChecksResponse;
      return this.apiClient.callApi(
        '/routingcontrol/{RoutingControlArn}/associatedRoute53HealthChecks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusters operation.
     * @callback module:api/DefaultApi~listClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClustersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of all the clusters in an account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {module:api/DefaultApi~listClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClustersResponse}
     */
    listClusters(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListClustersResponse;
      return this.apiClient.callApi(
        '/cluster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listControlPanels operation.
     * @callback module:api/DefaultApi~listControlPanelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListControlPanelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of control panels in an account or in a cluster.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clusterArn] The Amazon Resource Name (ARN) of a cluster.
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {module:api/DefaultApi~listControlPanelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListControlPanelsResponse}
     */
    listControlPanels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ClusterArn': opts['clusterArn'],
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListControlPanelsResponse;
      return this.apiClient.callApi(
        '/controlpanels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoutingControls operation.
     * @callback module:api/DefaultApi~listRoutingControlsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRoutingControlsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of routing controls for a control panel. A routing control is an Amazon Route 53 Application Recovery Controller construct that has one of two states: ON and OFF. You can map the routing control state to the state of an Amazon Route 53 health check, which can be used to control routing.
     * @param {String} controlPanelArn The Amazon Resource Name (ARN) of the control panel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {module:api/DefaultApi~listRoutingControlsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRoutingControlsResponse}
     */
    listRoutingControls(controlPanelArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlPanelArn' is set
      if (controlPanelArn === undefined || controlPanelArn === null) {
        throw new Error("Missing the required parameter 'controlPanelArn' when calling listRoutingControls");
      }

      let pathParams = {
        'ControlPanelArn': controlPanelArn
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRoutingControlsResponse;
      return this.apiClient.callApi(
        '/controlpanel/{ControlPanelArn}/routingcontrols', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSafetyRules operation.
     * @callback module:api/DefaultApi~listSafetyRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSafetyRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the safety rules (the assertion rules and gating rules) that you've defined for the routing controls in a control panel.
     * @param {String} controlPanelArn The Amazon Resource Name (ARN) of the control panel.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {module:api/DefaultApi~listSafetyRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSafetyRulesResponse}
     */
    listSafetyRules(controlPanelArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'controlPanelArn' is set
      if (controlPanelArn === undefined || controlPanelArn === null) {
        throw new Error("Missing the required parameter 'controlPanelArn' when calling listSafetyRules");
      }

      let pathParams = {
        'ControlPanelArn': controlPanelArn
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSafetyRulesResponse;
      return this.apiClient.callApi(
        '/controlpanel/{ControlPanelArn}/safetyrules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the resource that's tagged.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a tag to a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the resource that's tagged.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for the resource that's tagged.
     * @param {Array.<String>} tagKeys Keys for the tags to be removed.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'TagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#TagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateControlPanel operation.
     * @callback module:api/DefaultApi~updateControlPanelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateControlPanelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a control panel. The only update you can make to a control panel is to change the name of the control panel.
     * @param {module:model/UpdateControlPanelRequest} updateControlPanelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateControlPanelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateControlPanelResponse}
     */
    updateControlPanel(updateControlPanelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateControlPanelRequest;
      // verify the required parameter 'updateControlPanelRequest' is set
      if (updateControlPanelRequest === undefined || updateControlPanelRequest === null) {
        throw new Error("Missing the required parameter 'updateControlPanelRequest' when calling updateControlPanel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateControlPanelResponse;
      return this.apiClient.callApi(
        '/controlpanel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoutingControl operation.
     * @callback module:api/DefaultApi~updateRoutingControlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRoutingControlResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a routing control. You can only update the name of the routing control. To get or update the routing control state, see the Recovery Cluster (data plane) API actions for Amazon Route 53 Application Recovery Controller.
     * @param {module:model/UpdateRoutingControlRequest} updateRoutingControlRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRoutingControlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRoutingControlResponse}
     */
    updateRoutingControl(updateRoutingControlRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoutingControlRequest;
      // verify the required parameter 'updateRoutingControlRequest' is set
      if (updateRoutingControlRequest === undefined || updateRoutingControlRequest === null) {
        throw new Error("Missing the required parameter 'updateRoutingControlRequest' when calling updateRoutingControl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRoutingControlResponse;
      return this.apiClient.callApi(
        '/routingcontrol', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSafetyRule operation.
     * @callback module:api/DefaultApi~updateSafetyRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSafetyRuleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a safety rule (an assertion rule or gating rule). You can only update the name and the waiting period for a safety rule. To make other updates, delete the safety rule and create a new one.
     * @param {module:model/UpdateSafetyRuleRequest} updateSafetyRuleRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSafetyRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSafetyRuleResponse}
     */
    updateSafetyRule(updateSafetyRuleRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSafetyRuleRequest;
      // verify the required parameter 'updateSafetyRuleRequest' is set
      if (updateSafetyRuleRequest === undefined || updateSafetyRuleRequest === null) {
        throw new Error("Missing the required parameter 'updateSafetyRuleRequest' when calling updateSafetyRule");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSafetyRuleResponse;
      return this.apiClient.callApi(
        '/safetyrule', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
