/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatingRule_RuleConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatingRule_RuleConfig::OAIGatingRule_RuleConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatingRule_RuleConfig::OAIGatingRule_RuleConfig() {
    this->initializeModel();
}

OAIGatingRule_RuleConfig::~OAIGatingRule_RuleConfig() {}

void OAIGatingRule_RuleConfig::initializeModel() {

    m_inverted_isSet = false;
    m_inverted_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGatingRule_RuleConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatingRule_RuleConfig::fromJsonObject(QJsonObject json) {

    m_inverted_isValid = ::OpenAPI::fromJsonValue(m_inverted, json[QString("Inverted")]);
    m_inverted_isSet = !json[QString("Inverted")].isNull() && m_inverted_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("Threshold")]);
    m_threshold_isSet = !json[QString("Threshold")].isNull() && m_threshold_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIGatingRule_RuleConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatingRule_RuleConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_inverted_isSet) {
        obj.insert(QString("Inverted"), ::OpenAPI::toJsonValue(m_inverted));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("Threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAIGatingRule_RuleConfig::getInverted() const {
    return m_inverted;
}
void OAIGatingRule_RuleConfig::setInverted(const bool &inverted) {
    m_inverted = inverted;
    m_inverted_isSet = true;
}

bool OAIGatingRule_RuleConfig::is_inverted_Set() const{
    return m_inverted_isSet;
}

bool OAIGatingRule_RuleConfig::is_inverted_Valid() const{
    return m_inverted_isValid;
}

qint32 OAIGatingRule_RuleConfig::getThreshold() const {
    return m_threshold;
}
void OAIGatingRule_RuleConfig::setThreshold(const qint32 &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIGatingRule_RuleConfig::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIGatingRule_RuleConfig::is_threshold_Valid() const{
    return m_threshold_isValid;
}

OAIRuleType OAIGatingRule_RuleConfig::getType() const {
    return m_type;
}
void OAIGatingRule_RuleConfig::setType(const OAIRuleType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGatingRule_RuleConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGatingRule_RuleConfig::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGatingRule_RuleConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inverted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatingRule_RuleConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_inverted_isValid && m_threshold_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
