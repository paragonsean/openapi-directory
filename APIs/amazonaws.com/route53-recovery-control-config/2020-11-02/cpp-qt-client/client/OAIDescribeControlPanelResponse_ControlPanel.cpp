/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeControlPanelResponse_ControlPanel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeControlPanelResponse_ControlPanel::OAIDescribeControlPanelResponse_ControlPanel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeControlPanelResponse_ControlPanel::OAIDescribeControlPanelResponse_ControlPanel() {
    this->initializeModel();
}

OAIDescribeControlPanelResponse_ControlPanel::~OAIDescribeControlPanelResponse_ControlPanel() {}

void OAIDescribeControlPanelResponse_ControlPanel::initializeModel() {

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_control_panel_arn_isSet = false;
    m_control_panel_arn_isValid = false;

    m_default_control_panel_isSet = false;
    m_default_control_panel_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_routing_control_count_isSet = false;
    m_routing_control_count_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDescribeControlPanelResponse_ControlPanel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeControlPanelResponse_ControlPanel::fromJsonObject(QJsonObject json) {

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_control_panel_arn_isValid = ::OpenAPI::fromJsonValue(m_control_panel_arn, json[QString("ControlPanelArn")]);
    m_control_panel_arn_isSet = !json[QString("ControlPanelArn")].isNull() && m_control_panel_arn_isValid;

    m_default_control_panel_isValid = ::OpenAPI::fromJsonValue(m_default_control_panel, json[QString("DefaultControlPanel")]);
    m_default_control_panel_isSet = !json[QString("DefaultControlPanel")].isNull() && m_default_control_panel_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_routing_control_count_isValid = ::OpenAPI::fromJsonValue(m_routing_control_count, json[QString("RoutingControlCount")]);
    m_routing_control_count_isSet = !json[QString("RoutingControlCount")].isNull() && m_routing_control_count_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;
}

QString OAIDescribeControlPanelResponse_ControlPanel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeControlPanelResponse_ControlPanel::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_control_panel_arn_isSet) {
        obj.insert(QString("ControlPanelArn"), ::OpenAPI::toJsonValue(m_control_panel_arn));
    }
    if (m_default_control_panel_isSet) {
        obj.insert(QString("DefaultControlPanel"), ::OpenAPI::toJsonValue(m_default_control_panel));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_routing_control_count_isSet) {
        obj.insert(QString("RoutingControlCount"), ::OpenAPI::toJsonValue(m_routing_control_count));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDescribeControlPanelResponse_ControlPanel::getClusterArn() const {
    return m_cluster_arn;
}
void OAIDescribeControlPanelResponse_ControlPanel::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAIDescribeControlPanelResponse_ControlPanel::getControlPanelArn() const {
    return m_control_panel_arn;
}
void OAIDescribeControlPanelResponse_ControlPanel::setControlPanelArn(const QString &control_panel_arn) {
    m_control_panel_arn = control_panel_arn;
    m_control_panel_arn_isSet = true;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_control_panel_arn_Set() const{
    return m_control_panel_arn_isSet;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_control_panel_arn_Valid() const{
    return m_control_panel_arn_isValid;
}

bool OAIDescribeControlPanelResponse_ControlPanel::getDefaultControlPanel() const {
    return m_default_control_panel;
}
void OAIDescribeControlPanelResponse_ControlPanel::setDefaultControlPanel(const bool &default_control_panel) {
    m_default_control_panel = default_control_panel;
    m_default_control_panel_isSet = true;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_default_control_panel_Set() const{
    return m_default_control_panel_isSet;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_default_control_panel_Valid() const{
    return m_default_control_panel_isValid;
}

QString OAIDescribeControlPanelResponse_ControlPanel::getName() const {
    return m_name;
}
void OAIDescribeControlPanelResponse_ControlPanel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIDescribeControlPanelResponse_ControlPanel::getRoutingControlCount() const {
    return m_routing_control_count;
}
void OAIDescribeControlPanelResponse_ControlPanel::setRoutingControlCount(const qint32 &routing_control_count) {
    m_routing_control_count = routing_control_count;
    m_routing_control_count_isSet = true;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_routing_control_count_Set() const{
    return m_routing_control_count_isSet;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_routing_control_count_Valid() const{
    return m_routing_control_count_isValid;
}

OAIStatus OAIDescribeControlPanelResponse_ControlPanel::getStatus() const {
    return m_status;
}
void OAIDescribeControlPanelResponse_ControlPanel::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeControlPanelResponse_ControlPanel::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDescribeControlPanelResponse_ControlPanel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_control_panel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_control_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeControlPanelResponse_ControlPanel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
