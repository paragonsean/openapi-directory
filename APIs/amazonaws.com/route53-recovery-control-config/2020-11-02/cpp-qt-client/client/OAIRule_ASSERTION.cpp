/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule_ASSERTION.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule_ASSERTION::OAIRule_ASSERTION(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule_ASSERTION::OAIRule_ASSERTION() {
    this->initializeModel();
}

OAIRule_ASSERTION::~OAIRule_ASSERTION() {}

void OAIRule_ASSERTION::initializeModel() {

    m_asserted_controls_isSet = false;
    m_asserted_controls_isValid = false;

    m_control_panel_arn_isSet = false;
    m_control_panel_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_config_isSet = false;
    m_rule_config_isValid = false;

    m_safety_rule_arn_isSet = false;
    m_safety_rule_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_wait_period_ms_isSet = false;
    m_wait_period_ms_isValid = false;
}

void OAIRule_ASSERTION::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule_ASSERTION::fromJsonObject(QJsonObject json) {

    m_asserted_controls_isValid = ::OpenAPI::fromJsonValue(m_asserted_controls, json[QString("AssertedControls")]);
    m_asserted_controls_isSet = !json[QString("AssertedControls")].isNull() && m_asserted_controls_isValid;

    m_control_panel_arn_isValid = ::OpenAPI::fromJsonValue(m_control_panel_arn, json[QString("ControlPanelArn")]);
    m_control_panel_arn_isSet = !json[QString("ControlPanelArn")].isNull() && m_control_panel_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rule_config_isValid = ::OpenAPI::fromJsonValue(m_rule_config, json[QString("RuleConfig")]);
    m_rule_config_isSet = !json[QString("RuleConfig")].isNull() && m_rule_config_isValid;

    m_safety_rule_arn_isValid = ::OpenAPI::fromJsonValue(m_safety_rule_arn, json[QString("SafetyRuleArn")]);
    m_safety_rule_arn_isSet = !json[QString("SafetyRuleArn")].isNull() && m_safety_rule_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_wait_period_ms_isValid = ::OpenAPI::fromJsonValue(m_wait_period_ms, json[QString("WaitPeriodMs")]);
    m_wait_period_ms_isSet = !json[QString("WaitPeriodMs")].isNull() && m_wait_period_ms_isValid;
}

QString OAIRule_ASSERTION::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule_ASSERTION::asJsonObject() const {
    QJsonObject obj;
    if (m_asserted_controls.isSet()) {
        obj.insert(QString("AssertedControls"), ::OpenAPI::toJsonValue(m_asserted_controls));
    }
    if (m_control_panel_arn_isSet) {
        obj.insert(QString("ControlPanelArn"), ::OpenAPI::toJsonValue(m_control_panel_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_config.isSet()) {
        obj.insert(QString("RuleConfig"), ::OpenAPI::toJsonValue(m_rule_config));
    }
    if (m_safety_rule_arn_isSet) {
        obj.insert(QString("SafetyRuleArn"), ::OpenAPI::toJsonValue(m_safety_rule_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_wait_period_ms_isSet) {
        obj.insert(QString("WaitPeriodMs"), ::OpenAPI::toJsonValue(m_wait_period_ms));
    }
    return obj;
}

QList OAIRule_ASSERTION::getAssertedControls() const {
    return m_asserted_controls;
}
void OAIRule_ASSERTION::setAssertedControls(const QList &asserted_controls) {
    m_asserted_controls = asserted_controls;
    m_asserted_controls_isSet = true;
}

bool OAIRule_ASSERTION::is_asserted_controls_Set() const{
    return m_asserted_controls_isSet;
}

bool OAIRule_ASSERTION::is_asserted_controls_Valid() const{
    return m_asserted_controls_isValid;
}

QString OAIRule_ASSERTION::getControlPanelArn() const {
    return m_control_panel_arn;
}
void OAIRule_ASSERTION::setControlPanelArn(const QString &control_panel_arn) {
    m_control_panel_arn = control_panel_arn;
    m_control_panel_arn_isSet = true;
}

bool OAIRule_ASSERTION::is_control_panel_arn_Set() const{
    return m_control_panel_arn_isSet;
}

bool OAIRule_ASSERTION::is_control_panel_arn_Valid() const{
    return m_control_panel_arn_isValid;
}

QString OAIRule_ASSERTION::getName() const {
    return m_name;
}
void OAIRule_ASSERTION::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRule_ASSERTION::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRule_ASSERTION::is_name_Valid() const{
    return m_name_isValid;
}

OAIAssertionRule_RuleConfig OAIRule_ASSERTION::getRuleConfig() const {
    return m_rule_config;
}
void OAIRule_ASSERTION::setRuleConfig(const OAIAssertionRule_RuleConfig &rule_config) {
    m_rule_config = rule_config;
    m_rule_config_isSet = true;
}

bool OAIRule_ASSERTION::is_rule_config_Set() const{
    return m_rule_config_isSet;
}

bool OAIRule_ASSERTION::is_rule_config_Valid() const{
    return m_rule_config_isValid;
}

QString OAIRule_ASSERTION::getSafetyRuleArn() const {
    return m_safety_rule_arn;
}
void OAIRule_ASSERTION::setSafetyRuleArn(const QString &safety_rule_arn) {
    m_safety_rule_arn = safety_rule_arn;
    m_safety_rule_arn_isSet = true;
}

bool OAIRule_ASSERTION::is_safety_rule_arn_Set() const{
    return m_safety_rule_arn_isSet;
}

bool OAIRule_ASSERTION::is_safety_rule_arn_Valid() const{
    return m_safety_rule_arn_isValid;
}

OAIStatus OAIRule_ASSERTION::getStatus() const {
    return m_status;
}
void OAIRule_ASSERTION::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRule_ASSERTION::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRule_ASSERTION::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIRule_ASSERTION::getWaitPeriodMs() const {
    return m_wait_period_ms;
}
void OAIRule_ASSERTION::setWaitPeriodMs(const qint32 &wait_period_ms) {
    m_wait_period_ms = wait_period_ms;
    m_wait_period_ms_isSet = true;
}

bool OAIRule_ASSERTION::is_wait_period_ms_Set() const{
    return m_wait_period_ms_isSet;
}

bool OAIRule_ASSERTION::is_wait_period_ms_Valid() const{
    return m_wait_period_ms_isValid;
}

bool OAIRule_ASSERTION::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asserted_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_safety_rule_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_period_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule_ASSERTION::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asserted_controls_isValid && m_control_panel_arn_isValid && m_name_isValid && m_rule_config_isValid && m_safety_rule_arn_isValid && m_status_isValid && m_wait_period_ms_isValid && true;
}

} // namespace OpenAPI
