/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateControlPanel_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateControlPanel_request::OAIUpdateControlPanel_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateControlPanel_request::OAIUpdateControlPanel_request() {
    this->initializeModel();
}

OAIUpdateControlPanel_request::~OAIUpdateControlPanel_request() {}

void OAIUpdateControlPanel_request::initializeModel() {

    m_control_panel_arn_isSet = false;
    m_control_panel_arn_isValid = false;

    m_control_panel_name_isSet = false;
    m_control_panel_name_isValid = false;
}

void OAIUpdateControlPanel_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateControlPanel_request::fromJsonObject(QJsonObject json) {

    m_control_panel_arn_isValid = ::OpenAPI::fromJsonValue(m_control_panel_arn, json[QString("ControlPanelArn")]);
    m_control_panel_arn_isSet = !json[QString("ControlPanelArn")].isNull() && m_control_panel_arn_isValid;

    m_control_panel_name_isValid = ::OpenAPI::fromJsonValue(m_control_panel_name, json[QString("ControlPanelName")]);
    m_control_panel_name_isSet = !json[QString("ControlPanelName")].isNull() && m_control_panel_name_isValid;
}

QString OAIUpdateControlPanel_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateControlPanel_request::asJsonObject() const {
    QJsonObject obj;
    if (m_control_panel_arn_isSet) {
        obj.insert(QString("ControlPanelArn"), ::OpenAPI::toJsonValue(m_control_panel_arn));
    }
    if (m_control_panel_name_isSet) {
        obj.insert(QString("ControlPanelName"), ::OpenAPI::toJsonValue(m_control_panel_name));
    }
    return obj;
}

QString OAIUpdateControlPanel_request::getControlPanelArn() const {
    return m_control_panel_arn;
}
void OAIUpdateControlPanel_request::setControlPanelArn(const QString &control_panel_arn) {
    m_control_panel_arn = control_panel_arn;
    m_control_panel_arn_isSet = true;
}

bool OAIUpdateControlPanel_request::is_control_panel_arn_Set() const{
    return m_control_panel_arn_isSet;
}

bool OAIUpdateControlPanel_request::is_control_panel_arn_Valid() const{
    return m_control_panel_arn_isValid;
}

QString OAIUpdateControlPanel_request::getControlPanelName() const {
    return m_control_panel_name;
}
void OAIUpdateControlPanel_request::setControlPanelName(const QString &control_panel_name) {
    m_control_panel_name = control_panel_name;
    m_control_panel_name_isSet = true;
}

bool OAIUpdateControlPanel_request::is_control_panel_name_Set() const{
    return m_control_panel_name_isSet;
}

bool OAIUpdateControlPanel_request::is_control_panel_name_Valid() const{
    return m_control_panel_name_isValid;
}

bool OAIUpdateControlPanel_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_control_panel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateControlPanel_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_control_panel_arn_isValid && m_control_panel_name_isValid && true;
}

} // namespace OpenAPI
