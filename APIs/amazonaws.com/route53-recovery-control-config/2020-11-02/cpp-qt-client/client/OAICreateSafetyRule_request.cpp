/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSafetyRule_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSafetyRule_request::OAICreateSafetyRule_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSafetyRule_request::OAICreateSafetyRule_request() {
    this->initializeModel();
}

OAICreateSafetyRule_request::~OAICreateSafetyRule_request() {}

void OAICreateSafetyRule_request::initializeModel() {

    m_assertion_rule_isSet = false;
    m_assertion_rule_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_gating_rule_isSet = false;
    m_gating_rule_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSafetyRule_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSafetyRule_request::fromJsonObject(QJsonObject json) {

    m_assertion_rule_isValid = ::OpenAPI::fromJsonValue(m_assertion_rule, json[QString("AssertionRule")]);
    m_assertion_rule_isSet = !json[QString("AssertionRule")].isNull() && m_assertion_rule_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_gating_rule_isValid = ::OpenAPI::fromJsonValue(m_gating_rule, json[QString("GatingRule")]);
    m_gating_rule_isSet = !json[QString("GatingRule")].isNull() && m_gating_rule_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateSafetyRule_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSafetyRule_request::asJsonObject() const {
    QJsonObject obj;
    if (m_assertion_rule.isSet()) {
        obj.insert(QString("AssertionRule"), ::OpenAPI::toJsonValue(m_assertion_rule));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_gating_rule.isSet()) {
        obj.insert(QString("GatingRule"), ::OpenAPI::toJsonValue(m_gating_rule));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

OAICreateSafetyRule_request_AssertionRule OAICreateSafetyRule_request::getAssertionRule() const {
    return m_assertion_rule;
}
void OAICreateSafetyRule_request::setAssertionRule(const OAICreateSafetyRule_request_AssertionRule &assertion_rule) {
    m_assertion_rule = assertion_rule;
    m_assertion_rule_isSet = true;
}

bool OAICreateSafetyRule_request::is_assertion_rule_Set() const{
    return m_assertion_rule_isSet;
}

bool OAICreateSafetyRule_request::is_assertion_rule_Valid() const{
    return m_assertion_rule_isValid;
}

QString OAICreateSafetyRule_request::getClientToken() const {
    return m_client_token;
}
void OAICreateSafetyRule_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateSafetyRule_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateSafetyRule_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateSafetyRule_request_GatingRule OAICreateSafetyRule_request::getGatingRule() const {
    return m_gating_rule;
}
void OAICreateSafetyRule_request::setGatingRule(const OAICreateSafetyRule_request_GatingRule &gating_rule) {
    m_gating_rule = gating_rule;
    m_gating_rule_isSet = true;
}

bool OAICreateSafetyRule_request::is_gating_rule_Set() const{
    return m_gating_rule_isSet;
}

bool OAICreateSafetyRule_request::is_gating_rule_Valid() const{
    return m_gating_rule_isValid;
}

QMap<QString, QString> OAICreateSafetyRule_request::getTags() const {
    return m_tags;
}
void OAICreateSafetyRule_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSafetyRule_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSafetyRule_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSafetyRule_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assertion_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gating_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSafetyRule_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
