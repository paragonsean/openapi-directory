/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRoutingControlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRoutingControlRequest::OAICreateRoutingControlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRoutingControlRequest::OAICreateRoutingControlRequest() {
    this->initializeModel();
}

OAICreateRoutingControlRequest::~OAICreateRoutingControlRequest() {}

void OAICreateRoutingControlRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_control_panel_arn_isSet = false;
    m_control_panel_arn_isValid = false;

    m_routing_control_name_isSet = false;
    m_routing_control_name_isValid = false;
}

void OAICreateRoutingControlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRoutingControlRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_control_panel_arn_isValid = ::OpenAPI::fromJsonValue(m_control_panel_arn, json[QString("ControlPanelArn")]);
    m_control_panel_arn_isSet = !json[QString("ControlPanelArn")].isNull() && m_control_panel_arn_isValid;

    m_routing_control_name_isValid = ::OpenAPI::fromJsonValue(m_routing_control_name, json[QString("RoutingControlName")]);
    m_routing_control_name_isSet = !json[QString("RoutingControlName")].isNull() && m_routing_control_name_isValid;
}

QString OAICreateRoutingControlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRoutingControlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_control_panel_arn_isSet) {
        obj.insert(QString("ControlPanelArn"), ::OpenAPI::toJsonValue(m_control_panel_arn));
    }
    if (m_routing_control_name_isSet) {
        obj.insert(QString("RoutingControlName"), ::OpenAPI::toJsonValue(m_routing_control_name));
    }
    return obj;
}

QString OAICreateRoutingControlRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateRoutingControlRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateRoutingControlRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateRoutingControlRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateRoutingControlRequest::getClusterArn() const {
    return m_cluster_arn;
}
void OAICreateRoutingControlRequest::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAICreateRoutingControlRequest::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAICreateRoutingControlRequest::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAICreateRoutingControlRequest::getControlPanelArn() const {
    return m_control_panel_arn;
}
void OAICreateRoutingControlRequest::setControlPanelArn(const QString &control_panel_arn) {
    m_control_panel_arn = control_panel_arn;
    m_control_panel_arn_isSet = true;
}

bool OAICreateRoutingControlRequest::is_control_panel_arn_Set() const{
    return m_control_panel_arn_isSet;
}

bool OAICreateRoutingControlRequest::is_control_panel_arn_Valid() const{
    return m_control_panel_arn_isValid;
}

QString OAICreateRoutingControlRequest::getRoutingControlName() const {
    return m_routing_control_name;
}
void OAICreateRoutingControlRequest::setRoutingControlName(const QString &routing_control_name) {
    m_routing_control_name = routing_control_name;
    m_routing_control_name_isSet = true;
}

bool OAICreateRoutingControlRequest::is_routing_control_name_Set() const{
    return m_routing_control_name_isSet;
}

bool OAICreateRoutingControlRequest::is_routing_control_name_Valid() const{
    return m_routing_control_name_isValid;
}

bool OAICreateRoutingControlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_control_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRoutingControlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_arn_isValid && m_routing_control_name_isValid && true;
}

} // namespace OpenAPI
