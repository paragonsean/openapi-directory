/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGatingRule.h
 *
 * &lt;p&gt;A gating rule verifies that a gating routing control or set of gating routing controls, evaluates as true, based on a rule configuration that you specify, which allows a set of routing control state changes to complete.&lt;/p&gt; &lt;p&gt;For example, if you specify one gating routing control and you set the Type in the rule configuration to OR, that indicates that you must set the gating routing control to On for the rule to evaluate as true; that is, for the gating control \&quot;switch\&quot; to be \&quot;On\&quot;. When you do that, then you can update the routing control states for the target routing controls that you specify in the gating rule.&lt;/p&gt;
 */

#ifndef OAIGatingRule_H
#define OAIGatingRule_H

#include <QJsonObject>

#include "OAIGatingRule_RuleConfig.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGatingRule_RuleConfig;

class OAIGatingRule : public OAIObject {
public:
    OAIGatingRule();
    OAIGatingRule(QString json);
    ~OAIGatingRule() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getControlPanelArn() const;
    void setControlPanelArn(const QString &control_panel_arn);
    bool is_control_panel_arn_Set() const;
    bool is_control_panel_arn_Valid() const;

    QList getGatingControls() const;
    void setGatingControls(const QList &gating_controls);
    bool is_gating_controls_Set() const;
    bool is_gating_controls_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIGatingRule_RuleConfig getRuleConfig() const;
    void setRuleConfig(const OAIGatingRule_RuleConfig &rule_config);
    bool is_rule_config_Set() const;
    bool is_rule_config_Valid() const;

    QString getSafetyRuleArn() const;
    void setSafetyRuleArn(const QString &safety_rule_arn);
    bool is_safety_rule_arn_Set() const;
    bool is_safety_rule_arn_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList getTargetControls() const;
    void setTargetControls(const QList &target_controls);
    bool is_target_controls_Set() const;
    bool is_target_controls_Valid() const;

    qint32 getWaitPeriodMs() const;
    void setWaitPeriodMs(const qint32 &wait_period_ms);
    bool is_wait_period_ms_Set() const;
    bool is_wait_period_ms_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_control_panel_arn;
    bool m_control_panel_arn_isSet;
    bool m_control_panel_arn_isValid;

    QList m_gating_controls;
    bool m_gating_controls_isSet;
    bool m_gating_controls_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIGatingRule_RuleConfig m_rule_config;
    bool m_rule_config_isSet;
    bool m_rule_config_isValid;

    QString m_safety_rule_arn;
    bool m_safety_rule_arn_isSet;
    bool m_safety_rule_arn_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList m_target_controls;
    bool m_target_controls_isSet;
    bool m_target_controls_isValid;

    qint32 m_wait_period_ms;
    bool m_wait_period_ms_isSet;
    bool m_wait_period_ms_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGatingRule)

#endif // OAIGatingRule_H
