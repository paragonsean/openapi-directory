/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSafetyRule_request_AssertionRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSafetyRule_request_AssertionRule::OAICreateSafetyRule_request_AssertionRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSafetyRule_request_AssertionRule::OAICreateSafetyRule_request_AssertionRule() {
    this->initializeModel();
}

OAICreateSafetyRule_request_AssertionRule::~OAICreateSafetyRule_request_AssertionRule() {}

void OAICreateSafetyRule_request_AssertionRule::initializeModel() {

    m_asserted_controls_isSet = false;
    m_asserted_controls_isValid = false;

    m_control_panel_arn_isSet = false;
    m_control_panel_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rule_config_isSet = false;
    m_rule_config_isValid = false;

    m_wait_period_ms_isSet = false;
    m_wait_period_ms_isValid = false;
}

void OAICreateSafetyRule_request_AssertionRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSafetyRule_request_AssertionRule::fromJsonObject(QJsonObject json) {

    m_asserted_controls_isValid = ::OpenAPI::fromJsonValue(m_asserted_controls, json[QString("AssertedControls")]);
    m_asserted_controls_isSet = !json[QString("AssertedControls")].isNull() && m_asserted_controls_isValid;

    m_control_panel_arn_isValid = ::OpenAPI::fromJsonValue(m_control_panel_arn, json[QString("ControlPanelArn")]);
    m_control_panel_arn_isSet = !json[QString("ControlPanelArn")].isNull() && m_control_panel_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_rule_config_isValid = ::OpenAPI::fromJsonValue(m_rule_config, json[QString("RuleConfig")]);
    m_rule_config_isSet = !json[QString("RuleConfig")].isNull() && m_rule_config_isValid;

    m_wait_period_ms_isValid = ::OpenAPI::fromJsonValue(m_wait_period_ms, json[QString("WaitPeriodMs")]);
    m_wait_period_ms_isSet = !json[QString("WaitPeriodMs")].isNull() && m_wait_period_ms_isValid;
}

QString OAICreateSafetyRule_request_AssertionRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSafetyRule_request_AssertionRule::asJsonObject() const {
    QJsonObject obj;
    if (m_asserted_controls.isSet()) {
        obj.insert(QString("AssertedControls"), ::OpenAPI::toJsonValue(m_asserted_controls));
    }
    if (m_control_panel_arn_isSet) {
        obj.insert(QString("ControlPanelArn"), ::OpenAPI::toJsonValue(m_control_panel_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rule_config.isSet()) {
        obj.insert(QString("RuleConfig"), ::OpenAPI::toJsonValue(m_rule_config));
    }
    if (m_wait_period_ms_isSet) {
        obj.insert(QString("WaitPeriodMs"), ::OpenAPI::toJsonValue(m_wait_period_ms));
    }
    return obj;
}

QList OAICreateSafetyRule_request_AssertionRule::getAssertedControls() const {
    return m_asserted_controls;
}
void OAICreateSafetyRule_request_AssertionRule::setAssertedControls(const QList &asserted_controls) {
    m_asserted_controls = asserted_controls;
    m_asserted_controls_isSet = true;
}

bool OAICreateSafetyRule_request_AssertionRule::is_asserted_controls_Set() const{
    return m_asserted_controls_isSet;
}

bool OAICreateSafetyRule_request_AssertionRule::is_asserted_controls_Valid() const{
    return m_asserted_controls_isValid;
}

QString OAICreateSafetyRule_request_AssertionRule::getControlPanelArn() const {
    return m_control_panel_arn;
}
void OAICreateSafetyRule_request_AssertionRule::setControlPanelArn(const QString &control_panel_arn) {
    m_control_panel_arn = control_panel_arn;
    m_control_panel_arn_isSet = true;
}

bool OAICreateSafetyRule_request_AssertionRule::is_control_panel_arn_Set() const{
    return m_control_panel_arn_isSet;
}

bool OAICreateSafetyRule_request_AssertionRule::is_control_panel_arn_Valid() const{
    return m_control_panel_arn_isValid;
}

QString OAICreateSafetyRule_request_AssertionRule::getName() const {
    return m_name;
}
void OAICreateSafetyRule_request_AssertionRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateSafetyRule_request_AssertionRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateSafetyRule_request_AssertionRule::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateSafetyRule_request_AssertionRule_RuleConfig OAICreateSafetyRule_request_AssertionRule::getRuleConfig() const {
    return m_rule_config;
}
void OAICreateSafetyRule_request_AssertionRule::setRuleConfig(const OAICreateSafetyRule_request_AssertionRule_RuleConfig &rule_config) {
    m_rule_config = rule_config;
    m_rule_config_isSet = true;
}

bool OAICreateSafetyRule_request_AssertionRule::is_rule_config_Set() const{
    return m_rule_config_isSet;
}

bool OAICreateSafetyRule_request_AssertionRule::is_rule_config_Valid() const{
    return m_rule_config_isValid;
}

qint32 OAICreateSafetyRule_request_AssertionRule::getWaitPeriodMs() const {
    return m_wait_period_ms;
}
void OAICreateSafetyRule_request_AssertionRule::setWaitPeriodMs(const qint32 &wait_period_ms) {
    m_wait_period_ms = wait_period_ms;
    m_wait_period_ms_isSet = true;
}

bool OAICreateSafetyRule_request_AssertionRule::is_wait_period_ms_Set() const{
    return m_wait_period_ms_isSet;
}

bool OAICreateSafetyRule_request_AssertionRule::is_wait_period_ms_Valid() const{
    return m_wait_period_ms_isValid;
}

bool OAICreateSafetyRule_request_AssertionRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asserted_controls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_period_ms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSafetyRule_request_AssertionRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
