/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterEndpoint::OAIClusterEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterEndpoint::OAIClusterEndpoint() {
    this->initializeModel();
}

OAIClusterEndpoint::~OAIClusterEndpoint() {}

void OAIClusterEndpoint::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIClusterEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterEndpoint::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;
}

QString OAIClusterEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIClusterEndpoint::getEndpoint() const {
    return m_endpoint;
}
void OAIClusterEndpoint::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIClusterEndpoint::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIClusterEndpoint::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIClusterEndpoint::getRegion() const {
    return m_region;
}
void OAIClusterEndpoint::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIClusterEndpoint::is_region_Set() const{
    return m_region_isSet;
}

bool OAIClusterEndpoint::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIClusterEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
