/**
 * AWS Route53 Recovery Control Config
 * Recovery Control Configuration API Reference for Amazon Route 53 Application Recovery Controller
 *
 * The version of the OpenAPI document: 2020-11-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateControlPanelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateControlPanelRequest::OAICreateControlPanelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateControlPanelRequest::OAICreateControlPanelRequest() {
    this->initializeModel();
}

OAICreateControlPanelRequest::~OAICreateControlPanelRequest() {}

void OAICreateControlPanelRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_cluster_arn_isSet = false;
    m_cluster_arn_isValid = false;

    m_control_panel_name_isSet = false;
    m_control_panel_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateControlPanelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateControlPanelRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_cluster_arn_isValid = ::OpenAPI::fromJsonValue(m_cluster_arn, json[QString("ClusterArn")]);
    m_cluster_arn_isSet = !json[QString("ClusterArn")].isNull() && m_cluster_arn_isValid;

    m_control_panel_name_isValid = ::OpenAPI::fromJsonValue(m_control_panel_name, json[QString("ControlPanelName")]);
    m_control_panel_name_isSet = !json[QString("ControlPanelName")].isNull() && m_control_panel_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateControlPanelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateControlPanelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_cluster_arn_isSet) {
        obj.insert(QString("ClusterArn"), ::OpenAPI::toJsonValue(m_cluster_arn));
    }
    if (m_control_panel_name_isSet) {
        obj.insert(QString("ControlPanelName"), ::OpenAPI::toJsonValue(m_control_panel_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateControlPanelRequest::getClientToken() const {
    return m_client_token;
}
void OAICreateControlPanelRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateControlPanelRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateControlPanelRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateControlPanelRequest::getClusterArn() const {
    return m_cluster_arn;
}
void OAICreateControlPanelRequest::setClusterArn(const QString &cluster_arn) {
    m_cluster_arn = cluster_arn;
    m_cluster_arn_isSet = true;
}

bool OAICreateControlPanelRequest::is_cluster_arn_Set() const{
    return m_cluster_arn_isSet;
}

bool OAICreateControlPanelRequest::is_cluster_arn_Valid() const{
    return m_cluster_arn_isValid;
}

QString OAICreateControlPanelRequest::getControlPanelName() const {
    return m_control_panel_name;
}
void OAICreateControlPanelRequest::setControlPanelName(const QString &control_panel_name) {
    m_control_panel_name = control_panel_name;
    m_control_panel_name_isSet = true;
}

bool OAICreateControlPanelRequest::is_control_panel_name_Set() const{
    return m_control_panel_name_isSet;
}

bool OAICreateControlPanelRequest::is_control_panel_name_Valid() const{
    return m_control_panel_name_isValid;
}

QMap OAICreateControlPanelRequest::getTags() const {
    return m_tags;
}
void OAICreateControlPanelRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateControlPanelRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateControlPanelRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateControlPanelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_panel_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateControlPanelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_arn_isValid && m_control_panel_name_isValid && true;
}

} // namespace OpenAPI
