# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateRoutingControlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, cluster_arn: str=None, control_panel_arn: str=None, routing_control_name: str=None):
        """CreateRoutingControlRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateRoutingControlRequest.
        :param cluster_arn: The cluster_arn of this CreateRoutingControlRequest.
        :param control_panel_arn: The control_panel_arn of this CreateRoutingControlRequest.
        :param routing_control_name: The routing_control_name of this CreateRoutingControlRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'cluster_arn': str,
            'control_panel_arn': str,
            'routing_control_name': str
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'cluster_arn': 'ClusterArn',
            'control_panel_arn': 'ControlPanelArn',
            'routing_control_name': 'RoutingControlName'
        }

        self._client_token = client_token
        self._cluster_arn = cluster_arn
        self._control_panel_arn = control_panel_arn
        self._routing_control_name = routing_control_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRoutingControlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRoutingControl_request of this CreateRoutingControlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateRoutingControlRequest.

        A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.

        :return: The client_token of this CreateRoutingControlRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateRoutingControlRequest.

        A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.

        :param client_token: The client_token of this CreateRoutingControlRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^\S+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^\S+$/`")

        self._client_token = client_token

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this CreateRoutingControlRequest.

        The Amazon Resource Name (ARN) of the cluster that includes the routing control.

        :return: The cluster_arn of this CreateRoutingControlRequest.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this CreateRoutingControlRequest.

        The Amazon Resource Name (ARN) of the cluster that includes the routing control.

        :param cluster_arn: The cluster_arn of this CreateRoutingControlRequest.
        :type cluster_arn: str
        """
        if cluster_arn is None:
            raise ValueError("Invalid value for `cluster_arn`, must not be `None`")
        if cluster_arn is not None and len(cluster_arn) > 256:
            raise ValueError("Invalid value for `cluster_arn`, length must be less than or equal to `256`")
        if cluster_arn is not None and len(cluster_arn) < 1:
            raise ValueError("Invalid value for `cluster_arn`, length must be greater than or equal to `1`")
        if cluster_arn is not None and not re.search(r'^[A-Za-z0-9:\/_-]*$', cluster_arn):
            raise ValueError("Invalid value for `cluster_arn`, must be a follow pattern or equal to `/^[A-Za-z0-9:\/_-]*$/`")

        self._cluster_arn = cluster_arn

    @property
    def control_panel_arn(self):
        """Gets the control_panel_arn of this CreateRoutingControlRequest.

        The Amazon Resource Name (ARN) of the control panel that includes the routing control.

        :return: The control_panel_arn of this CreateRoutingControlRequest.
        :rtype: str
        """
        return self._control_panel_arn

    @control_panel_arn.setter
    def control_panel_arn(self, control_panel_arn):
        """Sets the control_panel_arn of this CreateRoutingControlRequest.

        The Amazon Resource Name (ARN) of the control panel that includes the routing control.

        :param control_panel_arn: The control_panel_arn of this CreateRoutingControlRequest.
        :type control_panel_arn: str
        """
        if control_panel_arn is not None and len(control_panel_arn) > 256:
            raise ValueError("Invalid value for `control_panel_arn`, length must be less than or equal to `256`")
        if control_panel_arn is not None and len(control_panel_arn) < 1:
            raise ValueError("Invalid value for `control_panel_arn`, length must be greater than or equal to `1`")
        if control_panel_arn is not None and not re.search(r'^[A-Za-z0-9:\/_-]*$', control_panel_arn):
            raise ValueError("Invalid value for `control_panel_arn`, must be a follow pattern or equal to `/^[A-Za-z0-9:\/_-]*$/`")

        self._control_panel_arn = control_panel_arn

    @property
    def routing_control_name(self):
        """Gets the routing_control_name of this CreateRoutingControlRequest.

        The name of the routing control.

        :return: The routing_control_name of this CreateRoutingControlRequest.
        :rtype: str
        """
        return self._routing_control_name

    @routing_control_name.setter
    def routing_control_name(self, routing_control_name):
        """Sets the routing_control_name of this CreateRoutingControlRequest.

        The name of the routing control.

        :param routing_control_name: The routing_control_name of this CreateRoutingControlRequest.
        :type routing_control_name: str
        """
        if routing_control_name is None:
            raise ValueError("Invalid value for `routing_control_name`, must not be `None`")
        if routing_control_name is not None and len(routing_control_name) > 64:
            raise ValueError("Invalid value for `routing_control_name`, length must be less than or equal to `64`")
        if routing_control_name is not None and len(routing_control_name) < 1:
            raise ValueError("Invalid value for `routing_control_name`, length must be greater than or equal to `1`")
        if routing_control_name is not None and not re.search(r'^\S+$', routing_control_name):
            raise ValueError("Invalid value for `routing_control_name`, must be a follow pattern or equal to `/^\S+$/`")

        self._routing_control_name = routing_control_name
