# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_safety_rule_request_assertion_rule_rule_config import CreateSafetyRuleRequestAssertionRuleRuleConfig
from openapi_server import util


class CreateSafetyRuleRequestAssertionRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asserted_controls: List=None, control_panel_arn: str=None, name: str=None, rule_config: CreateSafetyRuleRequestAssertionRuleRuleConfig=None, wait_period_ms: int=None):
        """CreateSafetyRuleRequestAssertionRule - a model defined in OpenAPI

        :param asserted_controls: The asserted_controls of this CreateSafetyRuleRequestAssertionRule.
        :param control_panel_arn: The control_panel_arn of this CreateSafetyRuleRequestAssertionRule.
        :param name: The name of this CreateSafetyRuleRequestAssertionRule.
        :param rule_config: The rule_config of this CreateSafetyRuleRequestAssertionRule.
        :param wait_period_ms: The wait_period_ms of this CreateSafetyRuleRequestAssertionRule.
        """
        self.openapi_types = {
            'asserted_controls': List,
            'control_panel_arn': str,
            'name': str,
            'rule_config': CreateSafetyRuleRequestAssertionRuleRuleConfig,
            'wait_period_ms': int
        }

        self.attribute_map = {
            'asserted_controls': 'AssertedControls',
            'control_panel_arn': 'ControlPanelArn',
            'name': 'Name',
            'rule_config': 'RuleConfig',
            'wait_period_ms': 'WaitPeriodMs'
        }

        self._asserted_controls = asserted_controls
        self._control_panel_arn = control_panel_arn
        self._name = name
        self._rule_config = rule_config
        self._wait_period_ms = wait_period_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSafetyRuleRequestAssertionRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSafetyRuleRequest_AssertionRule of this CreateSafetyRuleRequestAssertionRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asserted_controls(self):
        """Gets the asserted_controls of this CreateSafetyRuleRequestAssertionRule.


        :return: The asserted_controls of this CreateSafetyRuleRequestAssertionRule.
        :rtype: List
        """
        return self._asserted_controls

    @asserted_controls.setter
    def asserted_controls(self, asserted_controls):
        """Sets the asserted_controls of this CreateSafetyRuleRequestAssertionRule.


        :param asserted_controls: The asserted_controls of this CreateSafetyRuleRequestAssertionRule.
        :type asserted_controls: List
        """
        if asserted_controls is None:
            raise ValueError("Invalid value for `asserted_controls`, must not be `None`")

        self._asserted_controls = asserted_controls

    @property
    def control_panel_arn(self):
        """Gets the control_panel_arn of this CreateSafetyRuleRequestAssertionRule.


        :return: The control_panel_arn of this CreateSafetyRuleRequestAssertionRule.
        :rtype: str
        """
        return self._control_panel_arn

    @control_panel_arn.setter
    def control_panel_arn(self, control_panel_arn):
        """Sets the control_panel_arn of this CreateSafetyRuleRequestAssertionRule.


        :param control_panel_arn: The control_panel_arn of this CreateSafetyRuleRequestAssertionRule.
        :type control_panel_arn: str
        """
        if control_panel_arn is None:
            raise ValueError("Invalid value for `control_panel_arn`, must not be `None`")

        self._control_panel_arn = control_panel_arn

    @property
    def name(self):
        """Gets the name of this CreateSafetyRuleRequestAssertionRule.


        :return: The name of this CreateSafetyRuleRequestAssertionRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSafetyRuleRequestAssertionRule.


        :param name: The name of this CreateSafetyRuleRequestAssertionRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rule_config(self):
        """Gets the rule_config of this CreateSafetyRuleRequestAssertionRule.


        :return: The rule_config of this CreateSafetyRuleRequestAssertionRule.
        :rtype: CreateSafetyRuleRequestAssertionRuleRuleConfig
        """
        return self._rule_config

    @rule_config.setter
    def rule_config(self, rule_config):
        """Sets the rule_config of this CreateSafetyRuleRequestAssertionRule.


        :param rule_config: The rule_config of this CreateSafetyRuleRequestAssertionRule.
        :type rule_config: CreateSafetyRuleRequestAssertionRuleRuleConfig
        """
        if rule_config is None:
            raise ValueError("Invalid value for `rule_config`, must not be `None`")

        self._rule_config = rule_config

    @property
    def wait_period_ms(self):
        """Gets the wait_period_ms of this CreateSafetyRuleRequestAssertionRule.


        :return: The wait_period_ms of this CreateSafetyRuleRequestAssertionRule.
        :rtype: int
        """
        return self._wait_period_ms

    @wait_period_ms.setter
    def wait_period_ms(self, wait_period_ms):
        """Sets the wait_period_ms of this CreateSafetyRuleRequestAssertionRule.


        :param wait_period_ms: The wait_period_ms of this CreateSafetyRuleRequestAssertionRule.
        :type wait_period_ms: int
        """
        if wait_period_ms is None:
            raise ValueError("Invalid value for `wait_period_ms`, must not be `None`")

        self._wait_period_ms = wait_period_ms
