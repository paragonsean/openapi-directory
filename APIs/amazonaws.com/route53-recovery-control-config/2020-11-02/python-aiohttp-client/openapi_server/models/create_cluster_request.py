# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, cluster_name: str=None, tags: Dict[str, str]=None):
        """CreateClusterRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateClusterRequest.
        :param cluster_name: The cluster_name of this CreateClusterRequest.
        :param tags: The tags of this CreateClusterRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'cluster_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'ClientToken',
            'cluster_name': 'ClusterName',
            'tags': 'Tags'
        }

        self._client_token = client_token
        self._cluster_name = cluster_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCluster_request of this CreateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateClusterRequest.

        A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.

        :return: The client_token of this CreateClusterRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateClusterRequest.

        A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.

        :param client_token: The client_token of this CreateClusterRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^\S+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^\S+$/`")

        self._client_token = client_token

    @property
    def cluster_name(self):
        """Gets the cluster_name of this CreateClusterRequest.

        The name of the cluster.

        :return: The cluster_name of this CreateClusterRequest.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this CreateClusterRequest.

        The name of the cluster.

        :param cluster_name: The cluster_name of this CreateClusterRequest.
        :type cluster_name: str
        """
        if cluster_name is None:
            raise ValueError("Invalid value for `cluster_name`, must not be `None`")
        if cluster_name is not None and len(cluster_name) > 64:
            raise ValueError("Invalid value for `cluster_name`, length must be less than or equal to `64`")
        if cluster_name is not None and len(cluster_name) < 1:
            raise ValueError("Invalid value for `cluster_name`, length must be greater than or equal to `1`")
        if cluster_name is not None and not re.search(r'^\S+$', cluster_name):
            raise ValueError("Invalid value for `cluster_name`, must be a follow pattern or equal to `/^\S+$/`")

        self._cluster_name = cluster_name

    @property
    def tags(self):
        """Gets the tags of this CreateClusterRequest.

        The tags associated with the cluster.

        :return: The tags of this CreateClusterRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateClusterRequest.

        The tags associated with the cluster.

        :param tags: The tags of this CreateClusterRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
