# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rule_type import RuleType
from openapi_server import util


class CreateSafetyRuleRequestGatingRuleRuleConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, inverted: bool=None, threshold: int=None, type: RuleType=None):
        """CreateSafetyRuleRequestGatingRuleRuleConfig - a model defined in OpenAPI

        :param inverted: The inverted of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :param threshold: The threshold of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :param type: The type of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        """
        self.openapi_types = {
            'inverted': bool,
            'threshold': int,
            'type': RuleType
        }

        self.attribute_map = {
            'inverted': 'Inverted',
            'threshold': 'Threshold',
            'type': 'Type'
        }

        self._inverted = inverted
        self._threshold = threshold
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSafetyRuleRequestGatingRuleRuleConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSafetyRule_request_GatingRule_RuleConfig of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inverted(self):
        """Gets the inverted of this CreateSafetyRuleRequestGatingRuleRuleConfig.


        :return: The inverted of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :rtype: bool
        """
        return self._inverted

    @inverted.setter
    def inverted(self, inverted):
        """Sets the inverted of this CreateSafetyRuleRequestGatingRuleRuleConfig.


        :param inverted: The inverted of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :type inverted: bool
        """
        if inverted is None:
            raise ValueError("Invalid value for `inverted`, must not be `None`")

        self._inverted = inverted

    @property
    def threshold(self):
        """Gets the threshold of this CreateSafetyRuleRequestGatingRuleRuleConfig.


        :return: The threshold of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this CreateSafetyRuleRequestGatingRuleRuleConfig.


        :param threshold: The threshold of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :type threshold: int
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")

        self._threshold = threshold

    @property
    def type(self):
        """Gets the type of this CreateSafetyRuleRequestGatingRuleRuleConfig.


        :return: The type of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :rtype: RuleType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSafetyRuleRequestGatingRuleRuleConfig.


        :param type: The type of this CreateSafetyRuleRequestGatingRuleRuleConfig.
        :type type: RuleType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
