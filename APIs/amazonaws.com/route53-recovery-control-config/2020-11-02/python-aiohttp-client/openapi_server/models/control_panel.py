# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ControlPanel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_arn: str=None, control_panel_arn: str=None, default_control_panel: bool=None, name: str=None, routing_control_count: int=None, status: Status=None):
        """ControlPanel - a model defined in OpenAPI

        :param cluster_arn: The cluster_arn of this ControlPanel.
        :param control_panel_arn: The control_panel_arn of this ControlPanel.
        :param default_control_panel: The default_control_panel of this ControlPanel.
        :param name: The name of this ControlPanel.
        :param routing_control_count: The routing_control_count of this ControlPanel.
        :param status: The status of this ControlPanel.
        """
        self.openapi_types = {
            'cluster_arn': str,
            'control_panel_arn': str,
            'default_control_panel': bool,
            'name': str,
            'routing_control_count': int,
            'status': Status
        }

        self.attribute_map = {
            'cluster_arn': 'ClusterArn',
            'control_panel_arn': 'ControlPanelArn',
            'default_control_panel': 'DefaultControlPanel',
            'name': 'Name',
            'routing_control_count': 'RoutingControlCount',
            'status': 'Status'
        }

        self._cluster_arn = cluster_arn
        self._control_panel_arn = control_panel_arn
        self._default_control_panel = default_control_panel
        self._name = name
        self._routing_control_count = routing_control_count
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ControlPanel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ControlPanel of this ControlPanel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_arn(self):
        """Gets the cluster_arn of this ControlPanel.


        :return: The cluster_arn of this ControlPanel.
        :rtype: str
        """
        return self._cluster_arn

    @cluster_arn.setter
    def cluster_arn(self, cluster_arn):
        """Sets the cluster_arn of this ControlPanel.


        :param cluster_arn: The cluster_arn of this ControlPanel.
        :type cluster_arn: str
        """

        self._cluster_arn = cluster_arn

    @property
    def control_panel_arn(self):
        """Gets the control_panel_arn of this ControlPanel.


        :return: The control_panel_arn of this ControlPanel.
        :rtype: str
        """
        return self._control_panel_arn

    @control_panel_arn.setter
    def control_panel_arn(self, control_panel_arn):
        """Sets the control_panel_arn of this ControlPanel.


        :param control_panel_arn: The control_panel_arn of this ControlPanel.
        :type control_panel_arn: str
        """

        self._control_panel_arn = control_panel_arn

    @property
    def default_control_panel(self):
        """Gets the default_control_panel of this ControlPanel.


        :return: The default_control_panel of this ControlPanel.
        :rtype: bool
        """
        return self._default_control_panel

    @default_control_panel.setter
    def default_control_panel(self, default_control_panel):
        """Sets the default_control_panel of this ControlPanel.


        :param default_control_panel: The default_control_panel of this ControlPanel.
        :type default_control_panel: bool
        """

        self._default_control_panel = default_control_panel

    @property
    def name(self):
        """Gets the name of this ControlPanel.


        :return: The name of this ControlPanel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ControlPanel.


        :param name: The name of this ControlPanel.
        :type name: str
        """

        self._name = name

    @property
    def routing_control_count(self):
        """Gets the routing_control_count of this ControlPanel.


        :return: The routing_control_count of this ControlPanel.
        :rtype: int
        """
        return self._routing_control_count

    @routing_control_count.setter
    def routing_control_count(self, routing_control_count):
        """Sets the routing_control_count of this ControlPanel.


        :param routing_control_count: The routing_control_count of this ControlPanel.
        :type routing_control_count: int
        """

        self._routing_control_count = routing_control_count

    @property
    def status(self):
        """Gets the status of this ControlPanel.


        :return: The status of this ControlPanel.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ControlPanel.


        :param status: The status of this ControlPanel.
        :type status: Status
        """

        self._status = status
