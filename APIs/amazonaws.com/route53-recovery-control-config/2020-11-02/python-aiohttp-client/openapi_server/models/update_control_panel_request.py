# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateControlPanelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_panel_arn: str=None, control_panel_name: str=None):
        """UpdateControlPanelRequest - a model defined in OpenAPI

        :param control_panel_arn: The control_panel_arn of this UpdateControlPanelRequest.
        :param control_panel_name: The control_panel_name of this UpdateControlPanelRequest.
        """
        self.openapi_types = {
            'control_panel_arn': str,
            'control_panel_name': str
        }

        self.attribute_map = {
            'control_panel_arn': 'ControlPanelArn',
            'control_panel_name': 'ControlPanelName'
        }

        self._control_panel_arn = control_panel_arn
        self._control_panel_name = control_panel_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateControlPanelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateControlPanel_request of this UpdateControlPanelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_panel_arn(self):
        """Gets the control_panel_arn of this UpdateControlPanelRequest.

        The Amazon Resource Name (ARN) of the control panel.

        :return: The control_panel_arn of this UpdateControlPanelRequest.
        :rtype: str
        """
        return self._control_panel_arn

    @control_panel_arn.setter
    def control_panel_arn(self, control_panel_arn):
        """Sets the control_panel_arn of this UpdateControlPanelRequest.

        The Amazon Resource Name (ARN) of the control panel.

        :param control_panel_arn: The control_panel_arn of this UpdateControlPanelRequest.
        :type control_panel_arn: str
        """
        if control_panel_arn is None:
            raise ValueError("Invalid value for `control_panel_arn`, must not be `None`")
        if control_panel_arn is not None and len(control_panel_arn) > 256:
            raise ValueError("Invalid value for `control_panel_arn`, length must be less than or equal to `256`")
        if control_panel_arn is not None and len(control_panel_arn) < 1:
            raise ValueError("Invalid value for `control_panel_arn`, length must be greater than or equal to `1`")
        if control_panel_arn is not None and not re.search(r'^[A-Za-z0-9:\/_-]*$', control_panel_arn):
            raise ValueError("Invalid value for `control_panel_arn`, must be a follow pattern or equal to `/^[A-Za-z0-9:\/_-]*$/`")

        self._control_panel_arn = control_panel_arn

    @property
    def control_panel_name(self):
        """Gets the control_panel_name of this UpdateControlPanelRequest.

        The name of the control panel.

        :return: The control_panel_name of this UpdateControlPanelRequest.
        :rtype: str
        """
        return self._control_panel_name

    @control_panel_name.setter
    def control_panel_name(self, control_panel_name):
        """Sets the control_panel_name of this UpdateControlPanelRequest.

        The name of the control panel.

        :param control_panel_name: The control_panel_name of this UpdateControlPanelRequest.
        :type control_panel_name: str
        """
        if control_panel_name is None:
            raise ValueError("Invalid value for `control_panel_name`, must not be `None`")
        if control_panel_name is not None and len(control_panel_name) > 64:
            raise ValueError("Invalid value for `control_panel_name`, length must be less than or equal to `64`")
        if control_panel_name is not None and len(control_panel_name) < 1:
            raise ValueError("Invalid value for `control_panel_name`, length must be greater than or equal to `1`")
        if control_panel_name is not None and not re.search(r'^\S+$', control_panel_name):
            raise ValueError("Invalid value for `control_panel_name`, must be a follow pattern or equal to `/^\S+$/`")

        self._control_panel_name = control_panel_name
