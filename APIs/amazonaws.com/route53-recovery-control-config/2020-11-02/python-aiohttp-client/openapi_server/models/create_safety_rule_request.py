# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_safety_rule_request_assertion_rule import CreateSafetyRuleRequestAssertionRule
from openapi_server.models.create_safety_rule_request_gating_rule import CreateSafetyRuleRequestGatingRule
import re
from openapi_server import util


class CreateSafetyRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assertion_rule: CreateSafetyRuleRequestAssertionRule=None, client_token: str=None, gating_rule: CreateSafetyRuleRequestGatingRule=None, tags: Dict[str, str]=None):
        """CreateSafetyRuleRequest - a model defined in OpenAPI

        :param assertion_rule: The assertion_rule of this CreateSafetyRuleRequest.
        :param client_token: The client_token of this CreateSafetyRuleRequest.
        :param gating_rule: The gating_rule of this CreateSafetyRuleRequest.
        :param tags: The tags of this CreateSafetyRuleRequest.
        """
        self.openapi_types = {
            'assertion_rule': CreateSafetyRuleRequestAssertionRule,
            'client_token': str,
            'gating_rule': CreateSafetyRuleRequestGatingRule,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'assertion_rule': 'AssertionRule',
            'client_token': 'ClientToken',
            'gating_rule': 'GatingRule',
            'tags': 'Tags'
        }

        self._assertion_rule = assertion_rule
        self._client_token = client_token
        self._gating_rule = gating_rule
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSafetyRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSafetyRule_request of this CreateSafetyRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assertion_rule(self):
        """Gets the assertion_rule of this CreateSafetyRuleRequest.


        :return: The assertion_rule of this CreateSafetyRuleRequest.
        :rtype: CreateSafetyRuleRequestAssertionRule
        """
        return self._assertion_rule

    @assertion_rule.setter
    def assertion_rule(self, assertion_rule):
        """Sets the assertion_rule of this CreateSafetyRuleRequest.


        :param assertion_rule: The assertion_rule of this CreateSafetyRuleRequest.
        :type assertion_rule: CreateSafetyRuleRequestAssertionRule
        """

        self._assertion_rule = assertion_rule

    @property
    def client_token(self):
        """Gets the client_token of this CreateSafetyRuleRequest.

        A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.

        :return: The client_token of this CreateSafetyRuleRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateSafetyRuleRequest.

        A unique, case-sensitive string of up to 64 ASCII characters. To make an idempotent API request with an action, specify a client token in the request.

        :param client_token: The client_token of this CreateSafetyRuleRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")
        if client_token is not None and not re.search(r'^\S+$', client_token):
            raise ValueError("Invalid value for `client_token`, must be a follow pattern or equal to `/^\S+$/`")

        self._client_token = client_token

    @property
    def gating_rule(self):
        """Gets the gating_rule of this CreateSafetyRuleRequest.


        :return: The gating_rule of this CreateSafetyRuleRequest.
        :rtype: CreateSafetyRuleRequestGatingRule
        """
        return self._gating_rule

    @gating_rule.setter
    def gating_rule(self, gating_rule):
        """Sets the gating_rule of this CreateSafetyRuleRequest.


        :param gating_rule: The gating_rule of this CreateSafetyRuleRequest.
        :type gating_rule: CreateSafetyRuleRequestGatingRule
        """

        self._gating_rule = gating_rule

    @property
    def tags(self):
        """Gets the tags of this CreateSafetyRuleRequest.

        The tags associated with the safety rule.

        :return: The tags of this CreateSafetyRuleRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSafetyRuleRequest.

        The tags associated with the safety rule.

        :param tags: The tags of this CreateSafetyRuleRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
