# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateRoutingControlRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, routing_control_arn: str=None, routing_control_name: str=None):
        """UpdateRoutingControlRequest - a model defined in OpenAPI

        :param routing_control_arn: The routing_control_arn of this UpdateRoutingControlRequest.
        :param routing_control_name: The routing_control_name of this UpdateRoutingControlRequest.
        """
        self.openapi_types = {
            'routing_control_arn': str,
            'routing_control_name': str
        }

        self.attribute_map = {
            'routing_control_arn': 'RoutingControlArn',
            'routing_control_name': 'RoutingControlName'
        }

        self._routing_control_arn = routing_control_arn
        self._routing_control_name = routing_control_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRoutingControlRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRoutingControl_request of this UpdateRoutingControlRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def routing_control_arn(self):
        """Gets the routing_control_arn of this UpdateRoutingControlRequest.

        The Amazon Resource Name (ARN) of the routing control.

        :return: The routing_control_arn of this UpdateRoutingControlRequest.
        :rtype: str
        """
        return self._routing_control_arn

    @routing_control_arn.setter
    def routing_control_arn(self, routing_control_arn):
        """Sets the routing_control_arn of this UpdateRoutingControlRequest.

        The Amazon Resource Name (ARN) of the routing control.

        :param routing_control_arn: The routing_control_arn of this UpdateRoutingControlRequest.
        :type routing_control_arn: str
        """
        if routing_control_arn is None:
            raise ValueError("Invalid value for `routing_control_arn`, must not be `None`")
        if routing_control_arn is not None and len(routing_control_arn) > 256:
            raise ValueError("Invalid value for `routing_control_arn`, length must be less than or equal to `256`")
        if routing_control_arn is not None and len(routing_control_arn) < 1:
            raise ValueError("Invalid value for `routing_control_arn`, length must be greater than or equal to `1`")
        if routing_control_arn is not None and not re.search(r'^[A-Za-z0-9:\/_-]*$', routing_control_arn):
            raise ValueError("Invalid value for `routing_control_arn`, must be a follow pattern or equal to `/^[A-Za-z0-9:\/_-]*$/`")

        self._routing_control_arn = routing_control_arn

    @property
    def routing_control_name(self):
        """Gets the routing_control_name of this UpdateRoutingControlRequest.

        The name of the routing control.

        :return: The routing_control_name of this UpdateRoutingControlRequest.
        :rtype: str
        """
        return self._routing_control_name

    @routing_control_name.setter
    def routing_control_name(self, routing_control_name):
        """Sets the routing_control_name of this UpdateRoutingControlRequest.

        The name of the routing control.

        :param routing_control_name: The routing_control_name of this UpdateRoutingControlRequest.
        :type routing_control_name: str
        """
        if routing_control_name is None:
            raise ValueError("Invalid value for `routing_control_name`, must not be `None`")
        if routing_control_name is not None and len(routing_control_name) > 64:
            raise ValueError("Invalid value for `routing_control_name`, length must be less than or equal to `64`")
        if routing_control_name is not None and len(routing_control_name) < 1:
            raise ValueError("Invalid value for `routing_control_name`, length must be greater than or equal to `1`")
        if routing_control_name is not None and not re.search(r'^\S+$', routing_control_name):
            raise ValueError("Invalid value for `routing_control_name`, must be a follow pattern or equal to `/^\S+$/`")

        self._routing_control_name = routing_control_name
