/*
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.ListChangeSetsRequestSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListChangeSetsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:27.767483-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListChangeSetsRequest {
  public static final String SERIALIZED_NAME_CATALOG = "Catalog";
  @SerializedName(SERIALIZED_NAME_CATALOG)
  private String catalog;

  public static final String SERIALIZED_NAME_FILTER_LIST = "FilterList";
  @SerializedName(SERIALIZED_NAME_FILTER_LIST)
  private List<Filter> filterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT = "Sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private ListChangeSetsRequestSort sort;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListChangeSetsRequest() {
  }

  public ListChangeSetsRequest catalog(String catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   * The catalog related to the request. Fixed value: &lt;code&gt;AWSMarketplace&lt;/code&gt; 
   * @return catalog
   */
  @javax.annotation.Nonnull
  public String getCatalog() {
    return catalog;
  }

  public void setCatalog(String catalog) {
    this.catalog = catalog;
  }


  public ListChangeSetsRequest filterList(List<Filter> filterList) {
    this.filterList = filterList;
    return this;
  }

  public ListChangeSetsRequest addFilterListItem(Filter filterListItem) {
    if (this.filterList == null) {
      this.filterList = new ArrayList<>();
    }
    this.filterList.add(filterListItem);
    return this;
  }

  /**
   * An array of filter objects.
   * @return filterList
   */
  @javax.annotation.Nullable
  public List<Filter> getFilterList() {
    return filterList;
  }

  public void setFilterList(List<Filter> filterList) {
    this.filterList = filterList;
  }


  public ListChangeSetsRequest sort(ListChangeSetsRequestSort sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public ListChangeSetsRequestSort getSort() {
    return sort;
  }

  public void setSort(ListChangeSetsRequestSort sort) {
    this.sort = sort;
  }


  public ListChangeSetsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.
   * minimum: 1
   * maximum: 20
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListChangeSetsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The token value retrieved from a previous call to access the next page of results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListChangeSetsRequest listChangeSetsRequest = (ListChangeSetsRequest) o;
    return Objects.equals(this.catalog, listChangeSetsRequest.catalog) &&
        Objects.equals(this.filterList, listChangeSetsRequest.filterList) &&
        Objects.equals(this.sort, listChangeSetsRequest.sort) &&
        Objects.equals(this.maxResults, listChangeSetsRequest.maxResults) &&
        Objects.equals(this.nextToken, listChangeSetsRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalog, filterList, sort, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListChangeSetsRequest {\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    filterList: ").append(toIndentedString(filterList)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Catalog");
    openapiFields.add("FilterList");
    openapiFields.add("Sort");
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Catalog");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListChangeSetsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListChangeSetsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListChangeSetsRequest is not found in the empty JSON string", ListChangeSetsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListChangeSetsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListChangeSetsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListChangeSetsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Catalog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Catalog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Catalog").toString()));
      }
      if (jsonObj.get("FilterList") != null && !jsonObj.get("FilterList").isJsonNull()) {
        JsonArray jsonArrayfilterList = jsonObj.getAsJsonArray("FilterList");
        if (jsonArrayfilterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FilterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FilterList` to be an array in the JSON string but got `%s`", jsonObj.get("FilterList").toString()));
          }

          // validate the optional field `FilterList` (array)
          for (int i = 0; i < jsonArrayfilterList.size(); i++) {
            Filter.validateJsonElement(jsonArrayfilterList.get(i));
          };
        }
      }
      // validate the optional field `Sort`
      if (jsonObj.get("Sort") != null && !jsonObj.get("Sort").isJsonNull()) {
        ListChangeSetsRequestSort.validateJsonElement(jsonObj.get("Sort"));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListChangeSetsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListChangeSetsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListChangeSetsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListChangeSetsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListChangeSetsRequest>() {
           @Override
           public void write(JsonWriter out, ListChangeSetsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListChangeSetsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListChangeSetsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListChangeSetsRequest
   * @throws IOException if the JSON string is invalid with respect to ListChangeSetsRequest
   */
  public static ListChangeSetsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListChangeSetsRequest.class);
  }

  /**
   * Convert an instance of ListChangeSetsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

