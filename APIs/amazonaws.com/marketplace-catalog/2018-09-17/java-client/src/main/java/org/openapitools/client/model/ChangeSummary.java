/*
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChangeEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object is a container for common summary information about the change. The summary doesn&#39;t contain the whole change structure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:27.767483-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChangeSummary {
  public static final String SERIALIZED_NAME_CHANGE_TYPE = "ChangeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private String changeType;

  public static final String SERIALIZED_NAME_ENTITY = "Entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private ChangeEntity entity;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_ERROR_DETAIL_LIST = "ErrorDetailList";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAIL_LIST)
  private List errorDetailList;

  public static final String SERIALIZED_NAME_CHANGE_NAME = "ChangeName";
  @SerializedName(SERIALIZED_NAME_CHANGE_NAME)
  private String changeName;

  public ChangeSummary() {
  }

  public ChangeSummary changeType(String changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * Get changeType
   * @return changeType
   */
  @javax.annotation.Nullable
  public String getChangeType() {
    return changeType;
  }

  public void setChangeType(String changeType) {
    this.changeType = changeType;
  }


  public ChangeSummary entity(ChangeEntity entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public ChangeEntity getEntity() {
    return entity;
  }

  public void setEntity(ChangeEntity entity) {
    this.entity = entity;
  }


  public ChangeSummary details(String details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public ChangeSummary errorDetailList(List errorDetailList) {
    this.errorDetailList = errorDetailList;
    return this;
  }

  /**
   * Get errorDetailList
   * @return errorDetailList
   */
  @javax.annotation.Nullable
  public List getErrorDetailList() {
    return errorDetailList;
  }

  public void setErrorDetailList(List errorDetailList) {
    this.errorDetailList = errorDetailList;
  }


  public ChangeSummary changeName(String changeName) {
    this.changeName = changeName;
    return this;
  }

  /**
   * Get changeName
   * @return changeName
   */
  @javax.annotation.Nullable
  public String getChangeName() {
    return changeName;
  }

  public void setChangeName(String changeName) {
    this.changeName = changeName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChangeSummary changeSummary = (ChangeSummary) o;
    return Objects.equals(this.changeType, changeSummary.changeType) &&
        Objects.equals(this.entity, changeSummary.entity) &&
        Objects.equals(this.details, changeSummary.details) &&
        Objects.equals(this.errorDetailList, changeSummary.errorDetailList) &&
        Objects.equals(this.changeName, changeSummary.changeName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeType, entity, details, errorDetailList, changeName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChangeSummary {\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    errorDetailList: ").append(toIndentedString(errorDetailList)).append("\n");
    sb.append("    changeName: ").append(toIndentedString(changeName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ChangeType");
    openapiFields.add("Entity");
    openapiFields.add("Details");
    openapiFields.add("ErrorDetailList");
    openapiFields.add("ChangeName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChangeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChangeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChangeSummary is not found in the empty JSON string", ChangeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChangeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChangeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ChangeType`
      if (jsonObj.get("ChangeType") != null && !jsonObj.get("ChangeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeType"));
      }
      // validate the optional field `Entity`
      if (jsonObj.get("Entity") != null && !jsonObj.get("Entity").isJsonNull()) {
        ChangeEntity.validateJsonElement(jsonObj.get("Entity"));
      }
      // validate the optional field `Details`
      if (jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Details"));
      }
      // validate the optional field `ErrorDetailList`
      if (jsonObj.get("ErrorDetailList") != null && !jsonObj.get("ErrorDetailList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ErrorDetailList"));
      }
      // validate the optional field `ChangeName`
      if (jsonObj.get("ChangeName") != null && !jsonObj.get("ChangeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ChangeName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChangeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChangeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChangeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChangeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<ChangeSummary>() {
           @Override
           public void write(JsonWriter out, ChangeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChangeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChangeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChangeSummary
   * @throws IOException if the JSON string is invalid with respect to ChangeSummary
   */
  public static ChangeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChangeSummary.class);
  }

  /**
   * Convert an instance of ChangeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

