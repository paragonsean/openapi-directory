/*
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Change;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartChangeSetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:27.767483-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartChangeSetRequest {
  public static final String SERIALIZED_NAME_CATALOG = "Catalog";
  @SerializedName(SERIALIZED_NAME_CATALOG)
  private String catalog;

  public static final String SERIALIZED_NAME_CHANGE_SET = "ChangeSet";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET)
  private List<Change> changeSet = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANGE_SET_NAME = "ChangeSetName";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_NAME)
  private String changeSetName;

  public static final String SERIALIZED_NAME_CLIENT_REQUEST_TOKEN = "ClientRequestToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_REQUEST_TOKEN)
  private String clientRequestToken;

  public static final String SERIALIZED_NAME_CHANGE_SET_TAGS = "ChangeSetTags";
  @SerializedName(SERIALIZED_NAME_CHANGE_SET_TAGS)
  private List<Tag> changeSetTags = new ArrayList<>();

  public StartChangeSetRequest() {
  }

  public StartChangeSetRequest catalog(String catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   * The catalog related to the request. Fixed value: &lt;code&gt;AWSMarketplace&lt;/code&gt; 
   * @return catalog
   */
  @javax.annotation.Nonnull
  public String getCatalog() {
    return catalog;
  }

  public void setCatalog(String catalog) {
    this.catalog = catalog;
  }


  public StartChangeSetRequest changeSet(List<Change> changeSet) {
    this.changeSet = changeSet;
    return this;
  }

  public StartChangeSetRequest addChangeSetItem(Change changeSetItem) {
    if (this.changeSet == null) {
      this.changeSet = new ArrayList<>();
    }
    this.changeSet.add(changeSetItem);
    return this;
  }

  /**
   * Array of &lt;code&gt;change&lt;/code&gt; object.
   * @return changeSet
   */
  @javax.annotation.Nonnull
  public List<Change> getChangeSet() {
    return changeSet;
  }

  public void setChangeSet(List<Change> changeSet) {
    this.changeSet = changeSet;
  }


  public StartChangeSetRequest changeSetName(String changeSetName) {
    this.changeSetName = changeSetName;
    return this;
  }

  /**
   * Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. 
   * @return changeSetName
   */
  @javax.annotation.Nullable
  public String getChangeSetName() {
    return changeSetName;
  }

  public void setChangeSetName(String changeSetName) {
    this.changeSetName = changeSetName;
  }


  public StartChangeSetRequest clientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
    return this;
  }

  /**
   * A unique token to identify the request to ensure idempotency.
   * @return clientRequestToken
   */
  @javax.annotation.Nullable
  public String getClientRequestToken() {
    return clientRequestToken;
  }

  public void setClientRequestToken(String clientRequestToken) {
    this.clientRequestToken = clientRequestToken;
  }


  public StartChangeSetRequest changeSetTags(List<Tag> changeSetTags) {
    this.changeSetTags = changeSetTags;
    return this;
  }

  public StartChangeSetRequest addChangeSetTagsItem(Tag changeSetTagsItem) {
    if (this.changeSetTags == null) {
      this.changeSetTags = new ArrayList<>();
    }
    this.changeSetTags.add(changeSetTagsItem);
    return this;
  }

  /**
   * A list of objects specifying each key name and value for the &lt;code&gt;ChangeSetTags&lt;/code&gt; property.
   * @return changeSetTags
   */
  @javax.annotation.Nullable
  public List<Tag> getChangeSetTags() {
    return changeSetTags;
  }

  public void setChangeSetTags(List<Tag> changeSetTags) {
    this.changeSetTags = changeSetTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartChangeSetRequest startChangeSetRequest = (StartChangeSetRequest) o;
    return Objects.equals(this.catalog, startChangeSetRequest.catalog) &&
        Objects.equals(this.changeSet, startChangeSetRequest.changeSet) &&
        Objects.equals(this.changeSetName, startChangeSetRequest.changeSetName) &&
        Objects.equals(this.clientRequestToken, startChangeSetRequest.clientRequestToken) &&
        Objects.equals(this.changeSetTags, startChangeSetRequest.changeSetTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalog, changeSet, changeSetName, clientRequestToken, changeSetTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartChangeSetRequest {\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    changeSet: ").append(toIndentedString(changeSet)).append("\n");
    sb.append("    changeSetName: ").append(toIndentedString(changeSetName)).append("\n");
    sb.append("    clientRequestToken: ").append(toIndentedString(clientRequestToken)).append("\n");
    sb.append("    changeSetTags: ").append(toIndentedString(changeSetTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Catalog");
    openapiFields.add("ChangeSet");
    openapiFields.add("ChangeSetName");
    openapiFields.add("ClientRequestToken");
    openapiFields.add("ChangeSetTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Catalog");
    openapiRequiredFields.add("ChangeSet");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartChangeSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartChangeSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartChangeSetRequest is not found in the empty JSON string", StartChangeSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartChangeSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartChangeSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartChangeSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Catalog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Catalog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Catalog").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("ChangeSet").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChangeSet` to be an array in the JSON string but got `%s`", jsonObj.get("ChangeSet").toString()));
      }

      JsonArray jsonArraychangeSet = jsonObj.getAsJsonArray("ChangeSet");
      // validate the required field `ChangeSet` (array)
      for (int i = 0; i < jsonArraychangeSet.size(); i++) {
        Change.validateJsonElement(jsonArraychangeSet.get(i));
      };
      if ((jsonObj.get("ChangeSetName") != null && !jsonObj.get("ChangeSetName").isJsonNull()) && !jsonObj.get("ChangeSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChangeSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChangeSetName").toString()));
      }
      if ((jsonObj.get("ClientRequestToken") != null && !jsonObj.get("ClientRequestToken").isJsonNull()) && !jsonObj.get("ClientRequestToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ClientRequestToken").toString()));
      }
      if (jsonObj.get("ChangeSetTags") != null && !jsonObj.get("ChangeSetTags").isJsonNull()) {
        JsonArray jsonArraychangeSetTags = jsonObj.getAsJsonArray("ChangeSetTags");
        if (jsonArraychangeSetTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ChangeSetTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ChangeSetTags` to be an array in the JSON string but got `%s`", jsonObj.get("ChangeSetTags").toString()));
          }

          // validate the optional field `ChangeSetTags` (array)
          for (int i = 0; i < jsonArraychangeSetTags.size(); i++) {
            Tag.validateJsonElement(jsonArraychangeSetTags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartChangeSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartChangeSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartChangeSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartChangeSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartChangeSetRequest>() {
           @Override
           public void write(JsonWriter out, StartChangeSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartChangeSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartChangeSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartChangeSetRequest
   * @throws IOException if the JSON string is invalid with respect to StartChangeSetRequest
   */
  public static StartChangeSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartChangeSetRequest.class);
  }

  /**
   * Convert an instance of StartChangeSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

