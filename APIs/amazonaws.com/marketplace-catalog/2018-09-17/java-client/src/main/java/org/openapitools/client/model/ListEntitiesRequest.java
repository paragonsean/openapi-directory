/*
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.ListChangeSetsRequestSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListEntitiesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:27.767483-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListEntitiesRequest {
  public static final String SERIALIZED_NAME_CATALOG = "Catalog";
  @SerializedName(SERIALIZED_NAME_CATALOG)
  private String catalog;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "EntityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_FILTER_LIST = "FilterList";
  @SerializedName(SERIALIZED_NAME_FILTER_LIST)
  private List<Filter> filterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SORT = "Sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private ListChangeSetsRequestSort sort;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  /**
   * 
   */
  @JsonAdapter(OwnershipTypeEnum.Adapter.class)
  public enum OwnershipTypeEnum {
    SELF("SELF"),
    
    SHARED("SHARED");

    private String value;

    OwnershipTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OwnershipTypeEnum fromValue(String value) {
      for (OwnershipTypeEnum b : OwnershipTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OwnershipTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OwnershipTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OwnershipTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OwnershipTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OwnershipTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OWNERSHIP_TYPE = "OwnershipType";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_TYPE)
  private OwnershipTypeEnum ownershipType;

  public ListEntitiesRequest() {
  }

  public ListEntitiesRequest catalog(String catalog) {
    this.catalog = catalog;
    return this;
  }

  /**
   * The catalog related to the request. Fixed value: &lt;code&gt;AWSMarketplace&lt;/code&gt; 
   * @return catalog
   */
  @javax.annotation.Nonnull
  public String getCatalog() {
    return catalog;
  }

  public void setCatalog(String catalog) {
    this.catalog = catalog;
  }


  public ListEntitiesRequest entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The type of entities to retrieve.
   * @return entityType
   */
  @javax.annotation.Nonnull
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public ListEntitiesRequest filterList(List<Filter> filterList) {
    this.filterList = filterList;
    return this;
  }

  public ListEntitiesRequest addFilterListItem(Filter filterListItem) {
    if (this.filterList == null) {
      this.filterList = new ArrayList<>();
    }
    this.filterList.add(filterListItem);
    return this;
  }

  /**
   * An array of filter objects. Each filter object contains two attributes, &lt;code&gt;filterName&lt;/code&gt; and &lt;code&gt;filterValues&lt;/code&gt;.
   * @return filterList
   */
  @javax.annotation.Nullable
  public List<Filter> getFilterList() {
    return filterList;
  }

  public void setFilterList(List<Filter> filterList) {
    this.filterList = filterList;
  }


  public ListEntitiesRequest sort(ListChangeSetsRequestSort sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public ListChangeSetsRequestSort getSort() {
    return sort;
  }

  public void setSort(ListChangeSetsRequestSort sort) {
    this.sort = sort;
  }


  public ListEntitiesRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The value of the next token, if it exists. Null if there are no more results.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListEntitiesRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Specifies the upper limit of the elements on a single page. If a value isn&#39;t provided, the default value is 20.
   * minimum: 1
   * maximum: 50
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListEntitiesRequest ownershipType(OwnershipTypeEnum ownershipType) {
    this.ownershipType = ownershipType;
    return this;
  }

  /**
   * 
   * @return ownershipType
   */
  @javax.annotation.Nullable
  public OwnershipTypeEnum getOwnershipType() {
    return ownershipType;
  }

  public void setOwnershipType(OwnershipTypeEnum ownershipType) {
    this.ownershipType = ownershipType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListEntitiesRequest listEntitiesRequest = (ListEntitiesRequest) o;
    return Objects.equals(this.catalog, listEntitiesRequest.catalog) &&
        Objects.equals(this.entityType, listEntitiesRequest.entityType) &&
        Objects.equals(this.filterList, listEntitiesRequest.filterList) &&
        Objects.equals(this.sort, listEntitiesRequest.sort) &&
        Objects.equals(this.nextToken, listEntitiesRequest.nextToken) &&
        Objects.equals(this.maxResults, listEntitiesRequest.maxResults) &&
        Objects.equals(this.ownershipType, listEntitiesRequest.ownershipType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalog, entityType, filterList, sort, nextToken, maxResults, ownershipType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListEntitiesRequest {\n");
    sb.append("    catalog: ").append(toIndentedString(catalog)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    filterList: ").append(toIndentedString(filterList)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    ownershipType: ").append(toIndentedString(ownershipType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Catalog");
    openapiFields.add("EntityType");
    openapiFields.add("FilterList");
    openapiFields.add("Sort");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("OwnershipType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Catalog");
    openapiRequiredFields.add("EntityType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListEntitiesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListEntitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListEntitiesRequest is not found in the empty JSON string", ListEntitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListEntitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListEntitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListEntitiesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Catalog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Catalog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Catalog").toString()));
      }
      if (!jsonObj.get("EntityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EntityType").toString()));
      }
      if (jsonObj.get("FilterList") != null && !jsonObj.get("FilterList").isJsonNull()) {
        JsonArray jsonArrayfilterList = jsonObj.getAsJsonArray("FilterList");
        if (jsonArrayfilterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FilterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FilterList` to be an array in the JSON string but got `%s`", jsonObj.get("FilterList").toString()));
          }

          // validate the optional field `FilterList` (array)
          for (int i = 0; i < jsonArrayfilterList.size(); i++) {
            Filter.validateJsonElement(jsonArrayfilterList.get(i));
          };
        }
      }
      // validate the optional field `Sort`
      if (jsonObj.get("Sort") != null && !jsonObj.get("Sort").isJsonNull()) {
        ListChangeSetsRequestSort.validateJsonElement(jsonObj.get("Sort"));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("OwnershipType") != null && !jsonObj.get("OwnershipType").isJsonNull()) && !jsonObj.get("OwnershipType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnershipType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnershipType").toString()));
      }
      // validate the optional field `OwnershipType`
      if (jsonObj.get("OwnershipType") != null && !jsonObj.get("OwnershipType").isJsonNull()) {
        OwnershipTypeEnum.validateJsonElement(jsonObj.get("OwnershipType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListEntitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListEntitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListEntitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListEntitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListEntitiesRequest>() {
           @Override
           public void write(JsonWriter out, ListEntitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListEntitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListEntitiesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListEntitiesRequest
   * @throws IOException if the JSON string is invalid with respect to ListEntitiesRequest
   */
  public static ListEntitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListEntitiesRequest.class);
  }

  /**
   * Convert an instance of ListEntitiesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

