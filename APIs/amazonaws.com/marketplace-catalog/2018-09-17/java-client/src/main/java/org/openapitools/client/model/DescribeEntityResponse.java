/*
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeEntityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:27.767483-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeEntityResponse {
  public static final String SERIALIZED_NAME_ENTITY_TYPE = "EntityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_ENTITY_IDENTIFIER = "EntityIdentifier";
  @SerializedName(SERIALIZED_NAME_ENTITY_IDENTIFIER)
  private String entityIdentifier;

  public static final String SERIALIZED_NAME_ENTITY_ARN = "EntityArn";
  @SerializedName(SERIALIZED_NAME_ENTITY_ARN)
  private String entityArn;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE = "LastModifiedDate";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE)
  private String lastModifiedDate;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public DescribeEntityResponse() {
  }

  public DescribeEntityResponse entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public DescribeEntityResponse entityIdentifier(String entityIdentifier) {
    this.entityIdentifier = entityIdentifier;
    return this;
  }

  /**
   * Get entityIdentifier
   * @return entityIdentifier
   */
  @javax.annotation.Nullable
  public String getEntityIdentifier() {
    return entityIdentifier;
  }

  public void setEntityIdentifier(String entityIdentifier) {
    this.entityIdentifier = entityIdentifier;
  }


  public DescribeEntityResponse entityArn(String entityArn) {
    this.entityArn = entityArn;
    return this;
  }

  /**
   * Get entityArn
   * @return entityArn
   */
  @javax.annotation.Nullable
  public String getEntityArn() {
    return entityArn;
  }

  public void setEntityArn(String entityArn) {
    this.entityArn = entityArn;
  }


  public DescribeEntityResponse lastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  /**
   * Get lastModifiedDate
   * @return lastModifiedDate
   */
  @javax.annotation.Nullable
  public String getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(String lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }


  public DescribeEntityResponse details(String details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeEntityResponse describeEntityResponse = (DescribeEntityResponse) o;
    return Objects.equals(this.entityType, describeEntityResponse.entityType) &&
        Objects.equals(this.entityIdentifier, describeEntityResponse.entityIdentifier) &&
        Objects.equals(this.entityArn, describeEntityResponse.entityArn) &&
        Objects.equals(this.lastModifiedDate, describeEntityResponse.lastModifiedDate) &&
        Objects.equals(this.details, describeEntityResponse.details);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, entityIdentifier, entityArn, lastModifiedDate, details);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeEntityResponse {\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    entityIdentifier: ").append(toIndentedString(entityIdentifier)).append("\n");
    sb.append("    entityArn: ").append(toIndentedString(entityArn)).append("\n");
    sb.append("    lastModifiedDate: ").append(toIndentedString(lastModifiedDate)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EntityType");
    openapiFields.add("EntityIdentifier");
    openapiFields.add("EntityArn");
    openapiFields.add("LastModifiedDate");
    openapiFields.add("Details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeEntityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeEntityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeEntityResponse is not found in the empty JSON string", DescribeEntityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeEntityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeEntityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EntityType`
      if (jsonObj.get("EntityType") != null && !jsonObj.get("EntityType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EntityType"));
      }
      // validate the optional field `EntityIdentifier`
      if (jsonObj.get("EntityIdentifier") != null && !jsonObj.get("EntityIdentifier").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EntityIdentifier"));
      }
      // validate the optional field `EntityArn`
      if (jsonObj.get("EntityArn") != null && !jsonObj.get("EntityArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EntityArn"));
      }
      // validate the optional field `LastModifiedDate`
      if (jsonObj.get("LastModifiedDate") != null && !jsonObj.get("LastModifiedDate").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LastModifiedDate"));
      }
      // validate the optional field `Details`
      if (jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeEntityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeEntityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeEntityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeEntityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeEntityResponse>() {
           @Override
           public void write(JsonWriter out, DescribeEntityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeEntityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeEntityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeEntityResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeEntityResponse
   */
  public static DescribeEntityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeEntityResponse.class);
  }

  /**
   * Convert an instance of DescribeEntityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

