/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutResourcePolicyRequest model module.
 * @module model/PutResourcePolicyRequest
 * @version 2018-09-17
 */
class PutResourcePolicyRequest {
    /**
     * Constructs a new <code>PutResourcePolicyRequest</code>.
     * @alias module:model/PutResourcePolicyRequest
     * @param resourceArn {String} The Amazon Resource Name (ARN) of the Entity resource you want to associate with a resource policy. 
     * @param policy {String} The policy document to set; formatted in JSON.
     */
    constructor(resourceArn, policy) { 
        
        PutResourcePolicyRequest.initialize(this, resourceArn, policy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceArn, policy) { 
        obj['ResourceArn'] = resourceArn;
        obj['Policy'] = policy;
    }

    /**
     * Constructs a <code>PutResourcePolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutResourcePolicyRequest} obj Optional instance to populate.
     * @return {module:model/PutResourcePolicyRequest} The populated <code>PutResourcePolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutResourcePolicyRequest();

            if (data.hasOwnProperty('ResourceArn')) {
                obj['ResourceArn'] = ApiClient.convertToType(data['ResourceArn'], 'String');
            }
            if (data.hasOwnProperty('Policy')) {
                obj['Policy'] = ApiClient.convertToType(data['Policy'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutResourcePolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutResourcePolicyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutResourcePolicyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ResourceArn'] && !(typeof data['ResourceArn'] === 'string' || data['ResourceArn'] instanceof String)) {
            throw new Error("Expected the field `ResourceArn` to be a primitive type in the JSON string but got " + data['ResourceArn']);
        }
        // ensure the json data is a string
        if (data['Policy'] && !(typeof data['Policy'] === 'string' || data['Policy'] instanceof String)) {
            throw new Error("Expected the field `Policy` to be a primitive type in the JSON string but got " + data['Policy']);
        }

        return true;
    }


}

PutResourcePolicyRequest.RequiredProperties = ["ResourceArn", "Policy"];

/**
 * The Amazon Resource Name (ARN) of the Entity resource you want to associate with a resource policy. 
 * @member {String} ResourceArn
 */
PutResourcePolicyRequest.prototype['ResourceArn'] = undefined;

/**
 * The policy document to set; formatted in JSON.
 * @member {String} Policy
 */
PutResourcePolicyRequest.prototype['Policy'] = undefined;






export default PutResourcePolicyRequest;

