/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filter from './Filter';
import ListChangeSetsRequestSort from './ListChangeSetsRequestSort';

/**
 * The ListChangeSetsRequest model module.
 * @module model/ListChangeSetsRequest
 * @version 2018-09-17
 */
class ListChangeSetsRequest {
    /**
     * Constructs a new <code>ListChangeSetsRequest</code>.
     * @alias module:model/ListChangeSetsRequest
     * @param catalog {String} The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 
     */
    constructor(catalog) { 
        
        ListChangeSetsRequest.initialize(this, catalog);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, catalog) { 
        obj['Catalog'] = catalog;
    }

    /**
     * Constructs a <code>ListChangeSetsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListChangeSetsRequest} obj Optional instance to populate.
     * @return {module:model/ListChangeSetsRequest} The populated <code>ListChangeSetsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListChangeSetsRequest();

            if (data.hasOwnProperty('Catalog')) {
                obj['Catalog'] = ApiClient.convertToType(data['Catalog'], 'String');
            }
            if (data.hasOwnProperty('FilterList')) {
                obj['FilterList'] = ApiClient.convertToType(data['FilterList'], [Filter]);
            }
            if (data.hasOwnProperty('Sort')) {
                obj['Sort'] = ListChangeSetsRequestSort.constructFromObject(data['Sort']);
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListChangeSetsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListChangeSetsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListChangeSetsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Catalog'] && !(typeof data['Catalog'] === 'string' || data['Catalog'] instanceof String)) {
            throw new Error("Expected the field `Catalog` to be a primitive type in the JSON string but got " + data['Catalog']);
        }
        if (data['FilterList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['FilterList'])) {
                throw new Error("Expected the field `FilterList` to be an array in the JSON data but got " + data['FilterList']);
            }
            // validate the optional field `FilterList` (array)
            for (const item of data['FilterList']) {
                Filter.validateJSON(item);
            };
        }
        // validate the optional field `Sort`
        if (data['Sort']) { // data not null
          ListChangeSetsRequestSort.validateJSON(data['Sort']);
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }

        return true;
    }


}

ListChangeSetsRequest.RequiredProperties = ["Catalog"];

/**
 * The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 
 * @member {String} Catalog
 */
ListChangeSetsRequest.prototype['Catalog'] = undefined;

/**
 * An array of filter objects.
 * @member {Array.<module:model/Filter>} FilterList
 */
ListChangeSetsRequest.prototype['FilterList'] = undefined;

/**
 * @member {module:model/ListChangeSetsRequestSort} Sort
 */
ListChangeSetsRequest.prototype['Sort'] = undefined;

/**
 * The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.
 * @member {Number} MaxResults
 */
ListChangeSetsRequest.prototype['MaxResults'] = undefined;

/**
 * The token value retrieved from a previous call to access the next page of results.
 * @member {String} NextToken
 */
ListChangeSetsRequest.prototype['NextToken'] = undefined;






export default ListChangeSetsRequest;

