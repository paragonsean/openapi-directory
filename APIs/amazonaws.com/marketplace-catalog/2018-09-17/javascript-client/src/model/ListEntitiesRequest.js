/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Filter from './Filter';
import ListChangeSetsRequestSort from './ListChangeSetsRequestSort';

/**
 * The ListEntitiesRequest model module.
 * @module model/ListEntitiesRequest
 * @version 2018-09-17
 */
class ListEntitiesRequest {
    /**
     * Constructs a new <code>ListEntitiesRequest</code>.
     * @alias module:model/ListEntitiesRequest
     * @param catalog {String} The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 
     * @param entityType {String} The type of entities to retrieve.
     */
    constructor(catalog, entityType) { 
        
        ListEntitiesRequest.initialize(this, catalog, entityType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, catalog, entityType) { 
        obj['Catalog'] = catalog;
        obj['EntityType'] = entityType;
    }

    /**
     * Constructs a <code>ListEntitiesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListEntitiesRequest} obj Optional instance to populate.
     * @return {module:model/ListEntitiesRequest} The populated <code>ListEntitiesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListEntitiesRequest();

            if (data.hasOwnProperty('Catalog')) {
                obj['Catalog'] = ApiClient.convertToType(data['Catalog'], 'String');
            }
            if (data.hasOwnProperty('EntityType')) {
                obj['EntityType'] = ApiClient.convertToType(data['EntityType'], 'String');
            }
            if (data.hasOwnProperty('FilterList')) {
                obj['FilterList'] = ApiClient.convertToType(data['FilterList'], [Filter]);
            }
            if (data.hasOwnProperty('Sort')) {
                obj['Sort'] = ListChangeSetsRequestSort.constructFromObject(data['Sort']);
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('OwnershipType')) {
                obj['OwnershipType'] = ApiClient.convertToType(data['OwnershipType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListEntitiesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListEntitiesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListEntitiesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Catalog'] && !(typeof data['Catalog'] === 'string' || data['Catalog'] instanceof String)) {
            throw new Error("Expected the field `Catalog` to be a primitive type in the JSON string but got " + data['Catalog']);
        }
        // ensure the json data is a string
        if (data['EntityType'] && !(typeof data['EntityType'] === 'string' || data['EntityType'] instanceof String)) {
            throw new Error("Expected the field `EntityType` to be a primitive type in the JSON string but got " + data['EntityType']);
        }
        if (data['FilterList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['FilterList'])) {
                throw new Error("Expected the field `FilterList` to be an array in the JSON data but got " + data['FilterList']);
            }
            // validate the optional field `FilterList` (array)
            for (const item of data['FilterList']) {
                Filter.validateJSON(item);
            };
        }
        // validate the optional field `Sort`
        if (data['Sort']) { // data not null
          ListChangeSetsRequestSort.validateJSON(data['Sort']);
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }
        // ensure the json data is a string
        if (data['OwnershipType'] && !(typeof data['OwnershipType'] === 'string' || data['OwnershipType'] instanceof String)) {
            throw new Error("Expected the field `OwnershipType` to be a primitive type in the JSON string but got " + data['OwnershipType']);
        }

        return true;
    }


}

ListEntitiesRequest.RequiredProperties = ["Catalog", "EntityType"];

/**
 * The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 
 * @member {String} Catalog
 */
ListEntitiesRequest.prototype['Catalog'] = undefined;

/**
 * The type of entities to retrieve.
 * @member {String} EntityType
 */
ListEntitiesRequest.prototype['EntityType'] = undefined;

/**
 * An array of filter objects. Each filter object contains two attributes, <code>filterName</code> and <code>filterValues</code>.
 * @member {Array.<module:model/Filter>} FilterList
 */
ListEntitiesRequest.prototype['FilterList'] = undefined;

/**
 * @member {module:model/ListChangeSetsRequestSort} Sort
 */
ListEntitiesRequest.prototype['Sort'] = undefined;

/**
 * The value of the next token, if it exists. Null if there are no more results.
 * @member {String} NextToken
 */
ListEntitiesRequest.prototype['NextToken'] = undefined;

/**
 * Specifies the upper limit of the elements on a single page. If a value isn't provided, the default value is 20.
 * @member {Number} MaxResults
 */
ListEntitiesRequest.prototype['MaxResults'] = undefined;

/**
 * 
 * @member {module:model/ListEntitiesRequest.OwnershipTypeEnum} OwnershipType
 */
ListEntitiesRequest.prototype['OwnershipType'] = undefined;





/**
 * Allowed values for the <code>OwnershipType</code> property.
 * @enum {String}
 * @readonly
 */
ListEntitiesRequest['OwnershipTypeEnum'] = {

    /**
     * value: "SELF"
     * @const
     */
    "SELF": "SELF",

    /**
     * value: "SHARED"
     * @const
     */
    "SHARED": "SHARED"
};



export default ListEntitiesRequest;

