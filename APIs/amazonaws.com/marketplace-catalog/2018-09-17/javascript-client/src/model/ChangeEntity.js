/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Entity from './Entity';

/**
 * The ChangeEntity model module.
 * @module model/ChangeEntity
 * @version 2018-09-17
 */
class ChangeEntity {
    /**
     * Constructs a new <code>ChangeEntity</code>.
     * @alias module:model/ChangeEntity
     * @implements module:model/Entity
     * @param type {String} 
     */
    constructor(type) { 
        Entity.initialize(this, type);
        ChangeEntity.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>ChangeEntity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChangeEntity} obj Optional instance to populate.
     * @return {module:model/ChangeEntity} The populated <code>ChangeEntity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChangeEntity();
            Entity.constructFromObject(data, obj);

            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
            if (data.hasOwnProperty('Identifier')) {
                obj['Identifier'] = ApiClient.convertToType(data['Identifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChangeEntity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChangeEntity</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChangeEntity.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Type`
        if (data['Type']) { // data not null
          String.validateJSON(data['Type']);
        }
        // validate the optional field `Identifier`
        if (data['Identifier']) { // data not null
          String.validateJSON(data['Identifier']);
        }

        return true;
    }


}

ChangeEntity.RequiredProperties = ["Type"];

/**
 * @member {String} Type
 */
ChangeEntity.prototype['Type'] = undefined;

/**
 * @member {String} Identifier
 */
ChangeEntity.prototype['Identifier'] = undefined;


// Implement Entity interface:
/**
 * @member {String} Type
 */
Entity.prototype['Type'] = undefined;
/**
 * @member {String} Identifier
 */
Entity.prototype['Identifier'] = undefined;




export default ChangeEntity;

