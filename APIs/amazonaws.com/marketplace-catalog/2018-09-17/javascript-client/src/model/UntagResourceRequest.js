/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UntagResourceRequest model module.
 * @module model/UntagResourceRequest
 * @version 2018-09-17
 */
class UntagResourceRequest {
    /**
     * Constructs a new <code>UntagResourceRequest</code>.
     * @alias module:model/UntagResourceRequest
     * @param resourceArn {String} Required. The Amazon Resource Name (ARN) associated with the resource you want to remove the tag from.
     * @param tagKeys {Array.<String>} Required. A list of key names of tags to be removed. Number of strings allowed: 0-256.
     */
    constructor(resourceArn, tagKeys) { 
        
        UntagResourceRequest.initialize(this, resourceArn, tagKeys);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resourceArn, tagKeys) { 
        obj['ResourceArn'] = resourceArn;
        obj['TagKeys'] = tagKeys;
    }

    /**
     * Constructs a <code>UntagResourceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UntagResourceRequest} obj Optional instance to populate.
     * @return {module:model/UntagResourceRequest} The populated <code>UntagResourceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UntagResourceRequest();

            if (data.hasOwnProperty('ResourceArn')) {
                obj['ResourceArn'] = ApiClient.convertToType(data['ResourceArn'], 'String');
            }
            if (data.hasOwnProperty('TagKeys')) {
                obj['TagKeys'] = ApiClient.convertToType(data['TagKeys'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UntagResourceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UntagResourceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UntagResourceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ResourceArn'] && !(typeof data['ResourceArn'] === 'string' || data['ResourceArn'] instanceof String)) {
            throw new Error("Expected the field `ResourceArn` to be a primitive type in the JSON string but got " + data['ResourceArn']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['TagKeys'])) {
            throw new Error("Expected the field `TagKeys` to be an array in the JSON data but got " + data['TagKeys']);
        }

        return true;
    }


}

UntagResourceRequest.RequiredProperties = ["ResourceArn", "TagKeys"];

/**
 * Required. The Amazon Resource Name (ARN) associated with the resource you want to remove the tag from.
 * @member {String} ResourceArn
 */
UntagResourceRequest.prototype['ResourceArn'] = undefined;

/**
 * Required. A list of key names of tags to be removed. Number of strings allowed: 0-256.
 * @member {Array.<String>} TagKeys
 */
UntagResourceRequest.prototype['TagKeys'] = undefined;






export default UntagResourceRequest;

