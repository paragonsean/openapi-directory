# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change import Change
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class StartChangeSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog: str=None, change_set: List[Change]=None, change_set_name: str=None, client_request_token: str=None, change_set_tags: List[Tag]=None):
        """StartChangeSetRequest - a model defined in OpenAPI

        :param catalog: The catalog of this StartChangeSetRequest.
        :param change_set: The change_set of this StartChangeSetRequest.
        :param change_set_name: The change_set_name of this StartChangeSetRequest.
        :param client_request_token: The client_request_token of this StartChangeSetRequest.
        :param change_set_tags: The change_set_tags of this StartChangeSetRequest.
        """
        self.openapi_types = {
            'catalog': str,
            'change_set': List[Change],
            'change_set_name': str,
            'client_request_token': str,
            'change_set_tags': List[Tag]
        }

        self.attribute_map = {
            'catalog': 'Catalog',
            'change_set': 'ChangeSet',
            'change_set_name': 'ChangeSetName',
            'client_request_token': 'ClientRequestToken',
            'change_set_tags': 'ChangeSetTags'
        }

        self._catalog = catalog
        self._change_set = change_set
        self._change_set_name = change_set_name
        self._client_request_token = client_request_token
        self._change_set_tags = change_set_tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartChangeSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartChangeSet_request of this StartChangeSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog(self):
        """Gets the catalog of this StartChangeSetRequest.

        The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 

        :return: The catalog of this StartChangeSetRequest.
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this StartChangeSetRequest.

        The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 

        :param catalog: The catalog of this StartChangeSetRequest.
        :type catalog: str
        """
        if catalog is None:
            raise ValueError("Invalid value for `catalog`, must not be `None`")
        if catalog is not None and len(catalog) > 64:
            raise ValueError("Invalid value for `catalog`, length must be less than or equal to `64`")
        if catalog is not None and len(catalog) < 1:
            raise ValueError("Invalid value for `catalog`, length must be greater than or equal to `1`")
        if catalog is not None and not re.search(r'^[a-zA-Z]+$', catalog):
            raise ValueError("Invalid value for `catalog`, must be a follow pattern or equal to `/^[a-zA-Z]+$/`")

        self._catalog = catalog

    @property
    def change_set(self):
        """Gets the change_set of this StartChangeSetRequest.

        Array of <code>change</code> object.

        :return: The change_set of this StartChangeSetRequest.
        :rtype: List[Change]
        """
        return self._change_set

    @change_set.setter
    def change_set(self, change_set):
        """Sets the change_set of this StartChangeSetRequest.

        Array of <code>change</code> object.

        :param change_set: The change_set of this StartChangeSetRequest.
        :type change_set: List[Change]
        """
        if change_set is None:
            raise ValueError("Invalid value for `change_set`, must not be `None`")
        if change_set is not None and len(change_set) > 20:
            raise ValueError("Invalid value for `change_set`, number of items must be less than or equal to `20`")
        if change_set is not None and len(change_set) < 1:
            raise ValueError("Invalid value for `change_set`, number of items must be greater than or equal to `1`")

        self._change_set = change_set

    @property
    def change_set_name(self):
        """Gets the change_set_name of this StartChangeSetRequest.

        Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. 

        :return: The change_set_name of this StartChangeSetRequest.
        :rtype: str
        """
        return self._change_set_name

    @change_set_name.setter
    def change_set_name(self, change_set_name):
        """Sets the change_set_name of this StartChangeSetRequest.

        Optional case sensitive string of up to 100 ASCII characters. The change set name can be used to filter the list of change sets. 

        :param change_set_name: The change_set_name of this StartChangeSetRequest.
        :type change_set_name: str
        """
        if change_set_name is not None and len(change_set_name) > 100:
            raise ValueError("Invalid value for `change_set_name`, length must be less than or equal to `100`")
        if change_set_name is not None and len(change_set_name) < 1:
            raise ValueError("Invalid value for `change_set_name`, length must be greater than or equal to `1`")
        if change_set_name is not None and not re.search(r'^[\w\s+=.:@-]+$', change_set_name):
            raise ValueError("Invalid value for `change_set_name`, must be a follow pattern or equal to `/^[\w\s+=.:@-]+$/`")

        self._change_set_name = change_set_name

    @property
    def client_request_token(self):
        """Gets the client_request_token of this StartChangeSetRequest.

        A unique token to identify the request to ensure idempotency.

        :return: The client_request_token of this StartChangeSetRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this StartChangeSetRequest.

        A unique token to identify the request to ensure idempotency.

        :param client_request_token: The client_request_token of this StartChangeSetRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 1:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `1`")
        if client_request_token is not None and not re.search(r'^[!-~]+$', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/^[!-~]+$/`")

        self._client_request_token = client_request_token

    @property
    def change_set_tags(self):
        """Gets the change_set_tags of this StartChangeSetRequest.

        A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.

        :return: The change_set_tags of this StartChangeSetRequest.
        :rtype: List[Tag]
        """
        return self._change_set_tags

    @change_set_tags.setter
    def change_set_tags(self, change_set_tags):
        """Sets the change_set_tags of this StartChangeSetRequest.

        A list of objects specifying each key name and value for the <code>ChangeSetTags</code> property.

        :param change_set_tags: The change_set_tags of this StartChangeSetRequest.
        :type change_set_tags: List[Tag]
        """
        if change_set_tags is not None and len(change_set_tags) > 200:
            raise ValueError("Invalid value for `change_set_tags`, number of items must be less than or equal to `200`")
        if change_set_tags is not None and len(change_set_tags) < 1:
            raise ValueError("Invalid value for `change_set_tags`, number of items must be greater than or equal to `1`")

        self._change_set_tags = change_set_tags
