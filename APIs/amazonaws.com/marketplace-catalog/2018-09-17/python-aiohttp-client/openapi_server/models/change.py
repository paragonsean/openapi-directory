# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.change_entity import ChangeEntity
from openapi_server import util


class Change(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change_type: str=None, entity: ChangeEntity=None, entity_tags: List=None, details: str=None, change_name: str=None):
        """Change - a model defined in OpenAPI

        :param change_type: The change_type of this Change.
        :param entity: The entity of this Change.
        :param entity_tags: The entity_tags of this Change.
        :param details: The details of this Change.
        :param change_name: The change_name of this Change.
        """
        self.openapi_types = {
            'change_type': str,
            'entity': ChangeEntity,
            'entity_tags': List,
            'details': str,
            'change_name': str
        }

        self.attribute_map = {
            'change_type': 'ChangeType',
            'entity': 'Entity',
            'entity_tags': 'EntityTags',
            'details': 'Details',
            'change_name': 'ChangeName'
        }

        self._change_type = change_type
        self._entity = entity
        self._entity_tags = entity_tags
        self._details = details
        self._change_name = change_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Change':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Change of this Change.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change_type(self):
        """Gets the change_type of this Change.


        :return: The change_type of this Change.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this Change.


        :param change_type: The change_type of this Change.
        :type change_type: str
        """
        if change_type is None:
            raise ValueError("Invalid value for `change_type`, must not be `None`")

        self._change_type = change_type

    @property
    def entity(self):
        """Gets the entity of this Change.


        :return: The entity of this Change.
        :rtype: ChangeEntity
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Change.


        :param entity: The entity of this Change.
        :type entity: ChangeEntity
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def entity_tags(self):
        """Gets the entity_tags of this Change.


        :return: The entity_tags of this Change.
        :rtype: List
        """
        return self._entity_tags

    @entity_tags.setter
    def entity_tags(self, entity_tags):
        """Sets the entity_tags of this Change.


        :param entity_tags: The entity_tags of this Change.
        :type entity_tags: List
        """

        self._entity_tags = entity_tags

    @property
    def details(self):
        """Gets the details of this Change.


        :return: The details of this Change.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Change.


        :param details: The details of this Change.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def change_name(self):
        """Gets the change_name of this Change.


        :return: The change_name of this Change.
        :rtype: str
        """
        return self._change_name

    @change_name.setter
    def change_name(self, change_name):
        """Sets the change_name of this Change.


        :param change_name: The change_name of this Change.
        :type change_name: str
        """

        self._change_name = change_name
