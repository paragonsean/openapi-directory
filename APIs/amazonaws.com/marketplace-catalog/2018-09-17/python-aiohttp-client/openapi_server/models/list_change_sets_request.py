# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server.models.list_change_sets_request_sort import ListChangeSetsRequestSort
import re
from openapi_server import util


class ListChangeSetsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog: str=None, filter_list: List[Filter]=None, sort: ListChangeSetsRequestSort=None, max_results: int=None, next_token: str=None):
        """ListChangeSetsRequest - a model defined in OpenAPI

        :param catalog: The catalog of this ListChangeSetsRequest.
        :param filter_list: The filter_list of this ListChangeSetsRequest.
        :param sort: The sort of this ListChangeSetsRequest.
        :param max_results: The max_results of this ListChangeSetsRequest.
        :param next_token: The next_token of this ListChangeSetsRequest.
        """
        self.openapi_types = {
            'catalog': str,
            'filter_list': List[Filter],
            'sort': ListChangeSetsRequestSort,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'catalog': 'Catalog',
            'filter_list': 'FilterList',
            'sort': 'Sort',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._catalog = catalog
        self._filter_list = filter_list
        self._sort = sort
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListChangeSetsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListChangeSets_request of this ListChangeSetsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog(self):
        """Gets the catalog of this ListChangeSetsRequest.

        The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 

        :return: The catalog of this ListChangeSetsRequest.
        :rtype: str
        """
        return self._catalog

    @catalog.setter
    def catalog(self, catalog):
        """Sets the catalog of this ListChangeSetsRequest.

        The catalog related to the request. Fixed value: <code>AWSMarketplace</code> 

        :param catalog: The catalog of this ListChangeSetsRequest.
        :type catalog: str
        """
        if catalog is None:
            raise ValueError("Invalid value for `catalog`, must not be `None`")
        if catalog is not None and len(catalog) > 64:
            raise ValueError("Invalid value for `catalog`, length must be less than or equal to `64`")
        if catalog is not None and len(catalog) < 1:
            raise ValueError("Invalid value for `catalog`, length must be greater than or equal to `1`")
        if catalog is not None and not re.search(r'^[a-zA-Z]+$', catalog):
            raise ValueError("Invalid value for `catalog`, must be a follow pattern or equal to `/^[a-zA-Z]+$/`")

        self._catalog = catalog

    @property
    def filter_list(self):
        """Gets the filter_list of this ListChangeSetsRequest.

        An array of filter objects.

        :return: The filter_list of this ListChangeSetsRequest.
        :rtype: List[Filter]
        """
        return self._filter_list

    @filter_list.setter
    def filter_list(self, filter_list):
        """Sets the filter_list of this ListChangeSetsRequest.

        An array of filter objects.

        :param filter_list: The filter_list of this ListChangeSetsRequest.
        :type filter_list: List[Filter]
        """
        if filter_list is not None and len(filter_list) > 8:
            raise ValueError("Invalid value for `filter_list`, number of items must be less than or equal to `8`")
        if filter_list is not None and len(filter_list) < 1:
            raise ValueError("Invalid value for `filter_list`, number of items must be greater than or equal to `1`")

        self._filter_list = filter_list

    @property
    def sort(self):
        """Gets the sort of this ListChangeSetsRequest.


        :return: The sort of this ListChangeSetsRequest.
        :rtype: ListChangeSetsRequestSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this ListChangeSetsRequest.


        :param sort: The sort of this ListChangeSetsRequest.
        :type sort: ListChangeSetsRequestSort
        """

        self._sort = sort

    @property
    def max_results(self):
        """Gets the max_results of this ListChangeSetsRequest.

        The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.

        :return: The max_results of this ListChangeSetsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListChangeSetsRequest.

        The maximum number of results returned by a single call. This value must be provided in the next call to retrieve the next set of results. By default, this value is 20.

        :param max_results: The max_results of this ListChangeSetsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 20:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `20`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListChangeSetsRequest.

        The token value retrieved from a previous call to access the next page of results.

        :return: The next_token of this ListChangeSetsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListChangeSetsRequest.

        The token value retrieved from a previous call to access the next page of results.

        :param next_token: The next_token of this ListChangeSetsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'^[\w+=.:@\-\/]$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[\w+=.:@\-\/]$/`")

        self._next_token = next_token
