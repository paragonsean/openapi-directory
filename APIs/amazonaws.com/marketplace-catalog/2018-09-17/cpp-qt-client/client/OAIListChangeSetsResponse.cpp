/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListChangeSetsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListChangeSetsResponse::OAIListChangeSetsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListChangeSetsResponse::OAIListChangeSetsResponse() {
    this->initializeModel();
}

OAIListChangeSetsResponse::~OAIListChangeSetsResponse() {}

void OAIListChangeSetsResponse::initializeModel() {

    m_change_set_summary_list_isSet = false;
    m_change_set_summary_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListChangeSetsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListChangeSetsResponse::fromJsonObject(QJsonObject json) {

    m_change_set_summary_list_isValid = ::OpenAPI::fromJsonValue(m_change_set_summary_list, json[QString("ChangeSetSummaryList")]);
    m_change_set_summary_list_isSet = !json[QString("ChangeSetSummaryList")].isNull() && m_change_set_summary_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListChangeSetsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListChangeSetsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_change_set_summary_list.isSet()) {
        obj.insert(QString("ChangeSetSummaryList"), ::OpenAPI::toJsonValue(m_change_set_summary_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListChangeSetsResponse::getChangeSetSummaryList() const {
    return m_change_set_summary_list;
}
void OAIListChangeSetsResponse::setChangeSetSummaryList(const QList &change_set_summary_list) {
    m_change_set_summary_list = change_set_summary_list;
    m_change_set_summary_list_isSet = true;
}

bool OAIListChangeSetsResponse::is_change_set_summary_list_Set() const{
    return m_change_set_summary_list_isSet;
}

bool OAIListChangeSetsResponse::is_change_set_summary_list_Valid() const{
    return m_change_set_summary_list_isValid;
}

QString OAIListChangeSetsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListChangeSetsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListChangeSetsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListChangeSetsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListChangeSetsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_set_summary_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListChangeSetsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
