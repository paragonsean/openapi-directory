/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListChangeSetsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListChangeSetsRequest::OAIListChangeSetsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListChangeSetsRequest::OAIListChangeSetsRequest() {
    this->initializeModel();
}

OAIListChangeSetsRequest::~OAIListChangeSetsRequest() {}

void OAIListChangeSetsRequest::initializeModel() {

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_filter_list_isSet = false;
    m_filter_list_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListChangeSetsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListChangeSetsRequest::fromJsonObject(QJsonObject json) {

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("Catalog")]);
    m_catalog_isSet = !json[QString("Catalog")].isNull() && m_catalog_isValid;

    m_filter_list_isValid = ::OpenAPI::fromJsonValue(m_filter_list, json[QString("FilterList")]);
    m_filter_list_isSet = !json[QString("FilterList")].isNull() && m_filter_list_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("Sort")]);
    m_sort_isSet = !json[QString("Sort")].isNull() && m_sort_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListChangeSetsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListChangeSetsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_isSet) {
        obj.insert(QString("Catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_filter_list.isSet()) {
        obj.insert(QString("FilterList"), ::OpenAPI::toJsonValue(m_filter_list));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("Sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QString OAIListChangeSetsRequest::getCatalog() const {
    return m_catalog;
}
void OAIListChangeSetsRequest::setCatalog(const QString &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAIListChangeSetsRequest::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAIListChangeSetsRequest::is_catalog_Valid() const{
    return m_catalog_isValid;
}

QList OAIListChangeSetsRequest::getFilterList() const {
    return m_filter_list;
}
void OAIListChangeSetsRequest::setFilterList(const QList &filter_list) {
    m_filter_list = filter_list;
    m_filter_list_isSet = true;
}

bool OAIListChangeSetsRequest::is_filter_list_Set() const{
    return m_filter_list_isSet;
}

bool OAIListChangeSetsRequest::is_filter_list_Valid() const{
    return m_filter_list_isValid;
}

OAIListChangeSetsRequest_Sort OAIListChangeSetsRequest::getSort() const {
    return m_sort;
}
void OAIListChangeSetsRequest::setSort(const OAIListChangeSetsRequest_Sort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIListChangeSetsRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIListChangeSetsRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

qint32 OAIListChangeSetsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListChangeSetsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListChangeSetsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListChangeSetsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListChangeSetsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListChangeSetsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListChangeSetsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListChangeSetsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListChangeSetsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListChangeSetsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_isValid && true;
}

} // namespace OpenAPI
