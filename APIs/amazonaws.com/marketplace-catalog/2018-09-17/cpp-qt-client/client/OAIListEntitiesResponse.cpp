/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListEntitiesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListEntitiesResponse::OAIListEntitiesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListEntitiesResponse::OAIListEntitiesResponse() {
    this->initializeModel();
}

OAIListEntitiesResponse::~OAIListEntitiesResponse() {}

void OAIListEntitiesResponse::initializeModel() {

    m_entity_summary_list_isSet = false;
    m_entity_summary_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListEntitiesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListEntitiesResponse::fromJsonObject(QJsonObject json) {

    m_entity_summary_list_isValid = ::OpenAPI::fromJsonValue(m_entity_summary_list, json[QString("EntitySummaryList")]);
    m_entity_summary_list_isSet = !json[QString("EntitySummaryList")].isNull() && m_entity_summary_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListEntitiesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListEntitiesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_summary_list.isSet()) {
        obj.insert(QString("EntitySummaryList"), ::OpenAPI::toJsonValue(m_entity_summary_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListEntitiesResponse::getEntitySummaryList() const {
    return m_entity_summary_list;
}
void OAIListEntitiesResponse::setEntitySummaryList(const QList &entity_summary_list) {
    m_entity_summary_list = entity_summary_list;
    m_entity_summary_list_isSet = true;
}

bool OAIListEntitiesResponse::is_entity_summary_list_Set() const{
    return m_entity_summary_list_isSet;
}

bool OAIListEntitiesResponse::is_entity_summary_list_Valid() const{
    return m_entity_summary_list_isValid;
}

QString OAIListEntitiesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListEntitiesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListEntitiesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListEntitiesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListEntitiesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_summary_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListEntitiesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
