/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISort::OAISort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISort::OAISort() {
    this->initializeModel();
}

OAISort::~OAISort() {}

void OAISort::initializeModel() {

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAISort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISort::fromJsonObject(QJsonObject json) {

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAISort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISort::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_by_isSet) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAISort::getSortBy() const {
    return m_sort_by;
}
void OAISort::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAISort::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAISort::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAISort::getSortOrder() const {
    return m_sort_order;
}
void OAISort::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAISort::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAISort::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAISort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
