/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange_Entity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange_Entity::OAIChange_Entity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange_Entity::OAIChange_Entity() {
    this->initializeModel();
}

OAIChange_Entity::~OAIChange_Entity() {}

void OAIChange_Entity::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;
}

void OAIChange_Entity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange_Entity::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;
}

QString OAIChange_Entity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange_Entity::asJsonObject() const {
    QJsonObject obj;
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    return obj;
}

QString OAIChange_Entity::getType() const {
    return m_type;
}
void OAIChange_Entity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChange_Entity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChange_Entity::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIChange_Entity::getIdentifier() const {
    return m_identifier;
}
void OAIChange_Entity::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIChange_Entity::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIChange_Entity::is_identifier_Valid() const{
    return m_identifier_isValid;
}

bool OAIChange_Entity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange_Entity::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
