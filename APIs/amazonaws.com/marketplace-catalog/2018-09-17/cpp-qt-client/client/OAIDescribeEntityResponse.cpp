/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeEntityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeEntityResponse::OAIDescribeEntityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeEntityResponse::OAIDescribeEntityResponse() {
    this->initializeModel();
}

OAIDescribeEntityResponse::~OAIDescribeEntityResponse() {}

void OAIDescribeEntityResponse::initializeModel() {

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_identifier_isSet = false;
    m_entity_identifier_isValid = false;

    m_entity_arn_isSet = false;
    m_entity_arn_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;
}

void OAIDescribeEntityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeEntityResponse::fromJsonObject(QJsonObject json) {

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("EntityType")]);
    m_entity_type_isSet = !json[QString("EntityType")].isNull() && m_entity_type_isValid;

    m_entity_identifier_isValid = ::OpenAPI::fromJsonValue(m_entity_identifier, json[QString("EntityIdentifier")]);
    m_entity_identifier_isSet = !json[QString("EntityIdentifier")].isNull() && m_entity_identifier_isValid;

    m_entity_arn_isValid = ::OpenAPI::fromJsonValue(m_entity_arn, json[QString("EntityArn")]);
    m_entity_arn_isSet = !json[QString("EntityArn")].isNull() && m_entity_arn_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;
}

QString OAIDescribeEntityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeEntityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_entity_type_isSet) {
        obj.insert(QString("EntityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_identifier_isSet) {
        obj.insert(QString("EntityIdentifier"), ::OpenAPI::toJsonValue(m_entity_identifier));
    }
    if (m_entity_arn_isSet) {
        obj.insert(QString("EntityArn"), ::OpenAPI::toJsonValue(m_entity_arn));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    return obj;
}

QString OAIDescribeEntityResponse::getEntityType() const {
    return m_entity_type;
}
void OAIDescribeEntityResponse::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIDescribeEntityResponse::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIDescribeEntityResponse::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIDescribeEntityResponse::getEntityIdentifier() const {
    return m_entity_identifier;
}
void OAIDescribeEntityResponse::setEntityIdentifier(const QString &entity_identifier) {
    m_entity_identifier = entity_identifier;
    m_entity_identifier_isSet = true;
}

bool OAIDescribeEntityResponse::is_entity_identifier_Set() const{
    return m_entity_identifier_isSet;
}

bool OAIDescribeEntityResponse::is_entity_identifier_Valid() const{
    return m_entity_identifier_isValid;
}

QString OAIDescribeEntityResponse::getEntityArn() const {
    return m_entity_arn;
}
void OAIDescribeEntityResponse::setEntityArn(const QString &entity_arn) {
    m_entity_arn = entity_arn;
    m_entity_arn_isSet = true;
}

bool OAIDescribeEntityResponse::is_entity_arn_Set() const{
    return m_entity_arn_isSet;
}

bool OAIDescribeEntityResponse::is_entity_arn_Valid() const{
    return m_entity_arn_isValid;
}

QString OAIDescribeEntityResponse::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIDescribeEntityResponse::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIDescribeEntityResponse::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIDescribeEntityResponse::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIDescribeEntityResponse::getDetails() const {
    return m_details;
}
void OAIDescribeEntityResponse::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIDescribeEntityResponse::is_details_Set() const{
    return m_details_isSet;
}

bool OAIDescribeEntityResponse::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIDescribeEntityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeEntityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
