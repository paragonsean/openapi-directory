/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutResourcePolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutResourcePolicyRequest::OAIPutResourcePolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutResourcePolicyRequest::OAIPutResourcePolicyRequest() {
    this->initializeModel();
}

OAIPutResourcePolicyRequest::~OAIPutResourcePolicyRequest() {}

void OAIPutResourcePolicyRequest::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPutResourcePolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutResourcePolicyRequest::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;
}

QString OAIPutResourcePolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutResourcePolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPutResourcePolicyRequest::getResourceArn() const {
    return m_resource_arn;
}
void OAIPutResourcePolicyRequest::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIPutResourcePolicyRequest::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIPutResourcePolicyRequest::getPolicy() const {
    return m_policy;
}
void OAIPutResourcePolicyRequest::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutResourcePolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutResourcePolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutResourcePolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutResourcePolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_policy_isValid && true;
}

} // namespace OpenAPI
