/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChange::OAIChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChange::OAIChange() {
    this->initializeModel();
}

OAIChange::~OAIChange() {}

void OAIChange::initializeModel() {

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_entity_tags_isSet = false;
    m_entity_tags_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_change_name_isSet = false;
    m_change_name_isValid = false;
}

void OAIChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChange::fromJsonObject(QJsonObject json) {

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("ChangeType")]);
    m_change_type_isSet = !json[QString("ChangeType")].isNull() && m_change_type_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("Entity")]);
    m_entity_isSet = !json[QString("Entity")].isNull() && m_entity_isValid;

    m_entity_tags_isValid = ::OpenAPI::fromJsonValue(m_entity_tags, json[QString("EntityTags")]);
    m_entity_tags_isSet = !json[QString("EntityTags")].isNull() && m_entity_tags_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("Details")]);
    m_details_isSet = !json[QString("Details")].isNull() && m_details_isValid;

    m_change_name_isValid = ::OpenAPI::fromJsonValue(m_change_name, json[QString("ChangeName")]);
    m_change_name_isSet = !json[QString("ChangeName")].isNull() && m_change_name_isValid;
}

QString OAIChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChange::asJsonObject() const {
    QJsonObject obj;
    if (m_change_type_isSet) {
        obj.insert(QString("ChangeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_entity.isSet()) {
        obj.insert(QString("Entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_entity_tags.isSet()) {
        obj.insert(QString("EntityTags"), ::OpenAPI::toJsonValue(m_entity_tags));
    }
    if (m_details_isSet) {
        obj.insert(QString("Details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_change_name_isSet) {
        obj.insert(QString("ChangeName"), ::OpenAPI::toJsonValue(m_change_name));
    }
    return obj;
}

QString OAIChange::getChangeType() const {
    return m_change_type;
}
void OAIChange::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIChange::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIChange::is_change_type_Valid() const{
    return m_change_type_isValid;
}

OAIChange_Entity OAIChange::getEntity() const {
    return m_entity;
}
void OAIChange::setEntity(const OAIChange_Entity &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIChange::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIChange::is_entity_Valid() const{
    return m_entity_isValid;
}

QList OAIChange::getEntityTags() const {
    return m_entity_tags;
}
void OAIChange::setEntityTags(const QList &entity_tags) {
    m_entity_tags = entity_tags;
    m_entity_tags_isSet = true;
}

bool OAIChange::is_entity_tags_Set() const{
    return m_entity_tags_isSet;
}

bool OAIChange::is_entity_tags_Valid() const{
    return m_entity_tags_isValid;
}

QString OAIChange::getDetails() const {
    return m_details;
}
void OAIChange::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIChange::is_details_Set() const{
    return m_details_isSet;
}

bool OAIChange::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIChange::getChangeName() const {
    return m_change_name;
}
void OAIChange::setChangeName(const QString &change_name) {
    m_change_name = change_name;
    m_change_name_isSet = true;
}

bool OAIChange::is_change_name_Set() const{
    return m_change_name_isSet;
}

bool OAIChange::is_change_name_Valid() const{
    return m_change_name_isValid;
}

bool OAIChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_type_isValid && m_entity_isValid && m_details_isValid && true;
}

} // namespace OpenAPI
