/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListChangeSets_request_Sort.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListChangeSets_request_Sort::OAIListChangeSets_request_Sort(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListChangeSets_request_Sort::OAIListChangeSets_request_Sort() {
    this->initializeModel();
}

OAIListChangeSets_request_Sort::~OAIListChangeSets_request_Sort() {}

void OAIListChangeSets_request_Sort::initializeModel() {

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIListChangeSets_request_Sort::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListChangeSets_request_Sort::fromJsonObject(QJsonObject json) {

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("SortBy")]);
    m_sort_by_isSet = !json[QString("SortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("SortOrder")]);
    m_sort_order_isSet = !json[QString("SortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIListChangeSets_request_Sort::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListChangeSets_request_Sort::asJsonObject() const {
    QJsonObject obj;
    if (m_sort_by_isSet) {
        obj.insert(QString("SortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order.isSet()) {
        obj.insert(QString("SortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

QString OAIListChangeSets_request_Sort::getSortBy() const {
    return m_sort_by;
}
void OAIListChangeSets_request_Sort::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIListChangeSets_request_Sort::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIListChangeSets_request_Sort::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

OAISortOrder OAIListChangeSets_request_Sort::getSortOrder() const {
    return m_sort_order;
}
void OAIListChangeSets_request_Sort::setSortOrder(const OAISortOrder &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIListChangeSets_request_Sort::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIListChangeSets_request_Sort::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIListChangeSets_request_Sort::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListChangeSets_request_Sort::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
