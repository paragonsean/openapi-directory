/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutResourcePolicy_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutResourcePolicy_request::OAIPutResourcePolicy_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutResourcePolicy_request::OAIPutResourcePolicy_request() {
    this->initializeModel();
}

OAIPutResourcePolicy_request::~OAIPutResourcePolicy_request() {}

void OAIPutResourcePolicy_request::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;
}

void OAIPutResourcePolicy_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutResourcePolicy_request::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("Policy")]);
    m_policy_isSet = !json[QString("Policy")].isNull() && m_policy_isValid;
}

QString OAIPutResourcePolicy_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutResourcePolicy_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_policy_isSet) {
        obj.insert(QString("Policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    return obj;
}

QString OAIPutResourcePolicy_request::getResourceArn() const {
    return m_resource_arn;
}
void OAIPutResourcePolicy_request::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIPutResourcePolicy_request::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIPutResourcePolicy_request::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIPutResourcePolicy_request::getPolicy() const {
    return m_policy;
}
void OAIPutResourcePolicy_request::setPolicy(const QString &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAIPutResourcePolicy_request::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAIPutResourcePolicy_request::is_policy_Valid() const{
    return m_policy_isValid;
}

bool OAIPutResourcePolicy_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutResourcePolicy_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && m_policy_isValid && true;
}

} // namespace OpenAPI
