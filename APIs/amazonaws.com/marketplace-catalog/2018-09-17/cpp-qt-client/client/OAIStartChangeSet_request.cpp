/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartChangeSet_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartChangeSet_request::OAIStartChangeSet_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartChangeSet_request::OAIStartChangeSet_request() {
    this->initializeModel();
}

OAIStartChangeSet_request::~OAIStartChangeSet_request() {}

void OAIStartChangeSet_request::initializeModel() {

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_change_set_isSet = false;
    m_change_set_isValid = false;

    m_change_set_name_isSet = false;
    m_change_set_name_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_change_set_tags_isSet = false;
    m_change_set_tags_isValid = false;
}

void OAIStartChangeSet_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartChangeSet_request::fromJsonObject(QJsonObject json) {

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("Catalog")]);
    m_catalog_isSet = !json[QString("Catalog")].isNull() && m_catalog_isValid;

    m_change_set_isValid = ::OpenAPI::fromJsonValue(m_change_set, json[QString("ChangeSet")]);
    m_change_set_isSet = !json[QString("ChangeSet")].isNull() && m_change_set_isValid;

    m_change_set_name_isValid = ::OpenAPI::fromJsonValue(m_change_set_name, json[QString("ChangeSetName")]);
    m_change_set_name_isSet = !json[QString("ChangeSetName")].isNull() && m_change_set_name_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_change_set_tags_isValid = ::OpenAPI::fromJsonValue(m_change_set_tags, json[QString("ChangeSetTags")]);
    m_change_set_tags_isSet = !json[QString("ChangeSetTags")].isNull() && m_change_set_tags_isValid;
}

QString OAIStartChangeSet_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartChangeSet_request::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_isSet) {
        obj.insert(QString("Catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_change_set.size() > 0) {
        obj.insert(QString("ChangeSet"), ::OpenAPI::toJsonValue(m_change_set));
    }
    if (m_change_set_name_isSet) {
        obj.insert(QString("ChangeSetName"), ::OpenAPI::toJsonValue(m_change_set_name));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_change_set_tags.size() > 0) {
        obj.insert(QString("ChangeSetTags"), ::OpenAPI::toJsonValue(m_change_set_tags));
    }
    return obj;
}

QString OAIStartChangeSet_request::getCatalog() const {
    return m_catalog;
}
void OAIStartChangeSet_request::setCatalog(const QString &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAIStartChangeSet_request::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAIStartChangeSet_request::is_catalog_Valid() const{
    return m_catalog_isValid;
}

QList<OAIChange> OAIStartChangeSet_request::getChangeSet() const {
    return m_change_set;
}
void OAIStartChangeSet_request::setChangeSet(const QList<OAIChange> &change_set) {
    m_change_set = change_set;
    m_change_set_isSet = true;
}

bool OAIStartChangeSet_request::is_change_set_Set() const{
    return m_change_set_isSet;
}

bool OAIStartChangeSet_request::is_change_set_Valid() const{
    return m_change_set_isValid;
}

QString OAIStartChangeSet_request::getChangeSetName() const {
    return m_change_set_name;
}
void OAIStartChangeSet_request::setChangeSetName(const QString &change_set_name) {
    m_change_set_name = change_set_name;
    m_change_set_name_isSet = true;
}

bool OAIStartChangeSet_request::is_change_set_name_Set() const{
    return m_change_set_name_isSet;
}

bool OAIStartChangeSet_request::is_change_set_name_Valid() const{
    return m_change_set_name_isValid;
}

QString OAIStartChangeSet_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIStartChangeSet_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIStartChangeSet_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIStartChangeSet_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAIStartChangeSet_request::getChangeSetTags() const {
    return m_change_set_tags;
}
void OAIStartChangeSet_request::setChangeSetTags(const QList<OAITag> &change_set_tags) {
    m_change_set_tags = change_set_tags;
    m_change_set_tags_isSet = true;
}

bool OAIStartChangeSet_request::is_change_set_tags_Set() const{
    return m_change_set_tags_isSet;
}

bool OAIStartChangeSet_request::is_change_set_tags_Valid() const{
    return m_change_set_tags_isValid;
}

bool OAIStartChangeSet_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_set_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartChangeSet_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_catalog_isValid && m_change_set_isValid && true;
}

} // namespace OpenAPI
