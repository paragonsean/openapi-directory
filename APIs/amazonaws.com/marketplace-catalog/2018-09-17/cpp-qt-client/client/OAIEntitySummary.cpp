/**
 * AWS Marketplace Catalog Service
 * <p>Catalog API actions allow you to manage your entities through list, describe, and update capabilities. An entity can be a product or an offer on AWS Marketplace. </p> <p>You can automate your entity update process by integrating the AWS Marketplace Catalog API with your AWS Marketplace product build or deployment pipelines. You can also create your own applications on top of the Catalog API to manage your products on AWS Marketplace.</p>
 *
 * The version of the OpenAPI document: 2018-09-17
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntitySummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntitySummary::OAIEntitySummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntitySummary::OAIEntitySummary() {
    this->initializeModel();
}

OAIEntitySummary::~OAIEntitySummary() {}

void OAIEntitySummary::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_entity_id_isSet = false;
    m_entity_id_isValid = false;

    m_entity_arn_isSet = false;
    m_entity_arn_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIEntitySummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntitySummary::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("EntityType")]);
    m_entity_type_isSet = !json[QString("EntityType")].isNull() && m_entity_type_isValid;

    m_entity_id_isValid = ::OpenAPI::fromJsonValue(m_entity_id, json[QString("EntityId")]);
    m_entity_id_isSet = !json[QString("EntityId")].isNull() && m_entity_id_isValid;

    m_entity_arn_isValid = ::OpenAPI::fromJsonValue(m_entity_arn, json[QString("EntityArn")]);
    m_entity_arn_isSet = !json[QString("EntityArn")].isNull() && m_entity_arn_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("LastModifiedDate")]);
    m_last_modified_date_isSet = !json[QString("LastModifiedDate")].isNull() && m_last_modified_date_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("Visibility")]);
    m_visibility_isSet = !json[QString("Visibility")].isNull() && m_visibility_isValid;
}

QString OAIEntitySummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntitySummary::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("EntityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_entity_id_isSet) {
        obj.insert(QString("EntityId"), ::OpenAPI::toJsonValue(m_entity_id));
    }
    if (m_entity_arn_isSet) {
        obj.insert(QString("EntityArn"), ::OpenAPI::toJsonValue(m_entity_arn));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("LastModifiedDate"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("Visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIEntitySummary::getName() const {
    return m_name;
}
void OAIEntitySummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEntitySummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEntitySummary::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEntitySummary::getEntityType() const {
    return m_entity_type;
}
void OAIEntitySummary::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIEntitySummary::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIEntitySummary::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

QString OAIEntitySummary::getEntityId() const {
    return m_entity_id;
}
void OAIEntitySummary::setEntityId(const QString &entity_id) {
    m_entity_id = entity_id;
    m_entity_id_isSet = true;
}

bool OAIEntitySummary::is_entity_id_Set() const{
    return m_entity_id_isSet;
}

bool OAIEntitySummary::is_entity_id_Valid() const{
    return m_entity_id_isValid;
}

QString OAIEntitySummary::getEntityArn() const {
    return m_entity_arn;
}
void OAIEntitySummary::setEntityArn(const QString &entity_arn) {
    m_entity_arn = entity_arn;
    m_entity_arn_isSet = true;
}

bool OAIEntitySummary::is_entity_arn_Set() const{
    return m_entity_arn_isSet;
}

bool OAIEntitySummary::is_entity_arn_Valid() const{
    return m_entity_arn_isValid;
}

QString OAIEntitySummary::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIEntitySummary::setLastModifiedDate(const QString &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIEntitySummary::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIEntitySummary::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIEntitySummary::getVisibility() const {
    return m_visibility;
}
void OAIEntitySummary::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIEntitySummary::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIEntitySummary::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIEntitySummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntitySummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
