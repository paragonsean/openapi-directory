# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.active_context_time_to_live import ActiveContextTimeToLive
from openapi_server import util


class ActiveContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, time_to_live: ActiveContextTimeToLive=None, parameters: Dict=None):
        """ActiveContext - a model defined in OpenAPI

        :param name: The name of this ActiveContext.
        :param time_to_live: The time_to_live of this ActiveContext.
        :param parameters: The parameters of this ActiveContext.
        """
        self.openapi_types = {
            'name': str,
            'time_to_live': ActiveContextTimeToLive,
            'parameters': Dict
        }

        self.attribute_map = {
            'name': 'name',
            'time_to_live': 'timeToLive',
            'parameters': 'parameters'
        }

        self._name = name
        self._time_to_live = time_to_live
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveContext of this ActiveContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ActiveContext.


        :return: The name of this ActiveContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActiveContext.


        :param name: The name of this ActiveContext.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def time_to_live(self):
        """Gets the time_to_live of this ActiveContext.


        :return: The time_to_live of this ActiveContext.
        :rtype: ActiveContextTimeToLive
        """
        return self._time_to_live

    @time_to_live.setter
    def time_to_live(self, time_to_live):
        """Sets the time_to_live of this ActiveContext.


        :param time_to_live: The time_to_live of this ActiveContext.
        :type time_to_live: ActiveContextTimeToLive
        """
        if time_to_live is None:
            raise ValueError("Invalid value for `time_to_live`, must not be `None`")

        self._time_to_live = time_to_live

    @property
    def parameters(self):
        """Gets the parameters of this ActiveContext.


        :return: The parameters of this ActiveContext.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ActiveContext.


        :param parameters: The parameters of this ActiveContext.
        :type parameters: Dict
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
