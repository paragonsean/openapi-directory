# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostTextResponseSentimentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sentiment_label: str=None, sentiment_score: str=None):
        """PostTextResponseSentimentResponse - a model defined in OpenAPI

        :param sentiment_label: The sentiment_label of this PostTextResponseSentimentResponse.
        :param sentiment_score: The sentiment_score of this PostTextResponseSentimentResponse.
        """
        self.openapi_types = {
            'sentiment_label': str,
            'sentiment_score': str
        }

        self.attribute_map = {
            'sentiment_label': 'sentimentLabel',
            'sentiment_score': 'sentimentScore'
        }

        self._sentiment_label = sentiment_label
        self._sentiment_score = sentiment_score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTextResponseSentimentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostTextResponse_sentimentResponse of this PostTextResponseSentimentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentiment_label(self):
        """Gets the sentiment_label of this PostTextResponseSentimentResponse.


        :return: The sentiment_label of this PostTextResponseSentimentResponse.
        :rtype: str
        """
        return self._sentiment_label

    @sentiment_label.setter
    def sentiment_label(self, sentiment_label):
        """Sets the sentiment_label of this PostTextResponseSentimentResponse.


        :param sentiment_label: The sentiment_label of this PostTextResponseSentimentResponse.
        :type sentiment_label: str
        """

        self._sentiment_label = sentiment_label

    @property
    def sentiment_score(self):
        """Gets the sentiment_score of this PostTextResponseSentimentResponse.


        :return: The sentiment_score of this PostTextResponseSentimentResponse.
        :rtype: str
        """
        return self._sentiment_score

    @sentiment_score.setter
    def sentiment_score(self, sentiment_score):
        """Sets the sentiment_score of this PostTextResponseSentimentResponse.


        :param sentiment_score: The sentiment_score of this PostTextResponseSentimentResponse.
        :type sentiment_score: str
        """

        self._sentiment_score = sentiment_score
