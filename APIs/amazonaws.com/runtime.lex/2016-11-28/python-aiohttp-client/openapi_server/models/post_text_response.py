# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dialog_state import DialogState
from openapi_server.models.message_format_type import MessageFormatType
from openapi_server.models.post_text_response_nlu_intent_confidence import PostTextResponseNluIntentConfidence
from openapi_server.models.post_text_response_response_card import PostTextResponseResponseCard
from openapi_server.models.post_text_response_sentiment_response import PostTextResponseSentimentResponse
from openapi_server import util


class PostTextResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, nlu_intent_confidence: PostTextResponseNluIntentConfidence=None, alternative_intents: List=None, slots: Dict=None, session_attributes: Dict=None, message: str=None, sentiment_response: PostTextResponseSentimentResponse=None, message_format: MessageFormatType=None, dialog_state: DialogState=None, slot_to_elicit: str=None, response_card: PostTextResponseResponseCard=None, session_id: str=None, bot_version: str=None, active_contexts: List=None):
        """PostTextResponse - a model defined in OpenAPI

        :param intent_name: The intent_name of this PostTextResponse.
        :param nlu_intent_confidence: The nlu_intent_confidence of this PostTextResponse.
        :param alternative_intents: The alternative_intents of this PostTextResponse.
        :param slots: The slots of this PostTextResponse.
        :param session_attributes: The session_attributes of this PostTextResponse.
        :param message: The message of this PostTextResponse.
        :param sentiment_response: The sentiment_response of this PostTextResponse.
        :param message_format: The message_format of this PostTextResponse.
        :param dialog_state: The dialog_state of this PostTextResponse.
        :param slot_to_elicit: The slot_to_elicit of this PostTextResponse.
        :param response_card: The response_card of this PostTextResponse.
        :param session_id: The session_id of this PostTextResponse.
        :param bot_version: The bot_version of this PostTextResponse.
        :param active_contexts: The active_contexts of this PostTextResponse.
        """
        self.openapi_types = {
            'intent_name': str,
            'nlu_intent_confidence': PostTextResponseNluIntentConfidence,
            'alternative_intents': List,
            'slots': Dict,
            'session_attributes': Dict,
            'message': str,
            'sentiment_response': PostTextResponseSentimentResponse,
            'message_format': MessageFormatType,
            'dialog_state': DialogState,
            'slot_to_elicit': str,
            'response_card': PostTextResponseResponseCard,
            'session_id': str,
            'bot_version': str,
            'active_contexts': List
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'nlu_intent_confidence': 'nluIntentConfidence',
            'alternative_intents': 'alternativeIntents',
            'slots': 'slots',
            'session_attributes': 'sessionAttributes',
            'message': 'message',
            'sentiment_response': 'sentimentResponse',
            'message_format': 'messageFormat',
            'dialog_state': 'dialogState',
            'slot_to_elicit': 'slotToElicit',
            'response_card': 'responseCard',
            'session_id': 'sessionId',
            'bot_version': 'botVersion',
            'active_contexts': 'activeContexts'
        }

        self._intent_name = intent_name
        self._nlu_intent_confidence = nlu_intent_confidence
        self._alternative_intents = alternative_intents
        self._slots = slots
        self._session_attributes = session_attributes
        self._message = message
        self._sentiment_response = sentiment_response
        self._message_format = message_format
        self._dialog_state = dialog_state
        self._slot_to_elicit = slot_to_elicit
        self._response_card = response_card
        self._session_id = session_id
        self._bot_version = bot_version
        self._active_contexts = active_contexts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTextResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostTextResponse of this PostTextResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this PostTextResponse.


        :return: The intent_name of this PostTextResponse.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this PostTextResponse.


        :param intent_name: The intent_name of this PostTextResponse.
        :type intent_name: str
        """

        self._intent_name = intent_name

    @property
    def nlu_intent_confidence(self):
        """Gets the nlu_intent_confidence of this PostTextResponse.


        :return: The nlu_intent_confidence of this PostTextResponse.
        :rtype: PostTextResponseNluIntentConfidence
        """
        return self._nlu_intent_confidence

    @nlu_intent_confidence.setter
    def nlu_intent_confidence(self, nlu_intent_confidence):
        """Sets the nlu_intent_confidence of this PostTextResponse.


        :param nlu_intent_confidence: The nlu_intent_confidence of this PostTextResponse.
        :type nlu_intent_confidence: PostTextResponseNluIntentConfidence
        """

        self._nlu_intent_confidence = nlu_intent_confidence

    @property
    def alternative_intents(self):
        """Gets the alternative_intents of this PostTextResponse.


        :return: The alternative_intents of this PostTextResponse.
        :rtype: List
        """
        return self._alternative_intents

    @alternative_intents.setter
    def alternative_intents(self, alternative_intents):
        """Sets the alternative_intents of this PostTextResponse.


        :param alternative_intents: The alternative_intents of this PostTextResponse.
        :type alternative_intents: List
        """

        self._alternative_intents = alternative_intents

    @property
    def slots(self):
        """Gets the slots of this PostTextResponse.


        :return: The slots of this PostTextResponse.
        :rtype: Dict
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this PostTextResponse.


        :param slots: The slots of this PostTextResponse.
        :type slots: Dict
        """

        self._slots = slots

    @property
    def session_attributes(self):
        """Gets the session_attributes of this PostTextResponse.


        :return: The session_attributes of this PostTextResponse.
        :rtype: Dict
        """
        return self._session_attributes

    @session_attributes.setter
    def session_attributes(self, session_attributes):
        """Sets the session_attributes of this PostTextResponse.


        :param session_attributes: The session_attributes of this PostTextResponse.
        :type session_attributes: Dict
        """

        self._session_attributes = session_attributes

    @property
    def message(self):
        """Gets the message of this PostTextResponse.


        :return: The message of this PostTextResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PostTextResponse.


        :param message: The message of this PostTextResponse.
        :type message: str
        """

        self._message = message

    @property
    def sentiment_response(self):
        """Gets the sentiment_response of this PostTextResponse.


        :return: The sentiment_response of this PostTextResponse.
        :rtype: PostTextResponseSentimentResponse
        """
        return self._sentiment_response

    @sentiment_response.setter
    def sentiment_response(self, sentiment_response):
        """Sets the sentiment_response of this PostTextResponse.


        :param sentiment_response: The sentiment_response of this PostTextResponse.
        :type sentiment_response: PostTextResponseSentimentResponse
        """

        self._sentiment_response = sentiment_response

    @property
    def message_format(self):
        """Gets the message_format of this PostTextResponse.


        :return: The message_format of this PostTextResponse.
        :rtype: MessageFormatType
        """
        return self._message_format

    @message_format.setter
    def message_format(self, message_format):
        """Sets the message_format of this PostTextResponse.


        :param message_format: The message_format of this PostTextResponse.
        :type message_format: MessageFormatType
        """

        self._message_format = message_format

    @property
    def dialog_state(self):
        """Gets the dialog_state of this PostTextResponse.


        :return: The dialog_state of this PostTextResponse.
        :rtype: DialogState
        """
        return self._dialog_state

    @dialog_state.setter
    def dialog_state(self, dialog_state):
        """Sets the dialog_state of this PostTextResponse.


        :param dialog_state: The dialog_state of this PostTextResponse.
        :type dialog_state: DialogState
        """

        self._dialog_state = dialog_state

    @property
    def slot_to_elicit(self):
        """Gets the slot_to_elicit of this PostTextResponse.


        :return: The slot_to_elicit of this PostTextResponse.
        :rtype: str
        """
        return self._slot_to_elicit

    @slot_to_elicit.setter
    def slot_to_elicit(self, slot_to_elicit):
        """Sets the slot_to_elicit of this PostTextResponse.


        :param slot_to_elicit: The slot_to_elicit of this PostTextResponse.
        :type slot_to_elicit: str
        """

        self._slot_to_elicit = slot_to_elicit

    @property
    def response_card(self):
        """Gets the response_card of this PostTextResponse.


        :return: The response_card of this PostTextResponse.
        :rtype: PostTextResponseResponseCard
        """
        return self._response_card

    @response_card.setter
    def response_card(self, response_card):
        """Sets the response_card of this PostTextResponse.


        :param response_card: The response_card of this PostTextResponse.
        :type response_card: PostTextResponseResponseCard
        """

        self._response_card = response_card

    @property
    def session_id(self):
        """Gets the session_id of this PostTextResponse.


        :return: The session_id of this PostTextResponse.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PostTextResponse.


        :param session_id: The session_id of this PostTextResponse.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def bot_version(self):
        """Gets the bot_version of this PostTextResponse.


        :return: The bot_version of this PostTextResponse.
        :rtype: str
        """
        return self._bot_version

    @bot_version.setter
    def bot_version(self, bot_version):
        """Sets the bot_version of this PostTextResponse.


        :param bot_version: The bot_version of this PostTextResponse.
        :type bot_version: str
        """

        self._bot_version = bot_version

    @property
    def active_contexts(self):
        """Gets the active_contexts of this PostTextResponse.


        :return: The active_contexts of this PostTextResponse.
        :rtype: List
        """
        return self._active_contexts

    @active_contexts.setter
    def active_contexts(self, active_contexts):
        """Sets the active_contexts of this PostTextResponse.


        :param active_contexts: The active_contexts of this PostTextResponse.
        :type active_contexts: List
        """

        self._active_contexts = active_contexts
