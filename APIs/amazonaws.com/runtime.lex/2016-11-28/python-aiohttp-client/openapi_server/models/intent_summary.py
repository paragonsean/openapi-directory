# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.confirmation_status import ConfirmationStatus
from openapi_server.models.dialog_action_type import DialogActionType
from openapi_server.models.fulfillment_state import FulfillmentState
from openapi_server import util


class IntentSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, intent_name: str=None, checkpoint_label: str=None, slots: Dict=None, confirmation_status: ConfirmationStatus=None, dialog_action_type: DialogActionType=None, fulfillment_state: FulfillmentState=None, slot_to_elicit: str=None):
        """IntentSummary - a model defined in OpenAPI

        :param intent_name: The intent_name of this IntentSummary.
        :param checkpoint_label: The checkpoint_label of this IntentSummary.
        :param slots: The slots of this IntentSummary.
        :param confirmation_status: The confirmation_status of this IntentSummary.
        :param dialog_action_type: The dialog_action_type of this IntentSummary.
        :param fulfillment_state: The fulfillment_state of this IntentSummary.
        :param slot_to_elicit: The slot_to_elicit of this IntentSummary.
        """
        self.openapi_types = {
            'intent_name': str,
            'checkpoint_label': str,
            'slots': Dict,
            'confirmation_status': ConfirmationStatus,
            'dialog_action_type': DialogActionType,
            'fulfillment_state': FulfillmentState,
            'slot_to_elicit': str
        }

        self.attribute_map = {
            'intent_name': 'intentName',
            'checkpoint_label': 'checkpointLabel',
            'slots': 'slots',
            'confirmation_status': 'confirmationStatus',
            'dialog_action_type': 'dialogActionType',
            'fulfillment_state': 'fulfillmentState',
            'slot_to_elicit': 'slotToElicit'
        }

        self._intent_name = intent_name
        self._checkpoint_label = checkpoint_label
        self._slots = slots
        self._confirmation_status = confirmation_status
        self._dialog_action_type = dialog_action_type
        self._fulfillment_state = fulfillment_state
        self._slot_to_elicit = slot_to_elicit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntentSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntentSummary of this IntentSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def intent_name(self):
        """Gets the intent_name of this IntentSummary.


        :return: The intent_name of this IntentSummary.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this IntentSummary.


        :param intent_name: The intent_name of this IntentSummary.
        :type intent_name: str
        """

        self._intent_name = intent_name

    @property
    def checkpoint_label(self):
        """Gets the checkpoint_label of this IntentSummary.


        :return: The checkpoint_label of this IntentSummary.
        :rtype: str
        """
        return self._checkpoint_label

    @checkpoint_label.setter
    def checkpoint_label(self, checkpoint_label):
        """Sets the checkpoint_label of this IntentSummary.


        :param checkpoint_label: The checkpoint_label of this IntentSummary.
        :type checkpoint_label: str
        """

        self._checkpoint_label = checkpoint_label

    @property
    def slots(self):
        """Gets the slots of this IntentSummary.


        :return: The slots of this IntentSummary.
        :rtype: Dict
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this IntentSummary.


        :param slots: The slots of this IntentSummary.
        :type slots: Dict
        """

        self._slots = slots

    @property
    def confirmation_status(self):
        """Gets the confirmation_status of this IntentSummary.


        :return: The confirmation_status of this IntentSummary.
        :rtype: ConfirmationStatus
        """
        return self._confirmation_status

    @confirmation_status.setter
    def confirmation_status(self, confirmation_status):
        """Sets the confirmation_status of this IntentSummary.


        :param confirmation_status: The confirmation_status of this IntentSummary.
        :type confirmation_status: ConfirmationStatus
        """

        self._confirmation_status = confirmation_status

    @property
    def dialog_action_type(self):
        """Gets the dialog_action_type of this IntentSummary.


        :return: The dialog_action_type of this IntentSummary.
        :rtype: DialogActionType
        """
        return self._dialog_action_type

    @dialog_action_type.setter
    def dialog_action_type(self, dialog_action_type):
        """Sets the dialog_action_type of this IntentSummary.


        :param dialog_action_type: The dialog_action_type of this IntentSummary.
        :type dialog_action_type: DialogActionType
        """
        if dialog_action_type is None:
            raise ValueError("Invalid value for `dialog_action_type`, must not be `None`")

        self._dialog_action_type = dialog_action_type

    @property
    def fulfillment_state(self):
        """Gets the fulfillment_state of this IntentSummary.


        :return: The fulfillment_state of this IntentSummary.
        :rtype: FulfillmentState
        """
        return self._fulfillment_state

    @fulfillment_state.setter
    def fulfillment_state(self, fulfillment_state):
        """Sets the fulfillment_state of this IntentSummary.


        :param fulfillment_state: The fulfillment_state of this IntentSummary.
        :type fulfillment_state: FulfillmentState
        """

        self._fulfillment_state = fulfillment_state

    @property
    def slot_to_elicit(self):
        """Gets the slot_to_elicit of this IntentSummary.


        :return: The slot_to_elicit of this IntentSummary.
        :rtype: str
        """
        return self._slot_to_elicit

    @slot_to_elicit.setter
    def slot_to_elicit(self, slot_to_elicit):
        """Sets the slot_to_elicit of this IntentSummary.


        :param slot_to_elicit: The slot_to_elicit of this IntentSummary.
        :type slot_to_elicit: str
        """

        self._slot_to_elicit = slot_to_elicit
