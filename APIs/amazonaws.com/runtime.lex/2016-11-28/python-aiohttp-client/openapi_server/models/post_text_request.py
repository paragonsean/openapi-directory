# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.active_context import ActiveContext
from openapi_server import util


class PostTextRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_attributes: Dict[str, str]=None, request_attributes: Dict[str, str]=None, input_text: str=None, active_contexts: List[ActiveContext]=None):
        """PostTextRequest - a model defined in OpenAPI

        :param session_attributes: The session_attributes of this PostTextRequest.
        :param request_attributes: The request_attributes of this PostTextRequest.
        :param input_text: The input_text of this PostTextRequest.
        :param active_contexts: The active_contexts of this PostTextRequest.
        """
        self.openapi_types = {
            'session_attributes': Dict[str, str],
            'request_attributes': Dict[str, str],
            'input_text': str,
            'active_contexts': List[ActiveContext]
        }

        self.attribute_map = {
            'session_attributes': 'sessionAttributes',
            'request_attributes': 'requestAttributes',
            'input_text': 'inputText',
            'active_contexts': 'activeContexts'
        }

        self._session_attributes = session_attributes
        self._request_attributes = request_attributes
        self._input_text = input_text
        self._active_contexts = active_contexts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTextRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostText_request of this PostTextRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_attributes(self):
        """Gets the session_attributes of this PostTextRequest.

        <p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>

        :return: The session_attributes of this PostTextRequest.
        :rtype: Dict[str, str]
        """
        return self._session_attributes

    @session_attributes.setter
    def session_attributes(self, session_attributes):
        """Sets the session_attributes of this PostTextRequest.

        <p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>

        :param session_attributes: The session_attributes of this PostTextRequest.
        :type session_attributes: Dict[str, str]
        """

        self._session_attributes = session_attributes

    @property
    def request_attributes(self):
        """Gets the request_attributes of this PostTextRequest.

        <p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>

        :return: The request_attributes of this PostTextRequest.
        :rtype: Dict[str, str]
        """
        return self._request_attributes

    @request_attributes.setter
    def request_attributes(self, request_attributes):
        """Sets the request_attributes of this PostTextRequest.

        <p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>

        :param request_attributes: The request_attributes of this PostTextRequest.
        :type request_attributes: Dict[str, str]
        """

        self._request_attributes = request_attributes

    @property
    def input_text(self):
        """Gets the input_text of this PostTextRequest.

        The text that the user entered (Amazon Lex interprets this text).

        :return: The input_text of this PostTextRequest.
        :rtype: str
        """
        return self._input_text

    @input_text.setter
    def input_text(self, input_text):
        """Sets the input_text of this PostTextRequest.

        The text that the user entered (Amazon Lex interprets this text).

        :param input_text: The input_text of this PostTextRequest.
        :type input_text: str
        """
        if input_text is None:
            raise ValueError("Invalid value for `input_text`, must not be `None`")
        if input_text is not None and len(input_text) > 1024:
            raise ValueError("Invalid value for `input_text`, length must be less than or equal to `1024`")
        if input_text is not None and len(input_text) < 1:
            raise ValueError("Invalid value for `input_text`, length must be greater than or equal to `1`")

        self._input_text = input_text

    @property
    def active_contexts(self):
        """Gets the active_contexts of this PostTextRequest.

        <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>

        :return: The active_contexts of this PostTextRequest.
        :rtype: List[ActiveContext]
        """
        return self._active_contexts

    @active_contexts.setter
    def active_contexts(self, active_contexts):
        """Sets the active_contexts of this PostTextRequest.

        <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>

        :param active_contexts: The active_contexts of this PostTextRequest.
        :type active_contexts: List[ActiveContext]
        """
        if active_contexts is not None and len(active_contexts) > 20:
            raise ValueError("Invalid value for `active_contexts`, number of items must be less than or equal to `20`")
        if active_contexts is not None and len(active_contexts) < 0:
            raise ValueError("Invalid value for `active_contexts`, number of items must be greater than or equal to `0`")

        self._active_contexts = active_contexts
