# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.active_context import ActiveContext
from openapi_server.models.intent_summary import IntentSummary
from openapi_server.models.put_session_request_dialog_action import PutSessionRequestDialogAction
from openapi_server import util


class PutSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, session_attributes: Dict[str, str]=None, dialog_action: PutSessionRequestDialogAction=None, recent_intent_summary_view: List[IntentSummary]=None, active_contexts: List[ActiveContext]=None):
        """PutSessionRequest - a model defined in OpenAPI

        :param session_attributes: The session_attributes of this PutSessionRequest.
        :param dialog_action: The dialog_action of this PutSessionRequest.
        :param recent_intent_summary_view: The recent_intent_summary_view of this PutSessionRequest.
        :param active_contexts: The active_contexts of this PutSessionRequest.
        """
        self.openapi_types = {
            'session_attributes': Dict[str, str],
            'dialog_action': PutSessionRequestDialogAction,
            'recent_intent_summary_view': List[IntentSummary],
            'active_contexts': List[ActiveContext]
        }

        self.attribute_map = {
            'session_attributes': 'sessionAttributes',
            'dialog_action': 'dialogAction',
            'recent_intent_summary_view': 'recentIntentSummaryView',
            'active_contexts': 'activeContexts'
        }

        self._session_attributes = session_attributes
        self._dialog_action = dialog_action
        self._recent_intent_summary_view = recent_intent_summary_view
        self._active_contexts = active_contexts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSession_request of this PutSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def session_attributes(self):
        """Gets the session_attributes of this PutSessionRequest.

        Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.

        :return: The session_attributes of this PutSessionRequest.
        :rtype: Dict[str, str]
        """
        return self._session_attributes

    @session_attributes.setter
    def session_attributes(self, session_attributes):
        """Sets the session_attributes of this PutSessionRequest.

        Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.

        :param session_attributes: The session_attributes of this PutSessionRequest.
        :type session_attributes: Dict[str, str]
        """

        self._session_attributes = session_attributes

    @property
    def dialog_action(self):
        """Gets the dialog_action of this PutSessionRequest.


        :return: The dialog_action of this PutSessionRequest.
        :rtype: PutSessionRequestDialogAction
        """
        return self._dialog_action

    @dialog_action.setter
    def dialog_action(self, dialog_action):
        """Sets the dialog_action of this PutSessionRequest.


        :param dialog_action: The dialog_action of this PutSessionRequest.
        :type dialog_action: PutSessionRequestDialogAction
        """

        self._dialog_action = dialog_action

    @property
    def recent_intent_summary_view(self):
        """Gets the recent_intent_summary_view of this PutSessionRequest.

        <p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p> <p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>

        :return: The recent_intent_summary_view of this PutSessionRequest.
        :rtype: List[IntentSummary]
        """
        return self._recent_intent_summary_view

    @recent_intent_summary_view.setter
    def recent_intent_summary_view(self, recent_intent_summary_view):
        """Sets the recent_intent_summary_view of this PutSessionRequest.

        <p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p> <p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>

        :param recent_intent_summary_view: The recent_intent_summary_view of this PutSessionRequest.
        :type recent_intent_summary_view: List[IntentSummary]
        """
        if recent_intent_summary_view is not None and len(recent_intent_summary_view) > 3:
            raise ValueError("Invalid value for `recent_intent_summary_view`, number of items must be less than or equal to `3`")
        if recent_intent_summary_view is not None and len(recent_intent_summary_view) < 0:
            raise ValueError("Invalid value for `recent_intent_summary_view`, number of items must be greater than or equal to `0`")

        self._recent_intent_summary_view = recent_intent_summary_view

    @property
    def active_contexts(self):
        """Gets the active_contexts of this PutSessionRequest.

        <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>

        :return: The active_contexts of this PutSessionRequest.
        :rtype: List[ActiveContext]
        """
        return self._active_contexts

    @active_contexts.setter
    def active_contexts(self, active_contexts):
        """Sets the active_contexts of this PutSessionRequest.

        <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>

        :param active_contexts: The active_contexts of this PutSessionRequest.
        :type active_contexts: List[ActiveContext]
        """
        if active_contexts is not None and len(active_contexts) > 20:
            raise ValueError("Invalid value for `active_contexts`, number of items must be less than or equal to `20`")
        if active_contexts is not None and len(active_contexts) < 0:
            raise ValueError("Invalid value for `active_contexts`, number of items must be greater than or equal to `0`")

        self._active_contexts = active_contexts
