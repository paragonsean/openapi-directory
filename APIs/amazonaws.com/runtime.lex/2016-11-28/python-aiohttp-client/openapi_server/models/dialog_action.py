# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dialog_action_type import DialogActionType
from openapi_server.models.fulfillment_state import FulfillmentState
from openapi_server.models.message_format_type import MessageFormatType
from openapi_server import util


class DialogAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: DialogActionType=None, intent_name: str=None, slots: Dict=None, slot_to_elicit: str=None, fulfillment_state: FulfillmentState=None, message: str=None, message_format: MessageFormatType=None):
        """DialogAction - a model defined in OpenAPI

        :param type: The type of this DialogAction.
        :param intent_name: The intent_name of this DialogAction.
        :param slots: The slots of this DialogAction.
        :param slot_to_elicit: The slot_to_elicit of this DialogAction.
        :param fulfillment_state: The fulfillment_state of this DialogAction.
        :param message: The message of this DialogAction.
        :param message_format: The message_format of this DialogAction.
        """
        self.openapi_types = {
            'type': DialogActionType,
            'intent_name': str,
            'slots': Dict,
            'slot_to_elicit': str,
            'fulfillment_state': FulfillmentState,
            'message': str,
            'message_format': MessageFormatType
        }

        self.attribute_map = {
            'type': 'type',
            'intent_name': 'intentName',
            'slots': 'slots',
            'slot_to_elicit': 'slotToElicit',
            'fulfillment_state': 'fulfillmentState',
            'message': 'message',
            'message_format': 'messageFormat'
        }

        self._type = type
        self._intent_name = intent_name
        self._slots = slots
        self._slot_to_elicit = slot_to_elicit
        self._fulfillment_state = fulfillment_state
        self._message = message
        self._message_format = message_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DialogAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DialogAction of this DialogAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this DialogAction.


        :return: The type of this DialogAction.
        :rtype: DialogActionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DialogAction.


        :param type: The type of this DialogAction.
        :type type: DialogActionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def intent_name(self):
        """Gets the intent_name of this DialogAction.


        :return: The intent_name of this DialogAction.
        :rtype: str
        """
        return self._intent_name

    @intent_name.setter
    def intent_name(self, intent_name):
        """Sets the intent_name of this DialogAction.


        :param intent_name: The intent_name of this DialogAction.
        :type intent_name: str
        """

        self._intent_name = intent_name

    @property
    def slots(self):
        """Gets the slots of this DialogAction.


        :return: The slots of this DialogAction.
        :rtype: Dict
        """
        return self._slots

    @slots.setter
    def slots(self, slots):
        """Sets the slots of this DialogAction.


        :param slots: The slots of this DialogAction.
        :type slots: Dict
        """

        self._slots = slots

    @property
    def slot_to_elicit(self):
        """Gets the slot_to_elicit of this DialogAction.


        :return: The slot_to_elicit of this DialogAction.
        :rtype: str
        """
        return self._slot_to_elicit

    @slot_to_elicit.setter
    def slot_to_elicit(self, slot_to_elicit):
        """Sets the slot_to_elicit of this DialogAction.


        :param slot_to_elicit: The slot_to_elicit of this DialogAction.
        :type slot_to_elicit: str
        """

        self._slot_to_elicit = slot_to_elicit

    @property
    def fulfillment_state(self):
        """Gets the fulfillment_state of this DialogAction.


        :return: The fulfillment_state of this DialogAction.
        :rtype: FulfillmentState
        """
        return self._fulfillment_state

    @fulfillment_state.setter
    def fulfillment_state(self, fulfillment_state):
        """Sets the fulfillment_state of this DialogAction.


        :param fulfillment_state: The fulfillment_state of this DialogAction.
        :type fulfillment_state: FulfillmentState
        """

        self._fulfillment_state = fulfillment_state

    @property
    def message(self):
        """Gets the message of this DialogAction.


        :return: The message of this DialogAction.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DialogAction.


        :param message: The message of this DialogAction.
        :type message: str
        """

        self._message = message

    @property
    def message_format(self):
        """Gets the message_format of this DialogAction.


        :return: The message_format of this DialogAction.
        :rtype: MessageFormatType
        """
        return self._message_format

    @message_format.setter
    def message_format(self, message_format):
        """Sets the message_format of this DialogAction.


        :param message_format: The message_format of this DialogAction.
        :type message_format: MessageFormatType
        """

        self._message_format = message_format
