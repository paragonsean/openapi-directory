/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonLexRuntimeService);
  }
}(this, function(expect, AmazonLexRuntimeService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonLexRuntimeService.PostTextResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PostTextResponse', function() {
    it('should create an instance of PostTextResponse', function() {
      // uncomment below and update the code to test PostTextResponse
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be.a(AmazonLexRuntimeService.PostTextResponse);
    });

    it('should have the property intentName (base name: "intentName")', function() {
      // uncomment below and update the code to test the property intentName
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property nluIntentConfidence (base name: "nluIntentConfidence")', function() {
      // uncomment below and update the code to test the property nluIntentConfidence
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property alternativeIntents (base name: "alternativeIntents")', function() {
      // uncomment below and update the code to test the property alternativeIntents
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property slots (base name: "slots")', function() {
      // uncomment below and update the code to test the property slots
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property sessionAttributes (base name: "sessionAttributes")', function() {
      // uncomment below and update the code to test the property sessionAttributes
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property sentimentResponse (base name: "sentimentResponse")', function() {
      // uncomment below and update the code to test the property sentimentResponse
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property messageFormat (base name: "messageFormat")', function() {
      // uncomment below and update the code to test the property messageFormat
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property dialogState (base name: "dialogState")', function() {
      // uncomment below and update the code to test the property dialogState
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property slotToElicit (base name: "slotToElicit")', function() {
      // uncomment below and update the code to test the property slotToElicit
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property responseCard (base name: "responseCard")', function() {
      // uncomment below and update the code to test the property responseCard
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "sessionId")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property botVersion (base name: "botVersion")', function() {
      // uncomment below and update the code to test the property botVersion
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

    it('should have the property activeContexts (base name: "activeContexts")', function() {
      // uncomment below and update the code to test the property activeContexts
      //var instance = new AmazonLexRuntimeService.PostTextResponse();
      //expect(instance).to.be();
    });

  });

}));
