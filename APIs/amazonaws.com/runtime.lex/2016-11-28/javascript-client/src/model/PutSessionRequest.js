/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActiveContext from './ActiveContext';
import IntentSummary from './IntentSummary';
import PutSessionRequestDialogAction from './PutSessionRequestDialogAction';

/**
 * The PutSessionRequest model module.
 * @module model/PutSessionRequest
 * @version 2016-11-28
 */
class PutSessionRequest {
    /**
     * Constructs a new <code>PutSessionRequest</code>.
     * @alias module:model/PutSessionRequest
     */
    constructor() { 
        
        PutSessionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutSessionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutSessionRequest} obj Optional instance to populate.
     * @return {module:model/PutSessionRequest} The populated <code>PutSessionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutSessionRequest();

            if (data.hasOwnProperty('sessionAttributes')) {
                obj['sessionAttributes'] = ApiClient.convertToType(data['sessionAttributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('dialogAction')) {
                obj['dialogAction'] = PutSessionRequestDialogAction.constructFromObject(data['dialogAction']);
            }
            if (data.hasOwnProperty('recentIntentSummaryView')) {
                obj['recentIntentSummaryView'] = ApiClient.convertToType(data['recentIntentSummaryView'], [IntentSummary]);
            }
            if (data.hasOwnProperty('activeContexts')) {
                obj['activeContexts'] = ApiClient.convertToType(data['activeContexts'], [ActiveContext]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutSessionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutSessionRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dialogAction`
        if (data['dialogAction']) { // data not null
          PutSessionRequestDialogAction.validateJSON(data['dialogAction']);
        }
        if (data['recentIntentSummaryView']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['recentIntentSummaryView'])) {
                throw new Error("Expected the field `recentIntentSummaryView` to be an array in the JSON data but got " + data['recentIntentSummaryView']);
            }
            // validate the optional field `recentIntentSummaryView` (array)
            for (const item of data['recentIntentSummaryView']) {
                IntentSummary.validateJSON(item);
            };
        }
        if (data['activeContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activeContexts'])) {
                throw new Error("Expected the field `activeContexts` to be an array in the JSON data but got " + data['activeContexts']);
            }
            // validate the optional field `activeContexts` (array)
            for (const item of data['activeContexts']) {
                ActiveContext.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.
 * @member {Object.<String, String>} sessionAttributes
 */
PutSessionRequest.prototype['sessionAttributes'] = undefined;

/**
 * @member {module:model/PutSessionRequestDialogAction} dialogAction
 */
PutSessionRequest.prototype['dialogAction'] = undefined;

/**
 * <p>A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.</p> <p>An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code> request, the contents of the new summary view replaces the old summary view. For example, if a <code>GetSession</code> request returns three intents in the summary view and you call <code>PutSession</code> with one intent in the summary view, the next call to <code>GetSession</code> will only return one intent.</p>
 * @member {Array.<module:model/IntentSummary>} recentIntentSummaryView
 */
PutSessionRequest.prototype['recentIntentSummaryView'] = undefined;

/**
 * <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>
 * @member {Array.<module:model/ActiveContext>} activeContexts
 */
PutSessionRequest.prototype['activeContexts'] = undefined;






export default PutSessionRequest;

