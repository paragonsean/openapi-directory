/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActiveContext from './ActiveContext';

/**
 * The PostTextRequest model module.
 * @module model/PostTextRequest
 * @version 2016-11-28
 */
class PostTextRequest {
    /**
     * Constructs a new <code>PostTextRequest</code>.
     * @alias module:model/PostTextRequest
     * @param inputText {String} The text that the user entered (Amazon Lex interprets this text).
     */
    constructor(inputText) { 
        
        PostTextRequest.initialize(this, inputText);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputText) { 
        obj['inputText'] = inputText;
    }

    /**
     * Constructs a <code>PostTextRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostTextRequest} obj Optional instance to populate.
     * @return {module:model/PostTextRequest} The populated <code>PostTextRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostTextRequest();

            if (data.hasOwnProperty('sessionAttributes')) {
                obj['sessionAttributes'] = ApiClient.convertToType(data['sessionAttributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('requestAttributes')) {
                obj['requestAttributes'] = ApiClient.convertToType(data['requestAttributes'], {'String': 'String'});
            }
            if (data.hasOwnProperty('inputText')) {
                obj['inputText'] = ApiClient.convertToType(data['inputText'], 'String');
            }
            if (data.hasOwnProperty('activeContexts')) {
                obj['activeContexts'] = ApiClient.convertToType(data['activeContexts'], [ActiveContext]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostTextRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostTextRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostTextRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['inputText'] && !(typeof data['inputText'] === 'string' || data['inputText'] instanceof String)) {
            throw new Error("Expected the field `inputText` to be a primitive type in the JSON string but got " + data['inputText']);
        }
        if (data['activeContexts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['activeContexts'])) {
                throw new Error("Expected the field `activeContexts` to be an array in the JSON data but got " + data['activeContexts']);
            }
            // validate the optional field `activeContexts` (array)
            for (const item of data['activeContexts']) {
                ActiveContext.validateJSON(item);
            };
        }

        return true;
    }


}

PostTextRequest.RequiredProperties = ["inputText"];

/**
 * <p>Application-specific information passed between Amazon Lex and a client application.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting Session Attributes</a>.</p>
 * @member {Object.<String, String>} sessionAttributes
 */
PostTextRequest.prototype['sessionAttributes'] = undefined;

/**
 * <p>Request-specific information passed between Amazon Lex and a client application.</p> <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting Request Attributes</a>.</p>
 * @member {Object.<String, String>} requestAttributes
 */
PostTextRequest.prototype['requestAttributes'] = undefined;

/**
 * The text that the user entered (Amazon Lex interprets this text).
 * @member {String} inputText
 */
PostTextRequest.prototype['inputText'] = undefined;

/**
 * <p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p> <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p>
 * @member {Array.<module:model/ActiveContext>} activeContexts
 */
PostTextRequest.prototype['activeContexts'] = undefined;






export default PostTextRequest;

