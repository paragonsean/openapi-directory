/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIActiveContext.h
 *
 * A context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the &lt;code&gt;PutContent&lt;/code&gt;, &lt;code&gt;PutText&lt;/code&gt;, or &lt;code&gt;PutSession&lt;/code&gt; operation.
 */

#ifndef OAIActiveContext_H
#define OAIActiveContext_H

#include <QJsonObject>

#include "OAIActiveContext_timeToLive.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActiveContext_timeToLive;

class OAIActiveContext : public OAIObject {
public:
    OAIActiveContext();
    OAIActiveContext(QString json);
    ~OAIActiveContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIActiveContext_timeToLive getTimeToLive() const;
    void setTimeToLive(const OAIActiveContext_timeToLive &time_to_live);
    bool is_time_to_live_Set() const;
    bool is_time_to_live_Valid() const;

    QMap getParameters() const;
    void setParameters(const QMap &parameters);
    bool is_parameters_Set() const;
    bool is_parameters_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIActiveContext_timeToLive m_time_to_live;
    bool m_time_to_live_isSet;
    bool m_time_to_live_isValid;

    QMap m_parameters;
    bool m_parameters_isSet;
    bool m_parameters_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIActiveContext)

#endif // OAIActiveContext_H
