/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPostText_request.h
 *
 * 
 */

#ifndef OAIPostText_request_H
#define OAIPostText_request_H

#include <QJsonObject>

#include "OAIActiveContext.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActiveContext;

class OAIPostText_request : public OAIObject {
public:
    OAIPostText_request();
    OAIPostText_request(QString json);
    ~OAIPostText_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getSessionAttributes() const;
    void setSessionAttributes(const QMap<QString, QString> &session_attributes);
    bool is_session_attributes_Set() const;
    bool is_session_attributes_Valid() const;

    QMap<QString, QString> getRequestAttributes() const;
    void setRequestAttributes(const QMap<QString, QString> &request_attributes);
    bool is_request_attributes_Set() const;
    bool is_request_attributes_Valid() const;

    QString getInputText() const;
    void setInputText(const QString &input_text);
    bool is_input_text_Set() const;
    bool is_input_text_Valid() const;

    QList<OAIActiveContext> getActiveContexts() const;
    void setActiveContexts(const QList<OAIActiveContext> &active_contexts);
    bool is_active_contexts_Set() const;
    bool is_active_contexts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_session_attributes;
    bool m_session_attributes_isSet;
    bool m_session_attributes_isValid;

    QMap<QString, QString> m_request_attributes;
    bool m_request_attributes_isSet;
    bool m_request_attributes_isValid;

    QString m_input_text;
    bool m_input_text_isSet;
    bool m_input_text_isValid;

    QList<OAIActiveContext> m_active_contexts;
    bool m_active_contexts_isSet;
    bool m_active_contexts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPostText_request)

#endif // OAIPostText_request_H
