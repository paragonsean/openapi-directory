/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostText_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostText_request::OAIPostText_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostText_request::OAIPostText_request() {
    this->initializeModel();
}

OAIPostText_request::~OAIPostText_request() {}

void OAIPostText_request::initializeModel() {

    m_session_attributes_isSet = false;
    m_session_attributes_isValid = false;

    m_request_attributes_isSet = false;
    m_request_attributes_isValid = false;

    m_input_text_isSet = false;
    m_input_text_isValid = false;

    m_active_contexts_isSet = false;
    m_active_contexts_isValid = false;
}

void OAIPostText_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostText_request::fromJsonObject(QJsonObject json) {

    m_session_attributes_isValid = ::OpenAPI::fromJsonValue(m_session_attributes, json[QString("sessionAttributes")]);
    m_session_attributes_isSet = !json[QString("sessionAttributes")].isNull() && m_session_attributes_isValid;

    m_request_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_attributes, json[QString("requestAttributes")]);
    m_request_attributes_isSet = !json[QString("requestAttributes")].isNull() && m_request_attributes_isValid;

    m_input_text_isValid = ::OpenAPI::fromJsonValue(m_input_text, json[QString("inputText")]);
    m_input_text_isSet = !json[QString("inputText")].isNull() && m_input_text_isValid;

    m_active_contexts_isValid = ::OpenAPI::fromJsonValue(m_active_contexts, json[QString("activeContexts")]);
    m_active_contexts_isSet = !json[QString("activeContexts")].isNull() && m_active_contexts_isValid;
}

QString OAIPostText_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostText_request::asJsonObject() const {
    QJsonObject obj;
    if (m_session_attributes.size() > 0) {
        obj.insert(QString("sessionAttributes"), ::OpenAPI::toJsonValue(m_session_attributes));
    }
    if (m_request_attributes.size() > 0) {
        obj.insert(QString("requestAttributes"), ::OpenAPI::toJsonValue(m_request_attributes));
    }
    if (m_input_text_isSet) {
        obj.insert(QString("inputText"), ::OpenAPI::toJsonValue(m_input_text));
    }
    if (m_active_contexts.size() > 0) {
        obj.insert(QString("activeContexts"), ::OpenAPI::toJsonValue(m_active_contexts));
    }
    return obj;
}

QMap<QString, QString> OAIPostText_request::getSessionAttributes() const {
    return m_session_attributes;
}
void OAIPostText_request::setSessionAttributes(const QMap<QString, QString> &session_attributes) {
    m_session_attributes = session_attributes;
    m_session_attributes_isSet = true;
}

bool OAIPostText_request::is_session_attributes_Set() const{
    return m_session_attributes_isSet;
}

bool OAIPostText_request::is_session_attributes_Valid() const{
    return m_session_attributes_isValid;
}

QMap<QString, QString> OAIPostText_request::getRequestAttributes() const {
    return m_request_attributes;
}
void OAIPostText_request::setRequestAttributes(const QMap<QString, QString> &request_attributes) {
    m_request_attributes = request_attributes;
    m_request_attributes_isSet = true;
}

bool OAIPostText_request::is_request_attributes_Set() const{
    return m_request_attributes_isSet;
}

bool OAIPostText_request::is_request_attributes_Valid() const{
    return m_request_attributes_isValid;
}

QString OAIPostText_request::getInputText() const {
    return m_input_text;
}
void OAIPostText_request::setInputText(const QString &input_text) {
    m_input_text = input_text;
    m_input_text_isSet = true;
}

bool OAIPostText_request::is_input_text_Set() const{
    return m_input_text_isSet;
}

bool OAIPostText_request::is_input_text_Valid() const{
    return m_input_text_isValid;
}

QList<OAIActiveContext> OAIPostText_request::getActiveContexts() const {
    return m_active_contexts;
}
void OAIPostText_request::setActiveContexts(const QList<OAIActiveContext> &active_contexts) {
    m_active_contexts = active_contexts;
    m_active_contexts_isSet = true;
}

bool OAIPostText_request::is_active_contexts_Set() const{
    return m_active_contexts_isSet;
}

bool OAIPostText_request::is_active_contexts_Valid() const{
    return m_active_contexts_isValid;
}

bool OAIPostText_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostText_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_text_isValid && true;
}

} // namespace OpenAPI
