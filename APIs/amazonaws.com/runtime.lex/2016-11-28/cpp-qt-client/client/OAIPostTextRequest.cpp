/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostTextRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostTextRequest::OAIPostTextRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostTextRequest::OAIPostTextRequest() {
    this->initializeModel();
}

OAIPostTextRequest::~OAIPostTextRequest() {}

void OAIPostTextRequest::initializeModel() {

    m_session_attributes_isSet = false;
    m_session_attributes_isValid = false;

    m_request_attributes_isSet = false;
    m_request_attributes_isValid = false;

    m_input_text_isSet = false;
    m_input_text_isValid = false;

    m_active_contexts_isSet = false;
    m_active_contexts_isValid = false;
}

void OAIPostTextRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostTextRequest::fromJsonObject(QJsonObject json) {

    m_session_attributes_isValid = ::OpenAPI::fromJsonValue(m_session_attributes, json[QString("sessionAttributes")]);
    m_session_attributes_isSet = !json[QString("sessionAttributes")].isNull() && m_session_attributes_isValid;

    m_request_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_attributes, json[QString("requestAttributes")]);
    m_request_attributes_isSet = !json[QString("requestAttributes")].isNull() && m_request_attributes_isValid;

    m_input_text_isValid = ::OpenAPI::fromJsonValue(m_input_text, json[QString("inputText")]);
    m_input_text_isSet = !json[QString("inputText")].isNull() && m_input_text_isValid;

    m_active_contexts_isValid = ::OpenAPI::fromJsonValue(m_active_contexts, json[QString("activeContexts")]);
    m_active_contexts_isSet = !json[QString("activeContexts")].isNull() && m_active_contexts_isValid;
}

QString OAIPostTextRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostTextRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_session_attributes.isSet()) {
        obj.insert(QString("sessionAttributes"), ::OpenAPI::toJsonValue(m_session_attributes));
    }
    if (m_request_attributes.isSet()) {
        obj.insert(QString("requestAttributes"), ::OpenAPI::toJsonValue(m_request_attributes));
    }
    if (m_input_text_isSet) {
        obj.insert(QString("inputText"), ::OpenAPI::toJsonValue(m_input_text));
    }
    if (m_active_contexts.isSet()) {
        obj.insert(QString("activeContexts"), ::OpenAPI::toJsonValue(m_active_contexts));
    }
    return obj;
}

QMap OAIPostTextRequest::getSessionAttributes() const {
    return m_session_attributes;
}
void OAIPostTextRequest::setSessionAttributes(const QMap &session_attributes) {
    m_session_attributes = session_attributes;
    m_session_attributes_isSet = true;
}

bool OAIPostTextRequest::is_session_attributes_Set() const{
    return m_session_attributes_isSet;
}

bool OAIPostTextRequest::is_session_attributes_Valid() const{
    return m_session_attributes_isValid;
}

QMap OAIPostTextRequest::getRequestAttributes() const {
    return m_request_attributes;
}
void OAIPostTextRequest::setRequestAttributes(const QMap &request_attributes) {
    m_request_attributes = request_attributes;
    m_request_attributes_isSet = true;
}

bool OAIPostTextRequest::is_request_attributes_Set() const{
    return m_request_attributes_isSet;
}

bool OAIPostTextRequest::is_request_attributes_Valid() const{
    return m_request_attributes_isValid;
}

QString OAIPostTextRequest::getInputText() const {
    return m_input_text;
}
void OAIPostTextRequest::setInputText(const QString &input_text) {
    m_input_text = input_text;
    m_input_text_isSet = true;
}

bool OAIPostTextRequest::is_input_text_Set() const{
    return m_input_text_isSet;
}

bool OAIPostTextRequest::is_input_text_Valid() const{
    return m_input_text_isValid;
}

QList OAIPostTextRequest::getActiveContexts() const {
    return m_active_contexts;
}
void OAIPostTextRequest::setActiveContexts(const QList &active_contexts) {
    m_active_contexts = active_contexts;
    m_active_contexts_isSet = true;
}

bool OAIPostTextRequest::is_active_contexts_Set() const{
    return m_active_contexts_isSet;
}

bool OAIPostTextRequest::is_active_contexts_Valid() const{
    return m_active_contexts_isValid;
}

bool OAIPostTextRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostTextRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_text_isValid && true;
}

} // namespace OpenAPI
