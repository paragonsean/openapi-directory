/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPutSessionRequest.h
 *
 * 
 */

#ifndef OAIPutSessionRequest_H
#define OAIPutSessionRequest_H

#include <QJsonObject>

#include "OAIPutSessionRequest_dialogAction.h"
#include <QList>
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPutSessionRequest_dialogAction;

class OAIPutSessionRequest : public OAIObject {
public:
    OAIPutSessionRequest();
    OAIPutSessionRequest(QString json);
    ~OAIPutSessionRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap getSessionAttributes() const;
    void setSessionAttributes(const QMap &session_attributes);
    bool is_session_attributes_Set() const;
    bool is_session_attributes_Valid() const;

    OAIPutSessionRequest_dialogAction getDialogAction() const;
    void setDialogAction(const OAIPutSessionRequest_dialogAction &dialog_action);
    bool is_dialog_action_Set() const;
    bool is_dialog_action_Valid() const;

    QList getRecentIntentSummaryView() const;
    void setRecentIntentSummaryView(const QList &recent_intent_summary_view);
    bool is_recent_intent_summary_view_Set() const;
    bool is_recent_intent_summary_view_Valid() const;

    QList getActiveContexts() const;
    void setActiveContexts(const QList &active_contexts);
    bool is_active_contexts_Set() const;
    bool is_active_contexts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap m_session_attributes;
    bool m_session_attributes_isSet;
    bool m_session_attributes_isValid;

    OAIPutSessionRequest_dialogAction m_dialog_action;
    bool m_dialog_action_isSet;
    bool m_dialog_action_isValid;

    QList m_recent_intent_summary_view;
    bool m_recent_intent_summary_view_isSet;
    bool m_recent_intent_summary_view_isValid;

    QList m_active_contexts;
    bool m_active_contexts_isSet;
    bool m_active_contexts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPutSessionRequest)

#endif // OAIPutSessionRequest_H
