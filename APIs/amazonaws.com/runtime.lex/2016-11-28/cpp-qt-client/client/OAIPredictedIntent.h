/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPredictedIntent.h
 *
 * An intent that Amazon Lex suggests satisfies the user&#39;s intent. Includes the name of the intent, the confidence that Amazon Lex has that the user&#39;s intent is satisfied, and the slots defined for the intent.
 */

#ifndef OAIPredictedIntent_H
#define OAIPredictedIntent_H

#include <QJsonObject>

#include "OAIPredictedIntent_nluIntentConfidence.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPredictedIntent_nluIntentConfidence;

class OAIPredictedIntent : public OAIObject {
public:
    OAIPredictedIntent();
    OAIPredictedIntent(QString json);
    ~OAIPredictedIntent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIntentName() const;
    void setIntentName(const QString &intent_name);
    bool is_intent_name_Set() const;
    bool is_intent_name_Valid() const;

    OAIPredictedIntent_nluIntentConfidence getNluIntentConfidence() const;
    void setNluIntentConfidence(const OAIPredictedIntent_nluIntentConfidence &nlu_intent_confidence);
    bool is_nlu_intent_confidence_Set() const;
    bool is_nlu_intent_confidence_Valid() const;

    QMap getRSlots() const;
    void setRSlots(const QMap &r_slots);
    bool is_r_slots_Set() const;
    bool is_r_slots_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_intent_name;
    bool m_intent_name_isSet;
    bool m_intent_name_isValid;

    OAIPredictedIntent_nluIntentConfidence m_nlu_intent_confidence;
    bool m_nlu_intent_confidence_isSet;
    bool m_nlu_intent_confidence_isValid;

    QMap m_r_slots;
    bool m_r_slots_isSet;
    bool m_r_slots_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPredictedIntent)

#endif // OAIPredictedIntent_H
