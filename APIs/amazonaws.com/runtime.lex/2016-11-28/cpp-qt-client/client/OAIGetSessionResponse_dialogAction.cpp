/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSessionResponse_dialogAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSessionResponse_dialogAction::OAIGetSessionResponse_dialogAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSessionResponse_dialogAction::OAIGetSessionResponse_dialogAction() {
    this->initializeModel();
}

OAIGetSessionResponse_dialogAction::~OAIGetSessionResponse_dialogAction() {}

void OAIGetSessionResponse_dialogAction::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_slot_to_elicit_isSet = false;
    m_slot_to_elicit_isValid = false;

    m_fulfillment_state_isSet = false;
    m_fulfillment_state_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_format_isSet = false;
    m_message_format_isValid = false;
}

void OAIGetSessionResponse_dialogAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSessionResponse_dialogAction::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;

    m_slot_to_elicit_isValid = ::OpenAPI::fromJsonValue(m_slot_to_elicit, json[QString("slotToElicit")]);
    m_slot_to_elicit_isSet = !json[QString("slotToElicit")].isNull() && m_slot_to_elicit_isValid;

    m_fulfillment_state_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_state, json[QString("fulfillmentState")]);
    m_fulfillment_state_isSet = !json[QString("fulfillmentState")].isNull() && m_fulfillment_state_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_format_isValid = ::OpenAPI::fromJsonValue(m_message_format, json[QString("messageFormat")]);
    m_message_format_isSet = !json[QString("messageFormat")].isNull() && m_message_format_isValid;
}

QString OAIGetSessionResponse_dialogAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSessionResponse_dialogAction::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_r_slots.isSet()) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_slot_to_elicit_isSet) {
        obj.insert(QString("slotToElicit"), ::OpenAPI::toJsonValue(m_slot_to_elicit));
    }
    if (m_fulfillment_state.isSet()) {
        obj.insert(QString("fulfillmentState"), ::OpenAPI::toJsonValue(m_fulfillment_state));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_format.isSet()) {
        obj.insert(QString("messageFormat"), ::OpenAPI::toJsonValue(m_message_format));
    }
    return obj;
}

OAIDialogActionType OAIGetSessionResponse_dialogAction::getType() const {
    return m_type;
}
void OAIGetSessionResponse_dialogAction::setType(const OAIDialogActionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIGetSessionResponse_dialogAction::getIntentName() const {
    return m_intent_name;
}
void OAIGetSessionResponse_dialogAction::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QMap OAIGetSessionResponse_dialogAction::getRSlots() const {
    return m_r_slots;
}
void OAIGetSessionResponse_dialogAction::setRSlots(const QMap &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

QString OAIGetSessionResponse_dialogAction::getSlotToElicit() const {
    return m_slot_to_elicit;
}
void OAIGetSessionResponse_dialogAction::setSlotToElicit(const QString &slot_to_elicit) {
    m_slot_to_elicit = slot_to_elicit;
    m_slot_to_elicit_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_slot_to_elicit_Set() const{
    return m_slot_to_elicit_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_slot_to_elicit_Valid() const{
    return m_slot_to_elicit_isValid;
}

OAIFulfillmentState OAIGetSessionResponse_dialogAction::getFulfillmentState() const {
    return m_fulfillment_state;
}
void OAIGetSessionResponse_dialogAction::setFulfillmentState(const OAIFulfillmentState &fulfillment_state) {
    m_fulfillment_state = fulfillment_state;
    m_fulfillment_state_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_fulfillment_state_Set() const{
    return m_fulfillment_state_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_fulfillment_state_Valid() const{
    return m_fulfillment_state_isValid;
}

QString OAIGetSessionResponse_dialogAction::getMessage() const {
    return m_message;
}
void OAIGetSessionResponse_dialogAction::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_message_Valid() const{
    return m_message_isValid;
}

OAIMessageFormatType OAIGetSessionResponse_dialogAction::getMessageFormat() const {
    return m_message_format;
}
void OAIGetSessionResponse_dialogAction::setMessageFormat(const OAIMessageFormatType &message_format) {
    m_message_format = message_format;
    m_message_format_isSet = true;
}

bool OAIGetSessionResponse_dialogAction::is_message_format_Set() const{
    return m_message_format_isSet;
}

bool OAIGetSessionResponse_dialogAction::is_message_format_Valid() const{
    return m_message_format_isValid;
}

bool OAIGetSessionResponse_dialogAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_to_elicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSessionResponse_dialogAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
