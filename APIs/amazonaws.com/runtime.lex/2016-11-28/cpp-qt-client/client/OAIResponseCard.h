/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResponseCard.h
 *
 * If you configure a response card when creating your bots, Amazon Lex substitutes the session attributes and slot values that are available, and then returns it. The response card can also come from a Lambda function ( &lt;code&gt;dialogCodeHook&lt;/code&gt; and &lt;code&gt;fulfillmentActivity&lt;/code&gt; on an intent).
 */

#ifndef OAIResponseCard_H
#define OAIResponseCard_H

#include <QJsonObject>

#include "OAIContentType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResponseCard : public OAIObject {
public:
    OAIResponseCard();
    OAIResponseCard(QString json);
    ~OAIResponseCard() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    OAIContentType getContentType() const;
    void setContentType(const OAIContentType &content_type);
    bool is_content_type_Set() const;
    bool is_content_type_Valid() const;

    QList getGenericAttachments() const;
    void setGenericAttachments(const QList &generic_attachments);
    bool is_generic_attachments_Set() const;
    bool is_generic_attachments_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;

    OAIContentType m_content_type;
    bool m_content_type_isSet;
    bool m_content_type_isValid;

    QList m_generic_attachments;
    bool m_generic_attachments_isSet;
    bool m_generic_attachments_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResponseCard)

#endif // OAIResponseCard_H
