/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDialogAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDialogAction::OAIDialogAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDialogAction::OAIDialogAction() {
    this->initializeModel();
}

OAIDialogAction::~OAIDialogAction() {}

void OAIDialogAction::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_slot_to_elicit_isSet = false;
    m_slot_to_elicit_isValid = false;

    m_fulfillment_state_isSet = false;
    m_fulfillment_state_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_message_format_isSet = false;
    m_message_format_isValid = false;
}

void OAIDialogAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDialogAction::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;

    m_slot_to_elicit_isValid = ::OpenAPI::fromJsonValue(m_slot_to_elicit, json[QString("slotToElicit")]);
    m_slot_to_elicit_isSet = !json[QString("slotToElicit")].isNull() && m_slot_to_elicit_isValid;

    m_fulfillment_state_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_state, json[QString("fulfillmentState")]);
    m_fulfillment_state_isSet = !json[QString("fulfillmentState")].isNull() && m_fulfillment_state_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_message_format_isValid = ::OpenAPI::fromJsonValue(m_message_format, json[QString("messageFormat")]);
    m_message_format_isSet = !json[QString("messageFormat")].isNull() && m_message_format_isValid;
}

QString OAIDialogAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDialogAction::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_r_slots.isSet()) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_slot_to_elicit_isSet) {
        obj.insert(QString("slotToElicit"), ::OpenAPI::toJsonValue(m_slot_to_elicit));
    }
    if (m_fulfillment_state.isSet()) {
        obj.insert(QString("fulfillmentState"), ::OpenAPI::toJsonValue(m_fulfillment_state));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_message_format.isSet()) {
        obj.insert(QString("messageFormat"), ::OpenAPI::toJsonValue(m_message_format));
    }
    return obj;
}

OAIDialogActionType OAIDialogAction::getType() const {
    return m_type;
}
void OAIDialogAction::setType(const OAIDialogActionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDialogAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDialogAction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDialogAction::getIntentName() const {
    return m_intent_name;
}
void OAIDialogAction::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIDialogAction::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIDialogAction::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QMap OAIDialogAction::getRSlots() const {
    return m_r_slots;
}
void OAIDialogAction::setRSlots(const QMap &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIDialogAction::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIDialogAction::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

QString OAIDialogAction::getSlotToElicit() const {
    return m_slot_to_elicit;
}
void OAIDialogAction::setSlotToElicit(const QString &slot_to_elicit) {
    m_slot_to_elicit = slot_to_elicit;
    m_slot_to_elicit_isSet = true;
}

bool OAIDialogAction::is_slot_to_elicit_Set() const{
    return m_slot_to_elicit_isSet;
}

bool OAIDialogAction::is_slot_to_elicit_Valid() const{
    return m_slot_to_elicit_isValid;
}

OAIFulfillmentState OAIDialogAction::getFulfillmentState() const {
    return m_fulfillment_state;
}
void OAIDialogAction::setFulfillmentState(const OAIFulfillmentState &fulfillment_state) {
    m_fulfillment_state = fulfillment_state;
    m_fulfillment_state_isSet = true;
}

bool OAIDialogAction::is_fulfillment_state_Set() const{
    return m_fulfillment_state_isSet;
}

bool OAIDialogAction::is_fulfillment_state_Valid() const{
    return m_fulfillment_state_isValid;
}

QString OAIDialogAction::getMessage() const {
    return m_message;
}
void OAIDialogAction::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDialogAction::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDialogAction::is_message_Valid() const{
    return m_message_isValid;
}

OAIMessageFormatType OAIDialogAction::getMessageFormat() const {
    return m_message_format;
}
void OAIDialogAction::setMessageFormat(const OAIMessageFormatType &message_format) {
    m_message_format = message_format;
    m_message_format_isSet = true;
}

bool OAIDialogAction::is_message_format_Set() const{
    return m_message_format_isSet;
}

bool OAIDialogAction::is_message_format_Valid() const{
    return m_message_format_isValid;
}

bool OAIDialogAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_to_elicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDialogAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
