/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteSessionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteSessionResponse::OAIDeleteSessionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteSessionResponse::OAIDeleteSessionResponse() {
    this->initializeModel();
}

OAIDeleteSessionResponse::~OAIDeleteSessionResponse() {}

void OAIDeleteSessionResponse::initializeModel() {

    m_bot_name_isSet = false;
    m_bot_name_isValid = false;

    m_bot_alias_isSet = false;
    m_bot_alias_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;
}

void OAIDeleteSessionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteSessionResponse::fromJsonObject(QJsonObject json) {

    m_bot_name_isValid = ::OpenAPI::fromJsonValue(m_bot_name, json[QString("botName")]);
    m_bot_name_isSet = !json[QString("botName")].isNull() && m_bot_name_isValid;

    m_bot_alias_isValid = ::OpenAPI::fromJsonValue(m_bot_alias, json[QString("botAlias")]);
    m_bot_alias_isSet = !json[QString("botAlias")].isNull() && m_bot_alias_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;
}

QString OAIDeleteSessionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteSessionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bot_name_isSet) {
        obj.insert(QString("botName"), ::OpenAPI::toJsonValue(m_bot_name));
    }
    if (m_bot_alias_isSet) {
        obj.insert(QString("botAlias"), ::OpenAPI::toJsonValue(m_bot_alias));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    return obj;
}

QString OAIDeleteSessionResponse::getBotName() const {
    return m_bot_name;
}
void OAIDeleteSessionResponse::setBotName(const QString &bot_name) {
    m_bot_name = bot_name;
    m_bot_name_isSet = true;
}

bool OAIDeleteSessionResponse::is_bot_name_Set() const{
    return m_bot_name_isSet;
}

bool OAIDeleteSessionResponse::is_bot_name_Valid() const{
    return m_bot_name_isValid;
}

QString OAIDeleteSessionResponse::getBotAlias() const {
    return m_bot_alias;
}
void OAIDeleteSessionResponse::setBotAlias(const QString &bot_alias) {
    m_bot_alias = bot_alias;
    m_bot_alias_isSet = true;
}

bool OAIDeleteSessionResponse::is_bot_alias_Set() const{
    return m_bot_alias_isSet;
}

bool OAIDeleteSessionResponse::is_bot_alias_Valid() const{
    return m_bot_alias_isValid;
}

QString OAIDeleteSessionResponse::getUserId() const {
    return m_user_id;
}
void OAIDeleteSessionResponse::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDeleteSessionResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDeleteSessionResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIDeleteSessionResponse::getSessionId() const {
    return m_session_id;
}
void OAIDeleteSessionResponse::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIDeleteSessionResponse::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIDeleteSessionResponse::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAIDeleteSessionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bot_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteSessionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
