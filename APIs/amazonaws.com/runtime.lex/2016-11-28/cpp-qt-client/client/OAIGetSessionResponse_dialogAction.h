/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetSessionResponse_dialogAction.h
 *
 * 
 */

#ifndef OAIGetSessionResponse_dialogAction_H
#define OAIGetSessionResponse_dialogAction_H

#include <QJsonObject>

#include "OAIDialogActionType.h"
#include "OAIFulfillmentState.h"
#include "OAIMessageFormatType.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetSessionResponse_dialogAction : public OAIObject {
public:
    OAIGetSessionResponse_dialogAction();
    OAIGetSessionResponse_dialogAction(QString json);
    ~OAIGetSessionResponse_dialogAction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDialogActionType getType() const;
    void setType(const OAIDialogActionType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getIntentName() const;
    void setIntentName(const QString &intent_name);
    bool is_intent_name_Set() const;
    bool is_intent_name_Valid() const;

    QMap getRSlots() const;
    void setRSlots(const QMap &r_slots);
    bool is_r_slots_Set() const;
    bool is_r_slots_Valid() const;

    QString getSlotToElicit() const;
    void setSlotToElicit(const QString &slot_to_elicit);
    bool is_slot_to_elicit_Set() const;
    bool is_slot_to_elicit_Valid() const;

    OAIFulfillmentState getFulfillmentState() const;
    void setFulfillmentState(const OAIFulfillmentState &fulfillment_state);
    bool is_fulfillment_state_Set() const;
    bool is_fulfillment_state_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    OAIMessageFormatType getMessageFormat() const;
    void setMessageFormat(const OAIMessageFormatType &message_format);
    bool is_message_format_Set() const;
    bool is_message_format_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDialogActionType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_intent_name;
    bool m_intent_name_isSet;
    bool m_intent_name_isValid;

    QMap m_r_slots;
    bool m_r_slots_isSet;
    bool m_r_slots_isValid;

    QString m_slot_to_elicit;
    bool m_slot_to_elicit_isSet;
    bool m_slot_to_elicit_isValid;

    OAIFulfillmentState m_fulfillment_state;
    bool m_fulfillment_state_isSet;
    bool m_fulfillment_state_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    OAIMessageFormatType m_message_format;
    bool m_message_format_isSet;
    bool m_message_format_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetSessionResponse_dialogAction)

#endif // OAIGetSessionResponse_dialogAction_H
