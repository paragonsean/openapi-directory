/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenericAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenericAttachment::OAIGenericAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenericAttachment::OAIGenericAttachment() {
    this->initializeModel();
}

OAIGenericAttachment::~OAIGenericAttachment() {}

void OAIGenericAttachment::initializeModel() {

    m_title_isSet = false;
    m_title_isValid = false;

    m_sub_title_isSet = false;
    m_sub_title_isValid = false;

    m_attachment_link_url_isSet = false;
    m_attachment_link_url_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_buttons_isSet = false;
    m_buttons_isValid = false;
}

void OAIGenericAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenericAttachment::fromJsonObject(QJsonObject json) {

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_sub_title_isValid = ::OpenAPI::fromJsonValue(m_sub_title, json[QString("subTitle")]);
    m_sub_title_isSet = !json[QString("subTitle")].isNull() && m_sub_title_isValid;

    m_attachment_link_url_isValid = ::OpenAPI::fromJsonValue(m_attachment_link_url, json[QString("attachmentLinkUrl")]);
    m_attachment_link_url_isSet = !json[QString("attachmentLinkUrl")].isNull() && m_attachment_link_url_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_buttons_isValid = ::OpenAPI::fromJsonValue(m_buttons, json[QString("buttons")]);
    m_buttons_isSet = !json[QString("buttons")].isNull() && m_buttons_isValid;
}

QString OAIGenericAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenericAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_sub_title_isSet) {
        obj.insert(QString("subTitle"), ::OpenAPI::toJsonValue(m_sub_title));
    }
    if (m_attachment_link_url_isSet) {
        obj.insert(QString("attachmentLinkUrl"), ::OpenAPI::toJsonValue(m_attachment_link_url));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_buttons.isSet()) {
        obj.insert(QString("buttons"), ::OpenAPI::toJsonValue(m_buttons));
    }
    return obj;
}

QString OAIGenericAttachment::getTitle() const {
    return m_title;
}
void OAIGenericAttachment::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIGenericAttachment::is_title_Set() const{
    return m_title_isSet;
}

bool OAIGenericAttachment::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIGenericAttachment::getSubTitle() const {
    return m_sub_title;
}
void OAIGenericAttachment::setSubTitle(const QString &sub_title) {
    m_sub_title = sub_title;
    m_sub_title_isSet = true;
}

bool OAIGenericAttachment::is_sub_title_Set() const{
    return m_sub_title_isSet;
}

bool OAIGenericAttachment::is_sub_title_Valid() const{
    return m_sub_title_isValid;
}

QString OAIGenericAttachment::getAttachmentLinkUrl() const {
    return m_attachment_link_url;
}
void OAIGenericAttachment::setAttachmentLinkUrl(const QString &attachment_link_url) {
    m_attachment_link_url = attachment_link_url;
    m_attachment_link_url_isSet = true;
}

bool OAIGenericAttachment::is_attachment_link_url_Set() const{
    return m_attachment_link_url_isSet;
}

bool OAIGenericAttachment::is_attachment_link_url_Valid() const{
    return m_attachment_link_url_isValid;
}

QString OAIGenericAttachment::getImageUrl() const {
    return m_image_url;
}
void OAIGenericAttachment::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIGenericAttachment::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIGenericAttachment::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QList OAIGenericAttachment::getButtons() const {
    return m_buttons;
}
void OAIGenericAttachment::setButtons(const QList &buttons) {
    m_buttons = buttons;
    m_buttons_isSet = true;
}

bool OAIGenericAttachment::is_buttons_Set() const{
    return m_buttons_isSet;
}

bool OAIGenericAttachment::is_buttons_Valid() const{
    return m_buttons_isValid;
}

bool OAIGenericAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachment_link_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buttons.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenericAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
