/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIntentSummary.h
 *
 * Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.
 */

#ifndef OAIIntentSummary_H
#define OAIIntentSummary_H

#include <QJsonObject>

#include "OAIConfirmationStatus.h"
#include "OAIDialogActionType.h"
#include "OAIFulfillmentState.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIIntentSummary : public OAIObject {
public:
    OAIIntentSummary();
    OAIIntentSummary(QString json);
    ~OAIIntentSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIntentName() const;
    void setIntentName(const QString &intent_name);
    bool is_intent_name_Set() const;
    bool is_intent_name_Valid() const;

    QString getCheckpointLabel() const;
    void setCheckpointLabel(const QString &checkpoint_label);
    bool is_checkpoint_label_Set() const;
    bool is_checkpoint_label_Valid() const;

    QMap getRSlots() const;
    void setRSlots(const QMap &r_slots);
    bool is_r_slots_Set() const;
    bool is_r_slots_Valid() const;

    OAIConfirmationStatus getConfirmationStatus() const;
    void setConfirmationStatus(const OAIConfirmationStatus &confirmation_status);
    bool is_confirmation_status_Set() const;
    bool is_confirmation_status_Valid() const;

    OAIDialogActionType getDialogActionType() const;
    void setDialogActionType(const OAIDialogActionType &dialog_action_type);
    bool is_dialog_action_type_Set() const;
    bool is_dialog_action_type_Valid() const;

    OAIFulfillmentState getFulfillmentState() const;
    void setFulfillmentState(const OAIFulfillmentState &fulfillment_state);
    bool is_fulfillment_state_Set() const;
    bool is_fulfillment_state_Valid() const;

    QString getSlotToElicit() const;
    void setSlotToElicit(const QString &slot_to_elicit);
    bool is_slot_to_elicit_Set() const;
    bool is_slot_to_elicit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_intent_name;
    bool m_intent_name_isSet;
    bool m_intent_name_isValid;

    QString m_checkpoint_label;
    bool m_checkpoint_label_isSet;
    bool m_checkpoint_label_isValid;

    QMap m_r_slots;
    bool m_r_slots_isSet;
    bool m_r_slots_isValid;

    OAIConfirmationStatus m_confirmation_status;
    bool m_confirmation_status_isSet;
    bool m_confirmation_status_isValid;

    OAIDialogActionType m_dialog_action_type;
    bool m_dialog_action_type_isSet;
    bool m_dialog_action_type_isValid;

    OAIFulfillmentState m_fulfillment_state;
    bool m_fulfillment_state_isSet;
    bool m_fulfillment_state_isValid;

    QString m_slot_to_elicit;
    bool m_slot_to_elicit_isSet;
    bool m_slot_to_elicit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIntentSummary)

#endif // OAIIntentSummary_H
