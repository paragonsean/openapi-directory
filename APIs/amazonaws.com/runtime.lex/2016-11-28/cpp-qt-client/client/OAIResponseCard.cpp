/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseCard::OAIResponseCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseCard::OAIResponseCard() {
    this->initializeModel();
}

OAIResponseCard::~OAIResponseCard() {}

void OAIResponseCard::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_generic_attachments_isSet = false;
    m_generic_attachments_isValid = false;
}

void OAIResponseCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseCard::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_generic_attachments_isValid = ::OpenAPI::fromJsonValue(m_generic_attachments, json[QString("genericAttachments")]);
    m_generic_attachments_isSet = !json[QString("genericAttachments")].isNull() && m_generic_attachments_isValid;
}

QString OAIResponseCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseCard::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_content_type.isSet()) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_generic_attachments.isSet()) {
        obj.insert(QString("genericAttachments"), ::OpenAPI::toJsonValue(m_generic_attachments));
    }
    return obj;
}

QString OAIResponseCard::getVersion() const {
    return m_version;
}
void OAIResponseCard::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIResponseCard::is_version_Set() const{
    return m_version_isSet;
}

bool OAIResponseCard::is_version_Valid() const{
    return m_version_isValid;
}

OAIContentType OAIResponseCard::getContentType() const {
    return m_content_type;
}
void OAIResponseCard::setContentType(const OAIContentType &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIResponseCard::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIResponseCard::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QList OAIResponseCard::getGenericAttachments() const {
    return m_generic_attachments;
}
void OAIResponseCard::setGenericAttachments(const QList &generic_attachments) {
    m_generic_attachments = generic_attachments;
    m_generic_attachments_isSet = true;
}

bool OAIResponseCard::is_generic_attachments_Set() const{
    return m_generic_attachments_isSet;
}

bool OAIResponseCard::is_generic_attachments_Valid() const{
    return m_generic_attachments_isValid;
}

bool OAIResponseCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generic_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
