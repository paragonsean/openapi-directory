/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostTextResponse_sentimentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostTextResponse_sentimentResponse::OAIPostTextResponse_sentimentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostTextResponse_sentimentResponse::OAIPostTextResponse_sentimentResponse() {
    this->initializeModel();
}

OAIPostTextResponse_sentimentResponse::~OAIPostTextResponse_sentimentResponse() {}

void OAIPostTextResponse_sentimentResponse::initializeModel() {

    m_sentiment_label_isSet = false;
    m_sentiment_label_isValid = false;

    m_sentiment_score_isSet = false;
    m_sentiment_score_isValid = false;
}

void OAIPostTextResponse_sentimentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostTextResponse_sentimentResponse::fromJsonObject(QJsonObject json) {

    m_sentiment_label_isValid = ::OpenAPI::fromJsonValue(m_sentiment_label, json[QString("sentimentLabel")]);
    m_sentiment_label_isSet = !json[QString("sentimentLabel")].isNull() && m_sentiment_label_isValid;

    m_sentiment_score_isValid = ::OpenAPI::fromJsonValue(m_sentiment_score, json[QString("sentimentScore")]);
    m_sentiment_score_isSet = !json[QString("sentimentScore")].isNull() && m_sentiment_score_isValid;
}

QString OAIPostTextResponse_sentimentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostTextResponse_sentimentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_sentiment_label_isSet) {
        obj.insert(QString("sentimentLabel"), ::OpenAPI::toJsonValue(m_sentiment_label));
    }
    if (m_sentiment_score_isSet) {
        obj.insert(QString("sentimentScore"), ::OpenAPI::toJsonValue(m_sentiment_score));
    }
    return obj;
}

QString OAIPostTextResponse_sentimentResponse::getSentimentLabel() const {
    return m_sentiment_label;
}
void OAIPostTextResponse_sentimentResponse::setSentimentLabel(const QString &sentiment_label) {
    m_sentiment_label = sentiment_label;
    m_sentiment_label_isSet = true;
}

bool OAIPostTextResponse_sentimentResponse::is_sentiment_label_Set() const{
    return m_sentiment_label_isSet;
}

bool OAIPostTextResponse_sentimentResponse::is_sentiment_label_Valid() const{
    return m_sentiment_label_isValid;
}

QString OAIPostTextResponse_sentimentResponse::getSentimentScore() const {
    return m_sentiment_score;
}
void OAIPostTextResponse_sentimentResponse::setSentimentScore(const QString &sentiment_score) {
    m_sentiment_score = sentiment_score;
    m_sentiment_score_isSet = true;
}

bool OAIPostTextResponse_sentimentResponse::is_sentiment_score_Set() const{
    return m_sentiment_score_isSet;
}

bool OAIPostTextResponse_sentimentResponse::is_sentiment_score_Valid() const{
    return m_sentiment_score_isValid;
}

bool OAIPostTextResponse_sentimentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sentiment_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostTextResponse_sentimentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
