/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictedIntent_nluIntentConfidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictedIntent_nluIntentConfidence::OAIPredictedIntent_nluIntentConfidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictedIntent_nluIntentConfidence::OAIPredictedIntent_nluIntentConfidence() {
    this->initializeModel();
}

OAIPredictedIntent_nluIntentConfidence::~OAIPredictedIntent_nluIntentConfidence() {}

void OAIPredictedIntent_nluIntentConfidence::initializeModel() {

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIPredictedIntent_nluIntentConfidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictedIntent_nluIntentConfidence::fromJsonObject(QJsonObject json) {

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIPredictedIntent_nluIntentConfidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictedIntent_nluIntentConfidence::asJsonObject() const {
    QJsonObject obj;
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

double OAIPredictedIntent_nluIntentConfidence::getScore() const {
    return m_score;
}
void OAIPredictedIntent_nluIntentConfidence::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIPredictedIntent_nluIntentConfidence::is_score_Set() const{
    return m_score_isSet;
}

bool OAIPredictedIntent_nluIntentConfidence::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIPredictedIntent_nluIntentConfidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictedIntent_nluIntentConfidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
