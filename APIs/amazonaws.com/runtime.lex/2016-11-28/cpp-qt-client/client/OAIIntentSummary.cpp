/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntentSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntentSummary::OAIIntentSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntentSummary::OAIIntentSummary() {
    this->initializeModel();
}

OAIIntentSummary::~OAIIntentSummary() {}

void OAIIntentSummary::initializeModel() {

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_checkpoint_label_isSet = false;
    m_checkpoint_label_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_confirmation_status_isSet = false;
    m_confirmation_status_isValid = false;

    m_dialog_action_type_isSet = false;
    m_dialog_action_type_isValid = false;

    m_fulfillment_state_isSet = false;
    m_fulfillment_state_isValid = false;

    m_slot_to_elicit_isSet = false;
    m_slot_to_elicit_isValid = false;
}

void OAIIntentSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntentSummary::fromJsonObject(QJsonObject json) {

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_checkpoint_label_isValid = ::OpenAPI::fromJsonValue(m_checkpoint_label, json[QString("checkpointLabel")]);
    m_checkpoint_label_isSet = !json[QString("checkpointLabel")].isNull() && m_checkpoint_label_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;

    m_confirmation_status_isValid = ::OpenAPI::fromJsonValue(m_confirmation_status, json[QString("confirmationStatus")]);
    m_confirmation_status_isSet = !json[QString("confirmationStatus")].isNull() && m_confirmation_status_isValid;

    m_dialog_action_type_isValid = ::OpenAPI::fromJsonValue(m_dialog_action_type, json[QString("dialogActionType")]);
    m_dialog_action_type_isSet = !json[QString("dialogActionType")].isNull() && m_dialog_action_type_isValid;

    m_fulfillment_state_isValid = ::OpenAPI::fromJsonValue(m_fulfillment_state, json[QString("fulfillmentState")]);
    m_fulfillment_state_isSet = !json[QString("fulfillmentState")].isNull() && m_fulfillment_state_isValid;

    m_slot_to_elicit_isValid = ::OpenAPI::fromJsonValue(m_slot_to_elicit, json[QString("slotToElicit")]);
    m_slot_to_elicit_isSet = !json[QString("slotToElicit")].isNull() && m_slot_to_elicit_isValid;
}

QString OAIIntentSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntentSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_checkpoint_label_isSet) {
        obj.insert(QString("checkpointLabel"), ::OpenAPI::toJsonValue(m_checkpoint_label));
    }
    if (m_r_slots.isSet()) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_confirmation_status.isSet()) {
        obj.insert(QString("confirmationStatus"), ::OpenAPI::toJsonValue(m_confirmation_status));
    }
    if (m_dialog_action_type.isSet()) {
        obj.insert(QString("dialogActionType"), ::OpenAPI::toJsonValue(m_dialog_action_type));
    }
    if (m_fulfillment_state.isSet()) {
        obj.insert(QString("fulfillmentState"), ::OpenAPI::toJsonValue(m_fulfillment_state));
    }
    if (m_slot_to_elicit_isSet) {
        obj.insert(QString("slotToElicit"), ::OpenAPI::toJsonValue(m_slot_to_elicit));
    }
    return obj;
}

QString OAIIntentSummary::getIntentName() const {
    return m_intent_name;
}
void OAIIntentSummary::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIIntentSummary::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIIntentSummary::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

QString OAIIntentSummary::getCheckpointLabel() const {
    return m_checkpoint_label;
}
void OAIIntentSummary::setCheckpointLabel(const QString &checkpoint_label) {
    m_checkpoint_label = checkpoint_label;
    m_checkpoint_label_isSet = true;
}

bool OAIIntentSummary::is_checkpoint_label_Set() const{
    return m_checkpoint_label_isSet;
}

bool OAIIntentSummary::is_checkpoint_label_Valid() const{
    return m_checkpoint_label_isValid;
}

QMap OAIIntentSummary::getRSlots() const {
    return m_r_slots;
}
void OAIIntentSummary::setRSlots(const QMap &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIIntentSummary::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIIntentSummary::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

OAIConfirmationStatus OAIIntentSummary::getConfirmationStatus() const {
    return m_confirmation_status;
}
void OAIIntentSummary::setConfirmationStatus(const OAIConfirmationStatus &confirmation_status) {
    m_confirmation_status = confirmation_status;
    m_confirmation_status_isSet = true;
}

bool OAIIntentSummary::is_confirmation_status_Set() const{
    return m_confirmation_status_isSet;
}

bool OAIIntentSummary::is_confirmation_status_Valid() const{
    return m_confirmation_status_isValid;
}

OAIDialogActionType OAIIntentSummary::getDialogActionType() const {
    return m_dialog_action_type;
}
void OAIIntentSummary::setDialogActionType(const OAIDialogActionType &dialog_action_type) {
    m_dialog_action_type = dialog_action_type;
    m_dialog_action_type_isSet = true;
}

bool OAIIntentSummary::is_dialog_action_type_Set() const{
    return m_dialog_action_type_isSet;
}

bool OAIIntentSummary::is_dialog_action_type_Valid() const{
    return m_dialog_action_type_isValid;
}

OAIFulfillmentState OAIIntentSummary::getFulfillmentState() const {
    return m_fulfillment_state;
}
void OAIIntentSummary::setFulfillmentState(const OAIFulfillmentState &fulfillment_state) {
    m_fulfillment_state = fulfillment_state;
    m_fulfillment_state_isSet = true;
}

bool OAIIntentSummary::is_fulfillment_state_Set() const{
    return m_fulfillment_state_isSet;
}

bool OAIIntentSummary::is_fulfillment_state_Valid() const{
    return m_fulfillment_state_isValid;
}

QString OAIIntentSummary::getSlotToElicit() const {
    return m_slot_to_elicit;
}
void OAIIntentSummary::setSlotToElicit(const QString &slot_to_elicit) {
    m_slot_to_elicit = slot_to_elicit;
    m_slot_to_elicit_isSet = true;
}

bool OAIIntentSummary::is_slot_to_elicit_Set() const{
    return m_slot_to_elicit_isSet;
}

bool OAIIntentSummary::is_slot_to_elicit_Valid() const{
    return m_slot_to_elicit_isValid;
}

bool OAIIntentSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkpoint_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fulfillment_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_to_elicit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntentSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dialog_action_type_isValid && true;
}

} // namespace OpenAPI
