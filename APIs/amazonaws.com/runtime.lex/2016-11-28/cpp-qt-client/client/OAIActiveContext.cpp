/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveContext::OAIActiveContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveContext::OAIActiveContext() {
    this->initializeModel();
}

OAIActiveContext::~OAIActiveContext() {}

void OAIActiveContext::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_time_to_live_isSet = false;
    m_time_to_live_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAIActiveContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveContext::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_time_to_live_isValid = ::OpenAPI::fromJsonValue(m_time_to_live, json[QString("timeToLive")]);
    m_time_to_live_isSet = !json[QString("timeToLive")].isNull() && m_time_to_live_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAIActiveContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveContext::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_time_to_live.isSet()) {
        obj.insert(QString("timeToLive"), ::OpenAPI::toJsonValue(m_time_to_live));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAIActiveContext::getName() const {
    return m_name;
}
void OAIActiveContext::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIActiveContext::is_name_Set() const{
    return m_name_isSet;
}

bool OAIActiveContext::is_name_Valid() const{
    return m_name_isValid;
}

OAIActiveContext_timeToLive OAIActiveContext::getTimeToLive() const {
    return m_time_to_live;
}
void OAIActiveContext::setTimeToLive(const OAIActiveContext_timeToLive &time_to_live) {
    m_time_to_live = time_to_live;
    m_time_to_live_isSet = true;
}

bool OAIActiveContext::is_time_to_live_Set() const{
    return m_time_to_live_isSet;
}

bool OAIActiveContext::is_time_to_live_Valid() const{
    return m_time_to_live_isValid;
}

QMap OAIActiveContext::getParameters() const {
    return m_parameters;
}
void OAIActiveContext::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIActiveContext::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIActiveContext::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAIActiveContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_live.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_time_to_live_isValid && m_parameters_isValid && true;
}

} // namespace OpenAPI
