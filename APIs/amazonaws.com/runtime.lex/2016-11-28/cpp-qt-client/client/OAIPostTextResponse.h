/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPostTextResponse.h
 *
 * 
 */

#ifndef OAIPostTextResponse_H
#define OAIPostTextResponse_H

#include <QJsonObject>

#include "OAIDialogState.h"
#include "OAIMessageFormatType.h"
#include "OAIPostTextResponse_nluIntentConfidence.h"
#include "OAIPostTextResponse_responseCard.h"
#include "OAIPostTextResponse_sentimentResponse.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPostTextResponse_nluIntentConfidence;
class OAIPostTextResponse_sentimentResponse;
class OAIPostTextResponse_responseCard;

class OAIPostTextResponse : public OAIObject {
public:
    OAIPostTextResponse();
    OAIPostTextResponse(QString json);
    ~OAIPostTextResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getIntentName() const;
    void setIntentName(const QString &intent_name);
    bool is_intent_name_Set() const;
    bool is_intent_name_Valid() const;

    OAIPostTextResponse_nluIntentConfidence getNluIntentConfidence() const;
    void setNluIntentConfidence(const OAIPostTextResponse_nluIntentConfidence &nlu_intent_confidence);
    bool is_nlu_intent_confidence_Set() const;
    bool is_nlu_intent_confidence_Valid() const;

    QList getAlternativeIntents() const;
    void setAlternativeIntents(const QList &alternative_intents);
    bool is_alternative_intents_Set() const;
    bool is_alternative_intents_Valid() const;

    QMap getRSlots() const;
    void setRSlots(const QMap &r_slots);
    bool is_r_slots_Set() const;
    bool is_r_slots_Valid() const;

    QMap getSessionAttributes() const;
    void setSessionAttributes(const QMap &session_attributes);
    bool is_session_attributes_Set() const;
    bool is_session_attributes_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    OAIPostTextResponse_sentimentResponse getSentimentResponse() const;
    void setSentimentResponse(const OAIPostTextResponse_sentimentResponse &sentiment_response);
    bool is_sentiment_response_Set() const;
    bool is_sentiment_response_Valid() const;

    OAIMessageFormatType getMessageFormat() const;
    void setMessageFormat(const OAIMessageFormatType &message_format);
    bool is_message_format_Set() const;
    bool is_message_format_Valid() const;

    OAIDialogState getDialogState() const;
    void setDialogState(const OAIDialogState &dialog_state);
    bool is_dialog_state_Set() const;
    bool is_dialog_state_Valid() const;

    QString getSlotToElicit() const;
    void setSlotToElicit(const QString &slot_to_elicit);
    bool is_slot_to_elicit_Set() const;
    bool is_slot_to_elicit_Valid() const;

    OAIPostTextResponse_responseCard getResponseCard() const;
    void setResponseCard(const OAIPostTextResponse_responseCard &response_card);
    bool is_response_card_Set() const;
    bool is_response_card_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QString getBotVersion() const;
    void setBotVersion(const QString &bot_version);
    bool is_bot_version_Set() const;
    bool is_bot_version_Valid() const;

    QList getActiveContexts() const;
    void setActiveContexts(const QList &active_contexts);
    bool is_active_contexts_Set() const;
    bool is_active_contexts_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_intent_name;
    bool m_intent_name_isSet;
    bool m_intent_name_isValid;

    OAIPostTextResponse_nluIntentConfidence m_nlu_intent_confidence;
    bool m_nlu_intent_confidence_isSet;
    bool m_nlu_intent_confidence_isValid;

    QList m_alternative_intents;
    bool m_alternative_intents_isSet;
    bool m_alternative_intents_isValid;

    QMap m_r_slots;
    bool m_r_slots_isSet;
    bool m_r_slots_isValid;

    QMap m_session_attributes;
    bool m_session_attributes_isSet;
    bool m_session_attributes_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    OAIPostTextResponse_sentimentResponse m_sentiment_response;
    bool m_sentiment_response_isSet;
    bool m_sentiment_response_isValid;

    OAIMessageFormatType m_message_format;
    bool m_message_format_isSet;
    bool m_message_format_isValid;

    OAIDialogState m_dialog_state;
    bool m_dialog_state_isSet;
    bool m_dialog_state_isValid;

    QString m_slot_to_elicit;
    bool m_slot_to_elicit_isSet;
    bool m_slot_to_elicit_isValid;

    OAIPostTextResponse_responseCard m_response_card;
    bool m_response_card_isSet;
    bool m_response_card_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QString m_bot_version;
    bool m_bot_version_isSet;
    bool m_bot_version_isValid;

    QList m_active_contexts;
    bool m_active_contexts_isSet;
    bool m_active_contexts_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPostTextResponse)

#endif // OAIPostTextResponse_H
