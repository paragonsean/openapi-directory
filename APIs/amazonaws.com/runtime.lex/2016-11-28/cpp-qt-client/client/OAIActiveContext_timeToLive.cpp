/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveContext_timeToLive.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveContext_timeToLive::OAIActiveContext_timeToLive(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveContext_timeToLive::OAIActiveContext_timeToLive() {
    this->initializeModel();
}

OAIActiveContext_timeToLive::~OAIActiveContext_timeToLive() {}

void OAIActiveContext_timeToLive::initializeModel() {

    m_time_to_live_in_seconds_isSet = false;
    m_time_to_live_in_seconds_isValid = false;

    m_turns_to_live_isSet = false;
    m_turns_to_live_isValid = false;
}

void OAIActiveContext_timeToLive::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveContext_timeToLive::fromJsonObject(QJsonObject json) {

    m_time_to_live_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_to_live_in_seconds, json[QString("timeToLiveInSeconds")]);
    m_time_to_live_in_seconds_isSet = !json[QString("timeToLiveInSeconds")].isNull() && m_time_to_live_in_seconds_isValid;

    m_turns_to_live_isValid = ::OpenAPI::fromJsonValue(m_turns_to_live, json[QString("turnsToLive")]);
    m_turns_to_live_isSet = !json[QString("turnsToLive")].isNull() && m_turns_to_live_isValid;
}

QString OAIActiveContext_timeToLive::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveContext_timeToLive::asJsonObject() const {
    QJsonObject obj;
    if (m_time_to_live_in_seconds_isSet) {
        obj.insert(QString("timeToLiveInSeconds"), ::OpenAPI::toJsonValue(m_time_to_live_in_seconds));
    }
    if (m_turns_to_live_isSet) {
        obj.insert(QString("turnsToLive"), ::OpenAPI::toJsonValue(m_turns_to_live));
    }
    return obj;
}

qint32 OAIActiveContext_timeToLive::getTimeToLiveInSeconds() const {
    return m_time_to_live_in_seconds;
}
void OAIActiveContext_timeToLive::setTimeToLiveInSeconds(const qint32 &time_to_live_in_seconds) {
    m_time_to_live_in_seconds = time_to_live_in_seconds;
    m_time_to_live_in_seconds_isSet = true;
}

bool OAIActiveContext_timeToLive::is_time_to_live_in_seconds_Set() const{
    return m_time_to_live_in_seconds_isSet;
}

bool OAIActiveContext_timeToLive::is_time_to_live_in_seconds_Valid() const{
    return m_time_to_live_in_seconds_isValid;
}

qint32 OAIActiveContext_timeToLive::getTurnsToLive() const {
    return m_turns_to_live;
}
void OAIActiveContext_timeToLive::setTurnsToLive(const qint32 &turns_to_live) {
    m_turns_to_live = turns_to_live;
    m_turns_to_live_isSet = true;
}

bool OAIActiveContext_timeToLive::is_turns_to_live_Set() const{
    return m_turns_to_live_isSet;
}

bool OAIActiveContext_timeToLive::is_turns_to_live_Valid() const{
    return m_turns_to_live_isValid;
}

bool OAIActiveContext_timeToLive::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_time_to_live_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_turns_to_live_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveContext_timeToLive::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
