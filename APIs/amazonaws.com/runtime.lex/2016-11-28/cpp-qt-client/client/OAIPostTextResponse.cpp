/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPostTextResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPostTextResponse::OAIPostTextResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPostTextResponse::OAIPostTextResponse() {
    this->initializeModel();
}

OAIPostTextResponse::~OAIPostTextResponse() {}

void OAIPostTextResponse::initializeModel() {

    m_intent_name_isSet = false;
    m_intent_name_isValid = false;

    m_nlu_intent_confidence_isSet = false;
    m_nlu_intent_confidence_isValid = false;

    m_alternative_intents_isSet = false;
    m_alternative_intents_isValid = false;

    m_r_slots_isSet = false;
    m_r_slots_isValid = false;

    m_session_attributes_isSet = false;
    m_session_attributes_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_sentiment_response_isSet = false;
    m_sentiment_response_isValid = false;

    m_message_format_isSet = false;
    m_message_format_isValid = false;

    m_dialog_state_isSet = false;
    m_dialog_state_isValid = false;

    m_slot_to_elicit_isSet = false;
    m_slot_to_elicit_isValid = false;

    m_response_card_isSet = false;
    m_response_card_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_bot_version_isSet = false;
    m_bot_version_isValid = false;

    m_active_contexts_isSet = false;
    m_active_contexts_isValid = false;
}

void OAIPostTextResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPostTextResponse::fromJsonObject(QJsonObject json) {

    m_intent_name_isValid = ::OpenAPI::fromJsonValue(m_intent_name, json[QString("intentName")]);
    m_intent_name_isSet = !json[QString("intentName")].isNull() && m_intent_name_isValid;

    m_nlu_intent_confidence_isValid = ::OpenAPI::fromJsonValue(m_nlu_intent_confidence, json[QString("nluIntentConfidence")]);
    m_nlu_intent_confidence_isSet = !json[QString("nluIntentConfidence")].isNull() && m_nlu_intent_confidence_isValid;

    m_alternative_intents_isValid = ::OpenAPI::fromJsonValue(m_alternative_intents, json[QString("alternativeIntents")]);
    m_alternative_intents_isSet = !json[QString("alternativeIntents")].isNull() && m_alternative_intents_isValid;

    m_r_slots_isValid = ::OpenAPI::fromJsonValue(m_r_slots, json[QString("slots")]);
    m_r_slots_isSet = !json[QString("slots")].isNull() && m_r_slots_isValid;

    m_session_attributes_isValid = ::OpenAPI::fromJsonValue(m_session_attributes, json[QString("sessionAttributes")]);
    m_session_attributes_isSet = !json[QString("sessionAttributes")].isNull() && m_session_attributes_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_sentiment_response_isValid = ::OpenAPI::fromJsonValue(m_sentiment_response, json[QString("sentimentResponse")]);
    m_sentiment_response_isSet = !json[QString("sentimentResponse")].isNull() && m_sentiment_response_isValid;

    m_message_format_isValid = ::OpenAPI::fromJsonValue(m_message_format, json[QString("messageFormat")]);
    m_message_format_isSet = !json[QString("messageFormat")].isNull() && m_message_format_isValid;

    m_dialog_state_isValid = ::OpenAPI::fromJsonValue(m_dialog_state, json[QString("dialogState")]);
    m_dialog_state_isSet = !json[QString("dialogState")].isNull() && m_dialog_state_isValid;

    m_slot_to_elicit_isValid = ::OpenAPI::fromJsonValue(m_slot_to_elicit, json[QString("slotToElicit")]);
    m_slot_to_elicit_isSet = !json[QString("slotToElicit")].isNull() && m_slot_to_elicit_isValid;

    m_response_card_isValid = ::OpenAPI::fromJsonValue(m_response_card, json[QString("responseCard")]);
    m_response_card_isSet = !json[QString("responseCard")].isNull() && m_response_card_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_bot_version_isValid = ::OpenAPI::fromJsonValue(m_bot_version, json[QString("botVersion")]);
    m_bot_version_isSet = !json[QString("botVersion")].isNull() && m_bot_version_isValid;

    m_active_contexts_isValid = ::OpenAPI::fromJsonValue(m_active_contexts, json[QString("activeContexts")]);
    m_active_contexts_isSet = !json[QString("activeContexts")].isNull() && m_active_contexts_isValid;
}

QString OAIPostTextResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPostTextResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_intent_name_isSet) {
        obj.insert(QString("intentName"), ::OpenAPI::toJsonValue(m_intent_name));
    }
    if (m_nlu_intent_confidence.isSet()) {
        obj.insert(QString("nluIntentConfidence"), ::OpenAPI::toJsonValue(m_nlu_intent_confidence));
    }
    if (m_alternative_intents.isSet()) {
        obj.insert(QString("alternativeIntents"), ::OpenAPI::toJsonValue(m_alternative_intents));
    }
    if (m_r_slots.isSet()) {
        obj.insert(QString("slots"), ::OpenAPI::toJsonValue(m_r_slots));
    }
    if (m_session_attributes.isSet()) {
        obj.insert(QString("sessionAttributes"), ::OpenAPI::toJsonValue(m_session_attributes));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sentiment_response.isSet()) {
        obj.insert(QString("sentimentResponse"), ::OpenAPI::toJsonValue(m_sentiment_response));
    }
    if (m_message_format.isSet()) {
        obj.insert(QString("messageFormat"), ::OpenAPI::toJsonValue(m_message_format));
    }
    if (m_dialog_state.isSet()) {
        obj.insert(QString("dialogState"), ::OpenAPI::toJsonValue(m_dialog_state));
    }
    if (m_slot_to_elicit_isSet) {
        obj.insert(QString("slotToElicit"), ::OpenAPI::toJsonValue(m_slot_to_elicit));
    }
    if (m_response_card.isSet()) {
        obj.insert(QString("responseCard"), ::OpenAPI::toJsonValue(m_response_card));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_bot_version_isSet) {
        obj.insert(QString("botVersion"), ::OpenAPI::toJsonValue(m_bot_version));
    }
    if (m_active_contexts.isSet()) {
        obj.insert(QString("activeContexts"), ::OpenAPI::toJsonValue(m_active_contexts));
    }
    return obj;
}

QString OAIPostTextResponse::getIntentName() const {
    return m_intent_name;
}
void OAIPostTextResponse::setIntentName(const QString &intent_name) {
    m_intent_name = intent_name;
    m_intent_name_isSet = true;
}

bool OAIPostTextResponse::is_intent_name_Set() const{
    return m_intent_name_isSet;
}

bool OAIPostTextResponse::is_intent_name_Valid() const{
    return m_intent_name_isValid;
}

OAIPostTextResponse_nluIntentConfidence OAIPostTextResponse::getNluIntentConfidence() const {
    return m_nlu_intent_confidence;
}
void OAIPostTextResponse::setNluIntentConfidence(const OAIPostTextResponse_nluIntentConfidence &nlu_intent_confidence) {
    m_nlu_intent_confidence = nlu_intent_confidence;
    m_nlu_intent_confidence_isSet = true;
}

bool OAIPostTextResponse::is_nlu_intent_confidence_Set() const{
    return m_nlu_intent_confidence_isSet;
}

bool OAIPostTextResponse::is_nlu_intent_confidence_Valid() const{
    return m_nlu_intent_confidence_isValid;
}

QList OAIPostTextResponse::getAlternativeIntents() const {
    return m_alternative_intents;
}
void OAIPostTextResponse::setAlternativeIntents(const QList &alternative_intents) {
    m_alternative_intents = alternative_intents;
    m_alternative_intents_isSet = true;
}

bool OAIPostTextResponse::is_alternative_intents_Set() const{
    return m_alternative_intents_isSet;
}

bool OAIPostTextResponse::is_alternative_intents_Valid() const{
    return m_alternative_intents_isValid;
}

QMap OAIPostTextResponse::getRSlots() const {
    return m_r_slots;
}
void OAIPostTextResponse::setRSlots(const QMap &r_slots) {
    m_r_slots = r_slots;
    m_r_slots_isSet = true;
}

bool OAIPostTextResponse::is_r_slots_Set() const{
    return m_r_slots_isSet;
}

bool OAIPostTextResponse::is_r_slots_Valid() const{
    return m_r_slots_isValid;
}

QMap OAIPostTextResponse::getSessionAttributes() const {
    return m_session_attributes;
}
void OAIPostTextResponse::setSessionAttributes(const QMap &session_attributes) {
    m_session_attributes = session_attributes;
    m_session_attributes_isSet = true;
}

bool OAIPostTextResponse::is_session_attributes_Set() const{
    return m_session_attributes_isSet;
}

bool OAIPostTextResponse::is_session_attributes_Valid() const{
    return m_session_attributes_isValid;
}

QString OAIPostTextResponse::getMessage() const {
    return m_message;
}
void OAIPostTextResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPostTextResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPostTextResponse::is_message_Valid() const{
    return m_message_isValid;
}

OAIPostTextResponse_sentimentResponse OAIPostTextResponse::getSentimentResponse() const {
    return m_sentiment_response;
}
void OAIPostTextResponse::setSentimentResponse(const OAIPostTextResponse_sentimentResponse &sentiment_response) {
    m_sentiment_response = sentiment_response;
    m_sentiment_response_isSet = true;
}

bool OAIPostTextResponse::is_sentiment_response_Set() const{
    return m_sentiment_response_isSet;
}

bool OAIPostTextResponse::is_sentiment_response_Valid() const{
    return m_sentiment_response_isValid;
}

OAIMessageFormatType OAIPostTextResponse::getMessageFormat() const {
    return m_message_format;
}
void OAIPostTextResponse::setMessageFormat(const OAIMessageFormatType &message_format) {
    m_message_format = message_format;
    m_message_format_isSet = true;
}

bool OAIPostTextResponse::is_message_format_Set() const{
    return m_message_format_isSet;
}

bool OAIPostTextResponse::is_message_format_Valid() const{
    return m_message_format_isValid;
}

OAIDialogState OAIPostTextResponse::getDialogState() const {
    return m_dialog_state;
}
void OAIPostTextResponse::setDialogState(const OAIDialogState &dialog_state) {
    m_dialog_state = dialog_state;
    m_dialog_state_isSet = true;
}

bool OAIPostTextResponse::is_dialog_state_Set() const{
    return m_dialog_state_isSet;
}

bool OAIPostTextResponse::is_dialog_state_Valid() const{
    return m_dialog_state_isValid;
}

QString OAIPostTextResponse::getSlotToElicit() const {
    return m_slot_to_elicit;
}
void OAIPostTextResponse::setSlotToElicit(const QString &slot_to_elicit) {
    m_slot_to_elicit = slot_to_elicit;
    m_slot_to_elicit_isSet = true;
}

bool OAIPostTextResponse::is_slot_to_elicit_Set() const{
    return m_slot_to_elicit_isSet;
}

bool OAIPostTextResponse::is_slot_to_elicit_Valid() const{
    return m_slot_to_elicit_isValid;
}

OAIPostTextResponse_responseCard OAIPostTextResponse::getResponseCard() const {
    return m_response_card;
}
void OAIPostTextResponse::setResponseCard(const OAIPostTextResponse_responseCard &response_card) {
    m_response_card = response_card;
    m_response_card_isSet = true;
}

bool OAIPostTextResponse::is_response_card_Set() const{
    return m_response_card_isSet;
}

bool OAIPostTextResponse::is_response_card_Valid() const{
    return m_response_card_isValid;
}

QString OAIPostTextResponse::getSessionId() const {
    return m_session_id;
}
void OAIPostTextResponse::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPostTextResponse::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPostTextResponse::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIPostTextResponse::getBotVersion() const {
    return m_bot_version;
}
void OAIPostTextResponse::setBotVersion(const QString &bot_version) {
    m_bot_version = bot_version;
    m_bot_version_isSet = true;
}

bool OAIPostTextResponse::is_bot_version_Set() const{
    return m_bot_version_isSet;
}

bool OAIPostTextResponse::is_bot_version_Valid() const{
    return m_bot_version_isValid;
}

QList OAIPostTextResponse::getActiveContexts() const {
    return m_active_contexts;
}
void OAIPostTextResponse::setActiveContexts(const QList &active_contexts) {
    m_active_contexts = active_contexts;
    m_active_contexts_isSet = true;
}

bool OAIPostTextResponse::is_active_contexts_Set() const{
    return m_active_contexts_isSet;
}

bool OAIPostTextResponse::is_active_contexts_Valid() const{
    return m_active_contexts_isValid;
}

bool OAIPostTextResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_intent_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nlu_intent_confidence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_intents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_slots.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_slot_to_elicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bot_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_contexts.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPostTextResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
