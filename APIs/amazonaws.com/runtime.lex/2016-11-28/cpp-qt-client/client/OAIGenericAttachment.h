/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGenericAttachment.h
 *
 * Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. 
 */

#ifndef OAIGenericAttachment_H
#define OAIGenericAttachment_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGenericAttachment : public OAIObject {
public:
    OAIGenericAttachment();
    OAIGenericAttachment(QString json);
    ~OAIGenericAttachment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getSubTitle() const;
    void setSubTitle(const QString &sub_title);
    bool is_sub_title_Set() const;
    bool is_sub_title_Valid() const;

    QString getAttachmentLinkUrl() const;
    void setAttachmentLinkUrl(const QString &attachment_link_url);
    bool is_attachment_link_url_Set() const;
    bool is_attachment_link_url_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QList getButtons() const;
    void setButtons(const QList &buttons);
    bool is_buttons_Set() const;
    bool is_buttons_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_sub_title;
    bool m_sub_title_isSet;
    bool m_sub_title_isValid;

    QString m_attachment_link_url;
    bool m_attachment_link_url_isSet;
    bool m_attachment_link_url_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QList m_buttons;
    bool m_buttons_isSet;
    bool m_buttons_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGenericAttachment)

#endif // OAIGenericAttachment_H
