/**
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSession_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSession_request::OAIPutSession_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSession_request::OAIPutSession_request() {
    this->initializeModel();
}

OAIPutSession_request::~OAIPutSession_request() {}

void OAIPutSession_request::initializeModel() {

    m_session_attributes_isSet = false;
    m_session_attributes_isValid = false;

    m_dialog_action_isSet = false;
    m_dialog_action_isValid = false;

    m_recent_intent_summary_view_isSet = false;
    m_recent_intent_summary_view_isValid = false;

    m_active_contexts_isSet = false;
    m_active_contexts_isValid = false;
}

void OAIPutSession_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSession_request::fromJsonObject(QJsonObject json) {

    m_session_attributes_isValid = ::OpenAPI::fromJsonValue(m_session_attributes, json[QString("sessionAttributes")]);
    m_session_attributes_isSet = !json[QString("sessionAttributes")].isNull() && m_session_attributes_isValid;

    m_dialog_action_isValid = ::OpenAPI::fromJsonValue(m_dialog_action, json[QString("dialogAction")]);
    m_dialog_action_isSet = !json[QString("dialogAction")].isNull() && m_dialog_action_isValid;

    m_recent_intent_summary_view_isValid = ::OpenAPI::fromJsonValue(m_recent_intent_summary_view, json[QString("recentIntentSummaryView")]);
    m_recent_intent_summary_view_isSet = !json[QString("recentIntentSummaryView")].isNull() && m_recent_intent_summary_view_isValid;

    m_active_contexts_isValid = ::OpenAPI::fromJsonValue(m_active_contexts, json[QString("activeContexts")]);
    m_active_contexts_isSet = !json[QString("activeContexts")].isNull() && m_active_contexts_isValid;
}

QString OAIPutSession_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSession_request::asJsonObject() const {
    QJsonObject obj;
    if (m_session_attributes.size() > 0) {
        obj.insert(QString("sessionAttributes"), ::OpenAPI::toJsonValue(m_session_attributes));
    }
    if (m_dialog_action.isSet()) {
        obj.insert(QString("dialogAction"), ::OpenAPI::toJsonValue(m_dialog_action));
    }
    if (m_recent_intent_summary_view.size() > 0) {
        obj.insert(QString("recentIntentSummaryView"), ::OpenAPI::toJsonValue(m_recent_intent_summary_view));
    }
    if (m_active_contexts.size() > 0) {
        obj.insert(QString("activeContexts"), ::OpenAPI::toJsonValue(m_active_contexts));
    }
    return obj;
}

QMap<QString, QString> OAIPutSession_request::getSessionAttributes() const {
    return m_session_attributes;
}
void OAIPutSession_request::setSessionAttributes(const QMap<QString, QString> &session_attributes) {
    m_session_attributes = session_attributes;
    m_session_attributes_isSet = true;
}

bool OAIPutSession_request::is_session_attributes_Set() const{
    return m_session_attributes_isSet;
}

bool OAIPutSession_request::is_session_attributes_Valid() const{
    return m_session_attributes_isValid;
}

OAIPutSession_request_dialogAction OAIPutSession_request::getDialogAction() const {
    return m_dialog_action;
}
void OAIPutSession_request::setDialogAction(const OAIPutSession_request_dialogAction &dialog_action) {
    m_dialog_action = dialog_action;
    m_dialog_action_isSet = true;
}

bool OAIPutSession_request::is_dialog_action_Set() const{
    return m_dialog_action_isSet;
}

bool OAIPutSession_request::is_dialog_action_Valid() const{
    return m_dialog_action_isValid;
}

QList<OAIIntentSummary> OAIPutSession_request::getRecentIntentSummaryView() const {
    return m_recent_intent_summary_view;
}
void OAIPutSession_request::setRecentIntentSummaryView(const QList<OAIIntentSummary> &recent_intent_summary_view) {
    m_recent_intent_summary_view = recent_intent_summary_view;
    m_recent_intent_summary_view_isSet = true;
}

bool OAIPutSession_request::is_recent_intent_summary_view_Set() const{
    return m_recent_intent_summary_view_isSet;
}

bool OAIPutSession_request::is_recent_intent_summary_view_Valid() const{
    return m_recent_intent_summary_view_isValid;
}

QList<OAIActiveContext> OAIPutSession_request::getActiveContexts() const {
    return m_active_contexts;
}
void OAIPutSession_request::setActiveContexts(const QList<OAIActiveContext> &active_contexts) {
    m_active_contexts = active_contexts;
    m_active_contexts_isSet = true;
}

bool OAIPutSession_request::is_active_contexts_Set() const{
    return m_active_contexts_isSet;
}

bool OAIPutSession_request::is_active_contexts_Valid() const{
    return m_active_contexts_isValid;
}

bool OAIPutSession_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_session_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dialog_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recent_intent_summary_view.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_contexts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSession_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
