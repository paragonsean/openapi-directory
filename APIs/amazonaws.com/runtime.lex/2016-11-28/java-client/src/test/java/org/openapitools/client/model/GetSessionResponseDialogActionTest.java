/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DialogActionType;
import org.openapitools.client.model.FulfillmentState;
import org.openapitools.client.model.MessageFormatType;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetSessionResponseDialogAction
 */
public class GetSessionResponseDialogActionTest {
    private final GetSessionResponseDialogAction model = new GetSessionResponseDialogAction();

    /**
     * Model tests for GetSessionResponseDialogAction
     */
    @Test
    public void testGetSessionResponseDialogAction() {
        // TODO: test GetSessionResponseDialogAction
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'intentName'
     */
    @Test
    public void intentNameTest() {
        // TODO: test intentName
    }

    /**
     * Test the property 'slots'
     */
    @Test
    public void slotsTest() {
        // TODO: test slots
    }

    /**
     * Test the property 'slotToElicit'
     */
    @Test
    public void slotToElicitTest() {
        // TODO: test slotToElicit
    }

    /**
     * Test the property 'fulfillmentState'
     */
    @Test
    public void fulfillmentStateTest() {
        // TODO: test fulfillmentState
    }

    /**
     * Test the property 'message'
     */
    @Test
    public void messageTest() {
        // TODO: test message
    }

    /**
     * Test the property 'messageFormat'
     */
    @Test
    public void messageFormatTest() {
        // TODO: test messageFormat
    }

}
