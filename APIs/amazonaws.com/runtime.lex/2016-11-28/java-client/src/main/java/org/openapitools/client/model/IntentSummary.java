/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ConfirmationStatus;
import org.openapitools.client.model.DialogActionType;
import org.openapitools.client.model.FulfillmentState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntentSummary {
  public static final String SERIALIZED_NAME_INTENT_NAME = "intentName";
  @SerializedName(SERIALIZED_NAME_INTENT_NAME)
  private String intentName;

  public static final String SERIALIZED_NAME_CHECKPOINT_LABEL = "checkpointLabel";
  @SerializedName(SERIALIZED_NAME_CHECKPOINT_LABEL)
  private String checkpointLabel;

  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private Map slots;

  public static final String SERIALIZED_NAME_CONFIRMATION_STATUS = "confirmationStatus";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_STATUS)
  private ConfirmationStatus confirmationStatus;

  public static final String SERIALIZED_NAME_DIALOG_ACTION_TYPE = "dialogActionType";
  @SerializedName(SERIALIZED_NAME_DIALOG_ACTION_TYPE)
  private DialogActionType dialogActionType;

  public static final String SERIALIZED_NAME_FULFILLMENT_STATE = "fulfillmentState";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_STATE)
  private FulfillmentState fulfillmentState;

  public static final String SERIALIZED_NAME_SLOT_TO_ELICIT = "slotToElicit";
  @SerializedName(SERIALIZED_NAME_SLOT_TO_ELICIT)
  private String slotToElicit;

  public IntentSummary() {
  }

  public IntentSummary intentName(String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * Get intentName
   * @return intentName
   */
  @javax.annotation.Nullable
  public String getIntentName() {
    return intentName;
  }

  public void setIntentName(String intentName) {
    this.intentName = intentName;
  }


  public IntentSummary checkpointLabel(String checkpointLabel) {
    this.checkpointLabel = checkpointLabel;
    return this;
  }

  /**
   * Get checkpointLabel
   * @return checkpointLabel
   */
  @javax.annotation.Nullable
  public String getCheckpointLabel() {
    return checkpointLabel;
  }

  public void setCheckpointLabel(String checkpointLabel) {
    this.checkpointLabel = checkpointLabel;
  }


  public IntentSummary slots(Map slots) {
    this.slots = slots;
    return this;
  }

  /**
   * Get slots
   * @return slots
   */
  @javax.annotation.Nullable
  public Map getSlots() {
    return slots;
  }

  public void setSlots(Map slots) {
    this.slots = slots;
  }


  public IntentSummary confirmationStatus(ConfirmationStatus confirmationStatus) {
    this.confirmationStatus = confirmationStatus;
    return this;
  }

  /**
   * Get confirmationStatus
   * @return confirmationStatus
   */
  @javax.annotation.Nullable
  public ConfirmationStatus getConfirmationStatus() {
    return confirmationStatus;
  }

  public void setConfirmationStatus(ConfirmationStatus confirmationStatus) {
    this.confirmationStatus = confirmationStatus;
  }


  public IntentSummary dialogActionType(DialogActionType dialogActionType) {
    this.dialogActionType = dialogActionType;
    return this;
  }

  /**
   * Get dialogActionType
   * @return dialogActionType
   */
  @javax.annotation.Nonnull
  public DialogActionType getDialogActionType() {
    return dialogActionType;
  }

  public void setDialogActionType(DialogActionType dialogActionType) {
    this.dialogActionType = dialogActionType;
  }


  public IntentSummary fulfillmentState(FulfillmentState fulfillmentState) {
    this.fulfillmentState = fulfillmentState;
    return this;
  }

  /**
   * Get fulfillmentState
   * @return fulfillmentState
   */
  @javax.annotation.Nullable
  public FulfillmentState getFulfillmentState() {
    return fulfillmentState;
  }

  public void setFulfillmentState(FulfillmentState fulfillmentState) {
    this.fulfillmentState = fulfillmentState;
  }


  public IntentSummary slotToElicit(String slotToElicit) {
    this.slotToElicit = slotToElicit;
    return this;
  }

  /**
   * Get slotToElicit
   * @return slotToElicit
   */
  @javax.annotation.Nullable
  public String getSlotToElicit() {
    return slotToElicit;
  }

  public void setSlotToElicit(String slotToElicit) {
    this.slotToElicit = slotToElicit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntentSummary intentSummary = (IntentSummary) o;
    return Objects.equals(this.intentName, intentSummary.intentName) &&
        Objects.equals(this.checkpointLabel, intentSummary.checkpointLabel) &&
        Objects.equals(this.slots, intentSummary.slots) &&
        Objects.equals(this.confirmationStatus, intentSummary.confirmationStatus) &&
        Objects.equals(this.dialogActionType, intentSummary.dialogActionType) &&
        Objects.equals(this.fulfillmentState, intentSummary.fulfillmentState) &&
        Objects.equals(this.slotToElicit, intentSummary.slotToElicit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intentName, checkpointLabel, slots, confirmationStatus, dialogActionType, fulfillmentState, slotToElicit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntentSummary {\n");
    sb.append("    intentName: ").append(toIndentedString(intentName)).append("\n");
    sb.append("    checkpointLabel: ").append(toIndentedString(checkpointLabel)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    confirmationStatus: ").append(toIndentedString(confirmationStatus)).append("\n");
    sb.append("    dialogActionType: ").append(toIndentedString(dialogActionType)).append("\n");
    sb.append("    fulfillmentState: ").append(toIndentedString(fulfillmentState)).append("\n");
    sb.append("    slotToElicit: ").append(toIndentedString(slotToElicit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intentName");
    openapiFields.add("checkpointLabel");
    openapiFields.add("slots");
    openapiFields.add("confirmationStatus");
    openapiFields.add("dialogActionType");
    openapiFields.add("fulfillmentState");
    openapiFields.add("slotToElicit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dialogActionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntentSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntentSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntentSummary is not found in the empty JSON string", IntentSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntentSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntentSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntentSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `intentName`
      if (jsonObj.get("intentName") != null && !jsonObj.get("intentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("intentName"));
      }
      // validate the optional field `checkpointLabel`
      if (jsonObj.get("checkpointLabel") != null && !jsonObj.get("checkpointLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("checkpointLabel"));
      }
      // validate the optional field `slots`
      if (jsonObj.get("slots") != null && !jsonObj.get("slots").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("slots"));
      }
      // validate the optional field `confirmationStatus`
      if (jsonObj.get("confirmationStatus") != null && !jsonObj.get("confirmationStatus").isJsonNull()) {
        ConfirmationStatus.validateJsonElement(jsonObj.get("confirmationStatus"));
      }
      // validate the required field `dialogActionType`
      DialogActionType.validateJsonElement(jsonObj.get("dialogActionType"));
      // validate the optional field `fulfillmentState`
      if (jsonObj.get("fulfillmentState") != null && !jsonObj.get("fulfillmentState").isJsonNull()) {
        FulfillmentState.validateJsonElement(jsonObj.get("fulfillmentState"));
      }
      // validate the optional field `slotToElicit`
      if (jsonObj.get("slotToElicit") != null && !jsonObj.get("slotToElicit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotToElicit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntentSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntentSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntentSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntentSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<IntentSummary>() {
           @Override
           public void write(JsonWriter out, IntentSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntentSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntentSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntentSummary
   * @throws IOException if the JSON string is invalid with respect to IntentSummary
   */
  public static IntentSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntentSummary.class);
  }

  /**
   * Convert an instance of IntentSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

