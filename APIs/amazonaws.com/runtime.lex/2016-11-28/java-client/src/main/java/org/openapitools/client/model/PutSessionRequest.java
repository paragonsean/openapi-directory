/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ActiveContext;
import org.openapitools.client.model.IntentSummary;
import org.openapitools.client.model.PutSessionRequestDialogAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutSessionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutSessionRequest {
  public static final String SERIALIZED_NAME_SESSION_ATTRIBUTES = "sessionAttributes";
  @SerializedName(SERIALIZED_NAME_SESSION_ATTRIBUTES)
  private Map<String, String> sessionAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_DIALOG_ACTION = "dialogAction";
  @SerializedName(SERIALIZED_NAME_DIALOG_ACTION)
  private PutSessionRequestDialogAction dialogAction;

  public static final String SERIALIZED_NAME_RECENT_INTENT_SUMMARY_VIEW = "recentIntentSummaryView";
  @SerializedName(SERIALIZED_NAME_RECENT_INTENT_SUMMARY_VIEW)
  private List<IntentSummary> recentIntentSummaryView = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVE_CONTEXTS = "activeContexts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTEXTS)
  private List<ActiveContext> activeContexts = new ArrayList<>();

  public PutSessionRequest() {
  }

  public PutSessionRequest sessionAttributes(Map<String, String> sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
    return this;
  }

  public PutSessionRequest putSessionAttributesItem(String key, String sessionAttributesItem) {
    if (this.sessionAttributes == null) {
      this.sessionAttributes = new HashMap<>();
    }
    this.sessionAttributes.put(key, sessionAttributesItem);
    return this;
  }

  /**
   * Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.
   * @return sessionAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getSessionAttributes() {
    return sessionAttributes;
  }

  public void setSessionAttributes(Map<String, String> sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
  }


  public PutSessionRequest dialogAction(PutSessionRequestDialogAction dialogAction) {
    this.dialogAction = dialogAction;
    return this;
  }

  /**
   * Get dialogAction
   * @return dialogAction
   */
  @javax.annotation.Nullable
  public PutSessionRequestDialogAction getDialogAction() {
    return dialogAction;
  }

  public void setDialogAction(PutSessionRequestDialogAction dialogAction) {
    this.dialogAction = dialogAction;
  }


  public PutSessionRequest recentIntentSummaryView(List<IntentSummary> recentIntentSummaryView) {
    this.recentIntentSummaryView = recentIntentSummaryView;
    return this;
  }

  public PutSessionRequest addRecentIntentSummaryViewItem(IntentSummary recentIntentSummaryViewItem) {
    if (this.recentIntentSummaryView == null) {
      this.recentIntentSummaryView = new ArrayList<>();
    }
    this.recentIntentSummaryView.add(recentIntentSummaryViewItem);
    return this;
  }

  /**
   * &lt;p&gt;A summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.&lt;/p&gt; &lt;p&gt;An intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;intentName&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;slot names&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slotToElict&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you send the &lt;code&gt;recentIntentSummaryView&lt;/code&gt; parameter in a &lt;code&gt;PutSession&lt;/code&gt; request, the contents of the new summary view replaces the old summary view. For example, if a &lt;code&gt;GetSession&lt;/code&gt; request returns three intents in the summary view and you call &lt;code&gt;PutSession&lt;/code&gt; with one intent in the summary view, the next call to &lt;code&gt;GetSession&lt;/code&gt; will only return one intent.&lt;/p&gt;
   * @return recentIntentSummaryView
   */
  @javax.annotation.Nullable
  public List<IntentSummary> getRecentIntentSummaryView() {
    return recentIntentSummaryView;
  }

  public void setRecentIntentSummaryView(List<IntentSummary> recentIntentSummaryView) {
    this.recentIntentSummaryView = recentIntentSummaryView;
  }


  public PutSessionRequest activeContexts(List<ActiveContext> activeContexts) {
    this.activeContexts = activeContexts;
    return this;
  }

  public PutSessionRequest addActiveContextsItem(ActiveContext activeContextsItem) {
    if (this.activeContexts == null) {
      this.activeContexts = new ArrayList<>();
    }
    this.activeContexts.add(activeContextsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.&lt;/p&gt;
   * @return activeContexts
   */
  @javax.annotation.Nullable
  public List<ActiveContext> getActiveContexts() {
    return activeContexts;
  }

  public void setActiveContexts(List<ActiveContext> activeContexts) {
    this.activeContexts = activeContexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutSessionRequest putSessionRequest = (PutSessionRequest) o;
    return Objects.equals(this.sessionAttributes, putSessionRequest.sessionAttributes) &&
        Objects.equals(this.dialogAction, putSessionRequest.dialogAction) &&
        Objects.equals(this.recentIntentSummaryView, putSessionRequest.recentIntentSummaryView) &&
        Objects.equals(this.activeContexts, putSessionRequest.activeContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionAttributes, dialogAction, recentIntentSummaryView, activeContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutSessionRequest {\n");
    sb.append("    sessionAttributes: ").append(toIndentedString(sessionAttributes)).append("\n");
    sb.append("    dialogAction: ").append(toIndentedString(dialogAction)).append("\n");
    sb.append("    recentIntentSummaryView: ").append(toIndentedString(recentIntentSummaryView)).append("\n");
    sb.append("    activeContexts: ").append(toIndentedString(activeContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sessionAttributes");
    openapiFields.add("dialogAction");
    openapiFields.add("recentIntentSummaryView");
    openapiFields.add("activeContexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutSessionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutSessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutSessionRequest is not found in the empty JSON string", PutSessionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutSessionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutSessionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dialogAction`
      if (jsonObj.get("dialogAction") != null && !jsonObj.get("dialogAction").isJsonNull()) {
        PutSessionRequestDialogAction.validateJsonElement(jsonObj.get("dialogAction"));
      }
      if (jsonObj.get("recentIntentSummaryView") != null && !jsonObj.get("recentIntentSummaryView").isJsonNull()) {
        JsonArray jsonArrayrecentIntentSummaryView = jsonObj.getAsJsonArray("recentIntentSummaryView");
        if (jsonArrayrecentIntentSummaryView != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recentIntentSummaryView").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recentIntentSummaryView` to be an array in the JSON string but got `%s`", jsonObj.get("recentIntentSummaryView").toString()));
          }

          // validate the optional field `recentIntentSummaryView` (array)
          for (int i = 0; i < jsonArrayrecentIntentSummaryView.size(); i++) {
            IntentSummary.validateJsonElement(jsonArrayrecentIntentSummaryView.get(i));
          };
        }
      }
      if (jsonObj.get("activeContexts") != null && !jsonObj.get("activeContexts").isJsonNull()) {
        JsonArray jsonArrayactiveContexts = jsonObj.getAsJsonArray("activeContexts");
        if (jsonArrayactiveContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activeContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activeContexts` to be an array in the JSON string but got `%s`", jsonObj.get("activeContexts").toString()));
          }

          // validate the optional field `activeContexts` (array)
          for (int i = 0; i < jsonArrayactiveContexts.size(); i++) {
            ActiveContext.validateJsonElement(jsonArrayactiveContexts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutSessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutSessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutSessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutSessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutSessionRequest>() {
           @Override
           public void write(JsonWriter out, PutSessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutSessionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutSessionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutSessionRequest
   * @throws IOException if the JSON string is invalid with respect to PutSessionRequest
   */
  public static PutSessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutSessionRequest.class);
  }

  /**
   * Convert an instance of PutSessionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

