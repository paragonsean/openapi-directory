/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeleteSessionResponse;
import org.openapitools.client.model.GetSessionResponse;
import org.openapitools.client.model.PostContentRequest;
import org.openapitools.client.model.PostContentResponse;
import org.openapitools.client.model.PostTextRequest;
import org.openapitools.client.model.PostTextResponse;
import org.openapitools.client.model.PutSessionRequest;
import org.openapitools.client.model.PutSessionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteSession
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The identifier of the user associated with the session data. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionCall(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session"
            .replace("{" + "botName" + "}", localVarApiClient.escapeString(botName.toString()))
            .replace("{" + "botAlias" + "}", localVarApiClient.escapeString(botAlias.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSessionValidateBeforeCall(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botName' is set
        if (botName == null) {
            throw new ApiException("Missing the required parameter 'botName' when calling deleteSession(Async)");
        }

        // verify the required parameter 'botAlias' is set
        if (botAlias == null) {
            throw new ApiException("Missing the required parameter 'botAlias' when calling deleteSession(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteSession(Async)");
        }

        return deleteSessionCall(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes session information for a specified bot, alias, and user ID. 
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The identifier of the user associated with the session data. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSessionResponse deleteSession(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSessionResponse> localVarResp = deleteSessionWithHttpInfo(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes session information for a specified bot, alias, and user ID. 
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The identifier of the user associated with the session data. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSessionResponse> deleteSessionWithHttpInfo(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSessionValidateBeforeCall(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes session information for a specified bot, alias, and user ID. 
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The identifier of the user associated with the session data. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSessionAsync(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSessionValidateBeforeCall(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSession
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkpointLabelFilter &lt;p&gt;A string used to filter the intents returned in the &lt;code&gt;recentIntentSummaryView&lt;/code&gt; structure. &lt;/p&gt; &lt;p&gt;When you specify a filter, only intents with their &lt;code&gt;checkpointLabel&lt;/code&gt; field set to that string are returned.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionCall(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String checkpointLabelFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session/"
            .replace("{" + "botName" + "}", localVarApiClient.escapeString(botName.toString()))
            .replace("{" + "botAlias" + "}", localVarApiClient.escapeString(botAlias.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkpointLabelFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkpointLabelFilter", checkpointLabelFilter));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionValidateBeforeCall(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String checkpointLabelFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botName' is set
        if (botName == null) {
            throw new ApiException("Missing the required parameter 'botName' when calling getSession(Async)");
        }

        // verify the required parameter 'botAlias' is set
        if (botAlias == null) {
            throw new ApiException("Missing the required parameter 'botAlias' when calling getSession(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getSession(Async)");
        }

        return getSessionCall(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkpointLabelFilter, _callback);

    }

    /**
     * 
     * Returns session information for a specified bot, alias, and user ID.
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkpointLabelFilter &lt;p&gt;A string used to filter the intents returned in the &lt;code&gt;recentIntentSummaryView&lt;/code&gt; structure. &lt;/p&gt; &lt;p&gt;When you specify a filter, only intents with their &lt;code&gt;checkpointLabel&lt;/code&gt; field set to that string are returned.&lt;/p&gt; (optional)
     * @return GetSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetSessionResponse getSession(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String checkpointLabelFilter) throws ApiException {
        ApiResponse<GetSessionResponse> localVarResp = getSessionWithHttpInfo(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkpointLabelFilter);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns session information for a specified bot, alias, and user ID.
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkpointLabelFilter &lt;p&gt;A string used to filter the intents returned in the &lt;code&gt;recentIntentSummaryView&lt;/code&gt; structure. &lt;/p&gt; &lt;p&gt;When you specify a filter, only intents with their &lt;code&gt;checkpointLabel&lt;/code&gt; field set to that string are returned.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;GetSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSessionResponse> getSessionWithHttpInfo(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String checkpointLabelFilter) throws ApiException {
        okhttp3.Call localVarCall = getSessionValidateBeforeCall(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkpointLabelFilter, null);
        Type localVarReturnType = new TypeToken<GetSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns session information for a specified bot, alias, and user ID.
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param checkpointLabelFilter &lt;p&gt;A string used to filter the intents returned in the &lt;code&gt;recentIntentSummaryView&lt;/code&gt; structure. &lt;/p&gt; &lt;p&gt;When you specify a filter, only intents with their &lt;code&gt;checkpointLabel&lt;/code&gt; field set to that string are returned.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionAsync(String botName, String botAlias, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String checkpointLabelFilter, final ApiCallback<GetSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionValidateBeforeCall(botName, botAlias, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, checkpointLabelFilter, _callback);
        Type localVarReturnType = new TypeToken<GetSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postContent
     * @param botName Name of the Amazon Lex bot. (required)
     * @param botAlias Alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param contentType &lt;p&gt; You pass this value as the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; Indicates the audio format or text. The header value must start with one of the following prefixes: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;PCM format, audio data must be in little-endian byte order.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/l16; rate&#x3D;16000; channels&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/x-l16; sample-rate&#x3D;16000; channel-count&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/lpcm; sample-rate&#x3D;8000; sample-size-bits&#x3D;16; channel-count&#x3D;1; is-big-endian&#x3D;false &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Opus format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/x-cbr-opus-with-preamble; preamble-size&#x3D;0; bit-rate&#x3D;256000; frame-size-milliseconds&#x3D;4&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Text format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postContentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzLexSessionAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-session-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;sessionAttributes&lt;/code&gt; and &lt;code&gt;requestAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\&quot;&gt;Setting Session Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param xAmzLexRequestAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-request-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;requestAttributes&lt;/code&gt; and &lt;code&gt;sessionAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;The namespace &lt;code&gt;x-amz-lex:&lt;/code&gt; is reserved for special attributes. Don&#39;t create any request attributes with the prefix &lt;code&gt;x-amz-lex:&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\&quot;&gt;Setting Request Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param accept &lt;p&gt; You pass this value as the &lt;code&gt;Accept&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; The message Amazon Lex returns in the response can be either text or speech based on the &lt;code&gt;Accept&lt;/code&gt; HTTP header value in the request. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the &lt;code&gt;Accept&lt;/code&gt; header). For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech returned is &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/mpeg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/ogg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/pcm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/_* (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param xAmzLexActiveContexts &lt;p&gt;A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.&lt;/p&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedMediaTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestTimeoutException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postContentCall(String botName, String botAlias, String userId, String contentType, PostContentRequest postContentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzLexSessionAttributes, String xAmzLexRequestAttributes, String accept, String xAmzLexActiveContexts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postContentRequest;

        // create path and map variables
        String localVarPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type"
            .replace("{" + "botName" + "}", localVarApiClient.escapeString(botName.toString()))
            .replace("{" + "botAlias" + "}", localVarApiClient.escapeString(botAlias.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzLexSessionAttributes != null) {
            localVarHeaderParams.put("x-amz-lex-session-attributes", localVarApiClient.parameterToString(xAmzLexSessionAttributes));
        }

        if (xAmzLexRequestAttributes != null) {
            localVarHeaderParams.put("x-amz-lex-request-attributes", localVarApiClient.parameterToString(xAmzLexRequestAttributes));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (xAmzLexActiveContexts != null) {
            localVarHeaderParams.put("x-amz-lex-active-contexts", localVarApiClient.parameterToString(xAmzLexActiveContexts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postContentValidateBeforeCall(String botName, String botAlias, String userId, String contentType, PostContentRequest postContentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzLexSessionAttributes, String xAmzLexRequestAttributes, String accept, String xAmzLexActiveContexts, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botName' is set
        if (botName == null) {
            throw new ApiException("Missing the required parameter 'botName' when calling postContent(Async)");
        }

        // verify the required parameter 'botAlias' is set
        if (botAlias == null) {
            throw new ApiException("Missing the required parameter 'botAlias' when calling postContent(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postContent(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling postContent(Async)");
        }

        // verify the required parameter 'postContentRequest' is set
        if (postContentRequest == null) {
            throw new ApiException("Missing the required parameter 'postContentRequest' when calling postContent(Async)");
        }

        return postContentCall(botName, botAlias, userId, contentType, postContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzLexSessionAttributes, xAmzLexRequestAttributes, accept, xAmzLexActiveContexts, _callback);

    }

    /**
     * 
     * &lt;p&gt; Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;PostContent&lt;/code&gt; operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. &lt;/p&gt; &lt;p&gt; In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For a user input \&quot;I would like a pizza,\&quot; Amazon Lex might return a response with a message eliciting slot data (for example, &lt;code&gt;PizzaSize&lt;/code&gt;): \&quot;What size pizza would you like?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: \&quot;Order the pizza?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user replies \&quot;Yes\&quot; to the confirmation prompt, Amazon Lex might return a conclusion statement: \&quot;Thank you, your cheese pizza has been ordered.\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the message is to elicit slot data, Amazon Lex returns the following context information: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header set to &lt;code&gt;ElicitSlot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-intent-name&lt;/code&gt; header set to the intent name in the current context &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-slots&lt;/code&gt; header set to a map of slots configured for the intent with their current values &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header is set to &lt;code&gt;Confirmation&lt;/code&gt; and the &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the &lt;code&gt;x-amz-dialog-state&lt;/code&gt; header is set to &lt;code&gt;ElicitIntent&lt;/code&gt; and the &lt;code&gt;x-amz-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\&quot;&gt;Managing Conversation Context&lt;/a&gt;. &lt;/p&gt;
     * @param botName Name of the Amazon Lex bot. (required)
     * @param botAlias Alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param contentType &lt;p&gt; You pass this value as the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; Indicates the audio format or text. The header value must start with one of the following prefixes: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;PCM format, audio data must be in little-endian byte order.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/l16; rate&#x3D;16000; channels&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/x-l16; sample-rate&#x3D;16000; channel-count&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/lpcm; sample-rate&#x3D;8000; sample-size-bits&#x3D;16; channel-count&#x3D;1; is-big-endian&#x3D;false &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Opus format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/x-cbr-opus-with-preamble; preamble-size&#x3D;0; bit-rate&#x3D;256000; frame-size-milliseconds&#x3D;4&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Text format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postContentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzLexSessionAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-session-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;sessionAttributes&lt;/code&gt; and &lt;code&gt;requestAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\&quot;&gt;Setting Session Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param xAmzLexRequestAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-request-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;requestAttributes&lt;/code&gt; and &lt;code&gt;sessionAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;The namespace &lt;code&gt;x-amz-lex:&lt;/code&gt; is reserved for special attributes. Don&#39;t create any request attributes with the prefix &lt;code&gt;x-amz-lex:&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\&quot;&gt;Setting Request Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param accept &lt;p&gt; You pass this value as the &lt;code&gt;Accept&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; The message Amazon Lex returns in the response can be either text or speech based on the &lt;code&gt;Accept&lt;/code&gt; HTTP header value in the request. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the &lt;code&gt;Accept&lt;/code&gt; header). For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech returned is &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/mpeg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/ogg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/pcm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/_* (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param xAmzLexActiveContexts &lt;p&gt;A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.&lt;/p&gt; (optional)
     * @return PostContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedMediaTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestTimeoutException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public PostContentResponse postContent(String botName, String botAlias, String userId, String contentType, PostContentRequest postContentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzLexSessionAttributes, String xAmzLexRequestAttributes, String accept, String xAmzLexActiveContexts) throws ApiException {
        ApiResponse<PostContentResponse> localVarResp = postContentWithHttpInfo(botName, botAlias, userId, contentType, postContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzLexSessionAttributes, xAmzLexRequestAttributes, accept, xAmzLexActiveContexts);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;PostContent&lt;/code&gt; operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. &lt;/p&gt; &lt;p&gt; In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For a user input \&quot;I would like a pizza,\&quot; Amazon Lex might return a response with a message eliciting slot data (for example, &lt;code&gt;PizzaSize&lt;/code&gt;): \&quot;What size pizza would you like?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: \&quot;Order the pizza?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user replies \&quot;Yes\&quot; to the confirmation prompt, Amazon Lex might return a conclusion statement: \&quot;Thank you, your cheese pizza has been ordered.\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the message is to elicit slot data, Amazon Lex returns the following context information: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header set to &lt;code&gt;ElicitSlot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-intent-name&lt;/code&gt; header set to the intent name in the current context &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-slots&lt;/code&gt; header set to a map of slots configured for the intent with their current values &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header is set to &lt;code&gt;Confirmation&lt;/code&gt; and the &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the &lt;code&gt;x-amz-dialog-state&lt;/code&gt; header is set to &lt;code&gt;ElicitIntent&lt;/code&gt; and the &lt;code&gt;x-amz-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\&quot;&gt;Managing Conversation Context&lt;/a&gt;. &lt;/p&gt;
     * @param botName Name of the Amazon Lex bot. (required)
     * @param botAlias Alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param contentType &lt;p&gt; You pass this value as the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; Indicates the audio format or text. The header value must start with one of the following prefixes: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;PCM format, audio data must be in little-endian byte order.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/l16; rate&#x3D;16000; channels&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/x-l16; sample-rate&#x3D;16000; channel-count&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/lpcm; sample-rate&#x3D;8000; sample-size-bits&#x3D;16; channel-count&#x3D;1; is-big-endian&#x3D;false &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Opus format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/x-cbr-opus-with-preamble; preamble-size&#x3D;0; bit-rate&#x3D;256000; frame-size-milliseconds&#x3D;4&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Text format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postContentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzLexSessionAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-session-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;sessionAttributes&lt;/code&gt; and &lt;code&gt;requestAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\&quot;&gt;Setting Session Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param xAmzLexRequestAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-request-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;requestAttributes&lt;/code&gt; and &lt;code&gt;sessionAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;The namespace &lt;code&gt;x-amz-lex:&lt;/code&gt; is reserved for special attributes. Don&#39;t create any request attributes with the prefix &lt;code&gt;x-amz-lex:&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\&quot;&gt;Setting Request Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param accept &lt;p&gt; You pass this value as the &lt;code&gt;Accept&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; The message Amazon Lex returns in the response can be either text or speech based on the &lt;code&gt;Accept&lt;/code&gt; HTTP header value in the request. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the &lt;code&gt;Accept&lt;/code&gt; header). For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech returned is &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/mpeg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/ogg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/pcm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/_* (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param xAmzLexActiveContexts &lt;p&gt;A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.&lt;/p&gt; (optional)
     * @return ApiResponse&lt;PostContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedMediaTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestTimeoutException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostContentResponse> postContentWithHttpInfo(String botName, String botAlias, String userId, String contentType, PostContentRequest postContentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzLexSessionAttributes, String xAmzLexRequestAttributes, String accept, String xAmzLexActiveContexts) throws ApiException {
        okhttp3.Call localVarCall = postContentValidateBeforeCall(botName, botAlias, userId, contentType, postContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzLexSessionAttributes, xAmzLexRequestAttributes, accept, xAmzLexActiveContexts, null);
        Type localVarReturnType = new TypeToken<PostContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Sends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot. &lt;/p&gt; &lt;p&gt;The &lt;code&gt;PostContent&lt;/code&gt; operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications. &lt;/p&gt; &lt;p&gt; In response, Amazon Lex returns the next message to convey to the user. Consider the following example messages: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For a user input \&quot;I would like a pizza,\&quot; Amazon Lex might return a response with a message eliciting slot data (for example, &lt;code&gt;PizzaSize&lt;/code&gt;): \&quot;What size pizza would you like?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: \&quot;Order the pizza?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user replies \&quot;Yes\&quot; to the confirmation prompt, Amazon Lex might return a conclusion statement: \&quot;Thank you, your cheese pizza has been ordered.\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Not all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the message is to elicit slot data, Amazon Lex returns the following context information: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header set to &lt;code&gt;ElicitSlot&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-intent-name&lt;/code&gt; header set to the intent name in the current context &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;x-amz-lex-slots&lt;/code&gt; header set to a map of slots configured for the intent with their current values &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;x-amz-lex-dialog-state&lt;/code&gt; header is set to &lt;code&gt;Confirmation&lt;/code&gt; and the &lt;code&gt;x-amz-lex-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the &lt;code&gt;x-amz-dialog-state&lt;/code&gt; header is set to &lt;code&gt;ElicitIntent&lt;/code&gt; and the &lt;code&gt;x-amz-slot-to-elicit&lt;/code&gt; header is omitted. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\&quot;&gt;Managing Conversation Context&lt;/a&gt;. &lt;/p&gt;
     * @param botName Name of the Amazon Lex bot. (required)
     * @param botAlias Alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param contentType &lt;p&gt; You pass this value as the &lt;code&gt;Content-Type&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; Indicates the audio format or text. The header value must start with one of the following prefixes: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;PCM format, audio data must be in little-endian byte order.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/l16; rate&#x3D;16000; channels&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/x-l16; sample-rate&#x3D;16000; channel-count&#x3D;1&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/lpcm; sample-rate&#x3D;8000; sample-size-bits&#x3D;16; channel-count&#x3D;1; is-big-endian&#x3D;false &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Opus format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/x-cbr-opus-with-preamble; preamble-size&#x3D;0; bit-rate&#x3D;256000; frame-size-milliseconds&#x3D;4&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Text format&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postContentRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzLexSessionAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-session-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Application-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;sessionAttributes&lt;/code&gt; and &lt;code&gt;requestAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\&quot;&gt;Setting Session Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param xAmzLexRequestAttributes &lt;p&gt;You pass this value as the &lt;code&gt;x-amz-lex-request-attributes&lt;/code&gt; HTTP header.&lt;/p&gt; &lt;p&gt;Request-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the &lt;code&gt;requestAttributes&lt;/code&gt; and &lt;code&gt;sessionAttributes&lt;/code&gt; headers is limited to 12 KB.&lt;/p&gt; &lt;p&gt;The namespace &lt;code&gt;x-amz-lex:&lt;/code&gt; is reserved for special attributes. Don&#39;t create any request attributes with the prefix &lt;code&gt;x-amz-lex:&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\&quot;&gt;Setting Request Attributes&lt;/a&gt;.&lt;/p&gt; (optional)
     * @param accept &lt;p&gt; You pass this value as the &lt;code&gt;Accept&lt;/code&gt; HTTP header. &lt;/p&gt; &lt;p&gt; The message Amazon Lex returns in the response can be either text or speech based on the &lt;code&gt;Accept&lt;/code&gt; HTTP header value in the request. &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the &lt;code&gt;Accept&lt;/code&gt; header). For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech returned is &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;audio/mpeg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/ogg&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/pcm&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;text/plain; charset&#x3D;utf-8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;audio/_* (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param xAmzLexActiveContexts &lt;p&gt;A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.&lt;/p&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnsupportedMediaTypeException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RequestTimeoutException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postContentAsync(String botName, String botAlias, String userId, String contentType, PostContentRequest postContentRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzLexSessionAttributes, String xAmzLexRequestAttributes, String accept, String xAmzLexActiveContexts, final ApiCallback<PostContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postContentValidateBeforeCall(botName, botAlias, userId, contentType, postContentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzLexSessionAttributes, xAmzLexRequestAttributes, accept, xAmzLexActiveContexts, _callback);
        Type localVarReturnType = new TypeToken<PostContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postText
     * @param botName The name of the Amazon Lex bot. (required)
     * @param botAlias The alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTextCall(String botName, String botAlias, String userId, PostTextRequest postTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postTextRequest;

        // create path and map variables
        String localVarPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/text"
            .replace("{" + "botName" + "}", localVarApiClient.escapeString(botName.toString()))
            .replace("{" + "botAlias" + "}", localVarApiClient.escapeString(botAlias.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTextValidateBeforeCall(String botName, String botAlias, String userId, PostTextRequest postTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botName' is set
        if (botName == null) {
            throw new ApiException("Missing the required parameter 'botName' when calling postText(Async)");
        }

        // verify the required parameter 'botAlias' is set
        if (botAlias == null) {
            throw new ApiException("Missing the required parameter 'botAlias' when calling postText(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling postText(Async)");
        }

        // verify the required parameter 'postTextRequest' is set
        if (postTextRequest == null) {
            throw new ApiException("Missing the required parameter 'postTextRequest' when calling postText(Async)");
        }

        return postTextCall(botName, botAlias, userId, postTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. &lt;/p&gt; &lt;p&gt; In response, Amazon Lex returns the next &lt;code&gt;message&lt;/code&gt; to convey to the user an optional &lt;code&gt;responseCard&lt;/code&gt; to display. Consider the following example messages: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For a user input \&quot;I would like a pizza\&quot;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \&quot;What size pizza would you like?\&quot; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \&quot;Proceed with the pizza order?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user replies to a confirmation prompt with a \&quot;yes\&quot;, Amazon Lex might return a conclusion statement: \&quot;Thank you, your cheese pizza has been ordered.\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \&quot;yes\&quot; or \&quot;no\&quot; user response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the &lt;code&gt;slotToElicit&lt;/code&gt;, &lt;code&gt;dialogState&lt;/code&gt;, &lt;code&gt;intentName&lt;/code&gt;, and &lt;code&gt;slots&lt;/code&gt; fields in the response. Consider the following examples: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the message is to elicit slot data, Amazon Lex returns the following context information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;dialogState&lt;/code&gt; set to ElicitSlot &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;intentName&lt;/code&gt; set to the intent name in the current context &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slotToElicit&lt;/code&gt; set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slots&lt;/code&gt; set to a map of slots, configured for the intent, with currently known values &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;dialogState&lt;/code&gt; is set to ConfirmIntent and &lt;code&gt;SlotToElicit&lt;/code&gt; is set to null. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the &lt;code&gt;dialogState&lt;/code&gt; is set to ElicitIntent and &lt;code&gt;slotToElicit&lt;/code&gt; is set to null. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\&quot;&gt;Managing Conversation Context&lt;/a&gt;. &lt;/p&gt;
     * @param botName The name of the Amazon Lex bot. (required)
     * @param botAlias The alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PostTextResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public PostTextResponse postText(String botName, String botAlias, String userId, PostTextRequest postTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PostTextResponse> localVarResp = postTextWithHttpInfo(botName, botAlias, userId, postTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. &lt;/p&gt; &lt;p&gt; In response, Amazon Lex returns the next &lt;code&gt;message&lt;/code&gt; to convey to the user an optional &lt;code&gt;responseCard&lt;/code&gt; to display. Consider the following example messages: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For a user input \&quot;I would like a pizza\&quot;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \&quot;What size pizza would you like?\&quot; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \&quot;Proceed with the pizza order?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user replies to a confirmation prompt with a \&quot;yes\&quot;, Amazon Lex might return a conclusion statement: \&quot;Thank you, your cheese pizza has been ordered.\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \&quot;yes\&quot; or \&quot;no\&quot; user response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the &lt;code&gt;slotToElicit&lt;/code&gt;, &lt;code&gt;dialogState&lt;/code&gt;, &lt;code&gt;intentName&lt;/code&gt;, and &lt;code&gt;slots&lt;/code&gt; fields in the response. Consider the following examples: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the message is to elicit slot data, Amazon Lex returns the following context information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;dialogState&lt;/code&gt; set to ElicitSlot &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;intentName&lt;/code&gt; set to the intent name in the current context &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slotToElicit&lt;/code&gt; set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slots&lt;/code&gt; set to a map of slots, configured for the intent, with currently known values &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;dialogState&lt;/code&gt; is set to ConfirmIntent and &lt;code&gt;SlotToElicit&lt;/code&gt; is set to null. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the &lt;code&gt;dialogState&lt;/code&gt; is set to ElicitIntent and &lt;code&gt;slotToElicit&lt;/code&gt; is set to null. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\&quot;&gt;Managing Conversation Context&lt;/a&gt;. &lt;/p&gt;
     * @param botName The name of the Amazon Lex bot. (required)
     * @param botAlias The alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PostTextResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PostTextResponse> postTextWithHttpInfo(String botName, String botAlias, String userId, PostTextRequest postTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = postTextValidateBeforeCall(botName, botAlias, userId, postTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PostTextResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot. &lt;/p&gt; &lt;p&gt; In response, Amazon Lex returns the next &lt;code&gt;message&lt;/code&gt; to convey to the user an optional &lt;code&gt;responseCard&lt;/code&gt; to display. Consider the following example messages: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; For a user input \&quot;I would like a pizza\&quot;, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): \&quot;What size pizza would you like?\&quot; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation \&quot;Proceed with the pizza order?\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; After the user replies to a confirmation prompt with a \&quot;yes\&quot;, Amazon Lex might return a conclusion statement: \&quot;Thank you, your cheese pizza has been ordered.\&quot;. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; Not all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a \&quot;yes\&quot; or \&quot;no\&quot; user response. In addition to the &lt;code&gt;message&lt;/code&gt;, Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the &lt;code&gt;slotToElicit&lt;/code&gt;, &lt;code&gt;dialogState&lt;/code&gt;, &lt;code&gt;intentName&lt;/code&gt;, and &lt;code&gt;slots&lt;/code&gt; fields in the response. Consider the following examples: &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the message is to elicit slot data, Amazon Lex returns the following context information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;dialogState&lt;/code&gt; set to ElicitSlot &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;intentName&lt;/code&gt; set to the intent name in the current context &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slotToElicit&lt;/code&gt; set to the slot name for which the &lt;code&gt;message&lt;/code&gt; is eliciting information &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;slots&lt;/code&gt; set to a map of slots, configured for the intent, with currently known values &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; If the message is a confirmation prompt, the &lt;code&gt;dialogState&lt;/code&gt; is set to ConfirmIntent and &lt;code&gt;SlotToElicit&lt;/code&gt; is set to null. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the &lt;code&gt;dialogState&lt;/code&gt; is set to ElicitIntent and &lt;code&gt;slotToElicit&lt;/code&gt; is set to null. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt; In addition, Amazon Lex also returns your application-specific &lt;code&gt;sessionAttributes&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\&quot;&gt;Managing Conversation Context&lt;/a&gt;. &lt;/p&gt;
     * @param botName The name of the Amazon Lex bot. (required)
     * @param botAlias The alias of the Amazon Lex bot. (required)
     * @param userId &lt;p&gt;The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot. At runtime, each request must contain the &lt;code&gt;userID&lt;/code&gt; field.&lt;/p&gt; &lt;p&gt;To decide the user ID to use for your application, consider the following factors.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The &lt;code&gt;userID&lt;/code&gt; field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;A user can&#39;t have two independent conversations with two different versions of the same bot. For example, a user can&#39;t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; (required)
     * @param postTextRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> BadGatewayException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> LoopDetectedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTextAsync(String botName, String botAlias, String userId, PostTextRequest postTextRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PostTextResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTextValidateBeforeCall(botName, botAlias, userId, postTextRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PostTextResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSession
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param putSessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accept &lt;p&gt;The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech is returned as &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/mpeg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/ogg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/pcm&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/_*&lt;/code&gt; (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BadGatewayException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSessionCall(String botName, String botAlias, String userId, PutSessionRequest putSessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSessionRequest;

        // create path and map variables
        String localVarPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session"
            .replace("{" + "botName" + "}", localVarApiClient.escapeString(botName.toString()))
            .replace("{" + "botAlias" + "}", localVarApiClient.escapeString(botAlias.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSessionValidateBeforeCall(String botName, String botAlias, String userId, PutSessionRequest putSessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'botName' is set
        if (botName == null) {
            throw new ApiException("Missing the required parameter 'botName' when calling putSession(Async)");
        }

        // verify the required parameter 'botAlias' is set
        if (botAlias == null) {
            throw new ApiException("Missing the required parameter 'botAlias' when calling putSession(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putSession(Async)");
        }

        // verify the required parameter 'putSessionRequest' is set
        if (putSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'putSessionRequest' when calling putSession(Async)");
        }

        return putSessionCall(botName, botAlias, userId, putSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accept, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\&quot;&gt;Managing Sessions&lt;/a&gt;.&lt;/p&gt;
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param putSessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accept &lt;p&gt;The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech is returned as &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/mpeg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/ogg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/pcm&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/_*&lt;/code&gt; (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return PutSessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BadGatewayException </td><td>  -  </td></tr>
     </table>
     */
    public PutSessionResponse putSession(String botName, String botAlias, String userId, PutSessionRequest putSessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accept) throws ApiException {
        ApiResponse<PutSessionResponse> localVarResp = putSessionWithHttpInfo(botName, botAlias, userId, putSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accept);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\&quot;&gt;Managing Sessions&lt;/a&gt;.&lt;/p&gt;
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param putSessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accept &lt;p&gt;The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech is returned as &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/mpeg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/ogg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/pcm&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/_*&lt;/code&gt; (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @return ApiResponse&lt;PutSessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BadGatewayException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutSessionResponse> putSessionWithHttpInfo(String botName, String botAlias, String userId, PutSessionRequest putSessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accept) throws ApiException {
        okhttp3.Call localVarCall = putSessionValidateBeforeCall(botName, botAlias, userId, putSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accept, null);
        Type localVarReturnType = new TypeToken<PutSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\&quot;&gt;Managing Sessions&lt;/a&gt;.&lt;/p&gt;
     * @param botName The name of the bot that contains the session data. (required)
     * @param botAlias The alias in use for the bot that contains the session data. (required)
     * @param userId The ID of the client application user. Amazon Lex uses this to identify a user&#39;s conversation with your bot.  (required)
     * @param putSessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param accept &lt;p&gt;The message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt;, Amazon Lex returns text in the response.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value begins with &lt;code&gt;audio/&lt;/code&gt;, Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify &lt;code&gt;audio/mpeg&lt;/code&gt; as the value, Amazon Lex returns speech in the MPEG format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If the value is &lt;code&gt;audio/pcm&lt;/code&gt;, the speech is returned as &lt;code&gt;audio/pcm&lt;/code&gt; in 16-bit, little endian format.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The following are the accepted values:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/mpeg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/ogg&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/pcm&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;audio/_*&lt;/code&gt; (defaults to mpeg)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;text/plain; charset&#x3D;utf-8&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> InternalFailureException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotAcceptableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DependencyFailedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BadGatewayException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSessionAsync(String botName, String botAlias, String userId, PutSessionRequest putSessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String accept, final ApiCallback<PutSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSessionValidateBeforeCall(botName, botAlias, userId, putSessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, accept, _callback);
        Type localVarReturnType = new TypeToken<PutSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
