/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenericAttachment {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SUB_TITLE = "subTitle";
  @SerializedName(SERIALIZED_NAME_SUB_TITLE)
  private String subTitle;

  public static final String SERIALIZED_NAME_ATTACHMENT_LINK_URL = "attachmentLinkUrl";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_LINK_URL)
  private String attachmentLinkUrl;

  public static final String SERIALIZED_NAME_IMAGE_URL = "imageUrl";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_BUTTONS = "buttons";
  @SerializedName(SERIALIZED_NAME_BUTTONS)
  private List buttons;

  public GenericAttachment() {
  }

  public GenericAttachment title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GenericAttachment subTitle(String subTitle) {
    this.subTitle = subTitle;
    return this;
  }

  /**
   * Get subTitle
   * @return subTitle
   */
  @javax.annotation.Nullable
  public String getSubTitle() {
    return subTitle;
  }

  public void setSubTitle(String subTitle) {
    this.subTitle = subTitle;
  }


  public GenericAttachment attachmentLinkUrl(String attachmentLinkUrl) {
    this.attachmentLinkUrl = attachmentLinkUrl;
    return this;
  }

  /**
   * Get attachmentLinkUrl
   * @return attachmentLinkUrl
   */
  @javax.annotation.Nullable
  public String getAttachmentLinkUrl() {
    return attachmentLinkUrl;
  }

  public void setAttachmentLinkUrl(String attachmentLinkUrl) {
    this.attachmentLinkUrl = attachmentLinkUrl;
  }


  public GenericAttachment imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public GenericAttachment buttons(List buttons) {
    this.buttons = buttons;
    return this;
  }

  /**
   * Get buttons
   * @return buttons
   */
  @javax.annotation.Nullable
  public List getButtons() {
    return buttons;
  }

  public void setButtons(List buttons) {
    this.buttons = buttons;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenericAttachment genericAttachment = (GenericAttachment) o;
    return Objects.equals(this.title, genericAttachment.title) &&
        Objects.equals(this.subTitle, genericAttachment.subTitle) &&
        Objects.equals(this.attachmentLinkUrl, genericAttachment.attachmentLinkUrl) &&
        Objects.equals(this.imageUrl, genericAttachment.imageUrl) &&
        Objects.equals(this.buttons, genericAttachment.buttons);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, subTitle, attachmentLinkUrl, imageUrl, buttons);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenericAttachment {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    subTitle: ").append(toIndentedString(subTitle)).append("\n");
    sb.append("    attachmentLinkUrl: ").append(toIndentedString(attachmentLinkUrl)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    buttons: ").append(toIndentedString(buttons)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("subTitle");
    openapiFields.add("attachmentLinkUrl");
    openapiFields.add("imageUrl");
    openapiFields.add("buttons");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenericAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenericAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenericAttachment is not found in the empty JSON string", GenericAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenericAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenericAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `title`
      if (jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("title"));
      }
      // validate the optional field `subTitle`
      if (jsonObj.get("subTitle") != null && !jsonObj.get("subTitle").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("subTitle"));
      }
      // validate the optional field `attachmentLinkUrl`
      if (jsonObj.get("attachmentLinkUrl") != null && !jsonObj.get("attachmentLinkUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("attachmentLinkUrl"));
      }
      // validate the optional field `imageUrl`
      if (jsonObj.get("imageUrl") != null && !jsonObj.get("imageUrl").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("imageUrl"));
      }
      // validate the optional field `buttons`
      if (jsonObj.get("buttons") != null && !jsonObj.get("buttons").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("buttons"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenericAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenericAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenericAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenericAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<GenericAttachment>() {
           @Override
           public void write(JsonWriter out, GenericAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenericAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenericAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenericAttachment
   * @throws IOException if the JSON string is invalid with respect to GenericAttachment
   */
  public static GenericAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenericAttachment.class);
  }

  /**
   * Convert an instance of GenericAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

