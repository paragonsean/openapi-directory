/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.PredictedIntentNluIntentConfidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An intent that Amazon Lex suggests satisfies the user&#39;s intent. Includes the name of the intent, the confidence that Amazon Lex has that the user&#39;s intent is satisfied, and the slots defined for the intent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictedIntent {
  public static final String SERIALIZED_NAME_INTENT_NAME = "intentName";
  @SerializedName(SERIALIZED_NAME_INTENT_NAME)
  private String intentName;

  public static final String SERIALIZED_NAME_NLU_INTENT_CONFIDENCE = "nluIntentConfidence";
  @SerializedName(SERIALIZED_NAME_NLU_INTENT_CONFIDENCE)
  private PredictedIntentNluIntentConfidence nluIntentConfidence;

  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private Map slots;

  public PredictedIntent() {
  }

  public PredictedIntent intentName(String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * Get intentName
   * @return intentName
   */
  @javax.annotation.Nullable
  public String getIntentName() {
    return intentName;
  }

  public void setIntentName(String intentName) {
    this.intentName = intentName;
  }


  public PredictedIntent nluIntentConfidence(PredictedIntentNluIntentConfidence nluIntentConfidence) {
    this.nluIntentConfidence = nluIntentConfidence;
    return this;
  }

  /**
   * Get nluIntentConfidence
   * @return nluIntentConfidence
   */
  @javax.annotation.Nullable
  public PredictedIntentNluIntentConfidence getNluIntentConfidence() {
    return nluIntentConfidence;
  }

  public void setNluIntentConfidence(PredictedIntentNluIntentConfidence nluIntentConfidence) {
    this.nluIntentConfidence = nluIntentConfidence;
  }


  public PredictedIntent slots(Map slots) {
    this.slots = slots;
    return this;
  }

  /**
   * Get slots
   * @return slots
   */
  @javax.annotation.Nullable
  public Map getSlots() {
    return slots;
  }

  public void setSlots(Map slots) {
    this.slots = slots;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictedIntent predictedIntent = (PredictedIntent) o;
    return Objects.equals(this.intentName, predictedIntent.intentName) &&
        Objects.equals(this.nluIntentConfidence, predictedIntent.nluIntentConfidence) &&
        Objects.equals(this.slots, predictedIntent.slots);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intentName, nluIntentConfidence, slots);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictedIntent {\n");
    sb.append("    intentName: ").append(toIndentedString(intentName)).append("\n");
    sb.append("    nluIntentConfidence: ").append(toIndentedString(nluIntentConfidence)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intentName");
    openapiFields.add("nluIntentConfidence");
    openapiFields.add("slots");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictedIntent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictedIntent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictedIntent is not found in the empty JSON string", PredictedIntent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictedIntent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictedIntent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `intentName`
      if (jsonObj.get("intentName") != null && !jsonObj.get("intentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("intentName"));
      }
      // validate the optional field `nluIntentConfidence`
      if (jsonObj.get("nluIntentConfidence") != null && !jsonObj.get("nluIntentConfidence").isJsonNull()) {
        PredictedIntentNluIntentConfidence.validateJsonElement(jsonObj.get("nluIntentConfidence"));
      }
      // validate the optional field `slots`
      if (jsonObj.get("slots") != null && !jsonObj.get("slots").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("slots"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictedIntent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictedIntent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictedIntent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictedIntent.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictedIntent>() {
           @Override
           public void write(JsonWriter out, PredictedIntent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictedIntent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictedIntent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictedIntent
   * @throws IOException if the JSON string is invalid with respect to PredictedIntent
   */
  public static PredictedIntent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictedIntent.class);
  }

  /**
   * Convert an instance of PredictedIntent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

