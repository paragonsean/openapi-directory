/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DialogState;
import org.openapitools.client.model.MessageFormatType;
import org.openapitools.client.model.PostTextResponseNluIntentConfidence;
import org.openapitools.client.model.PostTextResponseResponseCard;
import org.openapitools.client.model.PostTextResponseSentimentResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostTextResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostTextResponse {
  public static final String SERIALIZED_NAME_INTENT_NAME = "intentName";
  @SerializedName(SERIALIZED_NAME_INTENT_NAME)
  private String intentName;

  public static final String SERIALIZED_NAME_NLU_INTENT_CONFIDENCE = "nluIntentConfidence";
  @SerializedName(SERIALIZED_NAME_NLU_INTENT_CONFIDENCE)
  private PostTextResponseNluIntentConfidence nluIntentConfidence;

  public static final String SERIALIZED_NAME_ALTERNATIVE_INTENTS = "alternativeIntents";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_INTENTS)
  private List alternativeIntents;

  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private Map slots;

  public static final String SERIALIZED_NAME_SESSION_ATTRIBUTES = "sessionAttributes";
  @SerializedName(SERIALIZED_NAME_SESSION_ATTRIBUTES)
  private Map sessionAttributes;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SENTIMENT_RESPONSE = "sentimentResponse";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_RESPONSE)
  private PostTextResponseSentimentResponse sentimentResponse;

  public static final String SERIALIZED_NAME_MESSAGE_FORMAT = "messageFormat";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FORMAT)
  private MessageFormatType messageFormat;

  public static final String SERIALIZED_NAME_DIALOG_STATE = "dialogState";
  @SerializedName(SERIALIZED_NAME_DIALOG_STATE)
  private DialogState dialogState;

  public static final String SERIALIZED_NAME_SLOT_TO_ELICIT = "slotToElicit";
  @SerializedName(SERIALIZED_NAME_SLOT_TO_ELICIT)
  private String slotToElicit;

  public static final String SERIALIZED_NAME_RESPONSE_CARD = "responseCard";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CARD)
  private PostTextResponseResponseCard responseCard;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_BOT_VERSION = "botVersion";
  @SerializedName(SERIALIZED_NAME_BOT_VERSION)
  private String botVersion;

  public static final String SERIALIZED_NAME_ACTIVE_CONTEXTS = "activeContexts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTEXTS)
  private List activeContexts;

  public PostTextResponse() {
  }

  public PostTextResponse intentName(String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * Get intentName
   * @return intentName
   */
  @javax.annotation.Nullable
  public String getIntentName() {
    return intentName;
  }

  public void setIntentName(String intentName) {
    this.intentName = intentName;
  }


  public PostTextResponse nluIntentConfidence(PostTextResponseNluIntentConfidence nluIntentConfidence) {
    this.nluIntentConfidence = nluIntentConfidence;
    return this;
  }

  /**
   * Get nluIntentConfidence
   * @return nluIntentConfidence
   */
  @javax.annotation.Nullable
  public PostTextResponseNluIntentConfidence getNluIntentConfidence() {
    return nluIntentConfidence;
  }

  public void setNluIntentConfidence(PostTextResponseNluIntentConfidence nluIntentConfidence) {
    this.nluIntentConfidence = nluIntentConfidence;
  }


  public PostTextResponse alternativeIntents(List alternativeIntents) {
    this.alternativeIntents = alternativeIntents;
    return this;
  }

  /**
   * Get alternativeIntents
   * @return alternativeIntents
   */
  @javax.annotation.Nullable
  public List getAlternativeIntents() {
    return alternativeIntents;
  }

  public void setAlternativeIntents(List alternativeIntents) {
    this.alternativeIntents = alternativeIntents;
  }


  public PostTextResponse slots(Map slots) {
    this.slots = slots;
    return this;
  }

  /**
   * Get slots
   * @return slots
   */
  @javax.annotation.Nullable
  public Map getSlots() {
    return slots;
  }

  public void setSlots(Map slots) {
    this.slots = slots;
  }


  public PostTextResponse sessionAttributes(Map sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
    return this;
  }

  /**
   * Get sessionAttributes
   * @return sessionAttributes
   */
  @javax.annotation.Nullable
  public Map getSessionAttributes() {
    return sessionAttributes;
  }

  public void setSessionAttributes(Map sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
  }


  public PostTextResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public PostTextResponse sentimentResponse(PostTextResponseSentimentResponse sentimentResponse) {
    this.sentimentResponse = sentimentResponse;
    return this;
  }

  /**
   * Get sentimentResponse
   * @return sentimentResponse
   */
  @javax.annotation.Nullable
  public PostTextResponseSentimentResponse getSentimentResponse() {
    return sentimentResponse;
  }

  public void setSentimentResponse(PostTextResponseSentimentResponse sentimentResponse) {
    this.sentimentResponse = sentimentResponse;
  }


  public PostTextResponse messageFormat(MessageFormatType messageFormat) {
    this.messageFormat = messageFormat;
    return this;
  }

  /**
   * Get messageFormat
   * @return messageFormat
   */
  @javax.annotation.Nullable
  public MessageFormatType getMessageFormat() {
    return messageFormat;
  }

  public void setMessageFormat(MessageFormatType messageFormat) {
    this.messageFormat = messageFormat;
  }


  public PostTextResponse dialogState(DialogState dialogState) {
    this.dialogState = dialogState;
    return this;
  }

  /**
   * Get dialogState
   * @return dialogState
   */
  @javax.annotation.Nullable
  public DialogState getDialogState() {
    return dialogState;
  }

  public void setDialogState(DialogState dialogState) {
    this.dialogState = dialogState;
  }


  public PostTextResponse slotToElicit(String slotToElicit) {
    this.slotToElicit = slotToElicit;
    return this;
  }

  /**
   * Get slotToElicit
   * @return slotToElicit
   */
  @javax.annotation.Nullable
  public String getSlotToElicit() {
    return slotToElicit;
  }

  public void setSlotToElicit(String slotToElicit) {
    this.slotToElicit = slotToElicit;
  }


  public PostTextResponse responseCard(PostTextResponseResponseCard responseCard) {
    this.responseCard = responseCard;
    return this;
  }

  /**
   * Get responseCard
   * @return responseCard
   */
  @javax.annotation.Nullable
  public PostTextResponseResponseCard getResponseCard() {
    return responseCard;
  }

  public void setResponseCard(PostTextResponseResponseCard responseCard) {
    this.responseCard = responseCard;
  }


  public PostTextResponse sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public PostTextResponse botVersion(String botVersion) {
    this.botVersion = botVersion;
    return this;
  }

  /**
   * Get botVersion
   * @return botVersion
   */
  @javax.annotation.Nullable
  public String getBotVersion() {
    return botVersion;
  }

  public void setBotVersion(String botVersion) {
    this.botVersion = botVersion;
  }


  public PostTextResponse activeContexts(List activeContexts) {
    this.activeContexts = activeContexts;
    return this;
  }

  /**
   * Get activeContexts
   * @return activeContexts
   */
  @javax.annotation.Nullable
  public List getActiveContexts() {
    return activeContexts;
  }

  public void setActiveContexts(List activeContexts) {
    this.activeContexts = activeContexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostTextResponse postTextResponse = (PostTextResponse) o;
    return Objects.equals(this.intentName, postTextResponse.intentName) &&
        Objects.equals(this.nluIntentConfidence, postTextResponse.nluIntentConfidence) &&
        Objects.equals(this.alternativeIntents, postTextResponse.alternativeIntents) &&
        Objects.equals(this.slots, postTextResponse.slots) &&
        Objects.equals(this.sessionAttributes, postTextResponse.sessionAttributes) &&
        Objects.equals(this.message, postTextResponse.message) &&
        Objects.equals(this.sentimentResponse, postTextResponse.sentimentResponse) &&
        Objects.equals(this.messageFormat, postTextResponse.messageFormat) &&
        Objects.equals(this.dialogState, postTextResponse.dialogState) &&
        Objects.equals(this.slotToElicit, postTextResponse.slotToElicit) &&
        Objects.equals(this.responseCard, postTextResponse.responseCard) &&
        Objects.equals(this.sessionId, postTextResponse.sessionId) &&
        Objects.equals(this.botVersion, postTextResponse.botVersion) &&
        Objects.equals(this.activeContexts, postTextResponse.activeContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intentName, nluIntentConfidence, alternativeIntents, slots, sessionAttributes, message, sentimentResponse, messageFormat, dialogState, slotToElicit, responseCard, sessionId, botVersion, activeContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostTextResponse {\n");
    sb.append("    intentName: ").append(toIndentedString(intentName)).append("\n");
    sb.append("    nluIntentConfidence: ").append(toIndentedString(nluIntentConfidence)).append("\n");
    sb.append("    alternativeIntents: ").append(toIndentedString(alternativeIntents)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    sessionAttributes: ").append(toIndentedString(sessionAttributes)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    sentimentResponse: ").append(toIndentedString(sentimentResponse)).append("\n");
    sb.append("    messageFormat: ").append(toIndentedString(messageFormat)).append("\n");
    sb.append("    dialogState: ").append(toIndentedString(dialogState)).append("\n");
    sb.append("    slotToElicit: ").append(toIndentedString(slotToElicit)).append("\n");
    sb.append("    responseCard: ").append(toIndentedString(responseCard)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    botVersion: ").append(toIndentedString(botVersion)).append("\n");
    sb.append("    activeContexts: ").append(toIndentedString(activeContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intentName");
    openapiFields.add("nluIntentConfidence");
    openapiFields.add("alternativeIntents");
    openapiFields.add("slots");
    openapiFields.add("sessionAttributes");
    openapiFields.add("message");
    openapiFields.add("sentimentResponse");
    openapiFields.add("messageFormat");
    openapiFields.add("dialogState");
    openapiFields.add("slotToElicit");
    openapiFields.add("responseCard");
    openapiFields.add("sessionId");
    openapiFields.add("botVersion");
    openapiFields.add("activeContexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostTextResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostTextResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostTextResponse is not found in the empty JSON string", PostTextResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostTextResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostTextResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `intentName`
      if (jsonObj.get("intentName") != null && !jsonObj.get("intentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("intentName"));
      }
      // validate the optional field `nluIntentConfidence`
      if (jsonObj.get("nluIntentConfidence") != null && !jsonObj.get("nluIntentConfidence").isJsonNull()) {
        PostTextResponseNluIntentConfidence.validateJsonElement(jsonObj.get("nluIntentConfidence"));
      }
      // validate the optional field `alternativeIntents`
      if (jsonObj.get("alternativeIntents") != null && !jsonObj.get("alternativeIntents").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("alternativeIntents"));
      }
      // validate the optional field `slots`
      if (jsonObj.get("slots") != null && !jsonObj.get("slots").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("slots"));
      }
      // validate the optional field `sessionAttributes`
      if (jsonObj.get("sessionAttributes") != null && !jsonObj.get("sessionAttributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("sessionAttributes"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `sentimentResponse`
      if (jsonObj.get("sentimentResponse") != null && !jsonObj.get("sentimentResponse").isJsonNull()) {
        PostTextResponseSentimentResponse.validateJsonElement(jsonObj.get("sentimentResponse"));
      }
      // validate the optional field `messageFormat`
      if (jsonObj.get("messageFormat") != null && !jsonObj.get("messageFormat").isJsonNull()) {
        MessageFormatType.validateJsonElement(jsonObj.get("messageFormat"));
      }
      // validate the optional field `dialogState`
      if (jsonObj.get("dialogState") != null && !jsonObj.get("dialogState").isJsonNull()) {
        DialogState.validateJsonElement(jsonObj.get("dialogState"));
      }
      // validate the optional field `slotToElicit`
      if (jsonObj.get("slotToElicit") != null && !jsonObj.get("slotToElicit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotToElicit"));
      }
      // validate the optional field `responseCard`
      if (jsonObj.get("responseCard") != null && !jsonObj.get("responseCard").isJsonNull()) {
        PostTextResponseResponseCard.validateJsonElement(jsonObj.get("responseCard"));
      }
      // validate the optional field `sessionId`
      if (jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sessionId"));
      }
      // validate the optional field `botVersion`
      if (jsonObj.get("botVersion") != null && !jsonObj.get("botVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botVersion"));
      }
      // validate the optional field `activeContexts`
      if (jsonObj.get("activeContexts") != null && !jsonObj.get("activeContexts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("activeContexts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostTextResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostTextResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostTextResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostTextResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PostTextResponse>() {
           @Override
           public void write(JsonWriter out, PostTextResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostTextResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostTextResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostTextResponse
   * @throws IOException if the JSON string is invalid with respect to PostTextResponse
   */
  public static PostTextResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostTextResponse.class);
  }

  /**
   * Convert an instance of PostTextResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

