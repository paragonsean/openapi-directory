/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DialogActionType;
import org.openapitools.client.model.FulfillmentState;
import org.openapitools.client.model.MessageFormatType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSessionResponseDialogAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSessionResponseDialogAction {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private DialogActionType type;

  public static final String SERIALIZED_NAME_INTENT_NAME = "intentName";
  @SerializedName(SERIALIZED_NAME_INTENT_NAME)
  private String intentName;

  public static final String SERIALIZED_NAME_SLOTS = "slots";
  @SerializedName(SERIALIZED_NAME_SLOTS)
  private Map slots;

  public static final String SERIALIZED_NAME_SLOT_TO_ELICIT = "slotToElicit";
  @SerializedName(SERIALIZED_NAME_SLOT_TO_ELICIT)
  private String slotToElicit;

  public static final String SERIALIZED_NAME_FULFILLMENT_STATE = "fulfillmentState";
  @SerializedName(SERIALIZED_NAME_FULFILLMENT_STATE)
  private FulfillmentState fulfillmentState;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MESSAGE_FORMAT = "messageFormat";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FORMAT)
  private MessageFormatType messageFormat;

  public GetSessionResponseDialogAction() {
  }

  public GetSessionResponseDialogAction type(DialogActionType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public DialogActionType getType() {
    return type;
  }

  public void setType(DialogActionType type) {
    this.type = type;
  }


  public GetSessionResponseDialogAction intentName(String intentName) {
    this.intentName = intentName;
    return this;
  }

  /**
   * Get intentName
   * @return intentName
   */
  @javax.annotation.Nullable
  public String getIntentName() {
    return intentName;
  }

  public void setIntentName(String intentName) {
    this.intentName = intentName;
  }


  public GetSessionResponseDialogAction slots(Map slots) {
    this.slots = slots;
    return this;
  }

  /**
   * Get slots
   * @return slots
   */
  @javax.annotation.Nullable
  public Map getSlots() {
    return slots;
  }

  public void setSlots(Map slots) {
    this.slots = slots;
  }


  public GetSessionResponseDialogAction slotToElicit(String slotToElicit) {
    this.slotToElicit = slotToElicit;
    return this;
  }

  /**
   * Get slotToElicit
   * @return slotToElicit
   */
  @javax.annotation.Nullable
  public String getSlotToElicit() {
    return slotToElicit;
  }

  public void setSlotToElicit(String slotToElicit) {
    this.slotToElicit = slotToElicit;
  }


  public GetSessionResponseDialogAction fulfillmentState(FulfillmentState fulfillmentState) {
    this.fulfillmentState = fulfillmentState;
    return this;
  }

  /**
   * Get fulfillmentState
   * @return fulfillmentState
   */
  @javax.annotation.Nullable
  public FulfillmentState getFulfillmentState() {
    return fulfillmentState;
  }

  public void setFulfillmentState(FulfillmentState fulfillmentState) {
    this.fulfillmentState = fulfillmentState;
  }


  public GetSessionResponseDialogAction message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public GetSessionResponseDialogAction messageFormat(MessageFormatType messageFormat) {
    this.messageFormat = messageFormat;
    return this;
  }

  /**
   * Get messageFormat
   * @return messageFormat
   */
  @javax.annotation.Nullable
  public MessageFormatType getMessageFormat() {
    return messageFormat;
  }

  public void setMessageFormat(MessageFormatType messageFormat) {
    this.messageFormat = messageFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSessionResponseDialogAction getSessionResponseDialogAction = (GetSessionResponseDialogAction) o;
    return Objects.equals(this.type, getSessionResponseDialogAction.type) &&
        Objects.equals(this.intentName, getSessionResponseDialogAction.intentName) &&
        Objects.equals(this.slots, getSessionResponseDialogAction.slots) &&
        Objects.equals(this.slotToElicit, getSessionResponseDialogAction.slotToElicit) &&
        Objects.equals(this.fulfillmentState, getSessionResponseDialogAction.fulfillmentState) &&
        Objects.equals(this.message, getSessionResponseDialogAction.message) &&
        Objects.equals(this.messageFormat, getSessionResponseDialogAction.messageFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, intentName, slots, slotToElicit, fulfillmentState, message, messageFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSessionResponseDialogAction {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    intentName: ").append(toIndentedString(intentName)).append("\n");
    sb.append("    slots: ").append(toIndentedString(slots)).append("\n");
    sb.append("    slotToElicit: ").append(toIndentedString(slotToElicit)).append("\n");
    sb.append("    fulfillmentState: ").append(toIndentedString(fulfillmentState)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messageFormat: ").append(toIndentedString(messageFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("intentName");
    openapiFields.add("slots");
    openapiFields.add("slotToElicit");
    openapiFields.add("fulfillmentState");
    openapiFields.add("message");
    openapiFields.add("messageFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSessionResponseDialogAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSessionResponseDialogAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSessionResponseDialogAction is not found in the empty JSON string", GetSessionResponseDialogAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSessionResponseDialogAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSessionResponseDialogAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetSessionResponseDialogAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `type`
      DialogActionType.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `intentName`
      if (jsonObj.get("intentName") != null && !jsonObj.get("intentName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("intentName"));
      }
      // validate the optional field `slots`
      if (jsonObj.get("slots") != null && !jsonObj.get("slots").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("slots"));
      }
      // validate the optional field `slotToElicit`
      if (jsonObj.get("slotToElicit") != null && !jsonObj.get("slotToElicit").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("slotToElicit"));
      }
      // validate the optional field `fulfillmentState`
      if (jsonObj.get("fulfillmentState") != null && !jsonObj.get("fulfillmentState").isJsonNull()) {
        FulfillmentState.validateJsonElement(jsonObj.get("fulfillmentState"));
      }
      // validate the optional field `message`
      if (jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("message"));
      }
      // validate the optional field `messageFormat`
      if (jsonObj.get("messageFormat") != null && !jsonObj.get("messageFormat").isJsonNull()) {
        MessageFormatType.validateJsonElement(jsonObj.get("messageFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSessionResponseDialogAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSessionResponseDialogAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSessionResponseDialogAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSessionResponseDialogAction.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSessionResponseDialogAction>() {
           @Override
           public void write(JsonWriter out, GetSessionResponseDialogAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSessionResponseDialogAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSessionResponseDialogAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSessionResponseDialogAction
   * @throws IOException if the JSON string is invalid with respect to GetSessionResponseDialogAction
   */
  public static GetSessionResponseDialogAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSessionResponseDialogAction.class);
  }

  /**
   * Convert an instance of GetSessionResponseDialogAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

