/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GetSessionResponseDialogAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSessionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSessionResponse {
  public static final String SERIALIZED_NAME_RECENT_INTENT_SUMMARY_VIEW = "recentIntentSummaryView";
  @SerializedName(SERIALIZED_NAME_RECENT_INTENT_SUMMARY_VIEW)
  private List recentIntentSummaryView;

  public static final String SERIALIZED_NAME_SESSION_ATTRIBUTES = "sessionAttributes";
  @SerializedName(SERIALIZED_NAME_SESSION_ATTRIBUTES)
  private Map sessionAttributes;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_DIALOG_ACTION = "dialogAction";
  @SerializedName(SERIALIZED_NAME_DIALOG_ACTION)
  private GetSessionResponseDialogAction dialogAction;

  public static final String SERIALIZED_NAME_ACTIVE_CONTEXTS = "activeContexts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTEXTS)
  private List activeContexts;

  public GetSessionResponse() {
  }

  public GetSessionResponse recentIntentSummaryView(List recentIntentSummaryView) {
    this.recentIntentSummaryView = recentIntentSummaryView;
    return this;
  }

  /**
   * Get recentIntentSummaryView
   * @return recentIntentSummaryView
   */
  @javax.annotation.Nullable
  public List getRecentIntentSummaryView() {
    return recentIntentSummaryView;
  }

  public void setRecentIntentSummaryView(List recentIntentSummaryView) {
    this.recentIntentSummaryView = recentIntentSummaryView;
  }


  public GetSessionResponse sessionAttributes(Map sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
    return this;
  }

  /**
   * Get sessionAttributes
   * @return sessionAttributes
   */
  @javax.annotation.Nullable
  public Map getSessionAttributes() {
    return sessionAttributes;
  }

  public void setSessionAttributes(Map sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
  }


  public GetSessionResponse sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public GetSessionResponse dialogAction(GetSessionResponseDialogAction dialogAction) {
    this.dialogAction = dialogAction;
    return this;
  }

  /**
   * Get dialogAction
   * @return dialogAction
   */
  @javax.annotation.Nullable
  public GetSessionResponseDialogAction getDialogAction() {
    return dialogAction;
  }

  public void setDialogAction(GetSessionResponseDialogAction dialogAction) {
    this.dialogAction = dialogAction;
  }


  public GetSessionResponse activeContexts(List activeContexts) {
    this.activeContexts = activeContexts;
    return this;
  }

  /**
   * Get activeContexts
   * @return activeContexts
   */
  @javax.annotation.Nullable
  public List getActiveContexts() {
    return activeContexts;
  }

  public void setActiveContexts(List activeContexts) {
    this.activeContexts = activeContexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSessionResponse getSessionResponse = (GetSessionResponse) o;
    return Objects.equals(this.recentIntentSummaryView, getSessionResponse.recentIntentSummaryView) &&
        Objects.equals(this.sessionAttributes, getSessionResponse.sessionAttributes) &&
        Objects.equals(this.sessionId, getSessionResponse.sessionId) &&
        Objects.equals(this.dialogAction, getSessionResponse.dialogAction) &&
        Objects.equals(this.activeContexts, getSessionResponse.activeContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recentIntentSummaryView, sessionAttributes, sessionId, dialogAction, activeContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSessionResponse {\n");
    sb.append("    recentIntentSummaryView: ").append(toIndentedString(recentIntentSummaryView)).append("\n");
    sb.append("    sessionAttributes: ").append(toIndentedString(sessionAttributes)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    dialogAction: ").append(toIndentedString(dialogAction)).append("\n");
    sb.append("    activeContexts: ").append(toIndentedString(activeContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("recentIntentSummaryView");
    openapiFields.add("sessionAttributes");
    openapiFields.add("sessionId");
    openapiFields.add("dialogAction");
    openapiFields.add("activeContexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSessionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSessionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSessionResponse is not found in the empty JSON string", GetSessionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSessionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSessionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `recentIntentSummaryView`
      if (jsonObj.get("recentIntentSummaryView") != null && !jsonObj.get("recentIntentSummaryView").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("recentIntentSummaryView"));
      }
      // validate the optional field `sessionAttributes`
      if (jsonObj.get("sessionAttributes") != null && !jsonObj.get("sessionAttributes").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("sessionAttributes"));
      }
      // validate the optional field `sessionId`
      if (jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sessionId"));
      }
      // validate the optional field `dialogAction`
      if (jsonObj.get("dialogAction") != null && !jsonObj.get("dialogAction").isJsonNull()) {
        GetSessionResponseDialogAction.validateJsonElement(jsonObj.get("dialogAction"));
      }
      // validate the optional field `activeContexts`
      if (jsonObj.get("activeContexts") != null && !jsonObj.get("activeContexts").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("activeContexts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSessionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSessionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSessionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSessionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSessionResponse>() {
           @Override
           public void write(JsonWriter out, GetSessionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSessionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSessionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSessionResponse
   * @throws IOException if the JSON string is invalid with respect to GetSessionResponse
   */
  public static GetSessionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSessionResponse.class);
  }

  /**
   * Convert an instance of GetSessionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

