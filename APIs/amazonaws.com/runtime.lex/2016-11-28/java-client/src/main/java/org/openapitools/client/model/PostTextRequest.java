/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ActiveContext;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostTextRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostTextRequest {
  public static final String SERIALIZED_NAME_SESSION_ATTRIBUTES = "sessionAttributes";
  @SerializedName(SERIALIZED_NAME_SESSION_ATTRIBUTES)
  private Map<String, String> sessionAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_ATTRIBUTES = "requestAttributes";
  @SerializedName(SERIALIZED_NAME_REQUEST_ATTRIBUTES)
  private Map<String, String> requestAttributes = new HashMap<>();

  public static final String SERIALIZED_NAME_INPUT_TEXT = "inputText";
  @SerializedName(SERIALIZED_NAME_INPUT_TEXT)
  private String inputText;

  public static final String SERIALIZED_NAME_ACTIVE_CONTEXTS = "activeContexts";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONTEXTS)
  private List<ActiveContext> activeContexts = new ArrayList<>();

  public PostTextRequest() {
  }

  public PostTextRequest sessionAttributes(Map<String, String> sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
    return this;
  }

  public PostTextRequest putSessionAttributesItem(String key, String sessionAttributesItem) {
    if (this.sessionAttributes == null) {
      this.sessionAttributes = new HashMap<>();
    }
    this.sessionAttributes.put(key, sessionAttributesItem);
    return this;
  }

  /**
   * &lt;p&gt;Application-specific information passed between Amazon Lex and a client application.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\&quot;&gt;Setting Session Attributes&lt;/a&gt;.&lt;/p&gt;
   * @return sessionAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getSessionAttributes() {
    return sessionAttributes;
  }

  public void setSessionAttributes(Map<String, String> sessionAttributes) {
    this.sessionAttributes = sessionAttributes;
  }


  public PostTextRequest requestAttributes(Map<String, String> requestAttributes) {
    this.requestAttributes = requestAttributes;
    return this;
  }

  public PostTextRequest putRequestAttributesItem(String key, String requestAttributesItem) {
    if (this.requestAttributes == null) {
      this.requestAttributes = new HashMap<>();
    }
    this.requestAttributes.put(key, requestAttributesItem);
    return this;
  }

  /**
   * &lt;p&gt;Request-specific information passed between Amazon Lex and a client application.&lt;/p&gt; &lt;p&gt;The namespace &lt;code&gt;x-amz-lex:&lt;/code&gt; is reserved for special attributes. Don&#39;t create any request attributes with the prefix &lt;code&gt;x-amz-lex:&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\&quot;&gt;Setting Request Attributes&lt;/a&gt;.&lt;/p&gt;
   * @return requestAttributes
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestAttributes() {
    return requestAttributes;
  }

  public void setRequestAttributes(Map<String, String> requestAttributes) {
    this.requestAttributes = requestAttributes;
  }


  public PostTextRequest inputText(String inputText) {
    this.inputText = inputText;
    return this;
  }

  /**
   * The text that the user entered (Amazon Lex interprets this text).
   * @return inputText
   */
  @javax.annotation.Nonnull
  public String getInputText() {
    return inputText;
  }

  public void setInputText(String inputText) {
    this.inputText = inputText;
  }


  public PostTextRequest activeContexts(List<ActiveContext> activeContexts) {
    this.activeContexts = activeContexts;
    return this;
  }

  public PostTextRequest addActiveContextsItem(ActiveContext activeContextsItem) {
    if (this.activeContexts == null) {
      this.activeContexts = new ArrayList<>();
    }
    this.activeContexts.add(activeContextsItem);
    return this;
  }

  /**
   * &lt;p&gt;A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,&lt;/p&gt; &lt;p&gt;If you don&#39;t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.&lt;/p&gt;
   * @return activeContexts
   */
  @javax.annotation.Nullable
  public List<ActiveContext> getActiveContexts() {
    return activeContexts;
  }

  public void setActiveContexts(List<ActiveContext> activeContexts) {
    this.activeContexts = activeContexts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostTextRequest postTextRequest = (PostTextRequest) o;
    return Objects.equals(this.sessionAttributes, postTextRequest.sessionAttributes) &&
        Objects.equals(this.requestAttributes, postTextRequest.requestAttributes) &&
        Objects.equals(this.inputText, postTextRequest.inputText) &&
        Objects.equals(this.activeContexts, postTextRequest.activeContexts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sessionAttributes, requestAttributes, inputText, activeContexts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostTextRequest {\n");
    sb.append("    sessionAttributes: ").append(toIndentedString(sessionAttributes)).append("\n");
    sb.append("    requestAttributes: ").append(toIndentedString(requestAttributes)).append("\n");
    sb.append("    inputText: ").append("*").append("\n");
    sb.append("    activeContexts: ").append(toIndentedString(activeContexts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sessionAttributes");
    openapiFields.add("requestAttributes");
    openapiFields.add("inputText");
    openapiFields.add("activeContexts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inputText");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostTextRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostTextRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostTextRequest is not found in the empty JSON string", PostTextRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostTextRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostTextRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostTextRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("inputText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inputText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inputText").toString()));
      }
      if (jsonObj.get("activeContexts") != null && !jsonObj.get("activeContexts").isJsonNull()) {
        JsonArray jsonArrayactiveContexts = jsonObj.getAsJsonArray("activeContexts");
        if (jsonArrayactiveContexts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("activeContexts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `activeContexts` to be an array in the JSON string but got `%s`", jsonObj.get("activeContexts").toString()));
          }

          // validate the optional field `activeContexts` (array)
          for (int i = 0; i < jsonArrayactiveContexts.size(); i++) {
            ActiveContext.validateJsonElement(jsonArrayactiveContexts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostTextRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostTextRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostTextRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostTextRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostTextRequest>() {
           @Override
           public void write(JsonWriter out, PostTextRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostTextRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostTextRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostTextRequest
   * @throws IOException if the JSON string is invalid with respect to PostTextRequest
   */
  public static PostTextRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostTextRequest.class);
  }

  /**
   * Convert an instance of PostTextRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

