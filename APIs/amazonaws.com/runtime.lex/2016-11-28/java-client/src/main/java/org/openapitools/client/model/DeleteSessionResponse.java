/*
 * Amazon Lex Runtime Service
 * Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, . 
 *
 * The version of the OpenAPI document: 2016-11-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteSessionResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:30.817401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteSessionResponse {
  public static final String SERIALIZED_NAME_BOT_NAME = "botName";
  @SerializedName(SERIALIZED_NAME_BOT_NAME)
  private String botName;

  public static final String SERIALIZED_NAME_BOT_ALIAS = "botAlias";
  @SerializedName(SERIALIZED_NAME_BOT_ALIAS)
  private String botAlias;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_SESSION_ID = "sessionId";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public DeleteSessionResponse() {
  }

  public DeleteSessionResponse botName(String botName) {
    this.botName = botName;
    return this;
  }

  /**
   * Get botName
   * @return botName
   */
  @javax.annotation.Nullable
  public String getBotName() {
    return botName;
  }

  public void setBotName(String botName) {
    this.botName = botName;
  }


  public DeleteSessionResponse botAlias(String botAlias) {
    this.botAlias = botAlias;
    return this;
  }

  /**
   * Get botAlias
   * @return botAlias
   */
  @javax.annotation.Nullable
  public String getBotAlias() {
    return botAlias;
  }

  public void setBotAlias(String botAlias) {
    this.botAlias = botAlias;
  }


  public DeleteSessionResponse userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public DeleteSessionResponse sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteSessionResponse deleteSessionResponse = (DeleteSessionResponse) o;
    return Objects.equals(this.botName, deleteSessionResponse.botName) &&
        Objects.equals(this.botAlias, deleteSessionResponse.botAlias) &&
        Objects.equals(this.userId, deleteSessionResponse.userId) &&
        Objects.equals(this.sessionId, deleteSessionResponse.sessionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(botName, botAlias, userId, sessionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteSessionResponse {\n");
    sb.append("    botName: ").append(toIndentedString(botName)).append("\n");
    sb.append("    botAlias: ").append(toIndentedString(botAlias)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("botName");
    openapiFields.add("botAlias");
    openapiFields.add("userId");
    openapiFields.add("sessionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteSessionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteSessionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteSessionResponse is not found in the empty JSON string", DeleteSessionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteSessionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteSessionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `botName`
      if (jsonObj.get("botName") != null && !jsonObj.get("botName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botName"));
      }
      // validate the optional field `botAlias`
      if (jsonObj.get("botAlias") != null && !jsonObj.get("botAlias").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("botAlias"));
      }
      // validate the optional field `userId`
      if (jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userId"));
      }
      // validate the optional field `sessionId`
      if (jsonObj.get("sessionId") != null && !jsonObj.get("sessionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sessionId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteSessionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteSessionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteSessionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteSessionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteSessionResponse>() {
           @Override
           public void write(JsonWriter out, DeleteSessionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteSessionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteSessionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteSessionResponse
   * @throws IOException if the JSON string is invalid with respect to DeleteSessionResponse
   */
  public static DeleteSessionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteSessionResponse.class);
  }

  /**
   * Convert an instance of DeleteSessionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

