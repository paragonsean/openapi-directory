openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "Amazon Lex provides both build and runtime endpoints. Each endpoint\
    \ provides a set of operations (API). Your conversational bot uses the runtime\
    \ API to understand user utterances (user input text or voice). For example, suppose\
    \ a user says \"I want pizza\", your bot sends this input to Amazon Lex using\
    \ the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza\
    \ intent (one of the intents defined in the bot). Then Amazon Lex engages in user\
    \ conversation on behalf of the bot to elicit required information (slot values,\
    \ such as pizza size and crust type), and then performs fulfillment activity (that\
    \ you configured when you created the bot). You use the build-time API to create\
    \ and manage your Amazon Lex bot. For a list of build-time operations, see the\
    \ build-time API, . "
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: Amazon Lex Runtime Service
  version: 2016-11-28
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: runtime.lex
  x-aws-signingName: lex
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex-2016-11-28.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/lex/
servers:
- description: The Amazon Lex Runtime Service multi-region endpoint
  url: "http://runtime.lex.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Lex Runtime Service multi-region endpoint
  url: "https://runtime.lex.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China
    (Ningxia)
  url: "http://runtime.lex.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China
    (Ningxia)
  url: "https://runtime.lex.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /bot/{botName}/alias/{botAlias}/user/{userId}/session:
    delete:
      description: "Removes session information for a specified bot, alias, and user\
        \ ID. "
      operationId: DeleteSession
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot that contains the session data.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          type: string
        style: simple
      - description: The alias in use for the bot that contains the session data.
        explode: false
        in: path
        name: botAlias
        required: true
        schema:
          type: string
        style: simple
      - description: The identifier of the user associated with the session data.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 100
          minLength: 2
          pattern: "[0-9a-zA-Z._:-]+"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSessionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
      x-accepts:
      - application/json
    post:
      description: "<p>Creates a new session or modifies an existing session with\
        \ an Amazon Lex bot. Use this operation to enable your application to set\
        \ the state of the bot.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\"\
        >Managing Sessions</a>.</p>"
      operationId: PutSession
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot that contains the session data.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          type: string
        style: simple
      - description: The alias in use for the bot that contains the session data.
        explode: false
        in: path
        name: botAlias
        required: true
        schema:
          type: string
        style: simple
      - description: 'The ID of the client application user. Amazon Lex uses this
          to identify a user''s conversation with your bot. '
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 100
          minLength: 2
          pattern: "[0-9a-zA-Z._:-]+"
          type: string
        style: simple
      - description: "<p>The message that Amazon Lex returns in the response can be\
          \ either text or speech based depending on the value of this field.</p>\
          \ <ul> <li> <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon\
          \ Lex returns text in the response.</p> </li> <li> <p>If the value begins\
          \ with <code>audio/</code>, Amazon Lex returns speech in the response. Amazon\
          \ Lex uses Amazon Polly to generate the speech in the configuration that\
          \ you specify. For example, if you specify <code>audio/mpeg</code> as the\
          \ value, Amazon Lex returns speech in the MPEG format.</p> </li> <li> <p>If\
          \ the value is <code>audio/pcm</code>, the speech is returned as <code>audio/pcm</code>\
          \ in 16-bit, little endian format.</p> </li> <li> <p>The following are the\
          \ accepted values:</p> <ul> <li> <p> <code>audio/mpeg</code> </p> </li>\
          \ <li> <p> <code>audio/ogg</code> </p> </li> <li> <p> <code>audio/pcm</code>\
          \ </p> </li> <li> <p> <code>audio/*</code> (defaults to mpeg)</p> </li>\
          \ <li> <p> <code>text/plain; charset=utf-8</code> </p> </li> </ul> </li>\
          \ </ul>"
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSession_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSessionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableException'
          description: NotAcceptableException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
          description: DependencyFailedException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
          description: BadGatewayException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bot/{botName}/alias/{botAlias}/user/{userId}/session/:
    get:
      description: "Returns session information for a specified bot, alias, and user\
        \ ID."
      operationId: GetSession
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the bot that contains the session data.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          type: string
        style: simple
      - description: The alias in use for the bot that contains the session data.
        explode: false
        in: path
        name: botAlias
        required: true
        schema:
          type: string
        style: simple
      - description: 'The ID of the client application user. Amazon Lex uses this
          to identify a user''s conversation with your bot. '
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 100
          minLength: 2
          pattern: "[0-9a-zA-Z._:-]+"
          type: string
        style: simple
      - description: "<p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code>\
          \ structure. </p> <p>When you specify a filter, only intents with their\
          \ <code>checkpointLabel</code> field set to that string are returned.</p>"
        explode: true
        in: query
        name: checkpointLabelFilter
        required: false
        schema:
          maxLength: 255
          minLength: 1
          pattern: "[a-zA-Z0-9-]+"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
      x-accepts:
      - application/json
  /bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type:
    post:
      description: "<p> Sends user input (text or speech) to Amazon Lex. Clients use\
        \ this API to send text and audio requests to Amazon Lex at runtime. Amazon\
        \ Lex interprets the user input using the machine learning model that it built\
        \ for the bot. </p> <p>The <code>PostContent</code> operation supports audio\
        \ input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech\
        \ recognition accuracy in telephone audio applications. </p> <p> In response,\
        \ Amazon Lex returns the next message to convey to the user. Consider the\
        \ following example messages: </p> <ul> <li> <p> For a user input \"I would\
        \ like a pizza,\" Amazon Lex might return a response with a message eliciting\
        \ slot data (for example, <code>PizzaSize</code>): \"What size pizza would\
        \ you like?\". </p> </li> <li> <p> After the user provides all of the pizza\
        \ order information, Amazon Lex might return a response with a message to\
        \ get user confirmation: \"Order the pizza?\". </p> </li> <li> <p> After the\
        \ user replies \"Yes\" to the confirmation prompt, Amazon Lex might return\
        \ a conclusion statement: \"Thank you, your cheese pizza has been ordered.\"\
        . </p> </li> </ul> <p> Not all Amazon Lex messages require a response from\
        \ the user. For example, conclusion statements do not require a response.\
        \ Some messages require only a yes or no response. In addition to the <code>message</code>,\
        \ Amazon Lex provides additional context about the message in the response\
        \ that you can use to enhance client behavior, such as displaying the appropriate\
        \ client user interface. Consider the following examples: </p> <ul> <li> <p>\
        \ If the message is to elicit slot data, Amazon Lex returns the following\
        \ context information: </p> <ul> <li> <p> <code>x-amz-lex-dialog-state</code>\
        \ header set to <code>ElicitSlot</code> </p> </li> <li> <p> <code>x-amz-lex-intent-name</code>\
        \ header set to the intent name in the current context </p> </li> <li> <p>\
        \ <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for which\
        \ the <code>message</code> is eliciting information </p> </li> <li> <p> <code>x-amz-lex-slots</code>\
        \ header set to a map of slots configured for the intent with their current\
        \ values </p> </li> </ul> </li> <li> <p> If the message is a confirmation\
        \ prompt, the <code>x-amz-lex-dialog-state</code> header is set to <code>Confirmation</code>\
        \ and the <code>x-amz-lex-slot-to-elicit</code> header is omitted. </p> </li>\
        \ <li> <p> If the message is a clarification prompt configured for the intent,\
        \ indicating that the user intent is not understood, the <code>x-amz-dialog-state</code>\
        \ header is set to <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code>\
        \ header is omitted. </p> </li> </ul> <p> In addition, Amazon Lex also returns\
        \ your application-specific <code>sessionAttributes</code>. For more information,\
        \ see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\"\
        >Managing Conversation Context</a>. </p>"
      operationId: PostContent
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Name of the Amazon Lex bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          type: string
        style: simple
      - description: Alias of the Amazon Lex bot.
        explode: false
        in: path
        name: botAlias
        required: true
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the client application user. Amazon Lex uses this\
          \ to identify a user's conversation with your bot. At runtime, each request\
          \ must contain the <code>userID</code> field.</p> <p>To decide the user\
          \ ID to use for your application, consider the following factors.</p> <ul>\
          \ <li> <p>The <code>userID</code> field must not contain any personally\
          \ identifiable information of the user, for example, name, personal identification\
          \ numbers, or other end user personal information.</p> </li> <li> <p>If\
          \ you want a user to start a conversation on one device and continue on\
          \ another device, use a user-specific identifier.</p> </li> <li> <p>If you\
          \ want the same user to be able to have two independent conversations on\
          \ two different devices, choose a device-specific identifier.</p> </li>\
          \ <li> <p>A user can't have two independent conversations with two different\
          \ versions of the same bot. For example, a user can't have a conversation\
          \ with the PROD and BETA versions of the same bot. If you anticipate that\
          \ a user will need to have conversation with two different versions, for\
          \ example, while testing, include the bot alias in the user ID to separate\
          \ the two conversations.</p> </li> </ul>"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 100
          minLength: 2
          pattern: "[0-9a-zA-Z._:-]+"
          type: string
        style: simple
      - description: "<p>You pass this value as the <code>x-amz-lex-session-attributes</code>\
          \ HTTP header.</p> <p>Application-specific information passed between Amazon\
          \ Lex and a client application. The value must be a JSON serialized and\
          \ base64 encoded map with string keys and values. The total size of the\
          \ <code>sessionAttributes</code> and <code>requestAttributes</code> headers\
          \ is limited to 12 KB.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\"\
          >Setting Session Attributes</a>.</p>"
        explode: false
        in: header
        name: x-amz-lex-session-attributes
        required: false
        schema:
          format: password
          type: string
        style: simple
      - description: "<p>You pass this value as the <code>x-amz-lex-request-attributes</code>\
          \ HTTP header.</p> <p>Request-specific information passed between Amazon\
          \ Lex and a client application. The value must be a JSON serialized and\
          \ base64 encoded map with string keys and values. The total size of the\
          \ <code>requestAttributes</code> and <code>sessionAttributes</code> headers\
          \ is limited to 12 KB.</p> <p>The namespace <code>x-amz-lex:</code> is reserved\
          \ for special attributes. Don't create any request attributes with the prefix\
          \ <code>x-amz-lex:</code>.</p> <p>For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\"\
          >Setting Request Attributes</a>.</p>"
        explode: false
        in: header
        name: x-amz-lex-request-attributes
        required: false
        schema:
          format: password
          type: string
        style: simple
      - description: "<p> You pass this value as the <code>Content-Type</code> HTTP\
          \ header. </p> <p> Indicates the audio format or text. The header value\
          \ must start with one of the following prefixes: </p> <ul> <li> <p>PCM format,\
          \ audio data must be in little-endian byte order.</p> <ul> <li> <p>audio/l16;\
          \ rate=16000; channels=1</p> </li> <li> <p>audio/x-l16; sample-rate=16000;\
          \ channel-count=1</p> </li> <li> <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;\
          \ channel-count=1; is-big-endian=false </p> </li> </ul> </li> <li> <p>Opus\
          \ format</p> <ul> <li> <p>audio/x-cbr-opus-with-preamble; preamble-size=0;\
          \ bit-rate=256000; frame-size-milliseconds=4</p> </li> </ul> </li> <li>\
          \ <p>Text format</p> <ul> <li> <p>text/plain; charset=utf-8</p> </li> </ul>\
          \ </li> </ul>"
        explode: false
        in: header
        name: Content-Type
        required: true
        schema:
          type: string
        style: simple
      - description: "<p> You pass this value as the <code>Accept</code> HTTP header.\
          \ </p> <p> The message Amazon Lex returns in the response can be either\
          \ text or speech based on the <code>Accept</code> HTTP header value in the\
          \ request. </p> <ul> <li> <p> If the value is <code>text/plain; charset=utf-8</code>,\
          \ Amazon Lex returns text in the response. </p> </li> <li> <p> If the value\
          \ begins with <code>audio/</code>, Amazon Lex returns speech in the response.\
          \ Amazon Lex uses Amazon Polly to generate the speech (using the configuration\
          \ you specified in the <code>Accept</code> header). For example, if you\
          \ specify <code>audio/mpeg</code> as the value, Amazon Lex returns speech\
          \ in the MPEG format.</p> </li> <li> <p>If the value is <code>audio/pcm</code>,\
          \ the speech returned is <code>audio/pcm</code> in 16-bit, little endian\
          \ format. </p> </li> <li> <p>The following are the accepted values:</p>\
          \ <ul> <li> <p>audio/mpeg</p> </li> <li> <p>audio/ogg</p> </li> <li> <p>audio/pcm</p>\
          \ </li> <li> <p>text/plain; charset=utf-8</p> </li> <li> <p>audio/* (defaults\
          \ to mpeg)</p> </li> </ul> </li> </ul>"
        explode: false
        in: header
        name: Accept
        required: false
        schema:
          type: string
        style: simple
      - description: "<p>A list of contexts active for the request. A context can\
          \ be activated when a previous intent is fulfilled, or by including the\
          \ context in the request,</p> <p>If you don't specify a list of contexts,\
          \ Amazon Lex will use the current list of contexts for the session. If you\
          \ specify an empty list, all contexts for the session are cleared.</p>"
        explode: false
        in: header
        name: x-amz-lex-active-contexts
        required: false
        schema:
          format: password
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostContent_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostContentResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsupportedMediaTypeException'
          description: UnsupportedMediaTypeException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotAcceptableException'
          description: NotAcceptableException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestTimeoutException'
          description: RequestTimeoutException
        "488":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
          description: DependencyFailedException
        "489":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
          description: BadGatewayException
        "490":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoopDetectedException'
          description: LoopDetectedException
      x-content-type: application/json
      x-accepts:
      - application/json
  /bot/{botName}/alias/{botAlias}/user/{userId}/text:
    post:
      description: "<p>Sends user input to Amazon Lex. Client applications can use\
        \ this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets\
        \ the user input using the machine learning model it built for the bot. </p>\
        \ <p> In response, Amazon Lex returns the next <code>message</code> to convey\
        \ to the user an optional <code>responseCard</code> to display. Consider the\
        \ following example messages: </p> <ul> <li> <p> For a user input \"I would\
        \ like a pizza\", Amazon Lex might return a response with a message eliciting\
        \ slot data (for example, PizzaSize): \"What size pizza would you like?\"\
        \ </p> </li> <li> <p> After the user provides all of the pizza order information,\
        \ Amazon Lex might return a response with a message to obtain user confirmation\
        \ \"Proceed with the pizza order?\". </p> </li> <li> <p> After the user replies\
        \ to a confirmation prompt with a \"yes\", Amazon Lex might return a conclusion\
        \ statement: \"Thank you, your cheese pizza has been ordered.\". </p> </li>\
        \ </ul> <p> Not all Amazon Lex messages require a user response. For example,\
        \ a conclusion statement does not require a response. Some messages require\
        \ only a \"yes\" or \"no\" user response. In addition to the <code>message</code>,\
        \ Amazon Lex provides additional context about the message in the response\
        \ that you might use to enhance client behavior, for example, to display the\
        \ appropriate client user interface. These are the <code>slotToElicit</code>,\
        \ <code>dialogState</code>, <code>intentName</code>, and <code>slots</code>\
        \ fields in the response. Consider the following examples: </p> <ul> <li>\
        \ <p>If the message is to elicit slot data, Amazon Lex returns the following\
        \ context information:</p> <ul> <li> <p> <code>dialogState</code> set to ElicitSlot\
        \ </p> </li> <li> <p> <code>intentName</code> set to the intent name in the\
        \ current context </p> </li> <li> <p> <code>slotToElicit</code> set to the\
        \ slot name for which the <code>message</code> is eliciting information </p>\
        \ </li> <li> <p> <code>slots</code> set to a map of slots, configured for\
        \ the intent, with currently known values </p> </li> </ul> </li> <li> <p>\
        \ If the message is a confirmation prompt, the <code>dialogState</code> is\
        \ set to ConfirmIntent and <code>SlotToElicit</code> is set to null. </p>\
        \ </li> <li> <p>If the message is a clarification prompt (configured for the\
        \ intent) that indicates that user intent is not understood, the <code>dialogState</code>\
        \ is set to ElicitIntent and <code>slotToElicit</code> is set to null. </p>\
        \ </li> </ul> <p> In addition, Amazon Lex also returns your application-specific\
        \ <code>sessionAttributes</code>. For more information, see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\"\
        >Managing Conversation Context</a>. </p>"
      operationId: PostText
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The name of the Amazon Lex bot.
        explode: false
        in: path
        name: botName
        required: true
        schema:
          type: string
        style: simple
      - description: The alias of the Amazon Lex bot.
        explode: false
        in: path
        name: botAlias
        required: true
        schema:
          type: string
        style: simple
      - description: "<p>The ID of the client application user. Amazon Lex uses this\
          \ to identify a user's conversation with your bot. At runtime, each request\
          \ must contain the <code>userID</code> field.</p> <p>To decide the user\
          \ ID to use for your application, consider the following factors.</p> <ul>\
          \ <li> <p>The <code>userID</code> field must not contain any personally\
          \ identifiable information of the user, for example, name, personal identification\
          \ numbers, or other end user personal information.</p> </li> <li> <p>If\
          \ you want a user to start a conversation on one device and continue on\
          \ another device, use a user-specific identifier.</p> </li> <li> <p>If you\
          \ want the same user to be able to have two independent conversations on\
          \ two different devices, choose a device-specific identifier.</p> </li>\
          \ <li> <p>A user can't have two independent conversations with two different\
          \ versions of the same bot. For example, a user can't have a conversation\
          \ with the PROD and BETA versions of the same bot. If you anticipate that\
          \ a user will need to have conversation with two different versions, for\
          \ example, while testing, include the bot alias in the user ID to separate\
          \ the two conversations.</p> </li> </ul>"
        explode: false
        in: path
        name: userId
        required: true
        schema:
          maxLength: 100
          minLength: 2
          pattern: "[0-9a-zA-Z._:-]+"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostText_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostTextResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundException'
          description: NotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestException'
          description: BadRequestException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalFailureException'
          description: InternalFailureException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DependencyFailedException'
          description: DependencyFailedException
        "486":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadGatewayException'
          description: BadGatewayException
        "487":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoopDetectedException'
          description: LoopDetectedException
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    DeleteSessionResponse:
      example:
        botName: ""
        botAlias: ""
        sessionId: ""
        userId: ""
      properties:
        botName:
          allOf:
          - $ref: '#/components/schemas/BotName'
          - description: The name of the bot associated with the session data.
        botAlias:
          allOf:
          - $ref: '#/components/schemas/BotAlias'
          - description: The alias in use for the bot associated with the session
              data.
        userId:
          allOf:
          - $ref: '#/components/schemas/UserId'
          - description: The ID of the client application user.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The unique identifier for the session.
      type: object
    NotFoundException: {}
    BadRequestException: {}
    LimitExceededException: {}
    InternalFailureException: {}
    ConflictException: {}
    GetSessionResponse:
      example:
        dialogAction:
          slots: ""
          fulfillmentState: ""
          messageFormat: ""
          intentName: ""
          type: ""
          message: ""
          slotToElicit: ""
        recentIntentSummaryView: ""
        sessionAttributes: ""
        sessionId: ""
        activeContexts: ""
      properties:
        recentIntentSummaryView:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryList'
          - description: "<p>An array of information about the intents used in the\
              \ session. The array can contain a maximum of three summaries. If more\
              \ than three intents are used in the session, the <code>recentIntentSummaryView</code>\
              \ operation contains information about the last three intents used.</p>\
              \ <p>If you set the <code>checkpointLabelFilter</code> parameter in\
              \ the request, the array contains only the intents with the specified\
              \ label.</p>"
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: Map of key/value pairs representing the session-specific
              context information. It contains application information passed between
              Amazon Lex and a client application.
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A unique identifier for the session.
        dialogAction:
          $ref: '#/components/schemas/GetSessionResponse_dialogAction'
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          - description: "<p>A list of active contexts for the session. A context\
              \ can be set when an intent is fulfilled or by calling the <code>PostContent</code>,\
              \ <code>PostText</code>, or <code>PutSession</code> operation.</p> <p>You\
              \ can use a context to control the intents that can follow up an intent,\
              \ or to modify the operation of your application.</p>"
      type: object
    PostContentResponse:
      example:
        audioStream: ""
      properties:
        audioStream:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          - description: "The prompt (or statement) to convey to the user. This is\
              \ based on the bot configuration and context. For example, if Amazon\
              \ Lex did not understand the user intent, it sends the <code>clarificationPrompt</code>\
              \ configured for the bot. If the intent requires confirmation before\
              \ taking the fulfillment action, it sends the <code>confirmationPrompt</code>.\
              \ Another example: Suppose that the Lambda function successfully fulfilled\
              \ the intent, and sent a message to convey to the user. Then Amazon\
              \ Lex sends that message in the response. "
      type: object
    UnsupportedMediaTypeException: {}
    NotAcceptableException: {}
    RequestTimeoutException: {}
    DependencyFailedException: {}
    BadGatewayException: {}
    LoopDetectedException: {}
    PostTextResponse:
      example:
        alternativeIntents: ""
        messageFormat: ""
        intentName: ""
        dialogState: ""
        sessionId: ""
        message: ""
        botVersion: ""
        activeContexts: ""
        sentimentResponse:
          sentimentScore: ""
          sentimentLabel: ""
        responseCard:
          version: ""
          contentType: ""
          genericAttachments: ""
        slots: ""
        nluIntentConfidence:
          score: ""
        sessionAttributes: ""
        slotToElicit: ""
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The current user intent that Amazon Lex is aware of.
        nluIntentConfidence:
          $ref: '#/components/schemas/PostTextResponse_nluIntentConfidence'
        alternativeIntents:
          allOf:
          - $ref: '#/components/schemas/IntentList'
          - description: <p>One to four alternative intents that may be applicable
              to the user's intent.</p> <p>Each alternative includes a score that
              indicates how confident Amazon Lex is that the intent matches the user's
              intent. The intents are sorted by the confidence score.</p>
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: "<p> The intent slots that Amazon Lex detected from the user\
              \ input in the conversation. </p> <p>Amazon Lex creates a resolution\
              \ list containing likely values for a slot. The value that it returns\
              \ is determined by the <code>valueSelectionStrategy</code> selected\
              \ when the slot type was created or updated. If <code>valueSelectionStrategy</code>\
              \ is set to <code>ORIGINAL_VALUE</code>, the value provided by the user\
              \ is returned, if the user value is similar to the slot values. If <code>valueSelectionStrategy</code>\
              \ is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first\
              \ value in the resolution list or, if there is no resolution list, null.\
              \ If you don't specify a <code>valueSelectionStrategy</code>, the default\
              \ is <code>ORIGINAL_VALUE</code>.</p>"
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: A map of key-value pairs representing the session-specific
              context information.
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          - description: "<p>The message to convey to the user. The message can come\
              \ from the bot's configuration or from a Lambda function.</p> <p>If\
              \ the intent is not configured with a Lambda function, or if the Lambda\
              \ function returned <code>Delegate</code> as the <code>dialogAction.type</code>\
              \ its response, Amazon Lex decides on the next course of action and\
              \ selects an appropriate message from the bot's configuration based\
              \ on the current interaction context. For example, if Amazon Lex isn't\
              \ able to understand user input, it uses a clarification prompt message.</p>\
              \ <p>When you create an intent you can assign messages to groups. When\
              \ messages are assigned to groups Amazon Lex returns one message from\
              \ each group in the response. The message field is an escaped JSON string\
              \ containing the messages. For more information about the structure\
              \ of the JSON string returned, see <a>msg-prompts-formats</a>.</p> <p>If\
              \ the Lambda function returns a message, Amazon Lex passes it to the\
              \ client in its response.</p>"
        sentimentResponse:
          $ref: '#/components/schemas/PostTextResponse_sentimentResponse'
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          - description: <p>The format of the response message. One of the following
              values:</p> <ul> <li> <p> <code>PlainText</code> - The message contains
              plain UTF-8 text.</p> </li> <li> <p> <code>CustomPayload</code> - The
              message is a custom format defined by the Lambda function.</p> </li>
              <li> <p> <code>SSML</code> - The message contains text formatted for
              voice output.</p> </li> <li> <p> <code>Composite</code> - The message
              contains an escaped JSON object containing one or more messages from
              the groups that messages were assigned to when the intent was created.</p>
              </li> </ul>
        dialogState:
          allOf:
          - $ref: '#/components/schemas/DialogState'
          - description: "<p> Identifies the current state of the user interaction.\
              \ Amazon Lex returns one of the following values as <code>dialogState</code>.\
              \ The client can optionally use this information to customize the user\
              \ interface. </p> <ul> <li> <p> <code>ElicitIntent</code> - Amazon Lex\
              \ wants to elicit user intent. </p> <p>For example, a user might utter\
              \ an intent (\"I want to order a pizza\"). If Amazon Lex cannot infer\
              \ the user intent from this utterance, it will return this dialogState.</p>\
              \ </li> <li> <p> <code>ConfirmIntent</code> - Amazon Lex is expecting\
              \ a \"yes\" or \"no\" response. </p> <p> For example, Amazon Lex wants\
              \ user confirmation before fulfilling an intent. </p> <p>Instead of\
              \ a simple \"yes\" or \"no,\" a user might respond with additional information.\
              \ For example, \"yes, but make it thick crust pizza\" or \"no, I want\
              \ to order a drink\". Amazon Lex can process such additional information\
              \ (in these examples, update the crust type slot value, or change intent\
              \ from OrderPizza to OrderDrink).</p> </li> <li> <p> <code>ElicitSlot</code>\
              \ - Amazon Lex is expecting a slot value for the current intent. </p>\
              \ <p>For example, suppose that in the response Amazon Lex sends this\
              \ message: \"What size pizza would you like?\". A user might reply with\
              \ the slot value (e.g., \"medium\"). The user might also provide additional\
              \ information in the response (e.g., \"medium thick crust pizza\").\
              \ Amazon Lex can process such additional information appropriately.\
              \ </p> </li> <li> <p> <code>Fulfilled</code> - Conveys that the Lambda\
              \ function configured for the intent has successfully fulfilled the\
              \ intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - Conveys\
              \ that the client has to fulfill the intent. </p> </li> <li> <p> <code>Failed</code>\
              \ - Conveys that the conversation with the user failed. </p> <p> This\
              \ can happen for various reasons including that the user did not provide\
              \ an appropriate response to prompts from the service (you can configure\
              \ how many times Amazon Lex can prompt a user for specific information),\
              \ or the Lambda function failed to fulfill the intent. </p> </li> </ul>"
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "If the <code>dialogState</code> value is <code>ElicitSlot</code>,\
              \ returns the name of the slot for which Amazon Lex is eliciting a value. "
        responseCard:
          $ref: '#/components/schemas/PostTextResponse_responseCard'
        sessionId:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: A unique identifier for the session.
        botVersion:
          allOf:
          - $ref: '#/components/schemas/BotVersion'
          - description: The version of the bot that responded to the conversation.
              You can use this information to help determine if one version of a bot
              is performing better than another version.
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          - description: "<p>A list of active contexts for the session. A context\
              \ can be set when an intent is fulfilled or by calling the <code>PostContent</code>,\
              \ <code>PostText</code>, or <code>PutSession</code> operation.</p> <p>You\
              \ can use a context to control the intents that can follow up an intent,\
              \ or to modify the operation of your application.</p>"
      type: object
    String:
      type: string
    ActiveContext:
      description: "A context is a variable that contains information about the current\
        \ state of the conversation between a user and Amazon Lex. Context can be\
        \ set automatically by Amazon Lex when an intent is fulfilled, or it can be\
        \ set at runtime using the <code>PutContent</code>, <code>PutText</code>,\
        \ or <code>PutSession</code> operation."
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/ActiveContextName'
          - description: The name of the context.
        timeToLive:
          $ref: '#/components/schemas/ActiveContext_timeToLive'
        parameters:
          allOf:
          - $ref: '#/components/schemas/ActiveContextParametersMap'
          - description: State variables for the current context. You can use these
              values as default values for slots in subsequent events.
      required:
      - name
      - parameters
      - timeToLive
      type: object
    PutSessionResponse:
      example:
        audioStream: ""
      properties:
        audioStream:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          - description: The audio version of the message to convey to the user.
      type: object
    DialogActionType:
      enum:
      - ElicitIntent
      - ConfirmIntent
      - ElicitSlot
      - Close
      - Delegate
      type: string
    IntentName:
      type: string
    StringMap:
      additionalProperties:
        $ref: '#/components/schemas/String'
      type: object
    FulfillmentState:
      enum:
      - Fulfilled
      - Failed
      - ReadyForFulfillment
      type: string
    Text:
      format: password
      maxLength: 1024
      minLength: 1
      type: string
    MessageFormatType:
      enum:
      - PlainText
      - CustomPayload
      - SSML
      - Composite
      type: string
    IntentSummary:
      description: "Provides information about the state of an intent. You can use\
        \ this information to get the current state of an intent so that you can process\
        \ the intent, or so that you can return the intent to its previous state."
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        checkpointLabel:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryCheckpointLabel'
          - description: <p>A user-defined label that identifies a particular intent.
              You can use this label to return to a previous intent. </p> <p>Use the
              <code>checkpointLabelFilter</code> parameter of the <code>GetSessionRequest</code>
              operation to filter the intents returned by the operation to those with
              only the specified label.</p>
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: 'Map of the slots that have been gathered and their values. '
        confirmationStatus:
          allOf:
          - $ref: '#/components/schemas/ConfirmationStatus'
          - description: "<p>The status of the intent after the user responds to the\
              \ confirmation prompt. If the user confirms the intent, Amazon Lex sets\
              \ this field to <code>Confirmed</code>. If the user denies the intent,\
              \ Amazon Lex sets this value to <code>Denied</code>. The possible values\
              \ are:</p> <ul> <li> <p> <code>Confirmed</code> - The user has responded\
              \ \"Yes\" to the confirmation prompt, confirming that the intent is\
              \ complete and that it is ready to be fulfilled.</p> </li> <li> <p>\
              \ <code>Denied</code> - The user has responded \"No\" to the confirmation\
              \ prompt.</p> </li> <li> <p> <code>None</code> - The user has never\
              \ been prompted for confirmation; or, the user was prompted but did\
              \ not confirm or deny the prompt.</p> </li> </ul>"
        dialogActionType:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          - description: "<p>The next action that the bot should take in its interaction\
              \ with the user. The possible values are:</p> <ul> <li> <p> <code>ConfirmIntent</code>\
              \ - The next action is asking the user if the intent is complete and\
              \ ready to be fulfilled. This is a yes/no question such as \"Place the\
              \ order?\"</p> </li> <li> <p> <code>Close</code> - Indicates that the\
              \ there will not be a response from the user. For example, the statement\
              \ \"Your order has been placed\" does not require a response.</p> </li>\
              \ <li> <p> <code>ElicitIntent</code> - The next action is to determine\
              \ the intent that the user wants to fulfill.</p> </li> <li> <p> <code>ElicitSlot</code>\
              \ - The next action is to elicit a slot value from the user.</p> </li>\
              \ </ul>"
        fulfillmentState:
          allOf:
          - $ref: '#/components/schemas/FulfillmentState'
          - description: <p>The fulfillment state of the intent. The possible values
              are:</p> <ul> <li> <p> <code>Failed</code> - The Lambda function associated
              with the intent failed to fulfill the intent.</p> </li> <li> <p> <code>Fulfilled</code>
              - The intent has fulfilled by the Lambda function associated with the
              intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - All of
              the information necessary for the intent is present and the intent ready
              to be fulfilled by the client application.</p> </li> </ul>
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: "The next slot to elicit from the user. If there is not slot\
              \ to elicit, the field is blank."
      required:
      - dialogActionType
      type: object
    Accept:
      type: string
    ActiveContextName:
      maxLength: 100
      minLength: 1
      pattern: "^([A-Za-z]_?)+$"
      type: string
    ActiveContextTimeToLive:
      description: The length of time or number of turns that a context remains active.
      properties:
        timeToLiveInSeconds:
          allOf:
          - $ref: '#/components/schemas/ActiveContextTimeToLiveInSeconds'
          - description: "The number of seconds that the context should be active\
              \ after it is first sent in a <code>PostContent</code> or <code>PostText</code>\
              \ response. You can set the value between 5 and 86,400 seconds (24 hours)."
        turnsToLive:
          allOf:
          - $ref: '#/components/schemas/ActiveContextTurnsToLive'
          - description: The number of conversation turns that the context should
              be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code>
              request and the corresponding response from Amazon Lex.
      type: object
    ActiveContextParametersMap:
      additionalProperties:
        $ref: '#/components/schemas/Text'
      maxProperties: 10
      minProperties: 0
      type: object
    ActiveContextTimeToLiveInSeconds:
      maximum: 86400
      minimum: 5
      type: integer
    ActiveContextTurnsToLive:
      maximum: 20
      minimum: 1
      type: integer
    ActiveContextsList:
      items:
        $ref: '#/components/schemas/ActiveContext'
      maxItems: 20
      minItems: 0
      type: array
    ActiveContextsString:
      format: password
      type: string
    AttributesString:
      format: password
      type: string
    BlobStream:
      type: string
    BotAlias:
      type: string
    BotName:
      type: string
    BotVersion:
      maxLength: 64
      minLength: 1
      pattern: "[0-9]+|\\$LATEST"
      type: string
    ButtonTextStringWithLength:
      maxLength: 15
      minLength: 1
      type: string
    ButtonValueStringWithLength:
      maxLength: 1000
      minLength: 1
      type: string
    Button:
      description: "Represents an option to be shown on the client platform (Facebook,\
        \ Slack, etc.)"
      properties:
        text:
          allOf:
          - $ref: '#/components/schemas/ButtonTextStringWithLength'
          - description: Text that is visible to the user on the button.
        value:
          allOf:
          - $ref: '#/components/schemas/ButtonValueStringWithLength'
          - description: "The value sent to Amazon Lex when a user chooses the button.\
              \ For example, consider button text \"NYC.\" When the user chooses the\
              \ button, the value sent can be \"New York City.\""
      required:
      - text
      - value
      type: object
    ConfirmationStatus:
      enum:
      - None
      - Confirmed
      - Denied
      type: string
    ContentType:
      enum:
      - application/vnd.amazonaws.card.generic
      type: string
    UserId:
      maxLength: 100
      minLength: 2
      pattern: "[0-9a-zA-Z._:-]+"
      type: string
    DeleteSessionRequest:
      properties: {}
      title: DeleteSessionRequest
      type: object
    DialogAction:
      description: "Describes the next action that the bot should take in its interaction\
        \ with the user and provides information about the context in which the action\
        \ takes place. Use the <code>DialogAction</code> data type to set the interaction\
        \ to a specific state, or to return the interaction to a previous state."
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          - description: "<p>The next action that the bot should take in its interaction\
              \ with the user. The possible values are:</p> <ul> <li> <p> <code>ConfirmIntent</code>\
              \ - The next action is asking the user if the intent is complete and\
              \ ready to be fulfilled. This is a yes/no question such as \"Place the\
              \ order?\"</p> </li> <li> <p> <code>Close</code> - Indicates that the\
              \ there will not be a response from the user. For example, the statement\
              \ \"Your order has been placed\" does not require a response.</p> </li>\
              \ <li> <p> <code>Delegate</code> - The next action is determined by\
              \ Amazon Lex.</p> </li> <li> <p> <code>ElicitIntent</code> - The next\
              \ action is to determine the intent that the user wants to fulfill.</p>\
              \ </li> <li> <p> <code>ElicitSlot</code> - The next action is to elicit\
              \ a slot value from the user.</p> </li> </ul>"
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: 'Map of the slots that have been gathered and their values. '
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the slot that should be elicited from the user.
        fulfillmentState:
          allOf:
          - $ref: '#/components/schemas/FulfillmentState'
          - description: <p>The fulfillment state of the intent. The possible values
              are:</p> <ul> <li> <p> <code>Failed</code> - The Lambda function associated
              with the intent failed to fulfill the intent.</p> </li> <li> <p> <code>Fulfilled</code>
              - The intent has fulfilled by the Lambda function associated with the
              intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - All of
              the information necessary for the intent is present and the intent ready
              to be fulfilled by the client application.</p> </li> </ul>
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          - description: "The message that should be shown to the user. If you don't\
              \ specify a message, Amazon Lex will use the message configured for\
              \ the intent."
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          - description: "<ul> <li> <p> <code>PlainText</code> - The message contains\
              \ plain UTF-8 text.</p> </li> <li> <p> <code>CustomPayload</code> -\
              \ The message is a custom format for the client.</p> </li> <li> <p>\
              \ <code>SSML</code> - The message contains text formatted for voice\
              \ output.</p> </li> <li> <p> <code>Composite</code> - The message contains\
              \ an escaped JSON object containing one or more messages. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\"\
              >Message Groups</a>. </p> </li> </ul>"
      required:
      - type
      type: object
    DialogState:
      enum:
      - ElicitIntent
      - ConfirmIntent
      - ElicitSlot
      - Fulfilled
      - ReadyForFulfillment
      - Failed
      type: string
    Double:
      format: double
      type: number
    StringWithLength:
      maxLength: 80
      minLength: 1
      type: string
    StringUrlWithLength:
      maxLength: 2048
      minLength: 1
      type: string
    listOfButtons:
      items:
        $ref: '#/components/schemas/Button'
      maxItems: 5
      minItems: 0
      type: array
    GenericAttachment:
      description: "Represents an option rendered to the user when a prompt is shown.\
        \ It could be an image, a button, a link, or text. "
      properties:
        title:
          allOf:
          - $ref: '#/components/schemas/StringWithLength'
          - description: The title of the option.
        subTitle:
          allOf:
          - $ref: '#/components/schemas/StringWithLength'
          - description: The subtitle shown below the title.
        attachmentLinkUrl:
          allOf:
          - $ref: '#/components/schemas/StringUrlWithLength'
          - description: The URL of an attachment to the response card.
        imageUrl:
          allOf:
          - $ref: '#/components/schemas/StringUrlWithLength'
          - description: The URL of an image that is displayed to the user.
        buttons:
          allOf:
          - $ref: '#/components/schemas/listOfButtons'
          - description: The list of options to show to the user.
      type: object
    IntentSummaryCheckpointLabel:
      maxLength: 255
      minLength: 1
      pattern: "[a-zA-Z0-9-]+"
      type: string
    GetSessionRequest:
      properties: {}
      title: GetSessionRequest
      type: object
    IntentSummaryList:
      items:
        $ref: '#/components/schemas/IntentSummary'
      maxItems: 3
      minItems: 0
      type: array
    HttpContentType:
      type: string
    IntentConfidence:
      description: Provides a score that indicates the confidence that Amazon Lex
        has that an intent is the one that satisfies the user's intent.
      properties:
        score:
          allOf:
          - $ref: '#/components/schemas/Double'
          - description: A score that indicates how confident Amazon Lex is that an
              intent satisfies the user's intent. Ranges between 0.00 and 1.00. Higher
              scores indicate higher confidence.
      type: object
    PredictedIntent:
      description: "An intent that Amazon Lex suggests satisfies the user's intent.\
        \ Includes the name of the intent, the confidence that Amazon Lex has that\
        \ the user's intent is satisfied, and the slots defined for the intent."
      properties:
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent that Amazon Lex suggests satisfies
              the user's intent.
        nluIntentConfidence:
          $ref: '#/components/schemas/PredictedIntent_nluIntentConfidence'
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: The slot and slot values associated with the predicted intent.
      type: object
    IntentList:
      items:
        $ref: '#/components/schemas/PredictedIntent'
      maxItems: 4
      type: array
    ParameterName:
      maxLength: 100
      minLength: 1
      type: string
    PostContentRequest:
      example:
        inputStream: ""
      properties:
        inputStream:
          allOf:
          - $ref: '#/components/schemas/BlobStream'
          - description: "<p> User input in PCM or Opus audio format or text format\
              \ as described in the <code>Content-Type</code> HTTP header. </p> <p>You\
              \ can stream audio data to Amazon Lex or you can create a local buffer\
              \ that captures all of the audio data before sending. In general, you\
              \ get better performance if you stream audio data rather than buffering\
              \ the data locally.</p>"
      required:
      - inputStream
      title: PostContentRequest
      type: object
    SensitiveString:
      format: password
      maxLength: 1366
      minLength: 1
      type: string
    SensitiveStringUnbounded:
      format: password
      type: string
    PostTextRequest:
      example:
        requestAttributes: ""
        inputText: ""
        sessionAttributes: ""
        activeContexts: ""
      properties:
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: "<p>Application-specific information passed between Amazon\
              \ Lex and a client application.</p> <p>For more information, see <a\
              \ href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\"\
              >Setting Session Attributes</a>.</p>"
        requestAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: "<p>Request-specific information passed between Amazon Lex\
              \ and a client application.</p> <p>The namespace <code>x-amz-lex:</code>\
              \ is reserved for special attributes. Don't create any request attributes\
              \ with the prefix <code>x-amz-lex:</code>.</p> <p>For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\"\
              >Setting Request Attributes</a>.</p>"
        inputText:
          allOf:
          - $ref: '#/components/schemas/Text'
          - description: The text that the user entered (Amazon Lex interprets this
              text).
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          - description: "<p>A list of contexts active for the request. A context\
              \ can be activated when a previous intent is fulfilled, or by including\
              \ the context in the request,</p> <p>If you don't specify a list of\
              \ contexts, Amazon Lex will use the current list of contexts for the\
              \ session. If you specify an empty list, all contexts for the session\
              \ are cleared.</p>"
      required:
      - inputText
      title: PostTextRequest
      type: object
    SentimentResponse:
      description: "<p>The sentiment expressed in an utterance.</p> <p>When the bot\
        \ is configured to send utterances to Amazon Comprehend for sentiment analysis,\
        \ this field structure contains the result of the analysis.</p>"
      properties:
        sentimentLabel:
          allOf:
          - $ref: '#/components/schemas/SentimentLabel'
          - description: The inferred sentiment that Amazon Comprehend has the highest
              confidence in.
        sentimentScore:
          allOf:
          - $ref: '#/components/schemas/SentimentScore'
          - description: The likelihood that the sentiment was correctly inferred.
      type: object
    ResponseCard:
      description: "If you configure a response card when creating your bots, Amazon\
        \ Lex substitutes the session attributes and slot values that are available,\
        \ and then returns it. The response card can also come from a Lambda function\
        \ ( <code>dialogCodeHook</code> and <code>fulfillmentActivity</code> on an\
        \ intent)."
      properties:
        version:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The version of the response card format.
        contentType:
          allOf:
          - $ref: '#/components/schemas/ContentType'
          - description: The content type of the response.
        genericAttachments:
          allOf:
          - $ref: '#/components/schemas/genericAttachmentList'
          - description: An array of attachment objects representing options.
      type: object
    PutSessionRequest:
      example:
        dialogAction:
          slots: ""
          fulfillmentState: ""
          messageFormat: ""
          intentName: ""
          type: ""
          message: ""
          slotToElicit: ""
        recentIntentSummaryView: ""
        sessionAttributes: ""
        activeContexts: ""
      properties:
        sessionAttributes:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: Map of key/value pairs representing the session-specific
              context information. It contains application information passed between
              Amazon Lex and a client application.
        dialogAction:
          $ref: '#/components/schemas/PutSessionRequest_dialogAction'
        recentIntentSummaryView:
          allOf:
          - $ref: '#/components/schemas/IntentSummaryList'
          - description: "<p>A summary of the recent intents for the bot. You can\
              \ use the intent summary view to set a checkpoint label on an intent\
              \ and modify attributes of intents. You can also use it to remove or\
              \ add intent summary objects to the list.</p> <p>An intent that you\
              \ modify or add to the list must make sense for the bot. For example,\
              \ the intent name must be valid for the bot. You must provide valid\
              \ values for:</p> <ul> <li> <p> <code>intentName</code> </p> </li> <li>\
              \ <p>slot names</p> </li> <li> <p> <code>slotToElict</code> </p> </li>\
              \ </ul> <p>If you send the <code>recentIntentSummaryView</code> parameter\
              \ in a <code>PutSession</code> request, the contents of the new summary\
              \ view replaces the old summary view. For example, if a <code>GetSession</code>\
              \ request returns three intents in the summary view and you call <code>PutSession</code>\
              \ with one intent in the summary view, the next call to <code>GetSession</code>\
              \ will only return one intent.</p>"
        activeContexts:
          allOf:
          - $ref: '#/components/schemas/ActiveContextsList'
          - description: "<p>A list of contexts active for the request. A context\
              \ can be activated when a previous intent is fulfilled, or by including\
              \ the context in the request,</p> <p>If you don't specify a list of\
              \ contexts, Amazon Lex will use the current list of contexts for the\
              \ session. If you specify an empty list, all contexts for the session\
              \ are cleared.</p>"
      title: PutSessionRequest
      type: object
    genericAttachmentList:
      items:
        $ref: '#/components/schemas/GenericAttachment'
      maxItems: 10
      minItems: 0
      type: array
    SentimentLabel:
      type: string
    SentimentScore:
      type: string
    PutSession_request_dialogAction:
      description: "Describes the next action that the bot should take in its interaction\
        \ with the user and provides information about the context in which the action\
        \ takes place. Use the <code>DialogAction</code> data type to set the interaction\
        \ to a specific state, or to return the interaction to a previous state."
      properties:
        type:
          allOf:
          - $ref: '#/components/schemas/DialogActionType'
          - description: "<p>The next action that the bot should take in its interaction\
              \ with the user. The possible values are:</p> <ul> <li> <p> <code>ConfirmIntent</code>\
              \ - The next action is asking the user if the intent is complete and\
              \ ready to be fulfilled. This is a yes/no question such as \"Place the\
              \ order?\"</p> </li> <li> <p> <code>Close</code> - Indicates that the\
              \ there will not be a response from the user. For example, the statement\
              \ \"Your order has been placed\" does not require a response.</p> </li>\
              \ <li> <p> <code>Delegate</code> - The next action is determined by\
              \ Amazon Lex.</p> </li> <li> <p> <code>ElicitIntent</code> - The next\
              \ action is to determine the intent that the user wants to fulfill.</p>\
              \ </li> <li> <p> <code>ElicitSlot</code> - The next action is to elicit\
              \ a slot value from the user.</p> </li> </ul>"
        intentName:
          allOf:
          - $ref: '#/components/schemas/IntentName'
          - description: The name of the intent.
        slots:
          allOf:
          - $ref: '#/components/schemas/StringMap'
          - description: 'Map of the slots that have been gathered and their values. '
        slotToElicit:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The name of the slot that should be elicited from the user.
        fulfillmentState:
          allOf:
          - $ref: '#/components/schemas/FulfillmentState'
          - description: <p>The fulfillment state of the intent. The possible values
              are:</p> <ul> <li> <p> <code>Failed</code> - The Lambda function associated
              with the intent failed to fulfill the intent.</p> </li> <li> <p> <code>Fulfilled</code>
              - The intent has fulfilled by the Lambda function associated with the
              intent. </p> </li> <li> <p> <code>ReadyForFulfillment</code> - All of
              the information necessary for the intent is present and the intent ready
              to be fulfilled by the client application.</p> </li> </ul>
        message:
          allOf:
          - $ref: '#/components/schemas/Text'
          - description: "The message that should be shown to the user. If you don't\
              \ specify a message, Amazon Lex will use the message configured for\
              \ the intent."
        messageFormat:
          allOf:
          - $ref: '#/components/schemas/MessageFormatType'
          - description: "<ul> <li> <p> <code>PlainText</code> - The message contains\
              \ plain UTF-8 text.</p> </li> <li> <p> <code>CustomPayload</code> -\
              \ The message is a custom format for the client.</p> </li> <li> <p>\
              \ <code>SSML</code> - The message contains text formatted for voice\
              \ output.</p> </li> <li> <p> <code>Composite</code> - The message contains\
              \ an escaped JSON object containing one or more messages. For more information,\
              \ see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/howitworks-manage-prompts.html\"\
              >Message Groups</a>. </p> </li> </ul>"
      type: object
    PutSession_request:
      properties:
        sessionAttributes:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: Map of key/value pairs representing the session-specific context
            information. It contains application information passed between Amazon
            Lex and a client application.
          type: object
        dialogAction:
          $ref: '#/components/schemas/PutSession_request_dialogAction'
        recentIntentSummaryView:
          description: "<p>A summary of the recent intents for the bot. You can use\
            \ the intent summary view to set a checkpoint label on an intent and modify\
            \ attributes of intents. You can also use it to remove or add intent summary\
            \ objects to the list.</p> <p>An intent that you modify or add to the\
            \ list must make sense for the bot. For example, the intent name must\
            \ be valid for the bot. You must provide valid values for:</p> <ul> <li>\
            \ <p> <code>intentName</code> </p> </li> <li> <p>slot names</p> </li>\
            \ <li> <p> <code>slotToElict</code> </p> </li> </ul> <p>If you send the\
            \ <code>recentIntentSummaryView</code> parameter in a <code>PutSession</code>\
            \ request, the contents of the new summary view replaces the old summary\
            \ view. For example, if a <code>GetSession</code> request returns three\
            \ intents in the summary view and you call <code>PutSession</code> with\
            \ one intent in the summary view, the next call to <code>GetSession</code>\
            \ will only return one intent.</p>"
          items:
            $ref: '#/components/schemas/IntentSummary'
          maxItems: 3
          minItems: 0
          type: array
        activeContexts:
          description: "<p>A list of contexts active for the request. A context can\
            \ be activated when a previous intent is fulfilled, or by including the\
            \ context in the request,</p> <p>If you don't specify a list of contexts,\
            \ Amazon Lex will use the current list of contexts for the session. If\
            \ you specify an empty list, all contexts for the session are cleared.</p>"
          items:
            $ref: '#/components/schemas/ActiveContext'
          maxItems: 20
          minItems: 0
          type: array
      type: object
    PostContent_request:
      properties:
        inputStream:
          description: "<p> User input in PCM or Opus audio format or text format\
            \ as described in the <code>Content-Type</code> HTTP header. </p> <p>You\
            \ can stream audio data to Amazon Lex or you can create a local buffer\
            \ that captures all of the audio data before sending. In general, you\
            \ get better performance if you stream audio data rather than buffering\
            \ the data locally.</p>"
          type: string
      required:
      - inputStream
      type: object
    PostText_request:
      properties:
        sessionAttributes:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "<p>Application-specific information passed between Amazon\
            \ Lex and a client application.</p> <p>For more information, see <a href=\"\
            https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\"\
            >Setting Session Attributes</a>.</p>"
          type: object
        requestAttributes:
          additionalProperties:
            $ref: '#/components/schemas/String'
          description: "<p>Request-specific information passed between Amazon Lex\
            \ and a client application.</p> <p>The namespace <code>x-amz-lex:</code>\
            \ is reserved for special attributes. Don't create any request attributes\
            \ with the prefix <code>x-amz-lex:</code>.</p> <p>For more information,\
            \ see <a href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\"\
            >Setting Request Attributes</a>.</p>"
          type: object
        inputText:
          description: The text that the user entered (Amazon Lex interprets this
            text).
          format: password
          maxLength: 1024
          minLength: 1
          type: string
        activeContexts:
          description: "<p>A list of contexts active for the request. A context can\
            \ be activated when a previous intent is fulfilled, or by including the\
            \ context in the request,</p> <p>If you don't specify a list of contexts,\
            \ Amazon Lex will use the current list of contexts for the session. If\
            \ you specify an empty list, all contexts for the session are cleared.</p>"
          items:
            $ref: '#/components/schemas/ActiveContext'
          maxItems: 20
          minItems: 0
          type: array
      required:
      - inputText
      type: object
    GetSessionResponse_dialogAction:
      allOf:
      - $ref: '#/components/schemas/DialogAction'
      - description: Describes the current state of the bot.
      example:
        slots: ""
        fulfillmentState: ""
        messageFormat: ""
        intentName: ""
        type: ""
        message: ""
        slotToElicit: ""
    PostTextResponse_nluIntentConfidence:
      allOf:
      - $ref: '#/components/schemas/IntentConfidence'
      - description: "<p>Provides a score that indicates how confident Amazon Lex\
          \ is that the returned intent is the one that matches the user's intent.\
          \ The score is between 0.0 and 1.0. For more information, see <a href=\"\
          https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html\">Confidence\
          \ Scores</a>.</p> <p>The score is a relative score, not an absolute score.\
          \ The score may change based on improvements to Amazon Lex.</p>"
      example:
        score: ""
    PostTextResponse_sentimentResponse:
      allOf:
      - $ref: '#/components/schemas/SentimentResponse'
      - description: "<p>The sentiment expressed in and utterance.</p> <p>When the\
          \ bot is configured to send utterances to Amazon Comprehend for sentiment\
          \ analysis, this field contains the result of the analysis.</p>"
      example:
        sentimentScore: ""
        sentimentLabel: ""
    PostTextResponse_responseCard:
      allOf:
      - $ref: '#/components/schemas/ResponseCard'
      - description: "Represents the options that the user has to respond to the current\
          \ prompt. Response Card can come from the bot configuration (in the Amazon\
          \ Lex console, choose the settings button next to a slot) or from a code\
          \ hook (Lambda function). "
      example:
        version: ""
        contentType: ""
        genericAttachments: ""
    ActiveContext_timeToLive:
      allOf:
      - $ref: '#/components/schemas/ActiveContextTimeToLive'
      - description: The length of time or number of turns that a context remains
          active.
    PredictedIntent_nluIntentConfidence:
      allOf:
      - $ref: '#/components/schemas/IntentConfidence'
      - description: Indicates how confident Amazon Lex is that an intent satisfies
          the user's intent.
    PutSessionRequest_dialogAction:
      allOf:
      - $ref: '#/components/schemas/DialogAction'
      - description: Sets the next action that the bot should take to fulfill the
          conversation.
      example:
        slots: ""
        fulfillmentState: ""
        messageFormat: ""
        intentName: ""
        type: ""
        message: ""
        slotToElicit: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4

