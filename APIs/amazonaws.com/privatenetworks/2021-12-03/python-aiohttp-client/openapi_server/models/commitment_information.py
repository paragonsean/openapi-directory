# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commitment_information_commitment_configuration import CommitmentInformationCommitmentConfiguration
from openapi_server import util


class CommitmentInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commitment_configuration: CommitmentInformationCommitmentConfiguration=None, expires_on: datetime=None, start_at: datetime=None):
        """CommitmentInformation - a model defined in OpenAPI

        :param commitment_configuration: The commitment_configuration of this CommitmentInformation.
        :param expires_on: The expires_on of this CommitmentInformation.
        :param start_at: The start_at of this CommitmentInformation.
        """
        self.openapi_types = {
            'commitment_configuration': CommitmentInformationCommitmentConfiguration,
            'expires_on': datetime,
            'start_at': datetime
        }

        self.attribute_map = {
            'commitment_configuration': 'commitmentConfiguration',
            'expires_on': 'expiresOn',
            'start_at': 'startAt'
        }

        self._commitment_configuration = commitment_configuration
        self._expires_on = expires_on
        self._start_at = start_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitmentInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitmentInformation of this CommitmentInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commitment_configuration(self):
        """Gets the commitment_configuration of this CommitmentInformation.


        :return: The commitment_configuration of this CommitmentInformation.
        :rtype: CommitmentInformationCommitmentConfiguration
        """
        return self._commitment_configuration

    @commitment_configuration.setter
    def commitment_configuration(self, commitment_configuration):
        """Sets the commitment_configuration of this CommitmentInformation.


        :param commitment_configuration: The commitment_configuration of this CommitmentInformation.
        :type commitment_configuration: CommitmentInformationCommitmentConfiguration
        """
        if commitment_configuration is None:
            raise ValueError("Invalid value for `commitment_configuration`, must not be `None`")

        self._commitment_configuration = commitment_configuration

    @property
    def expires_on(self):
        """Gets the expires_on of this CommitmentInformation.


        :return: The expires_on of this CommitmentInformation.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this CommitmentInformation.


        :param expires_on: The expires_on of this CommitmentInformation.
        :type expires_on: datetime
        """

        self._expires_on = expires_on

    @property
    def start_at(self):
        """Gets the start_at of this CommitmentInformation.


        :return: The start_at of this CommitmentInformation.
        :rtype: datetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this CommitmentInformation.


        :param start_at: The start_at of this CommitmentInformation.
        :type start_at: datetime
        """

        self._start_at = start_at
