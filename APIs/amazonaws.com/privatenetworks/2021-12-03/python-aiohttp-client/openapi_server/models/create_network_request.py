# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateNetworkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, description: str=None, network_name: str=None, tags: Dict[str, str]=None):
        """CreateNetworkRequest - a model defined in OpenAPI

        :param client_token: The client_token of this CreateNetworkRequest.
        :param description: The description of this CreateNetworkRequest.
        :param network_name: The network_name of this CreateNetworkRequest.
        :param tags: The tags of this CreateNetworkRequest.
        """
        self.openapi_types = {
            'client_token': str,
            'description': str,
            'network_name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            'description': 'description',
            'network_name': 'networkName',
            'tags': 'tags'
        }

        self._client_token = client_token
        self._description = description
        self._network_name = network_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNetwork_request of this CreateNetworkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this CreateNetworkRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.

        :return: The client_token of this CreateNetworkRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateNetworkRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.

        :param client_token: The client_token of this CreateNetworkRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 100:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `100`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateNetworkRequest.

        The description of the network.

        :return: The description of this CreateNetworkRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNetworkRequest.

        The description of the network.

        :param description: The description of this CreateNetworkRequest.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def network_name(self):
        """Gets the network_name of this CreateNetworkRequest.

        The name of the network. You can't change the name after you create the network.

        :return: The network_name of this CreateNetworkRequest.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this CreateNetworkRequest.

        The name of the network. You can't change the name after you create the network.

        :param network_name: The network_name of this CreateNetworkRequest.
        :type network_name: str
        """
        if network_name is None:
            raise ValueError("Invalid value for `network_name`, must not be `None`")
        if network_name is not None and len(network_name) > 64:
            raise ValueError("Invalid value for `network_name`, length must be less than or equal to `64`")
        if network_name is not None and len(network_name) < 1:
            raise ValueError("Invalid value for `network_name`, length must be greater than or equal to `1`")
        if network_name is not None and not re.search(r'^[0-9a-zA-Z-]*$', network_name):
            raise ValueError("Invalid value for `network_name`, must be a follow pattern or equal to `/^[0-9a-zA-Z-]*$/`")

        self._network_name = network_name

    @property
    def tags(self):
        """Gets the tags of this CreateNetworkRequest.

         The tags to apply to the network. 

        :return: The tags of this CreateNetworkRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateNetworkRequest.

         The tags to apply to the network. 

        :param tags: The tags of this CreateNetworkRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
