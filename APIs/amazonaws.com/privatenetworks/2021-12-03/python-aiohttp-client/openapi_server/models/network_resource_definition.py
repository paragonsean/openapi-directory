# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_resource_definition_type import NetworkResourceDefinitionType
from openapi_server import util


class NetworkResourceDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, options: List=None, type: NetworkResourceDefinitionType=None):
        """NetworkResourceDefinition - a model defined in OpenAPI

        :param count: The count of this NetworkResourceDefinition.
        :param options: The options of this NetworkResourceDefinition.
        :param type: The type of this NetworkResourceDefinition.
        """
        self.openapi_types = {
            'count': int,
            'options': List,
            'type': NetworkResourceDefinitionType
        }

        self.attribute_map = {
            'count': 'count',
            'options': 'options',
            'type': 'type'
        }

        self._count = count
        self._options = options
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkResourceDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkResourceDefinition of this NetworkResourceDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this NetworkResourceDefinition.


        :return: The count of this NetworkResourceDefinition.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this NetworkResourceDefinition.


        :param count: The count of this NetworkResourceDefinition.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def options(self):
        """Gets the options of this NetworkResourceDefinition.


        :return: The options of this NetworkResourceDefinition.
        :rtype: List
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this NetworkResourceDefinition.


        :param options: The options of this NetworkResourceDefinition.
        :type options: List
        """

        self._options = options

    @property
    def type(self):
        """Gets the type of this NetworkResourceDefinition.


        :return: The type of this NetworkResourceDefinition.
        :rtype: NetworkResourceDefinitionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NetworkResourceDefinition.


        :param type: The type of this NetworkResourceDefinition.
        :type type: NetworkResourceDefinitionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
