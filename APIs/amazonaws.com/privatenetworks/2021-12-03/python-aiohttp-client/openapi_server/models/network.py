# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_status import NetworkStatus
from openapi_server import util


class Network(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, network_arn: str=None, network_name: str=None, status: NetworkStatus=None, status_reason: str=None):
        """Network - a model defined in OpenAPI

        :param created_at: The created_at of this Network.
        :param description: The description of this Network.
        :param network_arn: The network_arn of this Network.
        :param network_name: The network_name of this Network.
        :param status: The status of this Network.
        :param status_reason: The status_reason of this Network.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'network_arn': str,
            'network_name': str,
            'status': NetworkStatus,
            'status_reason': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'network_arn': 'networkArn',
            'network_name': 'networkName',
            'status': 'status',
            'status_reason': 'statusReason'
        }

        self._created_at = created_at
        self._description = description
        self._network_arn = network_arn
        self._network_name = network_name
        self._status = status
        self._status_reason = status_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Network':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Network of this Network.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Network.


        :return: The created_at of this Network.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Network.


        :param created_at: The created_at of this Network.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Network.


        :return: The description of this Network.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Network.


        :param description: The description of this Network.
        :type description: str
        """

        self._description = description

    @property
    def network_arn(self):
        """Gets the network_arn of this Network.


        :return: The network_arn of this Network.
        :rtype: str
        """
        return self._network_arn

    @network_arn.setter
    def network_arn(self, network_arn):
        """Sets the network_arn of this Network.


        :param network_arn: The network_arn of this Network.
        :type network_arn: str
        """
        if network_arn is None:
            raise ValueError("Invalid value for `network_arn`, must not be `None`")

        self._network_arn = network_arn

    @property
    def network_name(self):
        """Gets the network_name of this Network.


        :return: The network_name of this Network.
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this Network.


        :param network_name: The network_name of this Network.
        :type network_name: str
        """
        if network_name is None:
            raise ValueError("Invalid value for `network_name`, must not be `None`")

        self._network_name = network_name

    @property
    def status(self):
        """Gets the status of this Network.


        :return: The status of this Network.
        :rtype: NetworkStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Network.


        :param status: The status of this Network.
        :type status: NetworkStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this Network.


        :return: The status_reason of this Network.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this Network.


        :param status_reason: The status_reason of this Network.
        :type status_reason: str
        """

        self._status_reason = status_reason
