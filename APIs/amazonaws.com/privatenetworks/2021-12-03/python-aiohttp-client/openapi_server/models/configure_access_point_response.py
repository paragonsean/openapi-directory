# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configure_access_point_response_access_point import ConfigureAccessPointResponseAccessPoint
from openapi_server import util


class ConfigureAccessPointResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_point: ConfigureAccessPointResponseAccessPoint=None):
        """ConfigureAccessPointResponse - a model defined in OpenAPI

        :param access_point: The access_point of this ConfigureAccessPointResponse.
        """
        self.openapi_types = {
            'access_point': ConfigureAccessPointResponseAccessPoint
        }

        self.attribute_map = {
            'access_point': 'accessPoint'
        }

        self._access_point = access_point

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigureAccessPointResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigureAccessPointResponse of this ConfigureAccessPointResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_point(self):
        """Gets the access_point of this ConfigureAccessPointResponse.


        :return: The access_point of this ConfigureAccessPointResponse.
        :rtype: ConfigureAccessPointResponseAccessPoint
        """
        return self._access_point

    @access_point.setter
    def access_point(self, access_point):
        """Sets the access_point of this ConfigureAccessPointResponse.


        :param access_point: The access_point of this ConfigureAccessPointResponse.
        :type access_point: ConfigureAccessPointResponseAccessPoint
        """
        if access_point is None:
            raise ValueError("Invalid value for `access_point`, must not be `None`")

        self._access_point = access_point
