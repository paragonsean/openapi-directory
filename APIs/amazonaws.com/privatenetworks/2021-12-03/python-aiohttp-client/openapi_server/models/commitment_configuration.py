# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.commitment_length import CommitmentLength
from openapi_server import util


class CommitmentConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_renewal: bool=None, commitment_length: CommitmentLength=None):
        """CommitmentConfiguration - a model defined in OpenAPI

        :param automatic_renewal: The automatic_renewal of this CommitmentConfiguration.
        :param commitment_length: The commitment_length of this CommitmentConfiguration.
        """
        self.openapi_types = {
            'automatic_renewal': bool,
            'commitment_length': CommitmentLength
        }

        self.attribute_map = {
            'automatic_renewal': 'automaticRenewal',
            'commitment_length': 'commitmentLength'
        }

        self._automatic_renewal = automatic_renewal
        self._commitment_length = commitment_length

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommitmentConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommitmentConfiguration of this CommitmentConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_renewal(self):
        """Gets the automatic_renewal of this CommitmentConfiguration.


        :return: The automatic_renewal of this CommitmentConfiguration.
        :rtype: bool
        """
        return self._automatic_renewal

    @automatic_renewal.setter
    def automatic_renewal(self, automatic_renewal):
        """Sets the automatic_renewal of this CommitmentConfiguration.


        :param automatic_renewal: The automatic_renewal of this CommitmentConfiguration.
        :type automatic_renewal: bool
        """
        if automatic_renewal is None:
            raise ValueError("Invalid value for `automatic_renewal`, must not be `None`")

        self._automatic_renewal = automatic_renewal

    @property
    def commitment_length(self):
        """Gets the commitment_length of this CommitmentConfiguration.


        :return: The commitment_length of this CommitmentConfiguration.
        :rtype: CommitmentLength
        """
        return self._commitment_length

    @commitment_length.setter
    def commitment_length(self, commitment_length):
        """Sets the commitment_length of this CommitmentConfiguration.


        :param commitment_length: The commitment_length of this CommitmentConfiguration.
        :type commitment_length: CommitmentLength
        """
        if commitment_length is None:
            raise ValueError("Invalid value for `commitment_length`, must not be `None`")

        self._commitment_length = commitment_length
