# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_network_site_request_pending_plan import CreateNetworkSiteRequestPendingPlan
import re
from openapi_server import util


class CreateNetworkSiteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability_zone: str=None, availability_zone_id: str=None, client_token: str=None, description: str=None, network_arn: str=None, network_site_name: str=None, pending_plan: CreateNetworkSiteRequestPendingPlan=None, tags: Dict[str, str]=None):
        """CreateNetworkSiteRequest - a model defined in OpenAPI

        :param availability_zone: The availability_zone of this CreateNetworkSiteRequest.
        :param availability_zone_id: The availability_zone_id of this CreateNetworkSiteRequest.
        :param client_token: The client_token of this CreateNetworkSiteRequest.
        :param description: The description of this CreateNetworkSiteRequest.
        :param network_arn: The network_arn of this CreateNetworkSiteRequest.
        :param network_site_name: The network_site_name of this CreateNetworkSiteRequest.
        :param pending_plan: The pending_plan of this CreateNetworkSiteRequest.
        :param tags: The tags of this CreateNetworkSiteRequest.
        """
        self.openapi_types = {
            'availability_zone': str,
            'availability_zone_id': str,
            'client_token': str,
            'description': str,
            'network_arn': str,
            'network_site_name': str,
            'pending_plan': CreateNetworkSiteRequestPendingPlan,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'availability_zone': 'availabilityZone',
            'availability_zone_id': 'availabilityZoneId',
            'client_token': 'clientToken',
            'description': 'description',
            'network_arn': 'networkArn',
            'network_site_name': 'networkSiteName',
            'pending_plan': 'pendingPlan',
            'tags': 'tags'
        }

        self._availability_zone = availability_zone
        self._availability_zone_id = availability_zone_id
        self._client_token = client_token
        self._description = description
        self._network_arn = network_arn
        self._network_site_name = network_site_name
        self._pending_plan = pending_plan
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateNetworkSiteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateNetworkSite_request of this CreateNetworkSiteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability_zone(self):
        """Gets the availability_zone of this CreateNetworkSiteRequest.

        The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.

        :return: The availability_zone of this CreateNetworkSiteRequest.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this CreateNetworkSiteRequest.

        The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.

        :param availability_zone: The availability_zone of this CreateNetworkSiteRequest.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def availability_zone_id(self):
        """Gets the availability_zone_id of this CreateNetworkSiteRequest.

        The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.

        :return: The availability_zone_id of this CreateNetworkSiteRequest.
        :rtype: str
        """
        return self._availability_zone_id

    @availability_zone_id.setter
    def availability_zone_id(self, availability_zone_id):
        """Sets the availability_zone_id of this CreateNetworkSiteRequest.

        The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.

        :param availability_zone_id: The availability_zone_id of this CreateNetworkSiteRequest.
        :type availability_zone_id: str
        """

        self._availability_zone_id = availability_zone_id

    @property
    def client_token(self):
        """Gets the client_token of this CreateNetworkSiteRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.

        :return: The client_token of this CreateNetworkSiteRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateNetworkSiteRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.

        :param client_token: The client_token of this CreateNetworkSiteRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 100:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `100`")
        if client_token is not None and len(client_token) < 1:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `1`")

        self._client_token = client_token

    @property
    def description(self):
        """Gets the description of this CreateNetworkSiteRequest.

        The description of the site.

        :return: The description of this CreateNetworkSiteRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateNetworkSiteRequest.

        The description of the site.

        :param description: The description of this CreateNetworkSiteRequest.
        :type description: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def network_arn(self):
        """Gets the network_arn of this CreateNetworkSiteRequest.

        The Amazon Resource Name (ARN) of the network.

        :return: The network_arn of this CreateNetworkSiteRequest.
        :rtype: str
        """
        return self._network_arn

    @network_arn.setter
    def network_arn(self, network_arn):
        """Sets the network_arn of this CreateNetworkSiteRequest.

        The Amazon Resource Name (ARN) of the network.

        :param network_arn: The network_arn of this CreateNetworkSiteRequest.
        :type network_arn: str
        """
        if network_arn is None:
            raise ValueError("Invalid value for `network_arn`, must not be `None`")
        if network_arn is not None and not re.search(r'^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$', network_arn):
            raise ValueError("Invalid value for `network_arn`, must be a follow pattern or equal to `/^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$/`")

        self._network_arn = network_arn

    @property
    def network_site_name(self):
        """Gets the network_site_name of this CreateNetworkSiteRequest.

        The name of the site. You can't change the name after you create the site.

        :return: The network_site_name of this CreateNetworkSiteRequest.
        :rtype: str
        """
        return self._network_site_name

    @network_site_name.setter
    def network_site_name(self, network_site_name):
        """Sets the network_site_name of this CreateNetworkSiteRequest.

        The name of the site. You can't change the name after you create the site.

        :param network_site_name: The network_site_name of this CreateNetworkSiteRequest.
        :type network_site_name: str
        """
        if network_site_name is None:
            raise ValueError("Invalid value for `network_site_name`, must not be `None`")
        if network_site_name is not None and len(network_site_name) > 64:
            raise ValueError("Invalid value for `network_site_name`, length must be less than or equal to `64`")
        if network_site_name is not None and len(network_site_name) < 1:
            raise ValueError("Invalid value for `network_site_name`, length must be greater than or equal to `1`")
        if network_site_name is not None and not re.search(r'^[0-9a-zA-Z-]*$', network_site_name):
            raise ValueError("Invalid value for `network_site_name`, must be a follow pattern or equal to `/^[0-9a-zA-Z-]*$/`")

        self._network_site_name = network_site_name

    @property
    def pending_plan(self):
        """Gets the pending_plan of this CreateNetworkSiteRequest.


        :return: The pending_plan of this CreateNetworkSiteRequest.
        :rtype: CreateNetworkSiteRequestPendingPlan
        """
        return self._pending_plan

    @pending_plan.setter
    def pending_plan(self, pending_plan):
        """Sets the pending_plan of this CreateNetworkSiteRequest.


        :param pending_plan: The pending_plan of this CreateNetworkSiteRequest.
        :type pending_plan: CreateNetworkSiteRequestPendingPlan
        """

        self._pending_plan = pending_plan

    @property
    def tags(self):
        """Gets the tags of this CreateNetworkSiteRequest.

         The tags to apply to the network site. 

        :return: The tags of this CreateNetworkSiteRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateNetworkSiteRequest.

         The tags to apply to the network site. 

        :param tags: The tags of this CreateNetworkSiteRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
