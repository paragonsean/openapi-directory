# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListNetworkResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: Dict[str, List[str]]=None, max_results: int=None, network_arn: str=None, start_token: str=None):
        """ListNetworkResourcesRequest - a model defined in OpenAPI

        :param filters: The filters of this ListNetworkResourcesRequest.
        :param max_results: The max_results of this ListNetworkResourcesRequest.
        :param network_arn: The network_arn of this ListNetworkResourcesRequest.
        :param start_token: The start_token of this ListNetworkResourcesRequest.
        """
        self.openapi_types = {
            'filters': Dict[str, List[str]],
            'max_results': int,
            'network_arn': str,
            'start_token': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'max_results': 'maxResults',
            'network_arn': 'networkArn',
            'start_token': 'startToken'
        }

        self._filters = filters
        self._max_results = max_results
        self._network_arn = network_arn
        self._start_token = start_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListNetworkResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListNetworkResources_request of this ListNetworkResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this ListNetworkResourcesRequest.

        <p>The filters.</p> <ul> <li> <p> <code>ORDER</code> - The Amazon Resource Name (ARN) of the order.</p> </li> <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>DELETED</code> | <code>DELETING</code> | <code>PENDING</code> | <code>PENDING_RETURN</code> | <code>PROVISIONING</code> | <code>SHIPPED</code>).</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>

        :return: The filters of this ListNetworkResourcesRequest.
        :rtype: Dict[str, List[str]]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListNetworkResourcesRequest.

        <p>The filters.</p> <ul> <li> <p> <code>ORDER</code> - The Amazon Resource Name (ARN) of the order.</p> </li> <li> <p> <code>STATUS</code> - The status (<code>AVAILABLE</code> | <code>DELETED</code> | <code>DELETING</code> | <code>PENDING</code> | <code>PENDING_RETURN</code> | <code>PROVISIONING</code> | <code>SHIPPED</code>).</p> </li> </ul> <p>Filter values are case sensitive. If you specify multiple values for a filter, the values are joined with an <code>OR</code>, and the request returns all results that match any of the specified values.</p>

        :param filters: The filters of this ListNetworkResourcesRequest.
        :type filters: Dict[str, List[str]]
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListNetworkResourcesRequest.

        The maximum number of results to return.

        :return: The max_results of this ListNetworkResourcesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListNetworkResourcesRequest.

        The maximum number of results to return.

        :param max_results: The max_results of this ListNetworkResourcesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 20:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `20`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def network_arn(self):
        """Gets the network_arn of this ListNetworkResourcesRequest.

        The Amazon Resource Name (ARN) of the network.

        :return: The network_arn of this ListNetworkResourcesRequest.
        :rtype: str
        """
        return self._network_arn

    @network_arn.setter
    def network_arn(self, network_arn):
        """Sets the network_arn of this ListNetworkResourcesRequest.

        The Amazon Resource Name (ARN) of the network.

        :param network_arn: The network_arn of this ListNetworkResourcesRequest.
        :type network_arn: str
        """
        if network_arn is None:
            raise ValueError("Invalid value for `network_arn`, must not be `None`")
        if network_arn is not None and not re.search(r'^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$', network_arn):
            raise ValueError("Invalid value for `network_arn`, must be a follow pattern or equal to `/^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$/`")

        self._network_arn = network_arn

    @property
    def start_token(self):
        """Gets the start_token of this ListNetworkResourcesRequest.

        The token for the next page of results.

        :return: The start_token of this ListNetworkResourcesRequest.
        :rtype: str
        """
        return self._start_token

    @start_token.setter
    def start_token(self, start_token):
        """Sets the start_token of this ListNetworkResourcesRequest.

        The token for the next page of results.

        :param start_token: The start_token of this ListNetworkResourcesRequest.
        :type start_token: str
        """

        self._start_token = start_token
