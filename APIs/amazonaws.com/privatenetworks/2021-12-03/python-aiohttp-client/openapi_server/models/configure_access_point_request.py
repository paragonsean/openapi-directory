# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configure_access_point_request_position import ConfigureAccessPointRequestPosition
import re
from openapi_server import util


class ConfigureAccessPointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_point_arn: str=None, cpi_secret_key: str=None, cpi_user_id: str=None, cpi_user_password: str=None, cpi_username: str=None, position: ConfigureAccessPointRequestPosition=None):
        """ConfigureAccessPointRequest - a model defined in OpenAPI

        :param access_point_arn: The access_point_arn of this ConfigureAccessPointRequest.
        :param cpi_secret_key: The cpi_secret_key of this ConfigureAccessPointRequest.
        :param cpi_user_id: The cpi_user_id of this ConfigureAccessPointRequest.
        :param cpi_user_password: The cpi_user_password of this ConfigureAccessPointRequest.
        :param cpi_username: The cpi_username of this ConfigureAccessPointRequest.
        :param position: The position of this ConfigureAccessPointRequest.
        """
        self.openapi_types = {
            'access_point_arn': str,
            'cpi_secret_key': str,
            'cpi_user_id': str,
            'cpi_user_password': str,
            'cpi_username': str,
            'position': ConfigureAccessPointRequestPosition
        }

        self.attribute_map = {
            'access_point_arn': 'accessPointArn',
            'cpi_secret_key': 'cpiSecretKey',
            'cpi_user_id': 'cpiUserId',
            'cpi_user_password': 'cpiUserPassword',
            'cpi_username': 'cpiUsername',
            'position': 'position'
        }

        self._access_point_arn = access_point_arn
        self._cpi_secret_key = cpi_secret_key
        self._cpi_user_id = cpi_user_id
        self._cpi_user_password = cpi_user_password
        self._cpi_username = cpi_username
        self._position = position

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigureAccessPointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigureAccessPoint_request of this ConfigureAccessPointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_point_arn(self):
        """Gets the access_point_arn of this ConfigureAccessPointRequest.

        The Amazon Resource Name (ARN) of the network resource.

        :return: The access_point_arn of this ConfigureAccessPointRequest.
        :rtype: str
        """
        return self._access_point_arn

    @access_point_arn.setter
    def access_point_arn(self, access_point_arn):
        """Sets the access_point_arn of this ConfigureAccessPointRequest.

        The Amazon Resource Name (ARN) of the network resource.

        :param access_point_arn: The access_point_arn of this ConfigureAccessPointRequest.
        :type access_point_arn: str
        """
        if access_point_arn is None:
            raise ValueError("Invalid value for `access_point_arn`, must not be `None`")
        if access_point_arn is not None and not re.search(r'^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$', access_point_arn):
            raise ValueError("Invalid value for `access_point_arn`, must be a follow pattern or equal to `/^arn:aws:private-networks:[a-z0-9-]+:[^:]*:.*$/`")

        self._access_point_arn = access_point_arn

    @property
    def cpi_secret_key(self):
        """Gets the cpi_secret_key of this ConfigureAccessPointRequest.

        A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. 

        :return: The cpi_secret_key of this ConfigureAccessPointRequest.
        :rtype: str
        """
        return self._cpi_secret_key

    @cpi_secret_key.setter
    def cpi_secret_key(self, cpi_secret_key):
        """Sets the cpi_secret_key of this ConfigureAccessPointRequest.

        A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. 

        :param cpi_secret_key: The cpi_secret_key of this ConfigureAccessPointRequest.
        :type cpi_secret_key: str
        """
        if cpi_secret_key is not None and len(cpi_secret_key) > 100000:
            raise ValueError("Invalid value for `cpi_secret_key`, length must be less than or equal to `100000`")
        if cpi_secret_key is not None and len(cpi_secret_key) < 1:
            raise ValueError("Invalid value for `cpi_secret_key`, length must be greater than or equal to `1`")

        self._cpi_secret_key = cpi_secret_key

    @property
    def cpi_user_id(self):
        """Gets the cpi_user_id of this ConfigureAccessPointRequest.

        The CPI user ID of the CPI user who is certifying the coordinates of the network resource. 

        :return: The cpi_user_id of this ConfigureAccessPointRequest.
        :rtype: str
        """
        return self._cpi_user_id

    @cpi_user_id.setter
    def cpi_user_id(self, cpi_user_id):
        """Sets the cpi_user_id of this ConfigureAccessPointRequest.

        The CPI user ID of the CPI user who is certifying the coordinates of the network resource. 

        :param cpi_user_id: The cpi_user_id of this ConfigureAccessPointRequest.
        :type cpi_user_id: str
        """
        if cpi_user_id is not None and len(cpi_user_id) > 4096:
            raise ValueError("Invalid value for `cpi_user_id`, length must be less than or equal to `4096`")
        if cpi_user_id is not None and len(cpi_user_id) < 1:
            raise ValueError("Invalid value for `cpi_user_id`, length must be greater than or equal to `1`")

        self._cpi_user_id = cpi_user_id

    @property
    def cpi_user_password(self):
        """Gets the cpi_user_password of this ConfigureAccessPointRequest.

        The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.

        :return: The cpi_user_password of this ConfigureAccessPointRequest.
        :rtype: str
        """
        return self._cpi_user_password

    @cpi_user_password.setter
    def cpi_user_password(self, cpi_user_password):
        """Sets the cpi_user_password of this ConfigureAccessPointRequest.

        The CPI password associated with the CPI certificate in <code>cpiSecretKey</code>.

        :param cpi_user_password: The cpi_user_password of this ConfigureAccessPointRequest.
        :type cpi_user_password: str
        """
        if cpi_user_password is not None and len(cpi_user_password) > 4096:
            raise ValueError("Invalid value for `cpi_user_password`, length must be less than or equal to `4096`")
        if cpi_user_password is not None and len(cpi_user_password) < 1:
            raise ValueError("Invalid value for `cpi_user_password`, length must be greater than or equal to `1`")

        self._cpi_user_password = cpi_user_password

    @property
    def cpi_username(self):
        """Gets the cpi_username of this ConfigureAccessPointRequest.

        The CPI user name of the CPI user who is certifying the coordinates of the radio unit.

        :return: The cpi_username of this ConfigureAccessPointRequest.
        :rtype: str
        """
        return self._cpi_username

    @cpi_username.setter
    def cpi_username(self, cpi_username):
        """Sets the cpi_username of this ConfigureAccessPointRequest.

        The CPI user name of the CPI user who is certifying the coordinates of the radio unit.

        :param cpi_username: The cpi_username of this ConfigureAccessPointRequest.
        :type cpi_username: str
        """
        if cpi_username is not None and len(cpi_username) > 4096:
            raise ValueError("Invalid value for `cpi_username`, length must be less than or equal to `4096`")
        if cpi_username is not None and len(cpi_username) < 1:
            raise ValueError("Invalid value for `cpi_username`, length must be greater than or equal to `1`")

        self._cpi_username = cpi_username

    @property
    def position(self):
        """Gets the position of this ConfigureAccessPointRequest.


        :return: The position of this ConfigureAccessPointRequest.
        :rtype: ConfigureAccessPointRequestPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ConfigureAccessPointRequest.


        :param position: The position of this ConfigureAccessPointRequest.
        :type position: ConfigureAccessPointRequestPosition
        """

        self._position = position
