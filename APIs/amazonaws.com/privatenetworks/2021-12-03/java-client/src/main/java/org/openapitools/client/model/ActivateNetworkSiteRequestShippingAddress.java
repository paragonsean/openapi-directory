/*
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ActivateNetworkSiteRequestShippingAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.702058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActivateNetworkSiteRequestShippingAddress {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE_OR_PROVINCE = "stateOrProvince";
  @SerializedName(SERIALIZED_NAME_STATE_OR_PROVINCE)
  private String stateOrProvince;

  public static final String SERIALIZED_NAME_STREET1 = "street1";
  @SerializedName(SERIALIZED_NAME_STREET1)
  private String street1;

  public static final String SERIALIZED_NAME_STREET2 = "street2";
  @SerializedName(SERIALIZED_NAME_STREET2)
  private String street2;

  public static final String SERIALIZED_NAME_STREET3 = "street3";
  @SerializedName(SERIALIZED_NAME_STREET3)
  private String street3;

  public ActivateNetworkSiteRequestShippingAddress() {
  }

  public ActivateNetworkSiteRequestShippingAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public ActivateNetworkSiteRequestShippingAddress company(String company) {
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  public String getCompany() {
    return company;
  }

  public void setCompany(String company) {
    this.company = company;
  }


  public ActivateNetworkSiteRequestShippingAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nonnull
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public ActivateNetworkSiteRequestShippingAddress emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * Get emailAddress
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public ActivateNetworkSiteRequestShippingAddress name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ActivateNetworkSiteRequestShippingAddress phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ActivateNetworkSiteRequestShippingAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public ActivateNetworkSiteRequestShippingAddress stateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
    return this;
  }

  /**
   * Get stateOrProvince
   * @return stateOrProvince
   */
  @javax.annotation.Nonnull
  public String getStateOrProvince() {
    return stateOrProvince;
  }

  public void setStateOrProvince(String stateOrProvince) {
    this.stateOrProvince = stateOrProvince;
  }


  public ActivateNetworkSiteRequestShippingAddress street1(String street1) {
    this.street1 = street1;
    return this;
  }

  /**
   * Get street1
   * @return street1
   */
  @javax.annotation.Nonnull
  public String getStreet1() {
    return street1;
  }

  public void setStreet1(String street1) {
    this.street1 = street1;
  }


  public ActivateNetworkSiteRequestShippingAddress street2(String street2) {
    this.street2 = street2;
    return this;
  }

  /**
   * Get street2
   * @return street2
   */
  @javax.annotation.Nullable
  public String getStreet2() {
    return street2;
  }

  public void setStreet2(String street2) {
    this.street2 = street2;
  }


  public ActivateNetworkSiteRequestShippingAddress street3(String street3) {
    this.street3 = street3;
    return this;
  }

  /**
   * Get street3
   * @return street3
   */
  @javax.annotation.Nullable
  public String getStreet3() {
    return street3;
  }

  public void setStreet3(String street3) {
    this.street3 = street3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActivateNetworkSiteRequestShippingAddress activateNetworkSiteRequestShippingAddress = (ActivateNetworkSiteRequestShippingAddress) o;
    return Objects.equals(this.city, activateNetworkSiteRequestShippingAddress.city) &&
        Objects.equals(this.company, activateNetworkSiteRequestShippingAddress.company) &&
        Objects.equals(this.country, activateNetworkSiteRequestShippingAddress.country) &&
        Objects.equals(this.emailAddress, activateNetworkSiteRequestShippingAddress.emailAddress) &&
        Objects.equals(this.name, activateNetworkSiteRequestShippingAddress.name) &&
        Objects.equals(this.phoneNumber, activateNetworkSiteRequestShippingAddress.phoneNumber) &&
        Objects.equals(this.postalCode, activateNetworkSiteRequestShippingAddress.postalCode) &&
        Objects.equals(this.stateOrProvince, activateNetworkSiteRequestShippingAddress.stateOrProvince) &&
        Objects.equals(this.street1, activateNetworkSiteRequestShippingAddress.street1) &&
        Objects.equals(this.street2, activateNetworkSiteRequestShippingAddress.street2) &&
        Objects.equals(this.street3, activateNetworkSiteRequestShippingAddress.street3);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, company, country, emailAddress, name, phoneNumber, postalCode, stateOrProvince, street1, street2, street3);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActivateNetworkSiteRequestShippingAddress {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    stateOrProvince: ").append(toIndentedString(stateOrProvince)).append("\n");
    sb.append("    street1: ").append(toIndentedString(street1)).append("\n");
    sb.append("    street2: ").append(toIndentedString(street2)).append("\n");
    sb.append("    street3: ").append(toIndentedString(street3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("company");
    openapiFields.add("country");
    openapiFields.add("emailAddress");
    openapiFields.add("name");
    openapiFields.add("phoneNumber");
    openapiFields.add("postalCode");
    openapiFields.add("stateOrProvince");
    openapiFields.add("street1");
    openapiFields.add("street2");
    openapiFields.add("street3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("postalCode");
    openapiRequiredFields.add("stateOrProvince");
    openapiRequiredFields.add("street1");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActivateNetworkSiteRequestShippingAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActivateNetworkSiteRequestShippingAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActivateNetworkSiteRequestShippingAddress is not found in the empty JSON string", ActivateNetworkSiteRequestShippingAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActivateNetworkSiteRequestShippingAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActivateNetworkSiteRequestShippingAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActivateNetworkSiteRequestShippingAddress.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `city`
      String.validateJsonElement(jsonObj.get("city"));
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("company"));
      }
      // validate the required field `country`
      String.validateJsonElement(jsonObj.get("country"));
      // validate the optional field `emailAddress`
      if (jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("emailAddress"));
      }
      // validate the required field `name`
      String.validateJsonElement(jsonObj.get("name"));
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      // validate the required field `postalCode`
      String.validateJsonElement(jsonObj.get("postalCode"));
      // validate the required field `stateOrProvince`
      String.validateJsonElement(jsonObj.get("stateOrProvince"));
      // validate the required field `street1`
      String.validateJsonElement(jsonObj.get("street1"));
      // validate the optional field `street2`
      if (jsonObj.get("street2") != null && !jsonObj.get("street2").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("street2"));
      }
      // validate the optional field `street3`
      if (jsonObj.get("street3") != null && !jsonObj.get("street3").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("street3"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActivateNetworkSiteRequestShippingAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActivateNetworkSiteRequestShippingAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActivateNetworkSiteRequestShippingAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActivateNetworkSiteRequestShippingAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ActivateNetworkSiteRequestShippingAddress>() {
           @Override
           public void write(JsonWriter out, ActivateNetworkSiteRequestShippingAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActivateNetworkSiteRequestShippingAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActivateNetworkSiteRequestShippingAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActivateNetworkSiteRequestShippingAddress
   * @throws IOException if the JSON string is invalid with respect to ActivateNetworkSiteRequestShippingAddress
   */
  public static ActivateNetworkSiteRequestShippingAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActivateNetworkSiteRequestShippingAddress.class);
  }

  /**
   * Convert an instance of ActivateNetworkSiteRequestShippingAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

