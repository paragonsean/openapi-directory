/*
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateNetworkSiteRequestPendingPlan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateNetworkSitePlanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.702058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateNetworkSitePlanRequest {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_NETWORK_SITE_ARN = "networkSiteArn";
  @SerializedName(SERIALIZED_NAME_NETWORK_SITE_ARN)
  private String networkSiteArn;

  public static final String SERIALIZED_NAME_PENDING_PLAN = "pendingPlan";
  @SerializedName(SERIALIZED_NAME_PENDING_PLAN)
  private CreateNetworkSiteRequestPendingPlan pendingPlan;

  public UpdateNetworkSitePlanRequest() {
  }

  public UpdateNetworkSitePlanRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\&quot;&gt;How to ensure idempotency&lt;/a&gt;.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public UpdateNetworkSitePlanRequest networkSiteArn(String networkSiteArn) {
    this.networkSiteArn = networkSiteArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the network site.
   * @return networkSiteArn
   */
  @javax.annotation.Nonnull
  public String getNetworkSiteArn() {
    return networkSiteArn;
  }

  public void setNetworkSiteArn(String networkSiteArn) {
    this.networkSiteArn = networkSiteArn;
  }


  public UpdateNetworkSitePlanRequest pendingPlan(CreateNetworkSiteRequestPendingPlan pendingPlan) {
    this.pendingPlan = pendingPlan;
    return this;
  }

  /**
   * Get pendingPlan
   * @return pendingPlan
   */
  @javax.annotation.Nonnull
  public CreateNetworkSiteRequestPendingPlan getPendingPlan() {
    return pendingPlan;
  }

  public void setPendingPlan(CreateNetworkSiteRequestPendingPlan pendingPlan) {
    this.pendingPlan = pendingPlan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateNetworkSitePlanRequest updateNetworkSitePlanRequest = (UpdateNetworkSitePlanRequest) o;
    return Objects.equals(this.clientToken, updateNetworkSitePlanRequest.clientToken) &&
        Objects.equals(this.networkSiteArn, updateNetworkSitePlanRequest.networkSiteArn) &&
        Objects.equals(this.pendingPlan, updateNetworkSitePlanRequest.pendingPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, networkSiteArn, pendingPlan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateNetworkSitePlanRequest {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    networkSiteArn: ").append(toIndentedString(networkSiteArn)).append("\n");
    sb.append("    pendingPlan: ").append(toIndentedString(pendingPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientToken");
    openapiFields.add("networkSiteArn");
    openapiFields.add("pendingPlan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("networkSiteArn");
    openapiRequiredFields.add("pendingPlan");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateNetworkSitePlanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateNetworkSitePlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateNetworkSitePlanRequest is not found in the empty JSON string", UpdateNetworkSitePlanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateNetworkSitePlanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateNetworkSitePlanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateNetworkSitePlanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
      if (!jsonObj.get("networkSiteArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkSiteArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkSiteArn").toString()));
      }
      // validate the required field `pendingPlan`
      CreateNetworkSiteRequestPendingPlan.validateJsonElement(jsonObj.get("pendingPlan"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateNetworkSitePlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateNetworkSitePlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateNetworkSitePlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateNetworkSitePlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateNetworkSitePlanRequest>() {
           @Override
           public void write(JsonWriter out, UpdateNetworkSitePlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateNetworkSitePlanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateNetworkSitePlanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateNetworkSitePlanRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateNetworkSitePlanRequest
   */
  public static UpdateNetworkSitePlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateNetworkSitePlanRequest.class);
  }

  /**
   * Convert an instance of UpdateNetworkSitePlanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

