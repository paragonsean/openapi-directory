/*
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigureAccessPointRequestPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigureAccessPointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.702058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigureAccessPointRequest {
  public static final String SERIALIZED_NAME_ACCESS_POINT_ARN = "accessPointArn";
  @SerializedName(SERIALIZED_NAME_ACCESS_POINT_ARN)
  private String accessPointArn;

  public static final String SERIALIZED_NAME_CPI_SECRET_KEY = "cpiSecretKey";
  @SerializedName(SERIALIZED_NAME_CPI_SECRET_KEY)
  private String cpiSecretKey;

  public static final String SERIALIZED_NAME_CPI_USER_ID = "cpiUserId";
  @SerializedName(SERIALIZED_NAME_CPI_USER_ID)
  private String cpiUserId;

  public static final String SERIALIZED_NAME_CPI_USER_PASSWORD = "cpiUserPassword";
  @SerializedName(SERIALIZED_NAME_CPI_USER_PASSWORD)
  private String cpiUserPassword;

  public static final String SERIALIZED_NAME_CPI_USERNAME = "cpiUsername";
  @SerializedName(SERIALIZED_NAME_CPI_USERNAME)
  private String cpiUsername;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private ConfigureAccessPointRequestPosition position;

  public ConfigureAccessPointRequest() {
  }

  public ConfigureAccessPointRequest accessPointArn(String accessPointArn) {
    this.accessPointArn = accessPointArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the network resource.
   * @return accessPointArn
   */
  @javax.annotation.Nonnull
  public String getAccessPointArn() {
    return accessPointArn;
  }

  public void setAccessPointArn(String accessPointArn) {
    this.accessPointArn = accessPointArn;
  }


  public ConfigureAccessPointRequest cpiSecretKey(String cpiSecretKey) {
    this.cpiSecretKey = cpiSecretKey;
    return this;
  }

  /**
   * A Base64 encoded string of the CPI certificate associated with the CPI user who is certifying the coordinates of the network resource. 
   * @return cpiSecretKey
   */
  @javax.annotation.Nullable
  public String getCpiSecretKey() {
    return cpiSecretKey;
  }

  public void setCpiSecretKey(String cpiSecretKey) {
    this.cpiSecretKey = cpiSecretKey;
  }


  public ConfigureAccessPointRequest cpiUserId(String cpiUserId) {
    this.cpiUserId = cpiUserId;
    return this;
  }

  /**
   * The CPI user ID of the CPI user who is certifying the coordinates of the network resource. 
   * @return cpiUserId
   */
  @javax.annotation.Nullable
  public String getCpiUserId() {
    return cpiUserId;
  }

  public void setCpiUserId(String cpiUserId) {
    this.cpiUserId = cpiUserId;
  }


  public ConfigureAccessPointRequest cpiUserPassword(String cpiUserPassword) {
    this.cpiUserPassword = cpiUserPassword;
    return this;
  }

  /**
   * The CPI password associated with the CPI certificate in &lt;code&gt;cpiSecretKey&lt;/code&gt;.
   * @return cpiUserPassword
   */
  @javax.annotation.Nullable
  public String getCpiUserPassword() {
    return cpiUserPassword;
  }

  public void setCpiUserPassword(String cpiUserPassword) {
    this.cpiUserPassword = cpiUserPassword;
  }


  public ConfigureAccessPointRequest cpiUsername(String cpiUsername) {
    this.cpiUsername = cpiUsername;
    return this;
  }

  /**
   * The CPI user name of the CPI user who is certifying the coordinates of the radio unit.
   * @return cpiUsername
   */
  @javax.annotation.Nullable
  public String getCpiUsername() {
    return cpiUsername;
  }

  public void setCpiUsername(String cpiUsername) {
    this.cpiUsername = cpiUsername;
  }


  public ConfigureAccessPointRequest position(ConfigureAccessPointRequestPosition position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public ConfigureAccessPointRequestPosition getPosition() {
    return position;
  }

  public void setPosition(ConfigureAccessPointRequestPosition position) {
    this.position = position;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigureAccessPointRequest configureAccessPointRequest = (ConfigureAccessPointRequest) o;
    return Objects.equals(this.accessPointArn, configureAccessPointRequest.accessPointArn) &&
        Objects.equals(this.cpiSecretKey, configureAccessPointRequest.cpiSecretKey) &&
        Objects.equals(this.cpiUserId, configureAccessPointRequest.cpiUserId) &&
        Objects.equals(this.cpiUserPassword, configureAccessPointRequest.cpiUserPassword) &&
        Objects.equals(this.cpiUsername, configureAccessPointRequest.cpiUsername) &&
        Objects.equals(this.position, configureAccessPointRequest.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPointArn, cpiSecretKey, cpiUserId, cpiUserPassword, cpiUsername, position);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigureAccessPointRequest {\n");
    sb.append("    accessPointArn: ").append(toIndentedString(accessPointArn)).append("\n");
    sb.append("    cpiSecretKey: ").append("*").append("\n");
    sb.append("    cpiUserId: ").append("*").append("\n");
    sb.append("    cpiUserPassword: ").append("*").append("\n");
    sb.append("    cpiUsername: ").append("*").append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPointArn");
    openapiFields.add("cpiSecretKey");
    openapiFields.add("cpiUserId");
    openapiFields.add("cpiUserPassword");
    openapiFields.add("cpiUsername");
    openapiFields.add("position");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessPointArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigureAccessPointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigureAccessPointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigureAccessPointRequest is not found in the empty JSON string", ConfigureAccessPointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigureAccessPointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigureAccessPointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConfigureAccessPointRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accessPointArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessPointArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessPointArn").toString()));
      }
      if ((jsonObj.get("cpiSecretKey") != null && !jsonObj.get("cpiSecretKey").isJsonNull()) && !jsonObj.get("cpiSecretKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpiSecretKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpiSecretKey").toString()));
      }
      if ((jsonObj.get("cpiUserId") != null && !jsonObj.get("cpiUserId").isJsonNull()) && !jsonObj.get("cpiUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpiUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpiUserId").toString()));
      }
      if ((jsonObj.get("cpiUserPassword") != null && !jsonObj.get("cpiUserPassword").isJsonNull()) && !jsonObj.get("cpiUserPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpiUserPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpiUserPassword").toString()));
      }
      if ((jsonObj.get("cpiUsername") != null && !jsonObj.get("cpiUsername").isJsonNull()) && !jsonObj.get("cpiUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpiUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpiUsername").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        ConfigureAccessPointRequestPosition.validateJsonElement(jsonObj.get("position"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigureAccessPointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigureAccessPointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigureAccessPointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigureAccessPointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigureAccessPointRequest>() {
           @Override
           public void write(JsonWriter out, ConfigureAccessPointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigureAccessPointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigureAccessPointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigureAccessPointRequest
   * @throws IOException if the JSON string is invalid with respect to ConfigureAccessPointRequest
   */
  public static ConfigureAccessPointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigureAccessPointRequest.class);
  }

  /**
   * Convert an instance of ConfigureAccessPointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

