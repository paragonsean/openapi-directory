/*
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReturnInformationShippingAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a request to return a network resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.702058-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReturnInformation {
  public static final String SERIALIZED_NAME_REPLACEMENT_ORDER_ARN = "replacementOrderArn";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_ORDER_ARN)
  private String replacementOrderArn;

  public static final String SERIALIZED_NAME_RETURN_REASON = "returnReason";
  @SerializedName(SERIALIZED_NAME_RETURN_REASON)
  private String returnReason;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private ReturnInformationShippingAddress shippingAddress;

  public static final String SERIALIZED_NAME_SHIPPING_LABEL = "shippingLabel";
  @SerializedName(SERIALIZED_NAME_SHIPPING_LABEL)
  private String shippingLabel;

  public ReturnInformation() {
  }

  public ReturnInformation replacementOrderArn(String replacementOrderArn) {
    this.replacementOrderArn = replacementOrderArn;
    return this;
  }

  /**
   * Get replacementOrderArn
   * @return replacementOrderArn
   */
  @javax.annotation.Nullable
  public String getReplacementOrderArn() {
    return replacementOrderArn;
  }

  public void setReplacementOrderArn(String replacementOrderArn) {
    this.replacementOrderArn = replacementOrderArn;
  }


  public ReturnInformation returnReason(String returnReason) {
    this.returnReason = returnReason;
    return this;
  }

  /**
   * Get returnReason
   * @return returnReason
   */
  @javax.annotation.Nullable
  public String getReturnReason() {
    return returnReason;
  }

  public void setReturnReason(String returnReason) {
    this.returnReason = returnReason;
  }


  public ReturnInformation shippingAddress(ReturnInformationShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nullable
  public ReturnInformationShippingAddress getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(ReturnInformationShippingAddress shippingAddress) {
    this.shippingAddress = shippingAddress;
  }


  public ReturnInformation shippingLabel(String shippingLabel) {
    this.shippingLabel = shippingLabel;
    return this;
  }

  /**
   * Get shippingLabel
   * @return shippingLabel
   */
  @javax.annotation.Nullable
  public String getShippingLabel() {
    return shippingLabel;
  }

  public void setShippingLabel(String shippingLabel) {
    this.shippingLabel = shippingLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReturnInformation returnInformation = (ReturnInformation) o;
    return Objects.equals(this.replacementOrderArn, returnInformation.replacementOrderArn) &&
        Objects.equals(this.returnReason, returnInformation.returnReason) &&
        Objects.equals(this.shippingAddress, returnInformation.shippingAddress) &&
        Objects.equals(this.shippingLabel, returnInformation.shippingLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(replacementOrderArn, returnReason, shippingAddress, shippingLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReturnInformation {\n");
    sb.append("    replacementOrderArn: ").append(toIndentedString(replacementOrderArn)).append("\n");
    sb.append("    returnReason: ").append(toIndentedString(returnReason)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("    shippingLabel: ").append(toIndentedString(shippingLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("replacementOrderArn");
    openapiFields.add("returnReason");
    openapiFields.add("shippingAddress");
    openapiFields.add("shippingLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReturnInformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReturnInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReturnInformation is not found in the empty JSON string", ReturnInformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReturnInformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReturnInformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `replacementOrderArn`
      if (jsonObj.get("replacementOrderArn") != null && !jsonObj.get("replacementOrderArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("replacementOrderArn"));
      }
      // validate the optional field `returnReason`
      if (jsonObj.get("returnReason") != null && !jsonObj.get("returnReason").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("returnReason"));
      }
      // validate the optional field `shippingAddress`
      if (jsonObj.get("shippingAddress") != null && !jsonObj.get("shippingAddress").isJsonNull()) {
        ReturnInformationShippingAddress.validateJsonElement(jsonObj.get("shippingAddress"));
      }
      // validate the optional field `shippingLabel`
      if (jsonObj.get("shippingLabel") != null && !jsonObj.get("shippingLabel").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("shippingLabel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReturnInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReturnInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReturnInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReturnInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<ReturnInformation>() {
           @Override
           public void write(JsonWriter out, ReturnInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReturnInformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReturnInformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReturnInformation
   * @throws IOException if the JSON string is invalid with respect to ReturnInformation
   */
  public static ReturnInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReturnInformation.class);
  }

  /**
   * Convert an instance of ReturnInformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

