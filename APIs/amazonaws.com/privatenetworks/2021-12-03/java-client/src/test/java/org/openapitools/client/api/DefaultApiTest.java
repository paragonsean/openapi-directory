/*
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcknowledgeOrderReceiptRequest;
import org.openapitools.client.model.AcknowledgeOrderReceiptResponse;
import org.openapitools.client.model.ActivateDeviceIdentifierRequest;
import org.openapitools.client.model.ActivateDeviceIdentifierResponse;
import org.openapitools.client.model.ActivateNetworkSiteRequest;
import org.openapitools.client.model.ActivateNetworkSiteResponse;
import org.openapitools.client.model.ConfigureAccessPointRequest;
import org.openapitools.client.model.ConfigureAccessPointResponse;
import org.openapitools.client.model.CreateNetworkRequest;
import org.openapitools.client.model.CreateNetworkResponse;
import org.openapitools.client.model.CreateNetworkSiteRequest;
import org.openapitools.client.model.CreateNetworkSiteResponse;
import org.openapitools.client.model.DeactivateDeviceIdentifierResponse;
import org.openapitools.client.model.DeleteNetworkResponse;
import org.openapitools.client.model.DeleteNetworkSiteResponse;
import org.openapitools.client.model.GetDeviceIdentifierResponse;
import org.openapitools.client.model.GetNetworkResourceResponse;
import org.openapitools.client.model.GetNetworkResponse;
import org.openapitools.client.model.GetNetworkSiteResponse;
import org.openapitools.client.model.GetOrderResponse;
import org.openapitools.client.model.ListDeviceIdentifiersRequest;
import org.openapitools.client.model.ListDeviceIdentifiersResponse;
import org.openapitools.client.model.ListNetworkResourcesRequest;
import org.openapitools.client.model.ListNetworkResourcesResponse;
import org.openapitools.client.model.ListNetworkSitesRequest;
import org.openapitools.client.model.ListNetworkSitesResponse;
import org.openapitools.client.model.ListNetworksRequest;
import org.openapitools.client.model.ListNetworksResponse;
import org.openapitools.client.model.ListOrdersRequest;
import org.openapitools.client.model.ListOrdersResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PingResponse;
import org.openapitools.client.model.StartNetworkResourceUpdateRequest;
import org.openapitools.client.model.StartNetworkResourceUpdateResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateNetworkSitePlanRequest;
import org.openapitools.client.model.UpdateNetworkSiteRequest;
import org.openapitools.client.model.UpdateNetworkSiteResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Acknowledges that the specified network order was received.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acknowledgeOrderReceiptTest() throws ApiException {
        AcknowledgeOrderReceiptRequest acknowledgeOrderReceiptRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AcknowledgeOrderReceiptResponse response = api.acknowledgeOrderReceipt(acknowledgeOrderReceiptRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Activates the specified device identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateDeviceIdentifierTest() throws ApiException {
        ActivateDeviceIdentifierRequest activateDeviceIdentifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ActivateDeviceIdentifierResponse response = api.activateDeviceIdentifier(activateDeviceIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Activates the specified network site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateNetworkSiteTest() throws ApiException {
        ActivateNetworkSiteRequest activateNetworkSiteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ActivateNetworkSiteResponse response = api.activateNetworkSite(activateNetworkSiteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Configures the specified network resource. &lt;/p&gt; &lt;p&gt; Use this action to specify the geographic position of the hardware. You must provide Certified Professional Installer (CPI) credentials in the request so that we can obtain spectrum grants. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/private-networks/latest/userguide/radio-units.html\&quot;&gt;Radio units&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Private 5G User Guide&lt;/i&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureAccessPointTest() throws ApiException {
        ConfigureAccessPointRequest configureAccessPointRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ConfigureAccessPointResponse response = api.configureAccessPoint(configureAccessPointRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkTest() throws ApiException {
        CreateNetworkRequest createNetworkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNetworkResponse response = api.createNetwork(createNetworkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a network site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNetworkSiteTest() throws ApiException {
        CreateNetworkSiteRequest createNetworkSiteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateNetworkSiteResponse response = api.createNetworkSite(createNetworkSiteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deactivates the specified device identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateDeviceIdentifierTest() throws ApiException {
        ActivateDeviceIdentifierRequest activateDeviceIdentifierRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeactivateDeviceIdentifierResponse response = api.deactivateDeviceIdentifier(activateDeviceIdentifierRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified network. You must delete network sites before you delete the network. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/private-networks/latest/APIReference/API_DeleteNetworkSite.html\&quot;&gt;DeleteNetworkSite&lt;/a&gt; in the &lt;i&gt;API Reference for Amazon Web Services Private 5G&lt;/i&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkTest() throws ApiException {
        String networkArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        DeleteNetworkResponse response = api.deleteNetwork(networkArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Deletes the specified network site. Return the hardware after you delete the network site. You are responsible for minimum charges. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/private-networks/latest/userguide/hardware-maintenance.html\&quot;&gt;Hardware returns&lt;/a&gt; in the &lt;i&gt;Amazon Web Services Private 5G User Guide&lt;/i&gt;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteNetworkSiteTest() throws ApiException {
        String networkSiteArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String clientToken = null;
        DeleteNetworkSiteResponse response = api.deleteNetworkSite(networkSiteArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, clientToken);
        // TODO: test validations
    }

    /**
     * Gets the specified device identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeviceIdentifierTest() throws ApiException {
        String deviceIdentifierArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeviceIdentifierResponse response = api.getDeviceIdentifier(deviceIdentifierArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkTest() throws ApiException {
        String networkArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNetworkResponse response = api.getNetwork(networkArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified network resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkResourceTest() throws ApiException {
        String networkResourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNetworkResourceResponse response = api.getNetworkResource(networkResourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified network site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetworkSiteTest() throws ApiException {
        String networkSiteArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetNetworkSiteResponse response = api.getNetworkSite(networkSiteArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the specified order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        String orderArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetOrderResponse response = api.getOrder(orderArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists device identifiers. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of an order, the status of device identifiers, or the ARN of the traffic group.&lt;/p&gt; &lt;p&gt;If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDeviceIdentifiersTest() throws ApiException {
        ListDeviceIdentifiersRequest listDeviceIdentifiersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String startToken = null;
        ListDeviceIdentifiersResponse response = api.listDeviceIdentifiers(listDeviceIdentifiersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, startToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists network resources. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of an order or the status of network resources.&lt;/p&gt; &lt;p&gt;If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkResourcesTest() throws ApiException {
        ListNetworkResourcesRequest listNetworkResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String startToken = null;
        ListNetworkResourcesResponse response = api.listNetworkResources(listNetworkResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, startToken);
        // TODO: test validations
    }

    /**
     * Lists network sites. Add filters to your request to return a more specific list of results. Use filters to match the status of the network site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworkSitesTest() throws ApiException {
        ListNetworkSitesRequest listNetworkSitesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String startToken = null;
        ListNetworkSitesResponse response = api.listNetworkSites(listNetworkSitesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, startToken);
        // TODO: test validations
    }

    /**
     * Lists networks. Add filters to your request to return a more specific list of results. Use filters to match the status of the network.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNetworksTest() throws ApiException {
        ListNetworksRequest listNetworksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String startToken = null;
        ListNetworksResponse response = api.listNetworks(listNetworksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, startToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists orders. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of the network site or the status of the order.&lt;/p&gt; &lt;p&gt;If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOrdersTest() throws ApiException {
        ListOrdersRequest listOrdersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String startToken = null;
        ListOrdersResponse response = api.listOrders(listOrdersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, startToken);
        // TODO: test validations
    }

    /**
     * Lists the tags for the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Checks the health of the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PingResponse response = api.ping(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Use this action to do the following tasks:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Update the duration and renewal status of the commitment period for a radio unit. The update goes into effect immediately.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Request a replacement for a network resource.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Request that you return a network resource.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;After you submit a request to replace or return a network resource, the status of the network resource changes to &lt;code&gt;CREATING_SHIPPING_LABEL&lt;/code&gt;. The shipping label is available when the status of the network resource is &lt;code&gt;PENDING_RETURN&lt;/code&gt;. After the network resource is successfully returned, its status changes to &lt;code&gt;DELETED&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/private-networks/latest/userguide/radio-units.html#return-radio-unit\&quot;&gt;Return a radio unit&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startNetworkResourceUpdateTest() throws ApiException {
        StartNetworkResourceUpdateRequest startNetworkResourceUpdateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartNetworkResourceUpdateResponse response = api.startNetworkResourceUpdate(startNetworkResourceUpdateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     *  Adds tags to the specified resource. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from the specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified network site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSiteTest() throws ApiException {
        UpdateNetworkSiteRequest updateNetworkSiteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateNetworkSiteResponse response = api.updateNetworkSite(updateNetworkSiteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the specified network site plan.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNetworkSitePlanTest() throws ApiException {
        UpdateNetworkSitePlanRequest updateNetworkSitePlanRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateNetworkSiteResponse response = api.updateNetworkSitePlan(updateNetworkSitePlanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
