/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivateNetworkSiteResponse_networkSite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivateNetworkSiteResponse_networkSite::OAIActivateNetworkSiteResponse_networkSite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivateNetworkSiteResponse_networkSite::OAIActivateNetworkSiteResponse_networkSite() {
    this->initializeModel();
}

OAIActivateNetworkSiteResponse_networkSite::~OAIActivateNetworkSiteResponse_networkSite() {}

void OAIActivateNetworkSiteResponse_networkSite::initializeModel() {

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_availability_zone_id_isSet = false;
    m_availability_zone_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_plan_isSet = false;
    m_current_plan_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_network_arn_isSet = false;
    m_network_arn_isValid = false;

    m_network_site_arn_isSet = false;
    m_network_site_arn_isValid = false;

    m_network_site_name_isSet = false;
    m_network_site_name_isValid = false;

    m_pending_plan_isSet = false;
    m_pending_plan_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIActivateNetworkSiteResponse_networkSite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivateNetworkSiteResponse_networkSite::fromJsonObject(QJsonObject json) {

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("availabilityZone")]);
    m_availability_zone_isSet = !json[QString("availabilityZone")].isNull() && m_availability_zone_isValid;

    m_availability_zone_id_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_id, json[QString("availabilityZoneId")]);
    m_availability_zone_id_isSet = !json[QString("availabilityZoneId")].isNull() && m_availability_zone_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_current_plan_isValid = ::OpenAPI::fromJsonValue(m_current_plan, json[QString("currentPlan")]);
    m_current_plan_isSet = !json[QString("currentPlan")].isNull() && m_current_plan_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_network_arn_isValid = ::OpenAPI::fromJsonValue(m_network_arn, json[QString("networkArn")]);
    m_network_arn_isSet = !json[QString("networkArn")].isNull() && m_network_arn_isValid;

    m_network_site_arn_isValid = ::OpenAPI::fromJsonValue(m_network_site_arn, json[QString("networkSiteArn")]);
    m_network_site_arn_isSet = !json[QString("networkSiteArn")].isNull() && m_network_site_arn_isValid;

    m_network_site_name_isValid = ::OpenAPI::fromJsonValue(m_network_site_name, json[QString("networkSiteName")]);
    m_network_site_name_isSet = !json[QString("networkSiteName")].isNull() && m_network_site_name_isValid;

    m_pending_plan_isValid = ::OpenAPI::fromJsonValue(m_pending_plan, json[QString("pendingPlan")]);
    m_pending_plan_isSet = !json[QString("pendingPlan")].isNull() && m_pending_plan_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("statusReason")]);
    m_status_reason_isSet = !json[QString("statusReason")].isNull() && m_status_reason_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivateNetworkSiteResponse_networkSite::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zone_isSet) {
        obj.insert(QString("availabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_availability_zone_id_isSet) {
        obj.insert(QString("availabilityZoneId"), ::OpenAPI::toJsonValue(m_availability_zone_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_plan.isSet()) {
        obj.insert(QString("currentPlan"), ::OpenAPI::toJsonValue(m_current_plan));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_network_arn_isSet) {
        obj.insert(QString("networkArn"), ::OpenAPI::toJsonValue(m_network_arn));
    }
    if (m_network_site_arn_isSet) {
        obj.insert(QString("networkSiteArn"), ::OpenAPI::toJsonValue(m_network_site_arn));
    }
    if (m_network_site_name_isSet) {
        obj.insert(QString("networkSiteName"), ::OpenAPI::toJsonValue(m_network_site_name));
    }
    if (m_pending_plan.isSet()) {
        obj.insert(QString("pendingPlan"), ::OpenAPI::toJsonValue(m_pending_plan));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason_isSet) {
        obj.insert(QString("statusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

QString OAIActivateNetworkSiteResponse_networkSite::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIActivateNetworkSiteResponse_networkSite::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::getAvailabilityZoneId() const {
    return m_availability_zone_id;
}
void OAIActivateNetworkSiteResponse_networkSite::setAvailabilityZoneId(const QString &availability_zone_id) {
    m_availability_zone_id = availability_zone_id;
    m_availability_zone_id_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_availability_zone_id_Set() const{
    return m_availability_zone_id_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_availability_zone_id_Valid() const{
    return m_availability_zone_id_isValid;
}

QDateTime OAIActivateNetworkSiteResponse_networkSite::getCreatedAt() const {
    return m_created_at;
}
void OAIActivateNetworkSiteResponse_networkSite::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAINetworkSite_currentPlan OAIActivateNetworkSiteResponse_networkSite::getCurrentPlan() const {
    return m_current_plan;
}
void OAIActivateNetworkSiteResponse_networkSite::setCurrentPlan(const OAINetworkSite_currentPlan &current_plan) {
    m_current_plan = current_plan;
    m_current_plan_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_current_plan_Set() const{
    return m_current_plan_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_current_plan_Valid() const{
    return m_current_plan_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::getDescription() const {
    return m_description;
}
void OAIActivateNetworkSiteResponse_networkSite::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_description_Set() const{
    return m_description_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::getNetworkArn() const {
    return m_network_arn;
}
void OAIActivateNetworkSiteResponse_networkSite::setNetworkArn(const QString &network_arn) {
    m_network_arn = network_arn;
    m_network_arn_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_network_arn_Set() const{
    return m_network_arn_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_network_arn_Valid() const{
    return m_network_arn_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::getNetworkSiteArn() const {
    return m_network_site_arn;
}
void OAIActivateNetworkSiteResponse_networkSite::setNetworkSiteArn(const QString &network_site_arn) {
    m_network_site_arn = network_site_arn;
    m_network_site_arn_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_network_site_arn_Set() const{
    return m_network_site_arn_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_network_site_arn_Valid() const{
    return m_network_site_arn_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::getNetworkSiteName() const {
    return m_network_site_name;
}
void OAIActivateNetworkSiteResponse_networkSite::setNetworkSiteName(const QString &network_site_name) {
    m_network_site_name = network_site_name;
    m_network_site_name_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_network_site_name_Set() const{
    return m_network_site_name_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_network_site_name_Valid() const{
    return m_network_site_name_isValid;
}

OAINetworkSite_pendingPlan OAIActivateNetworkSiteResponse_networkSite::getPendingPlan() const {
    return m_pending_plan;
}
void OAIActivateNetworkSiteResponse_networkSite::setPendingPlan(const OAINetworkSite_pendingPlan &pending_plan) {
    m_pending_plan = pending_plan;
    m_pending_plan_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_pending_plan_Set() const{
    return m_pending_plan_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_pending_plan_Valid() const{
    return m_pending_plan_isValid;
}

OAINetworkSiteStatus OAIActivateNetworkSiteResponse_networkSite::getStatus() const {
    return m_status;
}
void OAIActivateNetworkSiteResponse_networkSite::setStatus(const OAINetworkSiteStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIActivateNetworkSiteResponse_networkSite::getStatusReason() const {
    return m_status_reason;
}
void OAIActivateNetworkSiteResponse_networkSite::setStatusReason(const QString &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIActivateNetworkSiteResponse_networkSite::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIActivateNetworkSiteResponse_networkSite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_site_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_plan.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivateNetworkSiteResponse_networkSite::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_arn_isValid && m_network_site_arn_isValid && m_network_site_name_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
