/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActivateDeviceIdentifierResponse_deviceIdentifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActivateDeviceIdentifierResponse_deviceIdentifier::OAIActivateDeviceIdentifierResponse_deviceIdentifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActivateDeviceIdentifierResponse_deviceIdentifier::OAIActivateDeviceIdentifierResponse_deviceIdentifier() {
    this->initializeModel();
}

OAIActivateDeviceIdentifierResponse_deviceIdentifier::~OAIActivateDeviceIdentifierResponse_deviceIdentifier() {}

void OAIActivateDeviceIdentifierResponse_deviceIdentifier::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_device_identifier_arn_isSet = false;
    m_device_identifier_arn_isValid = false;

    m_iccid_isSet = false;
    m_iccid_isValid = false;

    m_imsi_isSet = false;
    m_imsi_isValid = false;

    m_network_arn_isSet = false;
    m_network_arn_isValid = false;

    m_order_arn_isSet = false;
    m_order_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_traffic_group_arn_isSet = false;
    m_traffic_group_arn_isValid = false;

    m_vendor_isSet = false;
    m_vendor_isValid = false;
}

void OAIActivateDeviceIdentifierResponse_deviceIdentifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActivateDeviceIdentifierResponse_deviceIdentifier::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_device_identifier_arn_isValid = ::OpenAPI::fromJsonValue(m_device_identifier_arn, json[QString("deviceIdentifierArn")]);
    m_device_identifier_arn_isSet = !json[QString("deviceIdentifierArn")].isNull() && m_device_identifier_arn_isValid;

    m_iccid_isValid = ::OpenAPI::fromJsonValue(m_iccid, json[QString("iccid")]);
    m_iccid_isSet = !json[QString("iccid")].isNull() && m_iccid_isValid;

    m_imsi_isValid = ::OpenAPI::fromJsonValue(m_imsi, json[QString("imsi")]);
    m_imsi_isSet = !json[QString("imsi")].isNull() && m_imsi_isValid;

    m_network_arn_isValid = ::OpenAPI::fromJsonValue(m_network_arn, json[QString("networkArn")]);
    m_network_arn_isSet = !json[QString("networkArn")].isNull() && m_network_arn_isValid;

    m_order_arn_isValid = ::OpenAPI::fromJsonValue(m_order_arn, json[QString("orderArn")]);
    m_order_arn_isSet = !json[QString("orderArn")].isNull() && m_order_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_traffic_group_arn_isValid = ::OpenAPI::fromJsonValue(m_traffic_group_arn, json[QString("trafficGroupArn")]);
    m_traffic_group_arn_isSet = !json[QString("trafficGroupArn")].isNull() && m_traffic_group_arn_isValid;

    m_vendor_isValid = ::OpenAPI::fromJsonValue(m_vendor, json[QString("vendor")]);
    m_vendor_isSet = !json[QString("vendor")].isNull() && m_vendor_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActivateDeviceIdentifierResponse_deviceIdentifier::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_device_identifier_arn_isSet) {
        obj.insert(QString("deviceIdentifierArn"), ::OpenAPI::toJsonValue(m_device_identifier_arn));
    }
    if (m_iccid_isSet) {
        obj.insert(QString("iccid"), ::OpenAPI::toJsonValue(m_iccid));
    }
    if (m_imsi_isSet) {
        obj.insert(QString("imsi"), ::OpenAPI::toJsonValue(m_imsi));
    }
    if (m_network_arn_isSet) {
        obj.insert(QString("networkArn"), ::OpenAPI::toJsonValue(m_network_arn));
    }
    if (m_order_arn_isSet) {
        obj.insert(QString("orderArn"), ::OpenAPI::toJsonValue(m_order_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_traffic_group_arn_isSet) {
        obj.insert(QString("trafficGroupArn"), ::OpenAPI::toJsonValue(m_traffic_group_arn));
    }
    if (m_vendor_isSet) {
        obj.insert(QString("vendor"), ::OpenAPI::toJsonValue(m_vendor));
    }
    return obj;
}

QDateTime OAIActivateDeviceIdentifierResponse_deviceIdentifier::getCreatedAt() const {
    return m_created_at;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getDeviceIdentifierArn() const {
    return m_device_identifier_arn;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setDeviceIdentifierArn(const QString &device_identifier_arn) {
    m_device_identifier_arn = device_identifier_arn;
    m_device_identifier_arn_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_device_identifier_arn_Set() const{
    return m_device_identifier_arn_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_device_identifier_arn_Valid() const{
    return m_device_identifier_arn_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getIccid() const {
    return m_iccid;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setIccid(const QString &iccid) {
    m_iccid = iccid;
    m_iccid_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_iccid_Set() const{
    return m_iccid_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_iccid_Valid() const{
    return m_iccid_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getImsi() const {
    return m_imsi;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setImsi(const QString &imsi) {
    m_imsi = imsi;
    m_imsi_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_imsi_Set() const{
    return m_imsi_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_imsi_Valid() const{
    return m_imsi_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getNetworkArn() const {
    return m_network_arn;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setNetworkArn(const QString &network_arn) {
    m_network_arn = network_arn;
    m_network_arn_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_network_arn_Set() const{
    return m_network_arn_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_network_arn_Valid() const{
    return m_network_arn_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getOrderArn() const {
    return m_order_arn;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setOrderArn(const QString &order_arn) {
    m_order_arn = order_arn;
    m_order_arn_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_order_arn_Set() const{
    return m_order_arn_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_order_arn_Valid() const{
    return m_order_arn_isValid;
}

OAIDeviceIdentifierStatus OAIActivateDeviceIdentifierResponse_deviceIdentifier::getStatus() const {
    return m_status;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setStatus(const OAIDeviceIdentifierStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_status_Set() const{
    return m_status_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getTrafficGroupArn() const {
    return m_traffic_group_arn;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setTrafficGroupArn(const QString &traffic_group_arn) {
    m_traffic_group_arn = traffic_group_arn;
    m_traffic_group_arn_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_traffic_group_arn_Set() const{
    return m_traffic_group_arn_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_traffic_group_arn_Valid() const{
    return m_traffic_group_arn_isValid;
}

QString OAIActivateDeviceIdentifierResponse_deviceIdentifier::getVendor() const {
    return m_vendor;
}
void OAIActivateDeviceIdentifierResponse_deviceIdentifier::setVendor(const QString &vendor) {
    m_vendor = vendor;
    m_vendor_isSet = true;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_vendor_Set() const{
    return m_vendor_isSet;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::is_vendor_Valid() const{
    return m_vendor_isValid;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_identifier_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iccid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_imsi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vendor_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActivateDeviceIdentifierResponse_deviceIdentifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
