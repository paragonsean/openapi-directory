/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkResource_commitmentInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkResource_commitmentInformation::OAINetworkResource_commitmentInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkResource_commitmentInformation::OAINetworkResource_commitmentInformation() {
    this->initializeModel();
}

OAINetworkResource_commitmentInformation::~OAINetworkResource_commitmentInformation() {}

void OAINetworkResource_commitmentInformation::initializeModel() {

    m_commitment_configuration_isSet = false;
    m_commitment_configuration_isValid = false;

    m_expires_on_isSet = false;
    m_expires_on_isValid = false;

    m_start_at_isSet = false;
    m_start_at_isValid = false;
}

void OAINetworkResource_commitmentInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkResource_commitmentInformation::fromJsonObject(QJsonObject json) {

    m_commitment_configuration_isValid = ::OpenAPI::fromJsonValue(m_commitment_configuration, json[QString("commitmentConfiguration")]);
    m_commitment_configuration_isSet = !json[QString("commitmentConfiguration")].isNull() && m_commitment_configuration_isValid;

    m_expires_on_isValid = ::OpenAPI::fromJsonValue(m_expires_on, json[QString("expiresOn")]);
    m_expires_on_isSet = !json[QString("expiresOn")].isNull() && m_expires_on_isValid;

    m_start_at_isValid = ::OpenAPI::fromJsonValue(m_start_at, json[QString("startAt")]);
    m_start_at_isSet = !json[QString("startAt")].isNull() && m_start_at_isValid;
}

QString OAINetworkResource_commitmentInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkResource_commitmentInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_commitment_configuration.isSet()) {
        obj.insert(QString("commitmentConfiguration"), ::OpenAPI::toJsonValue(m_commitment_configuration));
    }
    if (m_expires_on_isSet) {
        obj.insert(QString("expiresOn"), ::OpenAPI::toJsonValue(m_expires_on));
    }
    if (m_start_at_isSet) {
        obj.insert(QString("startAt"), ::OpenAPI::toJsonValue(m_start_at));
    }
    return obj;
}

OAICommitmentInformation_commitmentConfiguration OAINetworkResource_commitmentInformation::getCommitmentConfiguration() const {
    return m_commitment_configuration;
}
void OAINetworkResource_commitmentInformation::setCommitmentConfiguration(const OAICommitmentInformation_commitmentConfiguration &commitment_configuration) {
    m_commitment_configuration = commitment_configuration;
    m_commitment_configuration_isSet = true;
}

bool OAINetworkResource_commitmentInformation::is_commitment_configuration_Set() const{
    return m_commitment_configuration_isSet;
}

bool OAINetworkResource_commitmentInformation::is_commitment_configuration_Valid() const{
    return m_commitment_configuration_isValid;
}

QDateTime OAINetworkResource_commitmentInformation::getExpiresOn() const {
    return m_expires_on;
}
void OAINetworkResource_commitmentInformation::setExpiresOn(const QDateTime &expires_on) {
    m_expires_on = expires_on;
    m_expires_on_isSet = true;
}

bool OAINetworkResource_commitmentInformation::is_expires_on_Set() const{
    return m_expires_on_isSet;
}

bool OAINetworkResource_commitmentInformation::is_expires_on_Valid() const{
    return m_expires_on_isValid;
}

QDateTime OAINetworkResource_commitmentInformation::getStartAt() const {
    return m_start_at;
}
void OAINetworkResource_commitmentInformation::setStartAt(const QDateTime &start_at) {
    m_start_at = start_at;
    m_start_at_isSet = true;
}

bool OAINetworkResource_commitmentInformation::is_start_at_Set() const{
    return m_start_at_isSet;
}

bool OAINetworkResource_commitmentInformation::is_start_at_Valid() const{
    return m_start_at_isValid;
}

bool OAINetworkResource_commitmentInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commitment_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkResource_commitmentInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commitment_configuration_isValid && true;
}

} // namespace OpenAPI
