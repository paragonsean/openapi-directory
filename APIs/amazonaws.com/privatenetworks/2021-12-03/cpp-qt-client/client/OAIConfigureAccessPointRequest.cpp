/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureAccessPointRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureAccessPointRequest::OAIConfigureAccessPointRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureAccessPointRequest::OAIConfigureAccessPointRequest() {
    this->initializeModel();
}

OAIConfigureAccessPointRequest::~OAIConfigureAccessPointRequest() {}

void OAIConfigureAccessPointRequest::initializeModel() {

    m_access_point_arn_isSet = false;
    m_access_point_arn_isValid = false;

    m_cpi_secret_key_isSet = false;
    m_cpi_secret_key_isValid = false;

    m_cpi_user_id_isSet = false;
    m_cpi_user_id_isValid = false;

    m_cpi_user_password_isSet = false;
    m_cpi_user_password_isValid = false;

    m_cpi_username_isSet = false;
    m_cpi_username_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;
}

void OAIConfigureAccessPointRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureAccessPointRequest::fromJsonObject(QJsonObject json) {

    m_access_point_arn_isValid = ::OpenAPI::fromJsonValue(m_access_point_arn, json[QString("accessPointArn")]);
    m_access_point_arn_isSet = !json[QString("accessPointArn")].isNull() && m_access_point_arn_isValid;

    m_cpi_secret_key_isValid = ::OpenAPI::fromJsonValue(m_cpi_secret_key, json[QString("cpiSecretKey")]);
    m_cpi_secret_key_isSet = !json[QString("cpiSecretKey")].isNull() && m_cpi_secret_key_isValid;

    m_cpi_user_id_isValid = ::OpenAPI::fromJsonValue(m_cpi_user_id, json[QString("cpiUserId")]);
    m_cpi_user_id_isSet = !json[QString("cpiUserId")].isNull() && m_cpi_user_id_isValid;

    m_cpi_user_password_isValid = ::OpenAPI::fromJsonValue(m_cpi_user_password, json[QString("cpiUserPassword")]);
    m_cpi_user_password_isSet = !json[QString("cpiUserPassword")].isNull() && m_cpi_user_password_isValid;

    m_cpi_username_isValid = ::OpenAPI::fromJsonValue(m_cpi_username, json[QString("cpiUsername")]);
    m_cpi_username_isSet = !json[QString("cpiUsername")].isNull() && m_cpi_username_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;
}

QString OAIConfigureAccessPointRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureAccessPointRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_point_arn_isSet) {
        obj.insert(QString("accessPointArn"), ::OpenAPI::toJsonValue(m_access_point_arn));
    }
    if (m_cpi_secret_key_isSet) {
        obj.insert(QString("cpiSecretKey"), ::OpenAPI::toJsonValue(m_cpi_secret_key));
    }
    if (m_cpi_user_id_isSet) {
        obj.insert(QString("cpiUserId"), ::OpenAPI::toJsonValue(m_cpi_user_id));
    }
    if (m_cpi_user_password_isSet) {
        obj.insert(QString("cpiUserPassword"), ::OpenAPI::toJsonValue(m_cpi_user_password));
    }
    if (m_cpi_username_isSet) {
        obj.insert(QString("cpiUsername"), ::OpenAPI::toJsonValue(m_cpi_username));
    }
    if (m_position.isSet()) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    return obj;
}

QString OAIConfigureAccessPointRequest::getAccessPointArn() const {
    return m_access_point_arn;
}
void OAIConfigureAccessPointRequest::setAccessPointArn(const QString &access_point_arn) {
    m_access_point_arn = access_point_arn;
    m_access_point_arn_isSet = true;
}

bool OAIConfigureAccessPointRequest::is_access_point_arn_Set() const{
    return m_access_point_arn_isSet;
}

bool OAIConfigureAccessPointRequest::is_access_point_arn_Valid() const{
    return m_access_point_arn_isValid;
}

QString OAIConfigureAccessPointRequest::getCpiSecretKey() const {
    return m_cpi_secret_key;
}
void OAIConfigureAccessPointRequest::setCpiSecretKey(const QString &cpi_secret_key) {
    m_cpi_secret_key = cpi_secret_key;
    m_cpi_secret_key_isSet = true;
}

bool OAIConfigureAccessPointRequest::is_cpi_secret_key_Set() const{
    return m_cpi_secret_key_isSet;
}

bool OAIConfigureAccessPointRequest::is_cpi_secret_key_Valid() const{
    return m_cpi_secret_key_isValid;
}

QString OAIConfigureAccessPointRequest::getCpiUserId() const {
    return m_cpi_user_id;
}
void OAIConfigureAccessPointRequest::setCpiUserId(const QString &cpi_user_id) {
    m_cpi_user_id = cpi_user_id;
    m_cpi_user_id_isSet = true;
}

bool OAIConfigureAccessPointRequest::is_cpi_user_id_Set() const{
    return m_cpi_user_id_isSet;
}

bool OAIConfigureAccessPointRequest::is_cpi_user_id_Valid() const{
    return m_cpi_user_id_isValid;
}

QString OAIConfigureAccessPointRequest::getCpiUserPassword() const {
    return m_cpi_user_password;
}
void OAIConfigureAccessPointRequest::setCpiUserPassword(const QString &cpi_user_password) {
    m_cpi_user_password = cpi_user_password;
    m_cpi_user_password_isSet = true;
}

bool OAIConfigureAccessPointRequest::is_cpi_user_password_Set() const{
    return m_cpi_user_password_isSet;
}

bool OAIConfigureAccessPointRequest::is_cpi_user_password_Valid() const{
    return m_cpi_user_password_isValid;
}

QString OAIConfigureAccessPointRequest::getCpiUsername() const {
    return m_cpi_username;
}
void OAIConfigureAccessPointRequest::setCpiUsername(const QString &cpi_username) {
    m_cpi_username = cpi_username;
    m_cpi_username_isSet = true;
}

bool OAIConfigureAccessPointRequest::is_cpi_username_Set() const{
    return m_cpi_username_isSet;
}

bool OAIConfigureAccessPointRequest::is_cpi_username_Valid() const{
    return m_cpi_username_isValid;
}

OAIConfigureAccessPointRequest_position OAIConfigureAccessPointRequest::getPosition() const {
    return m_position;
}
void OAIConfigureAccessPointRequest::setPosition(const OAIConfigureAccessPointRequest_position &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIConfigureAccessPointRequest::is_position_Set() const{
    return m_position_isSet;
}

bool OAIConfigureAccessPointRequest::is_position_Valid() const{
    return m_position_isValid;
}

bool OAIConfigureAccessPointRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_point_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpi_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpi_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpi_user_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpi_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureAccessPointRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_point_arn_isValid && true;
}

} // namespace OpenAPI
