/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNetwork_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNetwork_request::OAICreateNetwork_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNetwork_request::OAICreateNetwork_request() {
    this->initializeModel();
}

OAICreateNetwork_request::~OAICreateNetwork_request() {}

void OAICreateNetwork_request::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_network_name_isSet = false;
    m_network_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateNetwork_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNetwork_request::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_network_name_isValid = ::OpenAPI::fromJsonValue(m_network_name, json[QString("networkName")]);
    m_network_name_isSet = !json[QString("networkName")].isNull() && m_network_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateNetwork_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNetwork_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_network_name_isSet) {
        obj.insert(QString("networkName"), ::OpenAPI::toJsonValue(m_network_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateNetwork_request::getClientToken() const {
    return m_client_token;
}
void OAICreateNetwork_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateNetwork_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateNetwork_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAICreateNetwork_request::getDescription() const {
    return m_description;
}
void OAICreateNetwork_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateNetwork_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateNetwork_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateNetwork_request::getNetworkName() const {
    return m_network_name;
}
void OAICreateNetwork_request::setNetworkName(const QString &network_name) {
    m_network_name = network_name;
    m_network_name_isSet = true;
}

bool OAICreateNetwork_request::is_network_name_Set() const{
    return m_network_name_isSet;
}

bool OAICreateNetwork_request::is_network_name_Valid() const{
    return m_network_name_isValid;
}

QMap<QString, QString> OAICreateNetwork_request::getTags() const {
    return m_tags;
}
void OAICreateNetwork_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNetwork_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNetwork_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateNetwork_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNetwork_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_name_isValid && true;
}

} // namespace OpenAPI
