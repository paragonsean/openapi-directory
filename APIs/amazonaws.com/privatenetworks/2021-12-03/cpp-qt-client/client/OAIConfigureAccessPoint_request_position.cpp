/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigureAccessPoint_request_position.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigureAccessPoint_request_position::OAIConfigureAccessPoint_request_position(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigureAccessPoint_request_position::OAIConfigureAccessPoint_request_position() {
    this->initializeModel();
}

OAIConfigureAccessPoint_request_position::~OAIConfigureAccessPoint_request_position() {}

void OAIConfigureAccessPoint_request_position::initializeModel() {

    m_elevation_isSet = false;
    m_elevation_isValid = false;

    m_elevation_reference_isSet = false;
    m_elevation_reference_isValid = false;

    m_elevation_unit_isSet = false;
    m_elevation_unit_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;
}

void OAIConfigureAccessPoint_request_position::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigureAccessPoint_request_position::fromJsonObject(QJsonObject json) {

    m_elevation_isValid = ::OpenAPI::fromJsonValue(m_elevation, json[QString("elevation")]);
    m_elevation_isSet = !json[QString("elevation")].isNull() && m_elevation_isValid;

    m_elevation_reference_isValid = ::OpenAPI::fromJsonValue(m_elevation_reference, json[QString("elevationReference")]);
    m_elevation_reference_isSet = !json[QString("elevationReference")].isNull() && m_elevation_reference_isValid;

    m_elevation_unit_isValid = ::OpenAPI::fromJsonValue(m_elevation_unit, json[QString("elevationUnit")]);
    m_elevation_unit_isSet = !json[QString("elevationUnit")].isNull() && m_elevation_unit_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;
}

QString OAIConfigureAccessPoint_request_position::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigureAccessPoint_request_position::asJsonObject() const {
    QJsonObject obj;
    if (m_elevation_isSet) {
        obj.insert(QString("elevation"), ::OpenAPI::toJsonValue(m_elevation));
    }
    if (m_elevation_reference.isSet()) {
        obj.insert(QString("elevationReference"), ::OpenAPI::toJsonValue(m_elevation_reference));
    }
    if (m_elevation_unit.isSet()) {
        obj.insert(QString("elevationUnit"), ::OpenAPI::toJsonValue(m_elevation_unit));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    return obj;
}

double OAIConfigureAccessPoint_request_position::getElevation() const {
    return m_elevation;
}
void OAIConfigureAccessPoint_request_position::setElevation(const double &elevation) {
    m_elevation = elevation;
    m_elevation_isSet = true;
}

bool OAIConfigureAccessPoint_request_position::is_elevation_Set() const{
    return m_elevation_isSet;
}

bool OAIConfigureAccessPoint_request_position::is_elevation_Valid() const{
    return m_elevation_isValid;
}

OAIElevationReference OAIConfigureAccessPoint_request_position::getElevationReference() const {
    return m_elevation_reference;
}
void OAIConfigureAccessPoint_request_position::setElevationReference(const OAIElevationReference &elevation_reference) {
    m_elevation_reference = elevation_reference;
    m_elevation_reference_isSet = true;
}

bool OAIConfigureAccessPoint_request_position::is_elevation_reference_Set() const{
    return m_elevation_reference_isSet;
}

bool OAIConfigureAccessPoint_request_position::is_elevation_reference_Valid() const{
    return m_elevation_reference_isValid;
}

OAIElevationUnit OAIConfigureAccessPoint_request_position::getElevationUnit() const {
    return m_elevation_unit;
}
void OAIConfigureAccessPoint_request_position::setElevationUnit(const OAIElevationUnit &elevation_unit) {
    m_elevation_unit = elevation_unit;
    m_elevation_unit_isSet = true;
}

bool OAIConfigureAccessPoint_request_position::is_elevation_unit_Set() const{
    return m_elevation_unit_isSet;
}

bool OAIConfigureAccessPoint_request_position::is_elevation_unit_Valid() const{
    return m_elevation_unit_isValid;
}

double OAIConfigureAccessPoint_request_position::getLatitude() const {
    return m_latitude;
}
void OAIConfigureAccessPoint_request_position::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIConfigureAccessPoint_request_position::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIConfigureAccessPoint_request_position::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAIConfigureAccessPoint_request_position::getLongitude() const {
    return m_longitude;
}
void OAIConfigureAccessPoint_request_position::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIConfigureAccessPoint_request_position::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIConfigureAccessPoint_request_position::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIConfigureAccessPoint_request_position::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_elevation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_elevation_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigureAccessPoint_request_position::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
