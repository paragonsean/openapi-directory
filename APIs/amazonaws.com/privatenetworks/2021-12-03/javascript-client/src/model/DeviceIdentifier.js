/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceIdentifierStatus from './DeviceIdentifierStatus';

/**
 * The DeviceIdentifier model module.
 * @module model/DeviceIdentifier
 * @version 2021-12-03
 */
class DeviceIdentifier {
    /**
     * Constructs a new <code>DeviceIdentifier</code>.
     * Information about a subscriber of a device that can use a network.
     * @alias module:model/DeviceIdentifier
     */
    constructor() { 
        
        DeviceIdentifier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DeviceIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceIdentifier} obj Optional instance to populate.
     * @return {module:model/DeviceIdentifier} The populated <code>DeviceIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceIdentifier();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('deviceIdentifierArn')) {
                obj['deviceIdentifierArn'] = ApiClient.convertToType(data['deviceIdentifierArn'], 'String');
            }
            if (data.hasOwnProperty('iccid')) {
                obj['iccid'] = ApiClient.convertToType(data['iccid'], 'String');
            }
            if (data.hasOwnProperty('imsi')) {
                obj['imsi'] = ApiClient.convertToType(data['imsi'], 'String');
            }
            if (data.hasOwnProperty('networkArn')) {
                obj['networkArn'] = ApiClient.convertToType(data['networkArn'], 'String');
            }
            if (data.hasOwnProperty('orderArn')) {
                obj['orderArn'] = ApiClient.convertToType(data['orderArn'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], DeviceIdentifierStatus);
            }
            if (data.hasOwnProperty('trafficGroupArn')) {
                obj['trafficGroupArn'] = ApiClient.convertToType(data['trafficGroupArn'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceIdentifier</code>.
     */
    static validateJSON(data) {
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `deviceIdentifierArn`
        if (data['deviceIdentifierArn']) { // data not null
          String.validateJSON(data['deviceIdentifierArn']);
        }
        // validate the optional field `iccid`
        if (data['iccid']) { // data not null
          String.validateJSON(data['iccid']);
        }
        // validate the optional field `imsi`
        if (data['imsi']) { // data not null
          String.validateJSON(data['imsi']);
        }
        // validate the optional field `networkArn`
        if (data['networkArn']) { // data not null
          String.validateJSON(data['networkArn']);
        }
        // validate the optional field `orderArn`
        if (data['orderArn']) { // data not null
          String.validateJSON(data['orderArn']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          DeviceIdentifierStatus.validateJSON(data['status']);
        }
        // validate the optional field `trafficGroupArn`
        if (data['trafficGroupArn']) { // data not null
          String.validateJSON(data['trafficGroupArn']);
        }
        // validate the optional field `vendor`
        if (data['vendor']) { // data not null
          String.validateJSON(data['vendor']);
        }

        return true;
    }


}



/**
 * @member {Date} createdAt
 */
DeviceIdentifier.prototype['createdAt'] = undefined;

/**
 * @member {String} deviceIdentifierArn
 */
DeviceIdentifier.prototype['deviceIdentifierArn'] = undefined;

/**
 * @member {String} iccid
 */
DeviceIdentifier.prototype['iccid'] = undefined;

/**
 * @member {String} imsi
 */
DeviceIdentifier.prototype['imsi'] = undefined;

/**
 * @member {String} networkArn
 */
DeviceIdentifier.prototype['networkArn'] = undefined;

/**
 * @member {String} orderArn
 */
DeviceIdentifier.prototype['orderArn'] = undefined;

/**
 * @member {module:model/DeviceIdentifierStatus} status
 */
DeviceIdentifier.prototype['status'] = undefined;

/**
 * @member {String} trafficGroupArn
 */
DeviceIdentifier.prototype['trafficGroupArn'] = undefined;

/**
 * @member {String} vendor
 */
DeviceIdentifier.prototype['vendor'] = undefined;






export default DeviceIdentifier;

