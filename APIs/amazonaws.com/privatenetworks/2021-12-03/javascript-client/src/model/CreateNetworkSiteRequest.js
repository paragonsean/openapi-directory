/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateNetworkSiteRequestPendingPlan from './CreateNetworkSiteRequestPendingPlan';

/**
 * The CreateNetworkSiteRequest model module.
 * @module model/CreateNetworkSiteRequest
 * @version 2021-12-03
 */
class CreateNetworkSiteRequest {
    /**
     * Constructs a new <code>CreateNetworkSiteRequest</code>.
     * @alias module:model/CreateNetworkSiteRequest
     * @param networkArn {String} The Amazon Resource Name (ARN) of the network.
     * @param networkSiteName {String} The name of the site. You can't change the name after you create the site.
     */
    constructor(networkArn, networkSiteName) { 
        
        CreateNetworkSiteRequest.initialize(this, networkArn, networkSiteName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, networkArn, networkSiteName) { 
        obj['networkArn'] = networkArn;
        obj['networkSiteName'] = networkSiteName;
    }

    /**
     * Constructs a <code>CreateNetworkSiteRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateNetworkSiteRequest} obj Optional instance to populate.
     * @return {module:model/CreateNetworkSiteRequest} The populated <code>CreateNetworkSiteRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateNetworkSiteRequest();

            if (data.hasOwnProperty('availabilityZone')) {
                obj['availabilityZone'] = ApiClient.convertToType(data['availabilityZone'], 'String');
            }
            if (data.hasOwnProperty('availabilityZoneId')) {
                obj['availabilityZoneId'] = ApiClient.convertToType(data['availabilityZoneId'], 'String');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('networkArn')) {
                obj['networkArn'] = ApiClient.convertToType(data['networkArn'], 'String');
            }
            if (data.hasOwnProperty('networkSiteName')) {
                obj['networkSiteName'] = ApiClient.convertToType(data['networkSiteName'], 'String');
            }
            if (data.hasOwnProperty('pendingPlan')) {
                obj['pendingPlan'] = CreateNetworkSiteRequestPendingPlan.constructFromObject(data['pendingPlan']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateNetworkSiteRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateNetworkSiteRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateNetworkSiteRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['availabilityZone'] && !(typeof data['availabilityZone'] === 'string' || data['availabilityZone'] instanceof String)) {
            throw new Error("Expected the field `availabilityZone` to be a primitive type in the JSON string but got " + data['availabilityZone']);
        }
        // ensure the json data is a string
        if (data['availabilityZoneId'] && !(typeof data['availabilityZoneId'] === 'string' || data['availabilityZoneId'] instanceof String)) {
            throw new Error("Expected the field `availabilityZoneId` to be a primitive type in the JSON string but got " + data['availabilityZoneId']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['networkArn'] && !(typeof data['networkArn'] === 'string' || data['networkArn'] instanceof String)) {
            throw new Error("Expected the field `networkArn` to be a primitive type in the JSON string but got " + data['networkArn']);
        }
        // ensure the json data is a string
        if (data['networkSiteName'] && !(typeof data['networkSiteName'] === 'string' || data['networkSiteName'] instanceof String)) {
            throw new Error("Expected the field `networkSiteName` to be a primitive type in the JSON string but got " + data['networkSiteName']);
        }
        // validate the optional field `pendingPlan`
        if (data['pendingPlan']) { // data not null
          CreateNetworkSiteRequestPendingPlan.validateJSON(data['pendingPlan']);
        }

        return true;
    }


}

CreateNetworkSiteRequest.RequiredProperties = ["networkArn", "networkSiteName"];

/**
 * The Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.
 * @member {String} availabilityZone
 */
CreateNetworkSiteRequest.prototype['availabilityZone'] = undefined;

/**
 * The ID of the Availability Zone that is the parent of this site. You can't change the Availability Zone after you create the site.
 * @member {String} availabilityZoneId
 */
CreateNetworkSiteRequest.prototype['availabilityZoneId'] = undefined;

/**
 * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.
 * @member {String} clientToken
 */
CreateNetworkSiteRequest.prototype['clientToken'] = undefined;

/**
 * The description of the site.
 * @member {String} description
 */
CreateNetworkSiteRequest.prototype['description'] = undefined;

/**
 * The Amazon Resource Name (ARN) of the network.
 * @member {String} networkArn
 */
CreateNetworkSiteRequest.prototype['networkArn'] = undefined;

/**
 * The name of the site. You can't change the name after you create the site.
 * @member {String} networkSiteName
 */
CreateNetworkSiteRequest.prototype['networkSiteName'] = undefined;

/**
 * @member {module:model/CreateNetworkSiteRequestPendingPlan} pendingPlan
 */
CreateNetworkSiteRequest.prototype['pendingPlan'] = undefined;

/**
 *  The tags to apply to the network site. 
 * @member {Object.<String, String>} tags
 */
CreateNetworkSiteRequest.prototype['tags'] = undefined;






export default CreateNetworkSiteRequest;

