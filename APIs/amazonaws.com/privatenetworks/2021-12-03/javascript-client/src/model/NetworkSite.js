/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkSiteCurrentPlan from './NetworkSiteCurrentPlan';
import NetworkSitePendingPlan from './NetworkSitePendingPlan';
import NetworkSiteStatus from './NetworkSiteStatus';

/**
 * The NetworkSite model module.
 * @module model/NetworkSite
 * @version 2021-12-03
 */
class NetworkSite {
    /**
     * Constructs a new <code>NetworkSite</code>.
     * Information about a network site.
     * @alias module:model/NetworkSite
     * @param networkArn {String} 
     * @param networkSiteArn {String} 
     * @param networkSiteName {String} 
     * @param status {module:model/NetworkSiteStatus} 
     */
    constructor(networkArn, networkSiteArn, networkSiteName, status) { 
        
        NetworkSite.initialize(this, networkArn, networkSiteArn, networkSiteName, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, networkArn, networkSiteArn, networkSiteName, status) { 
        obj['networkArn'] = networkArn;
        obj['networkSiteArn'] = networkSiteArn;
        obj['networkSiteName'] = networkSiteName;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>NetworkSite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkSite} obj Optional instance to populate.
     * @return {module:model/NetworkSite} The populated <code>NetworkSite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkSite();

            if (data.hasOwnProperty('availabilityZone')) {
                obj['availabilityZone'] = ApiClient.convertToType(data['availabilityZone'], 'String');
            }
            if (data.hasOwnProperty('availabilityZoneId')) {
                obj['availabilityZoneId'] = ApiClient.convertToType(data['availabilityZoneId'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('currentPlan')) {
                obj['currentPlan'] = NetworkSiteCurrentPlan.constructFromObject(data['currentPlan']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('networkArn')) {
                obj['networkArn'] = ApiClient.convertToType(data['networkArn'], 'String');
            }
            if (data.hasOwnProperty('networkSiteArn')) {
                obj['networkSiteArn'] = ApiClient.convertToType(data['networkSiteArn'], 'String');
            }
            if (data.hasOwnProperty('networkSiteName')) {
                obj['networkSiteName'] = ApiClient.convertToType(data['networkSiteName'], 'String');
            }
            if (data.hasOwnProperty('pendingPlan')) {
                obj['pendingPlan'] = NetworkSitePendingPlan.constructFromObject(data['pendingPlan']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], NetworkSiteStatus);
            }
            if (data.hasOwnProperty('statusReason')) {
                obj['statusReason'] = ApiClient.convertToType(data['statusReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkSite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkSite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NetworkSite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `availabilityZone`
        if (data['availabilityZone']) { // data not null
          String.validateJSON(data['availabilityZone']);
        }
        // validate the optional field `availabilityZoneId`
        if (data['availabilityZoneId']) { // data not null
          String.validateJSON(data['availabilityZoneId']);
        }
        // validate the optional field `createdAt`
        if (data['createdAt']) { // data not null
          Date.validateJSON(data['createdAt']);
        }
        // validate the optional field `currentPlan`
        if (data['currentPlan']) { // data not null
          NetworkSiteCurrentPlan.validateJSON(data['currentPlan']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `networkArn`
        if (data['networkArn']) { // data not null
          String.validateJSON(data['networkArn']);
        }
        // validate the optional field `networkSiteArn`
        if (data['networkSiteArn']) { // data not null
          String.validateJSON(data['networkSiteArn']);
        }
        // validate the optional field `networkSiteName`
        if (data['networkSiteName']) { // data not null
          String.validateJSON(data['networkSiteName']);
        }
        // validate the optional field `pendingPlan`
        if (data['pendingPlan']) { // data not null
          NetworkSitePendingPlan.validateJSON(data['pendingPlan']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          NetworkSiteStatus.validateJSON(data['status']);
        }
        // validate the optional field `statusReason`
        if (data['statusReason']) { // data not null
          String.validateJSON(data['statusReason']);
        }

        return true;
    }


}

NetworkSite.RequiredProperties = ["networkArn", "networkSiteArn", "networkSiteName", "status"];

/**
 * @member {String} availabilityZone
 */
NetworkSite.prototype['availabilityZone'] = undefined;

/**
 * @member {String} availabilityZoneId
 */
NetworkSite.prototype['availabilityZoneId'] = undefined;

/**
 * @member {Date} createdAt
 */
NetworkSite.prototype['createdAt'] = undefined;

/**
 * @member {module:model/NetworkSiteCurrentPlan} currentPlan
 */
NetworkSite.prototype['currentPlan'] = undefined;

/**
 * @member {String} description
 */
NetworkSite.prototype['description'] = undefined;

/**
 * @member {String} networkArn
 */
NetworkSite.prototype['networkArn'] = undefined;

/**
 * @member {String} networkSiteArn
 */
NetworkSite.prototype['networkSiteArn'] = undefined;

/**
 * @member {String} networkSiteName
 */
NetworkSite.prototype['networkSiteName'] = undefined;

/**
 * @member {module:model/NetworkSitePendingPlan} pendingPlan
 */
NetworkSite.prototype['pendingPlan'] = undefined;

/**
 * @member {module:model/NetworkSiteStatus} status
 */
NetworkSite.prototype['status'] = undefined;

/**
 * @member {String} statusReason
 */
NetworkSite.prototype['statusReason'] = undefined;






export default NetworkSite;

