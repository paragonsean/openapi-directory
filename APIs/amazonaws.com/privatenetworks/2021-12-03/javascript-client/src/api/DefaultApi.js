/**
 * AWS Private 5G
 * Amazon Web Services Private 5G is a managed service that makes it easy to deploy, operate, and scale your own private mobile network at your on-premises location. Private 5G provides the pre-configured hardware and software for mobile networks, helps automate setup, and scales capacity on demand to support additional devices as needed.
 *
 * The version of the OpenAPI document: 2021-12-03
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AcknowledgeOrderReceiptRequest from '../model/AcknowledgeOrderReceiptRequest';
import AcknowledgeOrderReceiptResponse from '../model/AcknowledgeOrderReceiptResponse';
import ActivateDeviceIdentifierRequest from '../model/ActivateDeviceIdentifierRequest';
import ActivateDeviceIdentifierResponse from '../model/ActivateDeviceIdentifierResponse';
import ActivateNetworkSiteRequest from '../model/ActivateNetworkSiteRequest';
import ActivateNetworkSiteResponse from '../model/ActivateNetworkSiteResponse';
import ConfigureAccessPointRequest from '../model/ConfigureAccessPointRequest';
import ConfigureAccessPointResponse from '../model/ConfigureAccessPointResponse';
import CreateNetworkRequest from '../model/CreateNetworkRequest';
import CreateNetworkResponse from '../model/CreateNetworkResponse';
import CreateNetworkSiteRequest from '../model/CreateNetworkSiteRequest';
import CreateNetworkSiteResponse from '../model/CreateNetworkSiteResponse';
import DeactivateDeviceIdentifierResponse from '../model/DeactivateDeviceIdentifierResponse';
import DeleteNetworkResponse from '../model/DeleteNetworkResponse';
import DeleteNetworkSiteResponse from '../model/DeleteNetworkSiteResponse';
import GetDeviceIdentifierResponse from '../model/GetDeviceIdentifierResponse';
import GetNetworkResourceResponse from '../model/GetNetworkResourceResponse';
import GetNetworkResponse from '../model/GetNetworkResponse';
import GetNetworkSiteResponse from '../model/GetNetworkSiteResponse';
import GetOrderResponse from '../model/GetOrderResponse';
import ListDeviceIdentifiersRequest from '../model/ListDeviceIdentifiersRequest';
import ListDeviceIdentifiersResponse from '../model/ListDeviceIdentifiersResponse';
import ListNetworkResourcesRequest from '../model/ListNetworkResourcesRequest';
import ListNetworkResourcesResponse from '../model/ListNetworkResourcesResponse';
import ListNetworkSitesRequest from '../model/ListNetworkSitesRequest';
import ListNetworkSitesResponse from '../model/ListNetworkSitesResponse';
import ListNetworksRequest from '../model/ListNetworksRequest';
import ListNetworksResponse from '../model/ListNetworksResponse';
import ListOrdersRequest from '../model/ListOrdersRequest';
import ListOrdersResponse from '../model/ListOrdersResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PingResponse from '../model/PingResponse';
import StartNetworkResourceUpdateRequest from '../model/StartNetworkResourceUpdateRequest';
import StartNetworkResourceUpdateResponse from '../model/StartNetworkResourceUpdateResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateNetworkSitePlanRequest from '../model/UpdateNetworkSitePlanRequest';
import UpdateNetworkSiteRequest from '../model/UpdateNetworkSiteRequest';
import UpdateNetworkSiteResponse from '../model/UpdateNetworkSiteResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-12-03
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgeOrderReceipt operation.
     * @callback module:api/DefaultApi~acknowledgeOrderReceiptCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AcknowledgeOrderReceiptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledges that the specified network order was received.
     * @param {module:model/AcknowledgeOrderReceiptRequest} acknowledgeOrderReceiptRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~acknowledgeOrderReceiptCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AcknowledgeOrderReceiptResponse}
     */
    acknowledgeOrderReceipt(acknowledgeOrderReceiptRequest, opts, callback) {
      opts = opts || {};
      let postBody = acknowledgeOrderReceiptRequest;
      // verify the required parameter 'acknowledgeOrderReceiptRequest' is set
      if (acknowledgeOrderReceiptRequest === undefined || acknowledgeOrderReceiptRequest === null) {
        throw new Error("Missing the required parameter 'acknowledgeOrderReceiptRequest' when calling acknowledgeOrderReceipt");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AcknowledgeOrderReceiptResponse;
      return this.apiClient.callApi(
        '/v1/orders/acknowledge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activateDeviceIdentifier operation.
     * @callback module:api/DefaultApi~activateDeviceIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivateDeviceIdentifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates the specified device identifier.
     * @param {module:model/ActivateDeviceIdentifierRequest} activateDeviceIdentifierRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~activateDeviceIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivateDeviceIdentifierResponse}
     */
    activateDeviceIdentifier(activateDeviceIdentifierRequest, opts, callback) {
      opts = opts || {};
      let postBody = activateDeviceIdentifierRequest;
      // verify the required parameter 'activateDeviceIdentifierRequest' is set
      if (activateDeviceIdentifierRequest === undefined || activateDeviceIdentifierRequest === null) {
        throw new Error("Missing the required parameter 'activateDeviceIdentifierRequest' when calling activateDeviceIdentifier");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivateDeviceIdentifierResponse;
      return this.apiClient.callApi(
        '/v1/device-identifiers/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the activateNetworkSite operation.
     * @callback module:api/DefaultApi~activateNetworkSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivateNetworkSiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates the specified network site.
     * @param {module:model/ActivateNetworkSiteRequest} activateNetworkSiteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~activateNetworkSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivateNetworkSiteResponse}
     */
    activateNetworkSite(activateNetworkSiteRequest, opts, callback) {
      opts = opts || {};
      let postBody = activateNetworkSiteRequest;
      // verify the required parameter 'activateNetworkSiteRequest' is set
      if (activateNetworkSiteRequest === undefined || activateNetworkSiteRequest === null) {
        throw new Error("Missing the required parameter 'activateNetworkSiteRequest' when calling activateNetworkSite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActivateNetworkSiteResponse;
      return this.apiClient.callApi(
        '/v1/network-sites/activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configureAccessPoint operation.
     * @callback module:api/DefaultApi~configureAccessPointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigureAccessPointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Configures the specified network resource. </p> <p> Use this action to specify the geographic position of the hardware. You must provide Certified Professional Installer (CPI) credentials in the request so that we can obtain spectrum grants. For more information, see <a href=\"https://docs.aws.amazon.com/private-networks/latest/userguide/radio-units.html\">Radio units</a> in the <i>Amazon Web Services Private 5G User Guide</i>. </p>
     * @param {module:model/ConfigureAccessPointRequest} configureAccessPointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~configureAccessPointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigureAccessPointResponse}
     */
    configureAccessPoint(configureAccessPointRequest, opts, callback) {
      opts = opts || {};
      let postBody = configureAccessPointRequest;
      // verify the required parameter 'configureAccessPointRequest' is set
      if (configureAccessPointRequest === undefined || configureAccessPointRequest === null) {
        throw new Error("Missing the required parameter 'configureAccessPointRequest' when calling configureAccessPoint");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigureAccessPointResponse;
      return this.apiClient.callApi(
        '/v1/network-resources/configure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetwork operation.
     * @callback module:api/DefaultApi~createNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a network.
     * @param {module:model/CreateNetworkRequest} createNetworkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkResponse}
     */
    createNetwork(createNetworkRequest, opts, callback) {
      opts = opts || {};
      let postBody = createNetworkRequest;
      // verify the required parameter 'createNetworkRequest' is set
      if (createNetworkRequest === undefined || createNetworkRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkRequest' when calling createNetwork");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkResponse;
      return this.apiClient.callApi(
        '/v1/networks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNetworkSite operation.
     * @callback module:api/DefaultApi~createNetworkSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateNetworkSiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a network site.
     * @param {module:model/CreateNetworkSiteRequest} createNetworkSiteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createNetworkSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateNetworkSiteResponse}
     */
    createNetworkSite(createNetworkSiteRequest, opts, callback) {
      opts = opts || {};
      let postBody = createNetworkSiteRequest;
      // verify the required parameter 'createNetworkSiteRequest' is set
      if (createNetworkSiteRequest === undefined || createNetworkSiteRequest === null) {
        throw new Error("Missing the required parameter 'createNetworkSiteRequest' when calling createNetworkSite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateNetworkSiteResponse;
      return this.apiClient.callApi(
        '/v1/network-sites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateDeviceIdentifier operation.
     * @callback module:api/DefaultApi~deactivateDeviceIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateDeviceIdentifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivates the specified device identifier.
     * @param {module:model/ActivateDeviceIdentifierRequest} activateDeviceIdentifierRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deactivateDeviceIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateDeviceIdentifierResponse}
     */
    deactivateDeviceIdentifier(activateDeviceIdentifierRequest, opts, callback) {
      opts = opts || {};
      let postBody = activateDeviceIdentifierRequest;
      // verify the required parameter 'activateDeviceIdentifierRequest' is set
      if (activateDeviceIdentifierRequest === undefined || activateDeviceIdentifierRequest === null) {
        throw new Error("Missing the required parameter 'activateDeviceIdentifierRequest' when calling deactivateDeviceIdentifier");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateDeviceIdentifierResponse;
      return this.apiClient.callApi(
        '/v1/device-identifiers/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetwork operation.
     * @callback module:api/DefaultApi~deleteNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified network. You must delete network sites before you delete the network. For more information, see <a href=\"https://docs.aws.amazon.com/private-networks/latest/APIReference/API_DeleteNetworkSite.html\">DeleteNetworkSite</a> in the <i>API Reference for Amazon Web Services Private 5G</i>.
     * @param {String} networkArn The Amazon Resource Name (ARN) of the network.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.
     * @param {module:api/DefaultApi~deleteNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNetworkResponse}
     */
    deleteNetwork(networkArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkArn' is set
      if (networkArn === undefined || networkArn === null) {
        throw new Error("Missing the required parameter 'networkArn' when calling deleteNetwork");
      }

      let pathParams = {
        'networkArn': networkArn
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteNetworkResponse;
      return this.apiClient.callApi(
        '/v1/networks/{networkArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteNetworkSite operation.
     * @callback module:api/DefaultApi~deleteNetworkSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteNetworkSiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified network site. Return the hardware after you delete the network site. You are responsible for minimum charges. For more information, see <a href=\"https://docs.aws.amazon.com/private-networks/latest/userguide/hardware-maintenance.html\">Hardware returns</a> in the <i>Amazon Web Services Private 5G User Guide</i>. 
     * @param {String} networkSiteArn The Amazon Resource Name (ARN) of the network site.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [clientToken] Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to ensure idempotency</a>.
     * @param {module:api/DefaultApi~deleteNetworkSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteNetworkSiteResponse}
     */
    deleteNetworkSite(networkSiteArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkSiteArn' is set
      if (networkSiteArn === undefined || networkSiteArn === null) {
        throw new Error("Missing the required parameter 'networkSiteArn' when calling deleteNetworkSite");
      }

      let pathParams = {
        'networkSiteArn': networkSiteArn
      };
      let queryParams = {
        'clientToken': opts['clientToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteNetworkSiteResponse;
      return this.apiClient.callApi(
        '/v1/network-sites/{networkSiteArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeviceIdentifier operation.
     * @callback module:api/DefaultApi~getDeviceIdentifierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeviceIdentifierResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified device identifier.
     * @param {String} deviceIdentifierArn The Amazon Resource Name (ARN) of the device identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeviceIdentifierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeviceIdentifierResponse}
     */
    getDeviceIdentifier(deviceIdentifierArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deviceIdentifierArn' is set
      if (deviceIdentifierArn === undefined || deviceIdentifierArn === null) {
        throw new Error("Missing the required parameter 'deviceIdentifierArn' when calling getDeviceIdentifier");
      }

      let pathParams = {
        'deviceIdentifierArn': deviceIdentifierArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeviceIdentifierResponse;
      return this.apiClient.callApi(
        '/v1/device-identifiers/{deviceIdentifierArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetwork operation.
     * @callback module:api/DefaultApi~getNetworkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified network.
     * @param {String} networkArn The Amazon Resource Name (ARN) of the network.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNetworkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkResponse}
     */
    getNetwork(networkArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkArn' is set
      if (networkArn === undefined || networkArn === null) {
        throw new Error("Missing the required parameter 'networkArn' when calling getNetwork");
      }

      let pathParams = {
        'networkArn': networkArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkResponse;
      return this.apiClient.callApi(
        '/v1/networks/{networkArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkResource operation.
     * @callback module:api/DefaultApi~getNetworkResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified network resource.
     * @param {String} networkResourceArn The Amazon Resource Name (ARN) of the network resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNetworkResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkResourceResponse}
     */
    getNetworkResource(networkResourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkResourceArn' is set
      if (networkResourceArn === undefined || networkResourceArn === null) {
        throw new Error("Missing the required parameter 'networkResourceArn' when calling getNetworkResource");
      }

      let pathParams = {
        'networkResourceArn': networkResourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkResourceResponse;
      return this.apiClient.callApi(
        '/v1/network-resources/{networkResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getNetworkSite operation.
     * @callback module:api/DefaultApi~getNetworkSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetNetworkSiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified network site.
     * @param {String} networkSiteArn The Amazon Resource Name (ARN) of the network site.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getNetworkSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetNetworkSiteResponse}
     */
    getNetworkSite(networkSiteArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'networkSiteArn' is set
      if (networkSiteArn === undefined || networkSiteArn === null) {
        throw new Error("Missing the required parameter 'networkSiteArn' when calling getNetworkSite");
      }

      let pathParams = {
        'networkSiteArn': networkSiteArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetNetworkSiteResponse;
      return this.apiClient.callApi(
        '/v1/network-sites/{networkSiteArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/DefaultApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified order.
     * @param {String} orderArn The Amazon Resource Name (ARN) of the order.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrderResponse}
     */
    getOrder(orderArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'orderArn' is set
      if (orderArn === undefined || orderArn === null) {
        throw new Error("Missing the required parameter 'orderArn' when calling getOrder");
      }

      let pathParams = {
        'orderArn': orderArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrderResponse;
      return this.apiClient.callApi(
        '/v1/orders/{orderArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDeviceIdentifiers operation.
     * @callback module:api/DefaultApi~listDeviceIdentifiersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDeviceIdentifiersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists device identifiers. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of an order, the status of device identifiers, or the ARN of the traffic group.</p> <p>If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.</p>
     * @param {module:model/ListDeviceIdentifiersRequest} listDeviceIdentifiersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [startToken] Pagination token
     * @param {module:api/DefaultApi~listDeviceIdentifiersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDeviceIdentifiersResponse}
     */
    listDeviceIdentifiers(listDeviceIdentifiersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDeviceIdentifiersRequest;
      // verify the required parameter 'listDeviceIdentifiersRequest' is set
      if (listDeviceIdentifiersRequest === undefined || listDeviceIdentifiersRequest === null) {
        throw new Error("Missing the required parameter 'listDeviceIdentifiersRequest' when calling listDeviceIdentifiers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startToken': opts['startToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDeviceIdentifiersResponse;
      return this.apiClient.callApi(
        '/v1/device-identifiers/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkResources operation.
     * @callback module:api/DefaultApi~listNetworkResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNetworkResourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists network resources. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of an order or the status of network resources.</p> <p>If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.</p>
     * @param {module:model/ListNetworkResourcesRequest} listNetworkResourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [startToken] Pagination token
     * @param {module:api/DefaultApi~listNetworkResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNetworkResourcesResponse}
     */
    listNetworkResources(listNetworkResourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNetworkResourcesRequest;
      // verify the required parameter 'listNetworkResourcesRequest' is set
      if (listNetworkResourcesRequest === undefined || listNetworkResourcesRequest === null) {
        throw new Error("Missing the required parameter 'listNetworkResourcesRequest' when calling listNetworkResources");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startToken': opts['startToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNetworkResourcesResponse;
      return this.apiClient.callApi(
        '/v1/network-resources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworkSites operation.
     * @callback module:api/DefaultApi~listNetworkSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNetworkSitesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists network sites. Add filters to your request to return a more specific list of results. Use filters to match the status of the network site.
     * @param {module:model/ListNetworkSitesRequest} listNetworkSitesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [startToken] Pagination token
     * @param {module:api/DefaultApi~listNetworkSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNetworkSitesResponse}
     */
    listNetworkSites(listNetworkSitesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNetworkSitesRequest;
      // verify the required parameter 'listNetworkSitesRequest' is set
      if (listNetworkSitesRequest === undefined || listNetworkSitesRequest === null) {
        throw new Error("Missing the required parameter 'listNetworkSitesRequest' when calling listNetworkSites");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startToken': opts['startToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNetworkSitesResponse;
      return this.apiClient.callApi(
        '/v1/network-sites/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNetworks operation.
     * @callback module:api/DefaultApi~listNetworksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListNetworksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists networks. Add filters to your request to return a more specific list of results. Use filters to match the status of the network.
     * @param {module:model/ListNetworksRequest} listNetworksRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [startToken] Pagination token
     * @param {module:api/DefaultApi~listNetworksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListNetworksResponse}
     */
    listNetworks(listNetworksRequest, opts, callback) {
      opts = opts || {};
      let postBody = listNetworksRequest;
      // verify the required parameter 'listNetworksRequest' is set
      if (listNetworksRequest === undefined || listNetworksRequest === null) {
        throw new Error("Missing the required parameter 'listNetworksRequest' when calling listNetworks");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startToken': opts['startToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListNetworksResponse;
      return this.apiClient.callApi(
        '/v1/networks/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listOrders operation.
     * @callback module:api/DefaultApi~listOrdersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOrdersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Lists orders. Add filters to your request to return a more specific list of results. Use filters to match the Amazon Resource Name (ARN) of the network site or the status of the order.</p> <p>If you specify multiple filters, filters are joined with an OR, and the request returns results that match all of the specified filters.</p>
     * @param {module:model/ListOrdersRequest} listOrdersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [startToken] Pagination token
     * @param {module:api/DefaultApi~listOrdersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOrdersResponse}
     */
    listOrders(listOrdersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listOrdersRequest;
      // verify the required parameter 'listOrdersRequest' is set
      if (listOrdersRequest === undefined || listOrdersRequest === null) {
        throw new Error("Missing the required parameter 'listOrdersRequest' when calling listOrders");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startToken': opts['startToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListOrdersResponse;
      return this.apiClient.callApi(
        '/v1/orders/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/DefaultApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the health of the service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PingResponse}
     */
    ping(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PingResponse;
      return this.apiClient.callApi(
        '/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startNetworkResourceUpdate operation.
     * @callback module:api/DefaultApi~startNetworkResourceUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartNetworkResourceUpdateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Use this action to do the following tasks:</p> <ul> <li> <p>Update the duration and renewal status of the commitment period for a radio unit. The update goes into effect immediately.</p> </li> <li> <p>Request a replacement for a network resource.</p> </li> <li> <p>Request that you return a network resource.</p> </li> </ul> <p>After you submit a request to replace or return a network resource, the status of the network resource changes to <code>CREATING_SHIPPING_LABEL</code>. The shipping label is available when the status of the network resource is <code>PENDING_RETURN</code>. After the network resource is successfully returned, its status changes to <code>DELETED</code>. For more information, see <a href=\"https://docs.aws.amazon.com/private-networks/latest/userguide/radio-units.html#return-radio-unit\">Return a radio unit</a>.</p>
     * @param {module:model/StartNetworkResourceUpdateRequest} startNetworkResourceUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startNetworkResourceUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartNetworkResourceUpdateResponse}
     */
    startNetworkResourceUpdate(startNetworkResourceUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = startNetworkResourceUpdateRequest;
      // verify the required parameter 'startNetworkResourceUpdateRequest' is set
      if (startNetworkResourceUpdateRequest === undefined || startNetworkResourceUpdateRequest === null) {
        throw new Error("Missing the required parameter 'startNetworkResourceUpdateRequest' when calling startNetworkResourceUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartNetworkResourceUpdateResponse;
      return this.apiClient.callApi(
        '/v1/network-resources/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  Adds tags to the specified resource. 
     * @param {String} resourceArn  The Amazon Resource Name (ARN) of the resource. 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from the specified resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) of the resource.
     * @param {Array.<String>} tagKeys The tag keys.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSite operation.
     * @callback module:api/DefaultApi~updateNetworkSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateNetworkSiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified network site.
     * @param {module:model/UpdateNetworkSiteRequest} updateNetworkSiteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateNetworkSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateNetworkSiteResponse}
     */
    updateNetworkSite(updateNetworkSiteRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateNetworkSiteRequest;
      // verify the required parameter 'updateNetworkSiteRequest' is set
      if (updateNetworkSiteRequest === undefined || updateNetworkSiteRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSiteRequest' when calling updateNetworkSite");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateNetworkSiteResponse;
      return this.apiClient.callApi(
        '/v1/network-sites/site', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNetworkSitePlan operation.
     * @callback module:api/DefaultApi~updateNetworkSitePlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateNetworkSiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified network site plan.
     * @param {module:model/UpdateNetworkSitePlanRequest} updateNetworkSitePlanRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateNetworkSitePlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateNetworkSiteResponse}
     */
    updateNetworkSitePlan(updateNetworkSitePlanRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateNetworkSitePlanRequest;
      // verify the required parameter 'updateNetworkSitePlanRequest' is set
      if (updateNetworkSitePlanRequest === undefined || updateNetworkSitePlanRequest === null) {
        throw new Error("Missing the required parameter 'updateNetworkSitePlanRequest' when calling updateNetworkSitePlan");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateNetworkSiteResponse;
      return this.apiClient.callApi(
        '/v1/network-sites/plan', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
