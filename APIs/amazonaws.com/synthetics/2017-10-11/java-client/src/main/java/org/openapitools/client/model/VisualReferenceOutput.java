/*
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;If this canary performs visual monitoring by comparing screenshots, this structure contains the ID of the canary run that is used as the baseline for screenshots, and the coordinates of any parts of those screenshots that are ignored during visual monitoring comparison.&lt;/p&gt; &lt;p&gt;Visual monitoring is supported only on canaries running the &lt;b&gt;syn-puppeteer-node-3.2&lt;/b&gt; runtime or later.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:28.608248-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VisualReferenceOutput {
  public static final String SERIALIZED_NAME_BASE_SCREENSHOTS = "BaseScreenshots";
  @SerializedName(SERIALIZED_NAME_BASE_SCREENSHOTS)
  private List baseScreenshots;

  public static final String SERIALIZED_NAME_BASE_CANARY_RUN_ID = "BaseCanaryRunId";
  @SerializedName(SERIALIZED_NAME_BASE_CANARY_RUN_ID)
  private String baseCanaryRunId;

  public VisualReferenceOutput() {
  }

  public VisualReferenceOutput baseScreenshots(List baseScreenshots) {
    this.baseScreenshots = baseScreenshots;
    return this;
  }

  /**
   * Get baseScreenshots
   * @return baseScreenshots
   */
  @javax.annotation.Nullable
  public List getBaseScreenshots() {
    return baseScreenshots;
  }

  public void setBaseScreenshots(List baseScreenshots) {
    this.baseScreenshots = baseScreenshots;
  }


  public VisualReferenceOutput baseCanaryRunId(String baseCanaryRunId) {
    this.baseCanaryRunId = baseCanaryRunId;
    return this;
  }

  /**
   * Get baseCanaryRunId
   * @return baseCanaryRunId
   */
  @javax.annotation.Nullable
  public String getBaseCanaryRunId() {
    return baseCanaryRunId;
  }

  public void setBaseCanaryRunId(String baseCanaryRunId) {
    this.baseCanaryRunId = baseCanaryRunId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VisualReferenceOutput visualReferenceOutput = (VisualReferenceOutput) o;
    return Objects.equals(this.baseScreenshots, visualReferenceOutput.baseScreenshots) &&
        Objects.equals(this.baseCanaryRunId, visualReferenceOutput.baseCanaryRunId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseScreenshots, baseCanaryRunId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VisualReferenceOutput {\n");
    sb.append("    baseScreenshots: ").append(toIndentedString(baseScreenshots)).append("\n");
    sb.append("    baseCanaryRunId: ").append(toIndentedString(baseCanaryRunId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BaseScreenshots");
    openapiFields.add("BaseCanaryRunId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VisualReferenceOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VisualReferenceOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VisualReferenceOutput is not found in the empty JSON string", VisualReferenceOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VisualReferenceOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VisualReferenceOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BaseScreenshots`
      if (jsonObj.get("BaseScreenshots") != null && !jsonObj.get("BaseScreenshots").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("BaseScreenshots"));
      }
      // validate the optional field `BaseCanaryRunId`
      if (jsonObj.get("BaseCanaryRunId") != null && !jsonObj.get("BaseCanaryRunId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BaseCanaryRunId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VisualReferenceOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VisualReferenceOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VisualReferenceOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VisualReferenceOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<VisualReferenceOutput>() {
           @Override
           public void write(JsonWriter out, VisualReferenceOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VisualReferenceOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VisualReferenceOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VisualReferenceOutput
   * @throws IOException if the JSON string is invalid with respect to VisualReferenceOutput
   */
  public static VisualReferenceOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VisualReferenceOutput.class);
  }

  /**
   * Convert an instance of VisualReferenceOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

