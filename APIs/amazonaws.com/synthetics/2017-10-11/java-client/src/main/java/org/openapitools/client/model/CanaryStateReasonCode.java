/*
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets CanaryStateReasonCode
 */
@JsonAdapter(CanaryStateReasonCode.Adapter.class)
public enum CanaryStateReasonCode {
  
  INVALID_PERMISSIONS("INVALID_PERMISSIONS"),
  
  CREATE_PENDING("CREATE_PENDING"),
  
  CREATE_IN_PROGRESS("CREATE_IN_PROGRESS"),
  
  CREATE_FAILED("CREATE_FAILED"),
  
  UPDATE_PENDING("UPDATE_PENDING"),
  
  UPDATE_IN_PROGRESS("UPDATE_IN_PROGRESS"),
  
  UPDATE_COMPLETE("UPDATE_COMPLETE"),
  
  ROLLBACK_COMPLETE("ROLLBACK_COMPLETE"),
  
  ROLLBACK_FAILED("ROLLBACK_FAILED"),
  
  DELETE_IN_PROGRESS("DELETE_IN_PROGRESS"),
  
  DELETE_FAILED("DELETE_FAILED"),
  
  SYNC_DELETE_IN_PROGRESS("SYNC_DELETE_IN_PROGRESS");

  private String value;

  CanaryStateReasonCode(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static CanaryStateReasonCode fromValue(String value) {
    for (CanaryStateReasonCode b : CanaryStateReasonCode.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<CanaryStateReasonCode> {
    @Override
    public void write(final JsonWriter jsonWriter, final CanaryStateReasonCode enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public CanaryStateReasonCode read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return CanaryStateReasonCode.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    CanaryStateReasonCode.fromValue(value);
  }
}

