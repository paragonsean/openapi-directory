/*
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Use this structure to input your script code for the canary. This structure contains the Lambda handler with the location where the canary should start running the script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. If the script was passed into the canary directly, the script code is contained in the value of &lt;code&gt;Zipfile&lt;/code&gt;. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:08:28.608248-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CanaryCodeInput {
  public static final String SERIALIZED_NAME_S3_BUCKET = "S3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_KEY = "S3Key";
  @SerializedName(SERIALIZED_NAME_S3_KEY)
  private String s3Key;

  public static final String SERIALIZED_NAME_S3_VERSION = "S3Version";
  @SerializedName(SERIALIZED_NAME_S3_VERSION)
  private String s3Version;

  public static final String SERIALIZED_NAME_ZIP_FILE = "ZipFile";
  @SerializedName(SERIALIZED_NAME_ZIP_FILE)
  private String zipFile;

  public static final String SERIALIZED_NAME_HANDLER = "Handler";
  @SerializedName(SERIALIZED_NAME_HANDLER)
  private String handler;

  public CanaryCodeInput() {
  }

  public CanaryCodeInput s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public CanaryCodeInput s3Key(String s3Key) {
    this.s3Key = s3Key;
    return this;
  }

  /**
   * Get s3Key
   * @return s3Key
   */
  @javax.annotation.Nullable
  public String getS3Key() {
    return s3Key;
  }

  public void setS3Key(String s3Key) {
    this.s3Key = s3Key;
  }


  public CanaryCodeInput s3Version(String s3Version) {
    this.s3Version = s3Version;
    return this;
  }

  /**
   * Get s3Version
   * @return s3Version
   */
  @javax.annotation.Nullable
  public String getS3Version() {
    return s3Version;
  }

  public void setS3Version(String s3Version) {
    this.s3Version = s3Version;
  }


  public CanaryCodeInput zipFile(String zipFile) {
    this.zipFile = zipFile;
    return this;
  }

  /**
   * Get zipFile
   * @return zipFile
   */
  @javax.annotation.Nullable
  public String getZipFile() {
    return zipFile;
  }

  public void setZipFile(String zipFile) {
    this.zipFile = zipFile;
  }


  public CanaryCodeInput handler(String handler) {
    this.handler = handler;
    return this;
  }

  /**
   * Get handler
   * @return handler
   */
  @javax.annotation.Nonnull
  public String getHandler() {
    return handler;
  }

  public void setHandler(String handler) {
    this.handler = handler;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CanaryCodeInput canaryCodeInput = (CanaryCodeInput) o;
    return Objects.equals(this.s3Bucket, canaryCodeInput.s3Bucket) &&
        Objects.equals(this.s3Key, canaryCodeInput.s3Key) &&
        Objects.equals(this.s3Version, canaryCodeInput.s3Version) &&
        Objects.equals(this.zipFile, canaryCodeInput.zipFile) &&
        Objects.equals(this.handler, canaryCodeInput.handler);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Bucket, s3Key, s3Version, zipFile, handler);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CanaryCodeInput {\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3Key: ").append(toIndentedString(s3Key)).append("\n");
    sb.append("    s3Version: ").append(toIndentedString(s3Version)).append("\n");
    sb.append("    zipFile: ").append(toIndentedString(zipFile)).append("\n");
    sb.append("    handler: ").append(toIndentedString(handler)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3Bucket");
    openapiFields.add("S3Key");
    openapiFields.add("S3Version");
    openapiFields.add("ZipFile");
    openapiFields.add("Handler");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Handler");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CanaryCodeInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CanaryCodeInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CanaryCodeInput is not found in the empty JSON string", CanaryCodeInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CanaryCodeInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CanaryCodeInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CanaryCodeInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3Bucket`
      if (jsonObj.get("S3Bucket") != null && !jsonObj.get("S3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3Bucket"));
      }
      // validate the optional field `S3Key`
      if (jsonObj.get("S3Key") != null && !jsonObj.get("S3Key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3Key"));
      }
      // validate the optional field `S3Version`
      if (jsonObj.get("S3Version") != null && !jsonObj.get("S3Version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("S3Version"));
      }
      // validate the optional field `ZipFile`
      if (jsonObj.get("ZipFile") != null && !jsonObj.get("ZipFile").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ZipFile"));
      }
      // validate the required field `Handler`
      String.validateJsonElement(jsonObj.get("Handler"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CanaryCodeInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CanaryCodeInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CanaryCodeInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CanaryCodeInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CanaryCodeInput>() {
           @Override
           public void write(JsonWriter out, CanaryCodeInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CanaryCodeInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CanaryCodeInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CanaryCodeInput
   * @throws IOException if the JSON string is invalid with respect to CanaryCodeInput
   */
  public static CanaryCodeInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CanaryCodeInput.class);
  }

  /**
   * Convert an instance of CanaryCodeInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

