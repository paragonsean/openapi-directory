# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AssociateResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None):
        """AssociateResourceRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this AssociateResourceRequest.
        """
        self.openapi_types = {
            'resource_arn': str
        }

        self.attribute_map = {
            'resource_arn': 'ResourceArn'
        }

        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssociateResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssociateResource_request of this AssociateResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this AssociateResourceRequest.

        The ARN of the canary that you want to associate with the specified group.

        :return: The resource_arn of this AssociateResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this AssociateResourceRequest.

        The ARN of the canary that you want to associate with the specified group.

        :param resource_arn: The resource_arn of this AssociateResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and len(resource_arn) > 2048:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `2048`")
        if resource_arn is not None and len(resource_arn) < 1:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `1`")
        if resource_arn is not None and not re.search(r'arn:(aws[a-zA-Z-]*)?:synthetics:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:canary:[0-9a-z_\-]{1,21}', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:(aws[a-zA-Z-]*)?:synthetics:[a-z]{2}((-gov)|(-iso(b?)))?-[a-z]+-\d{1}:\d{12}:canary:[0-9a-z_\-]{1,21}/`")

        self._resource_arn = resource_arn
