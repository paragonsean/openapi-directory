# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeCanariesLastRunRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None, names: List[str]=None):
        """DescribeCanariesLastRunRequest - a model defined in OpenAPI

        :param next_token: The next_token of this DescribeCanariesLastRunRequest.
        :param max_results: The max_results of this DescribeCanariesLastRunRequest.
        :param names: The names of this DescribeCanariesLastRunRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int,
            'names': List[str]
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'names': 'Names'
        }

        self._next_token = next_token
        self._max_results = max_results
        self._names = names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCanariesLastRunRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCanariesLastRun_request of this DescribeCanariesLastRunRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this DescribeCanariesLastRunRequest.

        A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next set of results.

        :return: The next_token of this DescribeCanariesLastRunRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeCanariesLastRunRequest.

        A token that indicates that there is more data available. You can use this token in a subsequent <code>DescribeCanariesLastRun</code> operation to retrieve the next set of results.

        :param next_token: The next_token of this DescribeCanariesLastRunRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 252:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `252`")
        if next_token is not None and len(next_token) < 4:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `4`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this DescribeCanariesLastRunRequest.

        Specify this parameter to limit how many runs are returned each time you use the <code>DescribeLastRun</code> operation. If you omit this parameter, the default of 100 is used.

        :return: The max_results of this DescribeCanariesLastRunRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeCanariesLastRunRequest.

        Specify this parameter to limit how many runs are returned each time you use the <code>DescribeLastRun</code> operation. If you omit this parameter, the default of 100 is used.

        :param max_results: The max_results of this DescribeCanariesLastRunRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def names(self):
        """Gets the names of this DescribeCanariesLastRunRequest.

        <p>Use this parameter to return only canaries that match the names that you specify here. You can specify as many as five canary names.</p> <p>If you specify this parameter, the operation is successful only if you have authorization to view all the canaries that you specify in your request. If you do not have permission to view any of the canaries, the request fails with a 403 response.</p> <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an IAM policy that restricts which canaries that you are allowed to view. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html\"> Limiting a user to viewing specific canaries</a>.</p>

        :return: The names of this DescribeCanariesLastRunRequest.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this DescribeCanariesLastRunRequest.

        <p>Use this parameter to return only canaries that match the names that you specify here. You can specify as many as five canary names.</p> <p>If you specify this parameter, the operation is successful only if you have authorization to view all the canaries that you specify in your request. If you do not have permission to view any of the canaries, the request fails with a 403 response.</p> <p>You are required to use the <code>Names</code> parameter if you are logged on to a user or role that has an IAM policy that restricts which canaries that you are allowed to view. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Restricted.html\"> Limiting a user to viewing specific canaries</a>.</p>

        :param names: The names of this DescribeCanariesLastRunRequest.
        :type names: List[str]
        """
        if names is not None and len(names) > 5:
            raise ValueError("Invalid value for `names`, number of items must be less than or equal to `5`")
        if names is not None and len(names) < 1:
            raise ValueError("Invalid value for `names`, number of items must be greater than or equal to `1`")

        self._names = names
