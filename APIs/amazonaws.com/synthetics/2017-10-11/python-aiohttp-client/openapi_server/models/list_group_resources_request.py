# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListGroupResourcesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, next_token: str=None, max_results: int=None):
        """ListGroupResourcesRequest - a model defined in OpenAPI

        :param next_token: The next_token of this ListGroupResourcesRequest.
        :param max_results: The max_results of this ListGroupResourcesRequest.
        """
        self.openapi_types = {
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListGroupResourcesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListGroupResources_request of this ListGroupResourcesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def next_token(self):
        """Gets the next_token of this ListGroupResourcesRequest.

        A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.

        :return: The next_token of this ListGroupResourcesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListGroupResourcesRequest.

        A token that indicates that there is more data available. You can use this token in a subsequent operation to retrieve the next set of results.

        :param next_token: The next_token of this ListGroupResourcesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 512:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `512`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'^.+$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^.+$/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListGroupResourcesRequest.

        Specify this parameter to limit how many canary ARNs are returned each time you use the <code>ListGroupResources</code> operation. If you omit this parameter, the default of 20 is used.

        :return: The max_results of this ListGroupResourcesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListGroupResourcesRequest.

        Specify this parameter to limit how many canary ARNs are returned each time you use the <code>ListGroupResources</code> operation. If you omit this parameter, the default of 20 is used.

        :param max_results: The max_results of this ListGroupResourcesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 20:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `20`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
