# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CanaryRunConfigInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timeout_in_seconds: int=None, memory_in_mb: int=None, active_tracing: bool=None, environment_variables: Dict=None):
        """CanaryRunConfigInput - a model defined in OpenAPI

        :param timeout_in_seconds: The timeout_in_seconds of this CanaryRunConfigInput.
        :param memory_in_mb: The memory_in_mb of this CanaryRunConfigInput.
        :param active_tracing: The active_tracing of this CanaryRunConfigInput.
        :param environment_variables: The environment_variables of this CanaryRunConfigInput.
        """
        self.openapi_types = {
            'timeout_in_seconds': int,
            'memory_in_mb': int,
            'active_tracing': bool,
            'environment_variables': Dict
        }

        self.attribute_map = {
            'timeout_in_seconds': 'TimeoutInSeconds',
            'memory_in_mb': 'MemoryInMB',
            'active_tracing': 'ActiveTracing',
            'environment_variables': 'EnvironmentVariables'
        }

        self._timeout_in_seconds = timeout_in_seconds
        self._memory_in_mb = memory_in_mb
        self._active_tracing = active_tracing
        self._environment_variables = environment_variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CanaryRunConfigInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CanaryRunConfigInput of this CanaryRunConfigInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timeout_in_seconds(self):
        """Gets the timeout_in_seconds of this CanaryRunConfigInput.


        :return: The timeout_in_seconds of this CanaryRunConfigInput.
        :rtype: int
        """
        return self._timeout_in_seconds

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, timeout_in_seconds):
        """Sets the timeout_in_seconds of this CanaryRunConfigInput.


        :param timeout_in_seconds: The timeout_in_seconds of this CanaryRunConfigInput.
        :type timeout_in_seconds: int
        """

        self._timeout_in_seconds = timeout_in_seconds

    @property
    def memory_in_mb(self):
        """Gets the memory_in_mb of this CanaryRunConfigInput.


        :return: The memory_in_mb of this CanaryRunConfigInput.
        :rtype: int
        """
        return self._memory_in_mb

    @memory_in_mb.setter
    def memory_in_mb(self, memory_in_mb):
        """Sets the memory_in_mb of this CanaryRunConfigInput.


        :param memory_in_mb: The memory_in_mb of this CanaryRunConfigInput.
        :type memory_in_mb: int
        """

        self._memory_in_mb = memory_in_mb

    @property
    def active_tracing(self):
        """Gets the active_tracing of this CanaryRunConfigInput.


        :return: The active_tracing of this CanaryRunConfigInput.
        :rtype: bool
        """
        return self._active_tracing

    @active_tracing.setter
    def active_tracing(self, active_tracing):
        """Sets the active_tracing of this CanaryRunConfigInput.


        :param active_tracing: The active_tracing of this CanaryRunConfigInput.
        :type active_tracing: bool
        """

        self._active_tracing = active_tracing

    @property
    def environment_variables(self):
        """Gets the environment_variables of this CanaryRunConfigInput.


        :return: The environment_variables of this CanaryRunConfigInput.
        :rtype: Dict
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this CanaryRunConfigInput.


        :param environment_variables: The environment_variables of this CanaryRunConfigInput.
        :type environment_variables: Dict
        """

        self._environment_variables = environment_variables
