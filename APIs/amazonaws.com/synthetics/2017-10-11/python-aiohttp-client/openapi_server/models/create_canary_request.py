# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_canary_request_artifact_config import CreateCanaryRequestArtifactConfig
from openapi_server.models.create_canary_request_code import CreateCanaryRequestCode
from openapi_server.models.create_canary_request_run_config import CreateCanaryRequestRunConfig
from openapi_server.models.create_canary_request_schedule import CreateCanaryRequestSchedule
from openapi_server.models.create_canary_request_vpc_config import CreateCanaryRequestVpcConfig
import re
from openapi_server import util


class CreateCanaryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, code: CreateCanaryRequestCode=None, artifact_s3_location: str=None, execution_role_arn: str=None, schedule: CreateCanaryRequestSchedule=None, run_config: CreateCanaryRequestRunConfig=None, success_retention_period_in_days: int=None, failure_retention_period_in_days: int=None, runtime_version: str=None, vpc_config: CreateCanaryRequestVpcConfig=None, tags: Dict[str, str]=None, artifact_config: CreateCanaryRequestArtifactConfig=None):
        """CreateCanaryRequest - a model defined in OpenAPI

        :param name: The name of this CreateCanaryRequest.
        :param code: The code of this CreateCanaryRequest.
        :param artifact_s3_location: The artifact_s3_location of this CreateCanaryRequest.
        :param execution_role_arn: The execution_role_arn of this CreateCanaryRequest.
        :param schedule: The schedule of this CreateCanaryRequest.
        :param run_config: The run_config of this CreateCanaryRequest.
        :param success_retention_period_in_days: The success_retention_period_in_days of this CreateCanaryRequest.
        :param failure_retention_period_in_days: The failure_retention_period_in_days of this CreateCanaryRequest.
        :param runtime_version: The runtime_version of this CreateCanaryRequest.
        :param vpc_config: The vpc_config of this CreateCanaryRequest.
        :param tags: The tags of this CreateCanaryRequest.
        :param artifact_config: The artifact_config of this CreateCanaryRequest.
        """
        self.openapi_types = {
            'name': str,
            'code': CreateCanaryRequestCode,
            'artifact_s3_location': str,
            'execution_role_arn': str,
            'schedule': CreateCanaryRequestSchedule,
            'run_config': CreateCanaryRequestRunConfig,
            'success_retention_period_in_days': int,
            'failure_retention_period_in_days': int,
            'runtime_version': str,
            'vpc_config': CreateCanaryRequestVpcConfig,
            'tags': Dict[str, str],
            'artifact_config': CreateCanaryRequestArtifactConfig
        }

        self.attribute_map = {
            'name': 'Name',
            'code': 'Code',
            'artifact_s3_location': 'ArtifactS3Location',
            'execution_role_arn': 'ExecutionRoleArn',
            'schedule': 'Schedule',
            'run_config': 'RunConfig',
            'success_retention_period_in_days': 'SuccessRetentionPeriodInDays',
            'failure_retention_period_in_days': 'FailureRetentionPeriodInDays',
            'runtime_version': 'RuntimeVersion',
            'vpc_config': 'VpcConfig',
            'tags': 'Tags',
            'artifact_config': 'ArtifactConfig'
        }

        self._name = name
        self._code = code
        self._artifact_s3_location = artifact_s3_location
        self._execution_role_arn = execution_role_arn
        self._schedule = schedule
        self._run_config = run_config
        self._success_retention_period_in_days = success_retention_period_in_days
        self._failure_retention_period_in_days = failure_retention_period_in_days
        self._runtime_version = runtime_version
        self._vpc_config = vpc_config
        self._tags = tags
        self._artifact_config = artifact_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCanaryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCanary_request of this CreateCanaryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateCanaryRequest.

        <p>The name for this canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account.</p> <p>Do not include secrets or proprietary information in your canary names. The canary name makes up part of the canary ARN, and the ARN is included in outbound calls over the internet. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>

        :return: The name of this CreateCanaryRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCanaryRequest.

        <p>The name for this canary. Be sure to give it a descriptive name that distinguishes it from other canaries in your account.</p> <p>Do not include secrets or proprietary information in your canary names. The canary name makes up part of the canary ARN, and the ARN is included in outbound calls over the internet. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>

        :param name: The name of this CreateCanaryRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 21:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `21`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[0-9a-z_\-]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[0-9a-z_\-]+$/`")

        self._name = name

    @property
    def code(self):
        """Gets the code of this CreateCanaryRequest.


        :return: The code of this CreateCanaryRequest.
        :rtype: CreateCanaryRequestCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreateCanaryRequest.


        :param code: The code of this CreateCanaryRequest.
        :type code: CreateCanaryRequestCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def artifact_s3_location(self):
        """Gets the artifact_s3_location of this CreateCanaryRequest.

        The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the S3 bucket can't include a period (.).

        :return: The artifact_s3_location of this CreateCanaryRequest.
        :rtype: str
        """
        return self._artifact_s3_location

    @artifact_s3_location.setter
    def artifact_s3_location(self, artifact_s3_location):
        """Sets the artifact_s3_location of this CreateCanaryRequest.

        The location in Amazon S3 where Synthetics stores artifacts from the test runs of this canary. Artifacts include the log file, screenshots, and HAR files. The name of the S3 bucket can't include a period (.).

        :param artifact_s3_location: The artifact_s3_location of this CreateCanaryRequest.
        :type artifact_s3_location: str
        """
        if artifact_s3_location is None:
            raise ValueError("Invalid value for `artifact_s3_location`, must not be `None`")
        if artifact_s3_location is not None and len(artifact_s3_location) > 1024:
            raise ValueError("Invalid value for `artifact_s3_location`, length must be less than or equal to `1024`")
        if artifact_s3_location is not None and len(artifact_s3_location) < 1:
            raise ValueError("Invalid value for `artifact_s3_location`, length must be greater than or equal to `1`")

        self._artifact_s3_location = artifact_s3_location

    @property
    def execution_role_arn(self):
        """Gets the execution_role_arn of this CreateCanaryRequest.

        <p>The ARN of the IAM role to be used to run the canary. This role must already exist, and must include <code>lambda.amazonaws.com</code> as a principal in the trust policy. The role must also have the following permissions:</p> <ul> <li> <p> <code>s3:PutObject</code> </p> </li> <li> <p> <code>s3:GetBucketLocation</code> </p> </li> <li> <p> <code>s3:ListAllMyBuckets</code> </p> </li> <li> <p> <code>cloudwatch:PutMetricData</code> </p> </li> <li> <p> <code>logs:CreateLogGroup</code> </p> </li> <li> <p> <code>logs:CreateLogStream</code> </p> </li> <li> <p> <code>logs:PutLogEvents</code> </p> </li> </ul>

        :return: The execution_role_arn of this CreateCanaryRequest.
        :rtype: str
        """
        return self._execution_role_arn

    @execution_role_arn.setter
    def execution_role_arn(self, execution_role_arn):
        """Sets the execution_role_arn of this CreateCanaryRequest.

        <p>The ARN of the IAM role to be used to run the canary. This role must already exist, and must include <code>lambda.amazonaws.com</code> as a principal in the trust policy. The role must also have the following permissions:</p> <ul> <li> <p> <code>s3:PutObject</code> </p> </li> <li> <p> <code>s3:GetBucketLocation</code> </p> </li> <li> <p> <code>s3:ListAllMyBuckets</code> </p> </li> <li> <p> <code>cloudwatch:PutMetricData</code> </p> </li> <li> <p> <code>logs:CreateLogGroup</code> </p> </li> <li> <p> <code>logs:CreateLogStream</code> </p> </li> <li> <p> <code>logs:PutLogEvents</code> </p> </li> </ul>

        :param execution_role_arn: The execution_role_arn of this CreateCanaryRequest.
        :type execution_role_arn: str
        """
        if execution_role_arn is None:
            raise ValueError("Invalid value for `execution_role_arn`, must not be `None`")
        if execution_role_arn is not None and len(execution_role_arn) > 2048:
            raise ValueError("Invalid value for `execution_role_arn`, length must be less than or equal to `2048`")
        if execution_role_arn is not None and len(execution_role_arn) < 1:
            raise ValueError("Invalid value for `execution_role_arn`, length must be greater than or equal to `1`")
        if execution_role_arn is not None and not re.search(r'arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+', execution_role_arn):
            raise ValueError("Invalid value for `execution_role_arn`, must be a follow pattern or equal to `/arn:(aws[a-zA-Z-]*)?:iam::\d{12}:role\/?[a-zA-Z_0-9+=,.@\-_\/]+/`")

        self._execution_role_arn = execution_role_arn

    @property
    def schedule(self):
        """Gets the schedule of this CreateCanaryRequest.


        :return: The schedule of this CreateCanaryRequest.
        :rtype: CreateCanaryRequestSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this CreateCanaryRequest.


        :param schedule: The schedule of this CreateCanaryRequest.
        :type schedule: CreateCanaryRequestSchedule
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def run_config(self):
        """Gets the run_config of this CreateCanaryRequest.


        :return: The run_config of this CreateCanaryRequest.
        :rtype: CreateCanaryRequestRunConfig
        """
        return self._run_config

    @run_config.setter
    def run_config(self, run_config):
        """Sets the run_config of this CreateCanaryRequest.


        :param run_config: The run_config of this CreateCanaryRequest.
        :type run_config: CreateCanaryRequestRunConfig
        """

        self._run_config = run_config

    @property
    def success_retention_period_in_days(self):
        """Gets the success_retention_period_in_days of this CreateCanaryRequest.

        The number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.

        :return: The success_retention_period_in_days of this CreateCanaryRequest.
        :rtype: int
        """
        return self._success_retention_period_in_days

    @success_retention_period_in_days.setter
    def success_retention_period_in_days(self, success_retention_period_in_days):
        """Sets the success_retention_period_in_days of this CreateCanaryRequest.

        The number of days to retain data about successful runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.

        :param success_retention_period_in_days: The success_retention_period_in_days of this CreateCanaryRequest.
        :type success_retention_period_in_days: int
        """
        if success_retention_period_in_days is not None and success_retention_period_in_days > 1024:
            raise ValueError("Invalid value for `success_retention_period_in_days`, must be a value less than or equal to `1024`")
        if success_retention_period_in_days is not None and success_retention_period_in_days < 1:
            raise ValueError("Invalid value for `success_retention_period_in_days`, must be a value greater than or equal to `1`")

        self._success_retention_period_in_days = success_retention_period_in_days

    @property
    def failure_retention_period_in_days(self):
        """Gets the failure_retention_period_in_days of this CreateCanaryRequest.

        The number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.

        :return: The failure_retention_period_in_days of this CreateCanaryRequest.
        :rtype: int
        """
        return self._failure_retention_period_in_days

    @failure_retention_period_in_days.setter
    def failure_retention_period_in_days(self, failure_retention_period_in_days):
        """Sets the failure_retention_period_in_days of this CreateCanaryRequest.

        The number of days to retain data about failed runs of this canary. If you omit this field, the default of 31 days is used. The valid range is 1 to 455 days.

        :param failure_retention_period_in_days: The failure_retention_period_in_days of this CreateCanaryRequest.
        :type failure_retention_period_in_days: int
        """
        if failure_retention_period_in_days is not None and failure_retention_period_in_days > 1024:
            raise ValueError("Invalid value for `failure_retention_period_in_days`, must be a value less than or equal to `1024`")
        if failure_retention_period_in_days is not None and failure_retention_period_in_days < 1:
            raise ValueError("Invalid value for `failure_retention_period_in_days`, must be a value greater than or equal to `1`")

        self._failure_retention_period_in_days = failure_retention_period_in_days

    @property
    def runtime_version(self):
        """Gets the runtime_version of this CreateCanaryRequest.

        Specifies the runtime version to use for the canary. For a list of valid runtime versions and more information about runtime versions, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html\"> Canary Runtime Versions</a>.

        :return: The runtime_version of this CreateCanaryRequest.
        :rtype: str
        """
        return self._runtime_version

    @runtime_version.setter
    def runtime_version(self, runtime_version):
        """Sets the runtime_version of this CreateCanaryRequest.

        Specifies the runtime version to use for the canary. For a list of valid runtime versions and more information about runtime versions, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Library.html\"> Canary Runtime Versions</a>.

        :param runtime_version: The runtime_version of this CreateCanaryRequest.
        :type runtime_version: str
        """
        if runtime_version is None:
            raise ValueError("Invalid value for `runtime_version`, must not be `None`")
        if runtime_version is not None and len(runtime_version) > 1024:
            raise ValueError("Invalid value for `runtime_version`, length must be less than or equal to `1024`")
        if runtime_version is not None and len(runtime_version) < 1:
            raise ValueError("Invalid value for `runtime_version`, length must be greater than or equal to `1`")

        self._runtime_version = runtime_version

    @property
    def vpc_config(self):
        """Gets the vpc_config of this CreateCanaryRequest.


        :return: The vpc_config of this CreateCanaryRequest.
        :rtype: CreateCanaryRequestVpcConfig
        """
        return self._vpc_config

    @vpc_config.setter
    def vpc_config(self, vpc_config):
        """Sets the vpc_config of this CreateCanaryRequest.


        :param vpc_config: The vpc_config of this CreateCanaryRequest.
        :type vpc_config: CreateCanaryRequestVpcConfig
        """

        self._vpc_config = vpc_config

    @property
    def tags(self):
        """Gets the tags of this CreateCanaryRequest.

        <p>A list of key-value pairs to associate with the canary. You can associate as many as 50 tags with a canary.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.</p>

        :return: The tags of this CreateCanaryRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCanaryRequest.

        <p>A list of key-value pairs to associate with the canary. You can associate as many as 50 tags with a canary.</p> <p>Tags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.</p>

        :param tags: The tags of this CreateCanaryRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def artifact_config(self):
        """Gets the artifact_config of this CreateCanaryRequest.


        :return: The artifact_config of this CreateCanaryRequest.
        :rtype: CreateCanaryRequestArtifactConfig
        """
        return self._artifact_config

    @artifact_config.setter
    def artifact_config(self, artifact_config):
        """Sets the artifact_config of this CreateCanaryRequest.


        :param artifact_config: The artifact_config of this CreateCanaryRequest.
        :type artifact_config: CreateCanaryRequestArtifactConfig
        """

        self._artifact_config = artifact_config
