/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Synthetics);
  }
}(this, function(expect, Synthetics) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Synthetics.Canary();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Canary', function() {
    it('should create an instance of Canary', function() {
      // uncomment below and update the code to test Canary
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be.a(Synthetics.Canary);
    });

    it('should have the property id (base name: "Id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "Code")', function() {
      // uncomment below and update the code to test the property code
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property executionRoleArn (base name: "ExecutionRoleArn")', function() {
      // uncomment below and update the code to test the property executionRoleArn
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property schedule (base name: "Schedule")', function() {
      // uncomment below and update the code to test the property schedule
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property runConfig (base name: "RunConfig")', function() {
      // uncomment below and update the code to test the property runConfig
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property successRetentionPeriodInDays (base name: "SuccessRetentionPeriodInDays")', function() {
      // uncomment below and update the code to test the property successRetentionPeriodInDays
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property failureRetentionPeriodInDays (base name: "FailureRetentionPeriodInDays")', function() {
      // uncomment below and update the code to test the property failureRetentionPeriodInDays
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property timeline (base name: "Timeline")', function() {
      // uncomment below and update the code to test the property timeline
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property artifactS3Location (base name: "ArtifactS3Location")', function() {
      // uncomment below and update the code to test the property artifactS3Location
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property engineArn (base name: "EngineArn")', function() {
      // uncomment below and update the code to test the property engineArn
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property runtimeVersion (base name: "RuntimeVersion")', function() {
      // uncomment below and update the code to test the property runtimeVersion
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property vpcConfig (base name: "VpcConfig")', function() {
      // uncomment below and update the code to test the property vpcConfig
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property visualReference (base name: "VisualReference")', function() {
      // uncomment below and update the code to test the property visualReference
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

    it('should have the property artifactConfig (base name: "ArtifactConfig")', function() {
      // uncomment below and update the code to test the property artifactConfig
      //var instance = new Synthetics.Canary();
      //expect(instance).to.be();
    });

  });

}));
