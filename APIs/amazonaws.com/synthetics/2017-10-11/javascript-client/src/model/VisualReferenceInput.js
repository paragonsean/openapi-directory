/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VisualReferenceInput model module.
 * @module model/VisualReferenceInput
 * @version 2017-10-11
 */
class VisualReferenceInput {
    /**
     * Constructs a new <code>VisualReferenceInput</code>.
     * &lt;p&gt;An object that specifies what screenshots to use as a baseline for visual monitoring by this canary. It can optionally also specify parts of the screenshots to ignore during the visual monitoring comparison.&lt;/p&gt; &lt;p&gt;Visual monitoring is supported only on canaries running the &lt;b&gt;syn-puppeteer-node-3.2&lt;/b&gt; runtime or later. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Library_SyntheticsLogger_VisualTesting.html\&quot;&gt; Visual monitoring&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch_Synthetics_Canaries_Blueprints_VisualTesting.html\&quot;&gt; Visual monitoring blueprint&lt;/a&gt; &lt;/p&gt;
     * @alias module:model/VisualReferenceInput
     * @param baseCanaryRunId {String} 
     */
    constructor(baseCanaryRunId) { 
        
        VisualReferenceInput.initialize(this, baseCanaryRunId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseCanaryRunId) { 
        obj['BaseCanaryRunId'] = baseCanaryRunId;
    }

    /**
     * Constructs a <code>VisualReferenceInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VisualReferenceInput} obj Optional instance to populate.
     * @return {module:model/VisualReferenceInput} The populated <code>VisualReferenceInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VisualReferenceInput();

            if (data.hasOwnProperty('BaseScreenshots')) {
                obj['BaseScreenshots'] = ApiClient.convertToType(data['BaseScreenshots'], Array);
            }
            if (data.hasOwnProperty('BaseCanaryRunId')) {
                obj['BaseCanaryRunId'] = ApiClient.convertToType(data['BaseCanaryRunId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VisualReferenceInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VisualReferenceInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VisualReferenceInput.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `BaseScreenshots`
        if (data['BaseScreenshots']) { // data not null
          Array.validateJSON(data['BaseScreenshots']);
        }
        // validate the optional field `BaseCanaryRunId`
        if (data['BaseCanaryRunId']) { // data not null
          String.validateJSON(data['BaseCanaryRunId']);
        }

        return true;
    }


}

VisualReferenceInput.RequiredProperties = ["BaseCanaryRunId"];

/**
 * @member {Array} BaseScreenshots
 */
VisualReferenceInput.prototype['BaseScreenshots'] = undefined;

/**
 * @member {String} BaseCanaryRunId
 */
VisualReferenceInput.prototype['BaseCanaryRunId'] = undefined;






export default VisualReferenceInput;

