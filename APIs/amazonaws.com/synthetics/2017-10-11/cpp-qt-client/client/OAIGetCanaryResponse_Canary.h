/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetCanaryResponse_Canary.h
 *
 * 
 */

#ifndef OAIGetCanaryResponse_Canary_H
#define OAIGetCanaryResponse_Canary_H

#include <QJsonObject>

#include "OAICanaryCodeOutput.h"
#include "OAICanaryRunConfigOutput.h"
#include "OAICanary_ArtifactConfig.h"
#include "OAICanary_Schedule.h"
#include "OAICanary_Status.h"
#include "OAICanary_Timeline.h"
#include "OAICanary_VisualReference.h"
#include "OAIVpcConfigOutput.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICanaryCodeOutput;
class OAICanary_Schedule;
class OAICanaryRunConfigOutput;
class OAICanary_Status;
class OAICanary_Timeline;
class OAIVpcConfigOutput;
class OAICanary_VisualReference;
class OAICanary_ArtifactConfig;

class OAIGetCanaryResponse_Canary : public OAIObject {
public:
    OAIGetCanaryResponse_Canary();
    OAIGetCanaryResponse_Canary(QString json);
    ~OAIGetCanaryResponse_Canary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICanaryCodeOutput getCode() const;
    void setCode(const OAICanaryCodeOutput &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getExecutionRoleArn() const;
    void setExecutionRoleArn(const QString &execution_role_arn);
    bool is_execution_role_arn_Set() const;
    bool is_execution_role_arn_Valid() const;

    OAICanary_Schedule getSchedule() const;
    void setSchedule(const OAICanary_Schedule &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    OAICanaryRunConfigOutput getRunConfig() const;
    void setRunConfig(const OAICanaryRunConfigOutput &run_config);
    bool is_run_config_Set() const;
    bool is_run_config_Valid() const;

    qint32 getSuccessRetentionPeriodInDays() const;
    void setSuccessRetentionPeriodInDays(const qint32 &success_retention_period_in_days);
    bool is_success_retention_period_in_days_Set() const;
    bool is_success_retention_period_in_days_Valid() const;

    qint32 getFailureRetentionPeriodInDays() const;
    void setFailureRetentionPeriodInDays(const qint32 &failure_retention_period_in_days);
    bool is_failure_retention_period_in_days_Set() const;
    bool is_failure_retention_period_in_days_Valid() const;

    OAICanary_Status getStatus() const;
    void setStatus(const OAICanary_Status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICanary_Timeline getTimeline() const;
    void setTimeline(const OAICanary_Timeline &timeline);
    bool is_timeline_Set() const;
    bool is_timeline_Valid() const;

    QString getArtifactS3Location() const;
    void setArtifactS3Location(const QString &artifact_s3_location);
    bool is_artifact_s3_location_Set() const;
    bool is_artifact_s3_location_Valid() const;

    QString getEngineArn() const;
    void setEngineArn(const QString &engine_arn);
    bool is_engine_arn_Set() const;
    bool is_engine_arn_Valid() const;

    QString getRuntimeVersion() const;
    void setRuntimeVersion(const QString &runtime_version);
    bool is_runtime_version_Set() const;
    bool is_runtime_version_Valid() const;

    OAIVpcConfigOutput getVpcConfig() const;
    void setVpcConfig(const OAIVpcConfigOutput &vpc_config);
    bool is_vpc_config_Set() const;
    bool is_vpc_config_Valid() const;

    OAICanary_VisualReference getVisualReference() const;
    void setVisualReference(const OAICanary_VisualReference &visual_reference);
    bool is_visual_reference_Set() const;
    bool is_visual_reference_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICanary_ArtifactConfig getArtifactConfig() const;
    void setArtifactConfig(const OAICanary_ArtifactConfig &artifact_config);
    bool is_artifact_config_Set() const;
    bool is_artifact_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICanaryCodeOutput m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_execution_role_arn;
    bool m_execution_role_arn_isSet;
    bool m_execution_role_arn_isValid;

    OAICanary_Schedule m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    OAICanaryRunConfigOutput m_run_config;
    bool m_run_config_isSet;
    bool m_run_config_isValid;

    qint32 m_success_retention_period_in_days;
    bool m_success_retention_period_in_days_isSet;
    bool m_success_retention_period_in_days_isValid;

    qint32 m_failure_retention_period_in_days;
    bool m_failure_retention_period_in_days_isSet;
    bool m_failure_retention_period_in_days_isValid;

    OAICanary_Status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICanary_Timeline m_timeline;
    bool m_timeline_isSet;
    bool m_timeline_isValid;

    QString m_artifact_s3_location;
    bool m_artifact_s3_location_isSet;
    bool m_artifact_s3_location_isValid;

    QString m_engine_arn;
    bool m_engine_arn_isSet;
    bool m_engine_arn_isValid;

    QString m_runtime_version;
    bool m_runtime_version_isSet;
    bool m_runtime_version_isValid;

    OAIVpcConfigOutput m_vpc_config;
    bool m_vpc_config_isSet;
    bool m_vpc_config_isValid;

    OAICanary_VisualReference m_visual_reference;
    bool m_visual_reference_isSet;
    bool m_visual_reference_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICanary_ArtifactConfig m_artifact_config;
    bool m_artifact_config_isSet;
    bool m_artifact_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetCanaryResponse_Canary)

#endif // OAIGetCanaryResponse_Canary_H
