/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanaryLastRun_LastRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanaryLastRun_LastRun::OAICanaryLastRun_LastRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanaryLastRun_LastRun::OAICanaryLastRun_LastRun() {
    this->initializeModel();
}

OAICanaryLastRun_LastRun::~OAICanaryLastRun_LastRun() {}

void OAICanaryLastRun_LastRun::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_artifact_s3_location_isSet = false;
    m_artifact_s3_location_isValid = false;
}

void OAICanaryLastRun_LastRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanaryLastRun_LastRun::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("Timeline")]);
    m_timeline_isSet = !json[QString("Timeline")].isNull() && m_timeline_isValid;

    m_artifact_s3_location_isValid = ::OpenAPI::fromJsonValue(m_artifact_s3_location, json[QString("ArtifactS3Location")]);
    m_artifact_s3_location_isSet = !json[QString("ArtifactS3Location")].isNull() && m_artifact_s3_location_isValid;
}

QString OAICanaryLastRun_LastRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanaryLastRun_LastRun::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("Timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_artifact_s3_location_isSet) {
        obj.insert(QString("ArtifactS3Location"), ::OpenAPI::toJsonValue(m_artifact_s3_location));
    }
    return obj;
}

QString OAICanaryLastRun_LastRun::getId() const {
    return m_id;
}
void OAICanaryLastRun_LastRun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICanaryLastRun_LastRun::is_id_Set() const{
    return m_id_isSet;
}

bool OAICanaryLastRun_LastRun::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICanaryLastRun_LastRun::getName() const {
    return m_name;
}
void OAICanaryLastRun_LastRun::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICanaryLastRun_LastRun::is_name_Set() const{
    return m_name_isSet;
}

bool OAICanaryLastRun_LastRun::is_name_Valid() const{
    return m_name_isValid;
}

OAICanaryRun_Status OAICanaryLastRun_LastRun::getStatus() const {
    return m_status;
}
void OAICanaryLastRun_LastRun::setStatus(const OAICanaryRun_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICanaryLastRun_LastRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAICanaryLastRun_LastRun::is_status_Valid() const{
    return m_status_isValid;
}

OAICanaryRun_Timeline OAICanaryLastRun_LastRun::getTimeline() const {
    return m_timeline;
}
void OAICanaryLastRun_LastRun::setTimeline(const OAICanaryRun_Timeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAICanaryLastRun_LastRun::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAICanaryLastRun_LastRun::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAICanaryLastRun_LastRun::getArtifactS3Location() const {
    return m_artifact_s3_location;
}
void OAICanaryLastRun_LastRun::setArtifactS3Location(const QString &artifact_s3_location) {
    m_artifact_s3_location = artifact_s3_location;
    m_artifact_s3_location_isSet = true;
}

bool OAICanaryLastRun_LastRun::is_artifact_s3_location_Set() const{
    return m_artifact_s3_location_isSet;
}

bool OAICanaryLastRun_LastRun::is_artifact_s3_location_Valid() const{
    return m_artifact_s3_location_isValid;
}

bool OAICanaryLastRun_LastRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_s3_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanaryLastRun_LastRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
