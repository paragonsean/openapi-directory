/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICanaryRun.h
 *
 * This structure contains the details about one run of one canary.
 */

#ifndef OAICanaryRun_H
#define OAICanaryRun_H

#include <QJsonObject>

#include "OAICanaryRun_Status.h"
#include "OAICanaryRun_Timeline.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICanaryRun_Status;
class OAICanaryRun_Timeline;

class OAICanaryRun : public OAIObject {
public:
    OAICanaryRun();
    OAICanaryRun(QString json);
    ~OAICanaryRun() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAICanaryRun_Status getStatus() const;
    void setStatus(const OAICanaryRun_Status &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAICanaryRun_Timeline getTimeline() const;
    void setTimeline(const OAICanaryRun_Timeline &timeline);
    bool is_timeline_Set() const;
    bool is_timeline_Valid() const;

    QString getArtifactS3Location() const;
    void setArtifactS3Location(const QString &artifact_s3_location);
    bool is_artifact_s3_location_Set() const;
    bool is_artifact_s3_location_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAICanaryRun_Status m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAICanaryRun_Timeline m_timeline;
    bool m_timeline_isSet;
    bool m_timeline_isValid;

    QString m_artifact_s3_location;
    bool m_artifact_s3_location_isSet;
    bool m_artifact_s3_location_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICanaryRun)

#endif // OAICanaryRun_H
