/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanaryRunStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanaryRunStatus::OAICanaryRunStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanaryRunStatus::OAICanaryRunStatus() {
    this->initializeModel();
}

OAICanaryRunStatus::~OAICanaryRunStatus() {}

void OAICanaryRunStatus::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_state_reason_isSet = false;
    m_state_reason_isValid = false;

    m_state_reason_code_isSet = false;
    m_state_reason_code_isValid = false;
}

void OAICanaryRunStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanaryRunStatus::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_state_reason_isValid = ::OpenAPI::fromJsonValue(m_state_reason, json[QString("StateReason")]);
    m_state_reason_isSet = !json[QString("StateReason")].isNull() && m_state_reason_isValid;

    m_state_reason_code_isValid = ::OpenAPI::fromJsonValue(m_state_reason_code, json[QString("StateReasonCode")]);
    m_state_reason_code_isSet = !json[QString("StateReasonCode")].isNull() && m_state_reason_code_isValid;
}

QString OAICanaryRunStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanaryRunStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_state_reason_isSet) {
        obj.insert(QString("StateReason"), ::OpenAPI::toJsonValue(m_state_reason));
    }
    if (m_state_reason_code.isSet()) {
        obj.insert(QString("StateReasonCode"), ::OpenAPI::toJsonValue(m_state_reason_code));
    }
    return obj;
}

OAICanaryRunState OAICanaryRunStatus::getState() const {
    return m_state;
}
void OAICanaryRunStatus::setState(const OAICanaryRunState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICanaryRunStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAICanaryRunStatus::is_state_Valid() const{
    return m_state_isValid;
}

QString OAICanaryRunStatus::getStateReason() const {
    return m_state_reason;
}
void OAICanaryRunStatus::setStateReason(const QString &state_reason) {
    m_state_reason = state_reason;
    m_state_reason_isSet = true;
}

bool OAICanaryRunStatus::is_state_reason_Set() const{
    return m_state_reason_isSet;
}

bool OAICanaryRunStatus::is_state_reason_Valid() const{
    return m_state_reason_isValid;
}

OAICanaryRunStateReasonCode OAICanaryRunStatus::getStateReasonCode() const {
    return m_state_reason_code;
}
void OAICanaryRunStatus::setStateReasonCode(const OAICanaryRunStateReasonCode &state_reason_code) {
    m_state_reason_code = state_reason_code;
    m_state_reason_code_isSet = true;
}

bool OAICanaryRunStatus::is_state_reason_code_Set() const{
    return m_state_reason_code_isSet;
}

bool OAICanaryRunStatus::is_state_reason_code_Valid() const{
    return m_state_reason_code_isValid;
}

bool OAICanaryRunStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_reason_code.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanaryRunStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
