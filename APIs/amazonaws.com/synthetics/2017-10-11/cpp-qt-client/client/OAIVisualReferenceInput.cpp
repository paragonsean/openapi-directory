/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisualReferenceInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisualReferenceInput::OAIVisualReferenceInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisualReferenceInput::OAIVisualReferenceInput() {
    this->initializeModel();
}

OAIVisualReferenceInput::~OAIVisualReferenceInput() {}

void OAIVisualReferenceInput::initializeModel() {

    m_base_screenshots_isSet = false;
    m_base_screenshots_isValid = false;

    m_base_canary_run_id_isSet = false;
    m_base_canary_run_id_isValid = false;
}

void OAIVisualReferenceInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisualReferenceInput::fromJsonObject(QJsonObject json) {

    m_base_screenshots_isValid = ::OpenAPI::fromJsonValue(m_base_screenshots, json[QString("BaseScreenshots")]);
    m_base_screenshots_isSet = !json[QString("BaseScreenshots")].isNull() && m_base_screenshots_isValid;

    m_base_canary_run_id_isValid = ::OpenAPI::fromJsonValue(m_base_canary_run_id, json[QString("BaseCanaryRunId")]);
    m_base_canary_run_id_isSet = !json[QString("BaseCanaryRunId")].isNull() && m_base_canary_run_id_isValid;
}

QString OAIVisualReferenceInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisualReferenceInput::asJsonObject() const {
    QJsonObject obj;
    if (m_base_screenshots.isSet()) {
        obj.insert(QString("BaseScreenshots"), ::OpenAPI::toJsonValue(m_base_screenshots));
    }
    if (m_base_canary_run_id_isSet) {
        obj.insert(QString("BaseCanaryRunId"), ::OpenAPI::toJsonValue(m_base_canary_run_id));
    }
    return obj;
}

QList OAIVisualReferenceInput::getBaseScreenshots() const {
    return m_base_screenshots;
}
void OAIVisualReferenceInput::setBaseScreenshots(const QList &base_screenshots) {
    m_base_screenshots = base_screenshots;
    m_base_screenshots_isSet = true;
}

bool OAIVisualReferenceInput::is_base_screenshots_Set() const{
    return m_base_screenshots_isSet;
}

bool OAIVisualReferenceInput::is_base_screenshots_Valid() const{
    return m_base_screenshots_isValid;
}

QString OAIVisualReferenceInput::getBaseCanaryRunId() const {
    return m_base_canary_run_id;
}
void OAIVisualReferenceInput::setBaseCanaryRunId(const QString &base_canary_run_id) {
    m_base_canary_run_id = base_canary_run_id;
    m_base_canary_run_id_isSet = true;
}

bool OAIVisualReferenceInput::is_base_canary_run_id_Set() const{
    return m_base_canary_run_id_isSet;
}

bool OAIVisualReferenceInput::is_base_canary_run_id_Valid() const{
    return m_base_canary_run_id_isValid;
}

bool OAIVisualReferenceInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_screenshots.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_canary_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisualReferenceInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_canary_run_id_isValid && true;
}

} // namespace OpenAPI
