/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetCanaryRunsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetCanaryRunsResponse::OAIGetCanaryRunsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetCanaryRunsResponse::OAIGetCanaryRunsResponse() {
    this->initializeModel();
}

OAIGetCanaryRunsResponse::~OAIGetCanaryRunsResponse() {}

void OAIGetCanaryRunsResponse::initializeModel() {

    m_canary_runs_isSet = false;
    m_canary_runs_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetCanaryRunsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetCanaryRunsResponse::fromJsonObject(QJsonObject json) {

    m_canary_runs_isValid = ::OpenAPI::fromJsonValue(m_canary_runs, json[QString("CanaryRuns")]);
    m_canary_runs_isSet = !json[QString("CanaryRuns")].isNull() && m_canary_runs_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetCanaryRunsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetCanaryRunsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_canary_runs.isSet()) {
        obj.insert(QString("CanaryRuns"), ::OpenAPI::toJsonValue(m_canary_runs));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIGetCanaryRunsResponse::getCanaryRuns() const {
    return m_canary_runs;
}
void OAIGetCanaryRunsResponse::setCanaryRuns(const QList &canary_runs) {
    m_canary_runs = canary_runs;
    m_canary_runs_isSet = true;
}

bool OAIGetCanaryRunsResponse::is_canary_runs_Set() const{
    return m_canary_runs_isSet;
}

bool OAIGetCanaryRunsResponse::is_canary_runs_Valid() const{
    return m_canary_runs_isValid;
}

QString OAIGetCanaryRunsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetCanaryRunsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetCanaryRunsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetCanaryRunsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetCanaryRunsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_canary_runs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetCanaryRunsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
