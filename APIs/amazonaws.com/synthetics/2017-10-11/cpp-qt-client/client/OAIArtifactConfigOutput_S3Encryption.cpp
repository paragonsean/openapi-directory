/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArtifactConfigOutput_S3Encryption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArtifactConfigOutput_S3Encryption::OAIArtifactConfigOutput_S3Encryption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArtifactConfigOutput_S3Encryption::OAIArtifactConfigOutput_S3Encryption() {
    this->initializeModel();
}

OAIArtifactConfigOutput_S3Encryption::~OAIArtifactConfigOutput_S3Encryption() {}

void OAIArtifactConfigOutput_S3Encryption::initializeModel() {

    m_encryption_mode_isSet = false;
    m_encryption_mode_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;
}

void OAIArtifactConfigOutput_S3Encryption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArtifactConfigOutput_S3Encryption::fromJsonObject(QJsonObject json) {

    m_encryption_mode_isValid = ::OpenAPI::fromJsonValue(m_encryption_mode, json[QString("EncryptionMode")]);
    m_encryption_mode_isSet = !json[QString("EncryptionMode")].isNull() && m_encryption_mode_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyArn")].isNull() && m_kms_key_arn_isValid;
}

QString OAIArtifactConfigOutput_S3Encryption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArtifactConfigOutput_S3Encryption::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_mode.isSet()) {
        obj.insert(QString("EncryptionMode"), ::OpenAPI::toJsonValue(m_encryption_mode));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    return obj;
}

OAIEncryptionMode OAIArtifactConfigOutput_S3Encryption::getEncryptionMode() const {
    return m_encryption_mode;
}
void OAIArtifactConfigOutput_S3Encryption::setEncryptionMode(const OAIEncryptionMode &encryption_mode) {
    m_encryption_mode = encryption_mode;
    m_encryption_mode_isSet = true;
}

bool OAIArtifactConfigOutput_S3Encryption::is_encryption_mode_Set() const{
    return m_encryption_mode_isSet;
}

bool OAIArtifactConfigOutput_S3Encryption::is_encryption_mode_Valid() const{
    return m_encryption_mode_isValid;
}

QString OAIArtifactConfigOutput_S3Encryption::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIArtifactConfigOutput_S3Encryption::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIArtifactConfigOutput_S3Encryption::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIArtifactConfigOutput_S3Encryption::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

bool OAIArtifactConfigOutput_S3Encryption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArtifactConfigOutput_S3Encryption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
