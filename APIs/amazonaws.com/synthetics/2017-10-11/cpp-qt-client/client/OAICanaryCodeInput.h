/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICanaryCodeInput.h
 *
 * Use this structure to input your script code for the canary. This structure contains the Lambda handler with the location where the canary should start running the script. If the script is stored in an S3 bucket, the bucket name, key, and version are also included. If the script was passed into the canary directly, the script code is contained in the value of &lt;code&gt;Zipfile&lt;/code&gt;. 
 */

#ifndef OAICanaryCodeInput_H
#define OAICanaryCodeInput_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICanaryCodeInput : public OAIObject {
public:
    OAICanaryCodeInput();
    OAICanaryCodeInput(QString json);
    ~OAICanaryCodeInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getS3Bucket() const;
    void setS3Bucket(const QString &s3_bucket);
    bool is_s3_bucket_Set() const;
    bool is_s3_bucket_Valid() const;

    QString getS3Key() const;
    void setS3Key(const QString &s3_key);
    bool is_s3_key_Set() const;
    bool is_s3_key_Valid() const;

    QString getS3Version() const;
    void setS3Version(const QString &s3_version);
    bool is_s3_version_Set() const;
    bool is_s3_version_Valid() const;

    QString getZipFile() const;
    void setZipFile(const QString &zip_file);
    bool is_zip_file_Set() const;
    bool is_zip_file_Valid() const;

    QString getHandler() const;
    void setHandler(const QString &handler);
    bool is_handler_Set() const;
    bool is_handler_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_s3_bucket;
    bool m_s3_bucket_isSet;
    bool m_s3_bucket_isValid;

    QString m_s3_key;
    bool m_s3_key_isSet;
    bool m_s3_key_isValid;

    QString m_s3_version;
    bool m_s3_version_isSet;
    bool m_s3_version_isValid;

    QString m_zip_file;
    bool m_zip_file_isSet;
    bool m_zip_file_isValid;

    QString m_handler;
    bool m_handler_isSet;
    bool m_handler_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICanaryCodeInput)

#endif // OAICanaryCodeInput_H
