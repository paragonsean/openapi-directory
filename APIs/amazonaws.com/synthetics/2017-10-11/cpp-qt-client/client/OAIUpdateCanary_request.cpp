/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCanary_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCanary_request::OAIUpdateCanary_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCanary_request::OAIUpdateCanary_request() {
    this->initializeModel();
}

OAIUpdateCanary_request::~OAIUpdateCanary_request() {}

void OAIUpdateCanary_request::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_run_config_isSet = false;
    m_run_config_isValid = false;

    m_success_retention_period_in_days_isSet = false;
    m_success_retention_period_in_days_isValid = false;

    m_failure_retention_period_in_days_isSet = false;
    m_failure_retention_period_in_days_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_visual_reference_isSet = false;
    m_visual_reference_isValid = false;

    m_artifact_s3_location_isSet = false;
    m_artifact_s3_location_isValid = false;

    m_artifact_config_isSet = false;
    m_artifact_config_isValid = false;
}

void OAIUpdateCanary_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCanary_request::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("RuntimeVersion")]);
    m_runtime_version_isSet = !json[QString("RuntimeVersion")].isNull() && m_runtime_version_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_run_config_isValid = ::OpenAPI::fromJsonValue(m_run_config, json[QString("RunConfig")]);
    m_run_config_isSet = !json[QString("RunConfig")].isNull() && m_run_config_isValid;

    m_success_retention_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_success_retention_period_in_days, json[QString("SuccessRetentionPeriodInDays")]);
    m_success_retention_period_in_days_isSet = !json[QString("SuccessRetentionPeriodInDays")].isNull() && m_success_retention_period_in_days_isValid;

    m_failure_retention_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_failure_retention_period_in_days, json[QString("FailureRetentionPeriodInDays")]);
    m_failure_retention_period_in_days_isSet = !json[QString("FailureRetentionPeriodInDays")].isNull() && m_failure_retention_period_in_days_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_visual_reference_isValid = ::OpenAPI::fromJsonValue(m_visual_reference, json[QString("VisualReference")]);
    m_visual_reference_isSet = !json[QString("VisualReference")].isNull() && m_visual_reference_isValid;

    m_artifact_s3_location_isValid = ::OpenAPI::fromJsonValue(m_artifact_s3_location, json[QString("ArtifactS3Location")]);
    m_artifact_s3_location_isSet = !json[QString("ArtifactS3Location")].isNull() && m_artifact_s3_location_isValid;

    m_artifact_config_isValid = ::OpenAPI::fromJsonValue(m_artifact_config, json[QString("ArtifactConfig")]);
    m_artifact_config_isSet = !json[QString("ArtifactConfig")].isNull() && m_artifact_config_isValid;
}

QString OAIUpdateCanary_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCanary_request::asJsonObject() const {
    QJsonObject obj;
    if (m_code.isSet()) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("RuntimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_run_config.isSet()) {
        obj.insert(QString("RunConfig"), ::OpenAPI::toJsonValue(m_run_config));
    }
    if (m_success_retention_period_in_days_isSet) {
        obj.insert(QString("SuccessRetentionPeriodInDays"), ::OpenAPI::toJsonValue(m_success_retention_period_in_days));
    }
    if (m_failure_retention_period_in_days_isSet) {
        obj.insert(QString("FailureRetentionPeriodInDays"), ::OpenAPI::toJsonValue(m_failure_retention_period_in_days));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_visual_reference.isSet()) {
        obj.insert(QString("VisualReference"), ::OpenAPI::toJsonValue(m_visual_reference));
    }
    if (m_artifact_s3_location_isSet) {
        obj.insert(QString("ArtifactS3Location"), ::OpenAPI::toJsonValue(m_artifact_s3_location));
    }
    if (m_artifact_config.isSet()) {
        obj.insert(QString("ArtifactConfig"), ::OpenAPI::toJsonValue(m_artifact_config));
    }
    return obj;
}

OAICreateCanary_request_Code OAIUpdateCanary_request::getCode() const {
    return m_code;
}
void OAIUpdateCanary_request::setCode(const OAICreateCanary_request_Code &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIUpdateCanary_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAIUpdateCanary_request::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIUpdateCanary_request::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAIUpdateCanary_request::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAIUpdateCanary_request::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAIUpdateCanary_request::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

QString OAIUpdateCanary_request::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAIUpdateCanary_request::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAIUpdateCanary_request::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAIUpdateCanary_request::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

OAICreateCanary_request_Schedule OAIUpdateCanary_request::getSchedule() const {
    return m_schedule;
}
void OAIUpdateCanary_request::setSchedule(const OAICreateCanary_request_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIUpdateCanary_request::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIUpdateCanary_request::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAICreateCanary_request_RunConfig OAIUpdateCanary_request::getRunConfig() const {
    return m_run_config;
}
void OAIUpdateCanary_request::setRunConfig(const OAICreateCanary_request_RunConfig &run_config) {
    m_run_config = run_config;
    m_run_config_isSet = true;
}

bool OAIUpdateCanary_request::is_run_config_Set() const{
    return m_run_config_isSet;
}

bool OAIUpdateCanary_request::is_run_config_Valid() const{
    return m_run_config_isValid;
}

qint32 OAIUpdateCanary_request::getSuccessRetentionPeriodInDays() const {
    return m_success_retention_period_in_days;
}
void OAIUpdateCanary_request::setSuccessRetentionPeriodInDays(const qint32 &success_retention_period_in_days) {
    m_success_retention_period_in_days = success_retention_period_in_days;
    m_success_retention_period_in_days_isSet = true;
}

bool OAIUpdateCanary_request::is_success_retention_period_in_days_Set() const{
    return m_success_retention_period_in_days_isSet;
}

bool OAIUpdateCanary_request::is_success_retention_period_in_days_Valid() const{
    return m_success_retention_period_in_days_isValid;
}

qint32 OAIUpdateCanary_request::getFailureRetentionPeriodInDays() const {
    return m_failure_retention_period_in_days;
}
void OAIUpdateCanary_request::setFailureRetentionPeriodInDays(const qint32 &failure_retention_period_in_days) {
    m_failure_retention_period_in_days = failure_retention_period_in_days;
    m_failure_retention_period_in_days_isSet = true;
}

bool OAIUpdateCanary_request::is_failure_retention_period_in_days_Set() const{
    return m_failure_retention_period_in_days_isSet;
}

bool OAIUpdateCanary_request::is_failure_retention_period_in_days_Valid() const{
    return m_failure_retention_period_in_days_isValid;
}

OAICreateCanary_request_VpcConfig OAIUpdateCanary_request::getVpcConfig() const {
    return m_vpc_config;
}
void OAIUpdateCanary_request::setVpcConfig(const OAICreateCanary_request_VpcConfig &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAIUpdateCanary_request::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAIUpdateCanary_request::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAIUpdateCanary_request_VisualReference OAIUpdateCanary_request::getVisualReference() const {
    return m_visual_reference;
}
void OAIUpdateCanary_request::setVisualReference(const OAIUpdateCanary_request_VisualReference &visual_reference) {
    m_visual_reference = visual_reference;
    m_visual_reference_isSet = true;
}

bool OAIUpdateCanary_request::is_visual_reference_Set() const{
    return m_visual_reference_isSet;
}

bool OAIUpdateCanary_request::is_visual_reference_Valid() const{
    return m_visual_reference_isValid;
}

QString OAIUpdateCanary_request::getArtifactS3Location() const {
    return m_artifact_s3_location;
}
void OAIUpdateCanary_request::setArtifactS3Location(const QString &artifact_s3_location) {
    m_artifact_s3_location = artifact_s3_location;
    m_artifact_s3_location_isSet = true;
}

bool OAIUpdateCanary_request::is_artifact_s3_location_Set() const{
    return m_artifact_s3_location_isSet;
}

bool OAIUpdateCanary_request::is_artifact_s3_location_Valid() const{
    return m_artifact_s3_location_isValid;
}

OAICreateCanary_request_ArtifactConfig OAIUpdateCanary_request::getArtifactConfig() const {
    return m_artifact_config;
}
void OAIUpdateCanary_request::setArtifactConfig(const OAICreateCanary_request_ArtifactConfig &artifact_config) {
    m_artifact_config = artifact_config;
    m_artifact_config_isSet = true;
}

bool OAIUpdateCanary_request::is_artifact_config_Set() const{
    return m_artifact_config_isSet;
}

bool OAIUpdateCanary_request::is_artifact_config_Valid() const{
    return m_artifact_config_isValid;
}

bool OAIUpdateCanary_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_retention_period_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_retention_period_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_s3_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCanary_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
