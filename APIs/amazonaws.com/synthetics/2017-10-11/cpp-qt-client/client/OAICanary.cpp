/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanary::OAICanary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanary::OAICanary() {
    this->initializeModel();
}

OAICanary::~OAICanary() {}

void OAICanary::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_execution_role_arn_isSet = false;
    m_execution_role_arn_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_run_config_isSet = false;
    m_run_config_isValid = false;

    m_success_retention_period_in_days_isSet = false;
    m_success_retention_period_in_days_isValid = false;

    m_failure_retention_period_in_days_isSet = false;
    m_failure_retention_period_in_days_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_artifact_s3_location_isSet = false;
    m_artifact_s3_location_isValid = false;

    m_engine_arn_isSet = false;
    m_engine_arn_isValid = false;

    m_runtime_version_isSet = false;
    m_runtime_version_isValid = false;

    m_vpc_config_isSet = false;
    m_vpc_config_isValid = false;

    m_visual_reference_isSet = false;
    m_visual_reference_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_artifact_config_isSet = false;
    m_artifact_config_isValid = false;
}

void OAICanary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanary::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_execution_role_arn_isValid = ::OpenAPI::fromJsonValue(m_execution_role_arn, json[QString("ExecutionRoleArn")]);
    m_execution_role_arn_isSet = !json[QString("ExecutionRoleArn")].isNull() && m_execution_role_arn_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("Schedule")]);
    m_schedule_isSet = !json[QString("Schedule")].isNull() && m_schedule_isValid;

    m_run_config_isValid = ::OpenAPI::fromJsonValue(m_run_config, json[QString("RunConfig")]);
    m_run_config_isSet = !json[QString("RunConfig")].isNull() && m_run_config_isValid;

    m_success_retention_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_success_retention_period_in_days, json[QString("SuccessRetentionPeriodInDays")]);
    m_success_retention_period_in_days_isSet = !json[QString("SuccessRetentionPeriodInDays")].isNull() && m_success_retention_period_in_days_isValid;

    m_failure_retention_period_in_days_isValid = ::OpenAPI::fromJsonValue(m_failure_retention_period_in_days, json[QString("FailureRetentionPeriodInDays")]);
    m_failure_retention_period_in_days_isSet = !json[QString("FailureRetentionPeriodInDays")].isNull() && m_failure_retention_period_in_days_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("Timeline")]);
    m_timeline_isSet = !json[QString("Timeline")].isNull() && m_timeline_isValid;

    m_artifact_s3_location_isValid = ::OpenAPI::fromJsonValue(m_artifact_s3_location, json[QString("ArtifactS3Location")]);
    m_artifact_s3_location_isSet = !json[QString("ArtifactS3Location")].isNull() && m_artifact_s3_location_isValid;

    m_engine_arn_isValid = ::OpenAPI::fromJsonValue(m_engine_arn, json[QString("EngineArn")]);
    m_engine_arn_isSet = !json[QString("EngineArn")].isNull() && m_engine_arn_isValid;

    m_runtime_version_isValid = ::OpenAPI::fromJsonValue(m_runtime_version, json[QString("RuntimeVersion")]);
    m_runtime_version_isSet = !json[QString("RuntimeVersion")].isNull() && m_runtime_version_isValid;

    m_vpc_config_isValid = ::OpenAPI::fromJsonValue(m_vpc_config, json[QString("VpcConfig")]);
    m_vpc_config_isSet = !json[QString("VpcConfig")].isNull() && m_vpc_config_isValid;

    m_visual_reference_isValid = ::OpenAPI::fromJsonValue(m_visual_reference, json[QString("VisualReference")]);
    m_visual_reference_isSet = !json[QString("VisualReference")].isNull() && m_visual_reference_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_artifact_config_isValid = ::OpenAPI::fromJsonValue(m_artifact_config, json[QString("ArtifactConfig")]);
    m_artifact_config_isSet = !json[QString("ArtifactConfig")].isNull() && m_artifact_config_isValid;
}

QString OAICanary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanary::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_code.isSet()) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_execution_role_arn_isSet) {
        obj.insert(QString("ExecutionRoleArn"), ::OpenAPI::toJsonValue(m_execution_role_arn));
    }
    if (m_schedule.isSet()) {
        obj.insert(QString("Schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_run_config.isSet()) {
        obj.insert(QString("RunConfig"), ::OpenAPI::toJsonValue(m_run_config));
    }
    if (m_success_retention_period_in_days_isSet) {
        obj.insert(QString("SuccessRetentionPeriodInDays"), ::OpenAPI::toJsonValue(m_success_retention_period_in_days));
    }
    if (m_failure_retention_period_in_days_isSet) {
        obj.insert(QString("FailureRetentionPeriodInDays"), ::OpenAPI::toJsonValue(m_failure_retention_period_in_days));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("Timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_artifact_s3_location_isSet) {
        obj.insert(QString("ArtifactS3Location"), ::OpenAPI::toJsonValue(m_artifact_s3_location));
    }
    if (m_engine_arn_isSet) {
        obj.insert(QString("EngineArn"), ::OpenAPI::toJsonValue(m_engine_arn));
    }
    if (m_runtime_version_isSet) {
        obj.insert(QString("RuntimeVersion"), ::OpenAPI::toJsonValue(m_runtime_version));
    }
    if (m_vpc_config.isSet()) {
        obj.insert(QString("VpcConfig"), ::OpenAPI::toJsonValue(m_vpc_config));
    }
    if (m_visual_reference.isSet()) {
        obj.insert(QString("VisualReference"), ::OpenAPI::toJsonValue(m_visual_reference));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_artifact_config.isSet()) {
        obj.insert(QString("ArtifactConfig"), ::OpenAPI::toJsonValue(m_artifact_config));
    }
    return obj;
}

QString OAICanary::getId() const {
    return m_id;
}
void OAICanary::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICanary::is_id_Set() const{
    return m_id_isSet;
}

bool OAICanary::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICanary::getName() const {
    return m_name;
}
void OAICanary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICanary::is_name_Set() const{
    return m_name_isSet;
}

bool OAICanary::is_name_Valid() const{
    return m_name_isValid;
}

OAICanaryCodeOutput OAICanary::getCode() const {
    return m_code;
}
void OAICanary::setCode(const OAICanaryCodeOutput &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICanary::is_code_Set() const{
    return m_code_isSet;
}

bool OAICanary::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICanary::getExecutionRoleArn() const {
    return m_execution_role_arn;
}
void OAICanary::setExecutionRoleArn(const QString &execution_role_arn) {
    m_execution_role_arn = execution_role_arn;
    m_execution_role_arn_isSet = true;
}

bool OAICanary::is_execution_role_arn_Set() const{
    return m_execution_role_arn_isSet;
}

bool OAICanary::is_execution_role_arn_Valid() const{
    return m_execution_role_arn_isValid;
}

OAICanary_Schedule OAICanary::getSchedule() const {
    return m_schedule;
}
void OAICanary::setSchedule(const OAICanary_Schedule &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAICanary::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAICanary::is_schedule_Valid() const{
    return m_schedule_isValid;
}

OAICanaryRunConfigOutput OAICanary::getRunConfig() const {
    return m_run_config;
}
void OAICanary::setRunConfig(const OAICanaryRunConfigOutput &run_config) {
    m_run_config = run_config;
    m_run_config_isSet = true;
}

bool OAICanary::is_run_config_Set() const{
    return m_run_config_isSet;
}

bool OAICanary::is_run_config_Valid() const{
    return m_run_config_isValid;
}

qint32 OAICanary::getSuccessRetentionPeriodInDays() const {
    return m_success_retention_period_in_days;
}
void OAICanary::setSuccessRetentionPeriodInDays(const qint32 &success_retention_period_in_days) {
    m_success_retention_period_in_days = success_retention_period_in_days;
    m_success_retention_period_in_days_isSet = true;
}

bool OAICanary::is_success_retention_period_in_days_Set() const{
    return m_success_retention_period_in_days_isSet;
}

bool OAICanary::is_success_retention_period_in_days_Valid() const{
    return m_success_retention_period_in_days_isValid;
}

qint32 OAICanary::getFailureRetentionPeriodInDays() const {
    return m_failure_retention_period_in_days;
}
void OAICanary::setFailureRetentionPeriodInDays(const qint32 &failure_retention_period_in_days) {
    m_failure_retention_period_in_days = failure_retention_period_in_days;
    m_failure_retention_period_in_days_isSet = true;
}

bool OAICanary::is_failure_retention_period_in_days_Set() const{
    return m_failure_retention_period_in_days_isSet;
}

bool OAICanary::is_failure_retention_period_in_days_Valid() const{
    return m_failure_retention_period_in_days_isValid;
}

OAICanary_Status OAICanary::getStatus() const {
    return m_status;
}
void OAICanary::setStatus(const OAICanary_Status &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICanary::is_status_Set() const{
    return m_status_isSet;
}

bool OAICanary::is_status_Valid() const{
    return m_status_isValid;
}

OAICanary_Timeline OAICanary::getTimeline() const {
    return m_timeline;
}
void OAICanary::setTimeline(const OAICanary_Timeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAICanary::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAICanary::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QString OAICanary::getArtifactS3Location() const {
    return m_artifact_s3_location;
}
void OAICanary::setArtifactS3Location(const QString &artifact_s3_location) {
    m_artifact_s3_location = artifact_s3_location;
    m_artifact_s3_location_isSet = true;
}

bool OAICanary::is_artifact_s3_location_Set() const{
    return m_artifact_s3_location_isSet;
}

bool OAICanary::is_artifact_s3_location_Valid() const{
    return m_artifact_s3_location_isValid;
}

QString OAICanary::getEngineArn() const {
    return m_engine_arn;
}
void OAICanary::setEngineArn(const QString &engine_arn) {
    m_engine_arn = engine_arn;
    m_engine_arn_isSet = true;
}

bool OAICanary::is_engine_arn_Set() const{
    return m_engine_arn_isSet;
}

bool OAICanary::is_engine_arn_Valid() const{
    return m_engine_arn_isValid;
}

QString OAICanary::getRuntimeVersion() const {
    return m_runtime_version;
}
void OAICanary::setRuntimeVersion(const QString &runtime_version) {
    m_runtime_version = runtime_version;
    m_runtime_version_isSet = true;
}

bool OAICanary::is_runtime_version_Set() const{
    return m_runtime_version_isSet;
}

bool OAICanary::is_runtime_version_Valid() const{
    return m_runtime_version_isValid;
}

OAIVpcConfigOutput OAICanary::getVpcConfig() const {
    return m_vpc_config;
}
void OAICanary::setVpcConfig(const OAIVpcConfigOutput &vpc_config) {
    m_vpc_config = vpc_config;
    m_vpc_config_isSet = true;
}

bool OAICanary::is_vpc_config_Set() const{
    return m_vpc_config_isSet;
}

bool OAICanary::is_vpc_config_Valid() const{
    return m_vpc_config_isValid;
}

OAICanary_VisualReference OAICanary::getVisualReference() const {
    return m_visual_reference;
}
void OAICanary::setVisualReference(const OAICanary_VisualReference &visual_reference) {
    m_visual_reference = visual_reference;
    m_visual_reference_isSet = true;
}

bool OAICanary::is_visual_reference_Set() const{
    return m_visual_reference_isSet;
}

bool OAICanary::is_visual_reference_Valid() const{
    return m_visual_reference_isValid;
}

QMap OAICanary::getTags() const {
    return m_tags;
}
void OAICanary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICanary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICanary::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICanary_ArtifactConfig OAICanary::getArtifactConfig() const {
    return m_artifact_config;
}
void OAICanary::setArtifactConfig(const OAICanary_ArtifactConfig &artifact_config) {
    m_artifact_config = artifact_config;
    m_artifact_config_isSet = true;
}

bool OAICanary::is_artifact_config_Set() const{
    return m_artifact_config_isSet;
}

bool OAICanary::is_artifact_config_Valid() const{
    return m_artifact_config_isValid;
}

bool OAICanary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_retention_period_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_retention_period_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_s3_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifact_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
