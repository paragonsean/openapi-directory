/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICanary_Timeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICanary_Timeline::OAICanary_Timeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICanary_Timeline::OAICanary_Timeline() {
    this->initializeModel();
}

OAICanary_Timeline::~OAICanary_Timeline() {}

void OAICanary_Timeline::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_last_started_isSet = false;
    m_last_started_isValid = false;

    m_last_stopped_isSet = false;
    m_last_stopped_isValid = false;
}

void OAICanary_Timeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICanary_Timeline::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_last_started_isValid = ::OpenAPI::fromJsonValue(m_last_started, json[QString("LastStarted")]);
    m_last_started_isSet = !json[QString("LastStarted")].isNull() && m_last_started_isValid;

    m_last_stopped_isValid = ::OpenAPI::fromJsonValue(m_last_stopped, json[QString("LastStopped")]);
    m_last_stopped_isSet = !json[QString("LastStopped")].isNull() && m_last_stopped_isValid;
}

QString OAICanary_Timeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICanary_Timeline::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_last_started_isSet) {
        obj.insert(QString("LastStarted"), ::OpenAPI::toJsonValue(m_last_started));
    }
    if (m_last_stopped_isSet) {
        obj.insert(QString("LastStopped"), ::OpenAPI::toJsonValue(m_last_stopped));
    }
    return obj;
}

QDateTime OAICanary_Timeline::getCreated() const {
    return m_created;
}
void OAICanary_Timeline::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAICanary_Timeline::is_created_Set() const{
    return m_created_isSet;
}

bool OAICanary_Timeline::is_created_Valid() const{
    return m_created_isValid;
}

QDateTime OAICanary_Timeline::getLastModified() const {
    return m_last_modified;
}
void OAICanary_Timeline::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAICanary_Timeline::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAICanary_Timeline::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QDateTime OAICanary_Timeline::getLastStarted() const {
    return m_last_started;
}
void OAICanary_Timeline::setLastStarted(const QDateTime &last_started) {
    m_last_started = last_started;
    m_last_started_isSet = true;
}

bool OAICanary_Timeline::is_last_started_Set() const{
    return m_last_started_isSet;
}

bool OAICanary_Timeline::is_last_started_Valid() const{
    return m_last_started_isValid;
}

QDateTime OAICanary_Timeline::getLastStopped() const {
    return m_last_stopped;
}
void OAICanary_Timeline::setLastStopped(const QDateTime &last_stopped) {
    m_last_stopped = last_stopped;
    m_last_stopped_isSet = true;
}

bool OAICanary_Timeline::is_last_stopped_Set() const{
    return m_last_stopped_isSet;
}

bool OAICanary_Timeline::is_last_stopped_Valid() const{
    return m_last_stopped_isValid;
}

bool OAICanary_Timeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_stopped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICanary_Timeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
