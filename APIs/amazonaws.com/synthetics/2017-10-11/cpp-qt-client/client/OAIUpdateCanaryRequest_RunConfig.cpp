/**
 * Synthetics
 * <fullname>Amazon CloudWatch Synthetics</fullname> <p>You can use Amazon CloudWatch Synthetics to continually monitor your services. You can create and manage <i>canaries</i>, which are modular, lightweight scripts that monitor your endpoints and APIs from the outside-in. You can set up your canaries to run 24 hours a day, once per minute. The canaries help you check the availability and latency of your web services and troubleshoot anomalies by investigating load time data, screenshots of the UI, logs, and metrics. The canaries seamlessly integrate with CloudWatch ServiceLens to help you trace the causes of impacted nodes in your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/ServiceLens.html\">Using ServiceLens to Monitor the Health of Your Applications</a> in the <i>Amazon CloudWatch User Guide</i>.</p> <p>Before you create and manage canaries, be aware of the security considerations. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/servicelens_canaries_security.html\">Security Considerations for Synthetics Canaries</a>.</p>
 *
 * The version of the OpenAPI document: 2017-10-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCanaryRequest_RunConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCanaryRequest_RunConfig::OAIUpdateCanaryRequest_RunConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCanaryRequest_RunConfig::OAIUpdateCanaryRequest_RunConfig() {
    this->initializeModel();
}

OAIUpdateCanaryRequest_RunConfig::~OAIUpdateCanaryRequest_RunConfig() {}

void OAIUpdateCanaryRequest_RunConfig::initializeModel() {

    m_timeout_in_seconds_isSet = false;
    m_timeout_in_seconds_isValid = false;

    m_memory_in_mb_isSet = false;
    m_memory_in_mb_isValid = false;

    m_active_tracing_isSet = false;
    m_active_tracing_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;
}

void OAIUpdateCanaryRequest_RunConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCanaryRequest_RunConfig::fromJsonObject(QJsonObject json) {

    m_timeout_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_seconds, json[QString("TimeoutInSeconds")]);
    m_timeout_in_seconds_isSet = !json[QString("TimeoutInSeconds")].isNull() && m_timeout_in_seconds_isValid;

    m_memory_in_mb_isValid = ::OpenAPI::fromJsonValue(m_memory_in_mb, json[QString("MemoryInMB")]);
    m_memory_in_mb_isSet = !json[QString("MemoryInMB")].isNull() && m_memory_in_mb_isValid;

    m_active_tracing_isValid = ::OpenAPI::fromJsonValue(m_active_tracing, json[QString("ActiveTracing")]);
    m_active_tracing_isSet = !json[QString("ActiveTracing")].isNull() && m_active_tracing_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("EnvironmentVariables")]);
    m_environment_variables_isSet = !json[QString("EnvironmentVariables")].isNull() && m_environment_variables_isValid;
}

QString OAIUpdateCanaryRequest_RunConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCanaryRequest_RunConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_timeout_in_seconds_isSet) {
        obj.insert(QString("TimeoutInSeconds"), ::OpenAPI::toJsonValue(m_timeout_in_seconds));
    }
    if (m_memory_in_mb_isSet) {
        obj.insert(QString("MemoryInMB"), ::OpenAPI::toJsonValue(m_memory_in_mb));
    }
    if (m_active_tracing_isSet) {
        obj.insert(QString("ActiveTracing"), ::OpenAPI::toJsonValue(m_active_tracing));
    }
    if (m_environment_variables.isSet()) {
        obj.insert(QString("EnvironmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    return obj;
}

qint32 OAIUpdateCanaryRequest_RunConfig::getTimeoutInSeconds() const {
    return m_timeout_in_seconds;
}
void OAIUpdateCanaryRequest_RunConfig::setTimeoutInSeconds(const qint32 &timeout_in_seconds) {
    m_timeout_in_seconds = timeout_in_seconds;
    m_timeout_in_seconds_isSet = true;
}

bool OAIUpdateCanaryRequest_RunConfig::is_timeout_in_seconds_Set() const{
    return m_timeout_in_seconds_isSet;
}

bool OAIUpdateCanaryRequest_RunConfig::is_timeout_in_seconds_Valid() const{
    return m_timeout_in_seconds_isValid;
}

qint32 OAIUpdateCanaryRequest_RunConfig::getMemoryInMb() const {
    return m_memory_in_mb;
}
void OAIUpdateCanaryRequest_RunConfig::setMemoryInMb(const qint32 &memory_in_mb) {
    m_memory_in_mb = memory_in_mb;
    m_memory_in_mb_isSet = true;
}

bool OAIUpdateCanaryRequest_RunConfig::is_memory_in_mb_Set() const{
    return m_memory_in_mb_isSet;
}

bool OAIUpdateCanaryRequest_RunConfig::is_memory_in_mb_Valid() const{
    return m_memory_in_mb_isValid;
}

bool OAIUpdateCanaryRequest_RunConfig::getActiveTracing() const {
    return m_active_tracing;
}
void OAIUpdateCanaryRequest_RunConfig::setActiveTracing(const bool &active_tracing) {
    m_active_tracing = active_tracing;
    m_active_tracing_isSet = true;
}

bool OAIUpdateCanaryRequest_RunConfig::is_active_tracing_Set() const{
    return m_active_tracing_isSet;
}

bool OAIUpdateCanaryRequest_RunConfig::is_active_tracing_Valid() const{
    return m_active_tracing_isValid;
}

QMap OAIUpdateCanaryRequest_RunConfig::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIUpdateCanaryRequest_RunConfig::setEnvironmentVariables(const QMap &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIUpdateCanaryRequest_RunConfig::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIUpdateCanaryRequest_RunConfig::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

bool OAIUpdateCanaryRequest_RunConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timeout_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_in_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_tracing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCanaryRequest_RunConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
