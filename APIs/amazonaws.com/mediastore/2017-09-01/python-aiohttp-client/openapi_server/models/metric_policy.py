# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_level_metrics import ContainerLevelMetrics
from openapi_server import util


class MetricPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_level_metrics: ContainerLevelMetrics=None, metric_policy_rules: List=None):
        """MetricPolicy - a model defined in OpenAPI

        :param container_level_metrics: The container_level_metrics of this MetricPolicy.
        :param metric_policy_rules: The metric_policy_rules of this MetricPolicy.
        """
        self.openapi_types = {
            'container_level_metrics': ContainerLevelMetrics,
            'metric_policy_rules': List
        }

        self.attribute_map = {
            'container_level_metrics': 'ContainerLevelMetrics',
            'metric_policy_rules': 'MetricPolicyRules'
        }

        self._container_level_metrics = container_level_metrics
        self._metric_policy_rules = metric_policy_rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricPolicy of this MetricPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_level_metrics(self):
        """Gets the container_level_metrics of this MetricPolicy.


        :return: The container_level_metrics of this MetricPolicy.
        :rtype: ContainerLevelMetrics
        """
        return self._container_level_metrics

    @container_level_metrics.setter
    def container_level_metrics(self, container_level_metrics):
        """Sets the container_level_metrics of this MetricPolicy.


        :param container_level_metrics: The container_level_metrics of this MetricPolicy.
        :type container_level_metrics: ContainerLevelMetrics
        """
        if container_level_metrics is None:
            raise ValueError("Invalid value for `container_level_metrics`, must not be `None`")

        self._container_level_metrics = container_level_metrics

    @property
    def metric_policy_rules(self):
        """Gets the metric_policy_rules of this MetricPolicy.


        :return: The metric_policy_rules of this MetricPolicy.
        :rtype: List
        """
        return self._metric_policy_rules

    @metric_policy_rules.setter
    def metric_policy_rules(self, metric_policy_rules):
        """Sets the metric_policy_rules of this MetricPolicy.


        :param metric_policy_rules: The metric_policy_rules of this MetricPolicy.
        :type metric_policy_rules: List
        """

        self._metric_policy_rules = metric_policy_rules
