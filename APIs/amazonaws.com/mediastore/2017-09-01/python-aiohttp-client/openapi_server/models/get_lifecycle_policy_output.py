# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetLifecyclePolicyOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lifecycle_policy: str=None):
        """GetLifecyclePolicyOutput - a model defined in OpenAPI

        :param lifecycle_policy: The lifecycle_policy of this GetLifecyclePolicyOutput.
        """
        self.openapi_types = {
            'lifecycle_policy': str
        }

        self.attribute_map = {
            'lifecycle_policy': 'LifecyclePolicy'
        }

        self._lifecycle_policy = lifecycle_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLifecyclePolicyOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLifecyclePolicyOutput of this GetLifecyclePolicyOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lifecycle_policy(self):
        """Gets the lifecycle_policy of this GetLifecyclePolicyOutput.


        :return: The lifecycle_policy of this GetLifecyclePolicyOutput.
        :rtype: str
        """
        return self._lifecycle_policy

    @lifecycle_policy.setter
    def lifecycle_policy(self, lifecycle_policy):
        """Sets the lifecycle_policy of this GetLifecyclePolicyOutput.


        :param lifecycle_policy: The lifecycle_policy of this GetLifecyclePolicyOutput.
        :type lifecycle_policy: str
        """
        if lifecycle_policy is None:
            raise ValueError("Invalid value for `lifecycle_policy`, must not be `None`")

        self._lifecycle_policy = lifecycle_policy
