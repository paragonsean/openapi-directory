# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StartAccessLoggingInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None):
        """StartAccessLoggingInput - a model defined in OpenAPI

        :param container_name: The container_name of this StartAccessLoggingInput.
        """
        self.openapi_types = {
            'container_name': str
        }

        self.attribute_map = {
            'container_name': 'ContainerName'
        }

        self._container_name = container_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartAccessLoggingInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartAccessLoggingInput of this StartAccessLoggingInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this StartAccessLoggingInput.


        :return: The container_name of this StartAccessLoggingInput.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this StartAccessLoggingInput.


        :param container_name: The container_name of this StartAccessLoggingInput.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name
