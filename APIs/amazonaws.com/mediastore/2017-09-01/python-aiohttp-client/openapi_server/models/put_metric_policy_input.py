# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.put_metric_policy_input_metric_policy import PutMetricPolicyInputMetricPolicy
from openapi_server import util


class PutMetricPolicyInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, metric_policy: PutMetricPolicyInputMetricPolicy=None):
        """PutMetricPolicyInput - a model defined in OpenAPI

        :param container_name: The container_name of this PutMetricPolicyInput.
        :param metric_policy: The metric_policy of this PutMetricPolicyInput.
        """
        self.openapi_types = {
            'container_name': str,
            'metric_policy': PutMetricPolicyInputMetricPolicy
        }

        self.attribute_map = {
            'container_name': 'ContainerName',
            'metric_policy': 'MetricPolicy'
        }

        self._container_name = container_name
        self._metric_policy = metric_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutMetricPolicyInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutMetricPolicyInput of this PutMetricPolicyInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this PutMetricPolicyInput.


        :return: The container_name of this PutMetricPolicyInput.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this PutMetricPolicyInput.


        :param container_name: The container_name of this PutMetricPolicyInput.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def metric_policy(self):
        """Gets the metric_policy of this PutMetricPolicyInput.


        :return: The metric_policy of this PutMetricPolicyInput.
        :rtype: PutMetricPolicyInputMetricPolicy
        """
        return self._metric_policy

    @metric_policy.setter
    def metric_policy(self, metric_policy):
        """Sets the metric_policy of this PutMetricPolicyInput.


        :param metric_policy: The metric_policy of this PutMetricPolicyInput.
        :type metric_policy: PutMetricPolicyInputMetricPolicy
        """
        if metric_policy is None:
            raise ValueError("Invalid value for `metric_policy`, must not be `None`")

        self._metric_policy = metric_policy
