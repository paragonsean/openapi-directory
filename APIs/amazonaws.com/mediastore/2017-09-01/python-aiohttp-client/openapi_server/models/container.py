# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_status import ContainerStatus
from openapi_server import util


class Container(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, endpoint: str=None, creation_time: datetime=None, arn: str=None, name: str=None, status: ContainerStatus=None, access_logging_enabled: bool=None):
        """Container - a model defined in OpenAPI

        :param endpoint: The endpoint of this Container.
        :param creation_time: The creation_time of this Container.
        :param arn: The arn of this Container.
        :param name: The name of this Container.
        :param status: The status of this Container.
        :param access_logging_enabled: The access_logging_enabled of this Container.
        """
        self.openapi_types = {
            'endpoint': str,
            'creation_time': datetime,
            'arn': str,
            'name': str,
            'status': ContainerStatus,
            'access_logging_enabled': bool
        }

        self.attribute_map = {
            'endpoint': 'Endpoint',
            'creation_time': 'CreationTime',
            'arn': 'ARN',
            'name': 'Name',
            'status': 'Status',
            'access_logging_enabled': 'AccessLoggingEnabled'
        }

        self._endpoint = endpoint
        self._creation_time = creation_time
        self._arn = arn
        self._name = name
        self._status = status
        self._access_logging_enabled = access_logging_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Container':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Container of this Container.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def endpoint(self):
        """Gets the endpoint of this Container.


        :return: The endpoint of this Container.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Container.


        :param endpoint: The endpoint of this Container.
        :type endpoint: str
        """

        self._endpoint = endpoint

    @property
    def creation_time(self):
        """Gets the creation_time of this Container.


        :return: The creation_time of this Container.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Container.


        :param creation_time: The creation_time of this Container.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def arn(self):
        """Gets the arn of this Container.


        :return: The arn of this Container.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Container.


        :param arn: The arn of this Container.
        :type arn: str
        """

        self._arn = arn

    @property
    def name(self):
        """Gets the name of this Container.


        :return: The name of this Container.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Container.


        :param name: The name of this Container.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Container.


        :return: The status of this Container.
        :rtype: ContainerStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Container.


        :param status: The status of this Container.
        :type status: ContainerStatus
        """

        self._status = status

    @property
    def access_logging_enabled(self):
        """Gets the access_logging_enabled of this Container.


        :return: The access_logging_enabled of this Container.
        :rtype: bool
        """
        return self._access_logging_enabled

    @access_logging_enabled.setter
    def access_logging_enabled(self, access_logging_enabled):
        """Sets the access_logging_enabled of this Container.


        :param access_logging_enabled: The access_logging_enabled of this Container.
        :type access_logging_enabled: bool
        """

        self._access_logging_enabled = access_logging_enabled
