/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetricPolicyRule model module.
 * @module model/MetricPolicyRule
 * @version 2017-09-01
 */
class MetricPolicyRule {
    /**
     * Constructs a new <code>MetricPolicyRule</code>.
     * A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/servicequotas/home?region&#x3D;us-east-1#!/services/mediastore/quotas\&quot;&gt;request a quota increase&lt;/a&gt; to allow up to 300 rules per policy.
     * @alias module:model/MetricPolicyRule
     * @param objectGroup {String} 
     * @param objectGroupName {String} 
     */
    constructor(objectGroup, objectGroupName) { 
        
        MetricPolicyRule.initialize(this, objectGroup, objectGroupName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, objectGroup, objectGroupName) { 
        obj['ObjectGroup'] = objectGroup;
        obj['ObjectGroupName'] = objectGroupName;
    }

    /**
     * Constructs a <code>MetricPolicyRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricPolicyRule} obj Optional instance to populate.
     * @return {module:model/MetricPolicyRule} The populated <code>MetricPolicyRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricPolicyRule();

            if (data.hasOwnProperty('ObjectGroup')) {
                obj['ObjectGroup'] = ApiClient.convertToType(data['ObjectGroup'], 'String');
            }
            if (data.hasOwnProperty('ObjectGroupName')) {
                obj['ObjectGroupName'] = ApiClient.convertToType(data['ObjectGroupName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricPolicyRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricPolicyRule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricPolicyRule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ObjectGroup`
        if (data['ObjectGroup']) { // data not null
          String.validateJSON(data['ObjectGroup']);
        }
        // validate the optional field `ObjectGroupName`
        if (data['ObjectGroupName']) { // data not null
          String.validateJSON(data['ObjectGroupName']);
        }

        return true;
    }


}

MetricPolicyRule.RequiredProperties = ["ObjectGroup", "ObjectGroupName"];

/**
 * @member {String} ObjectGroup
 */
MetricPolicyRule.prototype['ObjectGroup'] = undefined;

/**
 * @member {String} ObjectGroupName
 */
MetricPolicyRule.prototype['ObjectGroupName'] = undefined;






export default MetricPolicyRule;

