openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "An AWS Elemental MediaStore container is a namespace that holds folders\
    \ and objects. You use a container endpoint to create, read, and delete objects. "
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS Elemental MediaStore
  version: 2017-09-01
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: mediastore
  x-aws-signingName: mediastore
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/mediastore-2017-09-01.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/mediastore/
servers:
- description: The MediaStore multi-region endpoint
  url: "http://mediastore.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The MediaStore multi-region endpoint
  url: "https://mediastore.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
  url: "http://mediastore.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The MediaStore endpoint for China (Beijing) and China (Ningxia)
  url: "https://mediastore.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /#X-Amz-Target=MediaStore_20170901.CreateContainer:
    post:
      description: Creates a storage container to hold objects. A container is similar
        to a bucket in the Amazon S3 service.
      operationId: CreateContainer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.CreateContainer
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContainerInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContainerOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LimitExceededException'
          description: LimitExceededException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.DeleteContainer:
    post:
      description: "Deletes the specified container. Before you make a <code>DeleteContainer</code>\
        \ request, delete any objects in the container or in any folders in the container.\
        \ You can delete only empty containers. "
      operationId: DeleteContainer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.DeleteContainer
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteContainerInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContainerOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.DeleteContainerPolicy:
    post:
      description: Deletes the access policy that is associated with the specified
        container.
      operationId: DeleteContainerPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.DeleteContainerPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteContainerPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteContainerPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
          description: PolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.DeleteCorsPolicy:
    post:
      description: "<p>Deletes the cross-origin resource sharing (CORS) configuration\
        \ information that is set for the container.</p> <p>To use this operation,\
        \ you must have permission to perform the <code>MediaStore:DeleteCorsPolicy</code>\
        \ action. The container owner has this permission by default and can grant\
        \ this permission to others.</p>"
      operationId: DeleteCorsPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.DeleteCorsPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCorsPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCorsPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorsPolicyNotFoundException'
          description: CorsPolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.DeleteLifecyclePolicy:
    post:
      description: Removes an object lifecycle policy from a container. It takes up
        to 20 minutes for the change to take effect.
      operationId: DeleteLifecyclePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.DeleteLifecyclePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteLifecyclePolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLifecyclePolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
          description: PolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.DeleteMetricPolicy:
    post:
      description: "Deletes the metric policy that is associated with the specified\
        \ container. If there is no metric policy associated with the container, MediaStore\
        \ doesn't send metrics to CloudWatch."
      operationId: DeleteMetricPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.DeleteMetricPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteMetricPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMetricPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
          description: PolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.DescribeContainer:
    post:
      description: "Retrieves the properties of the requested container. This request\
        \ is commonly used to retrieve the endpoint of a container. An endpoint is\
        \ a value assigned by the service when a new container is created. A container's\
        \ endpoint does not change after it has been assigned. The <code>DescribeContainer</code>\
        \ request returns a single <code>Container</code> object based on <code>ContainerName</code>.\
        \ To return all <code>Container</code> objects that are associated with a\
        \ specified AWS account, use <a>ListContainers</a>."
      operationId: DescribeContainer
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.DescribeContainer
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeContainerInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeContainerOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.GetContainerPolicy:
    post:
      description: "Retrieves the access policy for the specified container. For information\
        \ about the data that is included in an access policy, see the <a href=\"\
        https://aws.amazon.com/documentation/iam/\">AWS Identity and Access Management\
        \ User Guide</a>."
      operationId: GetContainerPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.GetContainerPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetContainerPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetContainerPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
          description: PolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.GetCorsPolicy:
    post:
      description: "<p>Returns the cross-origin resource sharing (CORS) configuration\
        \ information that is set for the container.</p> <p>To use this operation,\
        \ you must have permission to perform the <code>MediaStore:GetCorsPolicy</code>\
        \ action. By default, the container owner has this permission and can grant\
        \ it to others.</p>"
      operationId: GetCorsPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.GetCorsPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCorsPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCorsPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CorsPolicyNotFoundException'
          description: CorsPolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.GetLifecyclePolicy:
    post:
      description: Retrieves the object lifecycle policy that is assigned to a container.
      operationId: GetLifecyclePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.GetLifecyclePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetLifecyclePolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetLifecyclePolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
          description: PolicyNotFoundException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.GetMetricPolicy:
    post:
      description: 'Returns the metric policy for the specified container. '
      operationId: GetMetricPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.GetMetricPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMetricPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMetricPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyNotFoundException'
          description: PolicyNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.ListContainers:
    post:
      description: "<p>Lists the properties of all containers in AWS Elemental MediaStore.\
        \ </p> <p>You can query to receive all the containers in one response. Or\
        \ you can include the <code>MaxResults</code> parameter to receive a limited\
        \ number of containers in each response. In this case, the response includes\
        \ a token. To get the next set of containers, send the command again, this\
        \ time with the <code>NextToken</code> parameter (with the returned token\
        \ as its value). The next set of responses appears, with a token if there\
        \ are still more containers to receive. </p> <p>See also <a>DescribeContainer</a>,\
        \ which gets the properties of one container. </p>"
      operationId: ListContainers
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.ListContainers
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListContainersInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListContainersOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.ListTagsForResource:
    post:
      description: 'Returns a list of the tags assigned to the specified container. '
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.ListTagsForResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListTagsForResourceInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.PutContainerPolicy:
    post:
      description: "<p>Creates an access policy for the specified container to restrict\
        \ the users and clients that can access it. For information about the data\
        \ that is included in an access policy, see the <a href=\"https://aws.amazon.com/documentation/iam/\"\
        >AWS Identity and Access Management User Guide</a>.</p> <p>For this release\
        \ of the REST API, you can create only one policy for a container. If you\
        \ enter <code>PutContainerPolicy</code> twice, the second command modifies\
        \ the existing policy. </p>"
      operationId: PutContainerPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.PutContainerPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutContainerPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutContainerPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.PutCorsPolicy:
    post:
      description: "<p>Sets the cross-origin resource sharing (CORS) configuration\
        \ on a container so that the container can service cross-origin requests.\
        \ For example, you might want to enable a request whose origin is http://www.example.com\
        \ to access your AWS Elemental MediaStore container at my.example.container.com\
        \ by using the browser's XMLHttpRequest capability.</p> <p>To enable CORS\
        \ on a container, you attach a CORS policy to the container. In the CORS policy,\
        \ you configure rules that identify origins and the HTTP methods that can\
        \ be executed on your container. The policy can contain up to 398,000 characters.\
        \ You can add up to 100 rules to a CORS policy. If more than one rule applies,\
        \ the service uses the first applicable rule listed.</p> <p>To learn more\
        \ about CORS, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html\"\
        >Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore</a>.</p>"
      operationId: PutCorsPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.PutCorsPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutCorsPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutCorsPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.PutLifecyclePolicy:
    post:
      description: "<p>Writes an object lifecycle policy to a container. If the container\
        \ already has an object lifecycle policy, the service replaces the existing\
        \ policy with the new policy. It takes up to 20 minutes for the change to\
        \ take effect.</p> <p>For information about how to construct an object lifecycle\
        \ policy, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html\"\
        >Components of an Object Lifecycle Policy</a>.</p>"
      operationId: PutLifecyclePolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.PutLifecyclePolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutLifecyclePolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutLifecyclePolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.PutMetricPolicy:
    post:
      description: The metric policy that you want to add to the container. A metric
        policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch.
        It takes up to 20 minutes for the new policy to take effect.
      operationId: PutMetricPolicy
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.PutMetricPolicy
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutMetricPolicyInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutMetricPolicyOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.StartAccessLogging:
    post:
      description: "Starts access logging on the specified container. When you enable\
        \ access logging on a container, MediaStore delivers access logs for objects\
        \ stored in that container to Amazon CloudWatch Logs."
      operationId: StartAccessLogging
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.StartAccessLogging
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAccessLoggingInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAccessLoggingOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.StopAccessLogging:
    post:
      description: "Stops access logging on the specified container. When you stop\
        \ access logging on a container, MediaStore stops sending access logs to Amazon\
        \ CloudWatch Logs. These access logs are not saved and are not retrievable."
      operationId: StopAccessLogging
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.StopAccessLogging
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopAccessLoggingInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopAccessLoggingOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.TagResource:
    post:
      description: "Adds tags to the specified AWS Elemental MediaStore container.\
        \ Tags are key:value pairs that you can associate with AWS resources. For\
        \ example, the tag key might be \"customer\" and the tag value might be \"\
        companyA.\" You can specify one or more tags to add to each container. You\
        \ can add up to 50 tags to each container. For more information about tagging,\
        \ including naming and usage conventions, see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html\"\
        >Tagging Resources in MediaStore</a>."
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.TagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResourceInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
  /#X-Amz-Target=MediaStore_20170901.UntagResource:
    post:
      description: 'Removes tags from the specified container. You can specify one
        or more tags to remove. '
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Target
        required: true
        schema:
          enum:
          - MediaStore_20170901.UntagResource
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UntagResourceInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UntagResourceOutput'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerInUseException'
          description: ContainerInUseException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContainerNotFoundException'
          description: ContainerNotFoundException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
          description: InternalServerError
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    CreateContainerOutput:
      example:
        Container:
          Status: ""
          Endpoint: ""
          CreationTime: ""
          AccessLoggingEnabled: ""
          ARN: ""
          Name: ""
      properties:
        Container:
          $ref: '#/components/schemas/CreateContainerOutput_Container'
      required:
      - Container
      type: object
    CreateContainerInput:
      example:
        ContainerName: ""
        Tags: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: "The name for the container. The name must be from 1 to 255\
              \ characters. Container names must be unique to your AWS account within\
              \ a specific region. As an example, you could create a container named\
              \ <code>movies</code> in every region, as long as you don’t have an\
              \ existing container with that name."
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "An array of key:value pairs that you define. These values\
              \ can be anything that you want. Typically, the tag key represents a\
              \ category (such as \"environment\") and the tag value represents a\
              \ specific value within that category (such as \"test,\" \"development,\"\
              \ or \"production\"). You can add up to 50 tags to each container. For\
              \ more information about tagging, including naming and usage conventions,\
              \ see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html\"\
              >Tagging Resources in MediaStore</a>."
      required:
      - ContainerName
      title: CreateContainerInput
      type: object
    ContainerInUseException: {}
    LimitExceededException: {}
    InternalServerError: {}
    DeleteContainerOutput:
      properties: {}
      type: object
    DeleteContainerInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: 'The name of the container to delete. '
      required:
      - ContainerName
      title: DeleteContainerInput
      type: object
    ContainerNotFoundException: {}
    DeleteContainerPolicyOutput:
      properties: {}
      type: object
    DeleteContainerPolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that holds the policy.
      required:
      - ContainerName
      title: DeleteContainerPolicyInput
      type: object
    PolicyNotFoundException: {}
    DeleteCorsPolicyOutput:
      properties: {}
      type: object
    DeleteCorsPolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container to remove the policy from.
      required:
      - ContainerName
      title: DeleteCorsPolicyInput
      type: object
    CorsPolicyNotFoundException: {}
    DeleteLifecyclePolicyOutput:
      properties: {}
      type: object
    DeleteLifecyclePolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that holds the object lifecycle
              policy.
      required:
      - ContainerName
      title: DeleteLifecyclePolicyInput
      type: object
    DeleteMetricPolicyOutput:
      properties: {}
      type: object
    DeleteMetricPolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that is associated with the metric
              policy that you want to delete.
      required:
      - ContainerName
      title: DeleteMetricPolicyInput
      type: object
    DescribeContainerOutput:
      example:
        Container:
          Status: ""
          Endpoint: ""
          CreationTime: ""
          AccessLoggingEnabled: ""
          ARN: ""
          Name: ""
      properties:
        Container:
          $ref: '#/components/schemas/DescribeContainerOutput_Container'
      type: object
    DescribeContainerInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container to query.
      title: DescribeContainerInput
      type: object
    GetContainerPolicyOutput:
      example:
        Policy: ""
      properties:
        Policy:
          allOf:
          - $ref: '#/components/schemas/ContainerPolicy'
          - description: The contents of the access policy.
      required:
      - Policy
      type: object
    GetContainerPolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: 'The name of the container. '
      required:
      - ContainerName
      title: GetContainerPolicyInput
      type: object
    GetCorsPolicyOutput:
      example:
        CorsPolicy: ""
      properties:
        CorsPolicy:
          allOf:
          - $ref: '#/components/schemas/CorsPolicy'
          - description: The CORS policy assigned to the container.
      required:
      - CorsPolicy
      type: object
    GetCorsPolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that the policy is assigned to.
      required:
      - ContainerName
      title: GetCorsPolicyInput
      type: object
    GetLifecyclePolicyOutput:
      example:
        LifecyclePolicy: ""
      properties:
        LifecyclePolicy:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicy'
          - description: The object lifecycle policy that is assigned to the container.
      required:
      - LifecyclePolicy
      type: object
    GetLifecyclePolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that the object lifecycle policy
              is assigned to.
      required:
      - ContainerName
      title: GetLifecyclePolicyInput
      type: object
    GetMetricPolicyOutput:
      example:
        MetricPolicy:
          ContainerLevelMetrics: ""
          MetricPolicyRules: ""
      properties:
        MetricPolicy:
          $ref: '#/components/schemas/GetMetricPolicyOutput_MetricPolicy'
      required:
      - MetricPolicy
      type: object
    GetMetricPolicyInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that is associated with the metric
              policy.
      required:
      - ContainerName
      title: GetMetricPolicyInput
      type: object
    ListContainersOutput:
      example:
        NextToken: ""
        Containers: ""
      properties:
        Containers:
          allOf:
          - $ref: '#/components/schemas/ContainerList'
          - description: The names of the containers.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: " <code>NextToken</code> is the token to use in the next\
              \ call to <code>ListContainers</code>. This token is returned only if\
              \ you included the <code>MaxResults</code> tag in the original command,\
              \ and only if there are still containers to return. "
      required:
      - Containers
      type: object
    ListContainersInput:
      example:
        NextToken: ""
        MaxResults: ""
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/PaginationToken'
          - description: "Only if you used <code>MaxResults</code> in the first command,\
              \ enter the token (which was included in the previous response) to obtain\
              \ the next set of containers. This token is included in a response only\
              \ if there actually are more containers to list."
        MaxResults:
          allOf:
          - $ref: '#/components/schemas/ContainerListLimit'
          - description: 'Enter the maximum number of containers in the response.
              Use from 1 to 255 characters. '
      title: ListContainersInput
      type: object
    ListTagsForResourceOutput:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: An array of key:value pairs that are assigned to the container.
      type: object
    ListTagsForResourceInput:
      example:
        Resource: ""
      properties:
        Resource:
          allOf:
          - $ref: '#/components/schemas/ContainerARN'
          - description: The Amazon Resource Name (ARN) for the container.
      required:
      - Resource
      title: ListTagsForResourceInput
      type: object
    PutContainerPolicyOutput:
      properties: {}
      type: object
    PutContainerPolicyInput:
      example:
        Policy: ""
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container.
        Policy:
          allOf:
          - $ref: '#/components/schemas/ContainerPolicy'
          - description: "<p>The contents of the policy, which includes the following:\
              \ </p> <ul> <li> <p>One <code>Version</code> tag</p> </li> <li> <p>One\
              \ <code>Statement</code> tag that contains the standard tags for the\
              \ policy.</p> </li> </ul>"
      required:
      - ContainerName
      - Policy
      title: PutContainerPolicyInput
      type: object
    PutCorsPolicyOutput:
      properties: {}
      type: object
    PutCorsPolicyInput:
      example:
        ContainerName: ""
        CorsPolicy: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that you want to assign the CORS
              policy to.
        CorsPolicy:
          allOf:
          - $ref: '#/components/schemas/CorsPolicy'
          - description: 'The CORS policy to apply to the container. '
      required:
      - ContainerName
      - CorsPolicy
      title: PutCorsPolicyInput
      type: object
    PutLifecyclePolicyOutput:
      properties: {}
      type: object
    PutLifecyclePolicyInput:
      example:
        ContainerName: ""
        LifecyclePolicy: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that you want to assign the object
              lifecycle policy to.
        LifecyclePolicy:
          allOf:
          - $ref: '#/components/schemas/LifecyclePolicy'
          - description: The object lifecycle policy to apply to the container.
      required:
      - ContainerName
      - LifecyclePolicy
      title: PutLifecyclePolicyInput
      type: object
    PutMetricPolicyOutput:
      properties: {}
      type: object
    PutMetricPolicyInput:
      example:
        MetricPolicy:
          ContainerLevelMetrics: ""
          MetricPolicyRules: ""
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that you want to add the metric
              policy to.
        MetricPolicy:
          $ref: '#/components/schemas/PutMetricPolicyInput_MetricPolicy'
      required:
      - ContainerName
      - MetricPolicy
      title: PutMetricPolicyInput
      type: object
    StartAccessLoggingOutput:
      properties: {}
      type: object
    StartAccessLoggingInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that you want to start access logging
              on.
      required:
      - ContainerName
      title: StartAccessLoggingInput
      type: object
    StopAccessLoggingOutput:
      properties: {}
      type: object
    StopAccessLoggingInput:
      example:
        ContainerName: ""
      properties:
        ContainerName:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container that you want to stop access logging
              on.
      required:
      - ContainerName
      title: StopAccessLoggingInput
      type: object
    TagResourceOutput:
      properties: {}
      type: object
    TagResourceInput:
      example:
        Resource: ""
        Tags: ""
      properties:
        Resource:
          allOf:
          - $ref: '#/components/schemas/ContainerARN'
          - description: 'The Amazon Resource Name (ARN) for the container. '
        Tags:
          allOf:
          - $ref: '#/components/schemas/TagList'
          - description: "An array of key:value pairs that you want to add to the\
              \ container. You need to specify only the tags that you want to add\
              \ or update. For example, suppose a container already has two tags (customer:CompanyA\
              \ and priority:High). You want to change the priority tag and also add\
              \ a third tag (type:Contract). For TagResource, you specify the following\
              \ tags: priority:Medium, type:Contract. The result is that your container\
              \ has three tags: customer:CompanyA, priority:Medium, and type:Contract."
      required:
      - Resource
      - Tags
      title: TagResourceInput
      type: object
    UntagResourceOutput:
      properties: {}
      type: object
    UntagResourceInput:
      example:
        Resource: ""
        TagKeys: ""
      properties:
        Resource:
          allOf:
          - $ref: '#/components/schemas/ContainerARN'
          - description: The Amazon Resource Name (ARN) for the container.
        TagKeys:
          allOf:
          - $ref: '#/components/schemas/TagKeyList'
          - description: "A comma-separated list of keys for tags that you want to\
              \ remove from the container. For example, if your container has two\
              \ tags (customer:CompanyA and priority:High) and you want to remove\
              \ one of the tags (priority:High), you specify the key for the tag that\
              \ you want to remove (priority)."
      required:
      - Resource
      - TagKeys
      title: UntagResourceInput
      type: object
    Header:
      maxLength: 8192
      minLength: 1
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      type: string
    AllowedHeaders:
      items:
        $ref: '#/components/schemas/Header'
      maxItems: 100
      minItems: 0
      type: array
    MethodName:
      enum:
      - PUT
      - GET
      - DELETE
      - HEAD
      type: string
    AllowedMethods:
      items:
        $ref: '#/components/schemas/MethodName'
      maxItems: 4
      minItems: 1
      type: array
    Origin:
      maxLength: 2048
      minLength: 1
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      type: string
    AllowedOrigins:
      items:
        $ref: '#/components/schemas/Origin'
      maxItems: 100
      minItems: 1
      type: array
    Endpoint:
      maxLength: 255
      minLength: 1
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      type: string
    TimeStamp:
      format: date-time
      type: string
    ContainerARN:
      maxLength: 1024
      minLength: 1
      pattern: "arn:aws:mediastore:[a-z]+-[a-z]+-\\d:\\d{12}:container/[\\w-]{1,255}"
      type: string
    ContainerName:
      maxLength: 255
      minLength: 1
      pattern: "[\\w-]+"
      type: string
    ContainerStatus:
      enum:
      - ACTIVE
      - CREATING
      - DELETING
      maxLength: 16
      minLength: 1
      type: string
    ContainerAccessLoggingEnabled:
      type: boolean
    Container:
      description: This section describes operations that you can perform on an AWS
        Elemental MediaStore container.
      properties:
        Endpoint:
          allOf:
          - $ref: '#/components/schemas/Endpoint'
          - description: "The DNS endpoint of the container. Use the endpoint to identify\
              \ the specific container when sending requests to the data plane. The\
              \ service assigns this value when the container is created. Once the\
              \ value has been assigned, it does not change."
        CreationTime:
          allOf:
          - $ref: '#/components/schemas/TimeStamp'
          - description: Unix timestamp.
        ARN:
          allOf:
          - $ref: '#/components/schemas/ContainerARN'
          - description: "<p>The Amazon Resource Name (ARN) of the container. The\
              \ ARN has the following format:</p> <p>arn:aws:&lt;region&gt;:&lt;account\
              \ that owns this container&gt;:container/&lt;name of container&gt; </p>\
              \ <p>For example: arn:aws:mediastore:us-west-2:111122223333:container/movies\
              \ </p>"
        Name:
          allOf:
          - $ref: '#/components/schemas/ContainerName'
          - description: The name of the container.
        Status:
          allOf:
          - $ref: '#/components/schemas/ContainerStatus'
          - description: "The status of container creation or deletion. The status\
              \ is one of the following: <code>CREATING</code>, <code>ACTIVE</code>,\
              \ or <code>DELETING</code>. While the service is creating the container,\
              \ the status is <code>CREATING</code>. When the endpoint is available,\
              \ the status changes to <code>ACTIVE</code>."
        AccessLoggingEnabled:
          allOf:
          - $ref: '#/components/schemas/ContainerAccessLoggingEnabled'
          - description: "The state of access logging on the container. This value\
              \ is <code>false</code> by default, indicating that AWS Elemental MediaStore\
              \ does not send access logs to Amazon CloudWatch Logs. When you enable\
              \ access logging on the container, MediaStore changes this value to\
              \ <code>true</code>, indicating that the service delivers access logs\
              \ for objects stored in that container to CloudWatch Logs."
      type: object
    ContainerLevelMetrics:
      enum:
      - ENABLED
      - DISABLED
      type: string
    ContainerList:
      items:
        $ref: '#/components/schemas/Container'
      type: array
    ContainerListLimit:
      maximum: 100
      minimum: 1
      type: integer
    ContainerPolicy:
      maxLength: 8192
      minLength: 1
      pattern: "[\\x00-\\x7F]+"
      type: string
    CorsRule:
      description: "A rule for a CORS policy. You can add up to 100 rules to a CORS\
        \ policy. If more than one rule applies, the service uses the first applicable\
        \ rule listed."
      properties:
        AllowedOrigins:
          allOf:
          - $ref: '#/components/schemas/AllowedOrigins'
          - description: "<p>One or more response headers that you want users to be\
              \ able to access from their applications (for example, from a JavaScript\
              \ <code>XMLHttpRequest</code> object).</p> <p>Each CORS rule must have\
              \ at least one <code>AllowedOrigins</code> element. The string value\
              \ can include only one wildcard character (*), for example, http://*.example.com.\
              \ Additionally, you can specify only one wildcard character to allow\
              \ cross-origin access for all origins.</p>"
        AllowedMethods:
          allOf:
          - $ref: '#/components/schemas/AllowedMethods'
          - description: <p>Identifies an HTTP method that the origin that is specified
              in the rule is allowed to execute.</p> <p>Each CORS rule must contain
              at least one <code>AllowedMethods</code> and one <code>AllowedOrigins</code>
              element.</p>
        AllowedHeaders:
          allOf:
          - $ref: '#/components/schemas/AllowedHeaders'
          - description: <p>Specifies which headers are allowed in a preflight <code>OPTIONS</code>
              request through the <code>Access-Control-Request-Headers</code> header.
              Each header name that is specified in <code>Access-Control-Request-Headers</code>
              must have a corresponding entry in the rule. Only the headers that were
              requested are sent back. </p> <p>This element can contain only one wildcard
              character (*).</p>
        MaxAgeSeconds:
          allOf:
          - $ref: '#/components/schemas/MaxAgeSeconds'
          - description: <p>The time in seconds that your browser caches the preflight
              response for the specified resource.</p> <p>A CORS rule can have only
              one <code>MaxAgeSeconds</code> element.</p>
        ExposeHeaders:
          allOf:
          - $ref: '#/components/schemas/ExposeHeaders'
          - description: "<p>One or more headers in the response that you want users\
              \ to be able to access from their applications (for example, from a\
              \ JavaScript <code>XMLHttpRequest</code> object).</p> <p>This element\
              \ is optional for each rule.</p>"
      required:
      - AllowedHeaders
      - AllowedOrigins
      type: object
    CorsPolicy:
      description: 'The CORS policy of the container. '
      items:
        $ref: '#/components/schemas/CorsRule'
      maxItems: 100
      minItems: 1
      type: array
    MaxAgeSeconds:
      maximum: 2147483647
      minimum: 0
      type: integer
    ExposeHeaders:
      items:
        $ref: '#/components/schemas/Header'
      maxItems: 100
      minItems: 0
      type: array
    TagList:
      items:
        $ref: '#/components/schemas/Tag'
      maxItems: 200
      minItems: 1
      type: array
    LifecyclePolicy:
      maxLength: 8192
      minLength: 0
      pattern: "[\\u0009\\u000A\\u000D\\u0020-\\u00FF]+"
      type: string
    MetricPolicy:
      description: "<p>The metric policy that is associated with the container. A\
        \ metric policy allows AWS Elemental MediaStore to send metrics to Amazon\
        \ CloudWatch. In the policy, you must indicate whether you want MediaStore\
        \ to send container-level metrics. You can also include rules to define groups\
        \ of objects that you want MediaStore to send object-level metrics for.</p>\
        \ <p>To view examples of how to construct a metric policy for your use case,\
        \ see <a href=\"https://docs.aws.amazon.com/mediastore/latest/ug/policies-metric-examples.html\"\
        >Example Metric Policies</a>.</p>"
      properties:
        ContainerLevelMetrics:
          allOf:
          - $ref: '#/components/schemas/ContainerLevelMetrics'
          - description: A setting to enable or disable metrics at the container level.
        MetricPolicyRules:
          allOf:
          - $ref: '#/components/schemas/MetricPolicyRules'
          - description: "A parameter that holds an array of rules that enable metrics\
              \ at the object level. This parameter is optional, but if you choose\
              \ to include it, you must also include at least one rule. By default,\
              \ you can include up to five rules. You can also <a href=\"https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas\"\
              >request a quota increase</a> to allow up to 300 rules per policy."
      required:
      - ContainerLevelMetrics
      type: object
    PaginationToken:
      maxLength: 1024
      minLength: 1
      pattern: "[0-9A-Za-z=/+]+"
      type: string
    MetricPolicyRules:
      items:
        $ref: '#/components/schemas/MetricPolicyRule'
      maxItems: 300
      minItems: 1
      type: array
    ObjectGroup:
      maxLength: 900
      minLength: 1
      pattern: "/?(?:[A-Za-z0-9_=:\\.\\-\\~\\*]+/){0,10}(?:[A-Za-z0-9_=:\\.\\-\\~\\\
        *]+)?/?"
      type: string
    ObjectGroupName:
      maxLength: 30
      minLength: 1
      pattern: "[a-zA-Z0-9_]+"
      type: string
    MetricPolicyRule:
      description: "A setting that enables metrics at the object level. Each rule\
        \ contains an object group and an object group name. If the policy includes\
        \ the MetricPolicyRules parameter, you must include at least one rule. Each\
        \ metric policy can include up to five rules by default. You can also <a href=\"\
        https://console.aws.amazon.com/servicequotas/home?region=us-east-1#!/services/mediastore/quotas\"\
        >request a quota increase</a> to allow up to 300 rules per policy."
      properties:
        ObjectGroup:
          allOf:
          - $ref: '#/components/schemas/ObjectGroup'
          - description: A path or file name that defines which objects to include
              in the group. Wildcards (*) are acceptable.
        ObjectGroupName:
          allOf:
          - $ref: '#/components/schemas/ObjectGroupName'
          - description: A name that allows you to refer to the object group.
      required:
      - ObjectGroup
      - ObjectGroupName
      type: object
    TagKey:
      maxLength: 128
      minLength: 1
      pattern: "[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*"
      type: string
    TagValue:
      maxLength: 256
      minLength: 0
      pattern: "[\\p{L}\\p{Z}\\p{N}_.:/=+\\-@]*"
      type: string
    Tag:
      description: "A collection of tags associated with a container. Each tag consists\
        \ of a key:value pair, which can be anything you define. Typically, the tag\
        \ key represents a category (such as \"environment\") and the tag value represents\
        \ a specific value within that category (such as \"test,\" \"development,\"\
        \ or \"production\"). You can add up to 50 tags to each container. For more\
        \ information about tagging, including naming and usage conventions, see <a\
        \ href=\"https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html\">Tagging\
        \ Resources in MediaStore</a>."
      properties:
        Key:
          allOf:
          - $ref: '#/components/schemas/TagKey'
          - description: "Part of the key:value pair that defines a tag. You can use\
              \ a tag key to describe a category of information, such as \"customer.\"\
              \ Tag keys are case-sensitive."
        Value:
          allOf:
          - $ref: '#/components/schemas/TagValue'
          - description: "Part of the key:value pair that defines a tag. You can use\
              \ a tag value to describe a specific value within a category, such as\
              \ \"companyA\" or \"companyB.\" Tag values are case-sensitive."
      required:
      - Key
      type: object
    TagKeyList:
      items:
        $ref: '#/components/schemas/TagKey'
      type: array
    CreateContainerOutput_Container:
      allOf:
      - $ref: '#/components/schemas/Container'
      - description: "<p>ContainerARN: The Amazon Resource Name (ARN) of the newly\
          \ created container. The ARN has the following format: arn:aws:&lt;region&gt;:&lt;account\
          \ that owns this container&gt;:container/&lt;name of container&gt;. For\
          \ example: arn:aws:mediastore:us-west-2:111122223333:container/movies </p>\
          \ <p>ContainerName: The container name as specified in the request.</p>\
          \ <p>CreationTime: Unix time stamp.</p> <p>Status: The status of container\
          \ creation or deletion. The status is one of the following: <code>CREATING</code>,\
          \ <code>ACTIVE</code>, or <code>DELETING</code>. While the service is creating\
          \ the container, the status is <code>CREATING</code>. When an endpoint is\
          \ available, the status changes to <code>ACTIVE</code>.</p> <p>The return\
          \ value does not include the container's endpoint. To make downstream requests,\
          \ you must obtain this value by using <a>DescribeContainer</a> or <a>ListContainers</a>.</p>"
      example:
        Status: ""
        Endpoint: ""
        CreationTime: ""
        AccessLoggingEnabled: ""
        ARN: ""
        Name: ""
    DescribeContainerOutput_Container:
      allOf:
      - $ref: '#/components/schemas/Container'
      - description: The name of the queried container.
      example:
        Status: ""
        Endpoint: ""
        CreationTime: ""
        AccessLoggingEnabled: ""
        ARN: ""
        Name: ""
    GetMetricPolicyOutput_MetricPolicy:
      allOf:
      - $ref: '#/components/schemas/MetricPolicy'
      - description: The metric policy that is associated with the specific container.
      example:
        ContainerLevelMetrics: ""
        MetricPolicyRules: ""
    PutMetricPolicyInput_MetricPolicy:
      allOf:
      - $ref: '#/components/schemas/MetricPolicy'
      - description: "<p>The metric policy that you want to associate with the container.\
          \ In the policy, you must indicate whether you want MediaStore to send container-level\
          \ metrics. You can also include up to five rules to define groups of objects\
          \ that you want MediaStore to send object-level metrics for. If you include\
          \ rules in the policy, construct each rule with both of the following:</p>\
          \ <ul> <li> <p>An object group that defines which objects to include in\
          \ the group. The definition can be a path or a file name, but it can't have\
          \ more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore),\
          \ = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash),\
          \ and * (asterisk). Wildcards (*) are acceptable.</p> </li> <li> <p>An object\
          \ group name that allows you to refer to the object group. The name can't\
          \ have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and\
          \ _ (underscore).</p> </li> </ul>"
      example:
        ContainerLevelMetrics: ""
        MetricPolicyRules: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

