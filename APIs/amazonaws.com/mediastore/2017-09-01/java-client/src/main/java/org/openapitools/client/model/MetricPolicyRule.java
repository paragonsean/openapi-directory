/*
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also &lt;a href&#x3D;\&quot;https://console.aws.amazon.com/servicequotas/home?region&#x3D;us-east-1#!/services/mediastore/quotas\&quot;&gt;request a quota increase&lt;/a&gt; to allow up to 300 rules per policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:36.204523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricPolicyRule {
  public static final String SERIALIZED_NAME_OBJECT_GROUP = "ObjectGroup";
  @SerializedName(SERIALIZED_NAME_OBJECT_GROUP)
  private String objectGroup;

  public static final String SERIALIZED_NAME_OBJECT_GROUP_NAME = "ObjectGroupName";
  @SerializedName(SERIALIZED_NAME_OBJECT_GROUP_NAME)
  private String objectGroupName;

  public MetricPolicyRule() {
  }

  public MetricPolicyRule objectGroup(String objectGroup) {
    this.objectGroup = objectGroup;
    return this;
  }

  /**
   * Get objectGroup
   * @return objectGroup
   */
  @javax.annotation.Nonnull
  public String getObjectGroup() {
    return objectGroup;
  }

  public void setObjectGroup(String objectGroup) {
    this.objectGroup = objectGroup;
  }


  public MetricPolicyRule objectGroupName(String objectGroupName) {
    this.objectGroupName = objectGroupName;
    return this;
  }

  /**
   * Get objectGroupName
   * @return objectGroupName
   */
  @javax.annotation.Nonnull
  public String getObjectGroupName() {
    return objectGroupName;
  }

  public void setObjectGroupName(String objectGroupName) {
    this.objectGroupName = objectGroupName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricPolicyRule metricPolicyRule = (MetricPolicyRule) o;
    return Objects.equals(this.objectGroup, metricPolicyRule.objectGroup) &&
        Objects.equals(this.objectGroupName, metricPolicyRule.objectGroupName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectGroup, objectGroupName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricPolicyRule {\n");
    sb.append("    objectGroup: ").append(toIndentedString(objectGroup)).append("\n");
    sb.append("    objectGroupName: ").append(toIndentedString(objectGroupName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObjectGroup");
    openapiFields.add("ObjectGroupName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ObjectGroup");
    openapiRequiredFields.add("ObjectGroupName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricPolicyRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricPolicyRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricPolicyRule is not found in the empty JSON string", MetricPolicyRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricPolicyRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricPolicyRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricPolicyRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ObjectGroup`
      String.validateJsonElement(jsonObj.get("ObjectGroup"));
      // validate the required field `ObjectGroupName`
      String.validateJsonElement(jsonObj.get("ObjectGroupName"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricPolicyRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricPolicyRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricPolicyRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricPolicyRule.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricPolicyRule>() {
           @Override
           public void write(JsonWriter out, MetricPolicyRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricPolicyRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricPolicyRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricPolicyRule
   * @throws IOException if the JSON string is invalid with respect to MetricPolicyRule
   */
  public static MetricPolicyRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricPolicyRule.class);
  }

  /**
   * Convert an instance of MetricPolicyRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

