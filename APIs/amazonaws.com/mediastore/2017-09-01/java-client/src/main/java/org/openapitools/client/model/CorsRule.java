/*
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:36.204523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CorsRule {
  public static final String SERIALIZED_NAME_ALLOWED_ORIGINS = "AllowedOrigins";
  @SerializedName(SERIALIZED_NAME_ALLOWED_ORIGINS)
  private List allowedOrigins;

  public static final String SERIALIZED_NAME_ALLOWED_METHODS = "AllowedMethods";
  @SerializedName(SERIALIZED_NAME_ALLOWED_METHODS)
  private List allowedMethods;

  public static final String SERIALIZED_NAME_ALLOWED_HEADERS = "AllowedHeaders";
  @SerializedName(SERIALIZED_NAME_ALLOWED_HEADERS)
  private List allowedHeaders;

  public static final String SERIALIZED_NAME_MAX_AGE_SECONDS = "MaxAgeSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_AGE_SECONDS)
  private Integer maxAgeSeconds;

  public static final String SERIALIZED_NAME_EXPOSE_HEADERS = "ExposeHeaders";
  @SerializedName(SERIALIZED_NAME_EXPOSE_HEADERS)
  private List exposeHeaders;

  public CorsRule() {
  }

  public CorsRule allowedOrigins(List allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
    return this;
  }

  /**
   * Get allowedOrigins
   * @return allowedOrigins
   */
  @javax.annotation.Nonnull
  public List getAllowedOrigins() {
    return allowedOrigins;
  }

  public void setAllowedOrigins(List allowedOrigins) {
    this.allowedOrigins = allowedOrigins;
  }


  public CorsRule allowedMethods(List allowedMethods) {
    this.allowedMethods = allowedMethods;
    return this;
  }

  /**
   * Get allowedMethods
   * @return allowedMethods
   */
  @javax.annotation.Nullable
  public List getAllowedMethods() {
    return allowedMethods;
  }

  public void setAllowedMethods(List allowedMethods) {
    this.allowedMethods = allowedMethods;
  }


  public CorsRule allowedHeaders(List allowedHeaders) {
    this.allowedHeaders = allowedHeaders;
    return this;
  }

  /**
   * Get allowedHeaders
   * @return allowedHeaders
   */
  @javax.annotation.Nonnull
  public List getAllowedHeaders() {
    return allowedHeaders;
  }

  public void setAllowedHeaders(List allowedHeaders) {
    this.allowedHeaders = allowedHeaders;
  }


  public CorsRule maxAgeSeconds(Integer maxAgeSeconds) {
    this.maxAgeSeconds = maxAgeSeconds;
    return this;
  }

  /**
   * Get maxAgeSeconds
   * @return maxAgeSeconds
   */
  @javax.annotation.Nullable
  public Integer getMaxAgeSeconds() {
    return maxAgeSeconds;
  }

  public void setMaxAgeSeconds(Integer maxAgeSeconds) {
    this.maxAgeSeconds = maxAgeSeconds;
  }


  public CorsRule exposeHeaders(List exposeHeaders) {
    this.exposeHeaders = exposeHeaders;
    return this;
  }

  /**
   * Get exposeHeaders
   * @return exposeHeaders
   */
  @javax.annotation.Nullable
  public List getExposeHeaders() {
    return exposeHeaders;
  }

  public void setExposeHeaders(List exposeHeaders) {
    this.exposeHeaders = exposeHeaders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorsRule corsRule = (CorsRule) o;
    return Objects.equals(this.allowedOrigins, corsRule.allowedOrigins) &&
        Objects.equals(this.allowedMethods, corsRule.allowedMethods) &&
        Objects.equals(this.allowedHeaders, corsRule.allowedHeaders) &&
        Objects.equals(this.maxAgeSeconds, corsRule.maxAgeSeconds) &&
        Objects.equals(this.exposeHeaders, corsRule.exposeHeaders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedOrigins, allowedMethods, allowedHeaders, maxAgeSeconds, exposeHeaders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorsRule {\n");
    sb.append("    allowedOrigins: ").append(toIndentedString(allowedOrigins)).append("\n");
    sb.append("    allowedMethods: ").append(toIndentedString(allowedMethods)).append("\n");
    sb.append("    allowedHeaders: ").append(toIndentedString(allowedHeaders)).append("\n");
    sb.append("    maxAgeSeconds: ").append(toIndentedString(maxAgeSeconds)).append("\n");
    sb.append("    exposeHeaders: ").append(toIndentedString(exposeHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowedOrigins");
    openapiFields.add("AllowedMethods");
    openapiFields.add("AllowedHeaders");
    openapiFields.add("MaxAgeSeconds");
    openapiFields.add("ExposeHeaders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AllowedOrigins");
    openapiRequiredFields.add("AllowedHeaders");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CorsRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CorsRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CorsRule is not found in the empty JSON string", CorsRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CorsRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CorsRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CorsRule.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AllowedOrigins`
      List.validateJsonElement(jsonObj.get("AllowedOrigins"));
      // validate the optional field `AllowedMethods`
      if (jsonObj.get("AllowedMethods") != null && !jsonObj.get("AllowedMethods").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AllowedMethods"));
      }
      // validate the required field `AllowedHeaders`
      List.validateJsonElement(jsonObj.get("AllowedHeaders"));
      // validate the optional field `MaxAgeSeconds`
      if (jsonObj.get("MaxAgeSeconds") != null && !jsonObj.get("MaxAgeSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxAgeSeconds"));
      }
      // validate the optional field `ExposeHeaders`
      if (jsonObj.get("ExposeHeaders") != null && !jsonObj.get("ExposeHeaders").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExposeHeaders"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CorsRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CorsRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CorsRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CorsRule.class));

       return (TypeAdapter<T>) new TypeAdapter<CorsRule>() {
           @Override
           public void write(JsonWriter out, CorsRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CorsRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CorsRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CorsRule
   * @throws IOException if the JSON string is invalid with respect to CorsRule
   */
  public static CorsRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CorsRule.class);
  }

  /**
   * Convert an instance of CorsRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

