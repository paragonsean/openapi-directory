/*
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateContainerInput;
import org.openapitools.client.model.CreateContainerOutput;
import org.openapitools.client.model.DeleteContainerInput;
import org.openapitools.client.model.DeleteContainerPolicyInput;
import org.openapitools.client.model.DeleteCorsPolicyInput;
import org.openapitools.client.model.DeleteLifecyclePolicyInput;
import org.openapitools.client.model.DeleteMetricPolicyInput;
import org.openapitools.client.model.DescribeContainerInput;
import org.openapitools.client.model.DescribeContainerOutput;
import org.openapitools.client.model.GetContainerPolicyInput;
import org.openapitools.client.model.GetContainerPolicyOutput;
import org.openapitools.client.model.GetCorsPolicyInput;
import org.openapitools.client.model.GetCorsPolicyOutput;
import org.openapitools.client.model.GetLifecyclePolicyInput;
import org.openapitools.client.model.GetLifecyclePolicyOutput;
import org.openapitools.client.model.GetMetricPolicyInput;
import org.openapitools.client.model.GetMetricPolicyOutput;
import org.openapitools.client.model.ListContainersInput;
import org.openapitools.client.model.ListContainersOutput;
import org.openapitools.client.model.ListTagsForResourceInput;
import org.openapitools.client.model.ListTagsForResourceOutput;
import org.openapitools.client.model.PutContainerPolicyInput;
import org.openapitools.client.model.PutCorsPolicyInput;
import org.openapitools.client.model.PutLifecyclePolicyInput;
import org.openapitools.client.model.PutMetricPolicyInput;
import org.openapitools.client.model.StartAccessLoggingInput;
import org.openapitools.client.model.StopAccessLoggingInput;
import org.openapitools.client.model.TagResourceInput;
import org.openapitools.client.model.UntagResourceInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContainerTest() throws ApiException {
        String xAmzTarget = null;
        CreateContainerInput createContainerInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateContainerOutput response = api.createContainer(xAmzTarget, createContainerInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified container. Before you make a &lt;code&gt;DeleteContainer&lt;/code&gt; request, delete any objects in the container or in any folders in the container. You can delete only empty containers. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContainerTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContainerInput deleteContainerInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContainer(xAmzTarget, deleteContainerInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the access policy that is associated with the specified container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContainerPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteContainerPolicyInput deleteContainerPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteContainerPolicy(xAmzTarget, deleteContainerPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deletes the cross-origin resource sharing (CORS) configuration information that is set for the container.&lt;/p&gt; &lt;p&gt;To use this operation, you must have permission to perform the &lt;code&gt;MediaStore:DeleteCorsPolicy&lt;/code&gt; action. The container owner has this permission by default and can grant this permission to others.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCorsPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteCorsPolicyInput deleteCorsPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteCorsPolicy(xAmzTarget, deleteCorsPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLifecyclePolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteLifecyclePolicyInput deleteLifecyclePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLifecyclePolicy(xAmzTarget, deleteLifecyclePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn&#39;t send metrics to CloudWatch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMetricPolicyTest() throws ApiException {
        String xAmzTarget = null;
        DeleteMetricPolicyInput deleteMetricPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteMetricPolicy(xAmzTarget, deleteMetricPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container&#39;s endpoint does not change after it has been assigned. The &lt;code&gt;DescribeContainer&lt;/code&gt; request returns a single &lt;code&gt;Container&lt;/code&gt; object based on &lt;code&gt;ContainerName&lt;/code&gt;. To return all &lt;code&gt;Container&lt;/code&gt; objects that are associated with a specified AWS account, use &lt;a&gt;ListContainers&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeContainerTest() throws ApiException {
        String xAmzTarget = null;
        DescribeContainerInput describeContainerInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeContainerOutput response = api.describeContainer(xAmzTarget, describeContainerInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the access policy for the specified container. For information about the data that is included in an access policy, see the &lt;a href&#x3D;\&quot;https://aws.amazon.com/documentation/iam/\&quot;&gt;AWS Identity and Access Management User Guide&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContainerPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetContainerPolicyInput getContainerPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetContainerPolicyOutput response = api.getContainerPolicy(xAmzTarget, getContainerPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the cross-origin resource sharing (CORS) configuration information that is set for the container.&lt;/p&gt; &lt;p&gt;To use this operation, you must have permission to perform the &lt;code&gt;MediaStore:GetCorsPolicy&lt;/code&gt; action. By default, the container owner has this permission and can grant it to others.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCorsPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetCorsPolicyInput getCorsPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetCorsPolicyOutput response = api.getCorsPolicy(xAmzTarget, getCorsPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the object lifecycle policy that is assigned to a container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLifecyclePolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetLifecyclePolicyInput getLifecyclePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLifecyclePolicyOutput response = api.getLifecyclePolicy(xAmzTarget, getLifecyclePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the metric policy for the specified container. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMetricPolicyTest() throws ApiException {
        String xAmzTarget = null;
        GetMetricPolicyInput getMetricPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetMetricPolicyOutput response = api.getMetricPolicy(xAmzTarget, getMetricPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Lists the properties of all containers in AWS Elemental MediaStore. &lt;/p&gt; &lt;p&gt;You can query to receive all the containers in one response. Or you can include the &lt;code&gt;MaxResults&lt;/code&gt; parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the &lt;code&gt;NextToken&lt;/code&gt; parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive. &lt;/p&gt; &lt;p&gt;See also &lt;a&gt;DescribeContainer&lt;/a&gt;, which gets the properties of one container. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listContainersTest() throws ApiException {
        String xAmzTarget = null;
        ListContainersInput listContainersInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListContainersOutput response = api.listContainers(xAmzTarget, listContainersInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the tags assigned to the specified container. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String xAmzTarget = null;
        ListTagsForResourceInput listTagsForResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceOutput response = api.listTagsForResource(xAmzTarget, listTagsForResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the &lt;a href&#x3D;\&quot;https://aws.amazon.com/documentation/iam/\&quot;&gt;AWS Identity and Access Management User Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For this release of the REST API, you can create only one policy for a container. If you enter &lt;code&gt;PutContainerPolicy&lt;/code&gt; twice, the second command modifies the existing policy. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putContainerPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutContainerPolicyInput putContainerPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putContainerPolicy(xAmzTarget, putContainerPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser&#39;s XMLHttpRequest capability.&lt;/p&gt; &lt;p&gt;To enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.&lt;/p&gt; &lt;p&gt;To learn more about CORS, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediastore/latest/ug/cors-policy.html\&quot;&gt;Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCorsPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutCorsPolicyInput putCorsPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putCorsPolicy(xAmzTarget, putCorsPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Writes an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.&lt;/p&gt; &lt;p&gt;For information about how to construct an object lifecycle policy, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediastore/latest/ug/policies-object-lifecycle-components.html\&quot;&gt;Components of an Object Lifecycle Policy&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putLifecyclePolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutLifecyclePolicyInput putLifecyclePolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putLifecyclePolicy(xAmzTarget, putLifecyclePolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putMetricPolicyTest() throws ApiException {
        String xAmzTarget = null;
        PutMetricPolicyInput putMetricPolicyInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putMetricPolicy(xAmzTarget, putMetricPolicyInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startAccessLoggingTest() throws ApiException {
        String xAmzTarget = null;
        StartAccessLoggingInput startAccessLoggingInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startAccessLogging(xAmzTarget, startAccessLoggingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopAccessLoggingTest() throws ApiException {
        String xAmzTarget = null;
        StopAccessLoggingInput stopAccessLoggingInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.stopAccessLogging(xAmzTarget, stopAccessLoggingInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be \&quot;customer\&quot; and the tag value might be \&quot;companyA.\&quot; You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/mediastore/latest/ug/tagging.html\&quot;&gt;Tagging Resources in MediaStore&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String xAmzTarget = null;
        TagResourceInput tagResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(xAmzTarget, tagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from the specified container. You can specify one or more tags to remove. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String xAmzTarget = null;
        UntagResourceInput untagResourceInput = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(xAmzTarget, untagResourceInput, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
