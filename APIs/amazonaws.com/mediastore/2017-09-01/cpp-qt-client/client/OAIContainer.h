/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIContainer.h
 *
 * This section describes operations that you can perform on an AWS Elemental MediaStore container.
 */

#ifndef OAIContainer_H
#define OAIContainer_H

#include <QJsonObject>

#include "OAIContainerStatus.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIContainer : public OAIObject {
public:
    OAIContainer();
    OAIContainer(QString json);
    ~OAIContainer() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEndpoint() const;
    void setEndpoint(const QString &endpoint);
    bool is_endpoint_Set() const;
    bool is_endpoint_Valid() const;

    QDateTime getCreationTime() const;
    void setCreationTime(const QDateTime &creation_time);
    bool is_creation_time_Set() const;
    bool is_creation_time_Valid() const;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIContainerStatus getStatus() const;
    void setStatus(const OAIContainerStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool getAccessLoggingEnabled() const;
    void setAccessLoggingEnabled(const bool &access_logging_enabled);
    bool is_access_logging_enabled_Set() const;
    bool is_access_logging_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_endpoint;
    bool m_endpoint_isSet;
    bool m_endpoint_isValid;

    QDateTime m_creation_time;
    bool m_creation_time_isSet;
    bool m_creation_time_isValid;

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIContainerStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_access_logging_enabled;
    bool m_access_logging_enabled_isSet;
    bool m_access_logging_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIContainer)

#endif // OAIContainer_H
