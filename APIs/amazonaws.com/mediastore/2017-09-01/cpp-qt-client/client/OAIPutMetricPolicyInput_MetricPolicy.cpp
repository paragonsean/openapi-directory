/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutMetricPolicyInput_MetricPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutMetricPolicyInput_MetricPolicy::OAIPutMetricPolicyInput_MetricPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutMetricPolicyInput_MetricPolicy::OAIPutMetricPolicyInput_MetricPolicy() {
    this->initializeModel();
}

OAIPutMetricPolicyInput_MetricPolicy::~OAIPutMetricPolicyInput_MetricPolicy() {}

void OAIPutMetricPolicyInput_MetricPolicy::initializeModel() {

    m_container_level_metrics_isSet = false;
    m_container_level_metrics_isValid = false;

    m_metric_policy_rules_isSet = false;
    m_metric_policy_rules_isValid = false;
}

void OAIPutMetricPolicyInput_MetricPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutMetricPolicyInput_MetricPolicy::fromJsonObject(QJsonObject json) {

    m_container_level_metrics_isValid = ::OpenAPI::fromJsonValue(m_container_level_metrics, json[QString("ContainerLevelMetrics")]);
    m_container_level_metrics_isSet = !json[QString("ContainerLevelMetrics")].isNull() && m_container_level_metrics_isValid;

    m_metric_policy_rules_isValid = ::OpenAPI::fromJsonValue(m_metric_policy_rules, json[QString("MetricPolicyRules")]);
    m_metric_policy_rules_isSet = !json[QString("MetricPolicyRules")].isNull() && m_metric_policy_rules_isValid;
}

QString OAIPutMetricPolicyInput_MetricPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutMetricPolicyInput_MetricPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_container_level_metrics.isSet()) {
        obj.insert(QString("ContainerLevelMetrics"), ::OpenAPI::toJsonValue(m_container_level_metrics));
    }
    if (m_metric_policy_rules.isSet()) {
        obj.insert(QString("MetricPolicyRules"), ::OpenAPI::toJsonValue(m_metric_policy_rules));
    }
    return obj;
}

OAIContainerLevelMetrics OAIPutMetricPolicyInput_MetricPolicy::getContainerLevelMetrics() const {
    return m_container_level_metrics;
}
void OAIPutMetricPolicyInput_MetricPolicy::setContainerLevelMetrics(const OAIContainerLevelMetrics &container_level_metrics) {
    m_container_level_metrics = container_level_metrics;
    m_container_level_metrics_isSet = true;
}

bool OAIPutMetricPolicyInput_MetricPolicy::is_container_level_metrics_Set() const{
    return m_container_level_metrics_isSet;
}

bool OAIPutMetricPolicyInput_MetricPolicy::is_container_level_metrics_Valid() const{
    return m_container_level_metrics_isValid;
}

QList OAIPutMetricPolicyInput_MetricPolicy::getMetricPolicyRules() const {
    return m_metric_policy_rules;
}
void OAIPutMetricPolicyInput_MetricPolicy::setMetricPolicyRules(const QList &metric_policy_rules) {
    m_metric_policy_rules = metric_policy_rules;
    m_metric_policy_rules_isSet = true;
}

bool OAIPutMetricPolicyInput_MetricPolicy::is_metric_policy_rules_Set() const{
    return m_metric_policy_rules_isSet;
}

bool OAIPutMetricPolicyInput_MetricPolicy::is_metric_policy_rules_Valid() const{
    return m_metric_policy_rules_isValid;
}

bool OAIPutMetricPolicyInput_MetricPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_level_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_policy_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutMetricPolicyInput_MetricPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_level_metrics_isValid && true;
}

} // namespace OpenAPI
