/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContainerOutput_Container.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContainerOutput_Container::OAICreateContainerOutput_Container(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContainerOutput_Container::OAICreateContainerOutput_Container() {
    this->initializeModel();
}

OAICreateContainerOutput_Container::~OAICreateContainerOutput_Container() {}

void OAICreateContainerOutput_Container::initializeModel() {

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_access_logging_enabled_isSet = false;
    m_access_logging_enabled_isValid = false;
}

void OAICreateContainerOutput_Container::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContainerOutput_Container::fromJsonObject(QJsonObject json) {

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("Endpoint")]);
    m_endpoint_isSet = !json[QString("Endpoint")].isNull() && m_endpoint_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("ARN")]);
    m_arn_isSet = !json[QString("ARN")].isNull() && m_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_access_logging_enabled_isValid = ::OpenAPI::fromJsonValue(m_access_logging_enabled, json[QString("AccessLoggingEnabled")]);
    m_access_logging_enabled_isSet = !json[QString("AccessLoggingEnabled")].isNull() && m_access_logging_enabled_isValid;
}

QString OAICreateContainerOutput_Container::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContainerOutput_Container::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_isSet) {
        obj.insert(QString("Endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_arn_isSet) {
        obj.insert(QString("ARN"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_access_logging_enabled_isSet) {
        obj.insert(QString("AccessLoggingEnabled"), ::OpenAPI::toJsonValue(m_access_logging_enabled));
    }
    return obj;
}

QString OAICreateContainerOutput_Container::getEndpoint() const {
    return m_endpoint;
}
void OAICreateContainerOutput_Container::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAICreateContainerOutput_Container::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAICreateContainerOutput_Container::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QDateTime OAICreateContainerOutput_Container::getCreationTime() const {
    return m_creation_time;
}
void OAICreateContainerOutput_Container::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICreateContainerOutput_Container::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICreateContainerOutput_Container::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAICreateContainerOutput_Container::getArn() const {
    return m_arn;
}
void OAICreateContainerOutput_Container::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateContainerOutput_Container::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateContainerOutput_Container::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAICreateContainerOutput_Container::getName() const {
    return m_name;
}
void OAICreateContainerOutput_Container::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateContainerOutput_Container::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateContainerOutput_Container::is_name_Valid() const{
    return m_name_isValid;
}

OAIContainerStatus OAICreateContainerOutput_Container::getStatus() const {
    return m_status;
}
void OAICreateContainerOutput_Container::setStatus(const OAIContainerStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateContainerOutput_Container::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateContainerOutput_Container::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICreateContainerOutput_Container::getAccessLoggingEnabled() const {
    return m_access_logging_enabled;
}
void OAICreateContainerOutput_Container::setAccessLoggingEnabled(const bool &access_logging_enabled) {
    m_access_logging_enabled = access_logging_enabled;
    m_access_logging_enabled_isSet = true;
}

bool OAICreateContainerOutput_Container::is_access_logging_enabled_Set() const{
    return m_access_logging_enabled_isSet;
}

bool OAICreateContainerOutput_Container::is_access_logging_enabled_Valid() const{
    return m_access_logging_enabled_isValid;
}

bool OAICreateContainerOutput_Container::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_access_logging_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContainerOutput_Container::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
