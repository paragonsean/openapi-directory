/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetLifecyclePolicyOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetLifecyclePolicyOutput::OAIGetLifecyclePolicyOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetLifecyclePolicyOutput::OAIGetLifecyclePolicyOutput() {
    this->initializeModel();
}

OAIGetLifecyclePolicyOutput::~OAIGetLifecyclePolicyOutput() {}

void OAIGetLifecyclePolicyOutput::initializeModel() {

    m_lifecycle_policy_isSet = false;
    m_lifecycle_policy_isValid = false;
}

void OAIGetLifecyclePolicyOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetLifecyclePolicyOutput::fromJsonObject(QJsonObject json) {

    m_lifecycle_policy_isValid = ::OpenAPI::fromJsonValue(m_lifecycle_policy, json[QString("LifecyclePolicy")]);
    m_lifecycle_policy_isSet = !json[QString("LifecyclePolicy")].isNull() && m_lifecycle_policy_isValid;
}

QString OAIGetLifecyclePolicyOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetLifecyclePolicyOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_lifecycle_policy_isSet) {
        obj.insert(QString("LifecyclePolicy"), ::OpenAPI::toJsonValue(m_lifecycle_policy));
    }
    return obj;
}

QString OAIGetLifecyclePolicyOutput::getLifecyclePolicy() const {
    return m_lifecycle_policy;
}
void OAIGetLifecyclePolicyOutput::setLifecyclePolicy(const QString &lifecycle_policy) {
    m_lifecycle_policy = lifecycle_policy;
    m_lifecycle_policy_isSet = true;
}

bool OAIGetLifecyclePolicyOutput::is_lifecycle_policy_Set() const{
    return m_lifecycle_policy_isSet;
}

bool OAIGetLifecyclePolicyOutput::is_lifecycle_policy_Valid() const{
    return m_lifecycle_policy_isValid;
}

bool OAIGetLifecyclePolicyOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lifecycle_policy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetLifecyclePolicyOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lifecycle_policy_isValid && true;
}

} // namespace OpenAPI
