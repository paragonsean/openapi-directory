/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateContainerOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateContainerOutput::OAICreateContainerOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateContainerOutput::OAICreateContainerOutput() {
    this->initializeModel();
}

OAICreateContainerOutput::~OAICreateContainerOutput() {}

void OAICreateContainerOutput::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;
}

void OAICreateContainerOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateContainerOutput::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("Container")]);
    m_container_isSet = !json[QString("Container")].isNull() && m_container_isValid;
}

QString OAICreateContainerOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateContainerOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_container.isSet()) {
        obj.insert(QString("Container"), ::OpenAPI::toJsonValue(m_container));
    }
    return obj;
}

OAICreateContainerOutput_Container OAICreateContainerOutput::getContainer() const {
    return m_container;
}
void OAICreateContainerOutput::setContainer(const OAICreateContainerOutput_Container &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAICreateContainerOutput::is_container_Set() const{
    return m_container_isSet;
}

bool OAICreateContainerOutput::is_container_Valid() const{
    return m_container_isValid;
}

bool OAICreateContainerOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateContainerOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_isValid && true;
}

} // namespace OpenAPI
