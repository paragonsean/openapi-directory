/**
 * AWS Elemental MediaStore
 * An AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects. 
 *
 * The version of the OpenAPI document: 2017-09-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICorsRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICorsRule::OAICorsRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICorsRule::OAICorsRule() {
    this->initializeModel();
}

OAICorsRule::~OAICorsRule() {}

void OAICorsRule::initializeModel() {

    m_allowed_origins_isSet = false;
    m_allowed_origins_isValid = false;

    m_allowed_methods_isSet = false;
    m_allowed_methods_isValid = false;

    m_allowed_headers_isSet = false;
    m_allowed_headers_isValid = false;

    m_max_age_seconds_isSet = false;
    m_max_age_seconds_isValid = false;

    m_expose_headers_isSet = false;
    m_expose_headers_isValid = false;
}

void OAICorsRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICorsRule::fromJsonObject(QJsonObject json) {

    m_allowed_origins_isValid = ::OpenAPI::fromJsonValue(m_allowed_origins, json[QString("AllowedOrigins")]);
    m_allowed_origins_isSet = !json[QString("AllowedOrigins")].isNull() && m_allowed_origins_isValid;

    m_allowed_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_methods, json[QString("AllowedMethods")]);
    m_allowed_methods_isSet = !json[QString("AllowedMethods")].isNull() && m_allowed_methods_isValid;

    m_allowed_headers_isValid = ::OpenAPI::fromJsonValue(m_allowed_headers, json[QString("AllowedHeaders")]);
    m_allowed_headers_isSet = !json[QString("AllowedHeaders")].isNull() && m_allowed_headers_isValid;

    m_max_age_seconds_isValid = ::OpenAPI::fromJsonValue(m_max_age_seconds, json[QString("MaxAgeSeconds")]);
    m_max_age_seconds_isSet = !json[QString("MaxAgeSeconds")].isNull() && m_max_age_seconds_isValid;

    m_expose_headers_isValid = ::OpenAPI::fromJsonValue(m_expose_headers, json[QString("ExposeHeaders")]);
    m_expose_headers_isSet = !json[QString("ExposeHeaders")].isNull() && m_expose_headers_isValid;
}

QString OAICorsRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICorsRule::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_origins.isSet()) {
        obj.insert(QString("AllowedOrigins"), ::OpenAPI::toJsonValue(m_allowed_origins));
    }
    if (m_allowed_methods.isSet()) {
        obj.insert(QString("AllowedMethods"), ::OpenAPI::toJsonValue(m_allowed_methods));
    }
    if (m_allowed_headers.isSet()) {
        obj.insert(QString("AllowedHeaders"), ::OpenAPI::toJsonValue(m_allowed_headers));
    }
    if (m_max_age_seconds_isSet) {
        obj.insert(QString("MaxAgeSeconds"), ::OpenAPI::toJsonValue(m_max_age_seconds));
    }
    if (m_expose_headers.isSet()) {
        obj.insert(QString("ExposeHeaders"), ::OpenAPI::toJsonValue(m_expose_headers));
    }
    return obj;
}

QList OAICorsRule::getAllowedOrigins() const {
    return m_allowed_origins;
}
void OAICorsRule::setAllowedOrigins(const QList &allowed_origins) {
    m_allowed_origins = allowed_origins;
    m_allowed_origins_isSet = true;
}

bool OAICorsRule::is_allowed_origins_Set() const{
    return m_allowed_origins_isSet;
}

bool OAICorsRule::is_allowed_origins_Valid() const{
    return m_allowed_origins_isValid;
}

QList OAICorsRule::getAllowedMethods() const {
    return m_allowed_methods;
}
void OAICorsRule::setAllowedMethods(const QList &allowed_methods) {
    m_allowed_methods = allowed_methods;
    m_allowed_methods_isSet = true;
}

bool OAICorsRule::is_allowed_methods_Set() const{
    return m_allowed_methods_isSet;
}

bool OAICorsRule::is_allowed_methods_Valid() const{
    return m_allowed_methods_isValid;
}

QList OAICorsRule::getAllowedHeaders() const {
    return m_allowed_headers;
}
void OAICorsRule::setAllowedHeaders(const QList &allowed_headers) {
    m_allowed_headers = allowed_headers;
    m_allowed_headers_isSet = true;
}

bool OAICorsRule::is_allowed_headers_Set() const{
    return m_allowed_headers_isSet;
}

bool OAICorsRule::is_allowed_headers_Valid() const{
    return m_allowed_headers_isValid;
}

qint32 OAICorsRule::getMaxAgeSeconds() const {
    return m_max_age_seconds;
}
void OAICorsRule::setMaxAgeSeconds(const qint32 &max_age_seconds) {
    m_max_age_seconds = max_age_seconds;
    m_max_age_seconds_isSet = true;
}

bool OAICorsRule::is_max_age_seconds_Set() const{
    return m_max_age_seconds_isSet;
}

bool OAICorsRule::is_max_age_seconds_Valid() const{
    return m_max_age_seconds_isValid;
}

QList OAICorsRule::getExposeHeaders() const {
    return m_expose_headers;
}
void OAICorsRule::setExposeHeaders(const QList &expose_headers) {
    m_expose_headers = expose_headers;
    m_expose_headers_isSet = true;
}

bool OAICorsRule::is_expose_headers_Set() const{
    return m_expose_headers_isSet;
}

bool OAICorsRule::is_expose_headers_Valid() const{
    return m_expose_headers_isValid;
}

bool OAICorsRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_origins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICorsRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_allowed_origins_isValid && m_allowed_headers_isValid && true;
}

} // namespace OpenAPI
