/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAutoPredictorRequest from '../model/CreateAutoPredictorRequest';
import CreateAutoPredictorResponse from '../model/CreateAutoPredictorResponse';
import CreateDatasetGroupRequest from '../model/CreateDatasetGroupRequest';
import CreateDatasetGroupResponse from '../model/CreateDatasetGroupResponse';
import CreateDatasetImportJobRequest from '../model/CreateDatasetImportJobRequest';
import CreateDatasetImportJobResponse from '../model/CreateDatasetImportJobResponse';
import CreateDatasetRequest from '../model/CreateDatasetRequest';
import CreateDatasetResponse from '../model/CreateDatasetResponse';
import CreateExplainabilityExportRequest from '../model/CreateExplainabilityExportRequest';
import CreateExplainabilityExportResponse from '../model/CreateExplainabilityExportResponse';
import CreateExplainabilityRequest from '../model/CreateExplainabilityRequest';
import CreateExplainabilityResponse from '../model/CreateExplainabilityResponse';
import CreateForecastExportJobRequest from '../model/CreateForecastExportJobRequest';
import CreateForecastExportJobResponse from '../model/CreateForecastExportJobResponse';
import CreateForecastRequest from '../model/CreateForecastRequest';
import CreateForecastResponse from '../model/CreateForecastResponse';
import CreateMonitorRequest from '../model/CreateMonitorRequest';
import CreateMonitorResponse from '../model/CreateMonitorResponse';
import CreatePredictorBacktestExportJobRequest from '../model/CreatePredictorBacktestExportJobRequest';
import CreatePredictorBacktestExportJobResponse from '../model/CreatePredictorBacktestExportJobResponse';
import CreatePredictorRequest from '../model/CreatePredictorRequest';
import CreatePredictorResponse from '../model/CreatePredictorResponse';
import CreateWhatIfAnalysisRequest from '../model/CreateWhatIfAnalysisRequest';
import CreateWhatIfAnalysisResponse from '../model/CreateWhatIfAnalysisResponse';
import CreateWhatIfForecastExportRequest from '../model/CreateWhatIfForecastExportRequest';
import CreateWhatIfForecastExportResponse from '../model/CreateWhatIfForecastExportResponse';
import CreateWhatIfForecastRequest from '../model/CreateWhatIfForecastRequest';
import CreateWhatIfForecastResponse from '../model/CreateWhatIfForecastResponse';
import DeleteDatasetGroupRequest from '../model/DeleteDatasetGroupRequest';
import DeleteDatasetImportJobRequest from '../model/DeleteDatasetImportJobRequest';
import DeleteDatasetRequest from '../model/DeleteDatasetRequest';
import DeleteExplainabilityExportRequest from '../model/DeleteExplainabilityExportRequest';
import DeleteExplainabilityRequest from '../model/DeleteExplainabilityRequest';
import DeleteForecastExportJobRequest from '../model/DeleteForecastExportJobRequest';
import DeleteForecastRequest from '../model/DeleteForecastRequest';
import DeleteMonitorRequest from '../model/DeleteMonitorRequest';
import DeletePredictorBacktestExportJobRequest from '../model/DeletePredictorBacktestExportJobRequest';
import DeletePredictorRequest from '../model/DeletePredictorRequest';
import DeleteResourceTreeRequest from '../model/DeleteResourceTreeRequest';
import DeleteWhatIfAnalysisRequest from '../model/DeleteWhatIfAnalysisRequest';
import DeleteWhatIfForecastExportRequest from '../model/DeleteWhatIfForecastExportRequest';
import DeleteWhatIfForecastRequest from '../model/DeleteWhatIfForecastRequest';
import DescribeAutoPredictorRequest from '../model/DescribeAutoPredictorRequest';
import DescribeAutoPredictorResponse from '../model/DescribeAutoPredictorResponse';
import DescribeDatasetGroupRequest from '../model/DescribeDatasetGroupRequest';
import DescribeDatasetGroupResponse from '../model/DescribeDatasetGroupResponse';
import DescribeDatasetImportJobRequest from '../model/DescribeDatasetImportJobRequest';
import DescribeDatasetImportJobResponse from '../model/DescribeDatasetImportJobResponse';
import DescribeDatasetRequest from '../model/DescribeDatasetRequest';
import DescribeDatasetResponse from '../model/DescribeDatasetResponse';
import DescribeExplainabilityExportRequest from '../model/DescribeExplainabilityExportRequest';
import DescribeExplainabilityExportResponse from '../model/DescribeExplainabilityExportResponse';
import DescribeExplainabilityRequest from '../model/DescribeExplainabilityRequest';
import DescribeExplainabilityResponse from '../model/DescribeExplainabilityResponse';
import DescribeForecastExportJobRequest from '../model/DescribeForecastExportJobRequest';
import DescribeForecastExportJobResponse from '../model/DescribeForecastExportJobResponse';
import DescribeForecastRequest from '../model/DescribeForecastRequest';
import DescribeForecastResponse from '../model/DescribeForecastResponse';
import DescribeMonitorRequest from '../model/DescribeMonitorRequest';
import DescribeMonitorResponse from '../model/DescribeMonitorResponse';
import DescribePredictorBacktestExportJobRequest from '../model/DescribePredictorBacktestExportJobRequest';
import DescribePredictorBacktestExportJobResponse from '../model/DescribePredictorBacktestExportJobResponse';
import DescribePredictorRequest from '../model/DescribePredictorRequest';
import DescribePredictorResponse from '../model/DescribePredictorResponse';
import DescribeWhatIfAnalysisRequest from '../model/DescribeWhatIfAnalysisRequest';
import DescribeWhatIfAnalysisResponse from '../model/DescribeWhatIfAnalysisResponse';
import DescribeWhatIfForecastExportRequest from '../model/DescribeWhatIfForecastExportRequest';
import DescribeWhatIfForecastExportResponse from '../model/DescribeWhatIfForecastExportResponse';
import DescribeWhatIfForecastRequest from '../model/DescribeWhatIfForecastRequest';
import DescribeWhatIfForecastResponse from '../model/DescribeWhatIfForecastResponse';
import GetAccuracyMetricsRequest from '../model/GetAccuracyMetricsRequest';
import GetAccuracyMetricsResponse from '../model/GetAccuracyMetricsResponse';
import ListDatasetGroupsRequest from '../model/ListDatasetGroupsRequest';
import ListDatasetGroupsResponse from '../model/ListDatasetGroupsResponse';
import ListDatasetImportJobsRequest from '../model/ListDatasetImportJobsRequest';
import ListDatasetImportJobsResponse from '../model/ListDatasetImportJobsResponse';
import ListDatasetsRequest from '../model/ListDatasetsRequest';
import ListDatasetsResponse from '../model/ListDatasetsResponse';
import ListExplainabilitiesRequest from '../model/ListExplainabilitiesRequest';
import ListExplainabilitiesResponse from '../model/ListExplainabilitiesResponse';
import ListExplainabilityExportsRequest from '../model/ListExplainabilityExportsRequest';
import ListExplainabilityExportsResponse from '../model/ListExplainabilityExportsResponse';
import ListForecastExportJobsRequest from '../model/ListForecastExportJobsRequest';
import ListForecastExportJobsResponse from '../model/ListForecastExportJobsResponse';
import ListForecastsRequest from '../model/ListForecastsRequest';
import ListForecastsResponse from '../model/ListForecastsResponse';
import ListMonitorEvaluationsRequest from '../model/ListMonitorEvaluationsRequest';
import ListMonitorEvaluationsResponse from '../model/ListMonitorEvaluationsResponse';
import ListMonitorsRequest from '../model/ListMonitorsRequest';
import ListMonitorsResponse from '../model/ListMonitorsResponse';
import ListPredictorBacktestExportJobsRequest from '../model/ListPredictorBacktestExportJobsRequest';
import ListPredictorBacktestExportJobsResponse from '../model/ListPredictorBacktestExportJobsResponse';
import ListPredictorsRequest from '../model/ListPredictorsRequest';
import ListPredictorsResponse from '../model/ListPredictorsResponse';
import ListTagsForResourceRequest from '../model/ListTagsForResourceRequest';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListWhatIfAnalysesRequest from '../model/ListWhatIfAnalysesRequest';
import ListWhatIfAnalysesResponse from '../model/ListWhatIfAnalysesResponse';
import ListWhatIfForecastExportsRequest from '../model/ListWhatIfForecastExportsRequest';
import ListWhatIfForecastExportsResponse from '../model/ListWhatIfForecastExportsResponse';
import ListWhatIfForecastsRequest from '../model/ListWhatIfForecastsRequest';
import ListWhatIfForecastsResponse from '../model/ListWhatIfForecastsResponse';
import ResumeResourceRequest from '../model/ResumeResourceRequest';
import StopResourceRequest from '../model/StopResourceRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateDatasetGroupRequest from '../model/UpdateDatasetGroupRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-06-26
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAutoPredictor operation.
     * @callback module:api/DefaultApi~createAutoPredictorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAutoPredictorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Forecast predictor.</p> <p>Amazon Forecast creates predictors with AutoPredictor, which involves applying the optimal combination of algorithms to each time series in your datasets. You can use <a>CreateAutoPredictor</a> to create new predictors or upgrade/retrain existing predictors.</p> <p> <b>Creating new predictors</b> </p> <p>The following parameters are required when creating a new predictor:</p> <ul> <li> <p> <code>PredictorName</code> - A unique name for the predictor.</p> </li> <li> <p> <code>DatasetGroupArn</code> - The ARN of the dataset group used to train the predictor.</p> </li> <li> <p> <code>ForecastFrequency</code> - The granularity of your forecasts (hourly, daily, weekly, etc).</p> </li> <li> <p> <code>ForecastHorizon</code> - The number of time-steps that the model predicts. The forecast horizon is also called the prediction length.</p> </li> </ul> <p>When creating a new predictor, do not specify a value for <code>ReferencePredictorArn</code>.</p> <p> <b>Upgrading and retraining predictors</b> </p> <p>The following parameters are required when retraining or upgrading a predictor:</p> <ul> <li> <p> <code>PredictorName</code> - A unique name for the predictor.</p> </li> <li> <p> <code>ReferencePredictorArn</code> - The ARN of the predictor to retrain or upgrade.</p> </li> </ul> <p>When upgrading or retraining a predictor, only specify values for the <code>ReferencePredictorArn</code> and <code>PredictorName</code>. </p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAutoPredictorRequest} createAutoPredictorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAutoPredictorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAutoPredictorResponse}
     */
    createAutoPredictor(xAmzTarget, createAutoPredictorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAutoPredictorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAutoPredictor");
      }
      // verify the required parameter 'createAutoPredictorRequest' is set
      if (createAutoPredictorRequest === undefined || createAutoPredictorRequest === null) {
        throw new Error("Missing the required parameter 'createAutoPredictorRequest' when calling createAutoPredictor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAutoPredictorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateAutoPredictor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataset operation.
     * @callback module:api/DefaultApi~createDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Forecast dataset. The information about the dataset that you provide helps Forecast understand how to consume the data for model training. This includes the following:</p> <ul> <li> <p> <i> <code>DataFrequency</code> </i> - How frequently your historical time-series data is collected.</p> </li> <li> <p> <i> <code>Domain</code> </i> and <i> <code>DatasetType</code> </i> - Each dataset has an associated dataset domain and a type within the domain. Amazon Forecast provides a list of predefined domains and types within each domain. For each unique dataset domain and type within the domain, Amazon Forecast requires your data to include a minimum set of predefined fields.</p> </li> <li> <p> <i> <code>Schema</code> </i> - A schema specifies the fields in the dataset, including the field name and data type.</p> </li> </ul> <p>After creating a dataset, you import your training data into it and add the dataset to a dataset group. You use the dataset group to create a predictor. For more information, see <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html\">Importing datasets</a>.</p> <p>To get a list of all your datasets, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasets.html\">ListDatasets</a> operation.</p> <p>For example Forecast datasets, see the <a href=\"https://github.com/aws-samples/amazon-forecast-samples\">Amazon Forecast Sample GitHub repository</a>.</p> <note> <p>The <code>Status</code> of a dataset must be <code>ACTIVE</code> before you can import training data. Use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html\">DescribeDataset</a> operation to get the status.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDatasetRequest} createDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDatasetResponse}
     */
    createDataset(xAmzTarget, createDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDataset");
      }
      // verify the required parameter 'createDatasetRequest' is set
      if (createDatasetRequest === undefined || createDatasetRequest === null) {
        throw new Error("Missing the required parameter 'createDatasetRequest' when calling createDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDatasetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDatasetGroup operation.
     * @callback module:api/DefaultApi~createDatasetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDatasetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a dataset group, which holds a collection of related datasets. You can add datasets to the dataset group when you create the dataset group, or later by using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_UpdateDatasetGroup.html\">UpdateDatasetGroup</a> operation.</p> <p>After creating a dataset group and adding datasets, you use the dataset group when you create a predictor. For more information, see <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/howitworks-datasets-groups.html\">Dataset groups</a>.</p> <p>To get a list of all your datasets groups, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasetGroups.html\">ListDatasetGroups</a> operation.</p> <note> <p>The <code>Status</code> of a dataset group must be <code>ACTIVE</code> before you can use the dataset group to create a predictor. To get the status, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html\">DescribeDatasetGroup</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDatasetGroupRequest} createDatasetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDatasetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDatasetGroupResponse}
     */
    createDatasetGroup(xAmzTarget, createDatasetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDatasetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDatasetGroup");
      }
      // verify the required parameter 'createDatasetGroupRequest' is set
      if (createDatasetGroupRequest === undefined || createDatasetGroupRequest === null) {
        throw new Error("Missing the required parameter 'createDatasetGroupRequest' when calling createDatasetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDatasetGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateDatasetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDatasetImportJob operation.
     * @callback module:api/DefaultApi~createDatasetImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDatasetImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Imports your training data to an Amazon Forecast dataset. You provide the location of your training data in an Amazon Simple Storage Service (Amazon S3) bucket and the Amazon Resource Name (ARN) of the dataset that you want to import the data to.</p> <p>You must specify a <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DataSource.html\">DataSource</a> object that includes an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the data, as Amazon Forecast makes a copy of your data and processes it in an internal Amazon Web Services system. For more information, see <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/aws-forecast-iam-roles.html\">Set up permissions</a>.</p> <p>The training data must be in CSV or Parquet format. The delimiter must be a comma (,).</p> <p>You can specify the path to a specific file, the S3 bucket, or to a folder in the S3 bucket. For the latter two cases, Amazon Forecast imports all files up to the limit of 10,000 files.</p> <p>Because dataset imports are not aggregated, your most recent dataset import is the one that is used when training a predictor or generating a forecast. Make sure that your most recent dataset import contains all of the data you want to model off of, and not just the new data collected since the previous import.</p> <p>To get a list of all your dataset import jobs, filtered by specified criteria, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_ListDatasetImportJobs.html\">ListDatasetImportJobs</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateDatasetImportJobRequest} createDatasetImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDatasetImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDatasetImportJobResponse}
     */
    createDatasetImportJob(xAmzTarget, createDatasetImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDatasetImportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createDatasetImportJob");
      }
      // verify the required parameter 'createDatasetImportJobRequest' is set
      if (createDatasetImportJobRequest === undefined || createDatasetImportJobRequest === null) {
        throw new Error("Missing the required parameter 'createDatasetImportJobRequest' when calling createDatasetImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDatasetImportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateDatasetImportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExplainability operation.
     * @callback module:api/DefaultApi~createExplainabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExplainabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p>Explainability is only available for Forecasts and Predictors generated from an AutoPredictor (<a>CreateAutoPredictor</a>)</p> </note> <p>Creates an Amazon Forecast Explainability.</p> <p>Explainability helps you better understand how the attributes in your datasets impact forecast. Amazon Forecast uses a metric called Impact scores to quantify the relative impact of each attribute and determine whether they increase or decrease forecast values.</p> <p>To enable Forecast Explainability, your predictor must include at least one of the following: related time series, item metadata, or additional datasets like Holidays and the Weather Index.</p> <p>CreateExplainability accepts either a Predictor ARN or Forecast ARN. To receive aggregated Impact scores for all time series and time points in your datasets, provide a Predictor ARN. To receive Impact scores for specific time series and time points, provide a Forecast ARN.</p> <p> <b>CreateExplainability with a Predictor ARN</b> </p> <note> <p>You can only have one Explainability resource per predictor. If you already enabled <code>ExplainPredictor</code> in <a>CreateAutoPredictor</a>, that predictor already has an Explainability resource.</p> </note> <p>The following parameters are required when providing a Predictor ARN:</p> <ul> <li> <p> <code>ExplainabilityName</code> - A unique name for the Explainability.</p> </li> <li> <p> <code>ResourceArn</code> - The Arn of the predictor.</p> </li> <li> <p> <code>TimePointGranularity</code> - Must be set to “ALL”.</p> </li> <li> <p> <code>TimeSeriesGranularity</code> - Must be set to “ALL”.</p> </li> </ul> <p>Do not specify a value for the following parameters:</p> <ul> <li> <p> <code>DataSource</code> - Only valid when TimeSeriesGranularity is “SPECIFIC”.</p> </li> <li> <p> <code>Schema</code> - Only valid when TimeSeriesGranularity is “SPECIFIC”.</p> </li> <li> <p> <code>StartDateTime</code> - Only valid when TimePointGranularity is “SPECIFIC”.</p> </li> <li> <p> <code>EndDateTime</code> - Only valid when TimePointGranularity is “SPECIFIC”.</p> </li> </ul> <p> <b>CreateExplainability with a Forecast ARN</b> </p> <note> <p>You can specify a maximum of 50 time series and 500 time points.</p> </note> <p>The following parameters are required when providing a Predictor ARN:</p> <ul> <li> <p> <code>ExplainabilityName</code> - A unique name for the Explainability.</p> </li> <li> <p> <code>ResourceArn</code> - The Arn of the forecast.</p> </li> <li> <p> <code>TimePointGranularity</code> - Either “ALL” or “SPECIFIC”.</p> </li> <li> <p> <code>TimeSeriesGranularity</code> - Either “ALL” or “SPECIFIC”.</p> </li> </ul> <p>If you set TimeSeriesGranularity to “SPECIFIC”, you must also provide the following:</p> <ul> <li> <p> <code>DataSource</code> - The S3 location of the CSV file specifying your time series.</p> </li> <li> <p> <code>Schema</code> - The Schema defines the attributes and attribute types listed in the Data Source.</p> </li> </ul> <p>If you set TimePointGranularity to “SPECIFIC”, you must also provide the following:</p> <ul> <li> <p> <code>StartDateTime</code> - The first timestamp in the range of time points.</p> </li> <li> <p> <code>EndDateTime</code> - The last timestamp in the range of time points.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateExplainabilityRequest} createExplainabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExplainabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExplainabilityResponse}
     */
    createExplainability(xAmzTarget, createExplainabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExplainabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createExplainability");
      }
      // verify the required parameter 'createExplainabilityRequest' is set
      if (createExplainabilityRequest === undefined || createExplainabilityRequest === null) {
        throw new Error("Missing the required parameter 'createExplainabilityRequest' when calling createExplainability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExplainabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateExplainability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createExplainabilityExport operation.
     * @callback module:api/DefaultApi~createExplainabilityExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateExplainabilityExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Exports an Explainability resource created by the <a>CreateExplainability</a> operation. Exported files are exported to an Amazon Simple Storage Service (Amazon S3) bucket.</p> <p>You must specify a <a>DataDestination</a> object that includes an Amazon S3 bucket and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p> <note> <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before you can access the export in your Amazon S3 bucket. To get the status, use the <a>DescribeExplainabilityExport</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateExplainabilityExportRequest} createExplainabilityExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createExplainabilityExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateExplainabilityExportResponse}
     */
    createExplainabilityExport(xAmzTarget, createExplainabilityExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createExplainabilityExportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createExplainabilityExport");
      }
      // verify the required parameter 'createExplainabilityExportRequest' is set
      if (createExplainabilityExportRequest === undefined || createExplainabilityExportRequest === null) {
        throw new Error("Missing the required parameter 'createExplainabilityExportRequest' when calling createExplainabilityExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateExplainabilityExportResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateExplainabilityExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createForecast operation.
     * @callback module:api/DefaultApi~createForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a forecast for each item in the <code>TARGET_TIME_SERIES</code> dataset that was used to train the predictor. This is known as inference. To retrieve the forecast for a single item at low latency, use the operation. To export the complete forecast into your Amazon Simple Storage Service (Amazon S3) bucket, use the <a>CreateForecastExportJob</a> operation.</p> <p>The range of the forecast is determined by the <code>ForecastHorizon</code> value, which you specify in the <a>CreatePredictor</a> request. When you query a forecast, you can request a specific date range within the forecast.</p> <p>To get a list of all your forecasts, use the <a>ListForecasts</a> operation.</p> <note> <p>The forecasts generated by Amazon Forecast are in the same time zone as the dataset that was used to create the predictor.</p> </note> <p>For more information, see <a>howitworks-forecast</a>.</p> <note> <p>The <code>Status</code> of the forecast must be <code>ACTIVE</code> before you can query or export the forecast. Use the <a>DescribeForecast</a> operation to get the status.</p> </note> <p>By default, a forecast includes predictions for every item (<code>item_id</code>) in the dataset group that was used to train the predictor. However, you can use the <code>TimeSeriesSelector</code> object to generate a forecast on a subset of time series. Forecast creation is skipped for any time series that you specify that are not in the input dataset. The forecast export file will not contain these time series or their forecasted values.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateForecastRequest} createForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateForecastResponse}
     */
    createForecast(xAmzTarget, createForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = createForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createForecast");
      }
      // verify the required parameter 'createForecastRequest' is set
      if (createForecastRequest === undefined || createForecastRequest === null) {
        throw new Error("Missing the required parameter 'createForecastRequest' when calling createForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateForecastResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createForecastExportJob operation.
     * @callback module:api/DefaultApi~createForecastExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateForecastExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Exports a forecast created by the <a>CreateForecast</a> operation to your Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p> <p>&lt;ForecastExportJobName&gt;_&lt;ExportTimestamp&gt;_&lt;PartNumber&gt;</p> <p>where the &lt;ExportTimestamp&gt; component is in Java SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ).</p> <p>You must specify a <a>DataDestination</a> object that includes an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p> <p>For more information, see <a>howitworks-forecast</a>.</p> <p>To get a list of all your forecast export jobs, use the <a>ListForecastExportJobs</a> operation.</p> <note> <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your Amazon S3 bucket. To get the status, use the <a>DescribeForecastExportJob</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateForecastExportJobRequest} createForecastExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createForecastExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateForecastExportJobResponse}
     */
    createForecastExportJob(xAmzTarget, createForecastExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createForecastExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createForecastExportJob");
      }
      // verify the required parameter 'createForecastExportJobRequest' is set
      if (createForecastExportJobRequest === undefined || createForecastExportJobRequest === null) {
        throw new Error("Missing the required parameter 'createForecastExportJobRequest' when calling createForecastExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateForecastExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateForecastExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createMonitor operation.
     * @callback module:api/DefaultApi~createMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateMonitorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a predictor monitor resource for an existing auto predictor. Predictor monitoring allows you to see how your predictor's performance changes over time. For more information, see <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring.html\">Predictor Monitoring</a>. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateMonitorRequest} createMonitorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateMonitorResponse}
     */
    createMonitor(xAmzTarget, createMonitorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createMonitorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createMonitor");
      }
      // verify the required parameter 'createMonitorRequest' is set
      if (createMonitorRequest === undefined || createMonitorRequest === null) {
        throw new Error("Missing the required parameter 'createMonitorRequest' when calling createMonitor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateMonitorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateMonitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPredictor operation.
     * @callback module:api/DefaultApi~createPredictorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePredictorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p> This operation creates a legacy predictor that does not include all the predictor functionalities provided by Amazon Forecast. To create a predictor that is compatible with all aspects of Forecast, use <a>CreateAutoPredictor</a>.</p> </note> <p>Creates an Amazon Forecast predictor.</p> <p>In the request, provide a dataset group and either specify an algorithm or let Amazon Forecast choose an algorithm for you using AutoML. If you specify an algorithm, you also can override algorithm-specific hyperparameters.</p> <p>Amazon Forecast uses the algorithm to train a predictor using the latest version of the datasets in the specified dataset group. You can then generate a forecast using the <a>CreateForecast</a> operation.</p> <p> To see the evaluation metrics, use the <a>GetAccuracyMetrics</a> operation. </p> <p>You can specify a featurization configuration to fill and aggregate the data fields in the <code>TARGET_TIME_SERIES</code> dataset to improve model training. For more information, see <a>FeaturizationConfig</a>.</p> <p>For RELATED_TIME_SERIES datasets, <code>CreatePredictor</code> verifies that the <code>DataFrequency</code> specified when the dataset was created matches the <code>ForecastFrequency</code>. TARGET_TIME_SERIES datasets don't have this restriction. Amazon Forecast also verifies the delimiter and timestamp format. For more information, see <a>howitworks-datasets-groups</a>.</p> <p>By default, predictors are trained and evaluated at the 0.1 (P10), 0.5 (P50), and 0.9 (P90) quantiles. You can choose custom forecast types to train and evaluate your predictor by setting the <code>ForecastTypes</code>. </p> <p> <b>AutoML</b> </p> <p>If you want Amazon Forecast to evaluate each algorithm and choose the one that minimizes the <code>objective function</code>, set <code>PerformAutoML</code> to <code>true</code>. The <code>objective function</code> is defined as the mean of the weighted losses over the forecast types. By default, these are the p10, p50, and p90 quantile losses. For more information, see <a>EvaluationResult</a>.</p> <p>When AutoML is enabled, the following properties are disallowed:</p> <ul> <li> <p> <code>AlgorithmArn</code> </p> </li> <li> <p> <code>HPOConfig</code> </p> </li> <li> <p> <code>PerformHPO</code> </p> </li> <li> <p> <code>TrainingParameters</code> </p> </li> </ul> <p>To get a list of all of your predictors, use the <a>ListPredictors</a> operation.</p> <note> <p>Before you can use the predictor to create a forecast, the <code>Status</code> of the predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the status, use the <a>DescribePredictor</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePredictorRequest} createPredictorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPredictorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePredictorResponse}
     */
    createPredictor(xAmzTarget, createPredictorRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPredictorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPredictor");
      }
      // verify the required parameter 'createPredictorRequest' is set
      if (createPredictorRequest === undefined || createPredictorRequest === null) {
        throw new Error("Missing the required parameter 'createPredictorRequest' when calling createPredictor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePredictorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreatePredictor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPredictorBacktestExportJob operation.
     * @callback module:api/DefaultApi~createPredictorBacktestExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePredictorBacktestExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Exports backtest forecasts and accuracy metrics generated by the <a>CreateAutoPredictor</a> or <a>CreatePredictor</a> operations. Two folders containing CSV or Parquet files are exported to your specified S3 bucket.</p> <p> The export file names will match the following conventions:</p> <p> <code>&lt;ExportJobName&gt;_&lt;ExportTimestamp&gt;_&lt;PartNumber&gt;.csv</code> </p> <p>The &lt;ExportTimestamp&gt; component is in Java SimpleDate format (yyyy-MM-ddTHH-mm-ssZ).</p> <p>You must specify a <a>DataDestination</a> object that includes an Amazon S3 bucket and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p> <note> <p>The <code>Status</code> of the export job must be <code>ACTIVE</code> before you can access the export in your Amazon S3 bucket. To get the status, use the <a>DescribePredictorBacktestExportJob</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreatePredictorBacktestExportJobRequest} createPredictorBacktestExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createPredictorBacktestExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePredictorBacktestExportJobResponse}
     */
    createPredictorBacktestExportJob(xAmzTarget, createPredictorBacktestExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createPredictorBacktestExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createPredictorBacktestExportJob");
      }
      // verify the required parameter 'createPredictorBacktestExportJobRequest' is set
      if (createPredictorBacktestExportJobRequest === undefined || createPredictorBacktestExportJobRequest === null) {
        throw new Error("Missing the required parameter 'createPredictorBacktestExportJobRequest' when calling createPredictorBacktestExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePredictorBacktestExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreatePredictorBacktestExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWhatIfAnalysis operation.
     * @callback module:api/DefaultApi~createWhatIfAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWhatIfAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>What-if analysis is a scenario modeling technique where you make a hypothetical change to a time series and compare the forecasts generated by these changes against the baseline, unchanged time series. It is important to remember that the purpose of a what-if analysis is to understand how a forecast can change given different modifications to the baseline time series.</p> <p>For example, imagine you are a clothing retailer who is considering an end of season sale to clear space for new styles. After creating a baseline forecast, you can use a what-if analysis to investigate how different sales tactics might affect your goals.</p> <p>You could create a scenario where everything is given a 25% markdown, and another where everything is given a fixed dollar markdown. You could create a scenario where the sale lasts for one week and another where the sale lasts for one month. With a what-if analysis, you can compare many different scenarios against each other.</p> <p>Note that a what-if analysis is meant to display what the forecasting model has learned and how it will behave in the scenarios that you are evaluating. Do not blindly use the results of the what-if analysis to make business decisions. For instance, forecasts might not be accurate for novel scenarios where there is no reference available to determine whether a forecast is good.</p> <p>The <a>TimeSeriesSelector</a> object defines the items that you want in the what-if analysis.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWhatIfAnalysisRequest} createWhatIfAnalysisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWhatIfAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWhatIfAnalysisResponse}
     */
    createWhatIfAnalysis(xAmzTarget, createWhatIfAnalysisRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWhatIfAnalysisRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWhatIfAnalysis");
      }
      // verify the required parameter 'createWhatIfAnalysisRequest' is set
      if (createWhatIfAnalysisRequest === undefined || createWhatIfAnalysisRequest === null) {
        throw new Error("Missing the required parameter 'createWhatIfAnalysisRequest' when calling createWhatIfAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWhatIfAnalysisResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateWhatIfAnalysis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWhatIfForecast operation.
     * @callback module:api/DefaultApi~createWhatIfForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWhatIfForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A what-if forecast is a forecast that is created from a modified version of the baseline forecast. Each what-if forecast incorporates either a replacement dataset or a set of transformations to the original dataset. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWhatIfForecastRequest} createWhatIfForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWhatIfForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWhatIfForecastResponse}
     */
    createWhatIfForecast(xAmzTarget, createWhatIfForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWhatIfForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWhatIfForecast");
      }
      // verify the required parameter 'createWhatIfForecastRequest' is set
      if (createWhatIfForecastRequest === undefined || createWhatIfForecastRequest === null) {
        throw new Error("Missing the required parameter 'createWhatIfForecastRequest' when calling createWhatIfForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWhatIfForecastResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateWhatIfForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWhatIfForecastExport operation.
     * @callback module:api/DefaultApi~createWhatIfForecastExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateWhatIfForecastExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Exports a forecast created by the <a>CreateWhatIfForecast</a> operation to your Amazon Simple Storage Service (Amazon S3) bucket. The forecast file name will match the following conventions:</p> <p> <code>≈&lt;ForecastExportJobName&gt;_&lt;ExportTimestamp&gt;_&lt;PartNumber&gt;</code> </p> <p>The &lt;ExportTimestamp&gt; component is in Java SimpleDateFormat (yyyy-MM-ddTHH-mm-ssZ).</p> <p>You must specify a <a>DataDestination</a> object that includes an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the Amazon S3 bucket. For more information, see <a>aws-forecast-iam-roles</a>.</p> <p>For more information, see <a>howitworks-forecast</a>.</p> <p>To get a list of all your what-if forecast export jobs, use the <a>ListWhatIfForecastExports</a> operation.</p> <note> <p>The <code>Status</code> of the forecast export job must be <code>ACTIVE</code> before you can access the forecast in your Amazon S3 bucket. To get the status, use the <a>DescribeWhatIfForecastExport</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateWhatIfForecastExportRequest} createWhatIfForecastExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWhatIfForecastExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateWhatIfForecastExportResponse}
     */
    createWhatIfForecastExport(xAmzTarget, createWhatIfForecastExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWhatIfForecastExportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createWhatIfForecastExport");
      }
      // verify the required parameter 'createWhatIfForecastExportRequest' is set
      if (createWhatIfForecastExportRequest === undefined || createWhatIfForecastExportRequest === null) {
        throw new Error("Missing the required parameter 'createWhatIfForecastExportRequest' when calling createWhatIfForecastExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateWhatIfForecastExportResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.CreateWhatIfForecastExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataset operation.
     * @callback module:api/DefaultApi~deleteDatasetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an Amazon Forecast dataset that was created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html\">CreateDataset</a> operation. You can only delete datasets that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html\">DescribeDataset</a> operation.</p> <note> <p>Forecast does not automatically update any dataset groups that contain the deleted dataset. In order to update the dataset group, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_UpdateDatasetGroup.html\">UpdateDatasetGroup</a> operation, omitting the deleted dataset's ARN.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDatasetRequest} deleteDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataset(xAmzTarget, deleteDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDataset");
      }
      // verify the required parameter 'deleteDatasetRequest' is set
      if (deleteDatasetRequest === undefined || deleteDatasetRequest === null) {
        throw new Error("Missing the required parameter 'deleteDatasetRequest' when calling deleteDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDatasetGroup operation.
     * @callback module:api/DefaultApi~deleteDatasetGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a dataset group created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html\">CreateDatasetGroup</a> operation. You can only delete dataset groups that have a status of <code>ACTIVE</code>, <code>CREATE_FAILED</code>, or <code>UPDATE_FAILED</code>. To get the status, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html\">DescribeDatasetGroup</a> operation.</p> <p>This operation deletes only the dataset group, not the datasets in the group.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDatasetGroupRequest} deleteDatasetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDatasetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDatasetGroup(xAmzTarget, deleteDatasetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDatasetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDatasetGroup");
      }
      // verify the required parameter 'deleteDatasetGroupRequest' is set
      if (deleteDatasetGroupRequest === undefined || deleteDatasetGroupRequest === null) {
        throw new Error("Missing the required parameter 'deleteDatasetGroupRequest' when calling deleteDatasetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteDatasetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDatasetImportJob operation.
     * @callback module:api/DefaultApi~deleteDatasetImportJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dataset import job created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\">CreateDatasetImportJob</a> operation. You can delete only dataset import jobs that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetImportJob.html\">DescribeDatasetImportJob</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteDatasetImportJobRequest} deleteDatasetImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDatasetImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDatasetImportJob(xAmzTarget, deleteDatasetImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDatasetImportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteDatasetImportJob");
      }
      // verify the required parameter 'deleteDatasetImportJobRequest' is set
      if (deleteDatasetImportJobRequest === undefined || deleteDatasetImportJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteDatasetImportJobRequest' when calling deleteDatasetImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteDatasetImportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExplainability operation.
     * @callback module:api/DefaultApi~deleteExplainabilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an Explainability resource.</p> <p>You can delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeExplainability</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteExplainabilityRequest} deleteExplainabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteExplainabilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExplainability(xAmzTarget, deleteExplainabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExplainabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteExplainability");
      }
      // verify the required parameter 'deleteExplainabilityRequest' is set
      if (deleteExplainabilityRequest === undefined || deleteExplainabilityRequest === null) {
        throw new Error("Missing the required parameter 'deleteExplainabilityRequest' when calling deleteExplainability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteExplainability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExplainabilityExport operation.
     * @callback module:api/DefaultApi~deleteExplainabilityExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Explainability export.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteExplainabilityExportRequest} deleteExplainabilityExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteExplainabilityExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteExplainabilityExport(xAmzTarget, deleteExplainabilityExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteExplainabilityExportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteExplainabilityExport");
      }
      // verify the required parameter 'deleteExplainabilityExportRequest' is set
      if (deleteExplainabilityExportRequest === undefined || deleteExplainabilityExportRequest === null) {
        throw new Error("Missing the required parameter 'deleteExplainabilityExportRequest' when calling deleteExplainabilityExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteExplainabilityExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteForecast operation.
     * @callback module:api/DefaultApi~deleteForecastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a forecast created using the <a>CreateForecast</a> operation. You can delete only forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeForecast</a> operation.</p> <p>You can't delete a forecast while it is being exported. After a forecast is deleted, you can no longer query the forecast.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteForecastRequest} deleteForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteForecastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteForecast(xAmzTarget, deleteForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteForecast");
      }
      // verify the required parameter 'deleteForecastRequest' is set
      if (deleteForecastRequest === undefined || deleteForecastRequest === null) {
        throw new Error("Missing the required parameter 'deleteForecastRequest' when calling deleteForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteForecastExportJob operation.
     * @callback module:api/DefaultApi~deleteForecastExportJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a forecast export job created using the <a>CreateForecastExportJob</a> operation. You can delete only export jobs that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeForecastExportJob</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteForecastExportJobRequest} deleteForecastExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteForecastExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteForecastExportJob(xAmzTarget, deleteForecastExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteForecastExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteForecastExportJob");
      }
      // verify the required parameter 'deleteForecastExportJobRequest' is set
      if (deleteForecastExportJobRequest === undefined || deleteForecastExportJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteForecastExportJobRequest' when calling deleteForecastExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteForecastExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMonitor operation.
     * @callback module:api/DefaultApi~deleteMonitorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a monitor resource. You can only delete a monitor resource with a status of <code>ACTIVE</code>, <code>ACTIVE_STOPPED</code>, <code>CREATE_FAILED</code>, or <code>CREATE_STOPPED</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteMonitorRequest} deleteMonitorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMonitor(xAmzTarget, deleteMonitorRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteMonitorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteMonitor");
      }
      // verify the required parameter 'deleteMonitorRequest' is set
      if (deleteMonitorRequest === undefined || deleteMonitorRequest === null) {
        throw new Error("Missing the required parameter 'deleteMonitorRequest' when calling deleteMonitor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteMonitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePredictor operation.
     * @callback module:api/DefaultApi~deletePredictorCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a predictor created using the <a>DescribePredictor</a> or <a>CreatePredictor</a> operations. You can delete only predictor that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribePredictor</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePredictorRequest} deletePredictorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePredictorCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePredictor(xAmzTarget, deletePredictorRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePredictorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePredictor");
      }
      // verify the required parameter 'deletePredictorRequest' is set
      if (deletePredictorRequest === undefined || deletePredictorRequest === null) {
        throw new Error("Missing the required parameter 'deletePredictorRequest' when calling deletePredictor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeletePredictor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePredictorBacktestExportJob operation.
     * @callback module:api/DefaultApi~deletePredictorBacktestExportJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a predictor backtest export job.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeletePredictorBacktestExportJobRequest} deletePredictorBacktestExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deletePredictorBacktestExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePredictorBacktestExportJob(xAmzTarget, deletePredictorBacktestExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deletePredictorBacktestExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deletePredictorBacktestExportJob");
      }
      // verify the required parameter 'deletePredictorBacktestExportJobRequest' is set
      if (deletePredictorBacktestExportJobRequest === undefined || deletePredictorBacktestExportJobRequest === null) {
        throw new Error("Missing the required parameter 'deletePredictorBacktestExportJobRequest' when calling deletePredictorBacktestExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeletePredictorBacktestExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceTree operation.
     * @callback module:api/DefaultApi~deleteResourceTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes an entire resource tree. This operation will delete the parent resource and its child resources.</p> <p>Child resources are resources that were created from another resource. For example, when a forecast is generated from a predictor, the forecast is the child resource and the predictor is the parent resource.</p> <p>Amazon Forecast resources possess the following parent-child resource hierarchies:</p> <ul> <li> <p> <b>Dataset</b>: dataset import jobs</p> </li> <li> <p> <b>Dataset Group</b>: predictors, predictor backtest export jobs, forecasts, forecast export jobs</p> </li> <li> <p> <b>Predictor</b>: predictor backtest export jobs, forecasts, forecast export jobs</p> </li> <li> <p> <b>Forecast</b>: forecast export jobs</p> </li> </ul> <note> <p> <code>DeleteResourceTree</code> will only delete Amazon Forecast resources, and will not delete datasets or exported files stored in Amazon S3. </p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteResourceTreeRequest} deleteResourceTreeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourceTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResourceTree(xAmzTarget, deleteResourceTreeRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteResourceTreeRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteResourceTree");
      }
      // verify the required parameter 'deleteResourceTreeRequest' is set
      if (deleteResourceTreeRequest === undefined || deleteResourceTreeRequest === null) {
        throw new Error("Missing the required parameter 'deleteResourceTreeRequest' when calling deleteResourceTree");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteResourceTree', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWhatIfAnalysis operation.
     * @callback module:api/DefaultApi~deleteWhatIfAnalysisCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a what-if analysis created using the <a>CreateWhatIfAnalysis</a> operation. You can delete only what-if analyses that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeWhatIfAnalysis</a> operation. </p> <p>You can't delete a what-if analysis while any of its forecasts are being exported.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWhatIfAnalysisRequest} deleteWhatIfAnalysisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWhatIfAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWhatIfAnalysis(xAmzTarget, deleteWhatIfAnalysisRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWhatIfAnalysisRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWhatIfAnalysis");
      }
      // verify the required parameter 'deleteWhatIfAnalysisRequest' is set
      if (deleteWhatIfAnalysisRequest === undefined || deleteWhatIfAnalysisRequest === null) {
        throw new Error("Missing the required parameter 'deleteWhatIfAnalysisRequest' when calling deleteWhatIfAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteWhatIfAnalysis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWhatIfForecast operation.
     * @callback module:api/DefaultApi~deleteWhatIfForecastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deletes a what-if forecast created using the <a>CreateWhatIfForecast</a> operation. You can delete only what-if forecasts that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeWhatIfForecast</a> operation. </p> <p>You can't delete a what-if forecast while it is being exported. After a what-if forecast is deleted, you can no longer query the what-if analysis.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWhatIfForecastRequest} deleteWhatIfForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWhatIfForecastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWhatIfForecast(xAmzTarget, deleteWhatIfForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWhatIfForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWhatIfForecast");
      }
      // verify the required parameter 'deleteWhatIfForecastRequest' is set
      if (deleteWhatIfForecastRequest === undefined || deleteWhatIfForecastRequest === null) {
        throw new Error("Missing the required parameter 'deleteWhatIfForecastRequest' when calling deleteWhatIfForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteWhatIfForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWhatIfForecastExport operation.
     * @callback module:api/DefaultApi~deleteWhatIfForecastExportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a what-if forecast export created using the <a>CreateWhatIfForecastExport</a> operation. You can delete only what-if forecast exports that have a status of <code>ACTIVE</code> or <code>CREATE_FAILED</code>. To get the status, use the <a>DescribeWhatIfForecastExport</a> operation. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DeleteWhatIfForecastExportRequest} deleteWhatIfForecastExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWhatIfForecastExportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteWhatIfForecastExport(xAmzTarget, deleteWhatIfForecastExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteWhatIfForecastExportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling deleteWhatIfForecastExport");
      }
      // verify the required parameter 'deleteWhatIfForecastExportRequest' is set
      if (deleteWhatIfForecastExportRequest === undefined || deleteWhatIfForecastExportRequest === null) {
        throw new Error("Missing the required parameter 'deleteWhatIfForecastExportRequest' when calling deleteWhatIfForecastExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DeleteWhatIfForecastExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAutoPredictor operation.
     * @callback module:api/DefaultApi~describeAutoPredictorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAutoPredictorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes a predictor created using the CreateAutoPredictor operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAutoPredictorRequest} describeAutoPredictorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAutoPredictorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAutoPredictorResponse}
     */
    describeAutoPredictor(xAmzTarget, describeAutoPredictorRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAutoPredictorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAutoPredictor");
      }
      // verify the required parameter 'describeAutoPredictorRequest' is set
      if (describeAutoPredictorRequest === undefined || describeAutoPredictorRequest === null) {
        throw new Error("Missing the required parameter 'describeAutoPredictorRequest' when calling describeAutoPredictor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAutoPredictorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeAutoPredictor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDataset operation.
     * @callback module:api/DefaultApi~describeDatasetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDatasetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes an Amazon Forecast dataset created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html\">CreateDataset</a> operation.</p> <p>In addition to listing the parameters specified in the <code>CreateDataset</code> request, this operation includes the following dataset properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDatasetRequest} describeDatasetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDatasetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDatasetResponse}
     */
    describeDataset(xAmzTarget, describeDatasetRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDatasetRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDataset");
      }
      // verify the required parameter 'describeDatasetRequest' is set
      if (describeDatasetRequest === undefined || describeDatasetRequest === null) {
        throw new Error("Missing the required parameter 'describeDatasetRequest' when calling describeDataset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDatasetResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeDataset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDatasetGroup operation.
     * @callback module:api/DefaultApi~describeDatasetGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDatasetGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a dataset group created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html\">CreateDatasetGroup</a> operation.</p> <p>In addition to listing the parameters provided in the <code>CreateDatasetGroup</code> request, this operation includes the following properties:</p> <ul> <li> <p> <code>DatasetArns</code> - The datasets belonging to the group.</p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDatasetGroupRequest} describeDatasetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDatasetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDatasetGroupResponse}
     */
    describeDatasetGroup(xAmzTarget, describeDatasetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDatasetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDatasetGroup");
      }
      // verify the required parameter 'describeDatasetGroupRequest' is set
      if (describeDatasetGroupRequest === undefined || describeDatasetGroupRequest === null) {
        throw new Error("Missing the required parameter 'describeDatasetGroupRequest' when calling describeDatasetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDatasetGroupResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeDatasetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDatasetImportJob operation.
     * @callback module:api/DefaultApi~describeDatasetImportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDatasetImportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a dataset import job created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\">CreateDatasetImportJob</a> operation.</p> <p>In addition to listing the parameters provided in the <code>CreateDatasetImportJob</code> request, this operation includes the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>DataSize</code> </p> </li> <li> <p> <code>FieldStatistics</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeDatasetImportJobRequest} describeDatasetImportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDatasetImportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDatasetImportJobResponse}
     */
    describeDatasetImportJob(xAmzTarget, describeDatasetImportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeDatasetImportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeDatasetImportJob");
      }
      // verify the required parameter 'describeDatasetImportJobRequest' is set
      if (describeDatasetImportJobRequest === undefined || describeDatasetImportJobRequest === null) {
        throw new Error("Missing the required parameter 'describeDatasetImportJobRequest' when calling describeDatasetImportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeDatasetImportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeDatasetImportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExplainability operation.
     * @callback module:api/DefaultApi~describeExplainabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExplainabilityResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an Explainability resource created using the <a>CreateExplainability</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeExplainabilityRequest} describeExplainabilityRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExplainabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExplainabilityResponse}
     */
    describeExplainability(xAmzTarget, describeExplainabilityRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeExplainabilityRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeExplainability");
      }
      // verify the required parameter 'describeExplainabilityRequest' is set
      if (describeExplainabilityRequest === undefined || describeExplainabilityRequest === null) {
        throw new Error("Missing the required parameter 'describeExplainabilityRequest' when calling describeExplainability");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeExplainabilityResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeExplainability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeExplainabilityExport operation.
     * @callback module:api/DefaultApi~describeExplainabilityExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeExplainabilityExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes an Explainability export created using the <a>CreateExplainabilityExport</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeExplainabilityExportRequest} describeExplainabilityExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeExplainabilityExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeExplainabilityExportResponse}
     */
    describeExplainabilityExport(xAmzTarget, describeExplainabilityExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeExplainabilityExportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeExplainabilityExport");
      }
      // verify the required parameter 'describeExplainabilityExportRequest' is set
      if (describeExplainabilityExportRequest === undefined || describeExplainabilityExportRequest === null) {
        throw new Error("Missing the required parameter 'describeExplainabilityExportRequest' when calling describeExplainabilityExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeExplainabilityExportResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeExplainabilityExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeForecast operation.
     * @callback module:api/DefaultApi~describeForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a forecast created using the <a>CreateForecast</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreateForecast</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>DatasetGroupArn</code> - The dataset group that provided the training data.</p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeForecastRequest} describeForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeForecastResponse}
     */
    describeForecast(xAmzTarget, describeForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeForecast");
      }
      // verify the required parameter 'describeForecastRequest' is set
      if (describeForecastRequest === undefined || describeForecastRequest === null) {
        throw new Error("Missing the required parameter 'describeForecastRequest' when calling describeForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeForecastResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeForecastExportJob operation.
     * @callback module:api/DefaultApi~describeForecastExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeForecastExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a forecast export job created using the <a>CreateForecastExportJob</a> operation.</p> <p>In addition to listing the properties provided by the user in the <code>CreateForecastExportJob</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeForecastExportJobRequest} describeForecastExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeForecastExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeForecastExportJobResponse}
     */
    describeForecastExportJob(xAmzTarget, describeForecastExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeForecastExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeForecastExportJob");
      }
      // verify the required parameter 'describeForecastExportJobRequest' is set
      if (describeForecastExportJobRequest === undefined || describeForecastExportJobRequest === null) {
        throw new Error("Missing the required parameter 'describeForecastExportJobRequest' when calling describeForecastExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeForecastExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeForecastExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeMonitor operation.
     * @callback module:api/DefaultApi~describeMonitorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeMonitorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a monitor resource. In addition to listing the properties provided in the <a>CreateMonitor</a> request, this operation lists the following properties:</p> <ul> <li> <p> <code>Baseline</code> </p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastEvaluationTime</code> </p> </li> <li> <p> <code>LastEvaluationState</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Message</code> </p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeMonitorRequest} describeMonitorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeMonitorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeMonitorResponse}
     */
    describeMonitor(xAmzTarget, describeMonitorRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeMonitorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeMonitor");
      }
      // verify the required parameter 'describeMonitorRequest' is set
      if (describeMonitorRequest === undefined || describeMonitorRequest === null) {
        throw new Error("Missing the required parameter 'describeMonitorRequest' when calling describeMonitor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeMonitorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeMonitor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePredictor operation.
     * @callback module:api/DefaultApi~describePredictorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePredictorResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <note> <p> This operation is only valid for legacy predictors created with CreatePredictor. If you are not using a legacy predictor, use <a>DescribeAutoPredictor</a>.</p> </note> <p>Describes a predictor created using the <a>CreatePredictor</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreatePredictor</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>DatasetImportJobArns</code> - The dataset import jobs used to import training data.</p> </li> <li> <p> <code>AutoMLAlgorithmArns</code> - If AutoML is performed, the algorithms that were evaluated.</p> </li> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePredictorRequest} describePredictorRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePredictorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePredictorResponse}
     */
    describePredictor(xAmzTarget, describePredictorRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePredictorRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePredictor");
      }
      // verify the required parameter 'describePredictorRequest' is set
      if (describePredictorRequest === undefined || describePredictorRequest === null) {
        throw new Error("Missing the required parameter 'describePredictorRequest' when calling describePredictor");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePredictorResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribePredictor', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describePredictorBacktestExportJob operation.
     * @callback module:api/DefaultApi~describePredictorBacktestExportJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribePredictorBacktestExportJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes a predictor backtest export job created using the <a>CreatePredictorBacktestExportJob</a> operation.</p> <p>In addition to listing the properties provided by the user in the <code>CreatePredictorBacktestExportJob</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Status</code> </p> </li> <li> <p> <code>Message</code> (if an error occurred)</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribePredictorBacktestExportJobRequest} describePredictorBacktestExportJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describePredictorBacktestExportJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribePredictorBacktestExportJobResponse}
     */
    describePredictorBacktestExportJob(xAmzTarget, describePredictorBacktestExportJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describePredictorBacktestExportJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describePredictorBacktestExportJob");
      }
      // verify the required parameter 'describePredictorBacktestExportJobRequest' is set
      if (describePredictorBacktestExportJobRequest === undefined || describePredictorBacktestExportJobRequest === null) {
        throw new Error("Missing the required parameter 'describePredictorBacktestExportJobRequest' when calling describePredictorBacktestExportJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribePredictorBacktestExportJobResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribePredictorBacktestExportJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWhatIfAnalysis operation.
     * @callback module:api/DefaultApi~describeWhatIfAnalysisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWhatIfAnalysisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the what-if analysis created using the <a>CreateWhatIfAnalysis</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreateWhatIfAnalysis</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWhatIfAnalysisRequest} describeWhatIfAnalysisRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWhatIfAnalysisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWhatIfAnalysisResponse}
     */
    describeWhatIfAnalysis(xAmzTarget, describeWhatIfAnalysisRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWhatIfAnalysisRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWhatIfAnalysis");
      }
      // verify the required parameter 'describeWhatIfAnalysisRequest' is set
      if (describeWhatIfAnalysisRequest === undefined || describeWhatIfAnalysisRequest === null) {
        throw new Error("Missing the required parameter 'describeWhatIfAnalysisRequest' when calling describeWhatIfAnalysis");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWhatIfAnalysisResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeWhatIfAnalysis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWhatIfForecast operation.
     * @callback module:api/DefaultApi~describeWhatIfForecastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWhatIfForecastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the what-if forecast created using the <a>CreateWhatIfForecast</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreateWhatIfForecast</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWhatIfForecastRequest} describeWhatIfForecastRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWhatIfForecastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWhatIfForecastResponse}
     */
    describeWhatIfForecast(xAmzTarget, describeWhatIfForecastRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWhatIfForecastRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWhatIfForecast");
      }
      // verify the required parameter 'describeWhatIfForecastRequest' is set
      if (describeWhatIfForecastRequest === undefined || describeWhatIfForecastRequest === null) {
        throw new Error("Missing the required parameter 'describeWhatIfForecastRequest' when calling describeWhatIfForecast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWhatIfForecastResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeWhatIfForecast', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeWhatIfForecastExport operation.
     * @callback module:api/DefaultApi~describeWhatIfForecastExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeWhatIfForecastExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Describes the what-if forecast export created using the <a>CreateWhatIfForecastExport</a> operation.</p> <p>In addition to listing the properties provided in the <code>CreateWhatIfForecastExport</code> request, this operation lists the following properties:</p> <ul> <li> <p> <code>CreationTime</code> </p> </li> <li> <p> <code>LastModificationTime</code> </p> </li> <li> <p> <code>Message</code> - If an error occurred, information about the error.</p> </li> <li> <p> <code>Status</code> </p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeWhatIfForecastExportRequest} describeWhatIfForecastExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeWhatIfForecastExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeWhatIfForecastExportResponse}
     */
    describeWhatIfForecastExport(xAmzTarget, describeWhatIfForecastExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeWhatIfForecastExportRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeWhatIfForecastExport");
      }
      // verify the required parameter 'describeWhatIfForecastExportRequest' is set
      if (describeWhatIfForecastExportRequest === undefined || describeWhatIfForecastExportRequest === null) {
        throw new Error("Missing the required parameter 'describeWhatIfForecastExportRequest' when calling describeWhatIfForecastExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeWhatIfForecastExportResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.DescribeWhatIfForecastExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccuracyMetrics operation.
     * @callback module:api/DefaultApi~getAccuracyMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccuracyMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Provides metrics on the accuracy of the models that were trained by the <a>CreatePredictor</a> operation. Use metrics to see how well the model performed and to decide whether to use the predictor to generate a forecast. For more information, see <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/metrics.html\">Predictor Metrics</a>.</p> <p>This operation generates metrics for each backtest window that was evaluated. The number of backtest windows (<code>NumberOfBacktestWindows</code>) is specified using the <a>EvaluationParameters</a> object, which is optionally included in the <code>CreatePredictor</code> request. If <code>NumberOfBacktestWindows</code> isn't specified, the number defaults to one.</p> <p>The parameters of the <code>filling</code> method determine which items contribute to the metrics. If you want all items to contribute, specify <code>zero</code>. If you want only those items that have complete data in the range being evaluated to contribute, specify <code>nan</code>. For more information, see <a>FeaturizationMethod</a>.</p> <note> <p>Before you can get accuracy metrics, the <code>Status</code> of the predictor must be <code>ACTIVE</code>, signifying that training has completed. To get the status, use the <a>DescribePredictor</a> operation.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetAccuracyMetricsRequest} getAccuracyMetricsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAccuracyMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccuracyMetricsResponse}
     */
    getAccuracyMetrics(xAmzTarget, getAccuracyMetricsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getAccuracyMetricsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getAccuracyMetrics");
      }
      // verify the required parameter 'getAccuracyMetricsRequest' is set
      if (getAccuracyMetricsRequest === undefined || getAccuracyMetricsRequest === null) {
        throw new Error("Missing the required parameter 'getAccuracyMetricsRequest' when calling getAccuracyMetrics");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccuracyMetricsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.GetAccuracyMetrics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasetGroups operation.
     * @callback module:api/DefaultApi~listDatasetGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatasetGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of dataset groups created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetGroup.html\">CreateDatasetGroup</a> operation. For each dataset group, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the dataset group ARN with the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html\">DescribeDatasetGroup</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDatasetGroupsRequest} listDatasetGroupsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDatasetGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatasetGroupsResponse}
     */
    listDatasetGroups(xAmzTarget, listDatasetGroupsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDatasetGroupsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDatasetGroups");
      }
      // verify the required parameter 'listDatasetGroupsRequest' is set
      if (listDatasetGroupsRequest === undefined || listDatasetGroupsRequest === null) {
        throw new Error("Missing the required parameter 'listDatasetGroupsRequest' when calling listDatasetGroups");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDatasetGroupsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListDatasetGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasetImportJobs operation.
     * @callback module:api/DefaultApi~listDatasetImportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatasetImportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of dataset import jobs created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\">CreateDatasetImportJob</a> operation. For each import job, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the ARN with the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetImportJob.html\">DescribeDatasetImportJob</a> operation. You can filter the list by providing an array of <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_Filter.html\">Filter</a> objects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDatasetImportJobsRequest} listDatasetImportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDatasetImportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatasetImportJobsResponse}
     */
    listDatasetImportJobs(xAmzTarget, listDatasetImportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDatasetImportJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDatasetImportJobs");
      }
      // verify the required parameter 'listDatasetImportJobsRequest' is set
      if (listDatasetImportJobsRequest === undefined || listDatasetImportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listDatasetImportJobsRequest' when calling listDatasetImportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDatasetImportJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListDatasetImportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDatasets operation.
     * @callback module:api/DefaultApi~listDatasetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDatasetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of datasets created using the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDataset.html\">CreateDataset</a> operation. For each dataset, a summary of its properties, including its Amazon Resource Name (ARN), is returned. To retrieve the complete set of properties, use the ARN with the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDataset.html\">DescribeDataset</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListDatasetsRequest} listDatasetsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDatasetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDatasetsResponse}
     */
    listDatasets(xAmzTarget, listDatasetsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDatasetsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listDatasets");
      }
      // verify the required parameter 'listDatasetsRequest' is set
      if (listDatasetsRequest === undefined || listDatasetsRequest === null) {
        throw new Error("Missing the required parameter 'listDatasetsRequest' when calling listDatasets");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDatasetsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListDatasets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExplainabilities operation.
     * @callback module:api/DefaultApi~listExplainabilitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExplainabilitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of Explainability resources created using the <a>CreateExplainability</a> operation. This operation returns a summary for each Explainability. You can filter the list using an array of <a>Filter</a> objects.</p> <p>To retrieve the complete set of properties for a particular Explainability resource, use the ARN with the <a>DescribeExplainability</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExplainabilitiesRequest} listExplainabilitiesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExplainabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExplainabilitiesResponse}
     */
    listExplainabilities(xAmzTarget, listExplainabilitiesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExplainabilitiesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExplainabilities");
      }
      // verify the required parameter 'listExplainabilitiesRequest' is set
      if (listExplainabilitiesRequest === undefined || listExplainabilitiesRequest === null) {
        throw new Error("Missing the required parameter 'listExplainabilitiesRequest' when calling listExplainabilities");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExplainabilitiesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListExplainabilities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExplainabilityExports operation.
     * @callback module:api/DefaultApi~listExplainabilityExportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExplainabilityExportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of Explainability exports created using the <a>CreateExplainabilityExport</a> operation. This operation returns a summary for each Explainability export. You can filter the list using an array of <a>Filter</a> objects.</p> <p>To retrieve the complete set of properties for a particular Explainability export, use the ARN with the <a>DescribeExplainability</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListExplainabilityExportsRequest} listExplainabilityExportsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExplainabilityExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExplainabilityExportsResponse}
     */
    listExplainabilityExports(xAmzTarget, listExplainabilityExportsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExplainabilityExportsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listExplainabilityExports");
      }
      // verify the required parameter 'listExplainabilityExportsRequest' is set
      if (listExplainabilityExportsRequest === undefined || listExplainabilityExportsRequest === null) {
        throw new Error("Missing the required parameter 'listExplainabilityExportsRequest' when calling listExplainabilityExports");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExplainabilityExportsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListExplainabilityExports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listForecastExportJobs operation.
     * @callback module:api/DefaultApi~listForecastExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListForecastExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of forecast export jobs created using the <a>CreateForecastExportJob</a> operation. For each forecast export job, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the complete set of properties, use the ARN with the <a>DescribeForecastExportJob</a> operation. You can filter the list using an array of <a>Filter</a> objects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListForecastExportJobsRequest} listForecastExportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listForecastExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListForecastExportJobsResponse}
     */
    listForecastExportJobs(xAmzTarget, listForecastExportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listForecastExportJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listForecastExportJobs");
      }
      // verify the required parameter 'listForecastExportJobsRequest' is set
      if (listForecastExportJobsRequest === undefined || listForecastExportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listForecastExportJobsRequest' when calling listForecastExportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListForecastExportJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListForecastExportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listForecasts operation.
     * @callback module:api/DefaultApi~listForecastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListForecastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of forecasts created using the <a>CreateForecast</a> operation. For each forecast, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). To retrieve the complete set of properties, specify the ARN with the <a>DescribeForecast</a> operation. You can filter the list using an array of <a>Filter</a> objects.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListForecastsRequest} listForecastsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listForecastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListForecastsResponse}
     */
    listForecasts(xAmzTarget, listForecastsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listForecastsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listForecasts");
      }
      // verify the required parameter 'listForecastsRequest' is set
      if (listForecastsRequest === undefined || listForecastsRequest === null) {
        throw new Error("Missing the required parameter 'listForecastsRequest' when calling listForecasts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListForecastsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListForecasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitorEvaluations operation.
     * @callback module:api/DefaultApi~listMonitorEvaluationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitorEvaluationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of the monitoring evaluation results and predictor events collected by the monitor resource during different windows of time.</p> <p>For information about monitoring see <a>predictor-monitoring</a>. For more information about retrieving monitoring results see <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/predictor-monitoring-results.html\">Viewing Monitoring Results</a>.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMonitorEvaluationsRequest} listMonitorEvaluationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitorEvaluationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitorEvaluationsResponse}
     */
    listMonitorEvaluations(xAmzTarget, listMonitorEvaluationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitorEvaluationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMonitorEvaluations");
      }
      // verify the required parameter 'listMonitorEvaluationsRequest' is set
      if (listMonitorEvaluationsRequest === undefined || listMonitorEvaluationsRequest === null) {
        throw new Error("Missing the required parameter 'listMonitorEvaluationsRequest' when calling listMonitorEvaluations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitorEvaluationsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListMonitorEvaluations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitors operation.
     * @callback module:api/DefaultApi~listMonitorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of monitors created with the <a>CreateMonitor</a> operation and <a>CreateAutoPredictor</a> operation. For each monitor resource, this operation returns of a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve a complete set of properties of a monitor resource by specify the monitor's ARN in the <a>DescribeMonitor</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListMonitorsRequest} listMonitorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listMonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitorsResponse}
     */
    listMonitors(xAmzTarget, listMonitorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listMonitorsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listMonitors");
      }
      // verify the required parameter 'listMonitorsRequest' is set
      if (listMonitorsRequest === undefined || listMonitorsRequest === null) {
        throw new Error("Missing the required parameter 'listMonitorsRequest' when calling listMonitors");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListMonitorsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListMonitors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPredictorBacktestExportJobs operation.
     * @callback module:api/DefaultApi~listPredictorBacktestExportJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPredictorBacktestExportJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of predictor backtest export jobs created using the <a>CreatePredictorBacktestExportJob</a> operation. This operation returns a summary for each backtest export job. You can filter the list using an array of <a>Filter</a> objects.</p> <p>To retrieve the complete set of properties for a particular backtest export job, use the ARN with the <a>DescribePredictorBacktestExportJob</a> operation.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPredictorBacktestExportJobsRequest} listPredictorBacktestExportJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPredictorBacktestExportJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPredictorBacktestExportJobsResponse}
     */
    listPredictorBacktestExportJobs(xAmzTarget, listPredictorBacktestExportJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPredictorBacktestExportJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPredictorBacktestExportJobs");
      }
      // verify the required parameter 'listPredictorBacktestExportJobsRequest' is set
      if (listPredictorBacktestExportJobsRequest === undefined || listPredictorBacktestExportJobsRequest === null) {
        throw new Error("Missing the required parameter 'listPredictorBacktestExportJobsRequest' when calling listPredictorBacktestExportJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPredictorBacktestExportJobsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListPredictorBacktestExportJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPredictors operation.
     * @callback module:api/DefaultApi~listPredictorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPredictorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of predictors created using the <a>CreateAutoPredictor</a> or <a>CreatePredictor</a> operations. For each predictor, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). </p> <p>You can retrieve the complete set of properties by using the ARN with the <a>DescribeAutoPredictor</a> and <a>DescribePredictor</a> operations. You can filter the list using an array of <a>Filter</a> objects.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPredictorsRequest} listPredictorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPredictorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPredictorsResponse}
     */
    listPredictors(xAmzTarget, listPredictorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPredictorsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPredictors");
      }
      // verify the required parameter 'listPredictorsRequest' is set
      if (listPredictorsRequest === undefined || listPredictorsRequest === null) {
        throw new Error("Missing the required parameter 'listPredictorsRequest' when calling listPredictors");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPredictorsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListPredictors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for an Amazon Forecast resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListTagsForResourceRequest} listTagsForResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(xAmzTarget, listTagsForResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTagsForResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listTagsForResource");
      }
      // verify the required parameter 'listTagsForResourceRequest' is set
      if (listTagsForResourceRequest === undefined || listTagsForResourceRequest === null) {
        throw new Error("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListTagsForResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWhatIfAnalyses operation.
     * @callback module:api/DefaultApi~listWhatIfAnalysesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWhatIfAnalysesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of what-if analyses created using the <a>CreateWhatIfAnalysis</a> operation. For each what-if analysis, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the what-if analysis ARN with the <a>DescribeWhatIfAnalysis</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWhatIfAnalysesRequest} listWhatIfAnalysesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWhatIfAnalysesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWhatIfAnalysesResponse}
     */
    listWhatIfAnalyses(xAmzTarget, listWhatIfAnalysesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWhatIfAnalysesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWhatIfAnalyses");
      }
      // verify the required parameter 'listWhatIfAnalysesRequest' is set
      if (listWhatIfAnalysesRequest === undefined || listWhatIfAnalysesRequest === null) {
        throw new Error("Missing the required parameter 'listWhatIfAnalysesRequest' when calling listWhatIfAnalyses");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWhatIfAnalysesResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListWhatIfAnalyses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWhatIfForecastExports operation.
     * @callback module:api/DefaultApi~listWhatIfForecastExportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWhatIfForecastExportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of what-if forecast exports created using the <a>CreateWhatIfForecastExport</a> operation. For each what-if forecast export, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the what-if forecast export ARN with the <a>DescribeWhatIfForecastExport</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWhatIfForecastExportsRequest} listWhatIfForecastExportsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWhatIfForecastExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWhatIfForecastExportsResponse}
     */
    listWhatIfForecastExports(xAmzTarget, listWhatIfForecastExportsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWhatIfForecastExportsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWhatIfForecastExports");
      }
      // verify the required parameter 'listWhatIfForecastExportsRequest' is set
      if (listWhatIfForecastExportsRequest === undefined || listWhatIfForecastExportsRequest === null) {
        throw new Error("Missing the required parameter 'listWhatIfForecastExportsRequest' when calling listWhatIfForecastExports");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWhatIfForecastExportsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListWhatIfForecastExports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWhatIfForecasts operation.
     * @callback module:api/DefaultApi~listWhatIfForecastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWhatIfForecastsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of what-if forecasts created using the <a>CreateWhatIfForecast</a> operation. For each what-if forecast, this operation returns a summary of its properties, including its Amazon Resource Name (ARN). You can retrieve the complete set of properties by using the what-if forecast ARN with the <a>DescribeWhatIfForecast</a> operation.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListWhatIfForecastsRequest} listWhatIfForecastsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWhatIfForecastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWhatIfForecastsResponse}
     */
    listWhatIfForecasts(xAmzTarget, listWhatIfForecastsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWhatIfForecastsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listWhatIfForecasts");
      }
      // verify the required parameter 'listWhatIfForecastsRequest' is set
      if (listWhatIfForecastsRequest === undefined || listWhatIfForecastsRequest === null) {
        throw new Error("Missing the required parameter 'listWhatIfForecastsRequest' when calling listWhatIfForecasts");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWhatIfForecastsResponse;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ListWhatIfForecasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeResource operation.
     * @callback module:api/DefaultApi~resumeResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes a stopped monitor resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ResumeResourceRequest} resumeResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resumeResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resumeResource(xAmzTarget, resumeResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = resumeResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling resumeResource");
      }
      // verify the required parameter 'resumeResourceRequest' is set
      if (resumeResourceRequest === undefined || resumeResourceRequest === null) {
        throw new Error("Missing the required parameter 'resumeResourceRequest' when calling resumeResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.ResumeResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopResource operation.
     * @callback module:api/DefaultApi~stopResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Stops a resource.</p> <p>The resource undergoes the following states: <code>CREATE_STOPPING</code> and <code>CREATE_STOPPED</code>. You cannot resume a resource once it has been stopped.</p> <p>This operation can be applied to the following resources (and their corresponding child resources):</p> <ul> <li> <p>Dataset Import Job</p> </li> <li> <p>Predictor Job</p> </li> <li> <p>Forecast Job</p> </li> <li> <p>Forecast Export Job</p> </li> <li> <p>Predictor Backtest Export Job</p> </li> <li> <p>Explainability Job</p> </li> <li> <p>Explainability Export Job</p> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/StopResourceRequest} stopResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopResource(xAmzTarget, stopResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling stopResource");
      }
      // verify the required parameter 'stopResourceRequest' is set
      if (stopResourceRequest === undefined || stopResourceRequest === null) {
        throw new Error("Missing the required parameter 'stopResourceRequest' when calling stopResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.StopResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates the specified tags to a resource with the specified <code>resourceArn</code>. If existing tags on a resource are not specified in the request parameters, they are not changed. When a resource is deleted, the tags associated with that resource are also deleted.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(xAmzTarget, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.TagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified tags from a resource.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    untagResource(xAmzTarget, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.UntagResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDatasetGroup operation.
     * @callback module:api/DefaultApi~updateDatasetGroupCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Replaces the datasets in a dataset group with the specified datasets.</p> <note> <p>The <code>Status</code> of the dataset group must be <code>ACTIVE</code> before you can use the dataset group to create a predictor. Use the <a href=\"https://docs.aws.amazon.com/forecast/latest/dg/API_DescribeDatasetGroup.html\">DescribeDatasetGroup</a> operation to get the status.</p> </note>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateDatasetGroupRequest} updateDatasetGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDatasetGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDatasetGroup(xAmzTarget, updateDatasetGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDatasetGroupRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateDatasetGroup");
      }
      // verify the required parameter 'updateDatasetGroupRequest' is set
      if (updateDatasetGroupRequest === undefined || updateDatasetGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateDatasetGroupRequest' when calling updateDatasetGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AmazonForecast.UpdateDatasetGroup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
