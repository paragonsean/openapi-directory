/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDatasetImportJobRequestDataSource from './CreateDatasetImportJobRequestDataSource';
import ImportMode from './ImportMode';

/**
 * The CreateDatasetImportJobRequest model module.
 * @module model/CreateDatasetImportJobRequest
 * @version 2018-06-26
 */
class CreateDatasetImportJobRequest {
    /**
     * Constructs a new <code>CreateDatasetImportJobRequest</code>.
     * @alias module:model/CreateDatasetImportJobRequest
     * @param datasetImportJobName {String} 
     * @param datasetArn {String} 
     * @param dataSource {module:model/CreateDatasetImportJobRequestDataSource} 
     */
    constructor(datasetImportJobName, datasetArn, dataSource) { 
        
        CreateDatasetImportJobRequest.initialize(this, datasetImportJobName, datasetArn, dataSource);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetImportJobName, datasetArn, dataSource) { 
        obj['DatasetImportJobName'] = datasetImportJobName;
        obj['DatasetArn'] = datasetArn;
        obj['DataSource'] = dataSource;
    }

    /**
     * Constructs a <code>CreateDatasetImportJobRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDatasetImportJobRequest} obj Optional instance to populate.
     * @return {module:model/CreateDatasetImportJobRequest} The populated <code>CreateDatasetImportJobRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDatasetImportJobRequest();

            if (data.hasOwnProperty('DatasetImportJobName')) {
                obj['DatasetImportJobName'] = ApiClient.convertToType(data['DatasetImportJobName'], 'String');
            }
            if (data.hasOwnProperty('DatasetArn')) {
                obj['DatasetArn'] = ApiClient.convertToType(data['DatasetArn'], 'String');
            }
            if (data.hasOwnProperty('DataSource')) {
                obj['DataSource'] = CreateDatasetImportJobRequestDataSource.constructFromObject(data['DataSource']);
            }
            if (data.hasOwnProperty('TimestampFormat')) {
                obj['TimestampFormat'] = ApiClient.convertToType(data['TimestampFormat'], 'String');
            }
            if (data.hasOwnProperty('TimeZone')) {
                obj['TimeZone'] = ApiClient.convertToType(data['TimeZone'], 'String');
            }
            if (data.hasOwnProperty('UseGeolocationForTimeZone')) {
                obj['UseGeolocationForTimeZone'] = ApiClient.convertToType(data['UseGeolocationForTimeZone'], 'Boolean');
            }
            if (data.hasOwnProperty('GeolocationFormat')) {
                obj['GeolocationFormat'] = ApiClient.convertToType(data['GeolocationFormat'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('ImportMode')) {
                obj['ImportMode'] = ApiClient.convertToType(data['ImportMode'], ImportMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDatasetImportJobRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDatasetImportJobRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDatasetImportJobRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatasetImportJobName`
        if (data['DatasetImportJobName']) { // data not null
          String.validateJSON(data['DatasetImportJobName']);
        }
        // validate the optional field `DatasetArn`
        if (data['DatasetArn']) { // data not null
          String.validateJSON(data['DatasetArn']);
        }
        // validate the optional field `DataSource`
        if (data['DataSource']) { // data not null
          CreateDatasetImportJobRequestDataSource.validateJSON(data['DataSource']);
        }
        // validate the optional field `TimestampFormat`
        if (data['TimestampFormat']) { // data not null
          String.validateJSON(data['TimestampFormat']);
        }
        // validate the optional field `TimeZone`
        if (data['TimeZone']) { // data not null
          String.validateJSON(data['TimeZone']);
        }
        // validate the optional field `UseGeolocationForTimeZone`
        if (data['UseGeolocationForTimeZone']) { // data not null
          Boolean.validateJSON(data['UseGeolocationForTimeZone']);
        }
        // validate the optional field `GeolocationFormat`
        if (data['GeolocationFormat']) { // data not null
          String.validateJSON(data['GeolocationFormat']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          String.validateJSON(data['Format']);
        }
        // validate the optional field `ImportMode`
        if (data['ImportMode']) { // data not null
          ImportMode.validateJSON(data['ImportMode']);
        }

        return true;
    }


}

CreateDatasetImportJobRequest.RequiredProperties = ["DatasetImportJobName", "DatasetArn", "DataSource"];

/**
 * @member {String} DatasetImportJobName
 */
CreateDatasetImportJobRequest.prototype['DatasetImportJobName'] = undefined;

/**
 * @member {String} DatasetArn
 */
CreateDatasetImportJobRequest.prototype['DatasetArn'] = undefined;

/**
 * @member {module:model/CreateDatasetImportJobRequestDataSource} DataSource
 */
CreateDatasetImportJobRequest.prototype['DataSource'] = undefined;

/**
 * @member {String} TimestampFormat
 */
CreateDatasetImportJobRequest.prototype['TimestampFormat'] = undefined;

/**
 * @member {String} TimeZone
 */
CreateDatasetImportJobRequest.prototype['TimeZone'] = undefined;

/**
 * @member {Boolean} UseGeolocationForTimeZone
 */
CreateDatasetImportJobRequest.prototype['UseGeolocationForTimeZone'] = undefined;

/**
 * @member {String} GeolocationFormat
 */
CreateDatasetImportJobRequest.prototype['GeolocationFormat'] = undefined;

/**
 * @member {Array} Tags
 */
CreateDatasetImportJobRequest.prototype['Tags'] = undefined;

/**
 * @member {String} Format
 */
CreateDatasetImportJobRequest.prototype['Format'] = undefined;

/**
 * @member {module:model/ImportMode} ImportMode
 */
CreateDatasetImportJobRequest.prototype['ImportMode'] = undefined;






export default CreateDatasetImportJobRequest;

