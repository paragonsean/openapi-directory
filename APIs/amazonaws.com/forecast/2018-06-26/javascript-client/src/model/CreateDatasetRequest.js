/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDatasetRequestEncryptionConfig from './CreateDatasetRequestEncryptionConfig';
import CreateDatasetRequestSchema from './CreateDatasetRequestSchema';
import DatasetType from './DatasetType';
import Domain from './Domain';

/**
 * The CreateDatasetRequest model module.
 * @module model/CreateDatasetRequest
 * @version 2018-06-26
 */
class CreateDatasetRequest {
    /**
     * Constructs a new <code>CreateDatasetRequest</code>.
     * @alias module:model/CreateDatasetRequest
     * @param datasetName {String} 
     * @param domain {module:model/Domain} 
     * @param datasetType {module:model/DatasetType} 
     * @param schema {module:model/CreateDatasetRequestSchema} 
     */
    constructor(datasetName, domain, datasetType, schema) { 
        
        CreateDatasetRequest.initialize(this, datasetName, domain, datasetType, schema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetName, domain, datasetType, schema) { 
        obj['DatasetName'] = datasetName;
        obj['Domain'] = domain;
        obj['DatasetType'] = datasetType;
        obj['Schema'] = schema;
    }

    /**
     * Constructs a <code>CreateDatasetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDatasetRequest} obj Optional instance to populate.
     * @return {module:model/CreateDatasetRequest} The populated <code>CreateDatasetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDatasetRequest();

            if (data.hasOwnProperty('DatasetName')) {
                obj['DatasetName'] = ApiClient.convertToType(data['DatasetName'], 'String');
            }
            if (data.hasOwnProperty('Domain')) {
                obj['Domain'] = ApiClient.convertToType(data['Domain'], Domain);
            }
            if (data.hasOwnProperty('DatasetType')) {
                obj['DatasetType'] = ApiClient.convertToType(data['DatasetType'], DatasetType);
            }
            if (data.hasOwnProperty('DataFrequency')) {
                obj['DataFrequency'] = ApiClient.convertToType(data['DataFrequency'], 'String');
            }
            if (data.hasOwnProperty('Schema')) {
                obj['Schema'] = CreateDatasetRequestSchema.constructFromObject(data['Schema']);
            }
            if (data.hasOwnProperty('EncryptionConfig')) {
                obj['EncryptionConfig'] = CreateDatasetRequestEncryptionConfig.constructFromObject(data['EncryptionConfig']);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDatasetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDatasetRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDatasetRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatasetName`
        if (data['DatasetName']) { // data not null
          String.validateJSON(data['DatasetName']);
        }
        // validate the optional field `Domain`
        if (data['Domain']) { // data not null
          Domain.validateJSON(data['Domain']);
        }
        // validate the optional field `DatasetType`
        if (data['DatasetType']) { // data not null
          DatasetType.validateJSON(data['DatasetType']);
        }
        // validate the optional field `DataFrequency`
        if (data['DataFrequency']) { // data not null
          String.validateJSON(data['DataFrequency']);
        }
        // validate the optional field `Schema`
        if (data['Schema']) { // data not null
          CreateDatasetRequestSchema.validateJSON(data['Schema']);
        }
        // validate the optional field `EncryptionConfig`
        if (data['EncryptionConfig']) { // data not null
          CreateDatasetRequestEncryptionConfig.validateJSON(data['EncryptionConfig']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }

        return true;
    }


}

CreateDatasetRequest.RequiredProperties = ["DatasetName", "Domain", "DatasetType", "Schema"];

/**
 * @member {String} DatasetName
 */
CreateDatasetRequest.prototype['DatasetName'] = undefined;

/**
 * @member {module:model/Domain} Domain
 */
CreateDatasetRequest.prototype['Domain'] = undefined;

/**
 * @member {module:model/DatasetType} DatasetType
 */
CreateDatasetRequest.prototype['DatasetType'] = undefined;

/**
 * @member {String} DataFrequency
 */
CreateDatasetRequest.prototype['DataFrequency'] = undefined;

/**
 * @member {module:model/CreateDatasetRequestSchema} Schema
 */
CreateDatasetRequest.prototype['Schema'] = undefined;

/**
 * @member {module:model/CreateDatasetRequestEncryptionConfig} EncryptionConfig
 */
CreateDatasetRequest.prototype['EncryptionConfig'] = undefined;

/**
 * @member {Array} Tags
 */
CreateDatasetRequest.prototype['Tags'] = undefined;






export default CreateDatasetRequest;

