/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttributeConfig model module.
 * @module model/AttributeConfig
 * @version 2018-06-26
 */
class AttributeConfig {
    /**
     * Constructs a new <code>AttributeConfig</code>.
     * &lt;p&gt;Provides information about the method used to transform attributes.&lt;/p&gt; &lt;p&gt;The following is an example using the RETAIL domain:&lt;/p&gt; &lt;p&gt; &lt;code&gt;{&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;AttributeName\&quot;: \&quot;demand\&quot;,&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;\&quot;Transformations\&quot;: {\&quot;aggregation\&quot;: \&quot;sum\&quot;, \&quot;middlefill\&quot;: \&quot;zero\&quot;, \&quot;backfill\&quot;: \&quot;zero\&quot;}&lt;/code&gt; &lt;/p&gt; &lt;p&gt; &lt;code&gt;}&lt;/code&gt; &lt;/p&gt;
     * @alias module:model/AttributeConfig
     * @param attributeName {String} 
     * @param transformations {Object} 
     */
    constructor(attributeName, transformations) { 
        
        AttributeConfig.initialize(this, attributeName, transformations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeName, transformations) { 
        obj['AttributeName'] = attributeName;
        obj['Transformations'] = transformations;
    }

    /**
     * Constructs a <code>AttributeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeConfig} obj Optional instance to populate.
     * @return {module:model/AttributeConfig} The populated <code>AttributeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeConfig();

            if (data.hasOwnProperty('AttributeName')) {
                obj['AttributeName'] = ApiClient.convertToType(data['AttributeName'], 'String');
            }
            if (data.hasOwnProperty('Transformations')) {
                obj['Transformations'] = ApiClient.convertToType(data['Transformations'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AttributeConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AttributeName`
        if (data['AttributeName']) { // data not null
          String.validateJSON(data['AttributeName']);
        }
        // validate the optional field `Transformations`
        if (data['Transformations']) { // data not null
          Object.validateJSON(data['Transformations']);
        }

        return true;
    }


}

AttributeConfig.RequiredProperties = ["AttributeName", "Transformations"];

/**
 * @member {String} AttributeName
 */
AttributeConfig.prototype['AttributeName'] = undefined;

/**
 * @member {Object} Transformations
 */
AttributeConfig.prototype['Transformations'] = undefined;






export default AttributeConfig;

