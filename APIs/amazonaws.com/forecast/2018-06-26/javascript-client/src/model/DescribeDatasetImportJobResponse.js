/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DescribeDatasetImportJobResponseDataSource from './DescribeDatasetImportJobResponseDataSource';
import ImportMode from './ImportMode';

/**
 * The DescribeDatasetImportJobResponse model module.
 * @module model/DescribeDatasetImportJobResponse
 * @version 2018-06-26
 */
class DescribeDatasetImportJobResponse {
    /**
     * Constructs a new <code>DescribeDatasetImportJobResponse</code>.
     * @alias module:model/DescribeDatasetImportJobResponse
     */
    constructor() { 
        
        DescribeDatasetImportJobResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeDatasetImportJobResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDatasetImportJobResponse} obj Optional instance to populate.
     * @return {module:model/DescribeDatasetImportJobResponse} The populated <code>DescribeDatasetImportJobResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDatasetImportJobResponse();

            if (data.hasOwnProperty('DatasetImportJobName')) {
                obj['DatasetImportJobName'] = ApiClient.convertToType(data['DatasetImportJobName'], 'String');
            }
            if (data.hasOwnProperty('DatasetImportJobArn')) {
                obj['DatasetImportJobArn'] = ApiClient.convertToType(data['DatasetImportJobArn'], 'String');
            }
            if (data.hasOwnProperty('DatasetArn')) {
                obj['DatasetArn'] = ApiClient.convertToType(data['DatasetArn'], 'String');
            }
            if (data.hasOwnProperty('TimestampFormat')) {
                obj['TimestampFormat'] = ApiClient.convertToType(data['TimestampFormat'], 'String');
            }
            if (data.hasOwnProperty('TimeZone')) {
                obj['TimeZone'] = ApiClient.convertToType(data['TimeZone'], 'String');
            }
            if (data.hasOwnProperty('UseGeolocationForTimeZone')) {
                obj['UseGeolocationForTimeZone'] = ApiClient.convertToType(data['UseGeolocationForTimeZone'], 'Boolean');
            }
            if (data.hasOwnProperty('GeolocationFormat')) {
                obj['GeolocationFormat'] = ApiClient.convertToType(data['GeolocationFormat'], 'String');
            }
            if (data.hasOwnProperty('DataSource')) {
                obj['DataSource'] = DescribeDatasetImportJobResponseDataSource.constructFromObject(data['DataSource']);
            }
            if (data.hasOwnProperty('EstimatedTimeRemainingInMinutes')) {
                obj['EstimatedTimeRemainingInMinutes'] = ApiClient.convertToType(data['EstimatedTimeRemainingInMinutes'], 'Number');
            }
            if (data.hasOwnProperty('FieldStatistics')) {
                obj['FieldStatistics'] = ApiClient.convertToType(data['FieldStatistics'], Object);
            }
            if (data.hasOwnProperty('DataSize')) {
                obj['DataSize'] = ApiClient.convertToType(data['DataSize'], 'Number');
            }
            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('Message')) {
                obj['Message'] = ApiClient.convertToType(data['Message'], 'String');
            }
            if (data.hasOwnProperty('CreationTime')) {
                obj['CreationTime'] = ApiClient.convertToType(data['CreationTime'], 'Date');
            }
            if (data.hasOwnProperty('LastModificationTime')) {
                obj['LastModificationTime'] = ApiClient.convertToType(data['LastModificationTime'], 'Date');
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('ImportMode')) {
                obj['ImportMode'] = ApiClient.convertToType(data['ImportMode'], ImportMode);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDatasetImportJobResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDatasetImportJobResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DatasetImportJobName`
        if (data['DatasetImportJobName']) { // data not null
          String.validateJSON(data['DatasetImportJobName']);
        }
        // validate the optional field `DatasetImportJobArn`
        if (data['DatasetImportJobArn']) { // data not null
          String.validateJSON(data['DatasetImportJobArn']);
        }
        // validate the optional field `DatasetArn`
        if (data['DatasetArn']) { // data not null
          String.validateJSON(data['DatasetArn']);
        }
        // validate the optional field `TimestampFormat`
        if (data['TimestampFormat']) { // data not null
          String.validateJSON(data['TimestampFormat']);
        }
        // validate the optional field `TimeZone`
        if (data['TimeZone']) { // data not null
          String.validateJSON(data['TimeZone']);
        }
        // validate the optional field `UseGeolocationForTimeZone`
        if (data['UseGeolocationForTimeZone']) { // data not null
          Boolean.validateJSON(data['UseGeolocationForTimeZone']);
        }
        // validate the optional field `GeolocationFormat`
        if (data['GeolocationFormat']) { // data not null
          String.validateJSON(data['GeolocationFormat']);
        }
        // validate the optional field `DataSource`
        if (data['DataSource']) { // data not null
          DescribeDatasetImportJobResponseDataSource.validateJSON(data['DataSource']);
        }
        // validate the optional field `EstimatedTimeRemainingInMinutes`
        if (data['EstimatedTimeRemainingInMinutes']) { // data not null
          Number.validateJSON(data['EstimatedTimeRemainingInMinutes']);
        }
        // validate the optional field `FieldStatistics`
        if (data['FieldStatistics']) { // data not null
          Object.validateJSON(data['FieldStatistics']);
        }
        // validate the optional field `DataSize`
        if (data['DataSize']) { // data not null
          Number.validateJSON(data['DataSize']);
        }
        // validate the optional field `Status`
        if (data['Status']) { // data not null
          String.validateJSON(data['Status']);
        }
        // validate the optional field `Message`
        if (data['Message']) { // data not null
          String.validateJSON(data['Message']);
        }
        // validate the optional field `CreationTime`
        if (data['CreationTime']) { // data not null
          Date.validateJSON(data['CreationTime']);
        }
        // validate the optional field `LastModificationTime`
        if (data['LastModificationTime']) { // data not null
          Date.validateJSON(data['LastModificationTime']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          String.validateJSON(data['Format']);
        }
        // validate the optional field `ImportMode`
        if (data['ImportMode']) { // data not null
          ImportMode.validateJSON(data['ImportMode']);
        }

        return true;
    }


}



/**
 * @member {String} DatasetImportJobName
 */
DescribeDatasetImportJobResponse.prototype['DatasetImportJobName'] = undefined;

/**
 * @member {String} DatasetImportJobArn
 */
DescribeDatasetImportJobResponse.prototype['DatasetImportJobArn'] = undefined;

/**
 * @member {String} DatasetArn
 */
DescribeDatasetImportJobResponse.prototype['DatasetArn'] = undefined;

/**
 * @member {String} TimestampFormat
 */
DescribeDatasetImportJobResponse.prototype['TimestampFormat'] = undefined;

/**
 * @member {String} TimeZone
 */
DescribeDatasetImportJobResponse.prototype['TimeZone'] = undefined;

/**
 * @member {Boolean} UseGeolocationForTimeZone
 */
DescribeDatasetImportJobResponse.prototype['UseGeolocationForTimeZone'] = undefined;

/**
 * @member {String} GeolocationFormat
 */
DescribeDatasetImportJobResponse.prototype['GeolocationFormat'] = undefined;

/**
 * @member {module:model/DescribeDatasetImportJobResponseDataSource} DataSource
 */
DescribeDatasetImportJobResponse.prototype['DataSource'] = undefined;

/**
 * @member {Number} EstimatedTimeRemainingInMinutes
 */
DescribeDatasetImportJobResponse.prototype['EstimatedTimeRemainingInMinutes'] = undefined;

/**
 * @member {Object} FieldStatistics
 */
DescribeDatasetImportJobResponse.prototype['FieldStatistics'] = undefined;

/**
 * @member {Number} DataSize
 */
DescribeDatasetImportJobResponse.prototype['DataSize'] = undefined;

/**
 * @member {String} Status
 */
DescribeDatasetImportJobResponse.prototype['Status'] = undefined;

/**
 * @member {String} Message
 */
DescribeDatasetImportJobResponse.prototype['Message'] = undefined;

/**
 * @member {Date} CreationTime
 */
DescribeDatasetImportJobResponse.prototype['CreationTime'] = undefined;

/**
 * @member {Date} LastModificationTime
 */
DescribeDatasetImportJobResponse.prototype['LastModificationTime'] = undefined;

/**
 * @member {String} Format
 */
DescribeDatasetImportJobResponse.prototype['Format'] = undefined;

/**
 * @member {module:model/ImportMode} ImportMode
 */
DescribeDatasetImportJobResponse.prototype['ImportMode'] = undefined;






export default DescribeDatasetImportJobResponse;

