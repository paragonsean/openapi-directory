/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DayOfWeek from './DayOfWeek';
import Month from './Month';

/**
 * The TimeAlignmentBoundary model module.
 * @module model/TimeAlignmentBoundary
 * @version 2018-06-26
 */
class TimeAlignmentBoundary {
    /**
     * Constructs a new <code>TimeAlignmentBoundary</code>.
     * &lt;p&gt;The time boundary Forecast uses to align and aggregate your data to match your forecast frequency. Provide the unit of time and the time boundary as a key value pair. If you don&#39;t provide a time boundary, Forecast uses a set of &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#default-time-boundaries\&quot;&gt;Default Time Boundaries&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;For more information about aggregation, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html\&quot;&gt;Data Aggregation for Different Forecast Frequencies&lt;/a&gt;. For more information setting a custom time boundary, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/data-aggregation.html#specifying-time-boundary\&quot;&gt;Specifying a Time Boundary&lt;/a&gt;. &lt;/p&gt;
     * @alias module:model/TimeAlignmentBoundary
     */
    constructor() { 
        
        TimeAlignmentBoundary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeAlignmentBoundary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeAlignmentBoundary} obj Optional instance to populate.
     * @return {module:model/TimeAlignmentBoundary} The populated <code>TimeAlignmentBoundary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeAlignmentBoundary();

            if (data.hasOwnProperty('Month')) {
                obj['Month'] = ApiClient.convertToType(data['Month'], Month);
            }
            if (data.hasOwnProperty('DayOfMonth')) {
                obj['DayOfMonth'] = ApiClient.convertToType(data['DayOfMonth'], 'Number');
            }
            if (data.hasOwnProperty('DayOfWeek')) {
                obj['DayOfWeek'] = ApiClient.convertToType(data['DayOfWeek'], DayOfWeek);
            }
            if (data.hasOwnProperty('Hour')) {
                obj['Hour'] = ApiClient.convertToType(data['Hour'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeAlignmentBoundary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeAlignmentBoundary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Month`
        if (data['Month']) { // data not null
          Month.validateJSON(data['Month']);
        }
        // validate the optional field `DayOfMonth`
        if (data['DayOfMonth']) { // data not null
          Number.validateJSON(data['DayOfMonth']);
        }
        // validate the optional field `DayOfWeek`
        if (data['DayOfWeek']) { // data not null
          DayOfWeek.validateJSON(data['DayOfWeek']);
        }
        // validate the optional field `Hour`
        if (data['Hour']) { // data not null
          Number.validateJSON(data['Hour']);
        }

        return true;
    }


}



/**
 * @member {module:model/Month} Month
 */
TimeAlignmentBoundary.prototype['Month'] = undefined;

/**
 * @member {Number} DayOfMonth
 */
TimeAlignmentBoundary.prototype['DayOfMonth'] = undefined;

/**
 * @member {module:model/DayOfWeek} DayOfWeek
 */
TimeAlignmentBoundary.prototype['DayOfWeek'] = undefined;

/**
 * @member {Number} Hour
 */
TimeAlignmentBoundary.prototype['Hour'] = undefined;






export default TimeAlignmentBoundary;

