/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SupplementaryFeature model module.
 * @module model/SupplementaryFeature
 * @version 2018-06-26
 */
class SupplementaryFeature {
    /**
     * Constructs a new <code>SupplementaryFeature</code>.
     * &lt;note&gt; &lt;p&gt;This object belongs to the &lt;a&gt;CreatePredictor&lt;/a&gt; operation. If you created your predictor with &lt;a&gt;CreateAutoPredictor&lt;/a&gt;, see &lt;a&gt;AdditionalDataset&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Describes a supplementary feature of a dataset group. This object is part of the &lt;a&gt;InputDataConfig&lt;/a&gt; object. Forecast supports the Weather Index and Holidays built-in featurizations.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Weather Index&lt;/b&gt; &lt;/p&gt; &lt;p&gt;The Amazon Forecast Weather Index is a built-in featurization that incorporates historical and projected weather information into your model. The Weather Index supplements your datasets with over two years of historical weather data and up to 14 days of projected weather data. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/weather.html\&quot;&gt;Amazon Forecast Weather Index&lt;/a&gt;.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Holidays&lt;/b&gt; &lt;/p&gt; &lt;p&gt;Holidays is a built-in featurization that incorporates a feature-engineered dataset of national holiday information into your model. It provides native support for the holiday calendars of 66 countries. To view the holiday calendars, refer to the &lt;a href&#x3D;\&quot;http://jollyday.sourceforge.net/data.html\&quot;&gt;Jollyday&lt;/a&gt; library. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/holidays.html\&quot;&gt;Holidays Featurization&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/SupplementaryFeature
     * @param name {String} 
     * @param value {String} 
     */
    constructor(name, value) { 
        
        SupplementaryFeature.initialize(this, name, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, value) { 
        obj['Name'] = name;
        obj['Value'] = value;
    }

    /**
     * Constructs a <code>SupplementaryFeature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SupplementaryFeature} obj Optional instance to populate.
     * @return {module:model/SupplementaryFeature} The populated <code>SupplementaryFeature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SupplementaryFeature();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SupplementaryFeature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SupplementaryFeature</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SupplementaryFeature.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          String.validateJSON(data['Value']);
        }

        return true;
    }


}

SupplementaryFeature.RequiredProperties = ["Name", "Value"];

/**
 * @member {String} Name
 */
SupplementaryFeature.prototype['Name'] = undefined;

/**
 * @member {String} Value
 */
SupplementaryFeature.prototype['Value'] = undefined;






export default SupplementaryFeature;

