/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputDataConfig model module.
 * @module model/InputDataConfig
 * @version 2018-06-26
 */
class InputDataConfig {
    /**
     * Constructs a new <code>InputDataConfig</code>.
     * &lt;note&gt; &lt;p&gt;This object belongs to the &lt;a&gt;CreatePredictor&lt;/a&gt; operation. If you created your predictor with &lt;a&gt;CreateAutoPredictor&lt;/a&gt;, see &lt;a&gt;DataConfig&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The data used to train a predictor. The data includes a dataset group and any supplementary features. You specify this object in the &lt;a&gt;CreatePredictor&lt;/a&gt; request.&lt;/p&gt;
     * @alias module:model/InputDataConfig
     * @param datasetGroupArn {String} 
     */
    constructor(datasetGroupArn) { 
        
        InputDataConfig.initialize(this, datasetGroupArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetGroupArn) { 
        obj['DatasetGroupArn'] = datasetGroupArn;
    }

    /**
     * Constructs a <code>InputDataConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputDataConfig} obj Optional instance to populate.
     * @return {module:model/InputDataConfig} The populated <code>InputDataConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputDataConfig();

            if (data.hasOwnProperty('DatasetGroupArn')) {
                obj['DatasetGroupArn'] = ApiClient.convertToType(data['DatasetGroupArn'], 'String');
            }
            if (data.hasOwnProperty('SupplementaryFeatures')) {
                obj['SupplementaryFeatures'] = ApiClient.convertToType(data['SupplementaryFeatures'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputDataConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputDataConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputDataConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatasetGroupArn`
        if (data['DatasetGroupArn']) { // data not null
          String.validateJSON(data['DatasetGroupArn']);
        }
        // validate the optional field `SupplementaryFeatures`
        if (data['SupplementaryFeatures']) { // data not null
          Array.validateJSON(data['SupplementaryFeatures']);
        }

        return true;
    }


}

InputDataConfig.RequiredProperties = ["DatasetGroupArn"];

/**
 * @member {String} DatasetGroupArn
 */
InputDataConfig.prototype['DatasetGroupArn'] = undefined;

/**
 * @member {Array} SupplementaryFeatures
 */
InputDataConfig.prototype['SupplementaryFeatures'] = undefined;






export default InputDataConfig;

