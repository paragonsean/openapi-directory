/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Operation from './Operation';

/**
 * The Action model module.
 * @module model/Action
 * @version 2018-06-26
 */
class Action {
    /**
     * Constructs a new <code>Action</code>.
     * Defines the modifications that you are making to an attribute for a what-if forecast. For example, you can use this operation to create a what-if forecast that investigates a 10% off sale on all shoes. To do this, you specify &lt;code&gt;\&quot;AttributeName\&quot;: \&quot;shoes\&quot;&lt;/code&gt;, &lt;code&gt;\&quot;Operation\&quot;: \&quot;MULTIPLY\&quot;&lt;/code&gt;, and &lt;code&gt;\&quot;Value\&quot;: \&quot;0.90\&quot;&lt;/code&gt;. Pair this operation with the &lt;a&gt;TimeSeriesCondition&lt;/a&gt; operation within the &lt;a&gt;CreateWhatIfForecastRequest$TimeSeriesTransformations&lt;/a&gt; operation to define a subset of attribute items that are modified.
     * @alias module:model/Action
     * @param attributeName {String} 
     * @param operation {module:model/Operation} 
     * @param value {Number} 
     */
    constructor(attributeName, operation, value) { 
        
        Action.initialize(this, attributeName, operation, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributeName, operation, value) { 
        obj['AttributeName'] = attributeName;
        obj['Operation'] = operation;
        obj['Value'] = value;
    }

    /**
     * Constructs a <code>Action</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Action} obj Optional instance to populate.
     * @return {module:model/Action} The populated <code>Action</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Action();

            if (data.hasOwnProperty('AttributeName')) {
                obj['AttributeName'] = ApiClient.convertToType(data['AttributeName'], 'String');
            }
            if (data.hasOwnProperty('Operation')) {
                obj['Operation'] = ApiClient.convertToType(data['Operation'], Operation);
            }
            if (data.hasOwnProperty('Value')) {
                obj['Value'] = ApiClient.convertToType(data['Value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Action</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Action</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Action.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AttributeName`
        if (data['AttributeName']) { // data not null
          String.validateJSON(data['AttributeName']);
        }
        // validate the optional field `Operation`
        if (data['Operation']) { // data not null
          Operation.validateJSON(data['Operation']);
        }
        // validate the optional field `Value`
        if (data['Value']) { // data not null
          Number.validateJSON(data['Value']);
        }

        return true;
    }


}

Action.RequiredProperties = ["AttributeName", "Operation", "Value"];

/**
 * @member {String} AttributeName
 */
Action.prototype['AttributeName'] = undefined;

/**
 * @member {module:model/Operation} Operation
 */
Action.prototype['Operation'] = undefined;

/**
 * @member {Number} Value
 */
Action.prototype['Value'] = undefined;






export default Action;

