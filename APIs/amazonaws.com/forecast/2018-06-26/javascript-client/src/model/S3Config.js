/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The S3Config model module.
 * @module model/S3Config
 * @version 2018-06-26
 */
class S3Config {
    /**
     * Constructs a new <code>S3Config</code>.
     * The path to the file(s) in an Amazon Simple Storage Service (Amazon S3) bucket, and an Identity and Access Management (IAM) role that Amazon Forecast can assume to access the file(s). Optionally, includes an Key Management Service (KMS) key. This object is part of the &lt;a&gt;DataSource&lt;/a&gt; object that is submitted in the &lt;a&gt;CreateDatasetImportJob&lt;/a&gt; request, and part of the &lt;a&gt;DataDestination&lt;/a&gt; object.
     * @alias module:model/S3Config
     * @param path {String} 
     * @param roleArn {String} 
     */
    constructor(path, roleArn) { 
        
        S3Config.initialize(this, path, roleArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path, roleArn) { 
        obj['Path'] = path;
        obj['RoleArn'] = roleArn;
    }

    /**
     * Constructs a <code>S3Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3Config} obj Optional instance to populate.
     * @return {module:model/S3Config} The populated <code>S3Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3Config();

            if (data.hasOwnProperty('Path')) {
                obj['Path'] = ApiClient.convertToType(data['Path'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('KMSKeyArn')) {
                obj['KMSKeyArn'] = ApiClient.convertToType(data['KMSKeyArn'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3Config</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3Config.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Path`
        if (data['Path']) { // data not null
          String.validateJSON(data['Path']);
        }
        // validate the optional field `RoleArn`
        if (data['RoleArn']) { // data not null
          String.validateJSON(data['RoleArn']);
        }
        // validate the optional field `KMSKeyArn`
        if (data['KMSKeyArn']) { // data not null
          String.validateJSON(data['KMSKeyArn']);
        }

        return true;
    }


}

S3Config.RequiredProperties = ["Path", "RoleArn"];

/**
 * @member {String} Path
 */
S3Config.prototype['Path'] = undefined;

/**
 * @member {String} RoleArn
 */
S3Config.prototype['RoleArn'] = undefined;

/**
 * @member {String} KMSKeyArn
 */
S3Config.prototype['KMSKeyArn'] = undefined;






export default S3Config;

