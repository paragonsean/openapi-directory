/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3Config from './S3Config';
import Schema from './Schema';

/**
 * The TimeSeriesReplacementsDataSource model module.
 * @module model/TimeSeriesReplacementsDataSource
 * @version 2018-06-26
 */
class TimeSeriesReplacementsDataSource {
    /**
     * Constructs a new <code>TimeSeriesReplacementsDataSource</code>.
     * A replacement dataset is a modified version of the baseline related time series that contains only the values that you want to include in a what-if forecast. The replacement dataset must contain the forecast dimensions and item identifiers in the baseline related time series as well as at least 1 changed time series. This dataset is merged with the baseline related time series to create a transformed dataset that is used for the what-if forecast.
     * @alias module:model/TimeSeriesReplacementsDataSource
     * @param s3Config {module:model/S3Config} 
     * @param schema {module:model/Schema} 
     */
    constructor(s3Config, schema) { 
        
        TimeSeriesReplacementsDataSource.initialize(this, s3Config, schema);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, s3Config, schema) { 
        obj['S3Config'] = s3Config;
        obj['Schema'] = schema;
    }

    /**
     * Constructs a <code>TimeSeriesReplacementsDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesReplacementsDataSource} obj Optional instance to populate.
     * @return {module:model/TimeSeriesReplacementsDataSource} The populated <code>TimeSeriesReplacementsDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesReplacementsDataSource();

            if (data.hasOwnProperty('S3Config')) {
                obj['S3Config'] = S3Config.constructFromObject(data['S3Config']);
            }
            if (data.hasOwnProperty('Schema')) {
                obj['Schema'] = Schema.constructFromObject(data['Schema']);
            }
            if (data.hasOwnProperty('Format')) {
                obj['Format'] = ApiClient.convertToType(data['Format'], 'String');
            }
            if (data.hasOwnProperty('TimestampFormat')) {
                obj['TimestampFormat'] = ApiClient.convertToType(data['TimestampFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesReplacementsDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesReplacementsDataSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeSeriesReplacementsDataSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `S3Config`
        if (data['S3Config']) { // data not null
          S3Config.validateJSON(data['S3Config']);
        }
        // validate the optional field `Schema`
        if (data['Schema']) { // data not null
          Schema.validateJSON(data['Schema']);
        }
        // validate the optional field `Format`
        if (data['Format']) { // data not null
          String.validateJSON(data['Format']);
        }
        // validate the optional field `TimestampFormat`
        if (data['TimestampFormat']) { // data not null
          String.validateJSON(data['TimestampFormat']);
        }

        return true;
    }


}

TimeSeriesReplacementsDataSource.RequiredProperties = ["S3Config", "Schema"];

/**
 * @member {module:model/S3Config} S3Config
 */
TimeSeriesReplacementsDataSource.prototype['S3Config'] = undefined;

/**
 * @member {module:model/Schema} Schema
 */
TimeSeriesReplacementsDataSource.prototype['Schema'] = undefined;

/**
 * @member {String} Format
 */
TimeSeriesReplacementsDataSource.prototype['Format'] = undefined;

/**
 * @member {String} TimestampFormat
 */
TimeSeriesReplacementsDataSource.prototype['TimestampFormat'] = undefined;






export default TimeSeriesReplacementsDataSource;

