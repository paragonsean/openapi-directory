/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateForecastRequestTimeSeriesSelector from './CreateForecastRequestTimeSeriesSelector';

/**
 * The CreateForecastRequest model module.
 * @module model/CreateForecastRequest
 * @version 2018-06-26
 */
class CreateForecastRequest {
    /**
     * Constructs a new <code>CreateForecastRequest</code>.
     * @alias module:model/CreateForecastRequest
     * @param forecastName {String} 
     * @param predictorArn {String} 
     */
    constructor(forecastName, predictorArn) { 
        
        CreateForecastRequest.initialize(this, forecastName, predictorArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, forecastName, predictorArn) { 
        obj['ForecastName'] = forecastName;
        obj['PredictorArn'] = predictorArn;
    }

    /**
     * Constructs a <code>CreateForecastRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateForecastRequest} obj Optional instance to populate.
     * @return {module:model/CreateForecastRequest} The populated <code>CreateForecastRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateForecastRequest();

            if (data.hasOwnProperty('ForecastName')) {
                obj['ForecastName'] = ApiClient.convertToType(data['ForecastName'], 'String');
            }
            if (data.hasOwnProperty('PredictorArn')) {
                obj['PredictorArn'] = ApiClient.convertToType(data['PredictorArn'], 'String');
            }
            if (data.hasOwnProperty('ForecastTypes')) {
                obj['ForecastTypes'] = ApiClient.convertToType(data['ForecastTypes'], Array);
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('TimeSeriesSelector')) {
                obj['TimeSeriesSelector'] = CreateForecastRequestTimeSeriesSelector.constructFromObject(data['TimeSeriesSelector']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateForecastRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateForecastRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateForecastRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ForecastName`
        if (data['ForecastName']) { // data not null
          String.validateJSON(data['ForecastName']);
        }
        // validate the optional field `PredictorArn`
        if (data['PredictorArn']) { // data not null
          String.validateJSON(data['PredictorArn']);
        }
        // validate the optional field `ForecastTypes`
        if (data['ForecastTypes']) { // data not null
          Array.validateJSON(data['ForecastTypes']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `TimeSeriesSelector`
        if (data['TimeSeriesSelector']) { // data not null
          CreateForecastRequestTimeSeriesSelector.validateJSON(data['TimeSeriesSelector']);
        }

        return true;
    }


}

CreateForecastRequest.RequiredProperties = ["ForecastName", "PredictorArn"];

/**
 * @member {String} ForecastName
 */
CreateForecastRequest.prototype['ForecastName'] = undefined;

/**
 * @member {String} PredictorArn
 */
CreateForecastRequest.prototype['PredictorArn'] = undefined;

/**
 * @member {Array} ForecastTypes
 */
CreateForecastRequest.prototype['ForecastTypes'] = undefined;

/**
 * @member {Array} Tags
 */
CreateForecastRequest.prototype['Tags'] = undefined;

/**
 * @member {module:model/CreateForecastRequestTimeSeriesSelector} TimeSeriesSelector
 */
CreateForecastRequest.prototype['TimeSeriesSelector'] = undefined;






export default CreateForecastRequest;

