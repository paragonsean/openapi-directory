/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ErrorMetric model module.
 * @module model/ErrorMetric
 * @version 2018-06-26
 */
class ErrorMetric {
    /**
     * Constructs a new <code>ErrorMetric</code>.
     *  Provides detailed error metrics to evaluate the performance of a predictor. This object is part of the &lt;a&gt;Metrics&lt;/a&gt; object. 
     * @alias module:model/ErrorMetric
     */
    constructor() { 
        
        ErrorMetric.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ErrorMetric</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ErrorMetric} obj Optional instance to populate.
     * @return {module:model/ErrorMetric} The populated <code>ErrorMetric</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ErrorMetric();

            if (data.hasOwnProperty('ForecastType')) {
                obj['ForecastType'] = ApiClient.convertToType(data['ForecastType'], 'String');
            }
            if (data.hasOwnProperty('WAPE')) {
                obj['WAPE'] = ApiClient.convertToType(data['WAPE'], 'Number');
            }
            if (data.hasOwnProperty('RMSE')) {
                obj['RMSE'] = ApiClient.convertToType(data['RMSE'], 'Number');
            }
            if (data.hasOwnProperty('MASE')) {
                obj['MASE'] = ApiClient.convertToType(data['MASE'], 'Number');
            }
            if (data.hasOwnProperty('MAPE')) {
                obj['MAPE'] = ApiClient.convertToType(data['MAPE'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ErrorMetric</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ErrorMetric</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ForecastType`
        if (data['ForecastType']) { // data not null
          String.validateJSON(data['ForecastType']);
        }
        // validate the optional field `WAPE`
        if (data['WAPE']) { // data not null
          Number.validateJSON(data['WAPE']);
        }
        // validate the optional field `RMSE`
        if (data['RMSE']) { // data not null
          Number.validateJSON(data['RMSE']);
        }
        // validate the optional field `MASE`
        if (data['MASE']) { // data not null
          Number.validateJSON(data['MASE']);
        }
        // validate the optional field `MAPE`
        if (data['MAPE']) { // data not null
          Number.validateJSON(data['MAPE']);
        }

        return true;
    }


}



/**
 * @member {String} ForecastType
 */
ErrorMetric.prototype['ForecastType'] = undefined;

/**
 * @member {Number} WAPE
 */
ErrorMetric.prototype['WAPE'] = undefined;

/**
 * @member {Number} RMSE
 */
ErrorMetric.prototype['RMSE'] = undefined;

/**
 * @member {Number} MASE
 */
ErrorMetric.prototype['MASE'] = undefined;

/**
 * @member {Number} MAPE
 */
ErrorMetric.prototype['MAPE'] = undefined;






export default ErrorMetric;

