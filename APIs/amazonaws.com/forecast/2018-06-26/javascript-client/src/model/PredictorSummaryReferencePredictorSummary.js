/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReferencePredictorSummary from './ReferencePredictorSummary';
import State from './State';

/**
 * The PredictorSummaryReferencePredictorSummary model module.
 * @module model/PredictorSummaryReferencePredictorSummary
 * @version 2018-06-26
 */
class PredictorSummaryReferencePredictorSummary {
    /**
     * Constructs a new <code>PredictorSummaryReferencePredictorSummary</code>.
     * @alias module:model/PredictorSummaryReferencePredictorSummary
     * @implements module:model/ReferencePredictorSummary
     */
    constructor() { 
        ReferencePredictorSummary.initialize(this);
        PredictorSummaryReferencePredictorSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PredictorSummaryReferencePredictorSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PredictorSummaryReferencePredictorSummary} obj Optional instance to populate.
     * @return {module:model/PredictorSummaryReferencePredictorSummary} The populated <code>PredictorSummaryReferencePredictorSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PredictorSummaryReferencePredictorSummary();
            ReferencePredictorSummary.constructFromObject(data, obj);

            if (data.hasOwnProperty('Arn')) {
                obj['Arn'] = ApiClient.convertToType(data['Arn'], 'String');
            }
            if (data.hasOwnProperty('State')) {
                obj['State'] = ApiClient.convertToType(data['State'], State);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PredictorSummaryReferencePredictorSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PredictorSummaryReferencePredictorSummary</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Arn`
        if (data['Arn']) { // data not null
          String.validateJSON(data['Arn']);
        }
        // validate the optional field `State`
        if (data['State']) { // data not null
          State.validateJSON(data['State']);
        }

        return true;
    }


}



/**
 * @member {String} Arn
 */
PredictorSummaryReferencePredictorSummary.prototype['Arn'] = undefined;

/**
 * @member {module:model/State} State
 */
PredictorSummaryReferencePredictorSummary.prototype['State'] = undefined;


// Implement ReferencePredictorSummary interface:
/**
 * @member {String} Arn
 */
ReferencePredictorSummary.prototype['Arn'] = undefined;
/**
 * @member {module:model/State} State
 */
ReferencePredictorSummary.prototype['State'] = undefined;




export default PredictorSummaryReferencePredictorSummary;

