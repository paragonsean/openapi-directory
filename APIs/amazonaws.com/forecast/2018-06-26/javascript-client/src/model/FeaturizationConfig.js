/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeaturizationConfig model module.
 * @module model/FeaturizationConfig
 * @version 2018-06-26
 */
class FeaturizationConfig {
    /**
     * Constructs a new <code>FeaturizationConfig</code>.
     * &lt;note&gt; &lt;p&gt;This object belongs to the &lt;a&gt;CreatePredictor&lt;/a&gt; operation. If you created your predictor with &lt;a&gt;CreateAutoPredictor&lt;/a&gt;, see &lt;a&gt;AttributeConfig&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;In a &lt;a&gt;CreatePredictor&lt;/a&gt; operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as &lt;i&gt;featurization&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You define featurization using the &lt;code&gt;FeaturizationConfig&lt;/code&gt; object. You specify an array of transformations, one for each field that you want to featurize. You then include the &lt;code&gt;FeaturizationConfig&lt;/code&gt; object in your &lt;code&gt;CreatePredictor&lt;/code&gt; request. Amazon Forecast applies the featurization to the &lt;code&gt;TARGET_TIME_SERIES&lt;/code&gt; and &lt;code&gt;RELATED_TIME_SERIES&lt;/code&gt; datasets before model training.&lt;/p&gt; &lt;p&gt;You can create multiple featurization configurations. For example, you might call the &lt;code&gt;CreatePredictor&lt;/code&gt; operation twice by specifying different featurization configurations.&lt;/p&gt;
     * @alias module:model/FeaturizationConfig
     * @param forecastFrequency {String} 
     */
    constructor(forecastFrequency) { 
        
        FeaturizationConfig.initialize(this, forecastFrequency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, forecastFrequency) { 
        obj['ForecastFrequency'] = forecastFrequency;
    }

    /**
     * Constructs a <code>FeaturizationConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeaturizationConfig} obj Optional instance to populate.
     * @return {module:model/FeaturizationConfig} The populated <code>FeaturizationConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeaturizationConfig();

            if (data.hasOwnProperty('ForecastFrequency')) {
                obj['ForecastFrequency'] = ApiClient.convertToType(data['ForecastFrequency'], 'String');
            }
            if (data.hasOwnProperty('ForecastDimensions')) {
                obj['ForecastDimensions'] = ApiClient.convertToType(data['ForecastDimensions'], Array);
            }
            if (data.hasOwnProperty('Featurizations')) {
                obj['Featurizations'] = ApiClient.convertToType(data['Featurizations'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeaturizationConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeaturizationConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeaturizationConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ForecastFrequency`
        if (data['ForecastFrequency']) { // data not null
          String.validateJSON(data['ForecastFrequency']);
        }
        // validate the optional field `ForecastDimensions`
        if (data['ForecastDimensions']) { // data not null
          Array.validateJSON(data['ForecastDimensions']);
        }
        // validate the optional field `Featurizations`
        if (data['Featurizations']) { // data not null
          Array.validateJSON(data['Featurizations']);
        }

        return true;
    }


}

FeaturizationConfig.RequiredProperties = ["ForecastFrequency"];

/**
 * @member {String} ForecastFrequency
 */
FeaturizationConfig.prototype['ForecastFrequency'] = undefined;

/**
 * @member {Array} ForecastDimensions
 */
FeaturizationConfig.prototype['ForecastDimensions'] = undefined;

/**
 * @member {Array} Featurizations
 */
FeaturizationConfig.prototype['Featurizations'] = undefined;






export default FeaturizationConfig;

