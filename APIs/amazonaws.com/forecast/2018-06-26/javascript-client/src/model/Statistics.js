/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Statistics model module.
 * @module model/Statistics
 * @version 2018-06-26
 */
class Statistics {
    /**
     * Constructs a new <code>Statistics</code>.
     * Provides statistics for each data field imported into to an Amazon Forecast dataset with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\&quot;&gt;CreateDatasetImportJob&lt;/a&gt; operation.
     * @alias module:model/Statistics
     */
    constructor() { 
        
        Statistics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Statistics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Statistics} obj Optional instance to populate.
     * @return {module:model/Statistics} The populated <code>Statistics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Statistics();

            if (data.hasOwnProperty('Count')) {
                obj['Count'] = ApiClient.convertToType(data['Count'], 'Number');
            }
            if (data.hasOwnProperty('CountDistinct')) {
                obj['CountDistinct'] = ApiClient.convertToType(data['CountDistinct'], 'Number');
            }
            if (data.hasOwnProperty('CountNull')) {
                obj['CountNull'] = ApiClient.convertToType(data['CountNull'], 'Number');
            }
            if (data.hasOwnProperty('CountNan')) {
                obj['CountNan'] = ApiClient.convertToType(data['CountNan'], 'Number');
            }
            if (data.hasOwnProperty('Min')) {
                obj['Min'] = ApiClient.convertToType(data['Min'], 'String');
            }
            if (data.hasOwnProperty('Max')) {
                obj['Max'] = ApiClient.convertToType(data['Max'], 'String');
            }
            if (data.hasOwnProperty('Avg')) {
                obj['Avg'] = ApiClient.convertToType(data['Avg'], 'Number');
            }
            if (data.hasOwnProperty('Stddev')) {
                obj['Stddev'] = ApiClient.convertToType(data['Stddev'], 'Number');
            }
            if (data.hasOwnProperty('CountLong')) {
                obj['CountLong'] = ApiClient.convertToType(data['CountLong'], 'Number');
            }
            if (data.hasOwnProperty('CountDistinctLong')) {
                obj['CountDistinctLong'] = ApiClient.convertToType(data['CountDistinctLong'], 'Number');
            }
            if (data.hasOwnProperty('CountNullLong')) {
                obj['CountNullLong'] = ApiClient.convertToType(data['CountNullLong'], 'Number');
            }
            if (data.hasOwnProperty('CountNanLong')) {
                obj['CountNanLong'] = ApiClient.convertToType(data['CountNanLong'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Statistics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Statistics</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Count`
        if (data['Count']) { // data not null
          Number.validateJSON(data['Count']);
        }
        // validate the optional field `CountDistinct`
        if (data['CountDistinct']) { // data not null
          Number.validateJSON(data['CountDistinct']);
        }
        // validate the optional field `CountNull`
        if (data['CountNull']) { // data not null
          Number.validateJSON(data['CountNull']);
        }
        // validate the optional field `CountNan`
        if (data['CountNan']) { // data not null
          Number.validateJSON(data['CountNan']);
        }
        // validate the optional field `Min`
        if (data['Min']) { // data not null
          String.validateJSON(data['Min']);
        }
        // validate the optional field `Max`
        if (data['Max']) { // data not null
          String.validateJSON(data['Max']);
        }
        // validate the optional field `Avg`
        if (data['Avg']) { // data not null
          Number.validateJSON(data['Avg']);
        }
        // validate the optional field `Stddev`
        if (data['Stddev']) { // data not null
          Number.validateJSON(data['Stddev']);
        }
        // validate the optional field `CountLong`
        if (data['CountLong']) { // data not null
          Number.validateJSON(data['CountLong']);
        }
        // validate the optional field `CountDistinctLong`
        if (data['CountDistinctLong']) { // data not null
          Number.validateJSON(data['CountDistinctLong']);
        }
        // validate the optional field `CountNullLong`
        if (data['CountNullLong']) { // data not null
          Number.validateJSON(data['CountNullLong']);
        }
        // validate the optional field `CountNanLong`
        if (data['CountNanLong']) { // data not null
          Number.validateJSON(data['CountNanLong']);
        }

        return true;
    }


}



/**
 * @member {Number} Count
 */
Statistics.prototype['Count'] = undefined;

/**
 * @member {Number} CountDistinct
 */
Statistics.prototype['CountDistinct'] = undefined;

/**
 * @member {Number} CountNull
 */
Statistics.prototype['CountNull'] = undefined;

/**
 * @member {Number} CountNan
 */
Statistics.prototype['CountNan'] = undefined;

/**
 * @member {String} Min
 */
Statistics.prototype['Min'] = undefined;

/**
 * @member {String} Max
 */
Statistics.prototype['Max'] = undefined;

/**
 * @member {Number} Avg
 */
Statistics.prototype['Avg'] = undefined;

/**
 * @member {Number} Stddev
 */
Statistics.prototype['Stddev'] = undefined;

/**
 * @member {Number} CountLong
 */
Statistics.prototype['CountLong'] = undefined;

/**
 * @member {Number} CountDistinctLong
 */
Statistics.prototype['CountDistinctLong'] = undefined;

/**
 * @member {Number} CountNullLong
 */
Statistics.prototype['CountNullLong'] = undefined;

/**
 * @member {Number} CountNanLong
 */
Statistics.prototype['CountNanLong'] = undefined;






export default Statistics;

