/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataConfig model module.
 * @module model/DataConfig
 * @version 2018-06-26
 */
class DataConfig {
    /**
     * Constructs a new <code>DataConfig</code>.
     * The data configuration for your dataset group and any additional datasets.
     * @alias module:model/DataConfig
     * @param datasetGroupArn {String} 
     */
    constructor(datasetGroupArn) { 
        
        DataConfig.initialize(this, datasetGroupArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, datasetGroupArn) { 
        obj['DatasetGroupArn'] = datasetGroupArn;
    }

    /**
     * Constructs a <code>DataConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataConfig} obj Optional instance to populate.
     * @return {module:model/DataConfig} The populated <code>DataConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataConfig();

            if (data.hasOwnProperty('DatasetGroupArn')) {
                obj['DatasetGroupArn'] = ApiClient.convertToType(data['DatasetGroupArn'], 'String');
            }
            if (data.hasOwnProperty('AttributeConfigs')) {
                obj['AttributeConfigs'] = ApiClient.convertToType(data['AttributeConfigs'], Array);
            }
            if (data.hasOwnProperty('AdditionalDatasets')) {
                obj['AdditionalDatasets'] = ApiClient.convertToType(data['AdditionalDatasets'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DatasetGroupArn`
        if (data['DatasetGroupArn']) { // data not null
          String.validateJSON(data['DatasetGroupArn']);
        }
        // validate the optional field `AttributeConfigs`
        if (data['AttributeConfigs']) { // data not null
          Array.validateJSON(data['AttributeConfigs']);
        }
        // validate the optional field `AdditionalDatasets`
        if (data['AdditionalDatasets']) { // data not null
          Array.validateJSON(data['AdditionalDatasets']);
        }

        return true;
    }


}

DataConfig.RequiredProperties = ["DatasetGroupArn"];

/**
 * @member {String} DatasetGroupArn
 */
DataConfig.prototype['DatasetGroupArn'] = undefined;

/**
 * @member {Array} AttributeConfigs
 */
DataConfig.prototype['AttributeConfigs'] = undefined;

/**
 * @member {Array} AdditionalDatasets
 */
DataConfig.prototype['AdditionalDatasets'] = undefined;






export default DataConfig;

