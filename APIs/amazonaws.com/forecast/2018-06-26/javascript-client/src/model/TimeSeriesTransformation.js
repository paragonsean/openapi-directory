/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TimeSeriesTransformationAction from './TimeSeriesTransformationAction';

/**
 * The TimeSeriesTransformation model module.
 * @module model/TimeSeriesTransformation
 * @version 2018-06-26
 */
class TimeSeriesTransformation {
    /**
     * Constructs a new <code>TimeSeriesTransformation</code>.
     * A transformation function is a pair of operations that select and modify the rows in a related time series. You select the rows that you want with a condition operation and you modify the rows with a transformation operation. All conditions are joined with an AND operation, meaning that all conditions must be true for the transformation to be applied. Transformations are applied in the order that they are listed.
     * @alias module:model/TimeSeriesTransformation
     */
    constructor() { 
        
        TimeSeriesTransformation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TimeSeriesTransformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesTransformation} obj Optional instance to populate.
     * @return {module:model/TimeSeriesTransformation} The populated <code>TimeSeriesTransformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesTransformation();

            if (data.hasOwnProperty('Action')) {
                obj['Action'] = TimeSeriesTransformationAction.constructFromObject(data['Action']);
            }
            if (data.hasOwnProperty('TimeSeriesConditions')) {
                obj['TimeSeriesConditions'] = ApiClient.convertToType(data['TimeSeriesConditions'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesTransformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesTransformation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Action`
        if (data['Action']) { // data not null
          TimeSeriesTransformationAction.validateJSON(data['Action']);
        }
        // validate the optional field `TimeSeriesConditions`
        if (data['TimeSeriesConditions']) { // data not null
          Array.validateJSON(data['TimeSeriesConditions']);
        }

        return true;
    }


}



/**
 * @member {module:model/TimeSeriesTransformationAction} Action
 */
TimeSeriesTransformation.prototype['Action'] = undefined;

/**
 * @member {Array} TimeSeriesConditions
 */
TimeSeriesTransformation.prototype['TimeSeriesConditions'] = undefined;






export default TimeSeriesTransformation;

