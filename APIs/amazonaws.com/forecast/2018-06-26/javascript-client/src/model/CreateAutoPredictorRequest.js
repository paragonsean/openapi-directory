/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAutoPredictorRequestDataConfig from './CreateAutoPredictorRequestDataConfig';
import CreateAutoPredictorRequestMonitorConfig from './CreateAutoPredictorRequestMonitorConfig';
import CreateAutoPredictorRequestTimeAlignmentBoundary from './CreateAutoPredictorRequestTimeAlignmentBoundary';
import EncryptionConfig from './EncryptionConfig';
import OptimizationMetric from './OptimizationMetric';

/**
 * The CreateAutoPredictorRequest model module.
 * @module model/CreateAutoPredictorRequest
 * @version 2018-06-26
 */
class CreateAutoPredictorRequest {
    /**
     * Constructs a new <code>CreateAutoPredictorRequest</code>.
     * @alias module:model/CreateAutoPredictorRequest
     * @param predictorName {String} 
     */
    constructor(predictorName) { 
        
        CreateAutoPredictorRequest.initialize(this, predictorName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, predictorName) { 
        obj['PredictorName'] = predictorName;
    }

    /**
     * Constructs a <code>CreateAutoPredictorRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAutoPredictorRequest} obj Optional instance to populate.
     * @return {module:model/CreateAutoPredictorRequest} The populated <code>CreateAutoPredictorRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAutoPredictorRequest();

            if (data.hasOwnProperty('PredictorName')) {
                obj['PredictorName'] = ApiClient.convertToType(data['PredictorName'], 'String');
            }
            if (data.hasOwnProperty('ForecastHorizon')) {
                obj['ForecastHorizon'] = ApiClient.convertToType(data['ForecastHorizon'], 'Number');
            }
            if (data.hasOwnProperty('ForecastTypes')) {
                obj['ForecastTypes'] = ApiClient.convertToType(data['ForecastTypes'], Array);
            }
            if (data.hasOwnProperty('ForecastDimensions')) {
                obj['ForecastDimensions'] = ApiClient.convertToType(data['ForecastDimensions'], Array);
            }
            if (data.hasOwnProperty('ForecastFrequency')) {
                obj['ForecastFrequency'] = ApiClient.convertToType(data['ForecastFrequency'], 'String');
            }
            if (data.hasOwnProperty('DataConfig')) {
                obj['DataConfig'] = CreateAutoPredictorRequestDataConfig.constructFromObject(data['DataConfig']);
            }
            if (data.hasOwnProperty('EncryptionConfig')) {
                obj['EncryptionConfig'] = EncryptionConfig.constructFromObject(data['EncryptionConfig']);
            }
            if (data.hasOwnProperty('ReferencePredictorArn')) {
                obj['ReferencePredictorArn'] = ApiClient.convertToType(data['ReferencePredictorArn'], 'String');
            }
            if (data.hasOwnProperty('OptimizationMetric')) {
                obj['OptimizationMetric'] = ApiClient.convertToType(data['OptimizationMetric'], OptimizationMetric);
            }
            if (data.hasOwnProperty('ExplainPredictor')) {
                obj['ExplainPredictor'] = ApiClient.convertToType(data['ExplainPredictor'], 'Boolean');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], Array);
            }
            if (data.hasOwnProperty('MonitorConfig')) {
                obj['MonitorConfig'] = CreateAutoPredictorRequestMonitorConfig.constructFromObject(data['MonitorConfig']);
            }
            if (data.hasOwnProperty('TimeAlignmentBoundary')) {
                obj['TimeAlignmentBoundary'] = CreateAutoPredictorRequestTimeAlignmentBoundary.constructFromObject(data['TimeAlignmentBoundary']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAutoPredictorRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAutoPredictorRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAutoPredictorRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `PredictorName`
        if (data['PredictorName']) { // data not null
          String.validateJSON(data['PredictorName']);
        }
        // validate the optional field `ForecastHorizon`
        if (data['ForecastHorizon']) { // data not null
          Number.validateJSON(data['ForecastHorizon']);
        }
        // validate the optional field `ForecastTypes`
        if (data['ForecastTypes']) { // data not null
          Array.validateJSON(data['ForecastTypes']);
        }
        // validate the optional field `ForecastDimensions`
        if (data['ForecastDimensions']) { // data not null
          Array.validateJSON(data['ForecastDimensions']);
        }
        // validate the optional field `ForecastFrequency`
        if (data['ForecastFrequency']) { // data not null
          String.validateJSON(data['ForecastFrequency']);
        }
        // validate the optional field `DataConfig`
        if (data['DataConfig']) { // data not null
          CreateAutoPredictorRequestDataConfig.validateJSON(data['DataConfig']);
        }
        // validate the optional field `EncryptionConfig`
        if (data['EncryptionConfig']) { // data not null
          EncryptionConfig.validateJSON(data['EncryptionConfig']);
        }
        // validate the optional field `ReferencePredictorArn`
        if (data['ReferencePredictorArn']) { // data not null
          String.validateJSON(data['ReferencePredictorArn']);
        }
        // validate the optional field `OptimizationMetric`
        if (data['OptimizationMetric']) { // data not null
          OptimizationMetric.validateJSON(data['OptimizationMetric']);
        }
        // validate the optional field `ExplainPredictor`
        if (data['ExplainPredictor']) { // data not null
          Boolean.validateJSON(data['ExplainPredictor']);
        }
        // validate the optional field `Tags`
        if (data['Tags']) { // data not null
          Array.validateJSON(data['Tags']);
        }
        // validate the optional field `MonitorConfig`
        if (data['MonitorConfig']) { // data not null
          CreateAutoPredictorRequestMonitorConfig.validateJSON(data['MonitorConfig']);
        }
        // validate the optional field `TimeAlignmentBoundary`
        if (data['TimeAlignmentBoundary']) { // data not null
          CreateAutoPredictorRequestTimeAlignmentBoundary.validateJSON(data['TimeAlignmentBoundary']);
        }

        return true;
    }


}

CreateAutoPredictorRequest.RequiredProperties = ["PredictorName"];

/**
 * @member {String} PredictorName
 */
CreateAutoPredictorRequest.prototype['PredictorName'] = undefined;

/**
 * @member {Number} ForecastHorizon
 */
CreateAutoPredictorRequest.prototype['ForecastHorizon'] = undefined;

/**
 * @member {Array} ForecastTypes
 */
CreateAutoPredictorRequest.prototype['ForecastTypes'] = undefined;

/**
 * @member {Array} ForecastDimensions
 */
CreateAutoPredictorRequest.prototype['ForecastDimensions'] = undefined;

/**
 * @member {String} ForecastFrequency
 */
CreateAutoPredictorRequest.prototype['ForecastFrequency'] = undefined;

/**
 * @member {module:model/CreateAutoPredictorRequestDataConfig} DataConfig
 */
CreateAutoPredictorRequest.prototype['DataConfig'] = undefined;

/**
 * @member {module:model/EncryptionConfig} EncryptionConfig
 */
CreateAutoPredictorRequest.prototype['EncryptionConfig'] = undefined;

/**
 * @member {String} ReferencePredictorArn
 */
CreateAutoPredictorRequest.prototype['ReferencePredictorArn'] = undefined;

/**
 * @member {module:model/OptimizationMetric} OptimizationMetric
 */
CreateAutoPredictorRequest.prototype['OptimizationMetric'] = undefined;

/**
 * @member {Boolean} ExplainPredictor
 */
CreateAutoPredictorRequest.prototype['ExplainPredictor'] = undefined;

/**
 * @member {Array} Tags
 */
CreateAutoPredictorRequest.prototype['Tags'] = undefined;

/**
 * @member {module:model/CreateAutoPredictorRequestMonitorConfig} MonitorConfig
 */
CreateAutoPredictorRequest.prototype['MonitorConfig'] = undefined;

/**
 * @member {module:model/CreateAutoPredictorRequestTimeAlignmentBoundary} TimeAlignmentBoundary
 */
CreateAutoPredictorRequest.prototype['TimeAlignmentBoundary'] = undefined;






export default CreateAutoPredictorRequest;

