/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DataSource from './DataSource';
import DataSourceS3Config from './DataSourceS3Config';

/**
 * The DescribeDatasetImportJobResponseDataSource model module.
 * @module model/DescribeDatasetImportJobResponseDataSource
 * @version 2018-06-26
 */
class DescribeDatasetImportJobResponseDataSource {
    /**
     * Constructs a new <code>DescribeDatasetImportJobResponseDataSource</code>.
     * @alias module:model/DescribeDatasetImportJobResponseDataSource
     * @implements module:model/DataSource
     * @param s3Config {module:model/DataSourceS3Config} 
     */
    constructor(s3Config) { 
        DataSource.initialize(this, s3Config);
        DescribeDatasetImportJobResponseDataSource.initialize(this, s3Config);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, s3Config) { 
        obj['S3Config'] = s3Config;
    }

    /**
     * Constructs a <code>DescribeDatasetImportJobResponseDataSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeDatasetImportJobResponseDataSource} obj Optional instance to populate.
     * @return {module:model/DescribeDatasetImportJobResponseDataSource} The populated <code>DescribeDatasetImportJobResponseDataSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeDatasetImportJobResponseDataSource();
            DataSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('S3Config')) {
                obj['S3Config'] = DataSourceS3Config.constructFromObject(data['S3Config']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeDatasetImportJobResponseDataSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeDatasetImportJobResponseDataSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DescribeDatasetImportJobResponseDataSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `S3Config`
        if (data['S3Config']) { // data not null
          DataSourceS3Config.validateJSON(data['S3Config']);
        }

        return true;
    }


}

DescribeDatasetImportJobResponseDataSource.RequiredProperties = ["S3Config"];

/**
 * @member {module:model/DataSourceS3Config} S3Config
 */
DescribeDatasetImportJobResponseDataSource.prototype['S3Config'] = undefined;


// Implement DataSource interface:
/**
 * @member {module:model/DataSourceS3Config} S3Config
 */
DataSource.prototype['S3Config'] = undefined;




export default DescribeDatasetImportJobResponseDataSource;

