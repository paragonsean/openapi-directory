/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonForecastService);
  }
}(this, function(expect, AmazonForecastService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonForecastService.DescribeAutoPredictorResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DescribeAutoPredictorResponse', function() {
    it('should create an instance of DescribeAutoPredictorResponse', function() {
      // uncomment below and update the code to test DescribeAutoPredictorResponse
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be.a(AmazonForecastService.DescribeAutoPredictorResponse);
    });

    it('should have the property predictorArn (base name: "PredictorArn")', function() {
      // uncomment below and update the code to test the property predictorArn
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property predictorName (base name: "PredictorName")', function() {
      // uncomment below and update the code to test the property predictorName
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property forecastHorizon (base name: "ForecastHorizon")', function() {
      // uncomment below and update the code to test the property forecastHorizon
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property forecastTypes (base name: "ForecastTypes")', function() {
      // uncomment below and update the code to test the property forecastTypes
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property forecastFrequency (base name: "ForecastFrequency")', function() {
      // uncomment below and update the code to test the property forecastFrequency
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property forecastDimensions (base name: "ForecastDimensions")', function() {
      // uncomment below and update the code to test the property forecastDimensions
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property datasetImportJobArns (base name: "DatasetImportJobArns")', function() {
      // uncomment below and update the code to test the property datasetImportJobArns
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property dataConfig (base name: "DataConfig")', function() {
      // uncomment below and update the code to test the property dataConfig
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property encryptionConfig (base name: "EncryptionConfig")', function() {
      // uncomment below and update the code to test the property encryptionConfig
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property referencePredictorSummary (base name: "ReferencePredictorSummary")', function() {
      // uncomment below and update the code to test the property referencePredictorSummary
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property estimatedTimeRemainingInMinutes (base name: "EstimatedTimeRemainingInMinutes")', function() {
      // uncomment below and update the code to test the property estimatedTimeRemainingInMinutes
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "Message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "CreationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastModificationTime (base name: "LastModificationTime")', function() {
      // uncomment below and update the code to test the property lastModificationTime
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property optimizationMetric (base name: "OptimizationMetric")', function() {
      // uncomment below and update the code to test the property optimizationMetric
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property explainabilityInfo (base name: "ExplainabilityInfo")', function() {
      // uncomment below and update the code to test the property explainabilityInfo
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property monitorInfo (base name: "MonitorInfo")', function() {
      // uncomment below and update the code to test the property monitorInfo
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

    it('should have the property timeAlignmentBoundary (base name: "TimeAlignmentBoundary")', function() {
      // uncomment below and update the code to test the property timeAlignmentBoundary
      //var instance = new AmazonForecastService.DescribeAutoPredictorResponse();
      //expect(instance).to.be();
    });

  });

}));
