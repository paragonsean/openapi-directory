/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWhatIfForecastSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWhatIfForecastSummary::OAIWhatIfForecastSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWhatIfForecastSummary::OAIWhatIfForecastSummary() {
    this->initializeModel();
}

OAIWhatIfForecastSummary::~OAIWhatIfForecastSummary() {}

void OAIWhatIfForecastSummary::initializeModel() {

    m_what_if_forecast_arn_isSet = false;
    m_what_if_forecast_arn_isValid = false;

    m_what_if_forecast_name_isSet = false;
    m_what_if_forecast_name_isValid = false;

    m_what_if_analysis_arn_isSet = false;
    m_what_if_analysis_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;
}

void OAIWhatIfForecastSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWhatIfForecastSummary::fromJsonObject(QJsonObject json) {

    m_what_if_forecast_arn_isValid = ::OpenAPI::fromJsonValue(m_what_if_forecast_arn, json[QString("WhatIfForecastArn")]);
    m_what_if_forecast_arn_isSet = !json[QString("WhatIfForecastArn")].isNull() && m_what_if_forecast_arn_isValid;

    m_what_if_forecast_name_isValid = ::OpenAPI::fromJsonValue(m_what_if_forecast_name, json[QString("WhatIfForecastName")]);
    m_what_if_forecast_name_isSet = !json[QString("WhatIfForecastName")].isNull() && m_what_if_forecast_name_isValid;

    m_what_if_analysis_arn_isValid = ::OpenAPI::fromJsonValue(m_what_if_analysis_arn, json[QString("WhatIfAnalysisArn")]);
    m_what_if_analysis_arn_isSet = !json[QString("WhatIfAnalysisArn")].isNull() && m_what_if_analysis_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;
}

QString OAIWhatIfForecastSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWhatIfForecastSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_what_if_forecast_arn_isSet) {
        obj.insert(QString("WhatIfForecastArn"), ::OpenAPI::toJsonValue(m_what_if_forecast_arn));
    }
    if (m_what_if_forecast_name_isSet) {
        obj.insert(QString("WhatIfForecastName"), ::OpenAPI::toJsonValue(m_what_if_forecast_name));
    }
    if (m_what_if_analysis_arn_isSet) {
        obj.insert(QString("WhatIfAnalysisArn"), ::OpenAPI::toJsonValue(m_what_if_analysis_arn));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    return obj;
}

QString OAIWhatIfForecastSummary::getWhatIfForecastArn() const {
    return m_what_if_forecast_arn;
}
void OAIWhatIfForecastSummary::setWhatIfForecastArn(const QString &what_if_forecast_arn) {
    m_what_if_forecast_arn = what_if_forecast_arn;
    m_what_if_forecast_arn_isSet = true;
}

bool OAIWhatIfForecastSummary::is_what_if_forecast_arn_Set() const{
    return m_what_if_forecast_arn_isSet;
}

bool OAIWhatIfForecastSummary::is_what_if_forecast_arn_Valid() const{
    return m_what_if_forecast_arn_isValid;
}

QString OAIWhatIfForecastSummary::getWhatIfForecastName() const {
    return m_what_if_forecast_name;
}
void OAIWhatIfForecastSummary::setWhatIfForecastName(const QString &what_if_forecast_name) {
    m_what_if_forecast_name = what_if_forecast_name;
    m_what_if_forecast_name_isSet = true;
}

bool OAIWhatIfForecastSummary::is_what_if_forecast_name_Set() const{
    return m_what_if_forecast_name_isSet;
}

bool OAIWhatIfForecastSummary::is_what_if_forecast_name_Valid() const{
    return m_what_if_forecast_name_isValid;
}

QString OAIWhatIfForecastSummary::getWhatIfAnalysisArn() const {
    return m_what_if_analysis_arn;
}
void OAIWhatIfForecastSummary::setWhatIfAnalysisArn(const QString &what_if_analysis_arn) {
    m_what_if_analysis_arn = what_if_analysis_arn;
    m_what_if_analysis_arn_isSet = true;
}

bool OAIWhatIfForecastSummary::is_what_if_analysis_arn_Set() const{
    return m_what_if_analysis_arn_isSet;
}

bool OAIWhatIfForecastSummary::is_what_if_analysis_arn_Valid() const{
    return m_what_if_analysis_arn_isValid;
}

QString OAIWhatIfForecastSummary::getStatus() const {
    return m_status;
}
void OAIWhatIfForecastSummary::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWhatIfForecastSummary::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWhatIfForecastSummary::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWhatIfForecastSummary::getMessage() const {
    return m_message;
}
void OAIWhatIfForecastSummary::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIWhatIfForecastSummary::is_message_Set() const{
    return m_message_isSet;
}

bool OAIWhatIfForecastSummary::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIWhatIfForecastSummary::getCreationTime() const {
    return m_creation_time;
}
void OAIWhatIfForecastSummary::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIWhatIfForecastSummary::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIWhatIfForecastSummary::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIWhatIfForecastSummary::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIWhatIfForecastSummary::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIWhatIfForecastSummary::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIWhatIfForecastSummary::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

bool OAIWhatIfForecastSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_what_if_forecast_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_what_if_forecast_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_what_if_analysis_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWhatIfForecastSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
