/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatasetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatasetRequest::OAICreateDatasetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatasetRequest::OAICreateDatasetRequest() {
    this->initializeModel();
}

OAICreateDatasetRequest::~OAICreateDatasetRequest() {}

void OAICreateDatasetRequest::initializeModel() {

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_data_frequency_isSet = false;
    m_data_frequency_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDatasetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatasetRequest::fromJsonObject(QJsonObject json) {

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_data_frequency_isValid = ::OpenAPI::fromJsonValue(m_data_frequency, json[QString("DataFrequency")]);
    m_data_frequency_isSet = !json[QString("DataFrequency")].isNull() && m_data_frequency_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateDatasetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatasetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_dataset_type.isSet()) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_data_frequency_isSet) {
        obj.insert(QString("DataFrequency"), ::OpenAPI::toJsonValue(m_data_frequency));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDatasetRequest::getDatasetName() const {
    return m_dataset_name;
}
void OAICreateDatasetRequest::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAICreateDatasetRequest::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAICreateDatasetRequest::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAIDomain OAICreateDatasetRequest::getDomain() const {
    return m_domain;
}
void OAICreateDatasetRequest::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateDatasetRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateDatasetRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIDatasetType OAICreateDatasetRequest::getDatasetType() const {
    return m_dataset_type;
}
void OAICreateDatasetRequest::setDatasetType(const OAIDatasetType &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAICreateDatasetRequest::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAICreateDatasetRequest::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

QString OAICreateDatasetRequest::getDataFrequency() const {
    return m_data_frequency;
}
void OAICreateDatasetRequest::setDataFrequency(const QString &data_frequency) {
    m_data_frequency = data_frequency;
    m_data_frequency_isSet = true;
}

bool OAICreateDatasetRequest::is_data_frequency_Set() const{
    return m_data_frequency_isSet;
}

bool OAICreateDatasetRequest::is_data_frequency_Valid() const{
    return m_data_frequency_isValid;
}

OAICreateDatasetRequest_Schema OAICreateDatasetRequest::getSchema() const {
    return m_schema;
}
void OAICreateDatasetRequest::setSchema(const OAICreateDatasetRequest_Schema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAICreateDatasetRequest::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAICreateDatasetRequest::is_schema_Valid() const{
    return m_schema_isValid;
}

OAICreateDatasetRequest_EncryptionConfig OAICreateDatasetRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICreateDatasetRequest::setEncryptionConfig(const OAICreateDatasetRequest_EncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICreateDatasetRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICreateDatasetRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QList OAICreateDatasetRequest::getTags() const {
    return m_tags;
}
void OAICreateDatasetRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDatasetRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDatasetRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDatasetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatasetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_name_isValid && m_domain_isValid && m_dataset_type_isValid && m_schema_isValid && true;
}

} // namespace OpenAPI
