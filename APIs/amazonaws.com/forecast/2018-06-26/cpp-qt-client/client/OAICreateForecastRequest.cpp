/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateForecastRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateForecastRequest::OAICreateForecastRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateForecastRequest::OAICreateForecastRequest() {
    this->initializeModel();
}

OAICreateForecastRequest::~OAICreateForecastRequest() {}

void OAICreateForecastRequest::initializeModel() {

    m_forecast_name_isSet = false;
    m_forecast_name_isValid = false;

    m_predictor_arn_isSet = false;
    m_predictor_arn_isValid = false;

    m_forecast_types_isSet = false;
    m_forecast_types_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_time_series_selector_isSet = false;
    m_time_series_selector_isValid = false;
}

void OAICreateForecastRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateForecastRequest::fromJsonObject(QJsonObject json) {

    m_forecast_name_isValid = ::OpenAPI::fromJsonValue(m_forecast_name, json[QString("ForecastName")]);
    m_forecast_name_isSet = !json[QString("ForecastName")].isNull() && m_forecast_name_isValid;

    m_predictor_arn_isValid = ::OpenAPI::fromJsonValue(m_predictor_arn, json[QString("PredictorArn")]);
    m_predictor_arn_isSet = !json[QString("PredictorArn")].isNull() && m_predictor_arn_isValid;

    m_forecast_types_isValid = ::OpenAPI::fromJsonValue(m_forecast_types, json[QString("ForecastTypes")]);
    m_forecast_types_isSet = !json[QString("ForecastTypes")].isNull() && m_forecast_types_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_time_series_selector_isValid = ::OpenAPI::fromJsonValue(m_time_series_selector, json[QString("TimeSeriesSelector")]);
    m_time_series_selector_isSet = !json[QString("TimeSeriesSelector")].isNull() && m_time_series_selector_isValid;
}

QString OAICreateForecastRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateForecastRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast_name_isSet) {
        obj.insert(QString("ForecastName"), ::OpenAPI::toJsonValue(m_forecast_name));
    }
    if (m_predictor_arn_isSet) {
        obj.insert(QString("PredictorArn"), ::OpenAPI::toJsonValue(m_predictor_arn));
    }
    if (m_forecast_types.isSet()) {
        obj.insert(QString("ForecastTypes"), ::OpenAPI::toJsonValue(m_forecast_types));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_time_series_selector.isSet()) {
        obj.insert(QString("TimeSeriesSelector"), ::OpenAPI::toJsonValue(m_time_series_selector));
    }
    return obj;
}

QString OAICreateForecastRequest::getForecastName() const {
    return m_forecast_name;
}
void OAICreateForecastRequest::setForecastName(const QString &forecast_name) {
    m_forecast_name = forecast_name;
    m_forecast_name_isSet = true;
}

bool OAICreateForecastRequest::is_forecast_name_Set() const{
    return m_forecast_name_isSet;
}

bool OAICreateForecastRequest::is_forecast_name_Valid() const{
    return m_forecast_name_isValid;
}

QString OAICreateForecastRequest::getPredictorArn() const {
    return m_predictor_arn;
}
void OAICreateForecastRequest::setPredictorArn(const QString &predictor_arn) {
    m_predictor_arn = predictor_arn;
    m_predictor_arn_isSet = true;
}

bool OAICreateForecastRequest::is_predictor_arn_Set() const{
    return m_predictor_arn_isSet;
}

bool OAICreateForecastRequest::is_predictor_arn_Valid() const{
    return m_predictor_arn_isValid;
}

QList OAICreateForecastRequest::getForecastTypes() const {
    return m_forecast_types;
}
void OAICreateForecastRequest::setForecastTypes(const QList &forecast_types) {
    m_forecast_types = forecast_types;
    m_forecast_types_isSet = true;
}

bool OAICreateForecastRequest::is_forecast_types_Set() const{
    return m_forecast_types_isSet;
}

bool OAICreateForecastRequest::is_forecast_types_Valid() const{
    return m_forecast_types_isValid;
}

QList OAICreateForecastRequest::getTags() const {
    return m_tags;
}
void OAICreateForecastRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateForecastRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateForecastRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateForecastRequest_TimeSeriesSelector OAICreateForecastRequest::getTimeSeriesSelector() const {
    return m_time_series_selector;
}
void OAICreateForecastRequest::setTimeSeriesSelector(const OAICreateForecastRequest_TimeSeriesSelector &time_series_selector) {
    m_time_series_selector = time_series_selector;
    m_time_series_selector_isSet = true;
}

bool OAICreateForecastRequest::is_time_series_selector_Set() const{
    return m_time_series_selector_isSet;
}

bool OAICreateForecastRequest::is_time_series_selector_Valid() const{
    return m_time_series_selector_isValid;
}

bool OAICreateForecastRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_selector.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateForecastRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_forecast_name_isValid && m_predictor_arn_isValid && true;
}

} // namespace OpenAPI
