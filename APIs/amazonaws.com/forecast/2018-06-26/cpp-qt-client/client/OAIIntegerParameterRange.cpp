/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegerParameterRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegerParameterRange::OAIIntegerParameterRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegerParameterRange::OAIIntegerParameterRange() {
    this->initializeModel();
}

OAIIntegerParameterRange::~OAIIntegerParameterRange() {}

void OAIIntegerParameterRange::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_scaling_type_isSet = false;
    m_scaling_type_isValid = false;
}

void OAIIntegerParameterRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegerParameterRange::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("MaxValue")]);
    m_max_value_isSet = !json[QString("MaxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("MinValue")]);
    m_min_value_isSet = !json[QString("MinValue")].isNull() && m_min_value_isValid;

    m_scaling_type_isValid = ::OpenAPI::fromJsonValue(m_scaling_type, json[QString("ScalingType")]);
    m_scaling_type_isSet = !json[QString("ScalingType")].isNull() && m_scaling_type_isValid;
}

QString OAIIntegerParameterRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegerParameterRange::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("MaxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("MinValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_scaling_type.isSet()) {
        obj.insert(QString("ScalingType"), ::OpenAPI::toJsonValue(m_scaling_type));
    }
    return obj;
}

QString OAIIntegerParameterRange::getName() const {
    return m_name;
}
void OAIIntegerParameterRange::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIntegerParameterRange::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIntegerParameterRange::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIIntegerParameterRange::getMaxValue() const {
    return m_max_value;
}
void OAIIntegerParameterRange::setMaxValue(const qint32 &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIIntegerParameterRange::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIIntegerParameterRange::is_max_value_Valid() const{
    return m_max_value_isValid;
}

qint32 OAIIntegerParameterRange::getMinValue() const {
    return m_min_value;
}
void OAIIntegerParameterRange::setMinValue(const qint32 &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIIntegerParameterRange::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIIntegerParameterRange::is_min_value_Valid() const{
    return m_min_value_isValid;
}

OAIScalingType OAIIntegerParameterRange::getScalingType() const {
    return m_scaling_type;
}
void OAIIntegerParameterRange::setScalingType(const OAIScalingType &scaling_type) {
    m_scaling_type = scaling_type;
    m_scaling_type_isSet = true;
}

bool OAIIntegerParameterRange::is_scaling_type_Set() const{
    return m_scaling_type_isSet;
}

bool OAIIntegerParameterRange::is_scaling_type_Valid() const{
    return m_scaling_type_isValid;
}

bool OAIIntegerParameterRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegerParameterRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_max_value_isValid && m_min_value_isValid && true;
}

} // namespace OpenAPI
