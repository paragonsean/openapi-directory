/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDatasetGroupRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDatasetGroupRequest::OAICreateDatasetGroupRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDatasetGroupRequest::OAICreateDatasetGroupRequest() {
    this->initializeModel();
}

OAICreateDatasetGroupRequest::~OAICreateDatasetGroupRequest() {}

void OAICreateDatasetGroupRequest::initializeModel() {

    m_dataset_group_name_isSet = false;
    m_dataset_group_name_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_dataset_arns_isSet = false;
    m_dataset_arns_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateDatasetGroupRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDatasetGroupRequest::fromJsonObject(QJsonObject json) {

    m_dataset_group_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_group_name, json[QString("DatasetGroupName")]);
    m_dataset_group_name_isSet = !json[QString("DatasetGroupName")].isNull() && m_dataset_group_name_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_dataset_arns_isValid = ::OpenAPI::fromJsonValue(m_dataset_arns, json[QString("DatasetArns")]);
    m_dataset_arns_isSet = !json[QString("DatasetArns")].isNull() && m_dataset_arns_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateDatasetGroupRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDatasetGroupRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_group_name_isSet) {
        obj.insert(QString("DatasetGroupName"), ::OpenAPI::toJsonValue(m_dataset_group_name));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_dataset_arns.isSet()) {
        obj.insert(QString("DatasetArns"), ::OpenAPI::toJsonValue(m_dataset_arns));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateDatasetGroupRequest::getDatasetGroupName() const {
    return m_dataset_group_name;
}
void OAICreateDatasetGroupRequest::setDatasetGroupName(const QString &dataset_group_name) {
    m_dataset_group_name = dataset_group_name;
    m_dataset_group_name_isSet = true;
}

bool OAICreateDatasetGroupRequest::is_dataset_group_name_Set() const{
    return m_dataset_group_name_isSet;
}

bool OAICreateDatasetGroupRequest::is_dataset_group_name_Valid() const{
    return m_dataset_group_name_isValid;
}

OAIDomain OAICreateDatasetGroupRequest::getDomain() const {
    return m_domain;
}
void OAICreateDatasetGroupRequest::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAICreateDatasetGroupRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAICreateDatasetGroupRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

QList OAICreateDatasetGroupRequest::getDatasetArns() const {
    return m_dataset_arns;
}
void OAICreateDatasetGroupRequest::setDatasetArns(const QList &dataset_arns) {
    m_dataset_arns = dataset_arns;
    m_dataset_arns_isSet = true;
}

bool OAICreateDatasetGroupRequest::is_dataset_arns_Set() const{
    return m_dataset_arns_isSet;
}

bool OAICreateDatasetGroupRequest::is_dataset_arns_Valid() const{
    return m_dataset_arns_isValid;
}

QList OAICreateDatasetGroupRequest::getTags() const {
    return m_tags;
}
void OAICreateDatasetGroupRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDatasetGroupRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDatasetGroupRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateDatasetGroupRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDatasetGroupRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_group_name_isValid && m_domain_isValid && true;
}

} // namespace OpenAPI
