/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAutoPredictorRequest_DataConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAutoPredictorRequest_DataConfig::OAICreateAutoPredictorRequest_DataConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAutoPredictorRequest_DataConfig::OAICreateAutoPredictorRequest_DataConfig() {
    this->initializeModel();
}

OAICreateAutoPredictorRequest_DataConfig::~OAICreateAutoPredictorRequest_DataConfig() {}

void OAICreateAutoPredictorRequest_DataConfig::initializeModel() {

    m_dataset_group_arn_isSet = false;
    m_dataset_group_arn_isValid = false;

    m_attribute_configs_isSet = false;
    m_attribute_configs_isValid = false;

    m_additional_datasets_isSet = false;
    m_additional_datasets_isValid = false;
}

void OAICreateAutoPredictorRequest_DataConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAutoPredictorRequest_DataConfig::fromJsonObject(QJsonObject json) {

    m_dataset_group_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_group_arn, json[QString("DatasetGroupArn")]);
    m_dataset_group_arn_isSet = !json[QString("DatasetGroupArn")].isNull() && m_dataset_group_arn_isValid;

    m_attribute_configs_isValid = ::OpenAPI::fromJsonValue(m_attribute_configs, json[QString("AttributeConfigs")]);
    m_attribute_configs_isSet = !json[QString("AttributeConfigs")].isNull() && m_attribute_configs_isValid;

    m_additional_datasets_isValid = ::OpenAPI::fromJsonValue(m_additional_datasets, json[QString("AdditionalDatasets")]);
    m_additional_datasets_isSet = !json[QString("AdditionalDatasets")].isNull() && m_additional_datasets_isValid;
}

QString OAICreateAutoPredictorRequest_DataConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAutoPredictorRequest_DataConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_group_arn_isSet) {
        obj.insert(QString("DatasetGroupArn"), ::OpenAPI::toJsonValue(m_dataset_group_arn));
    }
    if (m_attribute_configs.isSet()) {
        obj.insert(QString("AttributeConfigs"), ::OpenAPI::toJsonValue(m_attribute_configs));
    }
    if (m_additional_datasets.isSet()) {
        obj.insert(QString("AdditionalDatasets"), ::OpenAPI::toJsonValue(m_additional_datasets));
    }
    return obj;
}

QString OAICreateAutoPredictorRequest_DataConfig::getDatasetGroupArn() const {
    return m_dataset_group_arn;
}
void OAICreateAutoPredictorRequest_DataConfig::setDatasetGroupArn(const QString &dataset_group_arn) {
    m_dataset_group_arn = dataset_group_arn;
    m_dataset_group_arn_isSet = true;
}

bool OAICreateAutoPredictorRequest_DataConfig::is_dataset_group_arn_Set() const{
    return m_dataset_group_arn_isSet;
}

bool OAICreateAutoPredictorRequest_DataConfig::is_dataset_group_arn_Valid() const{
    return m_dataset_group_arn_isValid;
}

QList OAICreateAutoPredictorRequest_DataConfig::getAttributeConfigs() const {
    return m_attribute_configs;
}
void OAICreateAutoPredictorRequest_DataConfig::setAttributeConfigs(const QList &attribute_configs) {
    m_attribute_configs = attribute_configs;
    m_attribute_configs_isSet = true;
}

bool OAICreateAutoPredictorRequest_DataConfig::is_attribute_configs_Set() const{
    return m_attribute_configs_isSet;
}

bool OAICreateAutoPredictorRequest_DataConfig::is_attribute_configs_Valid() const{
    return m_attribute_configs_isValid;
}

QList OAICreateAutoPredictorRequest_DataConfig::getAdditionalDatasets() const {
    return m_additional_datasets;
}
void OAICreateAutoPredictorRequest_DataConfig::setAdditionalDatasets(const QList &additional_datasets) {
    m_additional_datasets = additional_datasets;
    m_additional_datasets_isSet = true;
}

bool OAICreateAutoPredictorRequest_DataConfig::is_additional_datasets_Set() const{
    return m_additional_datasets_isSet;
}

bool OAICreateAutoPredictorRequest_DataConfig::is_additional_datasets_Valid() const{
    return m_additional_datasets_isValid;
}

bool OAICreateAutoPredictorRequest_DataConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_configs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_datasets.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAutoPredictorRequest_DataConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dataset_group_arn_isValid && true;
}

} // namespace OpenAPI
