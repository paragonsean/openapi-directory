/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePredictorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePredictorRequest::OAICreatePredictorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePredictorRequest::OAICreatePredictorRequest() {
    this->initializeModel();
}

OAICreatePredictorRequest::~OAICreatePredictorRequest() {}

void OAICreatePredictorRequest::initializeModel() {

    m_predictor_name_isSet = false;
    m_predictor_name_isValid = false;

    m_algorithm_arn_isSet = false;
    m_algorithm_arn_isValid = false;

    m_forecast_horizon_isSet = false;
    m_forecast_horizon_isValid = false;

    m_forecast_types_isSet = false;
    m_forecast_types_isValid = false;

    m_perform_auto_ml_isSet = false;
    m_perform_auto_ml_isValid = false;

    m_auto_ml_override_strategy_isSet = false;
    m_auto_ml_override_strategy_isValid = false;

    m_perform_hpo_isSet = false;
    m_perform_hpo_isValid = false;

    m_training_parameters_isSet = false;
    m_training_parameters_isValid = false;

    m_evaluation_parameters_isSet = false;
    m_evaluation_parameters_isValid = false;

    m_hpo_config_isSet = false;
    m_hpo_config_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_featurization_config_isSet = false;
    m_featurization_config_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_optimization_metric_isSet = false;
    m_optimization_metric_isValid = false;
}

void OAICreatePredictorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePredictorRequest::fromJsonObject(QJsonObject json) {

    m_predictor_name_isValid = ::OpenAPI::fromJsonValue(m_predictor_name, json[QString("PredictorName")]);
    m_predictor_name_isSet = !json[QString("PredictorName")].isNull() && m_predictor_name_isValid;

    m_algorithm_arn_isValid = ::OpenAPI::fromJsonValue(m_algorithm_arn, json[QString("AlgorithmArn")]);
    m_algorithm_arn_isSet = !json[QString("AlgorithmArn")].isNull() && m_algorithm_arn_isValid;

    m_forecast_horizon_isValid = ::OpenAPI::fromJsonValue(m_forecast_horizon, json[QString("ForecastHorizon")]);
    m_forecast_horizon_isSet = !json[QString("ForecastHorizon")].isNull() && m_forecast_horizon_isValid;

    m_forecast_types_isValid = ::OpenAPI::fromJsonValue(m_forecast_types, json[QString("ForecastTypes")]);
    m_forecast_types_isSet = !json[QString("ForecastTypes")].isNull() && m_forecast_types_isValid;

    m_perform_auto_ml_isValid = ::OpenAPI::fromJsonValue(m_perform_auto_ml, json[QString("PerformAutoML")]);
    m_perform_auto_ml_isSet = !json[QString("PerformAutoML")].isNull() && m_perform_auto_ml_isValid;

    m_auto_ml_override_strategy_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_override_strategy, json[QString("AutoMLOverrideStrategy")]);
    m_auto_ml_override_strategy_isSet = !json[QString("AutoMLOverrideStrategy")].isNull() && m_auto_ml_override_strategy_isValid;

    m_perform_hpo_isValid = ::OpenAPI::fromJsonValue(m_perform_hpo, json[QString("PerformHPO")]);
    m_perform_hpo_isSet = !json[QString("PerformHPO")].isNull() && m_perform_hpo_isValid;

    m_training_parameters_isValid = ::OpenAPI::fromJsonValue(m_training_parameters, json[QString("TrainingParameters")]);
    m_training_parameters_isSet = !json[QString("TrainingParameters")].isNull() && m_training_parameters_isValid;

    m_evaluation_parameters_isValid = ::OpenAPI::fromJsonValue(m_evaluation_parameters, json[QString("EvaluationParameters")]);
    m_evaluation_parameters_isSet = !json[QString("EvaluationParameters")].isNull() && m_evaluation_parameters_isValid;

    m_hpo_config_isValid = ::OpenAPI::fromJsonValue(m_hpo_config, json[QString("HPOConfig")]);
    m_hpo_config_isSet = !json[QString("HPOConfig")].isNull() && m_hpo_config_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_featurization_config_isValid = ::OpenAPI::fromJsonValue(m_featurization_config, json[QString("FeaturizationConfig")]);
    m_featurization_config_isSet = !json[QString("FeaturizationConfig")].isNull() && m_featurization_config_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_optimization_metric_isValid = ::OpenAPI::fromJsonValue(m_optimization_metric, json[QString("OptimizationMetric")]);
    m_optimization_metric_isSet = !json[QString("OptimizationMetric")].isNull() && m_optimization_metric_isValid;
}

QString OAICreatePredictorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePredictorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_predictor_name_isSet) {
        obj.insert(QString("PredictorName"), ::OpenAPI::toJsonValue(m_predictor_name));
    }
    if (m_algorithm_arn_isSet) {
        obj.insert(QString("AlgorithmArn"), ::OpenAPI::toJsonValue(m_algorithm_arn));
    }
    if (m_forecast_horizon_isSet) {
        obj.insert(QString("ForecastHorizon"), ::OpenAPI::toJsonValue(m_forecast_horizon));
    }
    if (m_forecast_types.isSet()) {
        obj.insert(QString("ForecastTypes"), ::OpenAPI::toJsonValue(m_forecast_types));
    }
    if (m_perform_auto_ml_isSet) {
        obj.insert(QString("PerformAutoML"), ::OpenAPI::toJsonValue(m_perform_auto_ml));
    }
    if (m_auto_ml_override_strategy.isSet()) {
        obj.insert(QString("AutoMLOverrideStrategy"), ::OpenAPI::toJsonValue(m_auto_ml_override_strategy));
    }
    if (m_perform_hpo_isSet) {
        obj.insert(QString("PerformHPO"), ::OpenAPI::toJsonValue(m_perform_hpo));
    }
    if (m_training_parameters.isSet()) {
        obj.insert(QString("TrainingParameters"), ::OpenAPI::toJsonValue(m_training_parameters));
    }
    if (m_evaluation_parameters.isSet()) {
        obj.insert(QString("EvaluationParameters"), ::OpenAPI::toJsonValue(m_evaluation_parameters));
    }
    if (m_hpo_config.isSet()) {
        obj.insert(QString("HPOConfig"), ::OpenAPI::toJsonValue(m_hpo_config));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_featurization_config.isSet()) {
        obj.insert(QString("FeaturizationConfig"), ::OpenAPI::toJsonValue(m_featurization_config));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_optimization_metric.isSet()) {
        obj.insert(QString("OptimizationMetric"), ::OpenAPI::toJsonValue(m_optimization_metric));
    }
    return obj;
}

QString OAICreatePredictorRequest::getPredictorName() const {
    return m_predictor_name;
}
void OAICreatePredictorRequest::setPredictorName(const QString &predictor_name) {
    m_predictor_name = predictor_name;
    m_predictor_name_isSet = true;
}

bool OAICreatePredictorRequest::is_predictor_name_Set() const{
    return m_predictor_name_isSet;
}

bool OAICreatePredictorRequest::is_predictor_name_Valid() const{
    return m_predictor_name_isValid;
}

QString OAICreatePredictorRequest::getAlgorithmArn() const {
    return m_algorithm_arn;
}
void OAICreatePredictorRequest::setAlgorithmArn(const QString &algorithm_arn) {
    m_algorithm_arn = algorithm_arn;
    m_algorithm_arn_isSet = true;
}

bool OAICreatePredictorRequest::is_algorithm_arn_Set() const{
    return m_algorithm_arn_isSet;
}

bool OAICreatePredictorRequest::is_algorithm_arn_Valid() const{
    return m_algorithm_arn_isValid;
}

qint32 OAICreatePredictorRequest::getForecastHorizon() const {
    return m_forecast_horizon;
}
void OAICreatePredictorRequest::setForecastHorizon(const qint32 &forecast_horizon) {
    m_forecast_horizon = forecast_horizon;
    m_forecast_horizon_isSet = true;
}

bool OAICreatePredictorRequest::is_forecast_horizon_Set() const{
    return m_forecast_horizon_isSet;
}

bool OAICreatePredictorRequest::is_forecast_horizon_Valid() const{
    return m_forecast_horizon_isValid;
}

QList OAICreatePredictorRequest::getForecastTypes() const {
    return m_forecast_types;
}
void OAICreatePredictorRequest::setForecastTypes(const QList &forecast_types) {
    m_forecast_types = forecast_types;
    m_forecast_types_isSet = true;
}

bool OAICreatePredictorRequest::is_forecast_types_Set() const{
    return m_forecast_types_isSet;
}

bool OAICreatePredictorRequest::is_forecast_types_Valid() const{
    return m_forecast_types_isValid;
}

bool OAICreatePredictorRequest::getPerformAutoMl() const {
    return m_perform_auto_ml;
}
void OAICreatePredictorRequest::setPerformAutoMl(const bool &perform_auto_ml) {
    m_perform_auto_ml = perform_auto_ml;
    m_perform_auto_ml_isSet = true;
}

bool OAICreatePredictorRequest::is_perform_auto_ml_Set() const{
    return m_perform_auto_ml_isSet;
}

bool OAICreatePredictorRequest::is_perform_auto_ml_Valid() const{
    return m_perform_auto_ml_isValid;
}

OAIAutoMLOverrideStrategy OAICreatePredictorRequest::getAutoMlOverrideStrategy() const {
    return m_auto_ml_override_strategy;
}
void OAICreatePredictorRequest::setAutoMlOverrideStrategy(const OAIAutoMLOverrideStrategy &auto_ml_override_strategy) {
    m_auto_ml_override_strategy = auto_ml_override_strategy;
    m_auto_ml_override_strategy_isSet = true;
}

bool OAICreatePredictorRequest::is_auto_ml_override_strategy_Set() const{
    return m_auto_ml_override_strategy_isSet;
}

bool OAICreatePredictorRequest::is_auto_ml_override_strategy_Valid() const{
    return m_auto_ml_override_strategy_isValid;
}

bool OAICreatePredictorRequest::getPerformHpo() const {
    return m_perform_hpo;
}
void OAICreatePredictorRequest::setPerformHpo(const bool &perform_hpo) {
    m_perform_hpo = perform_hpo;
    m_perform_hpo_isSet = true;
}

bool OAICreatePredictorRequest::is_perform_hpo_Set() const{
    return m_perform_hpo_isSet;
}

bool OAICreatePredictorRequest::is_perform_hpo_Valid() const{
    return m_perform_hpo_isValid;
}

QMap OAICreatePredictorRequest::getTrainingParameters() const {
    return m_training_parameters;
}
void OAICreatePredictorRequest::setTrainingParameters(const QMap &training_parameters) {
    m_training_parameters = training_parameters;
    m_training_parameters_isSet = true;
}

bool OAICreatePredictorRequest::is_training_parameters_Set() const{
    return m_training_parameters_isSet;
}

bool OAICreatePredictorRequest::is_training_parameters_Valid() const{
    return m_training_parameters_isValid;
}

OAICreatePredictorRequest_EvaluationParameters OAICreatePredictorRequest::getEvaluationParameters() const {
    return m_evaluation_parameters;
}
void OAICreatePredictorRequest::setEvaluationParameters(const OAICreatePredictorRequest_EvaluationParameters &evaluation_parameters) {
    m_evaluation_parameters = evaluation_parameters;
    m_evaluation_parameters_isSet = true;
}

bool OAICreatePredictorRequest::is_evaluation_parameters_Set() const{
    return m_evaluation_parameters_isSet;
}

bool OAICreatePredictorRequest::is_evaluation_parameters_Valid() const{
    return m_evaluation_parameters_isValid;
}

OAICreatePredictorRequest_HPOConfig OAICreatePredictorRequest::getHpoConfig() const {
    return m_hpo_config;
}
void OAICreatePredictorRequest::setHpoConfig(const OAICreatePredictorRequest_HPOConfig &hpo_config) {
    m_hpo_config = hpo_config;
    m_hpo_config_isSet = true;
}

bool OAICreatePredictorRequest::is_hpo_config_Set() const{
    return m_hpo_config_isSet;
}

bool OAICreatePredictorRequest::is_hpo_config_Valid() const{
    return m_hpo_config_isValid;
}

OAICreatePredictorRequest_InputDataConfig OAICreatePredictorRequest::getInputDataConfig() const {
    return m_input_data_config;
}
void OAICreatePredictorRequest::setInputDataConfig(const OAICreatePredictorRequest_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAICreatePredictorRequest::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAICreatePredictorRequest::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAICreatePredictorRequest_FeaturizationConfig OAICreatePredictorRequest::getFeaturizationConfig() const {
    return m_featurization_config;
}
void OAICreatePredictorRequest::setFeaturizationConfig(const OAICreatePredictorRequest_FeaturizationConfig &featurization_config) {
    m_featurization_config = featurization_config;
    m_featurization_config_isSet = true;
}

bool OAICreatePredictorRequest::is_featurization_config_Set() const{
    return m_featurization_config_isSet;
}

bool OAICreatePredictorRequest::is_featurization_config_Valid() const{
    return m_featurization_config_isValid;
}

OAICreateDatasetRequest_EncryptionConfig OAICreatePredictorRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICreatePredictorRequest::setEncryptionConfig(const OAICreateDatasetRequest_EncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICreatePredictorRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICreatePredictorRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QList OAICreatePredictorRequest::getTags() const {
    return m_tags;
}
void OAICreatePredictorRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreatePredictorRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreatePredictorRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIOptimizationMetric OAICreatePredictorRequest::getOptimizationMetric() const {
    return m_optimization_metric;
}
void OAICreatePredictorRequest::setOptimizationMetric(const OAIOptimizationMetric &optimization_metric) {
    m_optimization_metric = optimization_metric;
    m_optimization_metric_isSet = true;
}

bool OAICreatePredictorRequest::is_optimization_metric_Set() const{
    return m_optimization_metric_isSet;
}

bool OAICreatePredictorRequest::is_optimization_metric_Valid() const{
    return m_optimization_metric_isValid;
}

bool OAICreatePredictorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predictor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_horizon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_auto_ml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_override_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_hpo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpo_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featurization_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePredictorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_predictor_name_isValid && m_forecast_horizon_isValid && m_input_data_config_isValid && m_featurization_config_isValid && true;
}

} // namespace OpenAPI
