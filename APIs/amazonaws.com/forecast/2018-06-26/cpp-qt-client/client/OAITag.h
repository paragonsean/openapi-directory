/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITag.h
 *
 * &lt;p&gt;The optional metadata that you apply to a resource to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.&lt;/p&gt; &lt;p&gt;The following basic restrictions apply to tags:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Maximum number of tags per resource - 50.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For each resource, each tag key must be unique, and each tag key can have only one value.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum key length - 128 Unicode characters in UTF-8.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Maximum value length - 256 Unicode characters in UTF-8.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If your tagging schema is used across multiple services and resources, remember that other services may have restrictions on allowed characters. Generally allowed characters are: letters, numbers, and spaces representable in UTF-8, and the following characters: + - &#x3D; . _ : / @.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Tag keys and values are case sensitive.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Do not use &lt;code&gt;aws:&lt;/code&gt;, &lt;code&gt;AWS:&lt;/code&gt;, or any upper or lowercase combination of such as a prefix for keys as it is reserved for Amazon Web Services use. You cannot edit or delete tag keys with this prefix. Values can have this prefix. If a tag value has &lt;code&gt;aws&lt;/code&gt; as its prefix but the key does not, then Forecast considers it to be a user tag and will count against the limit of 50 tags. Tags with only the key prefix of &lt;code&gt;aws&lt;/code&gt; do not count against your tags per resource limit.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
 */

#ifndef OAITag_H
#define OAITag_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITag : public OAIObject {
public:
    OAITag();
    OAITag(QString json);
    ~OAITag() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITag)

#endif // OAITag_H
