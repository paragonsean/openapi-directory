/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesReplacementsDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesReplacementsDataSource::OAITimeSeriesReplacementsDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesReplacementsDataSource::OAITimeSeriesReplacementsDataSource() {
    this->initializeModel();
}

OAITimeSeriesReplacementsDataSource::~OAITimeSeriesReplacementsDataSource() {}

void OAITimeSeriesReplacementsDataSource::initializeModel() {

    m_s3_config_isSet = false;
    m_s3_config_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_timestamp_format_isSet = false;
    m_timestamp_format_isValid = false;
}

void OAITimeSeriesReplacementsDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesReplacementsDataSource::fromJsonObject(QJsonObject json) {

    m_s3_config_isValid = ::OpenAPI::fromJsonValue(m_s3_config, json[QString("S3Config")]);
    m_s3_config_isSet = !json[QString("S3Config")].isNull() && m_s3_config_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_timestamp_format_isValid = ::OpenAPI::fromJsonValue(m_timestamp_format, json[QString("TimestampFormat")]);
    m_timestamp_format_isSet = !json[QString("TimestampFormat")].isNull() && m_timestamp_format_isValid;
}

QString OAITimeSeriesReplacementsDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesReplacementsDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_config.isSet()) {
        obj.insert(QString("S3Config"), ::OpenAPI::toJsonValue(m_s3_config));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_timestamp_format_isSet) {
        obj.insert(QString("TimestampFormat"), ::OpenAPI::toJsonValue(m_timestamp_format));
    }
    return obj;
}

OAIS3Config OAITimeSeriesReplacementsDataSource::getS3Config() const {
    return m_s3_config;
}
void OAITimeSeriesReplacementsDataSource::setS3Config(const OAIS3Config &s3_config) {
    m_s3_config = s3_config;
    m_s3_config_isSet = true;
}

bool OAITimeSeriesReplacementsDataSource::is_s3_config_Set() const{
    return m_s3_config_isSet;
}

bool OAITimeSeriesReplacementsDataSource::is_s3_config_Valid() const{
    return m_s3_config_isValid;
}

OAISchema OAITimeSeriesReplacementsDataSource::getSchema() const {
    return m_schema;
}
void OAITimeSeriesReplacementsDataSource::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAITimeSeriesReplacementsDataSource::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAITimeSeriesReplacementsDataSource::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAITimeSeriesReplacementsDataSource::getFormat() const {
    return m_format;
}
void OAITimeSeriesReplacementsDataSource::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAITimeSeriesReplacementsDataSource::is_format_Set() const{
    return m_format_isSet;
}

bool OAITimeSeriesReplacementsDataSource::is_format_Valid() const{
    return m_format_isValid;
}

QString OAITimeSeriesReplacementsDataSource::getTimestampFormat() const {
    return m_timestamp_format;
}
void OAITimeSeriesReplacementsDataSource::setTimestampFormat(const QString &timestamp_format) {
    m_timestamp_format = timestamp_format;
    m_timestamp_format_isSet = true;
}

bool OAITimeSeriesReplacementsDataSource::is_timestamp_format_Set() const{
    return m_timestamp_format_isSet;
}

bool OAITimeSeriesReplacementsDataSource::is_timestamp_format_Valid() const{
    return m_timestamp_format_isValid;
}

bool OAITimeSeriesReplacementsDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesReplacementsDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_config_isValid && m_schema_isValid && true;
}

} // namespace OpenAPI
