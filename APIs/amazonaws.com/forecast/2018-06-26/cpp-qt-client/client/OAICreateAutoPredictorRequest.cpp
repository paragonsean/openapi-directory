/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAutoPredictorRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAutoPredictorRequest::OAICreateAutoPredictorRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAutoPredictorRequest::OAICreateAutoPredictorRequest() {
    this->initializeModel();
}

OAICreateAutoPredictorRequest::~OAICreateAutoPredictorRequest() {}

void OAICreateAutoPredictorRequest::initializeModel() {

    m_predictor_name_isSet = false;
    m_predictor_name_isValid = false;

    m_forecast_horizon_isSet = false;
    m_forecast_horizon_isValid = false;

    m_forecast_types_isSet = false;
    m_forecast_types_isValid = false;

    m_forecast_dimensions_isSet = false;
    m_forecast_dimensions_isValid = false;

    m_forecast_frequency_isSet = false;
    m_forecast_frequency_isValid = false;

    m_data_config_isSet = false;
    m_data_config_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_reference_predictor_arn_isSet = false;
    m_reference_predictor_arn_isValid = false;

    m_optimization_metric_isSet = false;
    m_optimization_metric_isValid = false;

    m_explain_predictor_isSet = false;
    m_explain_predictor_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_monitor_config_isSet = false;
    m_monitor_config_isValid = false;

    m_time_alignment_boundary_isSet = false;
    m_time_alignment_boundary_isValid = false;
}

void OAICreateAutoPredictorRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAutoPredictorRequest::fromJsonObject(QJsonObject json) {

    m_predictor_name_isValid = ::OpenAPI::fromJsonValue(m_predictor_name, json[QString("PredictorName")]);
    m_predictor_name_isSet = !json[QString("PredictorName")].isNull() && m_predictor_name_isValid;

    m_forecast_horizon_isValid = ::OpenAPI::fromJsonValue(m_forecast_horizon, json[QString("ForecastHorizon")]);
    m_forecast_horizon_isSet = !json[QString("ForecastHorizon")].isNull() && m_forecast_horizon_isValid;

    m_forecast_types_isValid = ::OpenAPI::fromJsonValue(m_forecast_types, json[QString("ForecastTypes")]);
    m_forecast_types_isSet = !json[QString("ForecastTypes")].isNull() && m_forecast_types_isValid;

    m_forecast_dimensions_isValid = ::OpenAPI::fromJsonValue(m_forecast_dimensions, json[QString("ForecastDimensions")]);
    m_forecast_dimensions_isSet = !json[QString("ForecastDimensions")].isNull() && m_forecast_dimensions_isValid;

    m_forecast_frequency_isValid = ::OpenAPI::fromJsonValue(m_forecast_frequency, json[QString("ForecastFrequency")]);
    m_forecast_frequency_isSet = !json[QString("ForecastFrequency")].isNull() && m_forecast_frequency_isValid;

    m_data_config_isValid = ::OpenAPI::fromJsonValue(m_data_config, json[QString("DataConfig")]);
    m_data_config_isSet = !json[QString("DataConfig")].isNull() && m_data_config_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;

    m_reference_predictor_arn_isValid = ::OpenAPI::fromJsonValue(m_reference_predictor_arn, json[QString("ReferencePredictorArn")]);
    m_reference_predictor_arn_isSet = !json[QString("ReferencePredictorArn")].isNull() && m_reference_predictor_arn_isValid;

    m_optimization_metric_isValid = ::OpenAPI::fromJsonValue(m_optimization_metric, json[QString("OptimizationMetric")]);
    m_optimization_metric_isSet = !json[QString("OptimizationMetric")].isNull() && m_optimization_metric_isValid;

    m_explain_predictor_isValid = ::OpenAPI::fromJsonValue(m_explain_predictor, json[QString("ExplainPredictor")]);
    m_explain_predictor_isSet = !json[QString("ExplainPredictor")].isNull() && m_explain_predictor_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_monitor_config_isValid = ::OpenAPI::fromJsonValue(m_monitor_config, json[QString("MonitorConfig")]);
    m_monitor_config_isSet = !json[QString("MonitorConfig")].isNull() && m_monitor_config_isValid;

    m_time_alignment_boundary_isValid = ::OpenAPI::fromJsonValue(m_time_alignment_boundary, json[QString("TimeAlignmentBoundary")]);
    m_time_alignment_boundary_isSet = !json[QString("TimeAlignmentBoundary")].isNull() && m_time_alignment_boundary_isValid;
}

QString OAICreateAutoPredictorRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAutoPredictorRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_predictor_name_isSet) {
        obj.insert(QString("PredictorName"), ::OpenAPI::toJsonValue(m_predictor_name));
    }
    if (m_forecast_horizon_isSet) {
        obj.insert(QString("ForecastHorizon"), ::OpenAPI::toJsonValue(m_forecast_horizon));
    }
    if (m_forecast_types.isSet()) {
        obj.insert(QString("ForecastTypes"), ::OpenAPI::toJsonValue(m_forecast_types));
    }
    if (m_forecast_dimensions.isSet()) {
        obj.insert(QString("ForecastDimensions"), ::OpenAPI::toJsonValue(m_forecast_dimensions));
    }
    if (m_forecast_frequency_isSet) {
        obj.insert(QString("ForecastFrequency"), ::OpenAPI::toJsonValue(m_forecast_frequency));
    }
    if (m_data_config.isSet()) {
        obj.insert(QString("DataConfig"), ::OpenAPI::toJsonValue(m_data_config));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_reference_predictor_arn_isSet) {
        obj.insert(QString("ReferencePredictorArn"), ::OpenAPI::toJsonValue(m_reference_predictor_arn));
    }
    if (m_optimization_metric.isSet()) {
        obj.insert(QString("OptimizationMetric"), ::OpenAPI::toJsonValue(m_optimization_metric));
    }
    if (m_explain_predictor_isSet) {
        obj.insert(QString("ExplainPredictor"), ::OpenAPI::toJsonValue(m_explain_predictor));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_monitor_config.isSet()) {
        obj.insert(QString("MonitorConfig"), ::OpenAPI::toJsonValue(m_monitor_config));
    }
    if (m_time_alignment_boundary.isSet()) {
        obj.insert(QString("TimeAlignmentBoundary"), ::OpenAPI::toJsonValue(m_time_alignment_boundary));
    }
    return obj;
}

QString OAICreateAutoPredictorRequest::getPredictorName() const {
    return m_predictor_name;
}
void OAICreateAutoPredictorRequest::setPredictorName(const QString &predictor_name) {
    m_predictor_name = predictor_name;
    m_predictor_name_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_predictor_name_Set() const{
    return m_predictor_name_isSet;
}

bool OAICreateAutoPredictorRequest::is_predictor_name_Valid() const{
    return m_predictor_name_isValid;
}

qint32 OAICreateAutoPredictorRequest::getForecastHorizon() const {
    return m_forecast_horizon;
}
void OAICreateAutoPredictorRequest::setForecastHorizon(const qint32 &forecast_horizon) {
    m_forecast_horizon = forecast_horizon;
    m_forecast_horizon_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_forecast_horizon_Set() const{
    return m_forecast_horizon_isSet;
}

bool OAICreateAutoPredictorRequest::is_forecast_horizon_Valid() const{
    return m_forecast_horizon_isValid;
}

QList OAICreateAutoPredictorRequest::getForecastTypes() const {
    return m_forecast_types;
}
void OAICreateAutoPredictorRequest::setForecastTypes(const QList &forecast_types) {
    m_forecast_types = forecast_types;
    m_forecast_types_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_forecast_types_Set() const{
    return m_forecast_types_isSet;
}

bool OAICreateAutoPredictorRequest::is_forecast_types_Valid() const{
    return m_forecast_types_isValid;
}

QList OAICreateAutoPredictorRequest::getForecastDimensions() const {
    return m_forecast_dimensions;
}
void OAICreateAutoPredictorRequest::setForecastDimensions(const QList &forecast_dimensions) {
    m_forecast_dimensions = forecast_dimensions;
    m_forecast_dimensions_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_forecast_dimensions_Set() const{
    return m_forecast_dimensions_isSet;
}

bool OAICreateAutoPredictorRequest::is_forecast_dimensions_Valid() const{
    return m_forecast_dimensions_isValid;
}

QString OAICreateAutoPredictorRequest::getForecastFrequency() const {
    return m_forecast_frequency;
}
void OAICreateAutoPredictorRequest::setForecastFrequency(const QString &forecast_frequency) {
    m_forecast_frequency = forecast_frequency;
    m_forecast_frequency_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_forecast_frequency_Set() const{
    return m_forecast_frequency_isSet;
}

bool OAICreateAutoPredictorRequest::is_forecast_frequency_Valid() const{
    return m_forecast_frequency_isValid;
}

OAICreateAutoPredictorRequest_DataConfig OAICreateAutoPredictorRequest::getDataConfig() const {
    return m_data_config;
}
void OAICreateAutoPredictorRequest::setDataConfig(const OAICreateAutoPredictorRequest_DataConfig &data_config) {
    m_data_config = data_config;
    m_data_config_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_data_config_Set() const{
    return m_data_config_isSet;
}

bool OAICreateAutoPredictorRequest::is_data_config_Valid() const{
    return m_data_config_isValid;
}

OAIEncryptionConfig OAICreateAutoPredictorRequest::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAICreateAutoPredictorRequest::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAICreateAutoPredictorRequest::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAICreateAutoPredictorRequest::getReferencePredictorArn() const {
    return m_reference_predictor_arn;
}
void OAICreateAutoPredictorRequest::setReferencePredictorArn(const QString &reference_predictor_arn) {
    m_reference_predictor_arn = reference_predictor_arn;
    m_reference_predictor_arn_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_reference_predictor_arn_Set() const{
    return m_reference_predictor_arn_isSet;
}

bool OAICreateAutoPredictorRequest::is_reference_predictor_arn_Valid() const{
    return m_reference_predictor_arn_isValid;
}

OAIOptimizationMetric OAICreateAutoPredictorRequest::getOptimizationMetric() const {
    return m_optimization_metric;
}
void OAICreateAutoPredictorRequest::setOptimizationMetric(const OAIOptimizationMetric &optimization_metric) {
    m_optimization_metric = optimization_metric;
    m_optimization_metric_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_optimization_metric_Set() const{
    return m_optimization_metric_isSet;
}

bool OAICreateAutoPredictorRequest::is_optimization_metric_Valid() const{
    return m_optimization_metric_isValid;
}

bool OAICreateAutoPredictorRequest::getExplainPredictor() const {
    return m_explain_predictor;
}
void OAICreateAutoPredictorRequest::setExplainPredictor(const bool &explain_predictor) {
    m_explain_predictor = explain_predictor;
    m_explain_predictor_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_explain_predictor_Set() const{
    return m_explain_predictor_isSet;
}

bool OAICreateAutoPredictorRequest::is_explain_predictor_Valid() const{
    return m_explain_predictor_isValid;
}

QList OAICreateAutoPredictorRequest::getTags() const {
    return m_tags;
}
void OAICreateAutoPredictorRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAutoPredictorRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAutoPredictorRequest_MonitorConfig OAICreateAutoPredictorRequest::getMonitorConfig() const {
    return m_monitor_config;
}
void OAICreateAutoPredictorRequest::setMonitorConfig(const OAICreateAutoPredictorRequest_MonitorConfig &monitor_config) {
    m_monitor_config = monitor_config;
    m_monitor_config_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_monitor_config_Set() const{
    return m_monitor_config_isSet;
}

bool OAICreateAutoPredictorRequest::is_monitor_config_Valid() const{
    return m_monitor_config_isValid;
}

OAICreateAutoPredictorRequest_TimeAlignmentBoundary OAICreateAutoPredictorRequest::getTimeAlignmentBoundary() const {
    return m_time_alignment_boundary;
}
void OAICreateAutoPredictorRequest::setTimeAlignmentBoundary(const OAICreateAutoPredictorRequest_TimeAlignmentBoundary &time_alignment_boundary) {
    m_time_alignment_boundary = time_alignment_boundary;
    m_time_alignment_boundary_isSet = true;
}

bool OAICreateAutoPredictorRequest::is_time_alignment_boundary_Set() const{
    return m_time_alignment_boundary_isSet;
}

bool OAICreateAutoPredictorRequest::is_time_alignment_boundary_Valid() const{
    return m_time_alignment_boundary_isValid;
}

bool OAICreateAutoPredictorRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predictor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_horizon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_predictor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explain_predictor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_alignment_boundary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAutoPredictorRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_predictor_name_isValid && true;
}

} // namespace OpenAPI
