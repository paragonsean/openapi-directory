/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetGroupResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetGroupResponse::OAIDescribeDatasetGroupResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetGroupResponse::OAIDescribeDatasetGroupResponse() {
    this->initializeModel();
}

OAIDescribeDatasetGroupResponse::~OAIDescribeDatasetGroupResponse() {}

void OAIDescribeDatasetGroupResponse::initializeModel() {

    m_dataset_group_name_isSet = false;
    m_dataset_group_name_isValid = false;

    m_dataset_group_arn_isSet = false;
    m_dataset_group_arn_isValid = false;

    m_dataset_arns_isSet = false;
    m_dataset_arns_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;
}

void OAIDescribeDatasetGroupResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetGroupResponse::fromJsonObject(QJsonObject json) {

    m_dataset_group_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_group_name, json[QString("DatasetGroupName")]);
    m_dataset_group_name_isSet = !json[QString("DatasetGroupName")].isNull() && m_dataset_group_name_isValid;

    m_dataset_group_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_group_arn, json[QString("DatasetGroupArn")]);
    m_dataset_group_arn_isSet = !json[QString("DatasetGroupArn")].isNull() && m_dataset_group_arn_isValid;

    m_dataset_arns_isValid = ::OpenAPI::fromJsonValue(m_dataset_arns, json[QString("DatasetArns")]);
    m_dataset_arns_isSet = !json[QString("DatasetArns")].isNull() && m_dataset_arns_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;
}

QString OAIDescribeDatasetGroupResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetGroupResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_group_name_isSet) {
        obj.insert(QString("DatasetGroupName"), ::OpenAPI::toJsonValue(m_dataset_group_name));
    }
    if (m_dataset_group_arn_isSet) {
        obj.insert(QString("DatasetGroupArn"), ::OpenAPI::toJsonValue(m_dataset_group_arn));
    }
    if (m_dataset_arns.isSet()) {
        obj.insert(QString("DatasetArns"), ::OpenAPI::toJsonValue(m_dataset_arns));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    return obj;
}

QString OAIDescribeDatasetGroupResponse::getDatasetGroupName() const {
    return m_dataset_group_name;
}
void OAIDescribeDatasetGroupResponse::setDatasetGroupName(const QString &dataset_group_name) {
    m_dataset_group_name = dataset_group_name;
    m_dataset_group_name_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_dataset_group_name_Set() const{
    return m_dataset_group_name_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_dataset_group_name_Valid() const{
    return m_dataset_group_name_isValid;
}

QString OAIDescribeDatasetGroupResponse::getDatasetGroupArn() const {
    return m_dataset_group_arn;
}
void OAIDescribeDatasetGroupResponse::setDatasetGroupArn(const QString &dataset_group_arn) {
    m_dataset_group_arn = dataset_group_arn;
    m_dataset_group_arn_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_dataset_group_arn_Set() const{
    return m_dataset_group_arn_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_dataset_group_arn_Valid() const{
    return m_dataset_group_arn_isValid;
}

QList OAIDescribeDatasetGroupResponse::getDatasetArns() const {
    return m_dataset_arns;
}
void OAIDescribeDatasetGroupResponse::setDatasetArns(const QList &dataset_arns) {
    m_dataset_arns = dataset_arns;
    m_dataset_arns_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_dataset_arns_Set() const{
    return m_dataset_arns_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_dataset_arns_Valid() const{
    return m_dataset_arns_isValid;
}

OAIDomain OAIDescribeDatasetGroupResponse::getDomain() const {
    return m_domain;
}
void OAIDescribeDatasetGroupResponse::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

QString OAIDescribeDatasetGroupResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDatasetGroupResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeDatasetGroupResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeDatasetGroupResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeDatasetGroupResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribeDatasetGroupResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribeDatasetGroupResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribeDatasetGroupResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

bool OAIDescribeDatasetGroupResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_group_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetGroupResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
