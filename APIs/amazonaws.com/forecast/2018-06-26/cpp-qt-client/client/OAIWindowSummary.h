/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWindowSummary.h
 *
 * &lt;p&gt;The metrics for a time range within the evaluation portion of a dataset. This object is part of the &lt;a&gt;EvaluationResult&lt;/a&gt; object.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;TestWindowStart&lt;/code&gt; and &lt;code&gt;TestWindowEnd&lt;/code&gt; parameters are determined by the &lt;code&gt;BackTestWindowOffset&lt;/code&gt; parameter of the &lt;a&gt;EvaluationParameters&lt;/a&gt; object.&lt;/p&gt;
 */

#ifndef OAIWindowSummary_H
#define OAIWindowSummary_H

#include <QJsonObject>

#include "OAIEvaluationType.h"
#include "OAIWindowSummary_Metrics.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWindowSummary_Metrics;

class OAIWindowSummary : public OAIObject {
public:
    OAIWindowSummary();
    OAIWindowSummary(QString json);
    ~OAIWindowSummary() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getTestWindowStart() const;
    void setTestWindowStart(const QDateTime &test_window_start);
    bool is_test_window_start_Set() const;
    bool is_test_window_start_Valid() const;

    QDateTime getTestWindowEnd() const;
    void setTestWindowEnd(const QDateTime &test_window_end);
    bool is_test_window_end_Set() const;
    bool is_test_window_end_Valid() const;

    qint32 getItemCount() const;
    void setItemCount(const qint32 &item_count);
    bool is_item_count_Set() const;
    bool is_item_count_Valid() const;

    OAIEvaluationType getEvaluationType() const;
    void setEvaluationType(const OAIEvaluationType &evaluation_type);
    bool is_evaluation_type_Set() const;
    bool is_evaluation_type_Valid() const;

    OAIWindowSummary_Metrics getMetrics() const;
    void setMetrics(const OAIWindowSummary_Metrics &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_test_window_start;
    bool m_test_window_start_isSet;
    bool m_test_window_start_isValid;

    QDateTime m_test_window_end;
    bool m_test_window_end_isSet;
    bool m_test_window_end_isValid;

    qint32 m_item_count;
    bool m_item_count_isSet;
    bool m_item_count_isValid;

    OAIEvaluationType m_evaluation_type;
    bool m_evaluation_type_isSet;
    bool m_evaluation_type_isValid;

    OAIWindowSummary_Metrics m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWindowSummary)

#endif // OAIWindowSummary_H
