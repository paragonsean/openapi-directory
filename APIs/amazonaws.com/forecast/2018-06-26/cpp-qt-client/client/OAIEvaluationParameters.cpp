/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationParameters::OAIEvaluationParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationParameters::OAIEvaluationParameters() {
    this->initializeModel();
}

OAIEvaluationParameters::~OAIEvaluationParameters() {}

void OAIEvaluationParameters::initializeModel() {

    m_number_of_backtest_windows_isSet = false;
    m_number_of_backtest_windows_isValid = false;

    m_back_test_window_offset_isSet = false;
    m_back_test_window_offset_isValid = false;
}

void OAIEvaluationParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationParameters::fromJsonObject(QJsonObject json) {

    m_number_of_backtest_windows_isValid = ::OpenAPI::fromJsonValue(m_number_of_backtest_windows, json[QString("NumberOfBacktestWindows")]);
    m_number_of_backtest_windows_isSet = !json[QString("NumberOfBacktestWindows")].isNull() && m_number_of_backtest_windows_isValid;

    m_back_test_window_offset_isValid = ::OpenAPI::fromJsonValue(m_back_test_window_offset, json[QString("BackTestWindowOffset")]);
    m_back_test_window_offset_isSet = !json[QString("BackTestWindowOffset")].isNull() && m_back_test_window_offset_isValid;
}

QString OAIEvaluationParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_number_of_backtest_windows_isSet) {
        obj.insert(QString("NumberOfBacktestWindows"), ::OpenAPI::toJsonValue(m_number_of_backtest_windows));
    }
    if (m_back_test_window_offset_isSet) {
        obj.insert(QString("BackTestWindowOffset"), ::OpenAPI::toJsonValue(m_back_test_window_offset));
    }
    return obj;
}

qint32 OAIEvaluationParameters::getNumberOfBacktestWindows() const {
    return m_number_of_backtest_windows;
}
void OAIEvaluationParameters::setNumberOfBacktestWindows(const qint32 &number_of_backtest_windows) {
    m_number_of_backtest_windows = number_of_backtest_windows;
    m_number_of_backtest_windows_isSet = true;
}

bool OAIEvaluationParameters::is_number_of_backtest_windows_Set() const{
    return m_number_of_backtest_windows_isSet;
}

bool OAIEvaluationParameters::is_number_of_backtest_windows_Valid() const{
    return m_number_of_backtest_windows_isValid;
}

qint32 OAIEvaluationParameters::getBackTestWindowOffset() const {
    return m_back_test_window_offset;
}
void OAIEvaluationParameters::setBackTestWindowOffset(const qint32 &back_test_window_offset) {
    m_back_test_window_offset = back_test_window_offset;
    m_back_test_window_offset_isSet = true;
}

bool OAIEvaluationParameters::is_back_test_window_offset_Set() const{
    return m_back_test_window_offset_isSet;
}

bool OAIEvaluationParameters::is_back_test_window_offset_Valid() const{
    return m_back_test_window_offset_isValid;
}

bool OAIEvaluationParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_of_backtest_windows_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_back_test_window_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
