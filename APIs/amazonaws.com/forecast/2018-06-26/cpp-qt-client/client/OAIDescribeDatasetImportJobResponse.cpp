/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetImportJobResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetImportJobResponse::OAIDescribeDatasetImportJobResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetImportJobResponse::OAIDescribeDatasetImportJobResponse() {
    this->initializeModel();
}

OAIDescribeDatasetImportJobResponse::~OAIDescribeDatasetImportJobResponse() {}

void OAIDescribeDatasetImportJobResponse::initializeModel() {

    m_dataset_import_job_name_isSet = false;
    m_dataset_import_job_name_isValid = false;

    m_dataset_import_job_arn_isSet = false;
    m_dataset_import_job_arn_isValid = false;

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_timestamp_format_isSet = false;
    m_timestamp_format_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_use_geolocation_for_time_zone_isSet = false;
    m_use_geolocation_for_time_zone_isValid = false;

    m_geolocation_format_isSet = false;
    m_geolocation_format_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_estimated_time_remaining_in_minutes_isSet = false;
    m_estimated_time_remaining_in_minutes_isValid = false;

    m_field_statistics_isSet = false;
    m_field_statistics_isValid = false;

    m_data_size_isSet = false;
    m_data_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_import_mode_isSet = false;
    m_import_mode_isValid = false;
}

void OAIDescribeDatasetImportJobResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetImportJobResponse::fromJsonObject(QJsonObject json) {

    m_dataset_import_job_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_import_job_name, json[QString("DatasetImportJobName")]);
    m_dataset_import_job_name_isSet = !json[QString("DatasetImportJobName")].isNull() && m_dataset_import_job_name_isValid;

    m_dataset_import_job_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_import_job_arn, json[QString("DatasetImportJobArn")]);
    m_dataset_import_job_arn_isSet = !json[QString("DatasetImportJobArn")].isNull() && m_dataset_import_job_arn_isValid;

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_timestamp_format_isValid = ::OpenAPI::fromJsonValue(m_timestamp_format, json[QString("TimestampFormat")]);
    m_timestamp_format_isSet = !json[QString("TimestampFormat")].isNull() && m_timestamp_format_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("TimeZone")]);
    m_time_zone_isSet = !json[QString("TimeZone")].isNull() && m_time_zone_isValid;

    m_use_geolocation_for_time_zone_isValid = ::OpenAPI::fromJsonValue(m_use_geolocation_for_time_zone, json[QString("UseGeolocationForTimeZone")]);
    m_use_geolocation_for_time_zone_isSet = !json[QString("UseGeolocationForTimeZone")].isNull() && m_use_geolocation_for_time_zone_isValid;

    m_geolocation_format_isValid = ::OpenAPI::fromJsonValue(m_geolocation_format, json[QString("GeolocationFormat")]);
    m_geolocation_format_isSet = !json[QString("GeolocationFormat")].isNull() && m_geolocation_format_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_estimated_time_remaining_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_remaining_in_minutes, json[QString("EstimatedTimeRemainingInMinutes")]);
    m_estimated_time_remaining_in_minutes_isSet = !json[QString("EstimatedTimeRemainingInMinutes")].isNull() && m_estimated_time_remaining_in_minutes_isValid;

    m_field_statistics_isValid = ::OpenAPI::fromJsonValue(m_field_statistics, json[QString("FieldStatistics")]);
    m_field_statistics_isSet = !json[QString("FieldStatistics")].isNull() && m_field_statistics_isValid;

    m_data_size_isValid = ::OpenAPI::fromJsonValue(m_data_size, json[QString("DataSize")]);
    m_data_size_isSet = !json[QString("DataSize")].isNull() && m_data_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;

    m_import_mode_isValid = ::OpenAPI::fromJsonValue(m_import_mode, json[QString("ImportMode")]);
    m_import_mode_isSet = !json[QString("ImportMode")].isNull() && m_import_mode_isValid;
}

QString OAIDescribeDatasetImportJobResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetImportJobResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_import_job_name_isSet) {
        obj.insert(QString("DatasetImportJobName"), ::OpenAPI::toJsonValue(m_dataset_import_job_name));
    }
    if (m_dataset_import_job_arn_isSet) {
        obj.insert(QString("DatasetImportJobArn"), ::OpenAPI::toJsonValue(m_dataset_import_job_arn));
    }
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_timestamp_format_isSet) {
        obj.insert(QString("TimestampFormat"), ::OpenAPI::toJsonValue(m_timestamp_format));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("TimeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_use_geolocation_for_time_zone_isSet) {
        obj.insert(QString("UseGeolocationForTimeZone"), ::OpenAPI::toJsonValue(m_use_geolocation_for_time_zone));
    }
    if (m_geolocation_format_isSet) {
        obj.insert(QString("GeolocationFormat"), ::OpenAPI::toJsonValue(m_geolocation_format));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_estimated_time_remaining_in_minutes_isSet) {
        obj.insert(QString("EstimatedTimeRemainingInMinutes"), ::OpenAPI::toJsonValue(m_estimated_time_remaining_in_minutes));
    }
    if (m_field_statistics.isSet()) {
        obj.insert(QString("FieldStatistics"), ::OpenAPI::toJsonValue(m_field_statistics));
    }
    if (m_data_size_isSet) {
        obj.insert(QString("DataSize"), ::OpenAPI::toJsonValue(m_data_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_import_mode.isSet()) {
        obj.insert(QString("ImportMode"), ::OpenAPI::toJsonValue(m_import_mode));
    }
    return obj;
}

QString OAIDescribeDatasetImportJobResponse::getDatasetImportJobName() const {
    return m_dataset_import_job_name;
}
void OAIDescribeDatasetImportJobResponse::setDatasetImportJobName(const QString &dataset_import_job_name) {
    m_dataset_import_job_name = dataset_import_job_name;
    m_dataset_import_job_name_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_dataset_import_job_name_Set() const{
    return m_dataset_import_job_name_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_dataset_import_job_name_Valid() const{
    return m_dataset_import_job_name_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getDatasetImportJobArn() const {
    return m_dataset_import_job_arn;
}
void OAIDescribeDatasetImportJobResponse::setDatasetImportJobArn(const QString &dataset_import_job_arn) {
    m_dataset_import_job_arn = dataset_import_job_arn;
    m_dataset_import_job_arn_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_dataset_import_job_arn_Set() const{
    return m_dataset_import_job_arn_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_dataset_import_job_arn_Valid() const{
    return m_dataset_import_job_arn_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIDescribeDatasetImportJobResponse::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getTimestampFormat() const {
    return m_timestamp_format;
}
void OAIDescribeDatasetImportJobResponse::setTimestampFormat(const QString &timestamp_format) {
    m_timestamp_format = timestamp_format;
    m_timestamp_format_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_timestamp_format_Set() const{
    return m_timestamp_format_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_timestamp_format_Valid() const{
    return m_timestamp_format_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getTimeZone() const {
    return m_time_zone;
}
void OAIDescribeDatasetImportJobResponse::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIDescribeDatasetImportJobResponse::getUseGeolocationForTimeZone() const {
    return m_use_geolocation_for_time_zone;
}
void OAIDescribeDatasetImportJobResponse::setUseGeolocationForTimeZone(const bool &use_geolocation_for_time_zone) {
    m_use_geolocation_for_time_zone = use_geolocation_for_time_zone;
    m_use_geolocation_for_time_zone_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_use_geolocation_for_time_zone_Set() const{
    return m_use_geolocation_for_time_zone_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_use_geolocation_for_time_zone_Valid() const{
    return m_use_geolocation_for_time_zone_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getGeolocationFormat() const {
    return m_geolocation_format;
}
void OAIDescribeDatasetImportJobResponse::setGeolocationFormat(const QString &geolocation_format) {
    m_geolocation_format = geolocation_format;
    m_geolocation_format_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_geolocation_format_Set() const{
    return m_geolocation_format_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_geolocation_format_Valid() const{
    return m_geolocation_format_isValid;
}

OAIDescribeDatasetImportJobResponse_DataSource OAIDescribeDatasetImportJobResponse::getDataSource() const {
    return m_data_source;
}
void OAIDescribeDatasetImportJobResponse::setDataSource(const OAIDescribeDatasetImportJobResponse_DataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_data_source_Valid() const{
    return m_data_source_isValid;
}

qint32 OAIDescribeDatasetImportJobResponse::getEstimatedTimeRemainingInMinutes() const {
    return m_estimated_time_remaining_in_minutes;
}
void OAIDescribeDatasetImportJobResponse::setEstimatedTimeRemainingInMinutes(const qint32 &estimated_time_remaining_in_minutes) {
    m_estimated_time_remaining_in_minutes = estimated_time_remaining_in_minutes;
    m_estimated_time_remaining_in_minutes_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_estimated_time_remaining_in_minutes_Set() const{
    return m_estimated_time_remaining_in_minutes_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_estimated_time_remaining_in_minutes_Valid() const{
    return m_estimated_time_remaining_in_minutes_isValid;
}

QMap OAIDescribeDatasetImportJobResponse::getFieldStatistics() const {
    return m_field_statistics;
}
void OAIDescribeDatasetImportJobResponse::setFieldStatistics(const QMap &field_statistics) {
    m_field_statistics = field_statistics;
    m_field_statistics_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_field_statistics_Set() const{
    return m_field_statistics_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_field_statistics_Valid() const{
    return m_field_statistics_isValid;
}

double OAIDescribeDatasetImportJobResponse::getDataSize() const {
    return m_data_size;
}
void OAIDescribeDatasetImportJobResponse::setDataSize(const double &data_size) {
    m_data_size = data_size;
    m_data_size_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_data_size_Set() const{
    return m_data_size_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_data_size_Valid() const{
    return m_data_size_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDatasetImportJobResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getMessage() const {
    return m_message;
}
void OAIDescribeDatasetImportJobResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIDescribeDatasetImportJobResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeDatasetImportJobResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeDatasetImportJobResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribeDatasetImportJobResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

QString OAIDescribeDatasetImportJobResponse::getFormat() const {
    return m_format;
}
void OAIDescribeDatasetImportJobResponse::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_format_Set() const{
    return m_format_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_format_Valid() const{
    return m_format_isValid;
}

OAIImportMode OAIDescribeDatasetImportJobResponse::getImportMode() const {
    return m_import_mode;
}
void OAIDescribeDatasetImportJobResponse::setImportMode(const OAIImportMode &import_mode) {
    m_import_mode = import_mode;
    m_import_mode_isSet = true;
}

bool OAIDescribeDatasetImportJobResponse::is_import_mode_Set() const{
    return m_import_mode_isSet;
}

bool OAIDescribeDatasetImportJobResponse::is_import_mode_Valid() const{
    return m_import_mode_isValid;
}

bool OAIDescribeDatasetImportJobResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_import_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_import_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_geolocation_for_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geolocation_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_remaining_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetImportJobResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
