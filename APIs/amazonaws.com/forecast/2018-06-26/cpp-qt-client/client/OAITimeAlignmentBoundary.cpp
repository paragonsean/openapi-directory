/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeAlignmentBoundary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeAlignmentBoundary::OAITimeAlignmentBoundary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeAlignmentBoundary::OAITimeAlignmentBoundary() {
    this->initializeModel();
}

OAITimeAlignmentBoundary::~OAITimeAlignmentBoundary() {}

void OAITimeAlignmentBoundary::initializeModel() {

    m_month_isSet = false;
    m_month_isValid = false;

    m_day_of_month_isSet = false;
    m_day_of_month_isValid = false;

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_hour_isSet = false;
    m_hour_isValid = false;
}

void OAITimeAlignmentBoundary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeAlignmentBoundary::fromJsonObject(QJsonObject json) {

    m_month_isValid = ::OpenAPI::fromJsonValue(m_month, json[QString("Month")]);
    m_month_isSet = !json[QString("Month")].isNull() && m_month_isValid;

    m_day_of_month_isValid = ::OpenAPI::fromJsonValue(m_day_of_month, json[QString("DayOfMonth")]);
    m_day_of_month_isSet = !json[QString("DayOfMonth")].isNull() && m_day_of_month_isValid;

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("DayOfWeek")]);
    m_day_of_week_isSet = !json[QString("DayOfWeek")].isNull() && m_day_of_week_isValid;

    m_hour_isValid = ::OpenAPI::fromJsonValue(m_hour, json[QString("Hour")]);
    m_hour_isSet = !json[QString("Hour")].isNull() && m_hour_isValid;
}

QString OAITimeAlignmentBoundary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeAlignmentBoundary::asJsonObject() const {
    QJsonObject obj;
    if (m_month.isSet()) {
        obj.insert(QString("Month"), ::OpenAPI::toJsonValue(m_month));
    }
    if (m_day_of_month_isSet) {
        obj.insert(QString("DayOfMonth"), ::OpenAPI::toJsonValue(m_day_of_month));
    }
    if (m_day_of_week.isSet()) {
        obj.insert(QString("DayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_hour_isSet) {
        obj.insert(QString("Hour"), ::OpenAPI::toJsonValue(m_hour));
    }
    return obj;
}

OAIMonth OAITimeAlignmentBoundary::getMonth() const {
    return m_month;
}
void OAITimeAlignmentBoundary::setMonth(const OAIMonth &month) {
    m_month = month;
    m_month_isSet = true;
}

bool OAITimeAlignmentBoundary::is_month_Set() const{
    return m_month_isSet;
}

bool OAITimeAlignmentBoundary::is_month_Valid() const{
    return m_month_isValid;
}

qint32 OAITimeAlignmentBoundary::getDayOfMonth() const {
    return m_day_of_month;
}
void OAITimeAlignmentBoundary::setDayOfMonth(const qint32 &day_of_month) {
    m_day_of_month = day_of_month;
    m_day_of_month_isSet = true;
}

bool OAITimeAlignmentBoundary::is_day_of_month_Set() const{
    return m_day_of_month_isSet;
}

bool OAITimeAlignmentBoundary::is_day_of_month_Valid() const{
    return m_day_of_month_isValid;
}

OAIDayOfWeek OAITimeAlignmentBoundary::getDayOfWeek() const {
    return m_day_of_week;
}
void OAITimeAlignmentBoundary::setDayOfWeek(const OAIDayOfWeek &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAITimeAlignmentBoundary::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAITimeAlignmentBoundary::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

qint32 OAITimeAlignmentBoundary::getHour() const {
    return m_hour;
}
void OAITimeAlignmentBoundary::setHour(const qint32 &hour) {
    m_hour = hour;
    m_hour_isSet = true;
}

bool OAITimeAlignmentBoundary::is_hour_Set() const{
    return m_hour_isSet;
}

bool OAITimeAlignmentBoundary::is_hour_Valid() const{
    return m_hour_isValid;
}

bool OAITimeAlignmentBoundary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_month.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_of_week.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hour_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeAlignmentBoundary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
