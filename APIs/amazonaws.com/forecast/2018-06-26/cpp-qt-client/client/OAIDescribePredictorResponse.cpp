/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribePredictorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribePredictorResponse::OAIDescribePredictorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribePredictorResponse::OAIDescribePredictorResponse() {
    this->initializeModel();
}

OAIDescribePredictorResponse::~OAIDescribePredictorResponse() {}

void OAIDescribePredictorResponse::initializeModel() {

    m_predictor_arn_isSet = false;
    m_predictor_arn_isValid = false;

    m_predictor_name_isSet = false;
    m_predictor_name_isValid = false;

    m_algorithm_arn_isSet = false;
    m_algorithm_arn_isValid = false;

    m_auto_ml_algorithm_arns_isSet = false;
    m_auto_ml_algorithm_arns_isValid = false;

    m_forecast_horizon_isSet = false;
    m_forecast_horizon_isValid = false;

    m_forecast_types_isSet = false;
    m_forecast_types_isValid = false;

    m_perform_auto_ml_isSet = false;
    m_perform_auto_ml_isValid = false;

    m_auto_ml_override_strategy_isSet = false;
    m_auto_ml_override_strategy_isValid = false;

    m_perform_hpo_isSet = false;
    m_perform_hpo_isValid = false;

    m_training_parameters_isSet = false;
    m_training_parameters_isValid = false;

    m_evaluation_parameters_isSet = false;
    m_evaluation_parameters_isValid = false;

    m_hpo_config_isSet = false;
    m_hpo_config_isValid = false;

    m_input_data_config_isSet = false;
    m_input_data_config_isValid = false;

    m_featurization_config_isSet = false;
    m_featurization_config_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_predictor_execution_details_isSet = false;
    m_predictor_execution_details_isValid = false;

    m_estimated_time_remaining_in_minutes_isSet = false;
    m_estimated_time_remaining_in_minutes_isValid = false;

    m_is_auto_predictor_isSet = false;
    m_is_auto_predictor_isValid = false;

    m_dataset_import_job_arns_isSet = false;
    m_dataset_import_job_arns_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_optimization_metric_isSet = false;
    m_optimization_metric_isValid = false;
}

void OAIDescribePredictorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribePredictorResponse::fromJsonObject(QJsonObject json) {

    m_predictor_arn_isValid = ::OpenAPI::fromJsonValue(m_predictor_arn, json[QString("PredictorArn")]);
    m_predictor_arn_isSet = !json[QString("PredictorArn")].isNull() && m_predictor_arn_isValid;

    m_predictor_name_isValid = ::OpenAPI::fromJsonValue(m_predictor_name, json[QString("PredictorName")]);
    m_predictor_name_isSet = !json[QString("PredictorName")].isNull() && m_predictor_name_isValid;

    m_algorithm_arn_isValid = ::OpenAPI::fromJsonValue(m_algorithm_arn, json[QString("AlgorithmArn")]);
    m_algorithm_arn_isSet = !json[QString("AlgorithmArn")].isNull() && m_algorithm_arn_isValid;

    m_auto_ml_algorithm_arns_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_algorithm_arns, json[QString("AutoMLAlgorithmArns")]);
    m_auto_ml_algorithm_arns_isSet = !json[QString("AutoMLAlgorithmArns")].isNull() && m_auto_ml_algorithm_arns_isValid;

    m_forecast_horizon_isValid = ::OpenAPI::fromJsonValue(m_forecast_horizon, json[QString("ForecastHorizon")]);
    m_forecast_horizon_isSet = !json[QString("ForecastHorizon")].isNull() && m_forecast_horizon_isValid;

    m_forecast_types_isValid = ::OpenAPI::fromJsonValue(m_forecast_types, json[QString("ForecastTypes")]);
    m_forecast_types_isSet = !json[QString("ForecastTypes")].isNull() && m_forecast_types_isValid;

    m_perform_auto_ml_isValid = ::OpenAPI::fromJsonValue(m_perform_auto_ml, json[QString("PerformAutoML")]);
    m_perform_auto_ml_isSet = !json[QString("PerformAutoML")].isNull() && m_perform_auto_ml_isValid;

    m_auto_ml_override_strategy_isValid = ::OpenAPI::fromJsonValue(m_auto_ml_override_strategy, json[QString("AutoMLOverrideStrategy")]);
    m_auto_ml_override_strategy_isSet = !json[QString("AutoMLOverrideStrategy")].isNull() && m_auto_ml_override_strategy_isValid;

    m_perform_hpo_isValid = ::OpenAPI::fromJsonValue(m_perform_hpo, json[QString("PerformHPO")]);
    m_perform_hpo_isSet = !json[QString("PerformHPO")].isNull() && m_perform_hpo_isValid;

    m_training_parameters_isValid = ::OpenAPI::fromJsonValue(m_training_parameters, json[QString("TrainingParameters")]);
    m_training_parameters_isSet = !json[QString("TrainingParameters")].isNull() && m_training_parameters_isValid;

    m_evaluation_parameters_isValid = ::OpenAPI::fromJsonValue(m_evaluation_parameters, json[QString("EvaluationParameters")]);
    m_evaluation_parameters_isSet = !json[QString("EvaluationParameters")].isNull() && m_evaluation_parameters_isValid;

    m_hpo_config_isValid = ::OpenAPI::fromJsonValue(m_hpo_config, json[QString("HPOConfig")]);
    m_hpo_config_isSet = !json[QString("HPOConfig")].isNull() && m_hpo_config_isValid;

    m_input_data_config_isValid = ::OpenAPI::fromJsonValue(m_input_data_config, json[QString("InputDataConfig")]);
    m_input_data_config_isSet = !json[QString("InputDataConfig")].isNull() && m_input_data_config_isValid;

    m_featurization_config_isValid = ::OpenAPI::fromJsonValue(m_featurization_config, json[QString("FeaturizationConfig")]);
    m_featurization_config_isSet = !json[QString("FeaturizationConfig")].isNull() && m_featurization_config_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;

    m_predictor_execution_details_isValid = ::OpenAPI::fromJsonValue(m_predictor_execution_details, json[QString("PredictorExecutionDetails")]);
    m_predictor_execution_details_isSet = !json[QString("PredictorExecutionDetails")].isNull() && m_predictor_execution_details_isValid;

    m_estimated_time_remaining_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_remaining_in_minutes, json[QString("EstimatedTimeRemainingInMinutes")]);
    m_estimated_time_remaining_in_minutes_isSet = !json[QString("EstimatedTimeRemainingInMinutes")].isNull() && m_estimated_time_remaining_in_minutes_isValid;

    m_is_auto_predictor_isValid = ::OpenAPI::fromJsonValue(m_is_auto_predictor, json[QString("IsAutoPredictor")]);
    m_is_auto_predictor_isSet = !json[QString("IsAutoPredictor")].isNull() && m_is_auto_predictor_isValid;

    m_dataset_import_job_arns_isValid = ::OpenAPI::fromJsonValue(m_dataset_import_job_arns, json[QString("DatasetImportJobArns")]);
    m_dataset_import_job_arns_isSet = !json[QString("DatasetImportJobArns")].isNull() && m_dataset_import_job_arns_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_optimization_metric_isValid = ::OpenAPI::fromJsonValue(m_optimization_metric, json[QString("OptimizationMetric")]);
    m_optimization_metric_isSet = !json[QString("OptimizationMetric")].isNull() && m_optimization_metric_isValid;
}

QString OAIDescribePredictorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribePredictorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_predictor_arn_isSet) {
        obj.insert(QString("PredictorArn"), ::OpenAPI::toJsonValue(m_predictor_arn));
    }
    if (m_predictor_name_isSet) {
        obj.insert(QString("PredictorName"), ::OpenAPI::toJsonValue(m_predictor_name));
    }
    if (m_algorithm_arn_isSet) {
        obj.insert(QString("AlgorithmArn"), ::OpenAPI::toJsonValue(m_algorithm_arn));
    }
    if (m_auto_ml_algorithm_arns.isSet()) {
        obj.insert(QString("AutoMLAlgorithmArns"), ::OpenAPI::toJsonValue(m_auto_ml_algorithm_arns));
    }
    if (m_forecast_horizon_isSet) {
        obj.insert(QString("ForecastHorizon"), ::OpenAPI::toJsonValue(m_forecast_horizon));
    }
    if (m_forecast_types.isSet()) {
        obj.insert(QString("ForecastTypes"), ::OpenAPI::toJsonValue(m_forecast_types));
    }
    if (m_perform_auto_ml_isSet) {
        obj.insert(QString("PerformAutoML"), ::OpenAPI::toJsonValue(m_perform_auto_ml));
    }
    if (m_auto_ml_override_strategy.isSet()) {
        obj.insert(QString("AutoMLOverrideStrategy"), ::OpenAPI::toJsonValue(m_auto_ml_override_strategy));
    }
    if (m_perform_hpo_isSet) {
        obj.insert(QString("PerformHPO"), ::OpenAPI::toJsonValue(m_perform_hpo));
    }
    if (m_training_parameters.isSet()) {
        obj.insert(QString("TrainingParameters"), ::OpenAPI::toJsonValue(m_training_parameters));
    }
    if (m_evaluation_parameters.isSet()) {
        obj.insert(QString("EvaluationParameters"), ::OpenAPI::toJsonValue(m_evaluation_parameters));
    }
    if (m_hpo_config.isSet()) {
        obj.insert(QString("HPOConfig"), ::OpenAPI::toJsonValue(m_hpo_config));
    }
    if (m_input_data_config.isSet()) {
        obj.insert(QString("InputDataConfig"), ::OpenAPI::toJsonValue(m_input_data_config));
    }
    if (m_featurization_config.isSet()) {
        obj.insert(QString("FeaturizationConfig"), ::OpenAPI::toJsonValue(m_featurization_config));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_predictor_execution_details.isSet()) {
        obj.insert(QString("PredictorExecutionDetails"), ::OpenAPI::toJsonValue(m_predictor_execution_details));
    }
    if (m_estimated_time_remaining_in_minutes_isSet) {
        obj.insert(QString("EstimatedTimeRemainingInMinutes"), ::OpenAPI::toJsonValue(m_estimated_time_remaining_in_minutes));
    }
    if (m_is_auto_predictor_isSet) {
        obj.insert(QString("IsAutoPredictor"), ::OpenAPI::toJsonValue(m_is_auto_predictor));
    }
    if (m_dataset_import_job_arns.isSet()) {
        obj.insert(QString("DatasetImportJobArns"), ::OpenAPI::toJsonValue(m_dataset_import_job_arns));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_optimization_metric.isSet()) {
        obj.insert(QString("OptimizationMetric"), ::OpenAPI::toJsonValue(m_optimization_metric));
    }
    return obj;
}

QString OAIDescribePredictorResponse::getPredictorArn() const {
    return m_predictor_arn;
}
void OAIDescribePredictorResponse::setPredictorArn(const QString &predictor_arn) {
    m_predictor_arn = predictor_arn;
    m_predictor_arn_isSet = true;
}

bool OAIDescribePredictorResponse::is_predictor_arn_Set() const{
    return m_predictor_arn_isSet;
}

bool OAIDescribePredictorResponse::is_predictor_arn_Valid() const{
    return m_predictor_arn_isValid;
}

QString OAIDescribePredictorResponse::getPredictorName() const {
    return m_predictor_name;
}
void OAIDescribePredictorResponse::setPredictorName(const QString &predictor_name) {
    m_predictor_name = predictor_name;
    m_predictor_name_isSet = true;
}

bool OAIDescribePredictorResponse::is_predictor_name_Set() const{
    return m_predictor_name_isSet;
}

bool OAIDescribePredictorResponse::is_predictor_name_Valid() const{
    return m_predictor_name_isValid;
}

QString OAIDescribePredictorResponse::getAlgorithmArn() const {
    return m_algorithm_arn;
}
void OAIDescribePredictorResponse::setAlgorithmArn(const QString &algorithm_arn) {
    m_algorithm_arn = algorithm_arn;
    m_algorithm_arn_isSet = true;
}

bool OAIDescribePredictorResponse::is_algorithm_arn_Set() const{
    return m_algorithm_arn_isSet;
}

bool OAIDescribePredictorResponse::is_algorithm_arn_Valid() const{
    return m_algorithm_arn_isValid;
}

QList OAIDescribePredictorResponse::getAutoMlAlgorithmArns() const {
    return m_auto_ml_algorithm_arns;
}
void OAIDescribePredictorResponse::setAutoMlAlgorithmArns(const QList &auto_ml_algorithm_arns) {
    m_auto_ml_algorithm_arns = auto_ml_algorithm_arns;
    m_auto_ml_algorithm_arns_isSet = true;
}

bool OAIDescribePredictorResponse::is_auto_ml_algorithm_arns_Set() const{
    return m_auto_ml_algorithm_arns_isSet;
}

bool OAIDescribePredictorResponse::is_auto_ml_algorithm_arns_Valid() const{
    return m_auto_ml_algorithm_arns_isValid;
}

qint32 OAIDescribePredictorResponse::getForecastHorizon() const {
    return m_forecast_horizon;
}
void OAIDescribePredictorResponse::setForecastHorizon(const qint32 &forecast_horizon) {
    m_forecast_horizon = forecast_horizon;
    m_forecast_horizon_isSet = true;
}

bool OAIDescribePredictorResponse::is_forecast_horizon_Set() const{
    return m_forecast_horizon_isSet;
}

bool OAIDescribePredictorResponse::is_forecast_horizon_Valid() const{
    return m_forecast_horizon_isValid;
}

QList OAIDescribePredictorResponse::getForecastTypes() const {
    return m_forecast_types;
}
void OAIDescribePredictorResponse::setForecastTypes(const QList &forecast_types) {
    m_forecast_types = forecast_types;
    m_forecast_types_isSet = true;
}

bool OAIDescribePredictorResponse::is_forecast_types_Set() const{
    return m_forecast_types_isSet;
}

bool OAIDescribePredictorResponse::is_forecast_types_Valid() const{
    return m_forecast_types_isValid;
}

bool OAIDescribePredictorResponse::getPerformAutoMl() const {
    return m_perform_auto_ml;
}
void OAIDescribePredictorResponse::setPerformAutoMl(const bool &perform_auto_ml) {
    m_perform_auto_ml = perform_auto_ml;
    m_perform_auto_ml_isSet = true;
}

bool OAIDescribePredictorResponse::is_perform_auto_ml_Set() const{
    return m_perform_auto_ml_isSet;
}

bool OAIDescribePredictorResponse::is_perform_auto_ml_Valid() const{
    return m_perform_auto_ml_isValid;
}

OAIAutoMLOverrideStrategy OAIDescribePredictorResponse::getAutoMlOverrideStrategy() const {
    return m_auto_ml_override_strategy;
}
void OAIDescribePredictorResponse::setAutoMlOverrideStrategy(const OAIAutoMLOverrideStrategy &auto_ml_override_strategy) {
    m_auto_ml_override_strategy = auto_ml_override_strategy;
    m_auto_ml_override_strategy_isSet = true;
}

bool OAIDescribePredictorResponse::is_auto_ml_override_strategy_Set() const{
    return m_auto_ml_override_strategy_isSet;
}

bool OAIDescribePredictorResponse::is_auto_ml_override_strategy_Valid() const{
    return m_auto_ml_override_strategy_isValid;
}

bool OAIDescribePredictorResponse::getPerformHpo() const {
    return m_perform_hpo;
}
void OAIDescribePredictorResponse::setPerformHpo(const bool &perform_hpo) {
    m_perform_hpo = perform_hpo;
    m_perform_hpo_isSet = true;
}

bool OAIDescribePredictorResponse::is_perform_hpo_Set() const{
    return m_perform_hpo_isSet;
}

bool OAIDescribePredictorResponse::is_perform_hpo_Valid() const{
    return m_perform_hpo_isValid;
}

QMap OAIDescribePredictorResponse::getTrainingParameters() const {
    return m_training_parameters;
}
void OAIDescribePredictorResponse::setTrainingParameters(const QMap &training_parameters) {
    m_training_parameters = training_parameters;
    m_training_parameters_isSet = true;
}

bool OAIDescribePredictorResponse::is_training_parameters_Set() const{
    return m_training_parameters_isSet;
}

bool OAIDescribePredictorResponse::is_training_parameters_Valid() const{
    return m_training_parameters_isValid;
}

OAICreatePredictorRequest_EvaluationParameters OAIDescribePredictorResponse::getEvaluationParameters() const {
    return m_evaluation_parameters;
}
void OAIDescribePredictorResponse::setEvaluationParameters(const OAICreatePredictorRequest_EvaluationParameters &evaluation_parameters) {
    m_evaluation_parameters = evaluation_parameters;
    m_evaluation_parameters_isSet = true;
}

bool OAIDescribePredictorResponse::is_evaluation_parameters_Set() const{
    return m_evaluation_parameters_isSet;
}

bool OAIDescribePredictorResponse::is_evaluation_parameters_Valid() const{
    return m_evaluation_parameters_isValid;
}

OAIDescribePredictorResponse_HPOConfig OAIDescribePredictorResponse::getHpoConfig() const {
    return m_hpo_config;
}
void OAIDescribePredictorResponse::setHpoConfig(const OAIDescribePredictorResponse_HPOConfig &hpo_config) {
    m_hpo_config = hpo_config;
    m_hpo_config_isSet = true;
}

bool OAIDescribePredictorResponse::is_hpo_config_Set() const{
    return m_hpo_config_isSet;
}

bool OAIDescribePredictorResponse::is_hpo_config_Valid() const{
    return m_hpo_config_isValid;
}

OAICreatePredictorRequest_InputDataConfig OAIDescribePredictorResponse::getInputDataConfig() const {
    return m_input_data_config;
}
void OAIDescribePredictorResponse::setInputDataConfig(const OAICreatePredictorRequest_InputDataConfig &input_data_config) {
    m_input_data_config = input_data_config;
    m_input_data_config_isSet = true;
}

bool OAIDescribePredictorResponse::is_input_data_config_Set() const{
    return m_input_data_config_isSet;
}

bool OAIDescribePredictorResponse::is_input_data_config_Valid() const{
    return m_input_data_config_isValid;
}

OAICreatePredictorRequest_FeaturizationConfig OAIDescribePredictorResponse::getFeaturizationConfig() const {
    return m_featurization_config;
}
void OAIDescribePredictorResponse::setFeaturizationConfig(const OAICreatePredictorRequest_FeaturizationConfig &featurization_config) {
    m_featurization_config = featurization_config;
    m_featurization_config_isSet = true;
}

bool OAIDescribePredictorResponse::is_featurization_config_Set() const{
    return m_featurization_config_isSet;
}

bool OAIDescribePredictorResponse::is_featurization_config_Valid() const{
    return m_featurization_config_isValid;
}

OAICreateDatasetRequest_EncryptionConfig OAIDescribePredictorResponse::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIDescribePredictorResponse::setEncryptionConfig(const OAICreateDatasetRequest_EncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIDescribePredictorResponse::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIDescribePredictorResponse::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAIDescribePredictorResponse_PredictorExecutionDetails OAIDescribePredictorResponse::getPredictorExecutionDetails() const {
    return m_predictor_execution_details;
}
void OAIDescribePredictorResponse::setPredictorExecutionDetails(const OAIDescribePredictorResponse_PredictorExecutionDetails &predictor_execution_details) {
    m_predictor_execution_details = predictor_execution_details;
    m_predictor_execution_details_isSet = true;
}

bool OAIDescribePredictorResponse::is_predictor_execution_details_Set() const{
    return m_predictor_execution_details_isSet;
}

bool OAIDescribePredictorResponse::is_predictor_execution_details_Valid() const{
    return m_predictor_execution_details_isValid;
}

qint32 OAIDescribePredictorResponse::getEstimatedTimeRemainingInMinutes() const {
    return m_estimated_time_remaining_in_minutes;
}
void OAIDescribePredictorResponse::setEstimatedTimeRemainingInMinutes(const qint32 &estimated_time_remaining_in_minutes) {
    m_estimated_time_remaining_in_minutes = estimated_time_remaining_in_minutes;
    m_estimated_time_remaining_in_minutes_isSet = true;
}

bool OAIDescribePredictorResponse::is_estimated_time_remaining_in_minutes_Set() const{
    return m_estimated_time_remaining_in_minutes_isSet;
}

bool OAIDescribePredictorResponse::is_estimated_time_remaining_in_minutes_Valid() const{
    return m_estimated_time_remaining_in_minutes_isValid;
}

bool OAIDescribePredictorResponse::getIsAutoPredictor() const {
    return m_is_auto_predictor;
}
void OAIDescribePredictorResponse::setIsAutoPredictor(const bool &is_auto_predictor) {
    m_is_auto_predictor = is_auto_predictor;
    m_is_auto_predictor_isSet = true;
}

bool OAIDescribePredictorResponse::is_is_auto_predictor_Set() const{
    return m_is_auto_predictor_isSet;
}

bool OAIDescribePredictorResponse::is_is_auto_predictor_Valid() const{
    return m_is_auto_predictor_isValid;
}

QList OAIDescribePredictorResponse::getDatasetImportJobArns() const {
    return m_dataset_import_job_arns;
}
void OAIDescribePredictorResponse::setDatasetImportJobArns(const QList &dataset_import_job_arns) {
    m_dataset_import_job_arns = dataset_import_job_arns;
    m_dataset_import_job_arns_isSet = true;
}

bool OAIDescribePredictorResponse::is_dataset_import_job_arns_Set() const{
    return m_dataset_import_job_arns_isSet;
}

bool OAIDescribePredictorResponse::is_dataset_import_job_arns_Valid() const{
    return m_dataset_import_job_arns_isValid;
}

QString OAIDescribePredictorResponse::getStatus() const {
    return m_status;
}
void OAIDescribePredictorResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribePredictorResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribePredictorResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribePredictorResponse::getMessage() const {
    return m_message;
}
void OAIDescribePredictorResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDescribePredictorResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDescribePredictorResponse::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIDescribePredictorResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribePredictorResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribePredictorResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribePredictorResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribePredictorResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribePredictorResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribePredictorResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribePredictorResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

OAIOptimizationMetric OAIDescribePredictorResponse::getOptimizationMetric() const {
    return m_optimization_metric;
}
void OAIDescribePredictorResponse::setOptimizationMetric(const OAIOptimizationMetric &optimization_metric) {
    m_optimization_metric = optimization_metric;
    m_optimization_metric_isSet = true;
}

bool OAIDescribePredictorResponse::is_optimization_metric_Set() const{
    return m_optimization_metric_isSet;
}

bool OAIDescribePredictorResponse::is_optimization_metric_Valid() const{
    return m_optimization_metric_isValid;
}

bool OAIDescribePredictorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predictor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_algorithm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_algorithm_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_horizon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_auto_ml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_ml_override_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_perform_hpo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hpo_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featurization_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictor_execution_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_remaining_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_auto_predictor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_import_job_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribePredictorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
