/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictorMonitorEvaluation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictorMonitorEvaluation::OAIPredictorMonitorEvaluation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictorMonitorEvaluation::OAIPredictorMonitorEvaluation() {
    this->initializeModel();
}

OAIPredictorMonitorEvaluation::~OAIPredictorMonitorEvaluation() {}

void OAIPredictorMonitorEvaluation::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;

    m_evaluation_time_isSet = false;
    m_evaluation_time_isValid = false;

    m_evaluation_state_isSet = false;
    m_evaluation_state_isValid = false;

    m_window_start_datetime_isSet = false;
    m_window_start_datetime_isValid = false;

    m_window_end_datetime_isSet = false;
    m_window_end_datetime_isValid = false;

    m_predictor_event_isSet = false;
    m_predictor_event_isValid = false;

    m_monitor_data_source_isSet = false;
    m_monitor_data_source_isValid = false;

    m_metric_results_isSet = false;
    m_metric_results_isValid = false;

    m_num_items_evaluated_isSet = false;
    m_num_items_evaluated_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIPredictorMonitorEvaluation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictorMonitorEvaluation::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;

    m_evaluation_time_isValid = ::OpenAPI::fromJsonValue(m_evaluation_time, json[QString("EvaluationTime")]);
    m_evaluation_time_isSet = !json[QString("EvaluationTime")].isNull() && m_evaluation_time_isValid;

    m_evaluation_state_isValid = ::OpenAPI::fromJsonValue(m_evaluation_state, json[QString("EvaluationState")]);
    m_evaluation_state_isSet = !json[QString("EvaluationState")].isNull() && m_evaluation_state_isValid;

    m_window_start_datetime_isValid = ::OpenAPI::fromJsonValue(m_window_start_datetime, json[QString("WindowStartDatetime")]);
    m_window_start_datetime_isSet = !json[QString("WindowStartDatetime")].isNull() && m_window_start_datetime_isValid;

    m_window_end_datetime_isValid = ::OpenAPI::fromJsonValue(m_window_end_datetime, json[QString("WindowEndDatetime")]);
    m_window_end_datetime_isSet = !json[QString("WindowEndDatetime")].isNull() && m_window_end_datetime_isValid;

    m_predictor_event_isValid = ::OpenAPI::fromJsonValue(m_predictor_event, json[QString("PredictorEvent")]);
    m_predictor_event_isSet = !json[QString("PredictorEvent")].isNull() && m_predictor_event_isValid;

    m_monitor_data_source_isValid = ::OpenAPI::fromJsonValue(m_monitor_data_source, json[QString("MonitorDataSource")]);
    m_monitor_data_source_isSet = !json[QString("MonitorDataSource")].isNull() && m_monitor_data_source_isValid;

    m_metric_results_isValid = ::OpenAPI::fromJsonValue(m_metric_results, json[QString("MetricResults")]);
    m_metric_results_isSet = !json[QString("MetricResults")].isNull() && m_metric_results_isValid;

    m_num_items_evaluated_isValid = ::OpenAPI::fromJsonValue(m_num_items_evaluated, json[QString("NumItemsEvaluated")]);
    m_num_items_evaluated_isSet = !json[QString("NumItemsEvaluated")].isNull() && m_num_items_evaluated_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIPredictorMonitorEvaluation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictorMonitorEvaluation::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    if (m_evaluation_time_isSet) {
        obj.insert(QString("EvaluationTime"), ::OpenAPI::toJsonValue(m_evaluation_time));
    }
    if (m_evaluation_state_isSet) {
        obj.insert(QString("EvaluationState"), ::OpenAPI::toJsonValue(m_evaluation_state));
    }
    if (m_window_start_datetime_isSet) {
        obj.insert(QString("WindowStartDatetime"), ::OpenAPI::toJsonValue(m_window_start_datetime));
    }
    if (m_window_end_datetime_isSet) {
        obj.insert(QString("WindowEndDatetime"), ::OpenAPI::toJsonValue(m_window_end_datetime));
    }
    if (m_predictor_event.isSet()) {
        obj.insert(QString("PredictorEvent"), ::OpenAPI::toJsonValue(m_predictor_event));
    }
    if (m_monitor_data_source.isSet()) {
        obj.insert(QString("MonitorDataSource"), ::OpenAPI::toJsonValue(m_monitor_data_source));
    }
    if (m_metric_results.isSet()) {
        obj.insert(QString("MetricResults"), ::OpenAPI::toJsonValue(m_metric_results));
    }
    if (m_num_items_evaluated_isSet) {
        obj.insert(QString("NumItemsEvaluated"), ::OpenAPI::toJsonValue(m_num_items_evaluated));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIPredictorMonitorEvaluation::getResourceArn() const {
    return m_resource_arn;
}
void OAIPredictorMonitorEvaluation::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIPredictorMonitorEvaluation::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

QString OAIPredictorMonitorEvaluation::getMonitorArn() const {
    return m_monitor_arn;
}
void OAIPredictorMonitorEvaluation::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAIPredictorMonitorEvaluation::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

QDateTime OAIPredictorMonitorEvaluation::getEvaluationTime() const {
    return m_evaluation_time;
}
void OAIPredictorMonitorEvaluation::setEvaluationTime(const QDateTime &evaluation_time) {
    m_evaluation_time = evaluation_time;
    m_evaluation_time_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_evaluation_time_Set() const{
    return m_evaluation_time_isSet;
}

bool OAIPredictorMonitorEvaluation::is_evaluation_time_Valid() const{
    return m_evaluation_time_isValid;
}

QString OAIPredictorMonitorEvaluation::getEvaluationState() const {
    return m_evaluation_state;
}
void OAIPredictorMonitorEvaluation::setEvaluationState(const QString &evaluation_state) {
    m_evaluation_state = evaluation_state;
    m_evaluation_state_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_evaluation_state_Set() const{
    return m_evaluation_state_isSet;
}

bool OAIPredictorMonitorEvaluation::is_evaluation_state_Valid() const{
    return m_evaluation_state_isValid;
}

QDateTime OAIPredictorMonitorEvaluation::getWindowStartDatetime() const {
    return m_window_start_datetime;
}
void OAIPredictorMonitorEvaluation::setWindowStartDatetime(const QDateTime &window_start_datetime) {
    m_window_start_datetime = window_start_datetime;
    m_window_start_datetime_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_window_start_datetime_Set() const{
    return m_window_start_datetime_isSet;
}

bool OAIPredictorMonitorEvaluation::is_window_start_datetime_Valid() const{
    return m_window_start_datetime_isValid;
}

QDateTime OAIPredictorMonitorEvaluation::getWindowEndDatetime() const {
    return m_window_end_datetime;
}
void OAIPredictorMonitorEvaluation::setWindowEndDatetime(const QDateTime &window_end_datetime) {
    m_window_end_datetime = window_end_datetime;
    m_window_end_datetime_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_window_end_datetime_Set() const{
    return m_window_end_datetime_isSet;
}

bool OAIPredictorMonitorEvaluation::is_window_end_datetime_Valid() const{
    return m_window_end_datetime_isValid;
}

OAIPredictorMonitorEvaluation_PredictorEvent OAIPredictorMonitorEvaluation::getPredictorEvent() const {
    return m_predictor_event;
}
void OAIPredictorMonitorEvaluation::setPredictorEvent(const OAIPredictorMonitorEvaluation_PredictorEvent &predictor_event) {
    m_predictor_event = predictor_event;
    m_predictor_event_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_predictor_event_Set() const{
    return m_predictor_event_isSet;
}

bool OAIPredictorMonitorEvaluation::is_predictor_event_Valid() const{
    return m_predictor_event_isValid;
}

OAIPredictorMonitorEvaluation_MonitorDataSource OAIPredictorMonitorEvaluation::getMonitorDataSource() const {
    return m_monitor_data_source;
}
void OAIPredictorMonitorEvaluation::setMonitorDataSource(const OAIPredictorMonitorEvaluation_MonitorDataSource &monitor_data_source) {
    m_monitor_data_source = monitor_data_source;
    m_monitor_data_source_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_monitor_data_source_Set() const{
    return m_monitor_data_source_isSet;
}

bool OAIPredictorMonitorEvaluation::is_monitor_data_source_Valid() const{
    return m_monitor_data_source_isValid;
}

QList OAIPredictorMonitorEvaluation::getMetricResults() const {
    return m_metric_results;
}
void OAIPredictorMonitorEvaluation::setMetricResults(const QList &metric_results) {
    m_metric_results = metric_results;
    m_metric_results_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_metric_results_Set() const{
    return m_metric_results_isSet;
}

bool OAIPredictorMonitorEvaluation::is_metric_results_Valid() const{
    return m_metric_results_isValid;
}

qint32 OAIPredictorMonitorEvaluation::getNumItemsEvaluated() const {
    return m_num_items_evaluated;
}
void OAIPredictorMonitorEvaluation::setNumItemsEvaluated(const qint32 &num_items_evaluated) {
    m_num_items_evaluated = num_items_evaluated;
    m_num_items_evaluated_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_num_items_evaluated_Set() const{
    return m_num_items_evaluated_isSet;
}

bool OAIPredictorMonitorEvaluation::is_num_items_evaluated_Valid() const{
    return m_num_items_evaluated_isValid;
}

QString OAIPredictorMonitorEvaluation::getMessage() const {
    return m_message;
}
void OAIPredictorMonitorEvaluation::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIPredictorMonitorEvaluation::is_message_Set() const{
    return m_message_isSet;
}

bool OAIPredictorMonitorEvaluation::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIPredictorMonitorEvaluation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_start_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_end_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictor_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_items_evaluated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictorMonitorEvaluation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
