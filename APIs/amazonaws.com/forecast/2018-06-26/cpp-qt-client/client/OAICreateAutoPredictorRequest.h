/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAutoPredictorRequest.h
 *
 * 
 */

#ifndef OAICreateAutoPredictorRequest_H
#define OAICreateAutoPredictorRequest_H

#include <QJsonObject>

#include "OAICreateAutoPredictorRequest_DataConfig.h"
#include "OAICreateAutoPredictorRequest_MonitorConfig.h"
#include "OAICreateAutoPredictorRequest_TimeAlignmentBoundary.h"
#include "OAIEncryptionConfig.h"
#include "OAIOptimizationMetric.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAutoPredictorRequest_DataConfig;
class OAIEncryptionConfig;
class OAICreateAutoPredictorRequest_MonitorConfig;
class OAICreateAutoPredictorRequest_TimeAlignmentBoundary;

class OAICreateAutoPredictorRequest : public OAIObject {
public:
    OAICreateAutoPredictorRequest();
    OAICreateAutoPredictorRequest(QString json);
    ~OAICreateAutoPredictorRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPredictorName() const;
    void setPredictorName(const QString &predictor_name);
    bool is_predictor_name_Set() const;
    bool is_predictor_name_Valid() const;

    qint32 getForecastHorizon() const;
    void setForecastHorizon(const qint32 &forecast_horizon);
    bool is_forecast_horizon_Set() const;
    bool is_forecast_horizon_Valid() const;

    QList getForecastTypes() const;
    void setForecastTypes(const QList &forecast_types);
    bool is_forecast_types_Set() const;
    bool is_forecast_types_Valid() const;

    QList getForecastDimensions() const;
    void setForecastDimensions(const QList &forecast_dimensions);
    bool is_forecast_dimensions_Set() const;
    bool is_forecast_dimensions_Valid() const;

    QString getForecastFrequency() const;
    void setForecastFrequency(const QString &forecast_frequency);
    bool is_forecast_frequency_Set() const;
    bool is_forecast_frequency_Valid() const;

    OAICreateAutoPredictorRequest_DataConfig getDataConfig() const;
    void setDataConfig(const OAICreateAutoPredictorRequest_DataConfig &data_config);
    bool is_data_config_Set() const;
    bool is_data_config_Valid() const;

    OAIEncryptionConfig getEncryptionConfig() const;
    void setEncryptionConfig(const OAIEncryptionConfig &encryption_config);
    bool is_encryption_config_Set() const;
    bool is_encryption_config_Valid() const;

    QString getReferencePredictorArn() const;
    void setReferencePredictorArn(const QString &reference_predictor_arn);
    bool is_reference_predictor_arn_Set() const;
    bool is_reference_predictor_arn_Valid() const;

    OAIOptimizationMetric getOptimizationMetric() const;
    void setOptimizationMetric(const OAIOptimizationMetric &optimization_metric);
    bool is_optimization_metric_Set() const;
    bool is_optimization_metric_Valid() const;

    bool getExplainPredictor() const;
    void setExplainPredictor(const bool &explain_predictor);
    bool is_explain_predictor_Set() const;
    bool is_explain_predictor_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAICreateAutoPredictorRequest_MonitorConfig getMonitorConfig() const;
    void setMonitorConfig(const OAICreateAutoPredictorRequest_MonitorConfig &monitor_config);
    bool is_monitor_config_Set() const;
    bool is_monitor_config_Valid() const;

    OAICreateAutoPredictorRequest_TimeAlignmentBoundary getTimeAlignmentBoundary() const;
    void setTimeAlignmentBoundary(const OAICreateAutoPredictorRequest_TimeAlignmentBoundary &time_alignment_boundary);
    bool is_time_alignment_boundary_Set() const;
    bool is_time_alignment_boundary_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_predictor_name;
    bool m_predictor_name_isSet;
    bool m_predictor_name_isValid;

    qint32 m_forecast_horizon;
    bool m_forecast_horizon_isSet;
    bool m_forecast_horizon_isValid;

    QList m_forecast_types;
    bool m_forecast_types_isSet;
    bool m_forecast_types_isValid;

    QList m_forecast_dimensions;
    bool m_forecast_dimensions_isSet;
    bool m_forecast_dimensions_isValid;

    QString m_forecast_frequency;
    bool m_forecast_frequency_isSet;
    bool m_forecast_frequency_isValid;

    OAICreateAutoPredictorRequest_DataConfig m_data_config;
    bool m_data_config_isSet;
    bool m_data_config_isValid;

    OAIEncryptionConfig m_encryption_config;
    bool m_encryption_config_isSet;
    bool m_encryption_config_isValid;

    QString m_reference_predictor_arn;
    bool m_reference_predictor_arn_isSet;
    bool m_reference_predictor_arn_isValid;

    OAIOptimizationMetric m_optimization_metric;
    bool m_optimization_metric_isSet;
    bool m_optimization_metric_isValid;

    bool m_explain_predictor;
    bool m_explain_predictor_isSet;
    bool m_explain_predictor_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAICreateAutoPredictorRequest_MonitorConfig m_monitor_config;
    bool m_monitor_config_isSet;
    bool m_monitor_config_isValid;

    OAICreateAutoPredictorRequest_TimeAlignmentBoundary m_time_alignment_boundary;
    bool m_time_alignment_boundary_isSet;
    bool m_time_alignment_boundary_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAutoPredictorRequest)

#endif // OAICreateAutoPredictorRequest_H
