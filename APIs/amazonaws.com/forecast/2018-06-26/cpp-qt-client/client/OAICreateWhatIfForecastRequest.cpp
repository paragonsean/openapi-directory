/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWhatIfForecastRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWhatIfForecastRequest::OAICreateWhatIfForecastRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWhatIfForecastRequest::OAICreateWhatIfForecastRequest() {
    this->initializeModel();
}

OAICreateWhatIfForecastRequest::~OAICreateWhatIfForecastRequest() {}

void OAICreateWhatIfForecastRequest::initializeModel() {

    m_what_if_forecast_name_isSet = false;
    m_what_if_forecast_name_isValid = false;

    m_what_if_analysis_arn_isSet = false;
    m_what_if_analysis_arn_isValid = false;

    m_time_series_transformations_isSet = false;
    m_time_series_transformations_isValid = false;

    m_time_series_replacements_data_source_isSet = false;
    m_time_series_replacements_data_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateWhatIfForecastRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWhatIfForecastRequest::fromJsonObject(QJsonObject json) {

    m_what_if_forecast_name_isValid = ::OpenAPI::fromJsonValue(m_what_if_forecast_name, json[QString("WhatIfForecastName")]);
    m_what_if_forecast_name_isSet = !json[QString("WhatIfForecastName")].isNull() && m_what_if_forecast_name_isValid;

    m_what_if_analysis_arn_isValid = ::OpenAPI::fromJsonValue(m_what_if_analysis_arn, json[QString("WhatIfAnalysisArn")]);
    m_what_if_analysis_arn_isSet = !json[QString("WhatIfAnalysisArn")].isNull() && m_what_if_analysis_arn_isValid;

    m_time_series_transformations_isValid = ::OpenAPI::fromJsonValue(m_time_series_transformations, json[QString("TimeSeriesTransformations")]);
    m_time_series_transformations_isSet = !json[QString("TimeSeriesTransformations")].isNull() && m_time_series_transformations_isValid;

    m_time_series_replacements_data_source_isValid = ::OpenAPI::fromJsonValue(m_time_series_replacements_data_source, json[QString("TimeSeriesReplacementsDataSource")]);
    m_time_series_replacements_data_source_isSet = !json[QString("TimeSeriesReplacementsDataSource")].isNull() && m_time_series_replacements_data_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateWhatIfForecastRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWhatIfForecastRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_what_if_forecast_name_isSet) {
        obj.insert(QString("WhatIfForecastName"), ::OpenAPI::toJsonValue(m_what_if_forecast_name));
    }
    if (m_what_if_analysis_arn_isSet) {
        obj.insert(QString("WhatIfAnalysisArn"), ::OpenAPI::toJsonValue(m_what_if_analysis_arn));
    }
    if (m_time_series_transformations.isSet()) {
        obj.insert(QString("TimeSeriesTransformations"), ::OpenAPI::toJsonValue(m_time_series_transformations));
    }
    if (m_time_series_replacements_data_source.isSet()) {
        obj.insert(QString("TimeSeriesReplacementsDataSource"), ::OpenAPI::toJsonValue(m_time_series_replacements_data_source));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateWhatIfForecastRequest::getWhatIfForecastName() const {
    return m_what_if_forecast_name;
}
void OAICreateWhatIfForecastRequest::setWhatIfForecastName(const QString &what_if_forecast_name) {
    m_what_if_forecast_name = what_if_forecast_name;
    m_what_if_forecast_name_isSet = true;
}

bool OAICreateWhatIfForecastRequest::is_what_if_forecast_name_Set() const{
    return m_what_if_forecast_name_isSet;
}

bool OAICreateWhatIfForecastRequest::is_what_if_forecast_name_Valid() const{
    return m_what_if_forecast_name_isValid;
}

QString OAICreateWhatIfForecastRequest::getWhatIfAnalysisArn() const {
    return m_what_if_analysis_arn;
}
void OAICreateWhatIfForecastRequest::setWhatIfAnalysisArn(const QString &what_if_analysis_arn) {
    m_what_if_analysis_arn = what_if_analysis_arn;
    m_what_if_analysis_arn_isSet = true;
}

bool OAICreateWhatIfForecastRequest::is_what_if_analysis_arn_Set() const{
    return m_what_if_analysis_arn_isSet;
}

bool OAICreateWhatIfForecastRequest::is_what_if_analysis_arn_Valid() const{
    return m_what_if_analysis_arn_isValid;
}

QList OAICreateWhatIfForecastRequest::getTimeSeriesTransformations() const {
    return m_time_series_transformations;
}
void OAICreateWhatIfForecastRequest::setTimeSeriesTransformations(const QList &time_series_transformations) {
    m_time_series_transformations = time_series_transformations;
    m_time_series_transformations_isSet = true;
}

bool OAICreateWhatIfForecastRequest::is_time_series_transformations_Set() const{
    return m_time_series_transformations_isSet;
}

bool OAICreateWhatIfForecastRequest::is_time_series_transformations_Valid() const{
    return m_time_series_transformations_isValid;
}

OAICreateWhatIfForecastRequest_TimeSeriesReplacementsDataSource OAICreateWhatIfForecastRequest::getTimeSeriesReplacementsDataSource() const {
    return m_time_series_replacements_data_source;
}
void OAICreateWhatIfForecastRequest::setTimeSeriesReplacementsDataSource(const OAICreateWhatIfForecastRequest_TimeSeriesReplacementsDataSource &time_series_replacements_data_source) {
    m_time_series_replacements_data_source = time_series_replacements_data_source;
    m_time_series_replacements_data_source_isSet = true;
}

bool OAICreateWhatIfForecastRequest::is_time_series_replacements_data_source_Set() const{
    return m_time_series_replacements_data_source_isSet;
}

bool OAICreateWhatIfForecastRequest::is_time_series_replacements_data_source_Valid() const{
    return m_time_series_replacements_data_source_isValid;
}

QList OAICreateWhatIfForecastRequest::getTags() const {
    return m_tags;
}
void OAICreateWhatIfForecastRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateWhatIfForecastRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateWhatIfForecastRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateWhatIfForecastRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_what_if_forecast_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_what_if_analysis_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_series_replacements_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWhatIfForecastRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_what_if_forecast_name_isValid && m_what_if_analysis_arn_isValid && true;
}

} // namespace OpenAPI
