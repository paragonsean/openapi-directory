/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeaturizationMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeaturizationMethod::OAIFeaturizationMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeaturizationMethod::OAIFeaturizationMethod() {
    this->initializeModel();
}

OAIFeaturizationMethod::~OAIFeaturizationMethod() {}

void OAIFeaturizationMethod::initializeModel() {

    m_featurization_method_name_isSet = false;
    m_featurization_method_name_isValid = false;

    m_featurization_method_parameters_isSet = false;
    m_featurization_method_parameters_isValid = false;
}

void OAIFeaturizationMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeaturizationMethod::fromJsonObject(QJsonObject json) {

    m_featurization_method_name_isValid = ::OpenAPI::fromJsonValue(m_featurization_method_name, json[QString("FeaturizationMethodName")]);
    m_featurization_method_name_isSet = !json[QString("FeaturizationMethodName")].isNull() && m_featurization_method_name_isValid;

    m_featurization_method_parameters_isValid = ::OpenAPI::fromJsonValue(m_featurization_method_parameters, json[QString("FeaturizationMethodParameters")]);
    m_featurization_method_parameters_isSet = !json[QString("FeaturizationMethodParameters")].isNull() && m_featurization_method_parameters_isValid;
}

QString OAIFeaturizationMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeaturizationMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_featurization_method_name.isSet()) {
        obj.insert(QString("FeaturizationMethodName"), ::OpenAPI::toJsonValue(m_featurization_method_name));
    }
    if (m_featurization_method_parameters.isSet()) {
        obj.insert(QString("FeaturizationMethodParameters"), ::OpenAPI::toJsonValue(m_featurization_method_parameters));
    }
    return obj;
}

OAIFeaturizationMethodName OAIFeaturizationMethod::getFeaturizationMethodName() const {
    return m_featurization_method_name;
}
void OAIFeaturizationMethod::setFeaturizationMethodName(const OAIFeaturizationMethodName &featurization_method_name) {
    m_featurization_method_name = featurization_method_name;
    m_featurization_method_name_isSet = true;
}

bool OAIFeaturizationMethod::is_featurization_method_name_Set() const{
    return m_featurization_method_name_isSet;
}

bool OAIFeaturizationMethod::is_featurization_method_name_Valid() const{
    return m_featurization_method_name_isValid;
}

QMap OAIFeaturizationMethod::getFeaturizationMethodParameters() const {
    return m_featurization_method_parameters;
}
void OAIFeaturizationMethod::setFeaturizationMethodParameters(const QMap &featurization_method_parameters) {
    m_featurization_method_parameters = featurization_method_parameters;
    m_featurization_method_parameters_isSet = true;
}

bool OAIFeaturizationMethod::is_featurization_method_parameters_Set() const{
    return m_featurization_method_parameters_isSet;
}

bool OAIFeaturizationMethod::is_featurization_method_parameters_Valid() const{
    return m_featurization_method_parameters_isValid;
}

bool OAIFeaturizationMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_featurization_method_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featurization_method_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeaturizationMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_featurization_method_name_isValid && true;
}

} // namespace OpenAPI
