/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictorMonitorEvaluation_PredictorEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictorMonitorEvaluation_PredictorEvent::OAIPredictorMonitorEvaluation_PredictorEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictorMonitorEvaluation_PredictorEvent::OAIPredictorMonitorEvaluation_PredictorEvent() {
    this->initializeModel();
}

OAIPredictorMonitorEvaluation_PredictorEvent::~OAIPredictorMonitorEvaluation_PredictorEvent() {}

void OAIPredictorMonitorEvaluation_PredictorEvent::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_datetime_isSet = false;
    m_datetime_isValid = false;
}

void OAIPredictorMonitorEvaluation_PredictorEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictorMonitorEvaluation_PredictorEvent::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("Detail")]);
    m_detail_isSet = !json[QString("Detail")].isNull() && m_detail_isValid;

    m_datetime_isValid = ::OpenAPI::fromJsonValue(m_datetime, json[QString("Datetime")]);
    m_datetime_isSet = !json[QString("Datetime")].isNull() && m_datetime_isValid;
}

QString OAIPredictorMonitorEvaluation_PredictorEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictorMonitorEvaluation_PredictorEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("Detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_datetime_isSet) {
        obj.insert(QString("Datetime"), ::OpenAPI::toJsonValue(m_datetime));
    }
    return obj;
}

QString OAIPredictorMonitorEvaluation_PredictorEvent::getDetail() const {
    return m_detail;
}
void OAIPredictorMonitorEvaluation_PredictorEvent::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIPredictorMonitorEvaluation_PredictorEvent::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIPredictorMonitorEvaluation_PredictorEvent::is_detail_Valid() const{
    return m_detail_isValid;
}

QDateTime OAIPredictorMonitorEvaluation_PredictorEvent::getDatetime() const {
    return m_datetime;
}
void OAIPredictorMonitorEvaluation_PredictorEvent::setDatetime(const QDateTime &datetime) {
    m_datetime = datetime;
    m_datetime_isSet = true;
}

bool OAIPredictorMonitorEvaluation_PredictorEvent::is_datetime_Set() const{
    return m_datetime_isSet;
}

bool OAIPredictorMonitorEvaluation_PredictorEvent::is_datetime_Valid() const{
    return m_datetime_isValid;
}

bool OAIPredictorMonitorEvaluation_PredictorEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictorMonitorEvaluation_PredictorEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
