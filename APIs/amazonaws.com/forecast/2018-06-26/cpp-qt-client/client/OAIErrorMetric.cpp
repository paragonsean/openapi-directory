/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorMetric::OAIErrorMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorMetric::OAIErrorMetric() {
    this->initializeModel();
}

OAIErrorMetric::~OAIErrorMetric() {}

void OAIErrorMetric::initializeModel() {

    m_forecast_type_isSet = false;
    m_forecast_type_isValid = false;

    m_wape_isSet = false;
    m_wape_isValid = false;

    m_rmse_isSet = false;
    m_rmse_isValid = false;

    m_mase_isSet = false;
    m_mase_isValid = false;

    m_mape_isSet = false;
    m_mape_isValid = false;
}

void OAIErrorMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorMetric::fromJsonObject(QJsonObject json) {

    m_forecast_type_isValid = ::OpenAPI::fromJsonValue(m_forecast_type, json[QString("ForecastType")]);
    m_forecast_type_isSet = !json[QString("ForecastType")].isNull() && m_forecast_type_isValid;

    m_wape_isValid = ::OpenAPI::fromJsonValue(m_wape, json[QString("WAPE")]);
    m_wape_isSet = !json[QString("WAPE")].isNull() && m_wape_isValid;

    m_rmse_isValid = ::OpenAPI::fromJsonValue(m_rmse, json[QString("RMSE")]);
    m_rmse_isSet = !json[QString("RMSE")].isNull() && m_rmse_isValid;

    m_mase_isValid = ::OpenAPI::fromJsonValue(m_mase, json[QString("MASE")]);
    m_mase_isSet = !json[QString("MASE")].isNull() && m_mase_isValid;

    m_mape_isValid = ::OpenAPI::fromJsonValue(m_mape, json[QString("MAPE")]);
    m_mape_isSet = !json[QString("MAPE")].isNull() && m_mape_isValid;
}

QString OAIErrorMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast_type_isSet) {
        obj.insert(QString("ForecastType"), ::OpenAPI::toJsonValue(m_forecast_type));
    }
    if (m_wape_isSet) {
        obj.insert(QString("WAPE"), ::OpenAPI::toJsonValue(m_wape));
    }
    if (m_rmse_isSet) {
        obj.insert(QString("RMSE"), ::OpenAPI::toJsonValue(m_rmse));
    }
    if (m_mase_isSet) {
        obj.insert(QString("MASE"), ::OpenAPI::toJsonValue(m_mase));
    }
    if (m_mape_isSet) {
        obj.insert(QString("MAPE"), ::OpenAPI::toJsonValue(m_mape));
    }
    return obj;
}

QString OAIErrorMetric::getForecastType() const {
    return m_forecast_type;
}
void OAIErrorMetric::setForecastType(const QString &forecast_type) {
    m_forecast_type = forecast_type;
    m_forecast_type_isSet = true;
}

bool OAIErrorMetric::is_forecast_type_Set() const{
    return m_forecast_type_isSet;
}

bool OAIErrorMetric::is_forecast_type_Valid() const{
    return m_forecast_type_isValid;
}

double OAIErrorMetric::getWape() const {
    return m_wape;
}
void OAIErrorMetric::setWape(const double &wape) {
    m_wape = wape;
    m_wape_isSet = true;
}

bool OAIErrorMetric::is_wape_Set() const{
    return m_wape_isSet;
}

bool OAIErrorMetric::is_wape_Valid() const{
    return m_wape_isValid;
}

double OAIErrorMetric::getRmse() const {
    return m_rmse;
}
void OAIErrorMetric::setRmse(const double &rmse) {
    m_rmse = rmse;
    m_rmse_isSet = true;
}

bool OAIErrorMetric::is_rmse_Set() const{
    return m_rmse_isSet;
}

bool OAIErrorMetric::is_rmse_Valid() const{
    return m_rmse_isValid;
}

double OAIErrorMetric::getMase() const {
    return m_mase;
}
void OAIErrorMetric::setMase(const double &mase) {
    m_mase = mase;
    m_mase_isSet = true;
}

bool OAIErrorMetric::is_mase_Set() const{
    return m_mase_isSet;
}

bool OAIErrorMetric::is_mase_Valid() const{
    return m_mase_isValid;
}

double OAIErrorMetric::getMape() const {
    return m_mape;
}
void OAIErrorMetric::setMape(const double &mape) {
    m_mape = mape;
    m_mape_isSet = true;
}

bool OAIErrorMetric::is_mape_Set() const{
    return m_mape_isSet;
}

bool OAIErrorMetric::is_mape_Valid() const{
    return m_mape_isValid;
}

bool OAIErrorMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wape_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rmse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mape_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
