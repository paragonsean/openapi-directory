/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonth::OAIMonth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonth::OAIMonth() {
    this->initializeModel();
}

OAIMonth::~OAIMonth() {}

void OAIMonth::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMonth::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMonth::fromJson(QString jsonString) {
    
    if ( jsonString.compare("JANUARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::JANUARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FEBRUARY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::FEBRUARY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MARCH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::MARCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("APRIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::APRIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MAY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::MAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JUNE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::JUNE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JULY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::JULY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUGUST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::AUGUST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SEPTEMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::SEPTEMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OCTOBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::OCTOBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOVEMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::NOVEMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DECEMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMonth::DECEMBER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMonth::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMonth::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMonth::JANUARY:
            val = "JANUARY";
            break;
        case eOAIMonth::FEBRUARY:
            val = "FEBRUARY";
            break;
        case eOAIMonth::MARCH:
            val = "MARCH";
            break;
        case eOAIMonth::APRIL:
            val = "APRIL";
            break;
        case eOAIMonth::MAY:
            val = "MAY";
            break;
        case eOAIMonth::JUNE:
            val = "JUNE";
            break;
        case eOAIMonth::JULY:
            val = "JULY";
            break;
        case eOAIMonth::AUGUST:
            val = "AUGUST";
            break;
        case eOAIMonth::SEPTEMBER:
            val = "SEPTEMBER";
            break;
        case eOAIMonth::OCTOBER:
            val = "OCTOBER";
            break;
        case eOAIMonth::NOVEMBER:
            val = "NOVEMBER";
            break;
        case eOAIMonth::DECEMBER:
            val = "DECEMBER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMonth::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMonth::eOAIMonth OAIMonth::getValue() const {
    return m_value;
}

void OAIMonth::setValue(const OAIMonth::eOAIMonth& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMonth::isSet() const {
    
    return m_value_isSet;
}

bool OAIMonth::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
