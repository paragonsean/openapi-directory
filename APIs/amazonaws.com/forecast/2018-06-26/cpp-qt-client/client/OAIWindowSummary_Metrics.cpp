/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowSummary_Metrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowSummary_Metrics::OAIWindowSummary_Metrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowSummary_Metrics::OAIWindowSummary_Metrics() {
    this->initializeModel();
}

OAIWindowSummary_Metrics::~OAIWindowSummary_Metrics() {}

void OAIWindowSummary_Metrics::initializeModel() {

    m_rmse_isSet = false;
    m_rmse_isValid = false;

    m_weighted_quantile_losses_isSet = false;
    m_weighted_quantile_losses_isValid = false;

    m_error_metrics_isSet = false;
    m_error_metrics_isValid = false;

    m_average_weighted_quantile_loss_isSet = false;
    m_average_weighted_quantile_loss_isValid = false;
}

void OAIWindowSummary_Metrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowSummary_Metrics::fromJsonObject(QJsonObject json) {

    m_rmse_isValid = ::OpenAPI::fromJsonValue(m_rmse, json[QString("RMSE")]);
    m_rmse_isSet = !json[QString("RMSE")].isNull() && m_rmse_isValid;

    m_weighted_quantile_losses_isValid = ::OpenAPI::fromJsonValue(m_weighted_quantile_losses, json[QString("WeightedQuantileLosses")]);
    m_weighted_quantile_losses_isSet = !json[QString("WeightedQuantileLosses")].isNull() && m_weighted_quantile_losses_isValid;

    m_error_metrics_isValid = ::OpenAPI::fromJsonValue(m_error_metrics, json[QString("ErrorMetrics")]);
    m_error_metrics_isSet = !json[QString("ErrorMetrics")].isNull() && m_error_metrics_isValid;

    m_average_weighted_quantile_loss_isValid = ::OpenAPI::fromJsonValue(m_average_weighted_quantile_loss, json[QString("AverageWeightedQuantileLoss")]);
    m_average_weighted_quantile_loss_isSet = !json[QString("AverageWeightedQuantileLoss")].isNull() && m_average_weighted_quantile_loss_isValid;
}

QString OAIWindowSummary_Metrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowSummary_Metrics::asJsonObject() const {
    QJsonObject obj;
    if (m_rmse_isSet) {
        obj.insert(QString("RMSE"), ::OpenAPI::toJsonValue(m_rmse));
    }
    if (m_weighted_quantile_losses.isSet()) {
        obj.insert(QString("WeightedQuantileLosses"), ::OpenAPI::toJsonValue(m_weighted_quantile_losses));
    }
    if (m_error_metrics.isSet()) {
        obj.insert(QString("ErrorMetrics"), ::OpenAPI::toJsonValue(m_error_metrics));
    }
    if (m_average_weighted_quantile_loss_isSet) {
        obj.insert(QString("AverageWeightedQuantileLoss"), ::OpenAPI::toJsonValue(m_average_weighted_quantile_loss));
    }
    return obj;
}

double OAIWindowSummary_Metrics::getRmse() const {
    return m_rmse;
}
void OAIWindowSummary_Metrics::setRmse(const double &rmse) {
    m_rmse = rmse;
    m_rmse_isSet = true;
}

bool OAIWindowSummary_Metrics::is_rmse_Set() const{
    return m_rmse_isSet;
}

bool OAIWindowSummary_Metrics::is_rmse_Valid() const{
    return m_rmse_isValid;
}

QList OAIWindowSummary_Metrics::getWeightedQuantileLosses() const {
    return m_weighted_quantile_losses;
}
void OAIWindowSummary_Metrics::setWeightedQuantileLosses(const QList &weighted_quantile_losses) {
    m_weighted_quantile_losses = weighted_quantile_losses;
    m_weighted_quantile_losses_isSet = true;
}

bool OAIWindowSummary_Metrics::is_weighted_quantile_losses_Set() const{
    return m_weighted_quantile_losses_isSet;
}

bool OAIWindowSummary_Metrics::is_weighted_quantile_losses_Valid() const{
    return m_weighted_quantile_losses_isValid;
}

QList OAIWindowSummary_Metrics::getErrorMetrics() const {
    return m_error_metrics;
}
void OAIWindowSummary_Metrics::setErrorMetrics(const QList &error_metrics) {
    m_error_metrics = error_metrics;
    m_error_metrics_isSet = true;
}

bool OAIWindowSummary_Metrics::is_error_metrics_Set() const{
    return m_error_metrics_isSet;
}

bool OAIWindowSummary_Metrics::is_error_metrics_Valid() const{
    return m_error_metrics_isValid;
}

double OAIWindowSummary_Metrics::getAverageWeightedQuantileLoss() const {
    return m_average_weighted_quantile_loss;
}
void OAIWindowSummary_Metrics::setAverageWeightedQuantileLoss(const double &average_weighted_quantile_loss) {
    m_average_weighted_quantile_loss = average_weighted_quantile_loss;
    m_average_weighted_quantile_loss_isSet = true;
}

bool OAIWindowSummary_Metrics::is_average_weighted_quantile_loss_Set() const{
    return m_average_weighted_quantile_loss_isSet;
}

bool OAIWindowSummary_Metrics::is_average_weighted_quantile_loss_Valid() const{
    return m_average_weighted_quantile_loss_isValid;
}

bool OAIWindowSummary_Metrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rmse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_quantile_losses.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_weighted_quantile_loss_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowSummary_Metrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
