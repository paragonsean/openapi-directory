/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterRanges.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterRanges::OAIParameterRanges(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterRanges::OAIParameterRanges() {
    this->initializeModel();
}

OAIParameterRanges::~OAIParameterRanges() {}

void OAIParameterRanges::initializeModel() {

    m_categorical_parameter_ranges_isSet = false;
    m_categorical_parameter_ranges_isValid = false;

    m_continuous_parameter_ranges_isSet = false;
    m_continuous_parameter_ranges_isValid = false;

    m_integer_parameter_ranges_isSet = false;
    m_integer_parameter_ranges_isValid = false;
}

void OAIParameterRanges::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParameterRanges::fromJsonObject(QJsonObject json) {

    m_categorical_parameter_ranges_isValid = ::OpenAPI::fromJsonValue(m_categorical_parameter_ranges, json[QString("CategoricalParameterRanges")]);
    m_categorical_parameter_ranges_isSet = !json[QString("CategoricalParameterRanges")].isNull() && m_categorical_parameter_ranges_isValid;

    m_continuous_parameter_ranges_isValid = ::OpenAPI::fromJsonValue(m_continuous_parameter_ranges, json[QString("ContinuousParameterRanges")]);
    m_continuous_parameter_ranges_isSet = !json[QString("ContinuousParameterRanges")].isNull() && m_continuous_parameter_ranges_isValid;

    m_integer_parameter_ranges_isValid = ::OpenAPI::fromJsonValue(m_integer_parameter_ranges, json[QString("IntegerParameterRanges")]);
    m_integer_parameter_ranges_isSet = !json[QString("IntegerParameterRanges")].isNull() && m_integer_parameter_ranges_isValid;
}

QString OAIParameterRanges::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParameterRanges::asJsonObject() const {
    QJsonObject obj;
    if (m_categorical_parameter_ranges.isSet()) {
        obj.insert(QString("CategoricalParameterRanges"), ::OpenAPI::toJsonValue(m_categorical_parameter_ranges));
    }
    if (m_continuous_parameter_ranges.isSet()) {
        obj.insert(QString("ContinuousParameterRanges"), ::OpenAPI::toJsonValue(m_continuous_parameter_ranges));
    }
    if (m_integer_parameter_ranges.isSet()) {
        obj.insert(QString("IntegerParameterRanges"), ::OpenAPI::toJsonValue(m_integer_parameter_ranges));
    }
    return obj;
}

QList OAIParameterRanges::getCategoricalParameterRanges() const {
    return m_categorical_parameter_ranges;
}
void OAIParameterRanges::setCategoricalParameterRanges(const QList &categorical_parameter_ranges) {
    m_categorical_parameter_ranges = categorical_parameter_ranges;
    m_categorical_parameter_ranges_isSet = true;
}

bool OAIParameterRanges::is_categorical_parameter_ranges_Set() const{
    return m_categorical_parameter_ranges_isSet;
}

bool OAIParameterRanges::is_categorical_parameter_ranges_Valid() const{
    return m_categorical_parameter_ranges_isValid;
}

QList OAIParameterRanges::getContinuousParameterRanges() const {
    return m_continuous_parameter_ranges;
}
void OAIParameterRanges::setContinuousParameterRanges(const QList &continuous_parameter_ranges) {
    m_continuous_parameter_ranges = continuous_parameter_ranges;
    m_continuous_parameter_ranges_isSet = true;
}

bool OAIParameterRanges::is_continuous_parameter_ranges_Set() const{
    return m_continuous_parameter_ranges_isSet;
}

bool OAIParameterRanges::is_continuous_parameter_ranges_Valid() const{
    return m_continuous_parameter_ranges_isValid;
}

QList OAIParameterRanges::getIntegerParameterRanges() const {
    return m_integer_parameter_ranges;
}
void OAIParameterRanges::setIntegerParameterRanges(const QList &integer_parameter_ranges) {
    m_integer_parameter_ranges = integer_parameter_ranges;
    m_integer_parameter_ranges_isSet = true;
}

bool OAIParameterRanges::is_integer_parameter_ranges_Set() const{
    return m_integer_parameter_ranges_isSet;
}

bool OAIParameterRanges::is_integer_parameter_ranges_Valid() const{
    return m_integer_parameter_ranges_isValid;
}

bool OAIParameterRanges::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categorical_parameter_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_continuous_parameter_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integer_parameter_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParameterRanges::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
