/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDatasetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDatasetResponse::OAIDescribeDatasetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDatasetResponse::OAIDescribeDatasetResponse() {
    this->initializeModel();
}

OAIDescribeDatasetResponse::~OAIDescribeDatasetResponse() {}

void OAIDescribeDatasetResponse::initializeModel() {

    m_dataset_arn_isSet = false;
    m_dataset_arn_isValid = false;

    m_dataset_name_isSet = false;
    m_dataset_name_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_dataset_type_isSet = false;
    m_dataset_type_isValid = false;

    m_data_frequency_isSet = false;
    m_data_frequency_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;
}

void OAIDescribeDatasetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDatasetResponse::fromJsonObject(QJsonObject json) {

    m_dataset_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_arn, json[QString("DatasetArn")]);
    m_dataset_arn_isSet = !json[QString("DatasetArn")].isNull() && m_dataset_arn_isValid;

    m_dataset_name_isValid = ::OpenAPI::fromJsonValue(m_dataset_name, json[QString("DatasetName")]);
    m_dataset_name_isSet = !json[QString("DatasetName")].isNull() && m_dataset_name_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("Domain")]);
    m_domain_isSet = !json[QString("Domain")].isNull() && m_domain_isValid;

    m_dataset_type_isValid = ::OpenAPI::fromJsonValue(m_dataset_type, json[QString("DatasetType")]);
    m_dataset_type_isSet = !json[QString("DatasetType")].isNull() && m_dataset_type_isValid;

    m_data_frequency_isValid = ::OpenAPI::fromJsonValue(m_data_frequency, json[QString("DataFrequency")]);
    m_data_frequency_isSet = !json[QString("DataFrequency")].isNull() && m_data_frequency_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;
}

QString OAIDescribeDatasetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDatasetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_arn_isSet) {
        obj.insert(QString("DatasetArn"), ::OpenAPI::toJsonValue(m_dataset_arn));
    }
    if (m_dataset_name_isSet) {
        obj.insert(QString("DatasetName"), ::OpenAPI::toJsonValue(m_dataset_name));
    }
    if (m_domain.isSet()) {
        obj.insert(QString("Domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_dataset_type.isSet()) {
        obj.insert(QString("DatasetType"), ::OpenAPI::toJsonValue(m_dataset_type));
    }
    if (m_data_frequency_isSet) {
        obj.insert(QString("DataFrequency"), ::OpenAPI::toJsonValue(m_data_frequency));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    return obj;
}

QString OAIDescribeDatasetResponse::getDatasetArn() const {
    return m_dataset_arn;
}
void OAIDescribeDatasetResponse::setDatasetArn(const QString &dataset_arn) {
    m_dataset_arn = dataset_arn;
    m_dataset_arn_isSet = true;
}

bool OAIDescribeDatasetResponse::is_dataset_arn_Set() const{
    return m_dataset_arn_isSet;
}

bool OAIDescribeDatasetResponse::is_dataset_arn_Valid() const{
    return m_dataset_arn_isValid;
}

QString OAIDescribeDatasetResponse::getDatasetName() const {
    return m_dataset_name;
}
void OAIDescribeDatasetResponse::setDatasetName(const QString &dataset_name) {
    m_dataset_name = dataset_name;
    m_dataset_name_isSet = true;
}

bool OAIDescribeDatasetResponse::is_dataset_name_Set() const{
    return m_dataset_name_isSet;
}

bool OAIDescribeDatasetResponse::is_dataset_name_Valid() const{
    return m_dataset_name_isValid;
}

OAIDomain OAIDescribeDatasetResponse::getDomain() const {
    return m_domain;
}
void OAIDescribeDatasetResponse::setDomain(const OAIDomain &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDescribeDatasetResponse::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDescribeDatasetResponse::is_domain_Valid() const{
    return m_domain_isValid;
}

OAIDatasetType OAIDescribeDatasetResponse::getDatasetType() const {
    return m_dataset_type;
}
void OAIDescribeDatasetResponse::setDatasetType(const OAIDatasetType &dataset_type) {
    m_dataset_type = dataset_type;
    m_dataset_type_isSet = true;
}

bool OAIDescribeDatasetResponse::is_dataset_type_Set() const{
    return m_dataset_type_isSet;
}

bool OAIDescribeDatasetResponse::is_dataset_type_Valid() const{
    return m_dataset_type_isValid;
}

QString OAIDescribeDatasetResponse::getDataFrequency() const {
    return m_data_frequency;
}
void OAIDescribeDatasetResponse::setDataFrequency(const QString &data_frequency) {
    m_data_frequency = data_frequency;
    m_data_frequency_isSet = true;
}

bool OAIDescribeDatasetResponse::is_data_frequency_Set() const{
    return m_data_frequency_isSet;
}

bool OAIDescribeDatasetResponse::is_data_frequency_Valid() const{
    return m_data_frequency_isValid;
}

OAIDescribeDatasetResponse_Schema OAIDescribeDatasetResponse::getSchema() const {
    return m_schema;
}
void OAIDescribeDatasetResponse::setSchema(const OAIDescribeDatasetResponse_Schema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDescribeDatasetResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDescribeDatasetResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

OAIDescribeDatasetResponse_EncryptionConfig OAIDescribeDatasetResponse::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIDescribeDatasetResponse::setEncryptionConfig(const OAIDescribeDatasetResponse_EncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIDescribeDatasetResponse::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIDescribeDatasetResponse::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIDescribeDatasetResponse::getStatus() const {
    return m_status;
}
void OAIDescribeDatasetResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeDatasetResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeDatasetResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeDatasetResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeDatasetResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeDatasetResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeDatasetResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeDatasetResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribeDatasetResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribeDatasetResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribeDatasetResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

bool OAIDescribeDatasetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDatasetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
