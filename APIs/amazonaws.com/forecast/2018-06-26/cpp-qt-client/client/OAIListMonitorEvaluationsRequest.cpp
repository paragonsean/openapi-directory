/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListMonitorEvaluationsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListMonitorEvaluationsRequest::OAIListMonitorEvaluationsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListMonitorEvaluationsRequest::OAIListMonitorEvaluationsRequest() {
    this->initializeModel();
}

OAIListMonitorEvaluationsRequest::~OAIListMonitorEvaluationsRequest() {}

void OAIListMonitorEvaluationsRequest::initializeModel() {

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_monitor_arn_isSet = false;
    m_monitor_arn_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAIListMonitorEvaluationsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListMonitorEvaluationsRequest::fromJsonObject(QJsonObject json) {

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_monitor_arn_isValid = ::OpenAPI::fromJsonValue(m_monitor_arn, json[QString("MonitorArn")]);
    m_monitor_arn_isSet = !json[QString("MonitorArn")].isNull() && m_monitor_arn_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("Filters")]);
    m_filters_isSet = !json[QString("Filters")].isNull() && m_filters_isValid;
}

QString OAIListMonitorEvaluationsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListMonitorEvaluationsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_monitor_arn_isSet) {
        obj.insert(QString("MonitorArn"), ::OpenAPI::toJsonValue(m_monitor_arn));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("Filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QString OAIListMonitorEvaluationsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListMonitorEvaluationsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListMonitorEvaluationsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListMonitorEvaluationsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListMonitorEvaluationsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListMonitorEvaluationsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListMonitorEvaluationsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListMonitorEvaluationsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIListMonitorEvaluationsRequest::getMonitorArn() const {
    return m_monitor_arn;
}
void OAIListMonitorEvaluationsRequest::setMonitorArn(const QString &monitor_arn) {
    m_monitor_arn = monitor_arn;
    m_monitor_arn_isSet = true;
}

bool OAIListMonitorEvaluationsRequest::is_monitor_arn_Set() const{
    return m_monitor_arn_isSet;
}

bool OAIListMonitorEvaluationsRequest::is_monitor_arn_Valid() const{
    return m_monitor_arn_isValid;
}

QList OAIListMonitorEvaluationsRequest::getFilters() const {
    return m_filters;
}
void OAIListMonitorEvaluationsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIListMonitorEvaluationsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIListMonitorEvaluationsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIListMonitorEvaluationsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListMonitorEvaluationsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_monitor_arn_isValid && true;
}

} // namespace OpenAPI
