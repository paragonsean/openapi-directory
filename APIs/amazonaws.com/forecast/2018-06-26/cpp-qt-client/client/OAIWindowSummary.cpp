/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWindowSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWindowSummary::OAIWindowSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWindowSummary::OAIWindowSummary() {
    this->initializeModel();
}

OAIWindowSummary::~OAIWindowSummary() {}

void OAIWindowSummary::initializeModel() {

    m_test_window_start_isSet = false;
    m_test_window_start_isValid = false;

    m_test_window_end_isSet = false;
    m_test_window_end_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_evaluation_type_isSet = false;
    m_evaluation_type_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;
}

void OAIWindowSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWindowSummary::fromJsonObject(QJsonObject json) {

    m_test_window_start_isValid = ::OpenAPI::fromJsonValue(m_test_window_start, json[QString("TestWindowStart")]);
    m_test_window_start_isSet = !json[QString("TestWindowStart")].isNull() && m_test_window_start_isValid;

    m_test_window_end_isValid = ::OpenAPI::fromJsonValue(m_test_window_end, json[QString("TestWindowEnd")]);
    m_test_window_end_isSet = !json[QString("TestWindowEnd")].isNull() && m_test_window_end_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("ItemCount")]);
    m_item_count_isSet = !json[QString("ItemCount")].isNull() && m_item_count_isValid;

    m_evaluation_type_isValid = ::OpenAPI::fromJsonValue(m_evaluation_type, json[QString("EvaluationType")]);
    m_evaluation_type_isSet = !json[QString("EvaluationType")].isNull() && m_evaluation_type_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("Metrics")]);
    m_metrics_isSet = !json[QString("Metrics")].isNull() && m_metrics_isValid;
}

QString OAIWindowSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWindowSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_test_window_start_isSet) {
        obj.insert(QString("TestWindowStart"), ::OpenAPI::toJsonValue(m_test_window_start));
    }
    if (m_test_window_end_isSet) {
        obj.insert(QString("TestWindowEnd"), ::OpenAPI::toJsonValue(m_test_window_end));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("ItemCount"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_evaluation_type.isSet()) {
        obj.insert(QString("EvaluationType"), ::OpenAPI::toJsonValue(m_evaluation_type));
    }
    if (m_metrics.isSet()) {
        obj.insert(QString("Metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    return obj;
}

QDateTime OAIWindowSummary::getTestWindowStart() const {
    return m_test_window_start;
}
void OAIWindowSummary::setTestWindowStart(const QDateTime &test_window_start) {
    m_test_window_start = test_window_start;
    m_test_window_start_isSet = true;
}

bool OAIWindowSummary::is_test_window_start_Set() const{
    return m_test_window_start_isSet;
}

bool OAIWindowSummary::is_test_window_start_Valid() const{
    return m_test_window_start_isValid;
}

QDateTime OAIWindowSummary::getTestWindowEnd() const {
    return m_test_window_end;
}
void OAIWindowSummary::setTestWindowEnd(const QDateTime &test_window_end) {
    m_test_window_end = test_window_end;
    m_test_window_end_isSet = true;
}

bool OAIWindowSummary::is_test_window_end_Set() const{
    return m_test_window_end_isSet;
}

bool OAIWindowSummary::is_test_window_end_Valid() const{
    return m_test_window_end_isValid;
}

qint32 OAIWindowSummary::getItemCount() const {
    return m_item_count;
}
void OAIWindowSummary::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIWindowSummary::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIWindowSummary::is_item_count_Valid() const{
    return m_item_count_isValid;
}

OAIEvaluationType OAIWindowSummary::getEvaluationType() const {
    return m_evaluation_type;
}
void OAIWindowSummary::setEvaluationType(const OAIEvaluationType &evaluation_type) {
    m_evaluation_type = evaluation_type;
    m_evaluation_type_isSet = true;
}

bool OAIWindowSummary::is_evaluation_type_Set() const{
    return m_evaluation_type_isSet;
}

bool OAIWindowSummary::is_evaluation_type_Valid() const{
    return m_evaluation_type_isValid;
}

OAIWindowSummary_Metrics OAIWindowSummary::getMetrics() const {
    return m_metrics;
}
void OAIWindowSummary::setMetrics(const OAIWindowSummary_Metrics &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIWindowSummary::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIWindowSummary::is_metrics_Valid() const{
    return m_metrics_isValid;
}

bool OAIWindowSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_test_window_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_window_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evaluation_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWindowSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
