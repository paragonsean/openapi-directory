/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeExplainabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeExplainabilityResponse::OAIDescribeExplainabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeExplainabilityResponse::OAIDescribeExplainabilityResponse() {
    this->initializeModel();
}

OAIDescribeExplainabilityResponse::~OAIDescribeExplainabilityResponse() {}

void OAIDescribeExplainabilityResponse::initializeModel() {

    m_explainability_arn_isSet = false;
    m_explainability_arn_isValid = false;

    m_explainability_name_isSet = false;
    m_explainability_name_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_explainability_config_isSet = false;
    m_explainability_config_isValid = false;

    m_enable_visualization_isSet = false;
    m_enable_visualization_isValid = false;

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_estimated_time_remaining_in_minutes_isSet = false;
    m_estimated_time_remaining_in_minutes_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;
}

void OAIDescribeExplainabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeExplainabilityResponse::fromJsonObject(QJsonObject json) {

    m_explainability_arn_isValid = ::OpenAPI::fromJsonValue(m_explainability_arn, json[QString("ExplainabilityArn")]);
    m_explainability_arn_isSet = !json[QString("ExplainabilityArn")].isNull() && m_explainability_arn_isValid;

    m_explainability_name_isValid = ::OpenAPI::fromJsonValue(m_explainability_name, json[QString("ExplainabilityName")]);
    m_explainability_name_isSet = !json[QString("ExplainabilityName")].isNull() && m_explainability_name_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_explainability_config_isValid = ::OpenAPI::fromJsonValue(m_explainability_config, json[QString("ExplainabilityConfig")]);
    m_explainability_config_isSet = !json[QString("ExplainabilityConfig")].isNull() && m_explainability_config_isValid;

    m_enable_visualization_isValid = ::OpenAPI::fromJsonValue(m_enable_visualization, json[QString("EnableVisualization")]);
    m_enable_visualization_isSet = !json[QString("EnableVisualization")].isNull() && m_enable_visualization_isValid;

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("StartDateTime")]);
    m_start_date_time_isSet = !json[QString("StartDateTime")].isNull() && m_start_date_time_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("EndDateTime")]);
    m_end_date_time_isSet = !json[QString("EndDateTime")].isNull() && m_end_date_time_isValid;

    m_estimated_time_remaining_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_remaining_in_minutes, json[QString("EstimatedTimeRemainingInMinutes")]);
    m_estimated_time_remaining_in_minutes_isSet = !json[QString("EstimatedTimeRemainingInMinutes")].isNull() && m_estimated_time_remaining_in_minutes_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;
}

QString OAIDescribeExplainabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeExplainabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_explainability_arn_isSet) {
        obj.insert(QString("ExplainabilityArn"), ::OpenAPI::toJsonValue(m_explainability_arn));
    }
    if (m_explainability_name_isSet) {
        obj.insert(QString("ExplainabilityName"), ::OpenAPI::toJsonValue(m_explainability_name));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_explainability_config.isSet()) {
        obj.insert(QString("ExplainabilityConfig"), ::OpenAPI::toJsonValue(m_explainability_config));
    }
    if (m_enable_visualization_isSet) {
        obj.insert(QString("EnableVisualization"), ::OpenAPI::toJsonValue(m_enable_visualization));
    }
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("StartDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("EndDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_estimated_time_remaining_in_minutes_isSet) {
        obj.insert(QString("EstimatedTimeRemainingInMinutes"), ::OpenAPI::toJsonValue(m_estimated_time_remaining_in_minutes));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    return obj;
}

QString OAIDescribeExplainabilityResponse::getExplainabilityArn() const {
    return m_explainability_arn;
}
void OAIDescribeExplainabilityResponse::setExplainabilityArn(const QString &explainability_arn) {
    m_explainability_arn = explainability_arn;
    m_explainability_arn_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_explainability_arn_Set() const{
    return m_explainability_arn_isSet;
}

bool OAIDescribeExplainabilityResponse::is_explainability_arn_Valid() const{
    return m_explainability_arn_isValid;
}

QString OAIDescribeExplainabilityResponse::getExplainabilityName() const {
    return m_explainability_name;
}
void OAIDescribeExplainabilityResponse::setExplainabilityName(const QString &explainability_name) {
    m_explainability_name = explainability_name;
    m_explainability_name_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_explainability_name_Set() const{
    return m_explainability_name_isSet;
}

bool OAIDescribeExplainabilityResponse::is_explainability_name_Valid() const{
    return m_explainability_name_isValid;
}

QString OAIDescribeExplainabilityResponse::getResourceArn() const {
    return m_resource_arn;
}
void OAIDescribeExplainabilityResponse::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIDescribeExplainabilityResponse::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAICreateExplainabilityRequest_ExplainabilityConfig OAIDescribeExplainabilityResponse::getExplainabilityConfig() const {
    return m_explainability_config;
}
void OAIDescribeExplainabilityResponse::setExplainabilityConfig(const OAICreateExplainabilityRequest_ExplainabilityConfig &explainability_config) {
    m_explainability_config = explainability_config;
    m_explainability_config_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_explainability_config_Set() const{
    return m_explainability_config_isSet;
}

bool OAIDescribeExplainabilityResponse::is_explainability_config_Valid() const{
    return m_explainability_config_isValid;
}

bool OAIDescribeExplainabilityResponse::getEnableVisualization() const {
    return m_enable_visualization;
}
void OAIDescribeExplainabilityResponse::setEnableVisualization(const bool &enable_visualization) {
    m_enable_visualization = enable_visualization;
    m_enable_visualization_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_enable_visualization_Set() const{
    return m_enable_visualization_isSet;
}

bool OAIDescribeExplainabilityResponse::is_enable_visualization_Valid() const{
    return m_enable_visualization_isValid;
}

OAIDataSource OAIDescribeExplainabilityResponse::getDataSource() const {
    return m_data_source;
}
void OAIDescribeExplainabilityResponse::setDataSource(const OAIDataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAIDescribeExplainabilityResponse::is_data_source_Valid() const{
    return m_data_source_isValid;
}

OAISchema OAIDescribeExplainabilityResponse::getSchema() const {
    return m_schema;
}
void OAIDescribeExplainabilityResponse::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAIDescribeExplainabilityResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAIDescribeExplainabilityResponse::getStartDateTime() const {
    return m_start_date_time;
}
void OAIDescribeExplainabilityResponse::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIDescribeExplainabilityResponse::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIDescribeExplainabilityResponse::getEndDateTime() const {
    return m_end_date_time;
}
void OAIDescribeExplainabilityResponse::setEndDateTime(const QString &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIDescribeExplainabilityResponse::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

qint32 OAIDescribeExplainabilityResponse::getEstimatedTimeRemainingInMinutes() const {
    return m_estimated_time_remaining_in_minutes;
}
void OAIDescribeExplainabilityResponse::setEstimatedTimeRemainingInMinutes(const qint32 &estimated_time_remaining_in_minutes) {
    m_estimated_time_remaining_in_minutes = estimated_time_remaining_in_minutes;
    m_estimated_time_remaining_in_minutes_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_estimated_time_remaining_in_minutes_Set() const{
    return m_estimated_time_remaining_in_minutes_isSet;
}

bool OAIDescribeExplainabilityResponse::is_estimated_time_remaining_in_minutes_Valid() const{
    return m_estimated_time_remaining_in_minutes_isValid;
}

QString OAIDescribeExplainabilityResponse::getMessage() const {
    return m_message;
}
void OAIDescribeExplainabilityResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDescribeExplainabilityResponse::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIDescribeExplainabilityResponse::getStatus() const {
    return m_status;
}
void OAIDescribeExplainabilityResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeExplainabilityResponse::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeExplainabilityResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeExplainabilityResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeExplainabilityResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeExplainabilityResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribeExplainabilityResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribeExplainabilityResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribeExplainabilityResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

bool OAIDescribeExplainabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_explainability_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explainability_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explainability_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_visualization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_remaining_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeExplainabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
