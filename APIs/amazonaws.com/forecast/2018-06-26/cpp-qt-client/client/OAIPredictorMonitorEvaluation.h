/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPredictorMonitorEvaluation.h
 *
 * Describes the results of a monitor evaluation.
 */

#ifndef OAIPredictorMonitorEvaluation_H
#define OAIPredictorMonitorEvaluation_H

#include <QJsonObject>

#include "OAIPredictorMonitorEvaluation_MonitorDataSource.h"
#include "OAIPredictorMonitorEvaluation_PredictorEvent.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPredictorMonitorEvaluation_PredictorEvent;
class OAIPredictorMonitorEvaluation_MonitorDataSource;

class OAIPredictorMonitorEvaluation : public OAIObject {
public:
    OAIPredictorMonitorEvaluation();
    OAIPredictorMonitorEvaluation(QString json);
    ~OAIPredictorMonitorEvaluation() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getResourceArn() const;
    void setResourceArn(const QString &resource_arn);
    bool is_resource_arn_Set() const;
    bool is_resource_arn_Valid() const;

    QString getMonitorArn() const;
    void setMonitorArn(const QString &monitor_arn);
    bool is_monitor_arn_Set() const;
    bool is_monitor_arn_Valid() const;

    QDateTime getEvaluationTime() const;
    void setEvaluationTime(const QDateTime &evaluation_time);
    bool is_evaluation_time_Set() const;
    bool is_evaluation_time_Valid() const;

    QString getEvaluationState() const;
    void setEvaluationState(const QString &evaluation_state);
    bool is_evaluation_state_Set() const;
    bool is_evaluation_state_Valid() const;

    QDateTime getWindowStartDatetime() const;
    void setWindowStartDatetime(const QDateTime &window_start_datetime);
    bool is_window_start_datetime_Set() const;
    bool is_window_start_datetime_Valid() const;

    QDateTime getWindowEndDatetime() const;
    void setWindowEndDatetime(const QDateTime &window_end_datetime);
    bool is_window_end_datetime_Set() const;
    bool is_window_end_datetime_Valid() const;

    OAIPredictorMonitorEvaluation_PredictorEvent getPredictorEvent() const;
    void setPredictorEvent(const OAIPredictorMonitorEvaluation_PredictorEvent &predictor_event);
    bool is_predictor_event_Set() const;
    bool is_predictor_event_Valid() const;

    OAIPredictorMonitorEvaluation_MonitorDataSource getMonitorDataSource() const;
    void setMonitorDataSource(const OAIPredictorMonitorEvaluation_MonitorDataSource &monitor_data_source);
    bool is_monitor_data_source_Set() const;
    bool is_monitor_data_source_Valid() const;

    QList getMetricResults() const;
    void setMetricResults(const QList &metric_results);
    bool is_metric_results_Set() const;
    bool is_metric_results_Valid() const;

    qint32 getNumItemsEvaluated() const;
    void setNumItemsEvaluated(const qint32 &num_items_evaluated);
    bool is_num_items_evaluated_Set() const;
    bool is_num_items_evaluated_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_resource_arn;
    bool m_resource_arn_isSet;
    bool m_resource_arn_isValid;

    QString m_monitor_arn;
    bool m_monitor_arn_isSet;
    bool m_monitor_arn_isValid;

    QDateTime m_evaluation_time;
    bool m_evaluation_time_isSet;
    bool m_evaluation_time_isValid;

    QString m_evaluation_state;
    bool m_evaluation_state_isSet;
    bool m_evaluation_state_isValid;

    QDateTime m_window_start_datetime;
    bool m_window_start_datetime_isSet;
    bool m_window_start_datetime_isValid;

    QDateTime m_window_end_datetime;
    bool m_window_end_datetime_isSet;
    bool m_window_end_datetime_isValid;

    OAIPredictorMonitorEvaluation_PredictorEvent m_predictor_event;
    bool m_predictor_event_isSet;
    bool m_predictor_event_isValid;

    OAIPredictorMonitorEvaluation_MonitorDataSource m_monitor_data_source;
    bool m_monitor_data_source_isSet;
    bool m_monitor_data_source_isValid;

    QList m_metric_results;
    bool m_metric_results_isSet;
    bool m_metric_results_isValid;

    qint32 m_num_items_evaluated;
    bool m_num_items_evaluated_isSet;
    bool m_num_items_evaluated_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPredictorMonitorEvaluation)

#endif // OAIPredictorMonitorEvaluation_H
