/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateDatasetImportJobRequest.h
 *
 * 
 */

#ifndef OAICreateDatasetImportJobRequest_H
#define OAICreateDatasetImportJobRequest_H

#include <QJsonObject>

#include "OAICreateDatasetImportJobRequest_DataSource.h"
#include "OAIImportMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateDatasetImportJobRequest_DataSource;

class OAICreateDatasetImportJobRequest : public OAIObject {
public:
    OAICreateDatasetImportJobRequest();
    OAICreateDatasetImportJobRequest(QString json);
    ~OAICreateDatasetImportJobRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDatasetImportJobName() const;
    void setDatasetImportJobName(const QString &dataset_import_job_name);
    bool is_dataset_import_job_name_Set() const;
    bool is_dataset_import_job_name_Valid() const;

    QString getDatasetArn() const;
    void setDatasetArn(const QString &dataset_arn);
    bool is_dataset_arn_Set() const;
    bool is_dataset_arn_Valid() const;

    OAICreateDatasetImportJobRequest_DataSource getDataSource() const;
    void setDataSource(const OAICreateDatasetImportJobRequest_DataSource &data_source);
    bool is_data_source_Set() const;
    bool is_data_source_Valid() const;

    QString getTimestampFormat() const;
    void setTimestampFormat(const QString &timestamp_format);
    bool is_timestamp_format_Set() const;
    bool is_timestamp_format_Valid() const;

    QString getTimeZone() const;
    void setTimeZone(const QString &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    bool getUseGeolocationForTimeZone() const;
    void setUseGeolocationForTimeZone(const bool &use_geolocation_for_time_zone);
    bool is_use_geolocation_for_time_zone_Set() const;
    bool is_use_geolocation_for_time_zone_Valid() const;

    QString getGeolocationFormat() const;
    void setGeolocationFormat(const QString &geolocation_format);
    bool is_geolocation_format_Set() const;
    bool is_geolocation_format_Valid() const;

    QList getTags() const;
    void setTags(const QList &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    OAIImportMode getImportMode() const;
    void setImportMode(const OAIImportMode &import_mode);
    bool is_import_mode_Set() const;
    bool is_import_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dataset_import_job_name;
    bool m_dataset_import_job_name_isSet;
    bool m_dataset_import_job_name_isValid;

    QString m_dataset_arn;
    bool m_dataset_arn_isSet;
    bool m_dataset_arn_isValid;

    OAICreateDatasetImportJobRequest_DataSource m_data_source;
    bool m_data_source_isSet;
    bool m_data_source_isValid;

    QString m_timestamp_format;
    bool m_timestamp_format_isSet;
    bool m_timestamp_format_isValid;

    QString m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    bool m_use_geolocation_for_time_zone;
    bool m_use_geolocation_for_time_zone_isSet;
    bool m_use_geolocation_for_time_zone_isValid;

    QString m_geolocation_format;
    bool m_geolocation_format_isSet;
    bool m_geolocation_format_isValid;

    QList m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    OAIImportMode m_import_mode;
    bool m_import_mode_isSet;
    bool m_import_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateDatasetImportJobRequest)

#endif // OAICreateDatasetImportJobRequest_H
