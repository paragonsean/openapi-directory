/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFilter.h
 *
 * Describes a filter for choosing a subset of objects. Each filter consists of a condition and a match statement. The condition is either &lt;code&gt;IS&lt;/code&gt; or &lt;code&gt;IS_NOT&lt;/code&gt;, which specifies whether to include or exclude the objects that match the statement, respectively. The match statement consists of a key and a value.
 */

#ifndef OAIFilter_H
#define OAIFilter_H

#include <QJsonObject>

#include "OAIFilterConditionString.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFilter : public OAIObject {
public:
    OAIFilter();
    OAIFilter(QString json);
    ~OAIFilter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    OAIFilterConditionString getCondition() const;
    void setCondition(const OAIFilterConditionString &condition);
    bool is_condition_Set() const;
    bool is_condition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    OAIFilterConditionString m_condition;
    bool m_condition_isSet;
    bool m_condition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFilter)

#endif // OAIFilter_H
