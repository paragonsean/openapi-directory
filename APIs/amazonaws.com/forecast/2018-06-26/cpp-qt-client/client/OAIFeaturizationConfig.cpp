/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeaturizationConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeaturizationConfig::OAIFeaturizationConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeaturizationConfig::OAIFeaturizationConfig() {
    this->initializeModel();
}

OAIFeaturizationConfig::~OAIFeaturizationConfig() {}

void OAIFeaturizationConfig::initializeModel() {

    m_forecast_frequency_isSet = false;
    m_forecast_frequency_isValid = false;

    m_forecast_dimensions_isSet = false;
    m_forecast_dimensions_isValid = false;

    m_featurizations_isSet = false;
    m_featurizations_isValid = false;
}

void OAIFeaturizationConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeaturizationConfig::fromJsonObject(QJsonObject json) {

    m_forecast_frequency_isValid = ::OpenAPI::fromJsonValue(m_forecast_frequency, json[QString("ForecastFrequency")]);
    m_forecast_frequency_isSet = !json[QString("ForecastFrequency")].isNull() && m_forecast_frequency_isValid;

    m_forecast_dimensions_isValid = ::OpenAPI::fromJsonValue(m_forecast_dimensions, json[QString("ForecastDimensions")]);
    m_forecast_dimensions_isSet = !json[QString("ForecastDimensions")].isNull() && m_forecast_dimensions_isValid;

    m_featurizations_isValid = ::OpenAPI::fromJsonValue(m_featurizations, json[QString("Featurizations")]);
    m_featurizations_isSet = !json[QString("Featurizations")].isNull() && m_featurizations_isValid;
}

QString OAIFeaturizationConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeaturizationConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_forecast_frequency_isSet) {
        obj.insert(QString("ForecastFrequency"), ::OpenAPI::toJsonValue(m_forecast_frequency));
    }
    if (m_forecast_dimensions.isSet()) {
        obj.insert(QString("ForecastDimensions"), ::OpenAPI::toJsonValue(m_forecast_dimensions));
    }
    if (m_featurizations.isSet()) {
        obj.insert(QString("Featurizations"), ::OpenAPI::toJsonValue(m_featurizations));
    }
    return obj;
}

QString OAIFeaturizationConfig::getForecastFrequency() const {
    return m_forecast_frequency;
}
void OAIFeaturizationConfig::setForecastFrequency(const QString &forecast_frequency) {
    m_forecast_frequency = forecast_frequency;
    m_forecast_frequency_isSet = true;
}

bool OAIFeaturizationConfig::is_forecast_frequency_Set() const{
    return m_forecast_frequency_isSet;
}

bool OAIFeaturizationConfig::is_forecast_frequency_Valid() const{
    return m_forecast_frequency_isValid;
}

QList OAIFeaturizationConfig::getForecastDimensions() const {
    return m_forecast_dimensions;
}
void OAIFeaturizationConfig::setForecastDimensions(const QList &forecast_dimensions) {
    m_forecast_dimensions = forecast_dimensions;
    m_forecast_dimensions_isSet = true;
}

bool OAIFeaturizationConfig::is_forecast_dimensions_Set() const{
    return m_forecast_dimensions_isSet;
}

bool OAIFeaturizationConfig::is_forecast_dimensions_Valid() const{
    return m_forecast_dimensions_isValid;
}

QList OAIFeaturizationConfig::getFeaturizations() const {
    return m_featurizations;
}
void OAIFeaturizationConfig::setFeaturizations(const QList &featurizations) {
    m_featurizations = featurizations;
    m_featurizations_isSet = true;
}

bool OAIFeaturizationConfig::is_featurizations_Set() const{
    return m_featurizations_isSet;
}

bool OAIFeaturizationConfig::is_featurizations_Valid() const{
    return m_featurizations_isValid;
}

bool OAIFeaturizationConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_forecast_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featurizations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeaturizationConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_forecast_frequency_isValid && true;
}

} // namespace OpenAPI
