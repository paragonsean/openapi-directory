/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAutoPredictorResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAutoPredictorResponse::OAIDescribeAutoPredictorResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAutoPredictorResponse::OAIDescribeAutoPredictorResponse() {
    this->initializeModel();
}

OAIDescribeAutoPredictorResponse::~OAIDescribeAutoPredictorResponse() {}

void OAIDescribeAutoPredictorResponse::initializeModel() {

    m_predictor_arn_isSet = false;
    m_predictor_arn_isValid = false;

    m_predictor_name_isSet = false;
    m_predictor_name_isValid = false;

    m_forecast_horizon_isSet = false;
    m_forecast_horizon_isValid = false;

    m_forecast_types_isSet = false;
    m_forecast_types_isValid = false;

    m_forecast_frequency_isSet = false;
    m_forecast_frequency_isValid = false;

    m_forecast_dimensions_isSet = false;
    m_forecast_dimensions_isValid = false;

    m_dataset_import_job_arns_isSet = false;
    m_dataset_import_job_arns_isValid = false;

    m_data_config_isSet = false;
    m_data_config_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_reference_predictor_summary_isSet = false;
    m_reference_predictor_summary_isValid = false;

    m_estimated_time_remaining_in_minutes_isSet = false;
    m_estimated_time_remaining_in_minutes_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_last_modification_time_isSet = false;
    m_last_modification_time_isValid = false;

    m_optimization_metric_isSet = false;
    m_optimization_metric_isValid = false;

    m_explainability_info_isSet = false;
    m_explainability_info_isValid = false;

    m_monitor_info_isSet = false;
    m_monitor_info_isValid = false;

    m_time_alignment_boundary_isSet = false;
    m_time_alignment_boundary_isValid = false;
}

void OAIDescribeAutoPredictorResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAutoPredictorResponse::fromJsonObject(QJsonObject json) {

    m_predictor_arn_isValid = ::OpenAPI::fromJsonValue(m_predictor_arn, json[QString("PredictorArn")]);
    m_predictor_arn_isSet = !json[QString("PredictorArn")].isNull() && m_predictor_arn_isValid;

    m_predictor_name_isValid = ::OpenAPI::fromJsonValue(m_predictor_name, json[QString("PredictorName")]);
    m_predictor_name_isSet = !json[QString("PredictorName")].isNull() && m_predictor_name_isValid;

    m_forecast_horizon_isValid = ::OpenAPI::fromJsonValue(m_forecast_horizon, json[QString("ForecastHorizon")]);
    m_forecast_horizon_isSet = !json[QString("ForecastHorizon")].isNull() && m_forecast_horizon_isValid;

    m_forecast_types_isValid = ::OpenAPI::fromJsonValue(m_forecast_types, json[QString("ForecastTypes")]);
    m_forecast_types_isSet = !json[QString("ForecastTypes")].isNull() && m_forecast_types_isValid;

    m_forecast_frequency_isValid = ::OpenAPI::fromJsonValue(m_forecast_frequency, json[QString("ForecastFrequency")]);
    m_forecast_frequency_isSet = !json[QString("ForecastFrequency")].isNull() && m_forecast_frequency_isValid;

    m_forecast_dimensions_isValid = ::OpenAPI::fromJsonValue(m_forecast_dimensions, json[QString("ForecastDimensions")]);
    m_forecast_dimensions_isSet = !json[QString("ForecastDimensions")].isNull() && m_forecast_dimensions_isValid;

    m_dataset_import_job_arns_isValid = ::OpenAPI::fromJsonValue(m_dataset_import_job_arns, json[QString("DatasetImportJobArns")]);
    m_dataset_import_job_arns_isSet = !json[QString("DatasetImportJobArns")].isNull() && m_dataset_import_job_arns_isValid;

    m_data_config_isValid = ::OpenAPI::fromJsonValue(m_data_config, json[QString("DataConfig")]);
    m_data_config_isSet = !json[QString("DataConfig")].isNull() && m_data_config_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("EncryptionConfig")]);
    m_encryption_config_isSet = !json[QString("EncryptionConfig")].isNull() && m_encryption_config_isValid;

    m_reference_predictor_summary_isValid = ::OpenAPI::fromJsonValue(m_reference_predictor_summary, json[QString("ReferencePredictorSummary")]);
    m_reference_predictor_summary_isSet = !json[QString("ReferencePredictorSummary")].isNull() && m_reference_predictor_summary_isValid;

    m_estimated_time_remaining_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_estimated_time_remaining_in_minutes, json[QString("EstimatedTimeRemainingInMinutes")]);
    m_estimated_time_remaining_in_minutes_isSet = !json[QString("EstimatedTimeRemainingInMinutes")].isNull() && m_estimated_time_remaining_in_minutes_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("CreationTime")]);
    m_creation_time_isSet = !json[QString("CreationTime")].isNull() && m_creation_time_isValid;

    m_last_modification_time_isValid = ::OpenAPI::fromJsonValue(m_last_modification_time, json[QString("LastModificationTime")]);
    m_last_modification_time_isSet = !json[QString("LastModificationTime")].isNull() && m_last_modification_time_isValid;

    m_optimization_metric_isValid = ::OpenAPI::fromJsonValue(m_optimization_metric, json[QString("OptimizationMetric")]);
    m_optimization_metric_isSet = !json[QString("OptimizationMetric")].isNull() && m_optimization_metric_isValid;

    m_explainability_info_isValid = ::OpenAPI::fromJsonValue(m_explainability_info, json[QString("ExplainabilityInfo")]);
    m_explainability_info_isSet = !json[QString("ExplainabilityInfo")].isNull() && m_explainability_info_isValid;

    m_monitor_info_isValid = ::OpenAPI::fromJsonValue(m_monitor_info, json[QString("MonitorInfo")]);
    m_monitor_info_isSet = !json[QString("MonitorInfo")].isNull() && m_monitor_info_isValid;

    m_time_alignment_boundary_isValid = ::OpenAPI::fromJsonValue(m_time_alignment_boundary, json[QString("TimeAlignmentBoundary")]);
    m_time_alignment_boundary_isSet = !json[QString("TimeAlignmentBoundary")].isNull() && m_time_alignment_boundary_isValid;
}

QString OAIDescribeAutoPredictorResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAutoPredictorResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_predictor_arn_isSet) {
        obj.insert(QString("PredictorArn"), ::OpenAPI::toJsonValue(m_predictor_arn));
    }
    if (m_predictor_name_isSet) {
        obj.insert(QString("PredictorName"), ::OpenAPI::toJsonValue(m_predictor_name));
    }
    if (m_forecast_horizon_isSet) {
        obj.insert(QString("ForecastHorizon"), ::OpenAPI::toJsonValue(m_forecast_horizon));
    }
    if (m_forecast_types.isSet()) {
        obj.insert(QString("ForecastTypes"), ::OpenAPI::toJsonValue(m_forecast_types));
    }
    if (m_forecast_frequency_isSet) {
        obj.insert(QString("ForecastFrequency"), ::OpenAPI::toJsonValue(m_forecast_frequency));
    }
    if (m_forecast_dimensions.isSet()) {
        obj.insert(QString("ForecastDimensions"), ::OpenAPI::toJsonValue(m_forecast_dimensions));
    }
    if (m_dataset_import_job_arns.isSet()) {
        obj.insert(QString("DatasetImportJobArns"), ::OpenAPI::toJsonValue(m_dataset_import_job_arns));
    }
    if (m_data_config.isSet()) {
        obj.insert(QString("DataConfig"), ::OpenAPI::toJsonValue(m_data_config));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("EncryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_reference_predictor_summary.isSet()) {
        obj.insert(QString("ReferencePredictorSummary"), ::OpenAPI::toJsonValue(m_reference_predictor_summary));
    }
    if (m_estimated_time_remaining_in_minutes_isSet) {
        obj.insert(QString("EstimatedTimeRemainingInMinutes"), ::OpenAPI::toJsonValue(m_estimated_time_remaining_in_minutes));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("CreationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_last_modification_time_isSet) {
        obj.insert(QString("LastModificationTime"), ::OpenAPI::toJsonValue(m_last_modification_time));
    }
    if (m_optimization_metric.isSet()) {
        obj.insert(QString("OptimizationMetric"), ::OpenAPI::toJsonValue(m_optimization_metric));
    }
    if (m_explainability_info.isSet()) {
        obj.insert(QString("ExplainabilityInfo"), ::OpenAPI::toJsonValue(m_explainability_info));
    }
    if (m_monitor_info.isSet()) {
        obj.insert(QString("MonitorInfo"), ::OpenAPI::toJsonValue(m_monitor_info));
    }
    if (m_time_alignment_boundary.isSet()) {
        obj.insert(QString("TimeAlignmentBoundary"), ::OpenAPI::toJsonValue(m_time_alignment_boundary));
    }
    return obj;
}

QString OAIDescribeAutoPredictorResponse::getPredictorArn() const {
    return m_predictor_arn;
}
void OAIDescribeAutoPredictorResponse::setPredictorArn(const QString &predictor_arn) {
    m_predictor_arn = predictor_arn;
    m_predictor_arn_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_predictor_arn_Set() const{
    return m_predictor_arn_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_predictor_arn_Valid() const{
    return m_predictor_arn_isValid;
}

QString OAIDescribeAutoPredictorResponse::getPredictorName() const {
    return m_predictor_name;
}
void OAIDescribeAutoPredictorResponse::setPredictorName(const QString &predictor_name) {
    m_predictor_name = predictor_name;
    m_predictor_name_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_predictor_name_Set() const{
    return m_predictor_name_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_predictor_name_Valid() const{
    return m_predictor_name_isValid;
}

qint32 OAIDescribeAutoPredictorResponse::getForecastHorizon() const {
    return m_forecast_horizon;
}
void OAIDescribeAutoPredictorResponse::setForecastHorizon(const qint32 &forecast_horizon) {
    m_forecast_horizon = forecast_horizon;
    m_forecast_horizon_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_horizon_Set() const{
    return m_forecast_horizon_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_horizon_Valid() const{
    return m_forecast_horizon_isValid;
}

QList OAIDescribeAutoPredictorResponse::getForecastTypes() const {
    return m_forecast_types;
}
void OAIDescribeAutoPredictorResponse::setForecastTypes(const QList &forecast_types) {
    m_forecast_types = forecast_types;
    m_forecast_types_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_types_Set() const{
    return m_forecast_types_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_types_Valid() const{
    return m_forecast_types_isValid;
}

QString OAIDescribeAutoPredictorResponse::getForecastFrequency() const {
    return m_forecast_frequency;
}
void OAIDescribeAutoPredictorResponse::setForecastFrequency(const QString &forecast_frequency) {
    m_forecast_frequency = forecast_frequency;
    m_forecast_frequency_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_frequency_Set() const{
    return m_forecast_frequency_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_frequency_Valid() const{
    return m_forecast_frequency_isValid;
}

QList OAIDescribeAutoPredictorResponse::getForecastDimensions() const {
    return m_forecast_dimensions;
}
void OAIDescribeAutoPredictorResponse::setForecastDimensions(const QList &forecast_dimensions) {
    m_forecast_dimensions = forecast_dimensions;
    m_forecast_dimensions_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_dimensions_Set() const{
    return m_forecast_dimensions_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_forecast_dimensions_Valid() const{
    return m_forecast_dimensions_isValid;
}

QList OAIDescribeAutoPredictorResponse::getDatasetImportJobArns() const {
    return m_dataset_import_job_arns;
}
void OAIDescribeAutoPredictorResponse::setDatasetImportJobArns(const QList &dataset_import_job_arns) {
    m_dataset_import_job_arns = dataset_import_job_arns;
    m_dataset_import_job_arns_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_dataset_import_job_arns_Set() const{
    return m_dataset_import_job_arns_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_dataset_import_job_arns_Valid() const{
    return m_dataset_import_job_arns_isValid;
}

OAICreateAutoPredictorRequest_DataConfig OAIDescribeAutoPredictorResponse::getDataConfig() const {
    return m_data_config;
}
void OAIDescribeAutoPredictorResponse::setDataConfig(const OAICreateAutoPredictorRequest_DataConfig &data_config) {
    m_data_config = data_config;
    m_data_config_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_data_config_Set() const{
    return m_data_config_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_data_config_Valid() const{
    return m_data_config_isValid;
}

OAIEncryptionConfig OAIDescribeAutoPredictorResponse::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIDescribeAutoPredictorResponse::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

OAIDescribeAutoPredictorResponse_ReferencePredictorSummary OAIDescribeAutoPredictorResponse::getReferencePredictorSummary() const {
    return m_reference_predictor_summary;
}
void OAIDescribeAutoPredictorResponse::setReferencePredictorSummary(const OAIDescribeAutoPredictorResponse_ReferencePredictorSummary &reference_predictor_summary) {
    m_reference_predictor_summary = reference_predictor_summary;
    m_reference_predictor_summary_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_reference_predictor_summary_Set() const{
    return m_reference_predictor_summary_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_reference_predictor_summary_Valid() const{
    return m_reference_predictor_summary_isValid;
}

qint32 OAIDescribeAutoPredictorResponse::getEstimatedTimeRemainingInMinutes() const {
    return m_estimated_time_remaining_in_minutes;
}
void OAIDescribeAutoPredictorResponse::setEstimatedTimeRemainingInMinutes(const qint32 &estimated_time_remaining_in_minutes) {
    m_estimated_time_remaining_in_minutes = estimated_time_remaining_in_minutes;
    m_estimated_time_remaining_in_minutes_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_estimated_time_remaining_in_minutes_Set() const{
    return m_estimated_time_remaining_in_minutes_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_estimated_time_remaining_in_minutes_Valid() const{
    return m_estimated_time_remaining_in_minutes_isValid;
}

QString OAIDescribeAutoPredictorResponse::getStatus() const {
    return m_status;
}
void OAIDescribeAutoPredictorResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDescribeAutoPredictorResponse::getMessage() const {
    return m_message;
}
void OAIDescribeAutoPredictorResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIDescribeAutoPredictorResponse::getCreationTime() const {
    return m_creation_time;
}
void OAIDescribeAutoPredictorResponse::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QDateTime OAIDescribeAutoPredictorResponse::getLastModificationTime() const {
    return m_last_modification_time;
}
void OAIDescribeAutoPredictorResponse::setLastModificationTime(const QDateTime &last_modification_time) {
    m_last_modification_time = last_modification_time;
    m_last_modification_time_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_last_modification_time_Set() const{
    return m_last_modification_time_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_last_modification_time_Valid() const{
    return m_last_modification_time_isValid;
}

OAIOptimizationMetric OAIDescribeAutoPredictorResponse::getOptimizationMetric() const {
    return m_optimization_metric;
}
void OAIDescribeAutoPredictorResponse::setOptimizationMetric(const OAIOptimizationMetric &optimization_metric) {
    m_optimization_metric = optimization_metric;
    m_optimization_metric_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_optimization_metric_Set() const{
    return m_optimization_metric_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_optimization_metric_Valid() const{
    return m_optimization_metric_isValid;
}

OAIDescribeAutoPredictorResponse_ExplainabilityInfo OAIDescribeAutoPredictorResponse::getExplainabilityInfo() const {
    return m_explainability_info;
}
void OAIDescribeAutoPredictorResponse::setExplainabilityInfo(const OAIDescribeAutoPredictorResponse_ExplainabilityInfo &explainability_info) {
    m_explainability_info = explainability_info;
    m_explainability_info_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_explainability_info_Set() const{
    return m_explainability_info_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_explainability_info_Valid() const{
    return m_explainability_info_isValid;
}

OAIDescribeAutoPredictorResponse_MonitorInfo OAIDescribeAutoPredictorResponse::getMonitorInfo() const {
    return m_monitor_info;
}
void OAIDescribeAutoPredictorResponse::setMonitorInfo(const OAIDescribeAutoPredictorResponse_MonitorInfo &monitor_info) {
    m_monitor_info = monitor_info;
    m_monitor_info_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_monitor_info_Set() const{
    return m_monitor_info_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_monitor_info_Valid() const{
    return m_monitor_info_isValid;
}

OAIDescribeAutoPredictorResponse_TimeAlignmentBoundary OAIDescribeAutoPredictorResponse::getTimeAlignmentBoundary() const {
    return m_time_alignment_boundary;
}
void OAIDescribeAutoPredictorResponse::setTimeAlignmentBoundary(const OAIDescribeAutoPredictorResponse_TimeAlignmentBoundary &time_alignment_boundary) {
    m_time_alignment_boundary = time_alignment_boundary;
    m_time_alignment_boundary_isSet = true;
}

bool OAIDescribeAutoPredictorResponse::is_time_alignment_boundary_Set() const{
    return m_time_alignment_boundary_isSet;
}

bool OAIDescribeAutoPredictorResponse::is_time_alignment_boundary_Valid() const{
    return m_time_alignment_boundary_isValid;
}

bool OAIDescribeAutoPredictorResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_predictor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_horizon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_import_job_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_predictor_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_time_remaining_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_metric.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_explainability_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_alignment_boundary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAutoPredictorResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
