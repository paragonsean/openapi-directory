/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIOperation::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIOperation::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ADD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperation::ADD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SUBTRACT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperation::SUBTRACT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MULTIPLY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperation::MULTIPLY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DIVIDE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIOperation::DIVIDE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIOperation::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIOperation::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIOperation::ADD:
            val = "ADD";
            break;
        case eOAIOperation::SUBTRACT:
            val = "SUBTRACT";
            break;
        case eOAIOperation::MULTIPLY:
            val = "MULTIPLY";
            break;
        case eOAIOperation::DIVIDE:
            val = "DIVIDE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIOperation::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIOperation::eOAIOperation OAIOperation::getValue() const {
    return m_value;
}

void OAIOperation::setValue(const OAIOperation::eOAIOperation& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIOperation::isSet() const {
    
    return m_value_isSet;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
