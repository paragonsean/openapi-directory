/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatistics.h
 *
 * Provides statistics for each data field imported into to an Amazon Forecast dataset with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\&quot;&gt;CreateDatasetImportJob&lt;/a&gt; operation.
 */

#ifndef OAIStatistics_H
#define OAIStatistics_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStatistics : public OAIObject {
public:
    OAIStatistics();
    OAIStatistics(QString json);
    ~OAIStatistics() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    qint32 getCountDistinct() const;
    void setCountDistinct(const qint32 &count_distinct);
    bool is_count_distinct_Set() const;
    bool is_count_distinct_Valid() const;

    qint32 getCountNull() const;
    void setCountNull(const qint32 &count_null);
    bool is_count_null_Set() const;
    bool is_count_null_Valid() const;

    qint32 getCountNan() const;
    void setCountNan(const qint32 &count_nan);
    bool is_count_nan_Set() const;
    bool is_count_nan_Valid() const;

    QString getMin() const;
    void setMin(const QString &min);
    bool is_min_Set() const;
    bool is_min_Valid() const;

    QString getMax() const;
    void setMax(const QString &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    double getAvg() const;
    void setAvg(const double &avg);
    bool is_avg_Set() const;
    bool is_avg_Valid() const;

    double getStddev() const;
    void setStddev(const double &stddev);
    bool is_stddev_Set() const;
    bool is_stddev_Valid() const;

    qint32 getCountLong() const;
    void setCountLong(const qint32 &count_long);
    bool is_count_long_Set() const;
    bool is_count_long_Valid() const;

    qint32 getCountDistinctLong() const;
    void setCountDistinctLong(const qint32 &count_distinct_long);
    bool is_count_distinct_long_Set() const;
    bool is_count_distinct_long_Valid() const;

    qint32 getCountNullLong() const;
    void setCountNullLong(const qint32 &count_null_long);
    bool is_count_null_long_Set() const;
    bool is_count_null_long_Valid() const;

    qint32 getCountNanLong() const;
    void setCountNanLong(const qint32 &count_nan_long);
    bool is_count_nan_long_Set() const;
    bool is_count_nan_long_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    qint32 m_count_distinct;
    bool m_count_distinct_isSet;
    bool m_count_distinct_isValid;

    qint32 m_count_null;
    bool m_count_null_isSet;
    bool m_count_null_isValid;

    qint32 m_count_nan;
    bool m_count_nan_isSet;
    bool m_count_nan_isValid;

    QString m_min;
    bool m_min_isSet;
    bool m_min_isValid;

    QString m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    double m_avg;
    bool m_avg_isSet;
    bool m_avg_isValid;

    double m_stddev;
    bool m_stddev_isSet;
    bool m_stddev_isValid;

    qint32 m_count_long;
    bool m_count_long_isSet;
    bool m_count_long_isValid;

    qint32 m_count_distinct_long;
    bool m_count_distinct_long_isSet;
    bool m_count_distinct_long_isValid;

    qint32 m_count_null_long;
    bool m_count_null_long_isSet;
    bool m_count_null_long_isValid;

    qint32 m_count_nan_long;
    bool m_count_nan_long_isSet;
    bool m_count_nan_long_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatistics)

#endif // OAIStatistics_H
