/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Config::OAIS3Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Config::OAIS3Config() {
    this->initializeModel();
}

OAIS3Config::~OAIS3Config() {}

void OAIS3Config::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;
}

void OAIS3Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Config::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KMSKeyArn")]);
    m_kms_key_arn_isSet = !json[QString("KMSKeyArn")].isNull() && m_kms_key_arn_isValid;
}

QString OAIS3Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Config::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KMSKeyArn"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    return obj;
}

QString OAIS3Config::getPath() const {
    return m_path;
}
void OAIS3Config::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIS3Config::is_path_Set() const{
    return m_path_isSet;
}

bool OAIS3Config::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIS3Config::getRoleArn() const {
    return m_role_arn;
}
void OAIS3Config::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIS3Config::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIS3Config::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIS3Config::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIS3Config::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIS3Config::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIS3Config::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

bool OAIS3Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_path_isValid && m_role_arn_isValid && true;
}

} // namespace OpenAPI
