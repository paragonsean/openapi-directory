/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluationResult::OAIEvaluationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluationResult::OAIEvaluationResult() {
    this->initializeModel();
}

OAIEvaluationResult::~OAIEvaluationResult() {}

void OAIEvaluationResult::initializeModel() {

    m_algorithm_arn_isSet = false;
    m_algorithm_arn_isValid = false;

    m_test_windows_isSet = false;
    m_test_windows_isValid = false;
}

void OAIEvaluationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluationResult::fromJsonObject(QJsonObject json) {

    m_algorithm_arn_isValid = ::OpenAPI::fromJsonValue(m_algorithm_arn, json[QString("AlgorithmArn")]);
    m_algorithm_arn_isSet = !json[QString("AlgorithmArn")].isNull() && m_algorithm_arn_isValid;

    m_test_windows_isValid = ::OpenAPI::fromJsonValue(m_test_windows, json[QString("TestWindows")]);
    m_test_windows_isSet = !json[QString("TestWindows")].isNull() && m_test_windows_isValid;
}

QString OAIEvaluationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_arn_isSet) {
        obj.insert(QString("AlgorithmArn"), ::OpenAPI::toJsonValue(m_algorithm_arn));
    }
    if (m_test_windows.isSet()) {
        obj.insert(QString("TestWindows"), ::OpenAPI::toJsonValue(m_test_windows));
    }
    return obj;
}

QString OAIEvaluationResult::getAlgorithmArn() const {
    return m_algorithm_arn;
}
void OAIEvaluationResult::setAlgorithmArn(const QString &algorithm_arn) {
    m_algorithm_arn = algorithm_arn;
    m_algorithm_arn_isSet = true;
}

bool OAIEvaluationResult::is_algorithm_arn_Set() const{
    return m_algorithm_arn_isSet;
}

bool OAIEvaluationResult::is_algorithm_arn_Valid() const{
    return m_algorithm_arn_isValid;
}

QList OAIEvaluationResult::getTestWindows() const {
    return m_test_windows;
}
void OAIEvaluationResult::setTestWindows(const QList &test_windows) {
    m_test_windows = test_windows;
    m_test_windows_isSet = true;
}

bool OAIEvaluationResult::is_test_windows_Set() const{
    return m_test_windows_isSet;
}

bool OAIEvaluationResult::is_test_windows_Valid() const{
    return m_test_windows_isValid;
}

bool OAIEvaluationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_windows.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
