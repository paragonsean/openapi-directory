/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictorMonitorEvaluation_MonitorDataSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictorMonitorEvaluation_MonitorDataSource::OAIPredictorMonitorEvaluation_MonitorDataSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictorMonitorEvaluation_MonitorDataSource::OAIPredictorMonitorEvaluation_MonitorDataSource() {
    this->initializeModel();
}

OAIPredictorMonitorEvaluation_MonitorDataSource::~OAIPredictorMonitorEvaluation_MonitorDataSource() {}

void OAIPredictorMonitorEvaluation_MonitorDataSource::initializeModel() {

    m_dataset_import_job_arn_isSet = false;
    m_dataset_import_job_arn_isValid = false;

    m_forecast_arn_isSet = false;
    m_forecast_arn_isValid = false;

    m_predictor_arn_isSet = false;
    m_predictor_arn_isValid = false;
}

void OAIPredictorMonitorEvaluation_MonitorDataSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictorMonitorEvaluation_MonitorDataSource::fromJsonObject(QJsonObject json) {

    m_dataset_import_job_arn_isValid = ::OpenAPI::fromJsonValue(m_dataset_import_job_arn, json[QString("DatasetImportJobArn")]);
    m_dataset_import_job_arn_isSet = !json[QString("DatasetImportJobArn")].isNull() && m_dataset_import_job_arn_isValid;

    m_forecast_arn_isValid = ::OpenAPI::fromJsonValue(m_forecast_arn, json[QString("ForecastArn")]);
    m_forecast_arn_isSet = !json[QString("ForecastArn")].isNull() && m_forecast_arn_isValid;

    m_predictor_arn_isValid = ::OpenAPI::fromJsonValue(m_predictor_arn, json[QString("PredictorArn")]);
    m_predictor_arn_isSet = !json[QString("PredictorArn")].isNull() && m_predictor_arn_isValid;
}

QString OAIPredictorMonitorEvaluation_MonitorDataSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictorMonitorEvaluation_MonitorDataSource::asJsonObject() const {
    QJsonObject obj;
    if (m_dataset_import_job_arn_isSet) {
        obj.insert(QString("DatasetImportJobArn"), ::OpenAPI::toJsonValue(m_dataset_import_job_arn));
    }
    if (m_forecast_arn_isSet) {
        obj.insert(QString("ForecastArn"), ::OpenAPI::toJsonValue(m_forecast_arn));
    }
    if (m_predictor_arn_isSet) {
        obj.insert(QString("PredictorArn"), ::OpenAPI::toJsonValue(m_predictor_arn));
    }
    return obj;
}

QString OAIPredictorMonitorEvaluation_MonitorDataSource::getDatasetImportJobArn() const {
    return m_dataset_import_job_arn;
}
void OAIPredictorMonitorEvaluation_MonitorDataSource::setDatasetImportJobArn(const QString &dataset_import_job_arn) {
    m_dataset_import_job_arn = dataset_import_job_arn;
    m_dataset_import_job_arn_isSet = true;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::is_dataset_import_job_arn_Set() const{
    return m_dataset_import_job_arn_isSet;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::is_dataset_import_job_arn_Valid() const{
    return m_dataset_import_job_arn_isValid;
}

QString OAIPredictorMonitorEvaluation_MonitorDataSource::getForecastArn() const {
    return m_forecast_arn;
}
void OAIPredictorMonitorEvaluation_MonitorDataSource::setForecastArn(const QString &forecast_arn) {
    m_forecast_arn = forecast_arn;
    m_forecast_arn_isSet = true;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::is_forecast_arn_Set() const{
    return m_forecast_arn_isSet;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::is_forecast_arn_Valid() const{
    return m_forecast_arn_isValid;
}

QString OAIPredictorMonitorEvaluation_MonitorDataSource::getPredictorArn() const {
    return m_predictor_arn;
}
void OAIPredictorMonitorEvaluation_MonitorDataSource::setPredictorArn(const QString &predictor_arn) {
    m_predictor_arn = predictor_arn;
    m_predictor_arn_isSet = true;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::is_predictor_arn_Set() const{
    return m_predictor_arn_isSet;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::is_predictor_arn_Valid() const{
    return m_predictor_arn_isValid;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dataset_import_job_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecast_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predictor_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictorMonitorEvaluation_MonitorDataSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
