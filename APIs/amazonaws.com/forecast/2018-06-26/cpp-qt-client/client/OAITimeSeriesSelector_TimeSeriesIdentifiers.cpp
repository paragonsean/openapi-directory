/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesSelector_TimeSeriesIdentifiers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesSelector_TimeSeriesIdentifiers::OAITimeSeriesSelector_TimeSeriesIdentifiers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesSelector_TimeSeriesIdentifiers::OAITimeSeriesSelector_TimeSeriesIdentifiers() {
    this->initializeModel();
}

OAITimeSeriesSelector_TimeSeriesIdentifiers::~OAITimeSeriesSelector_TimeSeriesIdentifiers() {}

void OAITimeSeriesSelector_TimeSeriesIdentifiers::initializeModel() {

    m_data_source_isSet = false;
    m_data_source_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;
}

void OAITimeSeriesSelector_TimeSeriesIdentifiers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesSelector_TimeSeriesIdentifiers::fromJsonObject(QJsonObject json) {

    m_data_source_isValid = ::OpenAPI::fromJsonValue(m_data_source, json[QString("DataSource")]);
    m_data_source_isSet = !json[QString("DataSource")].isNull() && m_data_source_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("Format")]);
    m_format_isSet = !json[QString("Format")].isNull() && m_format_isValid;
}

QString OAITimeSeriesSelector_TimeSeriesIdentifiers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesSelector_TimeSeriesIdentifiers::asJsonObject() const {
    QJsonObject obj;
    if (m_data_source.isSet()) {
        obj.insert(QString("DataSource"), ::OpenAPI::toJsonValue(m_data_source));
    }
    if (m_schema.isSet()) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    if (m_format_isSet) {
        obj.insert(QString("Format"), ::OpenAPI::toJsonValue(m_format));
    }
    return obj;
}

OAIDataSource OAITimeSeriesSelector_TimeSeriesIdentifiers::getDataSource() const {
    return m_data_source;
}
void OAITimeSeriesSelector_TimeSeriesIdentifiers::setDataSource(const OAIDataSource &data_source) {
    m_data_source = data_source;
    m_data_source_isSet = true;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::is_data_source_Set() const{
    return m_data_source_isSet;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::is_data_source_Valid() const{
    return m_data_source_isValid;
}

OAISchema OAITimeSeriesSelector_TimeSeriesIdentifiers::getSchema() const {
    return m_schema;
}
void OAITimeSeriesSelector_TimeSeriesIdentifiers::setSchema(const OAISchema &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::is_schema_Valid() const{
    return m_schema_isValid;
}

QString OAITimeSeriesSelector_TimeSeriesIdentifiers::getFormat() const {
    return m_format;
}
void OAITimeSeriesSelector_TimeSeriesIdentifiers::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::is_format_Set() const{
    return m_format_isSet;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::is_format_Valid() const{
    return m_format_isValid;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesSelector_TimeSeriesIdentifiers::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
