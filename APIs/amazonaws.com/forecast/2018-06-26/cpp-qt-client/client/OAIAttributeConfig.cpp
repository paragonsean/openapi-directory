/**
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeConfig::OAIAttributeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeConfig::OAIAttributeConfig() {
    this->initializeModel();
}

OAIAttributeConfig::~OAIAttributeConfig() {}

void OAIAttributeConfig::initializeModel() {

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_transformations_isSet = false;
    m_transformations_isValid = false;
}

void OAIAttributeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeConfig::fromJsonObject(QJsonObject json) {

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("AttributeName")]);
    m_attribute_name_isSet = !json[QString("AttributeName")].isNull() && m_attribute_name_isValid;

    m_transformations_isValid = ::OpenAPI::fromJsonValue(m_transformations, json[QString("Transformations")]);
    m_transformations_isSet = !json[QString("Transformations")].isNull() && m_transformations_isValid;
}

QString OAIAttributeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_name_isSet) {
        obj.insert(QString("AttributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_transformations.isSet()) {
        obj.insert(QString("Transformations"), ::OpenAPI::toJsonValue(m_transformations));
    }
    return obj;
}

QString OAIAttributeConfig::getAttributeName() const {
    return m_attribute_name;
}
void OAIAttributeConfig::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIAttributeConfig::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIAttributeConfig::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

QMap OAIAttributeConfig::getTransformations() const {
    return m_transformations;
}
void OAIAttributeConfig::setTransformations(const QMap &transformations) {
    m_transformations = transformations;
    m_transformations_isSet = true;
}

bool OAIAttributeConfig::is_transformations_Set() const{
    return m_transformations_isSet;
}

bool OAIAttributeConfig::is_transformations_Valid() const{
    return m_transformations_isValid;
}

bool OAIAttributeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_name_isValid && m_transformations_isValid && true;
}

} // namespace OpenAPI
