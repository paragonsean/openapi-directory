# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_destination import DataDestination
from openapi_server import util


class CreateExplainabilityExportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explainability_export_name: str=None, explainability_arn: str=None, destination: DataDestination=None, tags: List=None, format: str=None):
        """CreateExplainabilityExportRequest - a model defined in OpenAPI

        :param explainability_export_name: The explainability_export_name of this CreateExplainabilityExportRequest.
        :param explainability_arn: The explainability_arn of this CreateExplainabilityExportRequest.
        :param destination: The destination of this CreateExplainabilityExportRequest.
        :param tags: The tags of this CreateExplainabilityExportRequest.
        :param format: The format of this CreateExplainabilityExportRequest.
        """
        self.openapi_types = {
            'explainability_export_name': str,
            'explainability_arn': str,
            'destination': DataDestination,
            'tags': List,
            'format': str
        }

        self.attribute_map = {
            'explainability_export_name': 'ExplainabilityExportName',
            'explainability_arn': 'ExplainabilityArn',
            'destination': 'Destination',
            'tags': 'Tags',
            'format': 'Format'
        }

        self._explainability_export_name = explainability_export_name
        self._explainability_arn = explainability_arn
        self._destination = destination
        self._tags = tags
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateExplainabilityExportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateExplainabilityExportRequest of this CreateExplainabilityExportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explainability_export_name(self):
        """Gets the explainability_export_name of this CreateExplainabilityExportRequest.


        :return: The explainability_export_name of this CreateExplainabilityExportRequest.
        :rtype: str
        """
        return self._explainability_export_name

    @explainability_export_name.setter
    def explainability_export_name(self, explainability_export_name):
        """Sets the explainability_export_name of this CreateExplainabilityExportRequest.


        :param explainability_export_name: The explainability_export_name of this CreateExplainabilityExportRequest.
        :type explainability_export_name: str
        """
        if explainability_export_name is None:
            raise ValueError("Invalid value for `explainability_export_name`, must not be `None`")

        self._explainability_export_name = explainability_export_name

    @property
    def explainability_arn(self):
        """Gets the explainability_arn of this CreateExplainabilityExportRequest.


        :return: The explainability_arn of this CreateExplainabilityExportRequest.
        :rtype: str
        """
        return self._explainability_arn

    @explainability_arn.setter
    def explainability_arn(self, explainability_arn):
        """Sets the explainability_arn of this CreateExplainabilityExportRequest.


        :param explainability_arn: The explainability_arn of this CreateExplainabilityExportRequest.
        :type explainability_arn: str
        """
        if explainability_arn is None:
            raise ValueError("Invalid value for `explainability_arn`, must not be `None`")

        self._explainability_arn = explainability_arn

    @property
    def destination(self):
        """Gets the destination of this CreateExplainabilityExportRequest.


        :return: The destination of this CreateExplainabilityExportRequest.
        :rtype: DataDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CreateExplainabilityExportRequest.


        :param destination: The destination of this CreateExplainabilityExportRequest.
        :type destination: DataDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def tags(self):
        """Gets the tags of this CreateExplainabilityExportRequest.


        :return: The tags of this CreateExplainabilityExportRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateExplainabilityExportRequest.


        :param tags: The tags of this CreateExplainabilityExportRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def format(self):
        """Gets the format of this CreateExplainabilityExportRequest.


        :return: The format of this CreateExplainabilityExportRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateExplainabilityExportRequest.


        :param format: The format of this CreateExplainabilityExportRequest.
        :type format: str
        """

        self._format = format
