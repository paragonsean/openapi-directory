# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forecast_type: str=None, wape: float=None, rmse: float=None, mase: float=None, mape: float=None):
        """ErrorMetric - a model defined in OpenAPI

        :param forecast_type: The forecast_type of this ErrorMetric.
        :param wape: The wape of this ErrorMetric.
        :param rmse: The rmse of this ErrorMetric.
        :param mase: The mase of this ErrorMetric.
        :param mape: The mape of this ErrorMetric.
        """
        self.openapi_types = {
            'forecast_type': str,
            'wape': float,
            'rmse': float,
            'mase': float,
            'mape': float
        }

        self.attribute_map = {
            'forecast_type': 'ForecastType',
            'wape': 'WAPE',
            'rmse': 'RMSE',
            'mase': 'MASE',
            'mape': 'MAPE'
        }

        self._forecast_type = forecast_type
        self._wape = wape
        self._rmse = rmse
        self._mase = mase
        self._mape = mape

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorMetric of this ErrorMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forecast_type(self):
        """Gets the forecast_type of this ErrorMetric.


        :return: The forecast_type of this ErrorMetric.
        :rtype: str
        """
        return self._forecast_type

    @forecast_type.setter
    def forecast_type(self, forecast_type):
        """Sets the forecast_type of this ErrorMetric.


        :param forecast_type: The forecast_type of this ErrorMetric.
        :type forecast_type: str
        """

        self._forecast_type = forecast_type

    @property
    def wape(self):
        """Gets the wape of this ErrorMetric.


        :return: The wape of this ErrorMetric.
        :rtype: float
        """
        return self._wape

    @wape.setter
    def wape(self, wape):
        """Sets the wape of this ErrorMetric.


        :param wape: The wape of this ErrorMetric.
        :type wape: float
        """

        self._wape = wape

    @property
    def rmse(self):
        """Gets the rmse of this ErrorMetric.


        :return: The rmse of this ErrorMetric.
        :rtype: float
        """
        return self._rmse

    @rmse.setter
    def rmse(self, rmse):
        """Sets the rmse of this ErrorMetric.


        :param rmse: The rmse of this ErrorMetric.
        :type rmse: float
        """

        self._rmse = rmse

    @property
    def mase(self):
        """Gets the mase of this ErrorMetric.


        :return: The mase of this ErrorMetric.
        :rtype: float
        """
        return self._mase

    @mase.setter
    def mase(self, mase):
        """Sets the mase of this ErrorMetric.


        :param mase: The mase of this ErrorMetric.
        :type mase: float
        """

        self._mase = mase

    @property
    def mape(self):
        """Gets the mape of this ErrorMetric.


        :return: The mape of this ErrorMetric.
        :rtype: float
        """
        return self._mape

    @mape.setter
    def mape(self, mape):
        """Sets the mape of this ErrorMetric.


        :param mape: The mape of this ErrorMetric.
        :type mape: float
        """

        self._mape = mape
