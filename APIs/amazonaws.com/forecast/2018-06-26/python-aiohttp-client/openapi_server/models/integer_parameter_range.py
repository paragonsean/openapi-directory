# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scaling_type import ScalingType
from openapi_server import util


class IntegerParameterRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, max_value: int=None, min_value: int=None, scaling_type: ScalingType=None):
        """IntegerParameterRange - a model defined in OpenAPI

        :param name: The name of this IntegerParameterRange.
        :param max_value: The max_value of this IntegerParameterRange.
        :param min_value: The min_value of this IntegerParameterRange.
        :param scaling_type: The scaling_type of this IntegerParameterRange.
        """
        self.openapi_types = {
            'name': str,
            'max_value': int,
            'min_value': int,
            'scaling_type': ScalingType
        }

        self.attribute_map = {
            'name': 'Name',
            'max_value': 'MaxValue',
            'min_value': 'MinValue',
            'scaling_type': 'ScalingType'
        }

        self._name = name
        self._max_value = max_value
        self._min_value = min_value
        self._scaling_type = scaling_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegerParameterRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegerParameterRange of this IntegerParameterRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this IntegerParameterRange.


        :return: The name of this IntegerParameterRange.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegerParameterRange.


        :param name: The name of this IntegerParameterRange.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def max_value(self):
        """Gets the max_value of this IntegerParameterRange.


        :return: The max_value of this IntegerParameterRange.
        :rtype: int
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this IntegerParameterRange.


        :param max_value: The max_value of this IntegerParameterRange.
        :type max_value: int
        """
        if max_value is None:
            raise ValueError("Invalid value for `max_value`, must not be `None`")

        self._max_value = max_value

    @property
    def min_value(self):
        """Gets the min_value of this IntegerParameterRange.


        :return: The min_value of this IntegerParameterRange.
        :rtype: int
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this IntegerParameterRange.


        :param min_value: The min_value of this IntegerParameterRange.
        :type min_value: int
        """
        if min_value is None:
            raise ValueError("Invalid value for `min_value`, must not be `None`")

        self._min_value = min_value

    @property
    def scaling_type(self):
        """Gets the scaling_type of this IntegerParameterRange.


        :return: The scaling_type of this IntegerParameterRange.
        :rtype: ScalingType
        """
        return self._scaling_type

    @scaling_type.setter
    def scaling_type(self, scaling_type):
        """Sets the scaling_type of this IntegerParameterRange.


        :param scaling_type: The scaling_type of this IntegerParameterRange.
        :type scaling_type: ScalingType
        """

        self._scaling_type = scaling_type
