# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_group_arn: str=None, supplementary_features: List=None):
        """InputDataConfig - a model defined in OpenAPI

        :param dataset_group_arn: The dataset_group_arn of this InputDataConfig.
        :param supplementary_features: The supplementary_features of this InputDataConfig.
        """
        self.openapi_types = {
            'dataset_group_arn': str,
            'supplementary_features': List
        }

        self.attribute_map = {
            'dataset_group_arn': 'DatasetGroupArn',
            'supplementary_features': 'SupplementaryFeatures'
        }

        self._dataset_group_arn = dataset_group_arn
        self._supplementary_features = supplementary_features

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputDataConfig of this InputDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_group_arn(self):
        """Gets the dataset_group_arn of this InputDataConfig.


        :return: The dataset_group_arn of this InputDataConfig.
        :rtype: str
        """
        return self._dataset_group_arn

    @dataset_group_arn.setter
    def dataset_group_arn(self, dataset_group_arn):
        """Sets the dataset_group_arn of this InputDataConfig.


        :param dataset_group_arn: The dataset_group_arn of this InputDataConfig.
        :type dataset_group_arn: str
        """
        if dataset_group_arn is None:
            raise ValueError("Invalid value for `dataset_group_arn`, must not be `None`")

        self._dataset_group_arn = dataset_group_arn

    @property
    def supplementary_features(self):
        """Gets the supplementary_features of this InputDataConfig.


        :return: The supplementary_features of this InputDataConfig.
        :rtype: List
        """
        return self._supplementary_features

    @supplementary_features.setter
    def supplementary_features(self, supplementary_features):
        """Sets the supplementary_features of this InputDataConfig.


        :param supplementary_features: The supplementary_features of this InputDataConfig.
        :type supplementary_features: List
        """

        self._supplementary_features = supplementary_features
