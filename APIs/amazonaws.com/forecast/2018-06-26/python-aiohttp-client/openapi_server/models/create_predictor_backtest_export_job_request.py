# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_destination import DataDestination
from openapi_server import util


class CreatePredictorBacktestExportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, predictor_backtest_export_job_name: str=None, predictor_arn: str=None, destination: DataDestination=None, tags: List=None, format: str=None):
        """CreatePredictorBacktestExportJobRequest - a model defined in OpenAPI

        :param predictor_backtest_export_job_name: The predictor_backtest_export_job_name of this CreatePredictorBacktestExportJobRequest.
        :param predictor_arn: The predictor_arn of this CreatePredictorBacktestExportJobRequest.
        :param destination: The destination of this CreatePredictorBacktestExportJobRequest.
        :param tags: The tags of this CreatePredictorBacktestExportJobRequest.
        :param format: The format of this CreatePredictorBacktestExportJobRequest.
        """
        self.openapi_types = {
            'predictor_backtest_export_job_name': str,
            'predictor_arn': str,
            'destination': DataDestination,
            'tags': List,
            'format': str
        }

        self.attribute_map = {
            'predictor_backtest_export_job_name': 'PredictorBacktestExportJobName',
            'predictor_arn': 'PredictorArn',
            'destination': 'Destination',
            'tags': 'Tags',
            'format': 'Format'
        }

        self._predictor_backtest_export_job_name = predictor_backtest_export_job_name
        self._predictor_arn = predictor_arn
        self._destination = destination
        self._tags = tags
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePredictorBacktestExportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePredictorBacktestExportJobRequest of this CreatePredictorBacktestExportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def predictor_backtest_export_job_name(self):
        """Gets the predictor_backtest_export_job_name of this CreatePredictorBacktestExportJobRequest.


        :return: The predictor_backtest_export_job_name of this CreatePredictorBacktestExportJobRequest.
        :rtype: str
        """
        return self._predictor_backtest_export_job_name

    @predictor_backtest_export_job_name.setter
    def predictor_backtest_export_job_name(self, predictor_backtest_export_job_name):
        """Sets the predictor_backtest_export_job_name of this CreatePredictorBacktestExportJobRequest.


        :param predictor_backtest_export_job_name: The predictor_backtest_export_job_name of this CreatePredictorBacktestExportJobRequest.
        :type predictor_backtest_export_job_name: str
        """
        if predictor_backtest_export_job_name is None:
            raise ValueError("Invalid value for `predictor_backtest_export_job_name`, must not be `None`")

        self._predictor_backtest_export_job_name = predictor_backtest_export_job_name

    @property
    def predictor_arn(self):
        """Gets the predictor_arn of this CreatePredictorBacktestExportJobRequest.


        :return: The predictor_arn of this CreatePredictorBacktestExportJobRequest.
        :rtype: str
        """
        return self._predictor_arn

    @predictor_arn.setter
    def predictor_arn(self, predictor_arn):
        """Sets the predictor_arn of this CreatePredictorBacktestExportJobRequest.


        :param predictor_arn: The predictor_arn of this CreatePredictorBacktestExportJobRequest.
        :type predictor_arn: str
        """
        if predictor_arn is None:
            raise ValueError("Invalid value for `predictor_arn`, must not be `None`")

        self._predictor_arn = predictor_arn

    @property
    def destination(self):
        """Gets the destination of this CreatePredictorBacktestExportJobRequest.


        :return: The destination of this CreatePredictorBacktestExportJobRequest.
        :rtype: DataDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CreatePredictorBacktestExportJobRequest.


        :param destination: The destination of this CreatePredictorBacktestExportJobRequest.
        :type destination: DataDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def tags(self):
        """Gets the tags of this CreatePredictorBacktestExportJobRequest.


        :return: The tags of this CreatePredictorBacktestExportJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreatePredictorBacktestExportJobRequest.


        :param tags: The tags of this CreatePredictorBacktestExportJobRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def format(self):
        """Gets the format of this CreatePredictorBacktestExportJobRequest.


        :return: The format of this CreatePredictorBacktestExportJobRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreatePredictorBacktestExportJobRequest.


        :param format: The format of this CreatePredictorBacktestExportJobRequest.
        :type format: str
        """

        self._format = format
