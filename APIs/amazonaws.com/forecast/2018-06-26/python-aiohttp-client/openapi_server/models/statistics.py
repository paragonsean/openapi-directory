# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Statistics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, count_distinct: int=None, count_null: int=None, count_nan: int=None, min: str=None, max: str=None, avg: float=None, stddev: float=None, count_long: int=None, count_distinct_long: int=None, count_null_long: int=None, count_nan_long: int=None):
        """Statistics - a model defined in OpenAPI

        :param count: The count of this Statistics.
        :param count_distinct: The count_distinct of this Statistics.
        :param count_null: The count_null of this Statistics.
        :param count_nan: The count_nan of this Statistics.
        :param min: The min of this Statistics.
        :param max: The max of this Statistics.
        :param avg: The avg of this Statistics.
        :param stddev: The stddev of this Statistics.
        :param count_long: The count_long of this Statistics.
        :param count_distinct_long: The count_distinct_long of this Statistics.
        :param count_null_long: The count_null_long of this Statistics.
        :param count_nan_long: The count_nan_long of this Statistics.
        """
        self.openapi_types = {
            'count': int,
            'count_distinct': int,
            'count_null': int,
            'count_nan': int,
            'min': str,
            'max': str,
            'avg': float,
            'stddev': float,
            'count_long': int,
            'count_distinct_long': int,
            'count_null_long': int,
            'count_nan_long': int
        }

        self.attribute_map = {
            'count': 'Count',
            'count_distinct': 'CountDistinct',
            'count_null': 'CountNull',
            'count_nan': 'CountNan',
            'min': 'Min',
            'max': 'Max',
            'avg': 'Avg',
            'stddev': 'Stddev',
            'count_long': 'CountLong',
            'count_distinct_long': 'CountDistinctLong',
            'count_null_long': 'CountNullLong',
            'count_nan_long': 'CountNanLong'
        }

        self._count = count
        self._count_distinct = count_distinct
        self._count_null = count_null
        self._count_nan = count_nan
        self._min = min
        self._max = max
        self._avg = avg
        self._stddev = stddev
        self._count_long = count_long
        self._count_distinct_long = count_distinct_long
        self._count_null_long = count_null_long
        self._count_nan_long = count_nan_long

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Statistics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Statistics of this Statistics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Statistics.


        :return: The count of this Statistics.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Statistics.


        :param count: The count of this Statistics.
        :type count: int
        """

        self._count = count

    @property
    def count_distinct(self):
        """Gets the count_distinct of this Statistics.


        :return: The count_distinct of this Statistics.
        :rtype: int
        """
        return self._count_distinct

    @count_distinct.setter
    def count_distinct(self, count_distinct):
        """Sets the count_distinct of this Statistics.


        :param count_distinct: The count_distinct of this Statistics.
        :type count_distinct: int
        """

        self._count_distinct = count_distinct

    @property
    def count_null(self):
        """Gets the count_null of this Statistics.


        :return: The count_null of this Statistics.
        :rtype: int
        """
        return self._count_null

    @count_null.setter
    def count_null(self, count_null):
        """Sets the count_null of this Statistics.


        :param count_null: The count_null of this Statistics.
        :type count_null: int
        """

        self._count_null = count_null

    @property
    def count_nan(self):
        """Gets the count_nan of this Statistics.


        :return: The count_nan of this Statistics.
        :rtype: int
        """
        return self._count_nan

    @count_nan.setter
    def count_nan(self, count_nan):
        """Sets the count_nan of this Statistics.


        :param count_nan: The count_nan of this Statistics.
        :type count_nan: int
        """

        self._count_nan = count_nan

    @property
    def min(self):
        """Gets the min of this Statistics.


        :return: The min of this Statistics.
        :rtype: str
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this Statistics.


        :param min: The min of this Statistics.
        :type min: str
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this Statistics.


        :return: The max of this Statistics.
        :rtype: str
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this Statistics.


        :param max: The max of this Statistics.
        :type max: str
        """

        self._max = max

    @property
    def avg(self):
        """Gets the avg of this Statistics.


        :return: The avg of this Statistics.
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this Statistics.


        :param avg: The avg of this Statistics.
        :type avg: float
        """

        self._avg = avg

    @property
    def stddev(self):
        """Gets the stddev of this Statistics.


        :return: The stddev of this Statistics.
        :rtype: float
        """
        return self._stddev

    @stddev.setter
    def stddev(self, stddev):
        """Sets the stddev of this Statistics.


        :param stddev: The stddev of this Statistics.
        :type stddev: float
        """

        self._stddev = stddev

    @property
    def count_long(self):
        """Gets the count_long of this Statistics.


        :return: The count_long of this Statistics.
        :rtype: int
        """
        return self._count_long

    @count_long.setter
    def count_long(self, count_long):
        """Sets the count_long of this Statistics.


        :param count_long: The count_long of this Statistics.
        :type count_long: int
        """

        self._count_long = count_long

    @property
    def count_distinct_long(self):
        """Gets the count_distinct_long of this Statistics.


        :return: The count_distinct_long of this Statistics.
        :rtype: int
        """
        return self._count_distinct_long

    @count_distinct_long.setter
    def count_distinct_long(self, count_distinct_long):
        """Sets the count_distinct_long of this Statistics.


        :param count_distinct_long: The count_distinct_long of this Statistics.
        :type count_distinct_long: int
        """

        self._count_distinct_long = count_distinct_long

    @property
    def count_null_long(self):
        """Gets the count_null_long of this Statistics.


        :return: The count_null_long of this Statistics.
        :rtype: int
        """
        return self._count_null_long

    @count_null_long.setter
    def count_null_long(self, count_null_long):
        """Sets the count_null_long of this Statistics.


        :param count_null_long: The count_null_long of this Statistics.
        :type count_null_long: int
        """

        self._count_null_long = count_null_long

    @property
    def count_nan_long(self):
        """Gets the count_nan_long of this Statistics.


        :return: The count_nan_long of this Statistics.
        :rtype: int
        """
        return self._count_nan_long

    @count_nan_long.setter
    def count_nan_long(self, count_nan_long):
        """Sets the count_nan_long of this Statistics.


        :param count_nan_long: The count_nan_long of this Statistics.
        :type count_nan_long: int
        """

        self._count_nan_long = count_nan_long
