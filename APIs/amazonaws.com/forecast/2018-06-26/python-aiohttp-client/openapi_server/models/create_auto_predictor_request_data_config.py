# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAutoPredictorRequestDataConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_group_arn: str=None, attribute_configs: List=None, additional_datasets: List=None):
        """CreateAutoPredictorRequestDataConfig - a model defined in OpenAPI

        :param dataset_group_arn: The dataset_group_arn of this CreateAutoPredictorRequestDataConfig.
        :param attribute_configs: The attribute_configs of this CreateAutoPredictorRequestDataConfig.
        :param additional_datasets: The additional_datasets of this CreateAutoPredictorRequestDataConfig.
        """
        self.openapi_types = {
            'dataset_group_arn': str,
            'attribute_configs': List,
            'additional_datasets': List
        }

        self.attribute_map = {
            'dataset_group_arn': 'DatasetGroupArn',
            'attribute_configs': 'AttributeConfigs',
            'additional_datasets': 'AdditionalDatasets'
        }

        self._dataset_group_arn = dataset_group_arn
        self._attribute_configs = attribute_configs
        self._additional_datasets = additional_datasets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAutoPredictorRequestDataConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAutoPredictorRequest_DataConfig of this CreateAutoPredictorRequestDataConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_group_arn(self):
        """Gets the dataset_group_arn of this CreateAutoPredictorRequestDataConfig.


        :return: The dataset_group_arn of this CreateAutoPredictorRequestDataConfig.
        :rtype: str
        """
        return self._dataset_group_arn

    @dataset_group_arn.setter
    def dataset_group_arn(self, dataset_group_arn):
        """Sets the dataset_group_arn of this CreateAutoPredictorRequestDataConfig.


        :param dataset_group_arn: The dataset_group_arn of this CreateAutoPredictorRequestDataConfig.
        :type dataset_group_arn: str
        """
        if dataset_group_arn is None:
            raise ValueError("Invalid value for `dataset_group_arn`, must not be `None`")

        self._dataset_group_arn = dataset_group_arn

    @property
    def attribute_configs(self):
        """Gets the attribute_configs of this CreateAutoPredictorRequestDataConfig.


        :return: The attribute_configs of this CreateAutoPredictorRequestDataConfig.
        :rtype: List
        """
        return self._attribute_configs

    @attribute_configs.setter
    def attribute_configs(self, attribute_configs):
        """Sets the attribute_configs of this CreateAutoPredictorRequestDataConfig.


        :param attribute_configs: The attribute_configs of this CreateAutoPredictorRequestDataConfig.
        :type attribute_configs: List
        """

        self._attribute_configs = attribute_configs

    @property
    def additional_datasets(self):
        """Gets the additional_datasets of this CreateAutoPredictorRequestDataConfig.


        :return: The additional_datasets of this CreateAutoPredictorRequestDataConfig.
        :rtype: List
        """
        return self._additional_datasets

    @additional_datasets.setter
    def additional_datasets(self, additional_datasets):
        """Sets the additional_datasets of this CreateAutoPredictorRequestDataConfig.


        :param additional_datasets: The additional_datasets of this CreateAutoPredictorRequestDataConfig.
        :type additional_datasets: List
        """

        self._additional_datasets = additional_datasets
