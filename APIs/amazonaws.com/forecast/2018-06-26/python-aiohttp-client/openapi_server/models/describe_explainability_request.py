# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeExplainabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explainability_arn: str=None):
        """DescribeExplainabilityRequest - a model defined in OpenAPI

        :param explainability_arn: The explainability_arn of this DescribeExplainabilityRequest.
        """
        self.openapi_types = {
            'explainability_arn': str
        }

        self.attribute_map = {
            'explainability_arn': 'ExplainabilityArn'
        }

        self._explainability_arn = explainability_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeExplainabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeExplainabilityRequest of this DescribeExplainabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explainability_arn(self):
        """Gets the explainability_arn of this DescribeExplainabilityRequest.


        :return: The explainability_arn of this DescribeExplainabilityRequest.
        :rtype: str
        """
        return self._explainability_arn

    @explainability_arn.setter
    def explainability_arn(self, explainability_arn):
        """Sets the explainability_arn of this DescribeExplainabilityRequest.


        :param explainability_arn: The explainability_arn of this DescribeExplainabilityRequest.
        :type explainability_arn: str
        """
        if explainability_arn is None:
            raise ValueError("Invalid value for `explainability_arn`, must not be `None`")

        self._explainability_arn = explainability_arn
