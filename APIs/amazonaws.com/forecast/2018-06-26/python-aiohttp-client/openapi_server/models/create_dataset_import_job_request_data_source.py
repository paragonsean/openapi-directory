# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_source_s3_config import DataSourceS3Config
from openapi_server import util


class CreateDatasetImportJobRequestDataSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_config: DataSourceS3Config=None):
        """CreateDatasetImportJobRequestDataSource - a model defined in OpenAPI

        :param s3_config: The s3_config of this CreateDatasetImportJobRequestDataSource.
        """
        self.openapi_types = {
            's3_config': DataSourceS3Config
        }

        self.attribute_map = {
            's3_config': 'S3Config'
        }

        self._s3_config = s3_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDatasetImportJobRequestDataSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDatasetImportJobRequest_DataSource of this CreateDatasetImportJobRequestDataSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_config(self):
        """Gets the s3_config of this CreateDatasetImportJobRequestDataSource.


        :return: The s3_config of this CreateDatasetImportJobRequestDataSource.
        :rtype: DataSourceS3Config
        """
        return self._s3_config

    @s3_config.setter
    def s3_config(self, s3_config):
        """Sets the s3_config of this CreateDatasetImportJobRequestDataSource.


        :param s3_config: The s3_config of this CreateDatasetImportJobRequestDataSource.
        :type s3_config: DataSourceS3Config
        """
        if s3_config is None:
            raise ValueError("Invalid value for `s3_config`, must not be `None`")

        self._s3_config = s3_config
