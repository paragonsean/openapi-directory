# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeaturizationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forecast_frequency: str=None, forecast_dimensions: List=None, featurizations: List=None):
        """FeaturizationConfig - a model defined in OpenAPI

        :param forecast_frequency: The forecast_frequency of this FeaturizationConfig.
        :param forecast_dimensions: The forecast_dimensions of this FeaturizationConfig.
        :param featurizations: The featurizations of this FeaturizationConfig.
        """
        self.openapi_types = {
            'forecast_frequency': str,
            'forecast_dimensions': List,
            'featurizations': List
        }

        self.attribute_map = {
            'forecast_frequency': 'ForecastFrequency',
            'forecast_dimensions': 'ForecastDimensions',
            'featurizations': 'Featurizations'
        }

        self._forecast_frequency = forecast_frequency
        self._forecast_dimensions = forecast_dimensions
        self._featurizations = featurizations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeaturizationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeaturizationConfig of this FeaturizationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forecast_frequency(self):
        """Gets the forecast_frequency of this FeaturizationConfig.


        :return: The forecast_frequency of this FeaturizationConfig.
        :rtype: str
        """
        return self._forecast_frequency

    @forecast_frequency.setter
    def forecast_frequency(self, forecast_frequency):
        """Sets the forecast_frequency of this FeaturizationConfig.


        :param forecast_frequency: The forecast_frequency of this FeaturizationConfig.
        :type forecast_frequency: str
        """
        if forecast_frequency is None:
            raise ValueError("Invalid value for `forecast_frequency`, must not be `None`")

        self._forecast_frequency = forecast_frequency

    @property
    def forecast_dimensions(self):
        """Gets the forecast_dimensions of this FeaturizationConfig.


        :return: The forecast_dimensions of this FeaturizationConfig.
        :rtype: List
        """
        return self._forecast_dimensions

    @forecast_dimensions.setter
    def forecast_dimensions(self, forecast_dimensions):
        """Sets the forecast_dimensions of this FeaturizationConfig.


        :param forecast_dimensions: The forecast_dimensions of this FeaturizationConfig.
        :type forecast_dimensions: List
        """

        self._forecast_dimensions = forecast_dimensions

    @property
    def featurizations(self):
        """Gets the featurizations of this FeaturizationConfig.


        :return: The featurizations of this FeaturizationConfig.
        :rtype: List
        """
        return self._featurizations

    @featurizations.setter
    def featurizations(self, featurizations):
        """Sets the featurizations of this FeaturizationConfig.


        :param featurizations: The featurizations of this FeaturizationConfig.
        :type featurizations: List
        """

        self._featurizations = featurizations
