# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_forecast_export_job_request_destination import CreateForecastExportJobRequestDestination
from openapi_server import util


class CreateForecastExportJobRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forecast_export_job_name: str=None, forecast_arn: str=None, destination: CreateForecastExportJobRequestDestination=None, tags: List=None, format: str=None):
        """CreateForecastExportJobRequest - a model defined in OpenAPI

        :param forecast_export_job_name: The forecast_export_job_name of this CreateForecastExportJobRequest.
        :param forecast_arn: The forecast_arn of this CreateForecastExportJobRequest.
        :param destination: The destination of this CreateForecastExportJobRequest.
        :param tags: The tags of this CreateForecastExportJobRequest.
        :param format: The format of this CreateForecastExportJobRequest.
        """
        self.openapi_types = {
            'forecast_export_job_name': str,
            'forecast_arn': str,
            'destination': CreateForecastExportJobRequestDestination,
            'tags': List,
            'format': str
        }

        self.attribute_map = {
            'forecast_export_job_name': 'ForecastExportJobName',
            'forecast_arn': 'ForecastArn',
            'destination': 'Destination',
            'tags': 'Tags',
            'format': 'Format'
        }

        self._forecast_export_job_name = forecast_export_job_name
        self._forecast_arn = forecast_arn
        self._destination = destination
        self._tags = tags
        self._format = format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateForecastExportJobRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateForecastExportJobRequest of this CreateForecastExportJobRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forecast_export_job_name(self):
        """Gets the forecast_export_job_name of this CreateForecastExportJobRequest.


        :return: The forecast_export_job_name of this CreateForecastExportJobRequest.
        :rtype: str
        """
        return self._forecast_export_job_name

    @forecast_export_job_name.setter
    def forecast_export_job_name(self, forecast_export_job_name):
        """Sets the forecast_export_job_name of this CreateForecastExportJobRequest.


        :param forecast_export_job_name: The forecast_export_job_name of this CreateForecastExportJobRequest.
        :type forecast_export_job_name: str
        """
        if forecast_export_job_name is None:
            raise ValueError("Invalid value for `forecast_export_job_name`, must not be `None`")

        self._forecast_export_job_name = forecast_export_job_name

    @property
    def forecast_arn(self):
        """Gets the forecast_arn of this CreateForecastExportJobRequest.


        :return: The forecast_arn of this CreateForecastExportJobRequest.
        :rtype: str
        """
        return self._forecast_arn

    @forecast_arn.setter
    def forecast_arn(self, forecast_arn):
        """Sets the forecast_arn of this CreateForecastExportJobRequest.


        :param forecast_arn: The forecast_arn of this CreateForecastExportJobRequest.
        :type forecast_arn: str
        """
        if forecast_arn is None:
            raise ValueError("Invalid value for `forecast_arn`, must not be `None`")

        self._forecast_arn = forecast_arn

    @property
    def destination(self):
        """Gets the destination of this CreateForecastExportJobRequest.


        :return: The destination of this CreateForecastExportJobRequest.
        :rtype: CreateForecastExportJobRequestDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this CreateForecastExportJobRequest.


        :param destination: The destination of this CreateForecastExportJobRequest.
        :type destination: CreateForecastExportJobRequestDestination
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def tags(self):
        """Gets the tags of this CreateForecastExportJobRequest.


        :return: The tags of this CreateForecastExportJobRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateForecastExportJobRequest.


        :param tags: The tags of this CreateForecastExportJobRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def format(self):
        """Gets the format of this CreateForecastExportJobRequest.


        :return: The format of this CreateForecastExportJobRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateForecastExportJobRequest.


        :param format: The format of this CreateForecastExportJobRequest.
        :type format: str
        """

        self._format = format
