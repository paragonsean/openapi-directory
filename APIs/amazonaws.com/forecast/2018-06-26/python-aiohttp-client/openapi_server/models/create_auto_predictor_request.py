# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_auto_predictor_request_data_config import CreateAutoPredictorRequestDataConfig
from openapi_server.models.create_auto_predictor_request_monitor_config import CreateAutoPredictorRequestMonitorConfig
from openapi_server.models.create_auto_predictor_request_time_alignment_boundary import CreateAutoPredictorRequestTimeAlignmentBoundary
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.optimization_metric import OptimizationMetric
from openapi_server import util


class CreateAutoPredictorRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, predictor_name: str=None, forecast_horizon: int=None, forecast_types: List=None, forecast_dimensions: List=None, forecast_frequency: str=None, data_config: CreateAutoPredictorRequestDataConfig=None, encryption_config: EncryptionConfig=None, reference_predictor_arn: str=None, optimization_metric: OptimizationMetric=None, explain_predictor: bool=None, tags: List=None, monitor_config: CreateAutoPredictorRequestMonitorConfig=None, time_alignment_boundary: CreateAutoPredictorRequestTimeAlignmentBoundary=None):
        """CreateAutoPredictorRequest - a model defined in OpenAPI

        :param predictor_name: The predictor_name of this CreateAutoPredictorRequest.
        :param forecast_horizon: The forecast_horizon of this CreateAutoPredictorRequest.
        :param forecast_types: The forecast_types of this CreateAutoPredictorRequest.
        :param forecast_dimensions: The forecast_dimensions of this CreateAutoPredictorRequest.
        :param forecast_frequency: The forecast_frequency of this CreateAutoPredictorRequest.
        :param data_config: The data_config of this CreateAutoPredictorRequest.
        :param encryption_config: The encryption_config of this CreateAutoPredictorRequest.
        :param reference_predictor_arn: The reference_predictor_arn of this CreateAutoPredictorRequest.
        :param optimization_metric: The optimization_metric of this CreateAutoPredictorRequest.
        :param explain_predictor: The explain_predictor of this CreateAutoPredictorRequest.
        :param tags: The tags of this CreateAutoPredictorRequest.
        :param monitor_config: The monitor_config of this CreateAutoPredictorRequest.
        :param time_alignment_boundary: The time_alignment_boundary of this CreateAutoPredictorRequest.
        """
        self.openapi_types = {
            'predictor_name': str,
            'forecast_horizon': int,
            'forecast_types': List,
            'forecast_dimensions': List,
            'forecast_frequency': str,
            'data_config': CreateAutoPredictorRequestDataConfig,
            'encryption_config': EncryptionConfig,
            'reference_predictor_arn': str,
            'optimization_metric': OptimizationMetric,
            'explain_predictor': bool,
            'tags': List,
            'monitor_config': CreateAutoPredictorRequestMonitorConfig,
            'time_alignment_boundary': CreateAutoPredictorRequestTimeAlignmentBoundary
        }

        self.attribute_map = {
            'predictor_name': 'PredictorName',
            'forecast_horizon': 'ForecastHorizon',
            'forecast_types': 'ForecastTypes',
            'forecast_dimensions': 'ForecastDimensions',
            'forecast_frequency': 'ForecastFrequency',
            'data_config': 'DataConfig',
            'encryption_config': 'EncryptionConfig',
            'reference_predictor_arn': 'ReferencePredictorArn',
            'optimization_metric': 'OptimizationMetric',
            'explain_predictor': 'ExplainPredictor',
            'tags': 'Tags',
            'monitor_config': 'MonitorConfig',
            'time_alignment_boundary': 'TimeAlignmentBoundary'
        }

        self._predictor_name = predictor_name
        self._forecast_horizon = forecast_horizon
        self._forecast_types = forecast_types
        self._forecast_dimensions = forecast_dimensions
        self._forecast_frequency = forecast_frequency
        self._data_config = data_config
        self._encryption_config = encryption_config
        self._reference_predictor_arn = reference_predictor_arn
        self._optimization_metric = optimization_metric
        self._explain_predictor = explain_predictor
        self._tags = tags
        self._monitor_config = monitor_config
        self._time_alignment_boundary = time_alignment_boundary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAutoPredictorRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAutoPredictorRequest of this CreateAutoPredictorRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def predictor_name(self):
        """Gets the predictor_name of this CreateAutoPredictorRequest.


        :return: The predictor_name of this CreateAutoPredictorRequest.
        :rtype: str
        """
        return self._predictor_name

    @predictor_name.setter
    def predictor_name(self, predictor_name):
        """Sets the predictor_name of this CreateAutoPredictorRequest.


        :param predictor_name: The predictor_name of this CreateAutoPredictorRequest.
        :type predictor_name: str
        """
        if predictor_name is None:
            raise ValueError("Invalid value for `predictor_name`, must not be `None`")

        self._predictor_name = predictor_name

    @property
    def forecast_horizon(self):
        """Gets the forecast_horizon of this CreateAutoPredictorRequest.


        :return: The forecast_horizon of this CreateAutoPredictorRequest.
        :rtype: int
        """
        return self._forecast_horizon

    @forecast_horizon.setter
    def forecast_horizon(self, forecast_horizon):
        """Sets the forecast_horizon of this CreateAutoPredictorRequest.


        :param forecast_horizon: The forecast_horizon of this CreateAutoPredictorRequest.
        :type forecast_horizon: int
        """

        self._forecast_horizon = forecast_horizon

    @property
    def forecast_types(self):
        """Gets the forecast_types of this CreateAutoPredictorRequest.


        :return: The forecast_types of this CreateAutoPredictorRequest.
        :rtype: List
        """
        return self._forecast_types

    @forecast_types.setter
    def forecast_types(self, forecast_types):
        """Sets the forecast_types of this CreateAutoPredictorRequest.


        :param forecast_types: The forecast_types of this CreateAutoPredictorRequest.
        :type forecast_types: List
        """

        self._forecast_types = forecast_types

    @property
    def forecast_dimensions(self):
        """Gets the forecast_dimensions of this CreateAutoPredictorRequest.


        :return: The forecast_dimensions of this CreateAutoPredictorRequest.
        :rtype: List
        """
        return self._forecast_dimensions

    @forecast_dimensions.setter
    def forecast_dimensions(self, forecast_dimensions):
        """Sets the forecast_dimensions of this CreateAutoPredictorRequest.


        :param forecast_dimensions: The forecast_dimensions of this CreateAutoPredictorRequest.
        :type forecast_dimensions: List
        """

        self._forecast_dimensions = forecast_dimensions

    @property
    def forecast_frequency(self):
        """Gets the forecast_frequency of this CreateAutoPredictorRequest.


        :return: The forecast_frequency of this CreateAutoPredictorRequest.
        :rtype: str
        """
        return self._forecast_frequency

    @forecast_frequency.setter
    def forecast_frequency(self, forecast_frequency):
        """Sets the forecast_frequency of this CreateAutoPredictorRequest.


        :param forecast_frequency: The forecast_frequency of this CreateAutoPredictorRequest.
        :type forecast_frequency: str
        """

        self._forecast_frequency = forecast_frequency

    @property
    def data_config(self):
        """Gets the data_config of this CreateAutoPredictorRequest.


        :return: The data_config of this CreateAutoPredictorRequest.
        :rtype: CreateAutoPredictorRequestDataConfig
        """
        return self._data_config

    @data_config.setter
    def data_config(self, data_config):
        """Sets the data_config of this CreateAutoPredictorRequest.


        :param data_config: The data_config of this CreateAutoPredictorRequest.
        :type data_config: CreateAutoPredictorRequestDataConfig
        """

        self._data_config = data_config

    @property
    def encryption_config(self):
        """Gets the encryption_config of this CreateAutoPredictorRequest.


        :return: The encryption_config of this CreateAutoPredictorRequest.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this CreateAutoPredictorRequest.


        :param encryption_config: The encryption_config of this CreateAutoPredictorRequest.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def reference_predictor_arn(self):
        """Gets the reference_predictor_arn of this CreateAutoPredictorRequest.


        :return: The reference_predictor_arn of this CreateAutoPredictorRequest.
        :rtype: str
        """
        return self._reference_predictor_arn

    @reference_predictor_arn.setter
    def reference_predictor_arn(self, reference_predictor_arn):
        """Sets the reference_predictor_arn of this CreateAutoPredictorRequest.


        :param reference_predictor_arn: The reference_predictor_arn of this CreateAutoPredictorRequest.
        :type reference_predictor_arn: str
        """

        self._reference_predictor_arn = reference_predictor_arn

    @property
    def optimization_metric(self):
        """Gets the optimization_metric of this CreateAutoPredictorRequest.


        :return: The optimization_metric of this CreateAutoPredictorRequest.
        :rtype: OptimizationMetric
        """
        return self._optimization_metric

    @optimization_metric.setter
    def optimization_metric(self, optimization_metric):
        """Sets the optimization_metric of this CreateAutoPredictorRequest.


        :param optimization_metric: The optimization_metric of this CreateAutoPredictorRequest.
        :type optimization_metric: OptimizationMetric
        """

        self._optimization_metric = optimization_metric

    @property
    def explain_predictor(self):
        """Gets the explain_predictor of this CreateAutoPredictorRequest.


        :return: The explain_predictor of this CreateAutoPredictorRequest.
        :rtype: bool
        """
        return self._explain_predictor

    @explain_predictor.setter
    def explain_predictor(self, explain_predictor):
        """Sets the explain_predictor of this CreateAutoPredictorRequest.


        :param explain_predictor: The explain_predictor of this CreateAutoPredictorRequest.
        :type explain_predictor: bool
        """

        self._explain_predictor = explain_predictor

    @property
    def tags(self):
        """Gets the tags of this CreateAutoPredictorRequest.


        :return: The tags of this CreateAutoPredictorRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAutoPredictorRequest.


        :param tags: The tags of this CreateAutoPredictorRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def monitor_config(self):
        """Gets the monitor_config of this CreateAutoPredictorRequest.


        :return: The monitor_config of this CreateAutoPredictorRequest.
        :rtype: CreateAutoPredictorRequestMonitorConfig
        """
        return self._monitor_config

    @monitor_config.setter
    def monitor_config(self, monitor_config):
        """Sets the monitor_config of this CreateAutoPredictorRequest.


        :param monitor_config: The monitor_config of this CreateAutoPredictorRequest.
        :type monitor_config: CreateAutoPredictorRequestMonitorConfig
        """

        self._monitor_config = monitor_config

    @property
    def time_alignment_boundary(self):
        """Gets the time_alignment_boundary of this CreateAutoPredictorRequest.


        :return: The time_alignment_boundary of this CreateAutoPredictorRequest.
        :rtype: CreateAutoPredictorRequestTimeAlignmentBoundary
        """
        return self._time_alignment_boundary

    @time_alignment_boundary.setter
    def time_alignment_boundary(self, time_alignment_boundary):
        """Sets the time_alignment_boundary of this CreateAutoPredictorRequest.


        :param time_alignment_boundary: The time_alignment_boundary of this CreateAutoPredictorRequest.
        :type time_alignment_boundary: CreateAutoPredictorRequestTimeAlignmentBoundary
        """

        self._time_alignment_boundary = time_alignment_boundary
