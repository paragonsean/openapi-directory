# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParameterRanges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categorical_parameter_ranges: List=None, continuous_parameter_ranges: List=None, integer_parameter_ranges: List=None):
        """ParameterRanges - a model defined in OpenAPI

        :param categorical_parameter_ranges: The categorical_parameter_ranges of this ParameterRanges.
        :param continuous_parameter_ranges: The continuous_parameter_ranges of this ParameterRanges.
        :param integer_parameter_ranges: The integer_parameter_ranges of this ParameterRanges.
        """
        self.openapi_types = {
            'categorical_parameter_ranges': List,
            'continuous_parameter_ranges': List,
            'integer_parameter_ranges': List
        }

        self.attribute_map = {
            'categorical_parameter_ranges': 'CategoricalParameterRanges',
            'continuous_parameter_ranges': 'ContinuousParameterRanges',
            'integer_parameter_ranges': 'IntegerParameterRanges'
        }

        self._categorical_parameter_ranges = categorical_parameter_ranges
        self._continuous_parameter_ranges = continuous_parameter_ranges
        self._integer_parameter_ranges = integer_parameter_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParameterRanges':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParameterRanges of this ParameterRanges.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categorical_parameter_ranges(self):
        """Gets the categorical_parameter_ranges of this ParameterRanges.


        :return: The categorical_parameter_ranges of this ParameterRanges.
        :rtype: List
        """
        return self._categorical_parameter_ranges

    @categorical_parameter_ranges.setter
    def categorical_parameter_ranges(self, categorical_parameter_ranges):
        """Sets the categorical_parameter_ranges of this ParameterRanges.


        :param categorical_parameter_ranges: The categorical_parameter_ranges of this ParameterRanges.
        :type categorical_parameter_ranges: List
        """

        self._categorical_parameter_ranges = categorical_parameter_ranges

    @property
    def continuous_parameter_ranges(self):
        """Gets the continuous_parameter_ranges of this ParameterRanges.


        :return: The continuous_parameter_ranges of this ParameterRanges.
        :rtype: List
        """
        return self._continuous_parameter_ranges

    @continuous_parameter_ranges.setter
    def continuous_parameter_ranges(self, continuous_parameter_ranges):
        """Sets the continuous_parameter_ranges of this ParameterRanges.


        :param continuous_parameter_ranges: The continuous_parameter_ranges of this ParameterRanges.
        :type continuous_parameter_ranges: List
        """

        self._continuous_parameter_ranges = continuous_parameter_ranges

    @property
    def integer_parameter_ranges(self):
        """Gets the integer_parameter_ranges of this ParameterRanges.


        :return: The integer_parameter_ranges of this ParameterRanges.
        :rtype: List
        """
        return self._integer_parameter_ranges

    @integer_parameter_ranges.setter
    def integer_parameter_ranges(self, integer_parameter_ranges):
        """Sets the integer_parameter_ranges of this ParameterRanges.


        :param integer_parameter_ranges: The integer_parameter_ranges of this ParameterRanges.
        :type integer_parameter_ranges: List
        """

        self._integer_parameter_ranges = integer_parameter_ranges
