# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.domain import Domain
from openapi_server import util


class CreateDatasetGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dataset_group_name: str=None, domain: Domain=None, dataset_arns: List=None, tags: List=None):
        """CreateDatasetGroupRequest - a model defined in OpenAPI

        :param dataset_group_name: The dataset_group_name of this CreateDatasetGroupRequest.
        :param domain: The domain of this CreateDatasetGroupRequest.
        :param dataset_arns: The dataset_arns of this CreateDatasetGroupRequest.
        :param tags: The tags of this CreateDatasetGroupRequest.
        """
        self.openapi_types = {
            'dataset_group_name': str,
            'domain': Domain,
            'dataset_arns': List,
            'tags': List
        }

        self.attribute_map = {
            'dataset_group_name': 'DatasetGroupName',
            'domain': 'Domain',
            'dataset_arns': 'DatasetArns',
            'tags': 'Tags'
        }

        self._dataset_group_name = dataset_group_name
        self._domain = domain
        self._dataset_arns = dataset_arns
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDatasetGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDatasetGroupRequest of this CreateDatasetGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dataset_group_name(self):
        """Gets the dataset_group_name of this CreateDatasetGroupRequest.


        :return: The dataset_group_name of this CreateDatasetGroupRequest.
        :rtype: str
        """
        return self._dataset_group_name

    @dataset_group_name.setter
    def dataset_group_name(self, dataset_group_name):
        """Sets the dataset_group_name of this CreateDatasetGroupRequest.


        :param dataset_group_name: The dataset_group_name of this CreateDatasetGroupRequest.
        :type dataset_group_name: str
        """
        if dataset_group_name is None:
            raise ValueError("Invalid value for `dataset_group_name`, must not be `None`")

        self._dataset_group_name = dataset_group_name

    @property
    def domain(self):
        """Gets the domain of this CreateDatasetGroupRequest.


        :return: The domain of this CreateDatasetGroupRequest.
        :rtype: Domain
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this CreateDatasetGroupRequest.


        :param domain: The domain of this CreateDatasetGroupRequest.
        :type domain: Domain
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def dataset_arns(self):
        """Gets the dataset_arns of this CreateDatasetGroupRequest.


        :return: The dataset_arns of this CreateDatasetGroupRequest.
        :rtype: List
        """
        return self._dataset_arns

    @dataset_arns.setter
    def dataset_arns(self, dataset_arns):
        """Sets the dataset_arns of this CreateDatasetGroupRequest.


        :param dataset_arns: The dataset_arns of this CreateDatasetGroupRequest.
        :type dataset_arns: List
        """

        self._dataset_arns = dataset_arns

    @property
    def tags(self):
        """Gets the tags of this CreateDatasetGroupRequest.


        :return: The tags of this CreateDatasetGroupRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDatasetGroupRequest.


        :param tags: The tags of this CreateDatasetGroupRequest.
        :type tags: List
        """

        self._tags = tags
