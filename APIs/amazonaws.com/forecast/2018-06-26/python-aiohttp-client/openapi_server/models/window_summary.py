# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evaluation_type import EvaluationType
from openapi_server.models.window_summary_metrics import WindowSummaryMetrics
from openapi_server import util


class WindowSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, test_window_start: datetime=None, test_window_end: datetime=None, item_count: int=None, evaluation_type: EvaluationType=None, metrics: WindowSummaryMetrics=None):
        """WindowSummary - a model defined in OpenAPI

        :param test_window_start: The test_window_start of this WindowSummary.
        :param test_window_end: The test_window_end of this WindowSummary.
        :param item_count: The item_count of this WindowSummary.
        :param evaluation_type: The evaluation_type of this WindowSummary.
        :param metrics: The metrics of this WindowSummary.
        """
        self.openapi_types = {
            'test_window_start': datetime,
            'test_window_end': datetime,
            'item_count': int,
            'evaluation_type': EvaluationType,
            'metrics': WindowSummaryMetrics
        }

        self.attribute_map = {
            'test_window_start': 'TestWindowStart',
            'test_window_end': 'TestWindowEnd',
            'item_count': 'ItemCount',
            'evaluation_type': 'EvaluationType',
            'metrics': 'Metrics'
        }

        self._test_window_start = test_window_start
        self._test_window_end = test_window_end
        self._item_count = item_count
        self._evaluation_type = evaluation_type
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WindowSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WindowSummary of this WindowSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def test_window_start(self):
        """Gets the test_window_start of this WindowSummary.


        :return: The test_window_start of this WindowSummary.
        :rtype: datetime
        """
        return self._test_window_start

    @test_window_start.setter
    def test_window_start(self, test_window_start):
        """Sets the test_window_start of this WindowSummary.


        :param test_window_start: The test_window_start of this WindowSummary.
        :type test_window_start: datetime
        """

        self._test_window_start = test_window_start

    @property
    def test_window_end(self):
        """Gets the test_window_end of this WindowSummary.


        :return: The test_window_end of this WindowSummary.
        :rtype: datetime
        """
        return self._test_window_end

    @test_window_end.setter
    def test_window_end(self, test_window_end):
        """Sets the test_window_end of this WindowSummary.


        :param test_window_end: The test_window_end of this WindowSummary.
        :type test_window_end: datetime
        """

        self._test_window_end = test_window_end

    @property
    def item_count(self):
        """Gets the item_count of this WindowSummary.


        :return: The item_count of this WindowSummary.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this WindowSummary.


        :param item_count: The item_count of this WindowSummary.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def evaluation_type(self):
        """Gets the evaluation_type of this WindowSummary.


        :return: The evaluation_type of this WindowSummary.
        :rtype: EvaluationType
        """
        return self._evaluation_type

    @evaluation_type.setter
    def evaluation_type(self, evaluation_type):
        """Sets the evaluation_type of this WindowSummary.


        :param evaluation_type: The evaluation_type of this WindowSummary.
        :type evaluation_type: EvaluationType
        """

        self._evaluation_type = evaluation_type

    @property
    def metrics(self):
        """Gets the metrics of this WindowSummary.


        :return: The metrics of this WindowSummary.
        :rtype: WindowSummaryMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this WindowSummary.


        :param metrics: The metrics of this WindowSummary.
        :type metrics: WindowSummaryMetrics
        """

        self._metrics = metrics
