# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_what_if_analysis_request_time_series_selector import CreateWhatIfAnalysisRequestTimeSeriesSelector
from openapi_server import util


class CreateWhatIfAnalysisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, what_if_analysis_name: str=None, forecast_arn: str=None, time_series_selector: CreateWhatIfAnalysisRequestTimeSeriesSelector=None, tags: List=None):
        """CreateWhatIfAnalysisRequest - a model defined in OpenAPI

        :param what_if_analysis_name: The what_if_analysis_name of this CreateWhatIfAnalysisRequest.
        :param forecast_arn: The forecast_arn of this CreateWhatIfAnalysisRequest.
        :param time_series_selector: The time_series_selector of this CreateWhatIfAnalysisRequest.
        :param tags: The tags of this CreateWhatIfAnalysisRequest.
        """
        self.openapi_types = {
            'what_if_analysis_name': str,
            'forecast_arn': str,
            'time_series_selector': CreateWhatIfAnalysisRequestTimeSeriesSelector,
            'tags': List
        }

        self.attribute_map = {
            'what_if_analysis_name': 'WhatIfAnalysisName',
            'forecast_arn': 'ForecastArn',
            'time_series_selector': 'TimeSeriesSelector',
            'tags': 'Tags'
        }

        self._what_if_analysis_name = what_if_analysis_name
        self._forecast_arn = forecast_arn
        self._time_series_selector = time_series_selector
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWhatIfAnalysisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWhatIfAnalysisRequest of this CreateWhatIfAnalysisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def what_if_analysis_name(self):
        """Gets the what_if_analysis_name of this CreateWhatIfAnalysisRequest.


        :return: The what_if_analysis_name of this CreateWhatIfAnalysisRequest.
        :rtype: str
        """
        return self._what_if_analysis_name

    @what_if_analysis_name.setter
    def what_if_analysis_name(self, what_if_analysis_name):
        """Sets the what_if_analysis_name of this CreateWhatIfAnalysisRequest.


        :param what_if_analysis_name: The what_if_analysis_name of this CreateWhatIfAnalysisRequest.
        :type what_if_analysis_name: str
        """
        if what_if_analysis_name is None:
            raise ValueError("Invalid value for `what_if_analysis_name`, must not be `None`")

        self._what_if_analysis_name = what_if_analysis_name

    @property
    def forecast_arn(self):
        """Gets the forecast_arn of this CreateWhatIfAnalysisRequest.


        :return: The forecast_arn of this CreateWhatIfAnalysisRequest.
        :rtype: str
        """
        return self._forecast_arn

    @forecast_arn.setter
    def forecast_arn(self, forecast_arn):
        """Sets the forecast_arn of this CreateWhatIfAnalysisRequest.


        :param forecast_arn: The forecast_arn of this CreateWhatIfAnalysisRequest.
        :type forecast_arn: str
        """
        if forecast_arn is None:
            raise ValueError("Invalid value for `forecast_arn`, must not be `None`")

        self._forecast_arn = forecast_arn

    @property
    def time_series_selector(self):
        """Gets the time_series_selector of this CreateWhatIfAnalysisRequest.


        :return: The time_series_selector of this CreateWhatIfAnalysisRequest.
        :rtype: CreateWhatIfAnalysisRequestTimeSeriesSelector
        """
        return self._time_series_selector

    @time_series_selector.setter
    def time_series_selector(self, time_series_selector):
        """Sets the time_series_selector of this CreateWhatIfAnalysisRequest.


        :param time_series_selector: The time_series_selector of this CreateWhatIfAnalysisRequest.
        :type time_series_selector: CreateWhatIfAnalysisRequestTimeSeriesSelector
        """

        self._time_series_selector = time_series_selector

    @property
    def tags(self):
        """Gets the tags of this CreateWhatIfAnalysisRequest.


        :return: The tags of this CreateWhatIfAnalysisRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWhatIfAnalysisRequest.


        :param tags: The tags of this CreateWhatIfAnalysisRequest.
        :type tags: List
        """

        self._tags = tags
