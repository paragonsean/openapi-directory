# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server import util


class TimeSeriesCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, attribute_value: str=None, condition: Condition=None):
        """TimeSeriesCondition - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this TimeSeriesCondition.
        :param attribute_value: The attribute_value of this TimeSeriesCondition.
        :param condition: The condition of this TimeSeriesCondition.
        """
        self.openapi_types = {
            'attribute_name': str,
            'attribute_value': str,
            'condition': Condition
        }

        self.attribute_map = {
            'attribute_name': 'AttributeName',
            'attribute_value': 'AttributeValue',
            'condition': 'Condition'
        }

        self._attribute_name = attribute_name
        self._attribute_value = attribute_value
        self._condition = condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesCondition of this TimeSeriesCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this TimeSeriesCondition.


        :return: The attribute_name of this TimeSeriesCondition.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this TimeSeriesCondition.


        :param attribute_name: The attribute_name of this TimeSeriesCondition.
        :type attribute_name: str
        """
        if attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")

        self._attribute_name = attribute_name

    @property
    def attribute_value(self):
        """Gets the attribute_value of this TimeSeriesCondition.


        :return: The attribute_value of this TimeSeriesCondition.
        :rtype: str
        """
        return self._attribute_value

    @attribute_value.setter
    def attribute_value(self, attribute_value):
        """Sets the attribute_value of this TimeSeriesCondition.


        :param attribute_value: The attribute_value of this TimeSeriesCondition.
        :type attribute_value: str
        """
        if attribute_value is None:
            raise ValueError("Invalid value for `attribute_value`, must not be `None`")

        self._attribute_value = attribute_value

    @property
    def condition(self):
        """Gets the condition of this TimeSeriesCondition.


        :return: The condition of this TimeSeriesCondition.
        :rtype: Condition
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this TimeSeriesCondition.


        :param condition: The condition of this TimeSeriesCondition.
        :type condition: Condition
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")

        self._condition = condition
