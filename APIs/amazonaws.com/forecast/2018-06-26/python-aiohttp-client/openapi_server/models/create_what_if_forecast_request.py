# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_what_if_forecast_request_time_series_replacements_data_source import CreateWhatIfForecastRequestTimeSeriesReplacementsDataSource
from openapi_server import util


class CreateWhatIfForecastRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, what_if_forecast_name: str=None, what_if_analysis_arn: str=None, time_series_transformations: List=None, time_series_replacements_data_source: CreateWhatIfForecastRequestTimeSeriesReplacementsDataSource=None, tags: List=None):
        """CreateWhatIfForecastRequest - a model defined in OpenAPI

        :param what_if_forecast_name: The what_if_forecast_name of this CreateWhatIfForecastRequest.
        :param what_if_analysis_arn: The what_if_analysis_arn of this CreateWhatIfForecastRequest.
        :param time_series_transformations: The time_series_transformations of this CreateWhatIfForecastRequest.
        :param time_series_replacements_data_source: The time_series_replacements_data_source of this CreateWhatIfForecastRequest.
        :param tags: The tags of this CreateWhatIfForecastRequest.
        """
        self.openapi_types = {
            'what_if_forecast_name': str,
            'what_if_analysis_arn': str,
            'time_series_transformations': List,
            'time_series_replacements_data_source': CreateWhatIfForecastRequestTimeSeriesReplacementsDataSource,
            'tags': List
        }

        self.attribute_map = {
            'what_if_forecast_name': 'WhatIfForecastName',
            'what_if_analysis_arn': 'WhatIfAnalysisArn',
            'time_series_transformations': 'TimeSeriesTransformations',
            'time_series_replacements_data_source': 'TimeSeriesReplacementsDataSource',
            'tags': 'Tags'
        }

        self._what_if_forecast_name = what_if_forecast_name
        self._what_if_analysis_arn = what_if_analysis_arn
        self._time_series_transformations = time_series_transformations
        self._time_series_replacements_data_source = time_series_replacements_data_source
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWhatIfForecastRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWhatIfForecastRequest of this CreateWhatIfForecastRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def what_if_forecast_name(self):
        """Gets the what_if_forecast_name of this CreateWhatIfForecastRequest.


        :return: The what_if_forecast_name of this CreateWhatIfForecastRequest.
        :rtype: str
        """
        return self._what_if_forecast_name

    @what_if_forecast_name.setter
    def what_if_forecast_name(self, what_if_forecast_name):
        """Sets the what_if_forecast_name of this CreateWhatIfForecastRequest.


        :param what_if_forecast_name: The what_if_forecast_name of this CreateWhatIfForecastRequest.
        :type what_if_forecast_name: str
        """
        if what_if_forecast_name is None:
            raise ValueError("Invalid value for `what_if_forecast_name`, must not be `None`")

        self._what_if_forecast_name = what_if_forecast_name

    @property
    def what_if_analysis_arn(self):
        """Gets the what_if_analysis_arn of this CreateWhatIfForecastRequest.


        :return: The what_if_analysis_arn of this CreateWhatIfForecastRequest.
        :rtype: str
        """
        return self._what_if_analysis_arn

    @what_if_analysis_arn.setter
    def what_if_analysis_arn(self, what_if_analysis_arn):
        """Sets the what_if_analysis_arn of this CreateWhatIfForecastRequest.


        :param what_if_analysis_arn: The what_if_analysis_arn of this CreateWhatIfForecastRequest.
        :type what_if_analysis_arn: str
        """
        if what_if_analysis_arn is None:
            raise ValueError("Invalid value for `what_if_analysis_arn`, must not be `None`")

        self._what_if_analysis_arn = what_if_analysis_arn

    @property
    def time_series_transformations(self):
        """Gets the time_series_transformations of this CreateWhatIfForecastRequest.


        :return: The time_series_transformations of this CreateWhatIfForecastRequest.
        :rtype: List
        """
        return self._time_series_transformations

    @time_series_transformations.setter
    def time_series_transformations(self, time_series_transformations):
        """Sets the time_series_transformations of this CreateWhatIfForecastRequest.


        :param time_series_transformations: The time_series_transformations of this CreateWhatIfForecastRequest.
        :type time_series_transformations: List
        """

        self._time_series_transformations = time_series_transformations

    @property
    def time_series_replacements_data_source(self):
        """Gets the time_series_replacements_data_source of this CreateWhatIfForecastRequest.


        :return: The time_series_replacements_data_source of this CreateWhatIfForecastRequest.
        :rtype: CreateWhatIfForecastRequestTimeSeriesReplacementsDataSource
        """
        return self._time_series_replacements_data_source

    @time_series_replacements_data_source.setter
    def time_series_replacements_data_source(self, time_series_replacements_data_source):
        """Sets the time_series_replacements_data_source of this CreateWhatIfForecastRequest.


        :param time_series_replacements_data_source: The time_series_replacements_data_source of this CreateWhatIfForecastRequest.
        :type time_series_replacements_data_source: CreateWhatIfForecastRequestTimeSeriesReplacementsDataSource
        """

        self._time_series_replacements_data_source = time_series_replacements_data_source

    @property
    def tags(self):
        """Gets the tags of this CreateWhatIfForecastRequest.


        :return: The tags of this CreateWhatIfForecastRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWhatIfForecastRequest.


        :param tags: The tags of this CreateWhatIfForecastRequest.
        :type tags: List
        """

        self._tags = tags
