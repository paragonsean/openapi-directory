# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_forecast_request_time_series_selector import CreateForecastRequestTimeSeriesSelector
from openapi_server import util


class CreateForecastRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, forecast_name: str=None, predictor_arn: str=None, forecast_types: List=None, tags: List=None, time_series_selector: CreateForecastRequestTimeSeriesSelector=None):
        """CreateForecastRequest - a model defined in OpenAPI

        :param forecast_name: The forecast_name of this CreateForecastRequest.
        :param predictor_arn: The predictor_arn of this CreateForecastRequest.
        :param forecast_types: The forecast_types of this CreateForecastRequest.
        :param tags: The tags of this CreateForecastRequest.
        :param time_series_selector: The time_series_selector of this CreateForecastRequest.
        """
        self.openapi_types = {
            'forecast_name': str,
            'predictor_arn': str,
            'forecast_types': List,
            'tags': List,
            'time_series_selector': CreateForecastRequestTimeSeriesSelector
        }

        self.attribute_map = {
            'forecast_name': 'ForecastName',
            'predictor_arn': 'PredictorArn',
            'forecast_types': 'ForecastTypes',
            'tags': 'Tags',
            'time_series_selector': 'TimeSeriesSelector'
        }

        self._forecast_name = forecast_name
        self._predictor_arn = predictor_arn
        self._forecast_types = forecast_types
        self._tags = tags
        self._time_series_selector = time_series_selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateForecastRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateForecastRequest of this CreateForecastRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def forecast_name(self):
        """Gets the forecast_name of this CreateForecastRequest.


        :return: The forecast_name of this CreateForecastRequest.
        :rtype: str
        """
        return self._forecast_name

    @forecast_name.setter
    def forecast_name(self, forecast_name):
        """Sets the forecast_name of this CreateForecastRequest.


        :param forecast_name: The forecast_name of this CreateForecastRequest.
        :type forecast_name: str
        """
        if forecast_name is None:
            raise ValueError("Invalid value for `forecast_name`, must not be `None`")

        self._forecast_name = forecast_name

    @property
    def predictor_arn(self):
        """Gets the predictor_arn of this CreateForecastRequest.


        :return: The predictor_arn of this CreateForecastRequest.
        :rtype: str
        """
        return self._predictor_arn

    @predictor_arn.setter
    def predictor_arn(self, predictor_arn):
        """Sets the predictor_arn of this CreateForecastRequest.


        :param predictor_arn: The predictor_arn of this CreateForecastRequest.
        :type predictor_arn: str
        """
        if predictor_arn is None:
            raise ValueError("Invalid value for `predictor_arn`, must not be `None`")

        self._predictor_arn = predictor_arn

    @property
    def forecast_types(self):
        """Gets the forecast_types of this CreateForecastRequest.


        :return: The forecast_types of this CreateForecastRequest.
        :rtype: List
        """
        return self._forecast_types

    @forecast_types.setter
    def forecast_types(self, forecast_types):
        """Sets the forecast_types of this CreateForecastRequest.


        :param forecast_types: The forecast_types of this CreateForecastRequest.
        :type forecast_types: List
        """

        self._forecast_types = forecast_types

    @property
    def tags(self):
        """Gets the tags of this CreateForecastRequest.


        :return: The tags of this CreateForecastRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateForecastRequest.


        :param tags: The tags of this CreateForecastRequest.
        :type tags: List
        """

        self._tags = tags

    @property
    def time_series_selector(self):
        """Gets the time_series_selector of this CreateForecastRequest.


        :return: The time_series_selector of this CreateForecastRequest.
        :rtype: CreateForecastRequestTimeSeriesSelector
        """
        return self._time_series_selector

    @time_series_selector.setter
    def time_series_selector(self, time_series_selector):
        """Sets the time_series_selector of this CreateForecastRequest.


        :param time_series_selector: The time_series_selector of this CreateForecastRequest.
        :type time_series_selector: CreateForecastRequestTimeSeriesSelector
        """

        self._time_series_selector = time_series_selector
