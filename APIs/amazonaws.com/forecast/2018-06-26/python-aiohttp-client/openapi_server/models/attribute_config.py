# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, transformations: Dict=None):
        """AttributeConfig - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this AttributeConfig.
        :param transformations: The transformations of this AttributeConfig.
        """
        self.openapi_types = {
            'attribute_name': str,
            'transformations': Dict
        }

        self.attribute_map = {
            'attribute_name': 'AttributeName',
            'transformations': 'Transformations'
        }

        self._attribute_name = attribute_name
        self._transformations = transformations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeConfig of this AttributeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this AttributeConfig.


        :return: The attribute_name of this AttributeConfig.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this AttributeConfig.


        :param attribute_name: The attribute_name of this AttributeConfig.
        :type attribute_name: str
        """
        if attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")

        self._attribute_name = attribute_name

    @property
    def transformations(self):
        """Gets the transformations of this AttributeConfig.


        :return: The transformations of this AttributeConfig.
        :rtype: Dict
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations):
        """Sets the transformations of this AttributeConfig.


        :param transformations: The transformations of this AttributeConfig.
        :type transformations: Dict
        """
        if transformations is None:
            raise ValueError("Invalid value for `transformations`, must not be `None`")

        self._transformations = transformations
