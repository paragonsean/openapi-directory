# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation import Operation
from openapi_server import util


class Action(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_name: str=None, operation: Operation=None, value: float=None):
        """Action - a model defined in OpenAPI

        :param attribute_name: The attribute_name of this Action.
        :param operation: The operation of this Action.
        :param value: The value of this Action.
        """
        self.openapi_types = {
            'attribute_name': str,
            'operation': Operation,
            'value': float
        }

        self.attribute_map = {
            'attribute_name': 'AttributeName',
            'operation': 'Operation',
            'value': 'Value'
        }

        self._attribute_name = attribute_name
        self._operation = operation
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Action':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Action of this Action.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_name(self):
        """Gets the attribute_name of this Action.


        :return: The attribute_name of this Action.
        :rtype: str
        """
        return self._attribute_name

    @attribute_name.setter
    def attribute_name(self, attribute_name):
        """Sets the attribute_name of this Action.


        :param attribute_name: The attribute_name of this Action.
        :type attribute_name: str
        """
        if attribute_name is None:
            raise ValueError("Invalid value for `attribute_name`, must not be `None`")

        self._attribute_name = attribute_name

    @property
    def operation(self):
        """Gets the operation of this Action.


        :return: The operation of this Action.
        :rtype: Operation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Action.


        :param operation: The operation of this Action.
        :type operation: Operation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")

        self._operation = operation

    @property
    def value(self):
        """Gets the value of this Action.


        :return: The value of this Action.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Action.


        :param value: The value of this Action.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
