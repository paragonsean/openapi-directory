/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAutoPredictorRequestDataConfig;
import org.openapitools.client.model.CreateAutoPredictorRequestMonitorConfig;
import org.openapitools.client.model.CreateAutoPredictorRequestTimeAlignmentBoundary;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.OptimizationMetric;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for CreateAutoPredictorRequest
 */
public class CreateAutoPredictorRequestTest {
    private final CreateAutoPredictorRequest model = new CreateAutoPredictorRequest();

    /**
     * Model tests for CreateAutoPredictorRequest
     */
    @Test
    public void testCreateAutoPredictorRequest() {
        // TODO: test CreateAutoPredictorRequest
    }

    /**
     * Test the property 'predictorName'
     */
    @Test
    public void predictorNameTest() {
        // TODO: test predictorName
    }

    /**
     * Test the property 'forecastHorizon'
     */
    @Test
    public void forecastHorizonTest() {
        // TODO: test forecastHorizon
    }

    /**
     * Test the property 'forecastTypes'
     */
    @Test
    public void forecastTypesTest() {
        // TODO: test forecastTypes
    }

    /**
     * Test the property 'forecastDimensions'
     */
    @Test
    public void forecastDimensionsTest() {
        // TODO: test forecastDimensions
    }

    /**
     * Test the property 'forecastFrequency'
     */
    @Test
    public void forecastFrequencyTest() {
        // TODO: test forecastFrequency
    }

    /**
     * Test the property 'dataConfig'
     */
    @Test
    public void dataConfigTest() {
        // TODO: test dataConfig
    }

    /**
     * Test the property 'encryptionConfig'
     */
    @Test
    public void encryptionConfigTest() {
        // TODO: test encryptionConfig
    }

    /**
     * Test the property 'referencePredictorArn'
     */
    @Test
    public void referencePredictorArnTest() {
        // TODO: test referencePredictorArn
    }

    /**
     * Test the property 'optimizationMetric'
     */
    @Test
    public void optimizationMetricTest() {
        // TODO: test optimizationMetric
    }

    /**
     * Test the property 'explainPredictor'
     */
    @Test
    public void explainPredictorTest() {
        // TODO: test explainPredictor
    }

    /**
     * Test the property 'tags'
     */
    @Test
    public void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'monitorConfig'
     */
    @Test
    public void monitorConfigTest() {
        // TODO: test monitorConfig
    }

    /**
     * Test the property 'timeAlignmentBoundary'
     */
    @Test
    public void timeAlignmentBoundaryTest() {
        // TODO: test timeAlignmentBoundary
    }

}
