/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;note&gt; &lt;p&gt;This object belongs to the &lt;a&gt;CreatePredictor&lt;/a&gt; operation. If you created your predictor with &lt;a&gt;CreateAutoPredictor&lt;/a&gt;, see &lt;a&gt;AttributeConfig&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;In a &lt;a&gt;CreatePredictor&lt;/a&gt; operation, the specified algorithm trains a model using the specified dataset group. You can optionally tell the operation to modify data fields prior to training a model. These modifications are referred to as &lt;i&gt;featurization&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You define featurization using the &lt;code&gt;FeaturizationConfig&lt;/code&gt; object. You specify an array of transformations, one for each field that you want to featurize. You then include the &lt;code&gt;FeaturizationConfig&lt;/code&gt; object in your &lt;code&gt;CreatePredictor&lt;/code&gt; request. Amazon Forecast applies the featurization to the &lt;code&gt;TARGET_TIME_SERIES&lt;/code&gt; and &lt;code&gt;RELATED_TIME_SERIES&lt;/code&gt; datasets before model training.&lt;/p&gt; &lt;p&gt;You can create multiple featurization configurations. For example, you might call the &lt;code&gt;CreatePredictor&lt;/code&gt; operation twice by specifying different featurization configurations.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeaturizationConfig {
  public static final String SERIALIZED_NAME_FORECAST_FREQUENCY = "ForecastFrequency";
  @SerializedName(SERIALIZED_NAME_FORECAST_FREQUENCY)
  private String forecastFrequency;

  public static final String SERIALIZED_NAME_FORECAST_DIMENSIONS = "ForecastDimensions";
  @SerializedName(SERIALIZED_NAME_FORECAST_DIMENSIONS)
  private List forecastDimensions;

  public static final String SERIALIZED_NAME_FEATURIZATIONS = "Featurizations";
  @SerializedName(SERIALIZED_NAME_FEATURIZATIONS)
  private List featurizations;

  public FeaturizationConfig() {
  }

  public FeaturizationConfig forecastFrequency(String forecastFrequency) {
    this.forecastFrequency = forecastFrequency;
    return this;
  }

  /**
   * Get forecastFrequency
   * @return forecastFrequency
   */
  @javax.annotation.Nonnull
  public String getForecastFrequency() {
    return forecastFrequency;
  }

  public void setForecastFrequency(String forecastFrequency) {
    this.forecastFrequency = forecastFrequency;
  }


  public FeaturizationConfig forecastDimensions(List forecastDimensions) {
    this.forecastDimensions = forecastDimensions;
    return this;
  }

  /**
   * Get forecastDimensions
   * @return forecastDimensions
   */
  @javax.annotation.Nullable
  public List getForecastDimensions() {
    return forecastDimensions;
  }

  public void setForecastDimensions(List forecastDimensions) {
    this.forecastDimensions = forecastDimensions;
  }


  public FeaturizationConfig featurizations(List featurizations) {
    this.featurizations = featurizations;
    return this;
  }

  /**
   * Get featurizations
   * @return featurizations
   */
  @javax.annotation.Nullable
  public List getFeaturizations() {
    return featurizations;
  }

  public void setFeaturizations(List featurizations) {
    this.featurizations = featurizations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeaturizationConfig featurizationConfig = (FeaturizationConfig) o;
    return Objects.equals(this.forecastFrequency, featurizationConfig.forecastFrequency) &&
        Objects.equals(this.forecastDimensions, featurizationConfig.forecastDimensions) &&
        Objects.equals(this.featurizations, featurizationConfig.featurizations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forecastFrequency, forecastDimensions, featurizations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeaturizationConfig {\n");
    sb.append("    forecastFrequency: ").append(toIndentedString(forecastFrequency)).append("\n");
    sb.append("    forecastDimensions: ").append(toIndentedString(forecastDimensions)).append("\n");
    sb.append("    featurizations: ").append(toIndentedString(featurizations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ForecastFrequency");
    openapiFields.add("ForecastDimensions");
    openapiFields.add("Featurizations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ForecastFrequency");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeaturizationConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeaturizationConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeaturizationConfig is not found in the empty JSON string", FeaturizationConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeaturizationConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeaturizationConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeaturizationConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ForecastFrequency`
      String.validateJsonElement(jsonObj.get("ForecastFrequency"));
      // validate the optional field `ForecastDimensions`
      if (jsonObj.get("ForecastDimensions") != null && !jsonObj.get("ForecastDimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ForecastDimensions"));
      }
      // validate the optional field `Featurizations`
      if (jsonObj.get("Featurizations") != null && !jsonObj.get("Featurizations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Featurizations"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeaturizationConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeaturizationConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeaturizationConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeaturizationConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FeaturizationConfig>() {
           @Override
           public void write(JsonWriter out, FeaturizationConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeaturizationConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeaturizationConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeaturizationConfig
   * @throws IOException if the JSON string is invalid with respect to FeaturizationConfig
   */
  public static FeaturizationConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeaturizationConfig.class);
  }

  /**
   * Convert an instance of FeaturizationConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

