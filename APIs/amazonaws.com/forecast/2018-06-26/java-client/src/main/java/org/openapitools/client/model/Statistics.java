/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides statistics for each data field imported into to an Amazon Forecast dataset with the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/forecast/latest/dg/API_CreateDatasetImportJob.html\&quot;&gt;CreateDatasetImportJob&lt;/a&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Statistics {
  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_COUNT_DISTINCT = "CountDistinct";
  @SerializedName(SERIALIZED_NAME_COUNT_DISTINCT)
  private Integer countDistinct;

  public static final String SERIALIZED_NAME_COUNT_NULL = "CountNull";
  @SerializedName(SERIALIZED_NAME_COUNT_NULL)
  private Integer countNull;

  public static final String SERIALIZED_NAME_COUNT_NAN = "CountNan";
  @SerializedName(SERIALIZED_NAME_COUNT_NAN)
  private Integer countNan;

  public static final String SERIALIZED_NAME_MIN = "Min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private String min;

  public static final String SERIALIZED_NAME_MAX = "Max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private String max;

  public static final String SERIALIZED_NAME_AVG = "Avg";
  @SerializedName(SERIALIZED_NAME_AVG)
  private Double avg;

  public static final String SERIALIZED_NAME_STDDEV = "Stddev";
  @SerializedName(SERIALIZED_NAME_STDDEV)
  private Double stddev;

  public static final String SERIALIZED_NAME_COUNT_LONG = "CountLong";
  @SerializedName(SERIALIZED_NAME_COUNT_LONG)
  private Integer countLong;

  public static final String SERIALIZED_NAME_COUNT_DISTINCT_LONG = "CountDistinctLong";
  @SerializedName(SERIALIZED_NAME_COUNT_DISTINCT_LONG)
  private Integer countDistinctLong;

  public static final String SERIALIZED_NAME_COUNT_NULL_LONG = "CountNullLong";
  @SerializedName(SERIALIZED_NAME_COUNT_NULL_LONG)
  private Integer countNullLong;

  public static final String SERIALIZED_NAME_COUNT_NAN_LONG = "CountNanLong";
  @SerializedName(SERIALIZED_NAME_COUNT_NAN_LONG)
  private Integer countNanLong;

  public Statistics() {
  }

  public Statistics count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public Statistics countDistinct(Integer countDistinct) {
    this.countDistinct = countDistinct;
    return this;
  }

  /**
   * Get countDistinct
   * @return countDistinct
   */
  @javax.annotation.Nullable
  public Integer getCountDistinct() {
    return countDistinct;
  }

  public void setCountDistinct(Integer countDistinct) {
    this.countDistinct = countDistinct;
  }


  public Statistics countNull(Integer countNull) {
    this.countNull = countNull;
    return this;
  }

  /**
   * Get countNull
   * @return countNull
   */
  @javax.annotation.Nullable
  public Integer getCountNull() {
    return countNull;
  }

  public void setCountNull(Integer countNull) {
    this.countNull = countNull;
  }


  public Statistics countNan(Integer countNan) {
    this.countNan = countNan;
    return this;
  }

  /**
   * Get countNan
   * @return countNan
   */
  @javax.annotation.Nullable
  public Integer getCountNan() {
    return countNan;
  }

  public void setCountNan(Integer countNan) {
    this.countNan = countNan;
  }


  public Statistics min(String min) {
    this.min = min;
    return this;
  }

  /**
   * Get min
   * @return min
   */
  @javax.annotation.Nullable
  public String getMin() {
    return min;
  }

  public void setMin(String min) {
    this.min = min;
  }


  public Statistics max(String max) {
    this.max = max;
    return this;
  }

  /**
   * Get max
   * @return max
   */
  @javax.annotation.Nullable
  public String getMax() {
    return max;
  }

  public void setMax(String max) {
    this.max = max;
  }


  public Statistics avg(Double avg) {
    this.avg = avg;
    return this;
  }

  /**
   * Get avg
   * @return avg
   */
  @javax.annotation.Nullable
  public Double getAvg() {
    return avg;
  }

  public void setAvg(Double avg) {
    this.avg = avg;
  }


  public Statistics stddev(Double stddev) {
    this.stddev = stddev;
    return this;
  }

  /**
   * Get stddev
   * @return stddev
   */
  @javax.annotation.Nullable
  public Double getStddev() {
    return stddev;
  }

  public void setStddev(Double stddev) {
    this.stddev = stddev;
  }


  public Statistics countLong(Integer countLong) {
    this.countLong = countLong;
    return this;
  }

  /**
   * Get countLong
   * @return countLong
   */
  @javax.annotation.Nullable
  public Integer getCountLong() {
    return countLong;
  }

  public void setCountLong(Integer countLong) {
    this.countLong = countLong;
  }


  public Statistics countDistinctLong(Integer countDistinctLong) {
    this.countDistinctLong = countDistinctLong;
    return this;
  }

  /**
   * Get countDistinctLong
   * @return countDistinctLong
   */
  @javax.annotation.Nullable
  public Integer getCountDistinctLong() {
    return countDistinctLong;
  }

  public void setCountDistinctLong(Integer countDistinctLong) {
    this.countDistinctLong = countDistinctLong;
  }


  public Statistics countNullLong(Integer countNullLong) {
    this.countNullLong = countNullLong;
    return this;
  }

  /**
   * Get countNullLong
   * @return countNullLong
   */
  @javax.annotation.Nullable
  public Integer getCountNullLong() {
    return countNullLong;
  }

  public void setCountNullLong(Integer countNullLong) {
    this.countNullLong = countNullLong;
  }


  public Statistics countNanLong(Integer countNanLong) {
    this.countNanLong = countNanLong;
    return this;
  }

  /**
   * Get countNanLong
   * @return countNanLong
   */
  @javax.annotation.Nullable
  public Integer getCountNanLong() {
    return countNanLong;
  }

  public void setCountNanLong(Integer countNanLong) {
    this.countNanLong = countNanLong;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Statistics statistics = (Statistics) o;
    return Objects.equals(this.count, statistics.count) &&
        Objects.equals(this.countDistinct, statistics.countDistinct) &&
        Objects.equals(this.countNull, statistics.countNull) &&
        Objects.equals(this.countNan, statistics.countNan) &&
        Objects.equals(this.min, statistics.min) &&
        Objects.equals(this.max, statistics.max) &&
        Objects.equals(this.avg, statistics.avg) &&
        Objects.equals(this.stddev, statistics.stddev) &&
        Objects.equals(this.countLong, statistics.countLong) &&
        Objects.equals(this.countDistinctLong, statistics.countDistinctLong) &&
        Objects.equals(this.countNullLong, statistics.countNullLong) &&
        Objects.equals(this.countNanLong, statistics.countNanLong);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, countDistinct, countNull, countNan, min, max, avg, stddev, countLong, countDistinctLong, countNullLong, countNanLong);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Statistics {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    countDistinct: ").append(toIndentedString(countDistinct)).append("\n");
    sb.append("    countNull: ").append(toIndentedString(countNull)).append("\n");
    sb.append("    countNan: ").append(toIndentedString(countNan)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    avg: ").append(toIndentedString(avg)).append("\n");
    sb.append("    stddev: ").append(toIndentedString(stddev)).append("\n");
    sb.append("    countLong: ").append(toIndentedString(countLong)).append("\n");
    sb.append("    countDistinctLong: ").append(toIndentedString(countDistinctLong)).append("\n");
    sb.append("    countNullLong: ").append(toIndentedString(countNullLong)).append("\n");
    sb.append("    countNanLong: ").append(toIndentedString(countNanLong)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Count");
    openapiFields.add("CountDistinct");
    openapiFields.add("CountNull");
    openapiFields.add("CountNan");
    openapiFields.add("Min");
    openapiFields.add("Max");
    openapiFields.add("Avg");
    openapiFields.add("Stddev");
    openapiFields.add("CountLong");
    openapiFields.add("CountDistinctLong");
    openapiFields.add("CountNullLong");
    openapiFields.add("CountNanLong");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Statistics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Statistics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Statistics is not found in the empty JSON string", Statistics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Statistics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Statistics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Count`
      if (jsonObj.get("Count") != null && !jsonObj.get("Count").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Count"));
      }
      // validate the optional field `CountDistinct`
      if (jsonObj.get("CountDistinct") != null && !jsonObj.get("CountDistinct").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountDistinct"));
      }
      // validate the optional field `CountNull`
      if (jsonObj.get("CountNull") != null && !jsonObj.get("CountNull").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountNull"));
      }
      // validate the optional field `CountNan`
      if (jsonObj.get("CountNan") != null && !jsonObj.get("CountNan").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountNan"));
      }
      // validate the optional field `Min`
      if (jsonObj.get("Min") != null && !jsonObj.get("Min").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Min"));
      }
      // validate the optional field `Max`
      if (jsonObj.get("Max") != null && !jsonObj.get("Max").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Max"));
      }
      // validate the optional field `Avg`
      if (jsonObj.get("Avg") != null && !jsonObj.get("Avg").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Avg"));
      }
      // validate the optional field `Stddev`
      if (jsonObj.get("Stddev") != null && !jsonObj.get("Stddev").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Stddev"));
      }
      // validate the optional field `CountLong`
      if (jsonObj.get("CountLong") != null && !jsonObj.get("CountLong").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountLong"));
      }
      // validate the optional field `CountDistinctLong`
      if (jsonObj.get("CountDistinctLong") != null && !jsonObj.get("CountDistinctLong").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountDistinctLong"));
      }
      // validate the optional field `CountNullLong`
      if (jsonObj.get("CountNullLong") != null && !jsonObj.get("CountNullLong").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountNullLong"));
      }
      // validate the optional field `CountNanLong`
      if (jsonObj.get("CountNanLong") != null && !jsonObj.get("CountNanLong").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("CountNanLong"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Statistics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Statistics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Statistics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Statistics.class));

       return (TypeAdapter<T>) new TypeAdapter<Statistics>() {
           @Override
           public void write(JsonWriter out, Statistics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Statistics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Statistics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Statistics
   * @throws IOException if the JSON string is invalid with respect to Statistics
   */
  public static Statistics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Statistics.class);
  }

  /**
   * Convert an instance of Statistics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

