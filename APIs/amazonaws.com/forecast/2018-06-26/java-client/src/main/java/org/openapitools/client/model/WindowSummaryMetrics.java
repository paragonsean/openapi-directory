/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WindowSummaryMetrics
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WindowSummaryMetrics {
  public static final String SERIALIZED_NAME_R_M_S_E = "RMSE";
  @SerializedName(SERIALIZED_NAME_R_M_S_E)
  private Double RMSE;

  public static final String SERIALIZED_NAME_WEIGHTED_QUANTILE_LOSSES = "WeightedQuantileLosses";
  @SerializedName(SERIALIZED_NAME_WEIGHTED_QUANTILE_LOSSES)
  private List weightedQuantileLosses;

  public static final String SERIALIZED_NAME_ERROR_METRICS = "ErrorMetrics";
  @SerializedName(SERIALIZED_NAME_ERROR_METRICS)
  private List errorMetrics;

  public static final String SERIALIZED_NAME_AVERAGE_WEIGHTED_QUANTILE_LOSS = "AverageWeightedQuantileLoss";
  @SerializedName(SERIALIZED_NAME_AVERAGE_WEIGHTED_QUANTILE_LOSS)
  private Double averageWeightedQuantileLoss;

  public WindowSummaryMetrics() {
  }

  public WindowSummaryMetrics RMSE(Double RMSE) {
    this.RMSE = RMSE;
    return this;
  }

  /**
   * Get RMSE
   * @return RMSE
   */
  @javax.annotation.Nullable
  public Double getRMSE() {
    return RMSE;
  }

  public void setRMSE(Double RMSE) {
    this.RMSE = RMSE;
  }


  public WindowSummaryMetrics weightedQuantileLosses(List weightedQuantileLosses) {
    this.weightedQuantileLosses = weightedQuantileLosses;
    return this;
  }

  /**
   * Get weightedQuantileLosses
   * @return weightedQuantileLosses
   */
  @javax.annotation.Nullable
  public List getWeightedQuantileLosses() {
    return weightedQuantileLosses;
  }

  public void setWeightedQuantileLosses(List weightedQuantileLosses) {
    this.weightedQuantileLosses = weightedQuantileLosses;
  }


  public WindowSummaryMetrics errorMetrics(List errorMetrics) {
    this.errorMetrics = errorMetrics;
    return this;
  }

  /**
   * Get errorMetrics
   * @return errorMetrics
   */
  @javax.annotation.Nullable
  public List getErrorMetrics() {
    return errorMetrics;
  }

  public void setErrorMetrics(List errorMetrics) {
    this.errorMetrics = errorMetrics;
  }


  public WindowSummaryMetrics averageWeightedQuantileLoss(Double averageWeightedQuantileLoss) {
    this.averageWeightedQuantileLoss = averageWeightedQuantileLoss;
    return this;
  }

  /**
   * Get averageWeightedQuantileLoss
   * @return averageWeightedQuantileLoss
   */
  @javax.annotation.Nullable
  public Double getAverageWeightedQuantileLoss() {
    return averageWeightedQuantileLoss;
  }

  public void setAverageWeightedQuantileLoss(Double averageWeightedQuantileLoss) {
    this.averageWeightedQuantileLoss = averageWeightedQuantileLoss;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WindowSummaryMetrics windowSummaryMetrics = (WindowSummaryMetrics) o;
    return Objects.equals(this.RMSE, windowSummaryMetrics.RMSE) &&
        Objects.equals(this.weightedQuantileLosses, windowSummaryMetrics.weightedQuantileLosses) &&
        Objects.equals(this.errorMetrics, windowSummaryMetrics.errorMetrics) &&
        Objects.equals(this.averageWeightedQuantileLoss, windowSummaryMetrics.averageWeightedQuantileLoss);
  }

  @Override
  public int hashCode() {
    return Objects.hash(RMSE, weightedQuantileLosses, errorMetrics, averageWeightedQuantileLoss);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WindowSummaryMetrics {\n");
    sb.append("    RMSE: ").append(toIndentedString(RMSE)).append("\n");
    sb.append("    weightedQuantileLosses: ").append(toIndentedString(weightedQuantileLosses)).append("\n");
    sb.append("    errorMetrics: ").append(toIndentedString(errorMetrics)).append("\n");
    sb.append("    averageWeightedQuantileLoss: ").append(toIndentedString(averageWeightedQuantileLoss)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RMSE");
    openapiFields.add("WeightedQuantileLosses");
    openapiFields.add("ErrorMetrics");
    openapiFields.add("AverageWeightedQuantileLoss");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WindowSummaryMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WindowSummaryMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WindowSummaryMetrics is not found in the empty JSON string", WindowSummaryMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WindowSummaryMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WindowSummaryMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `RMSE`
      if (jsonObj.get("RMSE") != null && !jsonObj.get("RMSE").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("RMSE"));
      }
      // validate the optional field `WeightedQuantileLosses`
      if (jsonObj.get("WeightedQuantileLosses") != null && !jsonObj.get("WeightedQuantileLosses").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("WeightedQuantileLosses"));
      }
      // validate the optional field `ErrorMetrics`
      if (jsonObj.get("ErrorMetrics") != null && !jsonObj.get("ErrorMetrics").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ErrorMetrics"));
      }
      // validate the optional field `AverageWeightedQuantileLoss`
      if (jsonObj.get("AverageWeightedQuantileLoss") != null && !jsonObj.get("AverageWeightedQuantileLoss").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("AverageWeightedQuantileLoss"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WindowSummaryMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WindowSummaryMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WindowSummaryMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WindowSummaryMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<WindowSummaryMetrics>() {
           @Override
           public void write(JsonWriter out, WindowSummaryMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WindowSummaryMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WindowSummaryMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WindowSummaryMetrics
   * @throws IOException if the JSON string is invalid with respect to WindowSummaryMetrics
   */
  public static WindowSummaryMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WindowSummaryMetrics.class);
  }

  /**
   * Convert an instance of WindowSummaryMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

