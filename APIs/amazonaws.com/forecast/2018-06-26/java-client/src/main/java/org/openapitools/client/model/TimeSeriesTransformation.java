/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeSeriesTransformationAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A transformation function is a pair of operations that select and modify the rows in a related time series. You select the rows that you want with a condition operation and you modify the rows with a transformation operation. All conditions are joined with an AND operation, meaning that all conditions must be true for the transformation to be applied. Transformations are applied in the order that they are listed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesTransformation {
  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private TimeSeriesTransformationAction action;

  public static final String SERIALIZED_NAME_TIME_SERIES_CONDITIONS = "TimeSeriesConditions";
  @SerializedName(SERIALIZED_NAME_TIME_SERIES_CONDITIONS)
  private List timeSeriesConditions;

  public TimeSeriesTransformation() {
  }

  public TimeSeriesTransformation action(TimeSeriesTransformationAction action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public TimeSeriesTransformationAction getAction() {
    return action;
  }

  public void setAction(TimeSeriesTransformationAction action) {
    this.action = action;
  }


  public TimeSeriesTransformation timeSeriesConditions(List timeSeriesConditions) {
    this.timeSeriesConditions = timeSeriesConditions;
    return this;
  }

  /**
   * Get timeSeriesConditions
   * @return timeSeriesConditions
   */
  @javax.annotation.Nullable
  public List getTimeSeriesConditions() {
    return timeSeriesConditions;
  }

  public void setTimeSeriesConditions(List timeSeriesConditions) {
    this.timeSeriesConditions = timeSeriesConditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesTransformation timeSeriesTransformation = (TimeSeriesTransformation) o;
    return Objects.equals(this.action, timeSeriesTransformation.action) &&
        Objects.equals(this.timeSeriesConditions, timeSeriesTransformation.timeSeriesConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, timeSeriesConditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesTransformation {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    timeSeriesConditions: ").append(toIndentedString(timeSeriesConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Action");
    openapiFields.add("TimeSeriesConditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesTransformation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesTransformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesTransformation is not found in the empty JSON string", TimeSeriesTransformation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesTransformation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesTransformation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Action`
      if (jsonObj.get("Action") != null && !jsonObj.get("Action").isJsonNull()) {
        TimeSeriesTransformationAction.validateJsonElement(jsonObj.get("Action"));
      }
      // validate the optional field `TimeSeriesConditions`
      if (jsonObj.get("TimeSeriesConditions") != null && !jsonObj.get("TimeSeriesConditions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TimeSeriesConditions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesTransformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesTransformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesTransformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesTransformation.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesTransformation>() {
           @Override
           public void write(JsonWriter out, TimeSeriesTransformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesTransformation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesTransformation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesTransformation
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesTransformation
   */
  public static TimeSeriesTransformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesTransformation.class);
  }

  /**
   * Convert an instance of TimeSeriesTransformation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

