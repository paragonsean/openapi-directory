/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.DescribeDatasetImportJobResponseDataSource;
import org.openapitools.client.model.ImportMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDatasetImportJobResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDatasetImportJobResponse {
  public static final String SERIALIZED_NAME_DATASET_IMPORT_JOB_NAME = "DatasetImportJobName";
  @SerializedName(SERIALIZED_NAME_DATASET_IMPORT_JOB_NAME)
  private String datasetImportJobName;

  public static final String SERIALIZED_NAME_DATASET_IMPORT_JOB_ARN = "DatasetImportJobArn";
  @SerializedName(SERIALIZED_NAME_DATASET_IMPORT_JOB_ARN)
  private String datasetImportJobArn;

  public static final String SERIALIZED_NAME_DATASET_ARN = "DatasetArn";
  @SerializedName(SERIALIZED_NAME_DATASET_ARN)
  private String datasetArn;

  public static final String SERIALIZED_NAME_TIMESTAMP_FORMAT = "TimestampFormat";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_FORMAT)
  private String timestampFormat;

  public static final String SERIALIZED_NAME_TIME_ZONE = "TimeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_USE_GEOLOCATION_FOR_TIME_ZONE = "UseGeolocationForTimeZone";
  @SerializedName(SERIALIZED_NAME_USE_GEOLOCATION_FOR_TIME_ZONE)
  private Boolean useGeolocationForTimeZone;

  public static final String SERIALIZED_NAME_GEOLOCATION_FORMAT = "GeolocationFormat";
  @SerializedName(SERIALIZED_NAME_GEOLOCATION_FORMAT)
  private String geolocationFormat;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DescribeDatasetImportJobResponseDataSource dataSource;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_REMAINING_IN_MINUTES = "EstimatedTimeRemainingInMinutes";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_REMAINING_IN_MINUTES)
  private Integer estimatedTimeRemainingInMinutes;

  public static final String SERIALIZED_NAME_FIELD_STATISTICS = "FieldStatistics";
  @SerializedName(SERIALIZED_NAME_FIELD_STATISTICS)
  private Map fieldStatistics;

  public static final String SERIALIZED_NAME_DATA_SIZE = "DataSize";
  @SerializedName(SERIALIZED_NAME_DATA_SIZE)
  private Double dataSize;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "LastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  private OffsetDateTime lastModificationTime;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_IMPORT_MODE = "ImportMode";
  @SerializedName(SERIALIZED_NAME_IMPORT_MODE)
  private ImportMode importMode;

  public DescribeDatasetImportJobResponse() {
  }

  public DescribeDatasetImportJobResponse datasetImportJobName(String datasetImportJobName) {
    this.datasetImportJobName = datasetImportJobName;
    return this;
  }

  /**
   * Get datasetImportJobName
   * @return datasetImportJobName
   */
  @javax.annotation.Nullable
  public String getDatasetImportJobName() {
    return datasetImportJobName;
  }

  public void setDatasetImportJobName(String datasetImportJobName) {
    this.datasetImportJobName = datasetImportJobName;
  }


  public DescribeDatasetImportJobResponse datasetImportJobArn(String datasetImportJobArn) {
    this.datasetImportJobArn = datasetImportJobArn;
    return this;
  }

  /**
   * Get datasetImportJobArn
   * @return datasetImportJobArn
   */
  @javax.annotation.Nullable
  public String getDatasetImportJobArn() {
    return datasetImportJobArn;
  }

  public void setDatasetImportJobArn(String datasetImportJobArn) {
    this.datasetImportJobArn = datasetImportJobArn;
  }


  public DescribeDatasetImportJobResponse datasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
    return this;
  }

  /**
   * Get datasetArn
   * @return datasetArn
   */
  @javax.annotation.Nullable
  public String getDatasetArn() {
    return datasetArn;
  }

  public void setDatasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
  }


  public DescribeDatasetImportJobResponse timestampFormat(String timestampFormat) {
    this.timestampFormat = timestampFormat;
    return this;
  }

  /**
   * Get timestampFormat
   * @return timestampFormat
   */
  @javax.annotation.Nullable
  public String getTimestampFormat() {
    return timestampFormat;
  }

  public void setTimestampFormat(String timestampFormat) {
    this.timestampFormat = timestampFormat;
  }


  public DescribeDatasetImportJobResponse timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public DescribeDatasetImportJobResponse useGeolocationForTimeZone(Boolean useGeolocationForTimeZone) {
    this.useGeolocationForTimeZone = useGeolocationForTimeZone;
    return this;
  }

  /**
   * Get useGeolocationForTimeZone
   * @return useGeolocationForTimeZone
   */
  @javax.annotation.Nullable
  public Boolean getUseGeolocationForTimeZone() {
    return useGeolocationForTimeZone;
  }

  public void setUseGeolocationForTimeZone(Boolean useGeolocationForTimeZone) {
    this.useGeolocationForTimeZone = useGeolocationForTimeZone;
  }


  public DescribeDatasetImportJobResponse geolocationFormat(String geolocationFormat) {
    this.geolocationFormat = geolocationFormat;
    return this;
  }

  /**
   * Get geolocationFormat
   * @return geolocationFormat
   */
  @javax.annotation.Nullable
  public String getGeolocationFormat() {
    return geolocationFormat;
  }

  public void setGeolocationFormat(String geolocationFormat) {
    this.geolocationFormat = geolocationFormat;
  }


  public DescribeDatasetImportJobResponse dataSource(DescribeDatasetImportJobResponseDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public DescribeDatasetImportJobResponseDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(DescribeDatasetImportJobResponseDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public DescribeDatasetImportJobResponse estimatedTimeRemainingInMinutes(Integer estimatedTimeRemainingInMinutes) {
    this.estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutes;
    return this;
  }

  /**
   * Get estimatedTimeRemainingInMinutes
   * @return estimatedTimeRemainingInMinutes
   */
  @javax.annotation.Nullable
  public Integer getEstimatedTimeRemainingInMinutes() {
    return estimatedTimeRemainingInMinutes;
  }

  public void setEstimatedTimeRemainingInMinutes(Integer estimatedTimeRemainingInMinutes) {
    this.estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutes;
  }


  public DescribeDatasetImportJobResponse fieldStatistics(Map fieldStatistics) {
    this.fieldStatistics = fieldStatistics;
    return this;
  }

  /**
   * Get fieldStatistics
   * @return fieldStatistics
   */
  @javax.annotation.Nullable
  public Map getFieldStatistics() {
    return fieldStatistics;
  }

  public void setFieldStatistics(Map fieldStatistics) {
    this.fieldStatistics = fieldStatistics;
  }


  public DescribeDatasetImportJobResponse dataSize(Double dataSize) {
    this.dataSize = dataSize;
    return this;
  }

  /**
   * Get dataSize
   * @return dataSize
   */
  @javax.annotation.Nullable
  public Double getDataSize() {
    return dataSize;
  }

  public void setDataSize(Double dataSize) {
    this.dataSize = dataSize;
  }


  public DescribeDatasetImportJobResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DescribeDatasetImportJobResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DescribeDatasetImportJobResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeDatasetImportJobResponse lastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
    return this;
  }

  /**
   * Get lastModificationTime
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationTime() {
    return lastModificationTime;
  }

  public void setLastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
  }


  public DescribeDatasetImportJobResponse format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public DescribeDatasetImportJobResponse importMode(ImportMode importMode) {
    this.importMode = importMode;
    return this;
  }

  /**
   * Get importMode
   * @return importMode
   */
  @javax.annotation.Nullable
  public ImportMode getImportMode() {
    return importMode;
  }

  public void setImportMode(ImportMode importMode) {
    this.importMode = importMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDatasetImportJobResponse describeDatasetImportJobResponse = (DescribeDatasetImportJobResponse) o;
    return Objects.equals(this.datasetImportJobName, describeDatasetImportJobResponse.datasetImportJobName) &&
        Objects.equals(this.datasetImportJobArn, describeDatasetImportJobResponse.datasetImportJobArn) &&
        Objects.equals(this.datasetArn, describeDatasetImportJobResponse.datasetArn) &&
        Objects.equals(this.timestampFormat, describeDatasetImportJobResponse.timestampFormat) &&
        Objects.equals(this.timeZone, describeDatasetImportJobResponse.timeZone) &&
        Objects.equals(this.useGeolocationForTimeZone, describeDatasetImportJobResponse.useGeolocationForTimeZone) &&
        Objects.equals(this.geolocationFormat, describeDatasetImportJobResponse.geolocationFormat) &&
        Objects.equals(this.dataSource, describeDatasetImportJobResponse.dataSource) &&
        Objects.equals(this.estimatedTimeRemainingInMinutes, describeDatasetImportJobResponse.estimatedTimeRemainingInMinutes) &&
        Objects.equals(this.fieldStatistics, describeDatasetImportJobResponse.fieldStatistics) &&
        Objects.equals(this.dataSize, describeDatasetImportJobResponse.dataSize) &&
        Objects.equals(this.status, describeDatasetImportJobResponse.status) &&
        Objects.equals(this.message, describeDatasetImportJobResponse.message) &&
        Objects.equals(this.creationTime, describeDatasetImportJobResponse.creationTime) &&
        Objects.equals(this.lastModificationTime, describeDatasetImportJobResponse.lastModificationTime) &&
        Objects.equals(this.format, describeDatasetImportJobResponse.format) &&
        Objects.equals(this.importMode, describeDatasetImportJobResponse.importMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetImportJobName, datasetImportJobArn, datasetArn, timestampFormat, timeZone, useGeolocationForTimeZone, geolocationFormat, dataSource, estimatedTimeRemainingInMinutes, fieldStatistics, dataSize, status, message, creationTime, lastModificationTime, format, importMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDatasetImportJobResponse {\n");
    sb.append("    datasetImportJobName: ").append(toIndentedString(datasetImportJobName)).append("\n");
    sb.append("    datasetImportJobArn: ").append(toIndentedString(datasetImportJobArn)).append("\n");
    sb.append("    datasetArn: ").append(toIndentedString(datasetArn)).append("\n");
    sb.append("    timestampFormat: ").append(toIndentedString(timestampFormat)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    useGeolocationForTimeZone: ").append(toIndentedString(useGeolocationForTimeZone)).append("\n");
    sb.append("    geolocationFormat: ").append(toIndentedString(geolocationFormat)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    estimatedTimeRemainingInMinutes: ").append(toIndentedString(estimatedTimeRemainingInMinutes)).append("\n");
    sb.append("    fieldStatistics: ").append(toIndentedString(fieldStatistics)).append("\n");
    sb.append("    dataSize: ").append(toIndentedString(dataSize)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    importMode: ").append(toIndentedString(importMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatasetImportJobName");
    openapiFields.add("DatasetImportJobArn");
    openapiFields.add("DatasetArn");
    openapiFields.add("TimestampFormat");
    openapiFields.add("TimeZone");
    openapiFields.add("UseGeolocationForTimeZone");
    openapiFields.add("GeolocationFormat");
    openapiFields.add("DataSource");
    openapiFields.add("EstimatedTimeRemainingInMinutes");
    openapiFields.add("FieldStatistics");
    openapiFields.add("DataSize");
    openapiFields.add("Status");
    openapiFields.add("Message");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModificationTime");
    openapiFields.add("Format");
    openapiFields.add("ImportMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDatasetImportJobResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDatasetImportJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDatasetImportJobResponse is not found in the empty JSON string", DescribeDatasetImportJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDatasetImportJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDatasetImportJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DatasetImportJobName`
      if (jsonObj.get("DatasetImportJobName") != null && !jsonObj.get("DatasetImportJobName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetImportJobName"));
      }
      // validate the optional field `DatasetImportJobArn`
      if (jsonObj.get("DatasetImportJobArn") != null && !jsonObj.get("DatasetImportJobArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetImportJobArn"));
      }
      // validate the optional field `DatasetArn`
      if (jsonObj.get("DatasetArn") != null && !jsonObj.get("DatasetArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DatasetArn"));
      }
      // validate the optional field `TimestampFormat`
      if (jsonObj.get("TimestampFormat") != null && !jsonObj.get("TimestampFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimestampFormat"));
      }
      // validate the optional field `TimeZone`
      if (jsonObj.get("TimeZone") != null && !jsonObj.get("TimeZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimeZone"));
      }
      // validate the optional field `UseGeolocationForTimeZone`
      if (jsonObj.get("UseGeolocationForTimeZone") != null && !jsonObj.get("UseGeolocationForTimeZone").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseGeolocationForTimeZone"));
      }
      // validate the optional field `GeolocationFormat`
      if (jsonObj.get("GeolocationFormat") != null && !jsonObj.get("GeolocationFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GeolocationFormat"));
      }
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        DescribeDatasetImportJobResponseDataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
      // validate the optional field `EstimatedTimeRemainingInMinutes`
      if (jsonObj.get("EstimatedTimeRemainingInMinutes") != null && !jsonObj.get("EstimatedTimeRemainingInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedTimeRemainingInMinutes"));
      }
      // validate the optional field `FieldStatistics`
      if (jsonObj.get("FieldStatistics") != null && !jsonObj.get("FieldStatistics").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("FieldStatistics"));
      }
      // validate the optional field `DataSize`
      if (jsonObj.get("DataSize") != null && !jsonObj.get("DataSize").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("DataSize"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModificationTime`
      if (jsonObj.get("LastModificationTime") != null && !jsonObj.get("LastModificationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModificationTime"));
      }
      // validate the optional field `Format`
      if (jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Format"));
      }
      // validate the optional field `ImportMode`
      if (jsonObj.get("ImportMode") != null && !jsonObj.get("ImportMode").isJsonNull()) {
        ImportMode.validateJsonElement(jsonObj.get("ImportMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDatasetImportJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDatasetImportJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDatasetImportJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDatasetImportJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDatasetImportJobResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDatasetImportJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDatasetImportJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDatasetImportJobResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDatasetImportJobResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDatasetImportJobResponse
   */
  public static DescribeDatasetImportJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDatasetImportJobResponse.class);
  }

  /**
   * Convert an instance of DescribeDatasetImportJobResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

