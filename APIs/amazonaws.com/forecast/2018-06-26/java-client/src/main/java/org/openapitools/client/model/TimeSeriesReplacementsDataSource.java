/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.S3Config;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A replacement dataset is a modified version of the baseline related time series that contains only the values that you want to include in a what-if forecast. The replacement dataset must contain the forecast dimensions and item identifiers in the baseline related time series as well as at least 1 changed time series. This dataset is merged with the baseline related time series to create a transformed dataset that is used for the what-if forecast.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TimeSeriesReplacementsDataSource {
  public static final String SERIALIZED_NAME_S3_CONFIG = "S3Config";
  @SerializedName(SERIALIZED_NAME_S3_CONFIG)
  private S3Config s3Config;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private Schema schema;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_TIMESTAMP_FORMAT = "TimestampFormat";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_FORMAT)
  private String timestampFormat;

  public TimeSeriesReplacementsDataSource() {
  }

  public TimeSeriesReplacementsDataSource s3Config(S3Config s3Config) {
    this.s3Config = s3Config;
    return this;
  }

  /**
   * Get s3Config
   * @return s3Config
   */
  @javax.annotation.Nonnull
  public S3Config getS3Config() {
    return s3Config;
  }

  public void setS3Config(S3Config s3Config) {
    this.s3Config = s3Config;
  }


  public TimeSeriesReplacementsDataSource schema(Schema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nonnull
  public Schema getSchema() {
    return schema;
  }

  public void setSchema(Schema schema) {
    this.schema = schema;
  }


  public TimeSeriesReplacementsDataSource format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public TimeSeriesReplacementsDataSource timestampFormat(String timestampFormat) {
    this.timestampFormat = timestampFormat;
    return this;
  }

  /**
   * Get timestampFormat
   * @return timestampFormat
   */
  @javax.annotation.Nullable
  public String getTimestampFormat() {
    return timestampFormat;
  }

  public void setTimestampFormat(String timestampFormat) {
    this.timestampFormat = timestampFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeSeriesReplacementsDataSource timeSeriesReplacementsDataSource = (TimeSeriesReplacementsDataSource) o;
    return Objects.equals(this.s3Config, timeSeriesReplacementsDataSource.s3Config) &&
        Objects.equals(this.schema, timeSeriesReplacementsDataSource.schema) &&
        Objects.equals(this.format, timeSeriesReplacementsDataSource.format) &&
        Objects.equals(this.timestampFormat, timeSeriesReplacementsDataSource.timestampFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Config, schema, format, timestampFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeSeriesReplacementsDataSource {\n");
    sb.append("    s3Config: ").append(toIndentedString(s3Config)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    timestampFormat: ").append(toIndentedString(timestampFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3Config");
    openapiFields.add("Schema");
    openapiFields.add("Format");
    openapiFields.add("TimestampFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("S3Config");
    openapiRequiredFields.add("Schema");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TimeSeriesReplacementsDataSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeSeriesReplacementsDataSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeSeriesReplacementsDataSource is not found in the empty JSON string", TimeSeriesReplacementsDataSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TimeSeriesReplacementsDataSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TimeSeriesReplacementsDataSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeSeriesReplacementsDataSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `S3Config`
      S3Config.validateJsonElement(jsonObj.get("S3Config"));
      // validate the required field `Schema`
      Schema.validateJsonElement(jsonObj.get("Schema"));
      // validate the optional field `Format`
      if (jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Format"));
      }
      // validate the optional field `TimestampFormat`
      if (jsonObj.get("TimestampFormat") != null && !jsonObj.get("TimestampFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimestampFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeSeriesReplacementsDataSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeSeriesReplacementsDataSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeSeriesReplacementsDataSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeSeriesReplacementsDataSource.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeSeriesReplacementsDataSource>() {
           @Override
           public void write(JsonWriter out, TimeSeriesReplacementsDataSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeSeriesReplacementsDataSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TimeSeriesReplacementsDataSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TimeSeriesReplacementsDataSource
   * @throws IOException if the JSON string is invalid with respect to TimeSeriesReplacementsDataSource
   */
  public static TimeSeriesReplacementsDataSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeSeriesReplacementsDataSource.class);
  }

  /**
   * Convert an instance of TimeSeriesReplacementsDataSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

