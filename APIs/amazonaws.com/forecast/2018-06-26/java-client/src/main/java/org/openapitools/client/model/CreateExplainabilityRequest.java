/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateExplainabilityRequestExplainabilityConfig;
import org.openapitools.client.model.DataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateExplainabilityRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateExplainabilityRequest {
  public static final String SERIALIZED_NAME_EXPLAINABILITY_NAME = "ExplainabilityName";
  @SerializedName(SERIALIZED_NAME_EXPLAINABILITY_NAME)
  private String explainabilityName;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_EXPLAINABILITY_CONFIG = "ExplainabilityConfig";
  @SerializedName(SERIALIZED_NAME_EXPLAINABILITY_CONFIG)
  private CreateExplainabilityRequestExplainabilityConfig explainabilityConfig;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSource dataSource;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private Schema schema;

  public static final String SERIALIZED_NAME_ENABLE_VISUALIZATION = "EnableVisualization";
  @SerializedName(SERIALIZED_NAME_ENABLE_VISUALIZATION)
  private Boolean enableVisualization;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "StartDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "EndDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private String endDateTime;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public CreateExplainabilityRequest() {
  }

  public CreateExplainabilityRequest explainabilityName(String explainabilityName) {
    this.explainabilityName = explainabilityName;
    return this;
  }

  /**
   * Get explainabilityName
   * @return explainabilityName
   */
  @javax.annotation.Nonnull
  public String getExplainabilityName() {
    return explainabilityName;
  }

  public void setExplainabilityName(String explainabilityName) {
    this.explainabilityName = explainabilityName;
  }


  public CreateExplainabilityRequest resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nonnull
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public CreateExplainabilityRequest explainabilityConfig(CreateExplainabilityRequestExplainabilityConfig explainabilityConfig) {
    this.explainabilityConfig = explainabilityConfig;
    return this;
  }

  /**
   * Get explainabilityConfig
   * @return explainabilityConfig
   */
  @javax.annotation.Nonnull
  public CreateExplainabilityRequestExplainabilityConfig getExplainabilityConfig() {
    return explainabilityConfig;
  }

  public void setExplainabilityConfig(CreateExplainabilityRequestExplainabilityConfig explainabilityConfig) {
    this.explainabilityConfig = explainabilityConfig;
  }


  public CreateExplainabilityRequest dataSource(DataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public DataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataSource dataSource) {
    this.dataSource = dataSource;
  }


  public CreateExplainabilityRequest schema(Schema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public Schema getSchema() {
    return schema;
  }

  public void setSchema(Schema schema) {
    this.schema = schema;
  }


  public CreateExplainabilityRequest enableVisualization(Boolean enableVisualization) {
    this.enableVisualization = enableVisualization;
    return this;
  }

  /**
   * Get enableVisualization
   * @return enableVisualization
   */
  @javax.annotation.Nullable
  public Boolean getEnableVisualization() {
    return enableVisualization;
  }

  public void setEnableVisualization(Boolean enableVisualization) {
    this.enableVisualization = enableVisualization;
  }


  public CreateExplainabilityRequest startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * Get startDateTime
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }


  public CreateExplainabilityRequest endDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * Get endDateTime
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public String getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
  }


  public CreateExplainabilityRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateExplainabilityRequest createExplainabilityRequest = (CreateExplainabilityRequest) o;
    return Objects.equals(this.explainabilityName, createExplainabilityRequest.explainabilityName) &&
        Objects.equals(this.resourceArn, createExplainabilityRequest.resourceArn) &&
        Objects.equals(this.explainabilityConfig, createExplainabilityRequest.explainabilityConfig) &&
        Objects.equals(this.dataSource, createExplainabilityRequest.dataSource) &&
        Objects.equals(this.schema, createExplainabilityRequest.schema) &&
        Objects.equals(this.enableVisualization, createExplainabilityRequest.enableVisualization) &&
        Objects.equals(this.startDateTime, createExplainabilityRequest.startDateTime) &&
        Objects.equals(this.endDateTime, createExplainabilityRequest.endDateTime) &&
        Objects.equals(this.tags, createExplainabilityRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explainabilityName, resourceArn, explainabilityConfig, dataSource, schema, enableVisualization, startDateTime, endDateTime, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateExplainabilityRequest {\n");
    sb.append("    explainabilityName: ").append(toIndentedString(explainabilityName)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    explainabilityConfig: ").append(toIndentedString(explainabilityConfig)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    enableVisualization: ").append(toIndentedString(enableVisualization)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExplainabilityName");
    openapiFields.add("ResourceArn");
    openapiFields.add("ExplainabilityConfig");
    openapiFields.add("DataSource");
    openapiFields.add("Schema");
    openapiFields.add("EnableVisualization");
    openapiFields.add("StartDateTime");
    openapiFields.add("EndDateTime");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ExplainabilityName");
    openapiRequiredFields.add("ResourceArn");
    openapiRequiredFields.add("ExplainabilityConfig");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateExplainabilityRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateExplainabilityRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateExplainabilityRequest is not found in the empty JSON string", CreateExplainabilityRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateExplainabilityRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateExplainabilityRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateExplainabilityRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ExplainabilityName`
      String.validateJsonElement(jsonObj.get("ExplainabilityName"));
      // validate the required field `ResourceArn`
      String.validateJsonElement(jsonObj.get("ResourceArn"));
      // validate the required field `ExplainabilityConfig`
      CreateExplainabilityRequestExplainabilityConfig.validateJsonElement(jsonObj.get("ExplainabilityConfig"));
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        DataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
      // validate the optional field `Schema`
      if (jsonObj.get("Schema") != null && !jsonObj.get("Schema").isJsonNull()) {
        Schema.validateJsonElement(jsonObj.get("Schema"));
      }
      // validate the optional field `EnableVisualization`
      if (jsonObj.get("EnableVisualization") != null && !jsonObj.get("EnableVisualization").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableVisualization"));
      }
      // validate the optional field `StartDateTime`
      if (jsonObj.get("StartDateTime") != null && !jsonObj.get("StartDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartDateTime"));
      }
      // validate the optional field `EndDateTime`
      if (jsonObj.get("EndDateTime") != null && !jsonObj.get("EndDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndDateTime"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateExplainabilityRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateExplainabilityRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateExplainabilityRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateExplainabilityRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateExplainabilityRequest>() {
           @Override
           public void write(JsonWriter out, CreateExplainabilityRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateExplainabilityRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateExplainabilityRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateExplainabilityRequest
   * @throws IOException if the JSON string is invalid with respect to CreateExplainabilityRequest
   */
  public static CreateExplainabilityRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateExplainabilityRequest.class);
  }

  /**
   * Convert an instance of CreateExplainabilityRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

