/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EvaluationType;
import org.openapitools.client.model.WindowSummaryMetrics;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;The metrics for a time range within the evaluation portion of a dataset. This object is part of the &lt;a&gt;EvaluationResult&lt;/a&gt; object.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;TestWindowStart&lt;/code&gt; and &lt;code&gt;TestWindowEnd&lt;/code&gt; parameters are determined by the &lt;code&gt;BackTestWindowOffset&lt;/code&gt; parameter of the &lt;a&gt;EvaluationParameters&lt;/a&gt; object.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WindowSummary {
  public static final String SERIALIZED_NAME_TEST_WINDOW_START = "TestWindowStart";
  @SerializedName(SERIALIZED_NAME_TEST_WINDOW_START)
  private OffsetDateTime testWindowStart;

  public static final String SERIALIZED_NAME_TEST_WINDOW_END = "TestWindowEnd";
  @SerializedName(SERIALIZED_NAME_TEST_WINDOW_END)
  private OffsetDateTime testWindowEnd;

  public static final String SERIALIZED_NAME_ITEM_COUNT = "ItemCount";
  @SerializedName(SERIALIZED_NAME_ITEM_COUNT)
  private Integer itemCount;

  public static final String SERIALIZED_NAME_EVALUATION_TYPE = "EvaluationType";
  @SerializedName(SERIALIZED_NAME_EVALUATION_TYPE)
  private EvaluationType evaluationType;

  public static final String SERIALIZED_NAME_METRICS = "Metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private WindowSummaryMetrics metrics;

  public WindowSummary() {
  }

  public WindowSummary testWindowStart(OffsetDateTime testWindowStart) {
    this.testWindowStart = testWindowStart;
    return this;
  }

  /**
   * Get testWindowStart
   * @return testWindowStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTestWindowStart() {
    return testWindowStart;
  }

  public void setTestWindowStart(OffsetDateTime testWindowStart) {
    this.testWindowStart = testWindowStart;
  }


  public WindowSummary testWindowEnd(OffsetDateTime testWindowEnd) {
    this.testWindowEnd = testWindowEnd;
    return this;
  }

  /**
   * Get testWindowEnd
   * @return testWindowEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTestWindowEnd() {
    return testWindowEnd;
  }

  public void setTestWindowEnd(OffsetDateTime testWindowEnd) {
    this.testWindowEnd = testWindowEnd;
  }


  public WindowSummary itemCount(Integer itemCount) {
    this.itemCount = itemCount;
    return this;
  }

  /**
   * Get itemCount
   * @return itemCount
   */
  @javax.annotation.Nullable
  public Integer getItemCount() {
    return itemCount;
  }

  public void setItemCount(Integer itemCount) {
    this.itemCount = itemCount;
  }


  public WindowSummary evaluationType(EvaluationType evaluationType) {
    this.evaluationType = evaluationType;
    return this;
  }

  /**
   * Get evaluationType
   * @return evaluationType
   */
  @javax.annotation.Nullable
  public EvaluationType getEvaluationType() {
    return evaluationType;
  }

  public void setEvaluationType(EvaluationType evaluationType) {
    this.evaluationType = evaluationType;
  }


  public WindowSummary metrics(WindowSummaryMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   * @return metrics
   */
  @javax.annotation.Nullable
  public WindowSummaryMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(WindowSummaryMetrics metrics) {
    this.metrics = metrics;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WindowSummary windowSummary = (WindowSummary) o;
    return Objects.equals(this.testWindowStart, windowSummary.testWindowStart) &&
        Objects.equals(this.testWindowEnd, windowSummary.testWindowEnd) &&
        Objects.equals(this.itemCount, windowSummary.itemCount) &&
        Objects.equals(this.evaluationType, windowSummary.evaluationType) &&
        Objects.equals(this.metrics, windowSummary.metrics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testWindowStart, testWindowEnd, itemCount, evaluationType, metrics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WindowSummary {\n");
    sb.append("    testWindowStart: ").append(toIndentedString(testWindowStart)).append("\n");
    sb.append("    testWindowEnd: ").append(toIndentedString(testWindowEnd)).append("\n");
    sb.append("    itemCount: ").append(toIndentedString(itemCount)).append("\n");
    sb.append("    evaluationType: ").append(toIndentedString(evaluationType)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TestWindowStart");
    openapiFields.add("TestWindowEnd");
    openapiFields.add("ItemCount");
    openapiFields.add("EvaluationType");
    openapiFields.add("Metrics");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WindowSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WindowSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WindowSummary is not found in the empty JSON string", WindowSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WindowSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WindowSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TestWindowStart`
      if (jsonObj.get("TestWindowStart") != null && !jsonObj.get("TestWindowStart").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TestWindowStart"));
      }
      // validate the optional field `TestWindowEnd`
      if (jsonObj.get("TestWindowEnd") != null && !jsonObj.get("TestWindowEnd").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TestWindowEnd"));
      }
      // validate the optional field `ItemCount`
      if (jsonObj.get("ItemCount") != null && !jsonObj.get("ItemCount").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ItemCount"));
      }
      // validate the optional field `EvaluationType`
      if (jsonObj.get("EvaluationType") != null && !jsonObj.get("EvaluationType").isJsonNull()) {
        EvaluationType.validateJsonElement(jsonObj.get("EvaluationType"));
      }
      // validate the optional field `Metrics`
      if (jsonObj.get("Metrics") != null && !jsonObj.get("Metrics").isJsonNull()) {
        WindowSummaryMetrics.validateJsonElement(jsonObj.get("Metrics"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WindowSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WindowSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WindowSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WindowSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<WindowSummary>() {
           @Override
           public void write(JsonWriter out, WindowSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WindowSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WindowSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WindowSummary
   * @throws IOException if the JSON string is invalid with respect to WindowSummary
   */
  public static WindowSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WindowSummary.class);
  }

  /**
   * Convert an instance of WindowSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

