/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateDatasetImportJobRequestDataSource;
import org.openapitools.client.model.ImportMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDatasetImportJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDatasetImportJobRequest {
  public static final String SERIALIZED_NAME_DATASET_IMPORT_JOB_NAME = "DatasetImportJobName";
  @SerializedName(SERIALIZED_NAME_DATASET_IMPORT_JOB_NAME)
  private String datasetImportJobName;

  public static final String SERIALIZED_NAME_DATASET_ARN = "DatasetArn";
  @SerializedName(SERIALIZED_NAME_DATASET_ARN)
  private String datasetArn;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private CreateDatasetImportJobRequestDataSource dataSource;

  public static final String SERIALIZED_NAME_TIMESTAMP_FORMAT = "TimestampFormat";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_FORMAT)
  private String timestampFormat;

  public static final String SERIALIZED_NAME_TIME_ZONE = "TimeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_USE_GEOLOCATION_FOR_TIME_ZONE = "UseGeolocationForTimeZone";
  @SerializedName(SERIALIZED_NAME_USE_GEOLOCATION_FOR_TIME_ZONE)
  private Boolean useGeolocationForTimeZone;

  public static final String SERIALIZED_NAME_GEOLOCATION_FORMAT = "GeolocationFormat";
  @SerializedName(SERIALIZED_NAME_GEOLOCATION_FORMAT)
  private String geolocationFormat;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_IMPORT_MODE = "ImportMode";
  @SerializedName(SERIALIZED_NAME_IMPORT_MODE)
  private ImportMode importMode;

  public CreateDatasetImportJobRequest() {
  }

  public CreateDatasetImportJobRequest datasetImportJobName(String datasetImportJobName) {
    this.datasetImportJobName = datasetImportJobName;
    return this;
  }

  /**
   * Get datasetImportJobName
   * @return datasetImportJobName
   */
  @javax.annotation.Nonnull
  public String getDatasetImportJobName() {
    return datasetImportJobName;
  }

  public void setDatasetImportJobName(String datasetImportJobName) {
    this.datasetImportJobName = datasetImportJobName;
  }


  public CreateDatasetImportJobRequest datasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
    return this;
  }

  /**
   * Get datasetArn
   * @return datasetArn
   */
  @javax.annotation.Nonnull
  public String getDatasetArn() {
    return datasetArn;
  }

  public void setDatasetArn(String datasetArn) {
    this.datasetArn = datasetArn;
  }


  public CreateDatasetImportJobRequest dataSource(CreateDatasetImportJobRequestDataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nonnull
  public CreateDatasetImportJobRequestDataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(CreateDatasetImportJobRequestDataSource dataSource) {
    this.dataSource = dataSource;
  }


  public CreateDatasetImportJobRequest timestampFormat(String timestampFormat) {
    this.timestampFormat = timestampFormat;
    return this;
  }

  /**
   * Get timestampFormat
   * @return timestampFormat
   */
  @javax.annotation.Nullable
  public String getTimestampFormat() {
    return timestampFormat;
  }

  public void setTimestampFormat(String timestampFormat) {
    this.timestampFormat = timestampFormat;
  }


  public CreateDatasetImportJobRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public CreateDatasetImportJobRequest useGeolocationForTimeZone(Boolean useGeolocationForTimeZone) {
    this.useGeolocationForTimeZone = useGeolocationForTimeZone;
    return this;
  }

  /**
   * Get useGeolocationForTimeZone
   * @return useGeolocationForTimeZone
   */
  @javax.annotation.Nullable
  public Boolean getUseGeolocationForTimeZone() {
    return useGeolocationForTimeZone;
  }

  public void setUseGeolocationForTimeZone(Boolean useGeolocationForTimeZone) {
    this.useGeolocationForTimeZone = useGeolocationForTimeZone;
  }


  public CreateDatasetImportJobRequest geolocationFormat(String geolocationFormat) {
    this.geolocationFormat = geolocationFormat;
    return this;
  }

  /**
   * Get geolocationFormat
   * @return geolocationFormat
   */
  @javax.annotation.Nullable
  public String getGeolocationFormat() {
    return geolocationFormat;
  }

  public void setGeolocationFormat(String geolocationFormat) {
    this.geolocationFormat = geolocationFormat;
  }


  public CreateDatasetImportJobRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateDatasetImportJobRequest format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public CreateDatasetImportJobRequest importMode(ImportMode importMode) {
    this.importMode = importMode;
    return this;
  }

  /**
   * Get importMode
   * @return importMode
   */
  @javax.annotation.Nullable
  public ImportMode getImportMode() {
    return importMode;
  }

  public void setImportMode(ImportMode importMode) {
    this.importMode = importMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDatasetImportJobRequest createDatasetImportJobRequest = (CreateDatasetImportJobRequest) o;
    return Objects.equals(this.datasetImportJobName, createDatasetImportJobRequest.datasetImportJobName) &&
        Objects.equals(this.datasetArn, createDatasetImportJobRequest.datasetArn) &&
        Objects.equals(this.dataSource, createDatasetImportJobRequest.dataSource) &&
        Objects.equals(this.timestampFormat, createDatasetImportJobRequest.timestampFormat) &&
        Objects.equals(this.timeZone, createDatasetImportJobRequest.timeZone) &&
        Objects.equals(this.useGeolocationForTimeZone, createDatasetImportJobRequest.useGeolocationForTimeZone) &&
        Objects.equals(this.geolocationFormat, createDatasetImportJobRequest.geolocationFormat) &&
        Objects.equals(this.tags, createDatasetImportJobRequest.tags) &&
        Objects.equals(this.format, createDatasetImportJobRequest.format) &&
        Objects.equals(this.importMode, createDatasetImportJobRequest.importMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetImportJobName, datasetArn, dataSource, timestampFormat, timeZone, useGeolocationForTimeZone, geolocationFormat, tags, format, importMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDatasetImportJobRequest {\n");
    sb.append("    datasetImportJobName: ").append(toIndentedString(datasetImportJobName)).append("\n");
    sb.append("    datasetArn: ").append(toIndentedString(datasetArn)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    timestampFormat: ").append(toIndentedString(timestampFormat)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    useGeolocationForTimeZone: ").append(toIndentedString(useGeolocationForTimeZone)).append("\n");
    sb.append("    geolocationFormat: ").append(toIndentedString(geolocationFormat)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    importMode: ").append(toIndentedString(importMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DatasetImportJobName");
    openapiFields.add("DatasetArn");
    openapiFields.add("DataSource");
    openapiFields.add("TimestampFormat");
    openapiFields.add("TimeZone");
    openapiFields.add("UseGeolocationForTimeZone");
    openapiFields.add("GeolocationFormat");
    openapiFields.add("Tags");
    openapiFields.add("Format");
    openapiFields.add("ImportMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DatasetImportJobName");
    openapiRequiredFields.add("DatasetArn");
    openapiRequiredFields.add("DataSource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDatasetImportJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDatasetImportJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDatasetImportJobRequest is not found in the empty JSON string", CreateDatasetImportJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDatasetImportJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDatasetImportJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDatasetImportJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DatasetImportJobName`
      String.validateJsonElement(jsonObj.get("DatasetImportJobName"));
      // validate the required field `DatasetArn`
      String.validateJsonElement(jsonObj.get("DatasetArn"));
      // validate the required field `DataSource`
      CreateDatasetImportJobRequestDataSource.validateJsonElement(jsonObj.get("DataSource"));
      // validate the optional field `TimestampFormat`
      if (jsonObj.get("TimestampFormat") != null && !jsonObj.get("TimestampFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimestampFormat"));
      }
      // validate the optional field `TimeZone`
      if (jsonObj.get("TimeZone") != null && !jsonObj.get("TimeZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TimeZone"));
      }
      // validate the optional field `UseGeolocationForTimeZone`
      if (jsonObj.get("UseGeolocationForTimeZone") != null && !jsonObj.get("UseGeolocationForTimeZone").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("UseGeolocationForTimeZone"));
      }
      // validate the optional field `GeolocationFormat`
      if (jsonObj.get("GeolocationFormat") != null && !jsonObj.get("GeolocationFormat").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("GeolocationFormat"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Format`
      if (jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Format"));
      }
      // validate the optional field `ImportMode`
      if (jsonObj.get("ImportMode") != null && !jsonObj.get("ImportMode").isJsonNull()) {
        ImportMode.validateJsonElement(jsonObj.get("ImportMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDatasetImportJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDatasetImportJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDatasetImportJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDatasetImportJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDatasetImportJobRequest>() {
           @Override
           public void write(JsonWriter out, CreateDatasetImportJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDatasetImportJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDatasetImportJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDatasetImportJobRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDatasetImportJobRequest
   */
  public static CreateDatasetImportJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDatasetImportJobRequest.class);
  }

  /**
   * Convert an instance of CreateDatasetImportJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

