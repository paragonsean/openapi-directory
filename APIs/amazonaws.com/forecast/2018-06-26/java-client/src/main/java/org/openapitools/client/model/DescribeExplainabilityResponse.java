/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CreateExplainabilityRequestExplainabilityConfig;
import org.openapitools.client.model.DataSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeExplainabilityResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeExplainabilityResponse {
  public static final String SERIALIZED_NAME_EXPLAINABILITY_ARN = "ExplainabilityArn";
  @SerializedName(SERIALIZED_NAME_EXPLAINABILITY_ARN)
  private String explainabilityArn;

  public static final String SERIALIZED_NAME_EXPLAINABILITY_NAME = "ExplainabilityName";
  @SerializedName(SERIALIZED_NAME_EXPLAINABILITY_NAME)
  private String explainabilityName;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_EXPLAINABILITY_CONFIG = "ExplainabilityConfig";
  @SerializedName(SERIALIZED_NAME_EXPLAINABILITY_CONFIG)
  private CreateExplainabilityRequestExplainabilityConfig explainabilityConfig;

  public static final String SERIALIZED_NAME_ENABLE_VISUALIZATION = "EnableVisualization";
  @SerializedName(SERIALIZED_NAME_ENABLE_VISUALIZATION)
  private Boolean enableVisualization;

  public static final String SERIALIZED_NAME_DATA_SOURCE = "DataSource";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSource dataSource;

  public static final String SERIALIZED_NAME_SCHEMA = "Schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  private Schema schema;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "StartDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private String startDateTime;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "EndDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private String endDateTime;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME_REMAINING_IN_MINUTES = "EstimatedTimeRemainingInMinutes";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME_REMAINING_IN_MINUTES)
  private Integer estimatedTimeRemainingInMinutes;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATION_TIME = "CreationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_LAST_MODIFICATION_TIME = "LastModificationTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFICATION_TIME)
  private OffsetDateTime lastModificationTime;

  public DescribeExplainabilityResponse() {
  }

  public DescribeExplainabilityResponse explainabilityArn(String explainabilityArn) {
    this.explainabilityArn = explainabilityArn;
    return this;
  }

  /**
   * Get explainabilityArn
   * @return explainabilityArn
   */
  @javax.annotation.Nullable
  public String getExplainabilityArn() {
    return explainabilityArn;
  }

  public void setExplainabilityArn(String explainabilityArn) {
    this.explainabilityArn = explainabilityArn;
  }


  public DescribeExplainabilityResponse explainabilityName(String explainabilityName) {
    this.explainabilityName = explainabilityName;
    return this;
  }

  /**
   * Get explainabilityName
   * @return explainabilityName
   */
  @javax.annotation.Nullable
  public String getExplainabilityName() {
    return explainabilityName;
  }

  public void setExplainabilityName(String explainabilityName) {
    this.explainabilityName = explainabilityName;
  }


  public DescribeExplainabilityResponse resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public DescribeExplainabilityResponse explainabilityConfig(CreateExplainabilityRequestExplainabilityConfig explainabilityConfig) {
    this.explainabilityConfig = explainabilityConfig;
    return this;
  }

  /**
   * Get explainabilityConfig
   * @return explainabilityConfig
   */
  @javax.annotation.Nullable
  public CreateExplainabilityRequestExplainabilityConfig getExplainabilityConfig() {
    return explainabilityConfig;
  }

  public void setExplainabilityConfig(CreateExplainabilityRequestExplainabilityConfig explainabilityConfig) {
    this.explainabilityConfig = explainabilityConfig;
  }


  public DescribeExplainabilityResponse enableVisualization(Boolean enableVisualization) {
    this.enableVisualization = enableVisualization;
    return this;
  }

  /**
   * Get enableVisualization
   * @return enableVisualization
   */
  @javax.annotation.Nullable
  public Boolean getEnableVisualization() {
    return enableVisualization;
  }

  public void setEnableVisualization(Boolean enableVisualization) {
    this.enableVisualization = enableVisualization;
  }


  public DescribeExplainabilityResponse dataSource(DataSource dataSource) {
    this.dataSource = dataSource;
    return this;
  }

  /**
   * Get dataSource
   * @return dataSource
   */
  @javax.annotation.Nullable
  public DataSource getDataSource() {
    return dataSource;
  }

  public void setDataSource(DataSource dataSource) {
    this.dataSource = dataSource;
  }


  public DescribeExplainabilityResponse schema(Schema schema) {
    this.schema = schema;
    return this;
  }

  /**
   * Get schema
   * @return schema
   */
  @javax.annotation.Nullable
  public Schema getSchema() {
    return schema;
  }

  public void setSchema(Schema schema) {
    this.schema = schema;
  }


  public DescribeExplainabilityResponse startDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
    return this;
  }

  /**
   * Get startDateTime
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public String getStartDateTime() {
    return startDateTime;
  }

  public void setStartDateTime(String startDateTime) {
    this.startDateTime = startDateTime;
  }


  public DescribeExplainabilityResponse endDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * Get endDateTime
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public String getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
  }


  public DescribeExplainabilityResponse estimatedTimeRemainingInMinutes(Integer estimatedTimeRemainingInMinutes) {
    this.estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutes;
    return this;
  }

  /**
   * Get estimatedTimeRemainingInMinutes
   * @return estimatedTimeRemainingInMinutes
   */
  @javax.annotation.Nullable
  public Integer getEstimatedTimeRemainingInMinutes() {
    return estimatedTimeRemainingInMinutes;
  }

  public void setEstimatedTimeRemainingInMinutes(Integer estimatedTimeRemainingInMinutes) {
    this.estimatedTimeRemainingInMinutes = estimatedTimeRemainingInMinutes;
  }


  public DescribeExplainabilityResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DescribeExplainabilityResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public DescribeExplainabilityResponse creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public DescribeExplainabilityResponse lastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
    return this;
  }

  /**
   * Get lastModificationTime
   * @return lastModificationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModificationTime() {
    return lastModificationTime;
  }

  public void setLastModificationTime(OffsetDateTime lastModificationTime) {
    this.lastModificationTime = lastModificationTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeExplainabilityResponse describeExplainabilityResponse = (DescribeExplainabilityResponse) o;
    return Objects.equals(this.explainabilityArn, describeExplainabilityResponse.explainabilityArn) &&
        Objects.equals(this.explainabilityName, describeExplainabilityResponse.explainabilityName) &&
        Objects.equals(this.resourceArn, describeExplainabilityResponse.resourceArn) &&
        Objects.equals(this.explainabilityConfig, describeExplainabilityResponse.explainabilityConfig) &&
        Objects.equals(this.enableVisualization, describeExplainabilityResponse.enableVisualization) &&
        Objects.equals(this.dataSource, describeExplainabilityResponse.dataSource) &&
        Objects.equals(this.schema, describeExplainabilityResponse.schema) &&
        Objects.equals(this.startDateTime, describeExplainabilityResponse.startDateTime) &&
        Objects.equals(this.endDateTime, describeExplainabilityResponse.endDateTime) &&
        Objects.equals(this.estimatedTimeRemainingInMinutes, describeExplainabilityResponse.estimatedTimeRemainingInMinutes) &&
        Objects.equals(this.message, describeExplainabilityResponse.message) &&
        Objects.equals(this.status, describeExplainabilityResponse.status) &&
        Objects.equals(this.creationTime, describeExplainabilityResponse.creationTime) &&
        Objects.equals(this.lastModificationTime, describeExplainabilityResponse.lastModificationTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(explainabilityArn, explainabilityName, resourceArn, explainabilityConfig, enableVisualization, dataSource, schema, startDateTime, endDateTime, estimatedTimeRemainingInMinutes, message, status, creationTime, lastModificationTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeExplainabilityResponse {\n");
    sb.append("    explainabilityArn: ").append(toIndentedString(explainabilityArn)).append("\n");
    sb.append("    explainabilityName: ").append(toIndentedString(explainabilityName)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    explainabilityConfig: ").append(toIndentedString(explainabilityConfig)).append("\n");
    sb.append("    enableVisualization: ").append(toIndentedString(enableVisualization)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    estimatedTimeRemainingInMinutes: ").append(toIndentedString(estimatedTimeRemainingInMinutes)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    lastModificationTime: ").append(toIndentedString(lastModificationTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExplainabilityArn");
    openapiFields.add("ExplainabilityName");
    openapiFields.add("ResourceArn");
    openapiFields.add("ExplainabilityConfig");
    openapiFields.add("EnableVisualization");
    openapiFields.add("DataSource");
    openapiFields.add("Schema");
    openapiFields.add("StartDateTime");
    openapiFields.add("EndDateTime");
    openapiFields.add("EstimatedTimeRemainingInMinutes");
    openapiFields.add("Message");
    openapiFields.add("Status");
    openapiFields.add("CreationTime");
    openapiFields.add("LastModificationTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeExplainabilityResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeExplainabilityResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeExplainabilityResponse is not found in the empty JSON string", DescribeExplainabilityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeExplainabilityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeExplainabilityResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExplainabilityArn`
      if (jsonObj.get("ExplainabilityArn") != null && !jsonObj.get("ExplainabilityArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExplainabilityArn"));
      }
      // validate the optional field `ExplainabilityName`
      if (jsonObj.get("ExplainabilityName") != null && !jsonObj.get("ExplainabilityName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ExplainabilityName"));
      }
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `ExplainabilityConfig`
      if (jsonObj.get("ExplainabilityConfig") != null && !jsonObj.get("ExplainabilityConfig").isJsonNull()) {
        CreateExplainabilityRequestExplainabilityConfig.validateJsonElement(jsonObj.get("ExplainabilityConfig"));
      }
      // validate the optional field `EnableVisualization`
      if (jsonObj.get("EnableVisualization") != null && !jsonObj.get("EnableVisualization").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableVisualization"));
      }
      // validate the optional field `DataSource`
      if (jsonObj.get("DataSource") != null && !jsonObj.get("DataSource").isJsonNull()) {
        DataSource.validateJsonElement(jsonObj.get("DataSource"));
      }
      // validate the optional field `Schema`
      if (jsonObj.get("Schema") != null && !jsonObj.get("Schema").isJsonNull()) {
        Schema.validateJsonElement(jsonObj.get("Schema"));
      }
      // validate the optional field `StartDateTime`
      if (jsonObj.get("StartDateTime") != null && !jsonObj.get("StartDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StartDateTime"));
      }
      // validate the optional field `EndDateTime`
      if (jsonObj.get("EndDateTime") != null && !jsonObj.get("EndDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndDateTime"));
      }
      // validate the optional field `EstimatedTimeRemainingInMinutes`
      if (jsonObj.get("EstimatedTimeRemainingInMinutes") != null && !jsonObj.get("EstimatedTimeRemainingInMinutes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("EstimatedTimeRemainingInMinutes"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `CreationTime`
      if (jsonObj.get("CreationTime") != null && !jsonObj.get("CreationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreationTime"));
      }
      // validate the optional field `LastModificationTime`
      if (jsonObj.get("LastModificationTime") != null && !jsonObj.get("LastModificationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastModificationTime"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeExplainabilityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeExplainabilityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeExplainabilityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeExplainabilityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeExplainabilityResponse>() {
           @Override
           public void write(JsonWriter out, DescribeExplainabilityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeExplainabilityResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeExplainabilityResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeExplainabilityResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeExplainabilityResponse
   */
  public static DescribeExplainabilityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeExplainabilityResponse.class);
  }

  /**
   * Convert an instance of DescribeExplainabilityResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

