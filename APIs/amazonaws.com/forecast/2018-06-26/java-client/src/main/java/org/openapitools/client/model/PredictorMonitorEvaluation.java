/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PredictorMonitorEvaluationMonitorDataSource;
import org.openapitools.client.model.PredictorMonitorEvaluationPredictorEvent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the results of a monitor evaluation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictorMonitorEvaluation {
  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_MONITOR_ARN = "MonitorArn";
  @SerializedName(SERIALIZED_NAME_MONITOR_ARN)
  private String monitorArn;

  public static final String SERIALIZED_NAME_EVALUATION_TIME = "EvaluationTime";
  @SerializedName(SERIALIZED_NAME_EVALUATION_TIME)
  private OffsetDateTime evaluationTime;

  public static final String SERIALIZED_NAME_EVALUATION_STATE = "EvaluationState";
  @SerializedName(SERIALIZED_NAME_EVALUATION_STATE)
  private String evaluationState;

  public static final String SERIALIZED_NAME_WINDOW_START_DATETIME = "WindowStartDatetime";
  @SerializedName(SERIALIZED_NAME_WINDOW_START_DATETIME)
  private OffsetDateTime windowStartDatetime;

  public static final String SERIALIZED_NAME_WINDOW_END_DATETIME = "WindowEndDatetime";
  @SerializedName(SERIALIZED_NAME_WINDOW_END_DATETIME)
  private OffsetDateTime windowEndDatetime;

  public static final String SERIALIZED_NAME_PREDICTOR_EVENT = "PredictorEvent";
  @SerializedName(SERIALIZED_NAME_PREDICTOR_EVENT)
  private PredictorMonitorEvaluationPredictorEvent predictorEvent;

  public static final String SERIALIZED_NAME_MONITOR_DATA_SOURCE = "MonitorDataSource";
  @SerializedName(SERIALIZED_NAME_MONITOR_DATA_SOURCE)
  private PredictorMonitorEvaluationMonitorDataSource monitorDataSource;

  public static final String SERIALIZED_NAME_METRIC_RESULTS = "MetricResults";
  @SerializedName(SERIALIZED_NAME_METRIC_RESULTS)
  private List metricResults;

  public static final String SERIALIZED_NAME_NUM_ITEMS_EVALUATED = "NumItemsEvaluated";
  @SerializedName(SERIALIZED_NAME_NUM_ITEMS_EVALUATED)
  private Integer numItemsEvaluated;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public PredictorMonitorEvaluation() {
  }

  public PredictorMonitorEvaluation resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public PredictorMonitorEvaluation monitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
    return this;
  }

  /**
   * Get monitorArn
   * @return monitorArn
   */
  @javax.annotation.Nullable
  public String getMonitorArn() {
    return monitorArn;
  }

  public void setMonitorArn(String monitorArn) {
    this.monitorArn = monitorArn;
  }


  public PredictorMonitorEvaluation evaluationTime(OffsetDateTime evaluationTime) {
    this.evaluationTime = evaluationTime;
    return this;
  }

  /**
   * Get evaluationTime
   * @return evaluationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEvaluationTime() {
    return evaluationTime;
  }

  public void setEvaluationTime(OffsetDateTime evaluationTime) {
    this.evaluationTime = evaluationTime;
  }


  public PredictorMonitorEvaluation evaluationState(String evaluationState) {
    this.evaluationState = evaluationState;
    return this;
  }

  /**
   * Get evaluationState
   * @return evaluationState
   */
  @javax.annotation.Nullable
  public String getEvaluationState() {
    return evaluationState;
  }

  public void setEvaluationState(String evaluationState) {
    this.evaluationState = evaluationState;
  }


  public PredictorMonitorEvaluation windowStartDatetime(OffsetDateTime windowStartDatetime) {
    this.windowStartDatetime = windowStartDatetime;
    return this;
  }

  /**
   * Get windowStartDatetime
   * @return windowStartDatetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWindowStartDatetime() {
    return windowStartDatetime;
  }

  public void setWindowStartDatetime(OffsetDateTime windowStartDatetime) {
    this.windowStartDatetime = windowStartDatetime;
  }


  public PredictorMonitorEvaluation windowEndDatetime(OffsetDateTime windowEndDatetime) {
    this.windowEndDatetime = windowEndDatetime;
    return this;
  }

  /**
   * Get windowEndDatetime
   * @return windowEndDatetime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWindowEndDatetime() {
    return windowEndDatetime;
  }

  public void setWindowEndDatetime(OffsetDateTime windowEndDatetime) {
    this.windowEndDatetime = windowEndDatetime;
  }


  public PredictorMonitorEvaluation predictorEvent(PredictorMonitorEvaluationPredictorEvent predictorEvent) {
    this.predictorEvent = predictorEvent;
    return this;
  }

  /**
   * Get predictorEvent
   * @return predictorEvent
   */
  @javax.annotation.Nullable
  public PredictorMonitorEvaluationPredictorEvent getPredictorEvent() {
    return predictorEvent;
  }

  public void setPredictorEvent(PredictorMonitorEvaluationPredictorEvent predictorEvent) {
    this.predictorEvent = predictorEvent;
  }


  public PredictorMonitorEvaluation monitorDataSource(PredictorMonitorEvaluationMonitorDataSource monitorDataSource) {
    this.monitorDataSource = monitorDataSource;
    return this;
  }

  /**
   * Get monitorDataSource
   * @return monitorDataSource
   */
  @javax.annotation.Nullable
  public PredictorMonitorEvaluationMonitorDataSource getMonitorDataSource() {
    return monitorDataSource;
  }

  public void setMonitorDataSource(PredictorMonitorEvaluationMonitorDataSource monitorDataSource) {
    this.monitorDataSource = monitorDataSource;
  }


  public PredictorMonitorEvaluation metricResults(List metricResults) {
    this.metricResults = metricResults;
    return this;
  }

  /**
   * Get metricResults
   * @return metricResults
   */
  @javax.annotation.Nullable
  public List getMetricResults() {
    return metricResults;
  }

  public void setMetricResults(List metricResults) {
    this.metricResults = metricResults;
  }


  public PredictorMonitorEvaluation numItemsEvaluated(Integer numItemsEvaluated) {
    this.numItemsEvaluated = numItemsEvaluated;
    return this;
  }

  /**
   * Get numItemsEvaluated
   * @return numItemsEvaluated
   */
  @javax.annotation.Nullable
  public Integer getNumItemsEvaluated() {
    return numItemsEvaluated;
  }

  public void setNumItemsEvaluated(Integer numItemsEvaluated) {
    this.numItemsEvaluated = numItemsEvaluated;
  }


  public PredictorMonitorEvaluation message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictorMonitorEvaluation predictorMonitorEvaluation = (PredictorMonitorEvaluation) o;
    return Objects.equals(this.resourceArn, predictorMonitorEvaluation.resourceArn) &&
        Objects.equals(this.monitorArn, predictorMonitorEvaluation.monitorArn) &&
        Objects.equals(this.evaluationTime, predictorMonitorEvaluation.evaluationTime) &&
        Objects.equals(this.evaluationState, predictorMonitorEvaluation.evaluationState) &&
        Objects.equals(this.windowStartDatetime, predictorMonitorEvaluation.windowStartDatetime) &&
        Objects.equals(this.windowEndDatetime, predictorMonitorEvaluation.windowEndDatetime) &&
        Objects.equals(this.predictorEvent, predictorMonitorEvaluation.predictorEvent) &&
        Objects.equals(this.monitorDataSource, predictorMonitorEvaluation.monitorDataSource) &&
        Objects.equals(this.metricResults, predictorMonitorEvaluation.metricResults) &&
        Objects.equals(this.numItemsEvaluated, predictorMonitorEvaluation.numItemsEvaluated) &&
        Objects.equals(this.message, predictorMonitorEvaluation.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceArn, monitorArn, evaluationTime, evaluationState, windowStartDatetime, windowEndDatetime, predictorEvent, monitorDataSource, metricResults, numItemsEvaluated, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictorMonitorEvaluation {\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    monitorArn: ").append(toIndentedString(monitorArn)).append("\n");
    sb.append("    evaluationTime: ").append(toIndentedString(evaluationTime)).append("\n");
    sb.append("    evaluationState: ").append(toIndentedString(evaluationState)).append("\n");
    sb.append("    windowStartDatetime: ").append(toIndentedString(windowStartDatetime)).append("\n");
    sb.append("    windowEndDatetime: ").append(toIndentedString(windowEndDatetime)).append("\n");
    sb.append("    predictorEvent: ").append(toIndentedString(predictorEvent)).append("\n");
    sb.append("    monitorDataSource: ").append(toIndentedString(monitorDataSource)).append("\n");
    sb.append("    metricResults: ").append(toIndentedString(metricResults)).append("\n");
    sb.append("    numItemsEvaluated: ").append(toIndentedString(numItemsEvaluated)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceArn");
    openapiFields.add("MonitorArn");
    openapiFields.add("EvaluationTime");
    openapiFields.add("EvaluationState");
    openapiFields.add("WindowStartDatetime");
    openapiFields.add("WindowEndDatetime");
    openapiFields.add("PredictorEvent");
    openapiFields.add("MonitorDataSource");
    openapiFields.add("MetricResults");
    openapiFields.add("NumItemsEvaluated");
    openapiFields.add("Message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictorMonitorEvaluation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictorMonitorEvaluation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictorMonitorEvaluation is not found in the empty JSON string", PredictorMonitorEvaluation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictorMonitorEvaluation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictorMonitorEvaluation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
      // validate the optional field `MonitorArn`
      if (jsonObj.get("MonitorArn") != null && !jsonObj.get("MonitorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("MonitorArn"));
      }
      // validate the optional field `EvaluationTime`
      if (jsonObj.get("EvaluationTime") != null && !jsonObj.get("EvaluationTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("EvaluationTime"));
      }
      // validate the optional field `EvaluationState`
      if (jsonObj.get("EvaluationState") != null && !jsonObj.get("EvaluationState").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EvaluationState"));
      }
      // validate the optional field `WindowStartDatetime`
      if (jsonObj.get("WindowStartDatetime") != null && !jsonObj.get("WindowStartDatetime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("WindowStartDatetime"));
      }
      // validate the optional field `WindowEndDatetime`
      if (jsonObj.get("WindowEndDatetime") != null && !jsonObj.get("WindowEndDatetime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("WindowEndDatetime"));
      }
      // validate the optional field `PredictorEvent`
      if (jsonObj.get("PredictorEvent") != null && !jsonObj.get("PredictorEvent").isJsonNull()) {
        PredictorMonitorEvaluationPredictorEvent.validateJsonElement(jsonObj.get("PredictorEvent"));
      }
      // validate the optional field `MonitorDataSource`
      if (jsonObj.get("MonitorDataSource") != null && !jsonObj.get("MonitorDataSource").isJsonNull()) {
        PredictorMonitorEvaluationMonitorDataSource.validateJsonElement(jsonObj.get("MonitorDataSource"));
      }
      // validate the optional field `MetricResults`
      if (jsonObj.get("MetricResults") != null && !jsonObj.get("MetricResults").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("MetricResults"));
      }
      // validate the optional field `NumItemsEvaluated`
      if (jsonObj.get("NumItemsEvaluated") != null && !jsonObj.get("NumItemsEvaluated").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("NumItemsEvaluated"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictorMonitorEvaluation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictorMonitorEvaluation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictorMonitorEvaluation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictorMonitorEvaluation.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictorMonitorEvaluation>() {
           @Override
           public void write(JsonWriter out, PredictorMonitorEvaluation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictorMonitorEvaluation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictorMonitorEvaluation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictorMonitorEvaluation
   * @throws IOException if the JSON string is invalid with respect to PredictorMonitorEvaluation
   */
  public static PredictorMonitorEvaluation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictorMonitorEvaluation.class);
  }

  /**
   * Convert an instance of PredictorMonitorEvaluation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

