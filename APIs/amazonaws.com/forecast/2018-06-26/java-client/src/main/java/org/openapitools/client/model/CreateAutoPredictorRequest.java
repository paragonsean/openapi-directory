/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAutoPredictorRequestDataConfig;
import org.openapitools.client.model.CreateAutoPredictorRequestMonitorConfig;
import org.openapitools.client.model.CreateAutoPredictorRequestTimeAlignmentBoundary;
import org.openapitools.client.model.EncryptionConfig;
import org.openapitools.client.model.OptimizationMetric;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAutoPredictorRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAutoPredictorRequest {
  public static final String SERIALIZED_NAME_PREDICTOR_NAME = "PredictorName";
  @SerializedName(SERIALIZED_NAME_PREDICTOR_NAME)
  private String predictorName;

  public static final String SERIALIZED_NAME_FORECAST_HORIZON = "ForecastHorizon";
  @SerializedName(SERIALIZED_NAME_FORECAST_HORIZON)
  private Integer forecastHorizon;

  public static final String SERIALIZED_NAME_FORECAST_TYPES = "ForecastTypes";
  @SerializedName(SERIALIZED_NAME_FORECAST_TYPES)
  private List forecastTypes;

  public static final String SERIALIZED_NAME_FORECAST_DIMENSIONS = "ForecastDimensions";
  @SerializedName(SERIALIZED_NAME_FORECAST_DIMENSIONS)
  private List forecastDimensions;

  public static final String SERIALIZED_NAME_FORECAST_FREQUENCY = "ForecastFrequency";
  @SerializedName(SERIALIZED_NAME_FORECAST_FREQUENCY)
  private String forecastFrequency;

  public static final String SERIALIZED_NAME_DATA_CONFIG = "DataConfig";
  @SerializedName(SERIALIZED_NAME_DATA_CONFIG)
  private CreateAutoPredictorRequestDataConfig dataConfig;

  public static final String SERIALIZED_NAME_ENCRYPTION_CONFIG = "EncryptionConfig";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CONFIG)
  private EncryptionConfig encryptionConfig;

  public static final String SERIALIZED_NAME_REFERENCE_PREDICTOR_ARN = "ReferencePredictorArn";
  @SerializedName(SERIALIZED_NAME_REFERENCE_PREDICTOR_ARN)
  private String referencePredictorArn;

  public static final String SERIALIZED_NAME_OPTIMIZATION_METRIC = "OptimizationMetric";
  @SerializedName(SERIALIZED_NAME_OPTIMIZATION_METRIC)
  private OptimizationMetric optimizationMetric;

  public static final String SERIALIZED_NAME_EXPLAIN_PREDICTOR = "ExplainPredictor";
  @SerializedName(SERIALIZED_NAME_EXPLAIN_PREDICTOR)
  private Boolean explainPredictor;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_MONITOR_CONFIG = "MonitorConfig";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONFIG)
  private CreateAutoPredictorRequestMonitorConfig monitorConfig;

  public static final String SERIALIZED_NAME_TIME_ALIGNMENT_BOUNDARY = "TimeAlignmentBoundary";
  @SerializedName(SERIALIZED_NAME_TIME_ALIGNMENT_BOUNDARY)
  private CreateAutoPredictorRequestTimeAlignmentBoundary timeAlignmentBoundary;

  public CreateAutoPredictorRequest() {
  }

  public CreateAutoPredictorRequest predictorName(String predictorName) {
    this.predictorName = predictorName;
    return this;
  }

  /**
   * Get predictorName
   * @return predictorName
   */
  @javax.annotation.Nonnull
  public String getPredictorName() {
    return predictorName;
  }

  public void setPredictorName(String predictorName) {
    this.predictorName = predictorName;
  }


  public CreateAutoPredictorRequest forecastHorizon(Integer forecastHorizon) {
    this.forecastHorizon = forecastHorizon;
    return this;
  }

  /**
   * Get forecastHorizon
   * @return forecastHorizon
   */
  @javax.annotation.Nullable
  public Integer getForecastHorizon() {
    return forecastHorizon;
  }

  public void setForecastHorizon(Integer forecastHorizon) {
    this.forecastHorizon = forecastHorizon;
  }


  public CreateAutoPredictorRequest forecastTypes(List forecastTypes) {
    this.forecastTypes = forecastTypes;
    return this;
  }

  /**
   * Get forecastTypes
   * @return forecastTypes
   */
  @javax.annotation.Nullable
  public List getForecastTypes() {
    return forecastTypes;
  }

  public void setForecastTypes(List forecastTypes) {
    this.forecastTypes = forecastTypes;
  }


  public CreateAutoPredictorRequest forecastDimensions(List forecastDimensions) {
    this.forecastDimensions = forecastDimensions;
    return this;
  }

  /**
   * Get forecastDimensions
   * @return forecastDimensions
   */
  @javax.annotation.Nullable
  public List getForecastDimensions() {
    return forecastDimensions;
  }

  public void setForecastDimensions(List forecastDimensions) {
    this.forecastDimensions = forecastDimensions;
  }


  public CreateAutoPredictorRequest forecastFrequency(String forecastFrequency) {
    this.forecastFrequency = forecastFrequency;
    return this;
  }

  /**
   * Get forecastFrequency
   * @return forecastFrequency
   */
  @javax.annotation.Nullable
  public String getForecastFrequency() {
    return forecastFrequency;
  }

  public void setForecastFrequency(String forecastFrequency) {
    this.forecastFrequency = forecastFrequency;
  }


  public CreateAutoPredictorRequest dataConfig(CreateAutoPredictorRequestDataConfig dataConfig) {
    this.dataConfig = dataConfig;
    return this;
  }

  /**
   * Get dataConfig
   * @return dataConfig
   */
  @javax.annotation.Nullable
  public CreateAutoPredictorRequestDataConfig getDataConfig() {
    return dataConfig;
  }

  public void setDataConfig(CreateAutoPredictorRequestDataConfig dataConfig) {
    this.dataConfig = dataConfig;
  }


  public CreateAutoPredictorRequest encryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
    return this;
  }

  /**
   * Get encryptionConfig
   * @return encryptionConfig
   */
  @javax.annotation.Nullable
  public EncryptionConfig getEncryptionConfig() {
    return encryptionConfig;
  }

  public void setEncryptionConfig(EncryptionConfig encryptionConfig) {
    this.encryptionConfig = encryptionConfig;
  }


  public CreateAutoPredictorRequest referencePredictorArn(String referencePredictorArn) {
    this.referencePredictorArn = referencePredictorArn;
    return this;
  }

  /**
   * Get referencePredictorArn
   * @return referencePredictorArn
   */
  @javax.annotation.Nullable
  public String getReferencePredictorArn() {
    return referencePredictorArn;
  }

  public void setReferencePredictorArn(String referencePredictorArn) {
    this.referencePredictorArn = referencePredictorArn;
  }


  public CreateAutoPredictorRequest optimizationMetric(OptimizationMetric optimizationMetric) {
    this.optimizationMetric = optimizationMetric;
    return this;
  }

  /**
   * Get optimizationMetric
   * @return optimizationMetric
   */
  @javax.annotation.Nullable
  public OptimizationMetric getOptimizationMetric() {
    return optimizationMetric;
  }

  public void setOptimizationMetric(OptimizationMetric optimizationMetric) {
    this.optimizationMetric = optimizationMetric;
  }


  public CreateAutoPredictorRequest explainPredictor(Boolean explainPredictor) {
    this.explainPredictor = explainPredictor;
    return this;
  }

  /**
   * Get explainPredictor
   * @return explainPredictor
   */
  @javax.annotation.Nullable
  public Boolean getExplainPredictor() {
    return explainPredictor;
  }

  public void setExplainPredictor(Boolean explainPredictor) {
    this.explainPredictor = explainPredictor;
  }


  public CreateAutoPredictorRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateAutoPredictorRequest monitorConfig(CreateAutoPredictorRequestMonitorConfig monitorConfig) {
    this.monitorConfig = monitorConfig;
    return this;
  }

  /**
   * Get monitorConfig
   * @return monitorConfig
   */
  @javax.annotation.Nullable
  public CreateAutoPredictorRequestMonitorConfig getMonitorConfig() {
    return monitorConfig;
  }

  public void setMonitorConfig(CreateAutoPredictorRequestMonitorConfig monitorConfig) {
    this.monitorConfig = monitorConfig;
  }


  public CreateAutoPredictorRequest timeAlignmentBoundary(CreateAutoPredictorRequestTimeAlignmentBoundary timeAlignmentBoundary) {
    this.timeAlignmentBoundary = timeAlignmentBoundary;
    return this;
  }

  /**
   * Get timeAlignmentBoundary
   * @return timeAlignmentBoundary
   */
  @javax.annotation.Nullable
  public CreateAutoPredictorRequestTimeAlignmentBoundary getTimeAlignmentBoundary() {
    return timeAlignmentBoundary;
  }

  public void setTimeAlignmentBoundary(CreateAutoPredictorRequestTimeAlignmentBoundary timeAlignmentBoundary) {
    this.timeAlignmentBoundary = timeAlignmentBoundary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAutoPredictorRequest createAutoPredictorRequest = (CreateAutoPredictorRequest) o;
    return Objects.equals(this.predictorName, createAutoPredictorRequest.predictorName) &&
        Objects.equals(this.forecastHorizon, createAutoPredictorRequest.forecastHorizon) &&
        Objects.equals(this.forecastTypes, createAutoPredictorRequest.forecastTypes) &&
        Objects.equals(this.forecastDimensions, createAutoPredictorRequest.forecastDimensions) &&
        Objects.equals(this.forecastFrequency, createAutoPredictorRequest.forecastFrequency) &&
        Objects.equals(this.dataConfig, createAutoPredictorRequest.dataConfig) &&
        Objects.equals(this.encryptionConfig, createAutoPredictorRequest.encryptionConfig) &&
        Objects.equals(this.referencePredictorArn, createAutoPredictorRequest.referencePredictorArn) &&
        Objects.equals(this.optimizationMetric, createAutoPredictorRequest.optimizationMetric) &&
        Objects.equals(this.explainPredictor, createAutoPredictorRequest.explainPredictor) &&
        Objects.equals(this.tags, createAutoPredictorRequest.tags) &&
        Objects.equals(this.monitorConfig, createAutoPredictorRequest.monitorConfig) &&
        Objects.equals(this.timeAlignmentBoundary, createAutoPredictorRequest.timeAlignmentBoundary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(predictorName, forecastHorizon, forecastTypes, forecastDimensions, forecastFrequency, dataConfig, encryptionConfig, referencePredictorArn, optimizationMetric, explainPredictor, tags, monitorConfig, timeAlignmentBoundary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAutoPredictorRequest {\n");
    sb.append("    predictorName: ").append(toIndentedString(predictorName)).append("\n");
    sb.append("    forecastHorizon: ").append(toIndentedString(forecastHorizon)).append("\n");
    sb.append("    forecastTypes: ").append(toIndentedString(forecastTypes)).append("\n");
    sb.append("    forecastDimensions: ").append(toIndentedString(forecastDimensions)).append("\n");
    sb.append("    forecastFrequency: ").append(toIndentedString(forecastFrequency)).append("\n");
    sb.append("    dataConfig: ").append(toIndentedString(dataConfig)).append("\n");
    sb.append("    encryptionConfig: ").append(toIndentedString(encryptionConfig)).append("\n");
    sb.append("    referencePredictorArn: ").append(toIndentedString(referencePredictorArn)).append("\n");
    sb.append("    optimizationMetric: ").append(toIndentedString(optimizationMetric)).append("\n");
    sb.append("    explainPredictor: ").append(toIndentedString(explainPredictor)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    monitorConfig: ").append(toIndentedString(monitorConfig)).append("\n");
    sb.append("    timeAlignmentBoundary: ").append(toIndentedString(timeAlignmentBoundary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PredictorName");
    openapiFields.add("ForecastHorizon");
    openapiFields.add("ForecastTypes");
    openapiFields.add("ForecastDimensions");
    openapiFields.add("ForecastFrequency");
    openapiFields.add("DataConfig");
    openapiFields.add("EncryptionConfig");
    openapiFields.add("ReferencePredictorArn");
    openapiFields.add("OptimizationMetric");
    openapiFields.add("ExplainPredictor");
    openapiFields.add("Tags");
    openapiFields.add("MonitorConfig");
    openapiFields.add("TimeAlignmentBoundary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PredictorName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAutoPredictorRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAutoPredictorRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAutoPredictorRequest is not found in the empty JSON string", CreateAutoPredictorRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAutoPredictorRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAutoPredictorRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAutoPredictorRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `PredictorName`
      String.validateJsonElement(jsonObj.get("PredictorName"));
      // validate the optional field `ForecastHorizon`
      if (jsonObj.get("ForecastHorizon") != null && !jsonObj.get("ForecastHorizon").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ForecastHorizon"));
      }
      // validate the optional field `ForecastTypes`
      if (jsonObj.get("ForecastTypes") != null && !jsonObj.get("ForecastTypes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ForecastTypes"));
      }
      // validate the optional field `ForecastDimensions`
      if (jsonObj.get("ForecastDimensions") != null && !jsonObj.get("ForecastDimensions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ForecastDimensions"));
      }
      // validate the optional field `ForecastFrequency`
      if (jsonObj.get("ForecastFrequency") != null && !jsonObj.get("ForecastFrequency").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ForecastFrequency"));
      }
      // validate the optional field `DataConfig`
      if (jsonObj.get("DataConfig") != null && !jsonObj.get("DataConfig").isJsonNull()) {
        CreateAutoPredictorRequestDataConfig.validateJsonElement(jsonObj.get("DataConfig"));
      }
      // validate the optional field `EncryptionConfig`
      if (jsonObj.get("EncryptionConfig") != null && !jsonObj.get("EncryptionConfig").isJsonNull()) {
        EncryptionConfig.validateJsonElement(jsonObj.get("EncryptionConfig"));
      }
      // validate the optional field `ReferencePredictorArn`
      if (jsonObj.get("ReferencePredictorArn") != null && !jsonObj.get("ReferencePredictorArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReferencePredictorArn"));
      }
      // validate the optional field `OptimizationMetric`
      if (jsonObj.get("OptimizationMetric") != null && !jsonObj.get("OptimizationMetric").isJsonNull()) {
        OptimizationMetric.validateJsonElement(jsonObj.get("OptimizationMetric"));
      }
      // validate the optional field `ExplainPredictor`
      if (jsonObj.get("ExplainPredictor") != null && !jsonObj.get("ExplainPredictor").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ExplainPredictor"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `MonitorConfig`
      if (jsonObj.get("MonitorConfig") != null && !jsonObj.get("MonitorConfig").isJsonNull()) {
        CreateAutoPredictorRequestMonitorConfig.validateJsonElement(jsonObj.get("MonitorConfig"));
      }
      // validate the optional field `TimeAlignmentBoundary`
      if (jsonObj.get("TimeAlignmentBoundary") != null && !jsonObj.get("TimeAlignmentBoundary").isJsonNull()) {
        CreateAutoPredictorRequestTimeAlignmentBoundary.validateJsonElement(jsonObj.get("TimeAlignmentBoundary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAutoPredictorRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAutoPredictorRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAutoPredictorRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAutoPredictorRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAutoPredictorRequest>() {
           @Override
           public void write(JsonWriter out, CreateAutoPredictorRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAutoPredictorRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAutoPredictorRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAutoPredictorRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAutoPredictorRequest
   */
  public static CreateAutoPredictorRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAutoPredictorRequest.class);
  }

  /**
   * Convert an instance of CreateAutoPredictorRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

