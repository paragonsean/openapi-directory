/*
 * Amazon Forecast Service
 * Provides APIs for creating and managing Amazon Forecast resources.
 *
 * The version of the OpenAPI document: 2018-06-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The status, start time, and end time of a backtest, as well as a failure reason if applicable.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:12:07.923995-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestWindowSummary {
  public static final String SERIALIZED_NAME_TEST_WINDOW_START = "TestWindowStart";
  @SerializedName(SERIALIZED_NAME_TEST_WINDOW_START)
  private OffsetDateTime testWindowStart;

  public static final String SERIALIZED_NAME_TEST_WINDOW_END = "TestWindowEnd";
  @SerializedName(SERIALIZED_NAME_TEST_WINDOW_END)
  private OffsetDateTime testWindowEnd;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public TestWindowSummary() {
  }

  public TestWindowSummary testWindowStart(OffsetDateTime testWindowStart) {
    this.testWindowStart = testWindowStart;
    return this;
  }

  /**
   * Get testWindowStart
   * @return testWindowStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTestWindowStart() {
    return testWindowStart;
  }

  public void setTestWindowStart(OffsetDateTime testWindowStart) {
    this.testWindowStart = testWindowStart;
  }


  public TestWindowSummary testWindowEnd(OffsetDateTime testWindowEnd) {
    this.testWindowEnd = testWindowEnd;
    return this;
  }

  /**
   * Get testWindowEnd
   * @return testWindowEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTestWindowEnd() {
    return testWindowEnd;
  }

  public void setTestWindowEnd(OffsetDateTime testWindowEnd) {
    this.testWindowEnd = testWindowEnd;
  }


  public TestWindowSummary status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public TestWindowSummary message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestWindowSummary testWindowSummary = (TestWindowSummary) o;
    return Objects.equals(this.testWindowStart, testWindowSummary.testWindowStart) &&
        Objects.equals(this.testWindowEnd, testWindowSummary.testWindowEnd) &&
        Objects.equals(this.status, testWindowSummary.status) &&
        Objects.equals(this.message, testWindowSummary.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testWindowStart, testWindowEnd, status, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestWindowSummary {\n");
    sb.append("    testWindowStart: ").append(toIndentedString(testWindowStart)).append("\n");
    sb.append("    testWindowEnd: ").append(toIndentedString(testWindowEnd)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TestWindowStart");
    openapiFields.add("TestWindowEnd");
    openapiFields.add("Status");
    openapiFields.add("Message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestWindowSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestWindowSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestWindowSummary is not found in the empty JSON string", TestWindowSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestWindowSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestWindowSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TestWindowStart`
      if (jsonObj.get("TestWindowStart") != null && !jsonObj.get("TestWindowStart").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TestWindowStart"));
      }
      // validate the optional field `TestWindowEnd`
      if (jsonObj.get("TestWindowEnd") != null && !jsonObj.get("TestWindowEnd").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("TestWindowEnd"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Message`
      if (jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Message"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestWindowSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestWindowSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestWindowSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestWindowSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<TestWindowSummary>() {
           @Override
           public void write(JsonWriter out, TestWindowSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestWindowSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestWindowSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestWindowSummary
   * @throws IOException if the JSON string is invalid with respect to TestWindowSummary
   */
  public static TestWindowSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestWindowSummary.class);
  }

  /**
   * Convert an instance of TestWindowSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

