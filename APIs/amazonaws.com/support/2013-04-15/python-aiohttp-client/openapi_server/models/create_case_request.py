# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCaseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject: str=None, service_code: str=None, severity_code: str=None, category_code: str=None, communication_body: str=None, cc_email_addresses: List=None, language: str=None, issue_type: str=None, attachment_set_id: str=None):
        """CreateCaseRequest - a model defined in OpenAPI

        :param subject: The subject of this CreateCaseRequest.
        :param service_code: The service_code of this CreateCaseRequest.
        :param severity_code: The severity_code of this CreateCaseRequest.
        :param category_code: The category_code of this CreateCaseRequest.
        :param communication_body: The communication_body of this CreateCaseRequest.
        :param cc_email_addresses: The cc_email_addresses of this CreateCaseRequest.
        :param language: The language of this CreateCaseRequest.
        :param issue_type: The issue_type of this CreateCaseRequest.
        :param attachment_set_id: The attachment_set_id of this CreateCaseRequest.
        """
        self.openapi_types = {
            'subject': str,
            'service_code': str,
            'severity_code': str,
            'category_code': str,
            'communication_body': str,
            'cc_email_addresses': List,
            'language': str,
            'issue_type': str,
            'attachment_set_id': str
        }

        self.attribute_map = {
            'subject': 'subject',
            'service_code': 'serviceCode',
            'severity_code': 'severityCode',
            'category_code': 'categoryCode',
            'communication_body': 'communicationBody',
            'cc_email_addresses': 'ccEmailAddresses',
            'language': 'language',
            'issue_type': 'issueType',
            'attachment_set_id': 'attachmentSetId'
        }

        self._subject = subject
        self._service_code = service_code
        self._severity_code = severity_code
        self._category_code = category_code
        self._communication_body = communication_body
        self._cc_email_addresses = cc_email_addresses
        self._language = language
        self._issue_type = issue_type
        self._attachment_set_id = attachment_set_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCaseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCaseRequest of this CreateCaseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self):
        """Gets the subject of this CreateCaseRequest.


        :return: The subject of this CreateCaseRequest.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CreateCaseRequest.


        :param subject: The subject of this CreateCaseRequest.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def service_code(self):
        """Gets the service_code of this CreateCaseRequest.


        :return: The service_code of this CreateCaseRequest.
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this CreateCaseRequest.


        :param service_code: The service_code of this CreateCaseRequest.
        :type service_code: str
        """

        self._service_code = service_code

    @property
    def severity_code(self):
        """Gets the severity_code of this CreateCaseRequest.


        :return: The severity_code of this CreateCaseRequest.
        :rtype: str
        """
        return self._severity_code

    @severity_code.setter
    def severity_code(self, severity_code):
        """Sets the severity_code of this CreateCaseRequest.


        :param severity_code: The severity_code of this CreateCaseRequest.
        :type severity_code: str
        """

        self._severity_code = severity_code

    @property
    def category_code(self):
        """Gets the category_code of this CreateCaseRequest.


        :return: The category_code of this CreateCaseRequest.
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this CreateCaseRequest.


        :param category_code: The category_code of this CreateCaseRequest.
        :type category_code: str
        """

        self._category_code = category_code

    @property
    def communication_body(self):
        """Gets the communication_body of this CreateCaseRequest.


        :return: The communication_body of this CreateCaseRequest.
        :rtype: str
        """
        return self._communication_body

    @communication_body.setter
    def communication_body(self, communication_body):
        """Sets the communication_body of this CreateCaseRequest.


        :param communication_body: The communication_body of this CreateCaseRequest.
        :type communication_body: str
        """
        if communication_body is None:
            raise ValueError("Invalid value for `communication_body`, must not be `None`")

        self._communication_body = communication_body

    @property
    def cc_email_addresses(self):
        """Gets the cc_email_addresses of this CreateCaseRequest.


        :return: The cc_email_addresses of this CreateCaseRequest.
        :rtype: List
        """
        return self._cc_email_addresses

    @cc_email_addresses.setter
    def cc_email_addresses(self, cc_email_addresses):
        """Sets the cc_email_addresses of this CreateCaseRequest.


        :param cc_email_addresses: The cc_email_addresses of this CreateCaseRequest.
        :type cc_email_addresses: List
        """

        self._cc_email_addresses = cc_email_addresses

    @property
    def language(self):
        """Gets the language of this CreateCaseRequest.


        :return: The language of this CreateCaseRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CreateCaseRequest.


        :param language: The language of this CreateCaseRequest.
        :type language: str
        """

        self._language = language

    @property
    def issue_type(self):
        """Gets the issue_type of this CreateCaseRequest.


        :return: The issue_type of this CreateCaseRequest.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this CreateCaseRequest.


        :param issue_type: The issue_type of this CreateCaseRequest.
        :type issue_type: str
        """

        self._issue_type = issue_type

    @property
    def attachment_set_id(self):
        """Gets the attachment_set_id of this CreateCaseRequest.


        :return: The attachment_set_id of this CreateCaseRequest.
        :rtype: str
        """
        return self._attachment_set_id

    @attachment_set_id.setter
    def attachment_set_id(self, attachment_set_id):
        """Sets the attachment_set_id of this CreateCaseRequest.


        :param attachment_set_id: The attachment_set_id of this CreateCaseRequest.
        :type attachment_set_id: str
        """

        self._attachment_set_id = attachment_set_id
