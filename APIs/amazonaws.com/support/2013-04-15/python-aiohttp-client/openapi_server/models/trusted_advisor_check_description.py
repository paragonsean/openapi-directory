# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrustedAdvisorCheckDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, description: str=None, category: str=None, metadata: List=None):
        """TrustedAdvisorCheckDescription - a model defined in OpenAPI

        :param id: The id of this TrustedAdvisorCheckDescription.
        :param name: The name of this TrustedAdvisorCheckDescription.
        :param description: The description of this TrustedAdvisorCheckDescription.
        :param category: The category of this TrustedAdvisorCheckDescription.
        :param metadata: The metadata of this TrustedAdvisorCheckDescription.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'category': str,
            'metadata': List
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'category': 'category',
            'metadata': 'metadata'
        }

        self._id = id
        self._name = name
        self._description = description
        self._category = category
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustedAdvisorCheckDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustedAdvisorCheckDescription of this TrustedAdvisorCheckDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TrustedAdvisorCheckDescription.


        :return: The id of this TrustedAdvisorCheckDescription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrustedAdvisorCheckDescription.


        :param id: The id of this TrustedAdvisorCheckDescription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrustedAdvisorCheckDescription.


        :return: The name of this TrustedAdvisorCheckDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrustedAdvisorCheckDescription.


        :param name: The name of this TrustedAdvisorCheckDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this TrustedAdvisorCheckDescription.


        :return: The description of this TrustedAdvisorCheckDescription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrustedAdvisorCheckDescription.


        :param description: The description of this TrustedAdvisorCheckDescription.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def category(self):
        """Gets the category of this TrustedAdvisorCheckDescription.


        :return: The category of this TrustedAdvisorCheckDescription.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TrustedAdvisorCheckDescription.


        :param category: The category of this TrustedAdvisorCheckDescription.
        :type category: str
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")

        self._category = category

    @property
    def metadata(self):
        """Gets the metadata of this TrustedAdvisorCheckDescription.


        :return: The metadata of this TrustedAdvisorCheckDescription.
        :rtype: List
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TrustedAdvisorCheckDescription.


        :param metadata: The metadata of this TrustedAdvisorCheckDescription.
        :type metadata: List
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata
