# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrustedAdvisorResourcesSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resources_processed: int=None, resources_flagged: int=None, resources_ignored: int=None, resources_suppressed: int=None):
        """TrustedAdvisorResourcesSummary - a model defined in OpenAPI

        :param resources_processed: The resources_processed of this TrustedAdvisorResourcesSummary.
        :param resources_flagged: The resources_flagged of this TrustedAdvisorResourcesSummary.
        :param resources_ignored: The resources_ignored of this TrustedAdvisorResourcesSummary.
        :param resources_suppressed: The resources_suppressed of this TrustedAdvisorResourcesSummary.
        """
        self.openapi_types = {
            'resources_processed': int,
            'resources_flagged': int,
            'resources_ignored': int,
            'resources_suppressed': int
        }

        self.attribute_map = {
            'resources_processed': 'resourcesProcessed',
            'resources_flagged': 'resourcesFlagged',
            'resources_ignored': 'resourcesIgnored',
            'resources_suppressed': 'resourcesSuppressed'
        }

        self._resources_processed = resources_processed
        self._resources_flagged = resources_flagged
        self._resources_ignored = resources_ignored
        self._resources_suppressed = resources_suppressed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustedAdvisorResourcesSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustedAdvisorResourcesSummary of this TrustedAdvisorResourcesSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resources_processed(self):
        """Gets the resources_processed of this TrustedAdvisorResourcesSummary.


        :return: The resources_processed of this TrustedAdvisorResourcesSummary.
        :rtype: int
        """
        return self._resources_processed

    @resources_processed.setter
    def resources_processed(self, resources_processed):
        """Sets the resources_processed of this TrustedAdvisorResourcesSummary.


        :param resources_processed: The resources_processed of this TrustedAdvisorResourcesSummary.
        :type resources_processed: int
        """
        if resources_processed is None:
            raise ValueError("Invalid value for `resources_processed`, must not be `None`")

        self._resources_processed = resources_processed

    @property
    def resources_flagged(self):
        """Gets the resources_flagged of this TrustedAdvisorResourcesSummary.


        :return: The resources_flagged of this TrustedAdvisorResourcesSummary.
        :rtype: int
        """
        return self._resources_flagged

    @resources_flagged.setter
    def resources_flagged(self, resources_flagged):
        """Sets the resources_flagged of this TrustedAdvisorResourcesSummary.


        :param resources_flagged: The resources_flagged of this TrustedAdvisorResourcesSummary.
        :type resources_flagged: int
        """
        if resources_flagged is None:
            raise ValueError("Invalid value for `resources_flagged`, must not be `None`")

        self._resources_flagged = resources_flagged

    @property
    def resources_ignored(self):
        """Gets the resources_ignored of this TrustedAdvisorResourcesSummary.


        :return: The resources_ignored of this TrustedAdvisorResourcesSummary.
        :rtype: int
        """
        return self._resources_ignored

    @resources_ignored.setter
    def resources_ignored(self, resources_ignored):
        """Sets the resources_ignored of this TrustedAdvisorResourcesSummary.


        :param resources_ignored: The resources_ignored of this TrustedAdvisorResourcesSummary.
        :type resources_ignored: int
        """
        if resources_ignored is None:
            raise ValueError("Invalid value for `resources_ignored`, must not be `None`")

        self._resources_ignored = resources_ignored

    @property
    def resources_suppressed(self):
        """Gets the resources_suppressed of this TrustedAdvisorResourcesSummary.


        :return: The resources_suppressed of this TrustedAdvisorResourcesSummary.
        :rtype: int
        """
        return self._resources_suppressed

    @resources_suppressed.setter
    def resources_suppressed(self, resources_suppressed):
        """Sets the resources_suppressed of this TrustedAdvisorResourcesSummary.


        :param resources_suppressed: The resources_suppressed of this TrustedAdvisorResourcesSummary.
        :type resources_suppressed: int
        """
        if resources_suppressed is None:
            raise ValueError("Invalid value for `resources_suppressed`, must not be `None`")

        self._resources_suppressed = resources_suppressed
