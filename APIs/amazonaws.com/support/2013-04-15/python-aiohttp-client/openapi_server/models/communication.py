# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Communication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_id: str=None, body: str=None, submitted_by: str=None, time_created: str=None, attachment_set: List=None):
        """Communication - a model defined in OpenAPI

        :param case_id: The case_id of this Communication.
        :param body: The body of this Communication.
        :param submitted_by: The submitted_by of this Communication.
        :param time_created: The time_created of this Communication.
        :param attachment_set: The attachment_set of this Communication.
        """
        self.openapi_types = {
            'case_id': str,
            'body': str,
            'submitted_by': str,
            'time_created': str,
            'attachment_set': List
        }

        self.attribute_map = {
            'case_id': 'caseId',
            'body': 'body',
            'submitted_by': 'submittedBy',
            'time_created': 'timeCreated',
            'attachment_set': 'attachmentSet'
        }

        self._case_id = case_id
        self._body = body
        self._submitted_by = submitted_by
        self._time_created = time_created
        self._attachment_set = attachment_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Communication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Communication of this Communication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_id(self):
        """Gets the case_id of this Communication.


        :return: The case_id of this Communication.
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Communication.


        :param case_id: The case_id of this Communication.
        :type case_id: str
        """

        self._case_id = case_id

    @property
    def body(self):
        """Gets the body of this Communication.


        :return: The body of this Communication.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this Communication.


        :param body: The body of this Communication.
        :type body: str
        """

        self._body = body

    @property
    def submitted_by(self):
        """Gets the submitted_by of this Communication.


        :return: The submitted_by of this Communication.
        :rtype: str
        """
        return self._submitted_by

    @submitted_by.setter
    def submitted_by(self, submitted_by):
        """Sets the submitted_by of this Communication.


        :param submitted_by: The submitted_by of this Communication.
        :type submitted_by: str
        """

        self._submitted_by = submitted_by

    @property
    def time_created(self):
        """Gets the time_created of this Communication.


        :return: The time_created of this Communication.
        :rtype: str
        """
        return self._time_created

    @time_created.setter
    def time_created(self, time_created):
        """Sets the time_created of this Communication.


        :param time_created: The time_created of this Communication.
        :type time_created: str
        """

        self._time_created = time_created

    @property
    def attachment_set(self):
        """Gets the attachment_set of this Communication.


        :return: The attachment_set of this Communication.
        :rtype: List
        """
        return self._attachment_set

    @attachment_set.setter
    def attachment_set(self, attachment_set):
        """Sets the attachment_set of this Communication.


        :param attachment_set: The attachment_set of this Communication.
        :type attachment_set: List
        """

        self._attachment_set = attachment_set
