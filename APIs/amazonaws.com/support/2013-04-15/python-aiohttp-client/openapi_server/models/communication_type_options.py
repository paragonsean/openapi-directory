# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommunicationTypeOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, supported_hours: List=None, dates_without_support: List=None):
        """CommunicationTypeOptions - a model defined in OpenAPI

        :param type: The type of this CommunicationTypeOptions.
        :param supported_hours: The supported_hours of this CommunicationTypeOptions.
        :param dates_without_support: The dates_without_support of this CommunicationTypeOptions.
        """
        self.openapi_types = {
            'type': str,
            'supported_hours': List,
            'dates_without_support': List
        }

        self.attribute_map = {
            'type': 'type',
            'supported_hours': 'supportedHours',
            'dates_without_support': 'datesWithoutSupport'
        }

        self._type = type
        self._supported_hours = supported_hours
        self._dates_without_support = dates_without_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommunicationTypeOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommunicationTypeOptions of this CommunicationTypeOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this CommunicationTypeOptions.


        :return: The type of this CommunicationTypeOptions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommunicationTypeOptions.


        :param type: The type of this CommunicationTypeOptions.
        :type type: str
        """

        self._type = type

    @property
    def supported_hours(self):
        """Gets the supported_hours of this CommunicationTypeOptions.


        :return: The supported_hours of this CommunicationTypeOptions.
        :rtype: List
        """
        return self._supported_hours

    @supported_hours.setter
    def supported_hours(self, supported_hours):
        """Sets the supported_hours of this CommunicationTypeOptions.


        :param supported_hours: The supported_hours of this CommunicationTypeOptions.
        :type supported_hours: List
        """

        self._supported_hours = supported_hours

    @property
    def dates_without_support(self):
        """Gets the dates_without_support of this CommunicationTypeOptions.


        :return: The dates_without_support of this CommunicationTypeOptions.
        :rtype: List
        """
        return self._dates_without_support

    @dates_without_support.setter
    def dates_without_support(self, dates_without_support):
        """Sets the dates_without_support of this CommunicationTypeOptions.


        :param dates_without_support: The dates_without_support of this CommunicationTypeOptions.
        :type dates_without_support: List
        """

        self._dates_without_support = dates_without_support
