# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trusted_advisor_check_result_category_specific_summary import TrustedAdvisorCheckResultCategorySpecificSummary
from openapi_server.models.trusted_advisor_resources_summary import TrustedAdvisorResourcesSummary
from openapi_server import util


class TrustedAdvisorCheckResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_id: str=None, timestamp: str=None, status: str=None, resources_summary: TrustedAdvisorResourcesSummary=None, category_specific_summary: TrustedAdvisorCheckResultCategorySpecificSummary=None, flagged_resources: List=None):
        """TrustedAdvisorCheckResult - a model defined in OpenAPI

        :param check_id: The check_id of this TrustedAdvisorCheckResult.
        :param timestamp: The timestamp of this TrustedAdvisorCheckResult.
        :param status: The status of this TrustedAdvisorCheckResult.
        :param resources_summary: The resources_summary of this TrustedAdvisorCheckResult.
        :param category_specific_summary: The category_specific_summary of this TrustedAdvisorCheckResult.
        :param flagged_resources: The flagged_resources of this TrustedAdvisorCheckResult.
        """
        self.openapi_types = {
            'check_id': str,
            'timestamp': str,
            'status': str,
            'resources_summary': TrustedAdvisorResourcesSummary,
            'category_specific_summary': TrustedAdvisorCheckResultCategorySpecificSummary,
            'flagged_resources': List
        }

        self.attribute_map = {
            'check_id': 'checkId',
            'timestamp': 'timestamp',
            'status': 'status',
            'resources_summary': 'resourcesSummary',
            'category_specific_summary': 'categorySpecificSummary',
            'flagged_resources': 'flaggedResources'
        }

        self._check_id = check_id
        self._timestamp = timestamp
        self._status = status
        self._resources_summary = resources_summary
        self._category_specific_summary = category_specific_summary
        self._flagged_resources = flagged_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustedAdvisorCheckResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustedAdvisorCheckResult of this TrustedAdvisorCheckResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_id(self):
        """Gets the check_id of this TrustedAdvisorCheckResult.


        :return: The check_id of this TrustedAdvisorCheckResult.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this TrustedAdvisorCheckResult.


        :param check_id: The check_id of this TrustedAdvisorCheckResult.
        :type check_id: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def timestamp(self):
        """Gets the timestamp of this TrustedAdvisorCheckResult.


        :return: The timestamp of this TrustedAdvisorCheckResult.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TrustedAdvisorCheckResult.


        :param timestamp: The timestamp of this TrustedAdvisorCheckResult.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp

    @property
    def status(self):
        """Gets the status of this TrustedAdvisorCheckResult.


        :return: The status of this TrustedAdvisorCheckResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrustedAdvisorCheckResult.


        :param status: The status of this TrustedAdvisorCheckResult.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def resources_summary(self):
        """Gets the resources_summary of this TrustedAdvisorCheckResult.


        :return: The resources_summary of this TrustedAdvisorCheckResult.
        :rtype: TrustedAdvisorResourcesSummary
        """
        return self._resources_summary

    @resources_summary.setter
    def resources_summary(self, resources_summary):
        """Sets the resources_summary of this TrustedAdvisorCheckResult.


        :param resources_summary: The resources_summary of this TrustedAdvisorCheckResult.
        :type resources_summary: TrustedAdvisorResourcesSummary
        """
        if resources_summary is None:
            raise ValueError("Invalid value for `resources_summary`, must not be `None`")

        self._resources_summary = resources_summary

    @property
    def category_specific_summary(self):
        """Gets the category_specific_summary of this TrustedAdvisorCheckResult.


        :return: The category_specific_summary of this TrustedAdvisorCheckResult.
        :rtype: TrustedAdvisorCheckResultCategorySpecificSummary
        """
        return self._category_specific_summary

    @category_specific_summary.setter
    def category_specific_summary(self, category_specific_summary):
        """Sets the category_specific_summary of this TrustedAdvisorCheckResult.


        :param category_specific_summary: The category_specific_summary of this TrustedAdvisorCheckResult.
        :type category_specific_summary: TrustedAdvisorCheckResultCategorySpecificSummary
        """
        if category_specific_summary is None:
            raise ValueError("Invalid value for `category_specific_summary`, must not be `None`")

        self._category_specific_summary = category_specific_summary

    @property
    def flagged_resources(self):
        """Gets the flagged_resources of this TrustedAdvisorCheckResult.


        :return: The flagged_resources of this TrustedAdvisorCheckResult.
        :rtype: List
        """
        return self._flagged_resources

    @flagged_resources.setter
    def flagged_resources(self, flagged_resources):
        """Sets the flagged_resources of this TrustedAdvisorCheckResult.


        :param flagged_resources: The flagged_resources of this TrustedAdvisorCheckResult.
        :type flagged_resources: List
        """
        if flagged_resources is None:
            raise ValueError("Invalid value for `flagged_resources`, must not be `None`")

        self._flagged_resources = flagged_resources
