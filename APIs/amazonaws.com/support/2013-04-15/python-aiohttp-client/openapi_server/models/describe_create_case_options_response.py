# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeCreateCaseOptionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_availability: str=None, communication_types: List=None):
        """DescribeCreateCaseOptionsResponse - a model defined in OpenAPI

        :param language_availability: The language_availability of this DescribeCreateCaseOptionsResponse.
        :param communication_types: The communication_types of this DescribeCreateCaseOptionsResponse.
        """
        self.openapi_types = {
            'language_availability': str,
            'communication_types': List
        }

        self.attribute_map = {
            'language_availability': 'languageAvailability',
            'communication_types': 'communicationTypes'
        }

        self._language_availability = language_availability
        self._communication_types = communication_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCreateCaseOptionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCreateCaseOptionsResponse of this DescribeCreateCaseOptionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_availability(self):
        """Gets the language_availability of this DescribeCreateCaseOptionsResponse.


        :return: The language_availability of this DescribeCreateCaseOptionsResponse.
        :rtype: str
        """
        return self._language_availability

    @language_availability.setter
    def language_availability(self, language_availability):
        """Sets the language_availability of this DescribeCreateCaseOptionsResponse.


        :param language_availability: The language_availability of this DescribeCreateCaseOptionsResponse.
        :type language_availability: str
        """

        self._language_availability = language_availability

    @property
    def communication_types(self):
        """Gets the communication_types of this DescribeCreateCaseOptionsResponse.


        :return: The communication_types of this DescribeCreateCaseOptionsResponse.
        :rtype: List
        """
        return self._communication_types

    @communication_types.setter
    def communication_types(self, communication_types):
        """Sets the communication_types of this DescribeCreateCaseOptionsResponse.


        :param communication_types: The communication_types of this DescribeCreateCaseOptionsResponse.
        :type communication_types: List
        """

        self._communication_types = communication_types
