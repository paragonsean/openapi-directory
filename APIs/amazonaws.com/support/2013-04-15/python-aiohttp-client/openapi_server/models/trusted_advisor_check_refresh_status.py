# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrustedAdvisorCheckRefreshStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_id: str=None, status: str=None, millis_until_next_refreshable: int=None):
        """TrustedAdvisorCheckRefreshStatus - a model defined in OpenAPI

        :param check_id: The check_id of this TrustedAdvisorCheckRefreshStatus.
        :param status: The status of this TrustedAdvisorCheckRefreshStatus.
        :param millis_until_next_refreshable: The millis_until_next_refreshable of this TrustedAdvisorCheckRefreshStatus.
        """
        self.openapi_types = {
            'check_id': str,
            'status': str,
            'millis_until_next_refreshable': int
        }

        self.attribute_map = {
            'check_id': 'checkId',
            'status': 'status',
            'millis_until_next_refreshable': 'millisUntilNextRefreshable'
        }

        self._check_id = check_id
        self._status = status
        self._millis_until_next_refreshable = millis_until_next_refreshable

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustedAdvisorCheckRefreshStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustedAdvisorCheckRefreshStatus of this TrustedAdvisorCheckRefreshStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_id(self):
        """Gets the check_id of this TrustedAdvisorCheckRefreshStatus.


        :return: The check_id of this TrustedAdvisorCheckRefreshStatus.
        :rtype: str
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this TrustedAdvisorCheckRefreshStatus.


        :param check_id: The check_id of this TrustedAdvisorCheckRefreshStatus.
        :type check_id: str
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def status(self):
        """Gets the status of this TrustedAdvisorCheckRefreshStatus.


        :return: The status of this TrustedAdvisorCheckRefreshStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrustedAdvisorCheckRefreshStatus.


        :param status: The status of this TrustedAdvisorCheckRefreshStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def millis_until_next_refreshable(self):
        """Gets the millis_until_next_refreshable of this TrustedAdvisorCheckRefreshStatus.


        :return: The millis_until_next_refreshable of this TrustedAdvisorCheckRefreshStatus.
        :rtype: int
        """
        return self._millis_until_next_refreshable

    @millis_until_next_refreshable.setter
    def millis_until_next_refreshable(self, millis_until_next_refreshable):
        """Sets the millis_until_next_refreshable of this TrustedAdvisorCheckRefreshStatus.


        :param millis_until_next_refreshable: The millis_until_next_refreshable of this TrustedAdvisorCheckRefreshStatus.
        :type millis_until_next_refreshable: int
        """
        if millis_until_next_refreshable is None:
            raise ValueError("Invalid value for `millis_until_next_refreshable`, must not be `None`")

        self._millis_until_next_refreshable = millis_until_next_refreshable
