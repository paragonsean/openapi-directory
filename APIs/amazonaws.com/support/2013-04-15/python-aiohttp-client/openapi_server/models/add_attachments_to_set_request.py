# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddAttachmentsToSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachment_set_id: str=None, attachments: List=None):
        """AddAttachmentsToSetRequest - a model defined in OpenAPI

        :param attachment_set_id: The attachment_set_id of this AddAttachmentsToSetRequest.
        :param attachments: The attachments of this AddAttachmentsToSetRequest.
        """
        self.openapi_types = {
            'attachment_set_id': str,
            'attachments': List
        }

        self.attribute_map = {
            'attachment_set_id': 'attachmentSetId',
            'attachments': 'attachments'
        }

        self._attachment_set_id = attachment_set_id
        self._attachments = attachments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddAttachmentsToSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddAttachmentsToSetRequest of this AddAttachmentsToSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachment_set_id(self):
        """Gets the attachment_set_id of this AddAttachmentsToSetRequest.


        :return: The attachment_set_id of this AddAttachmentsToSetRequest.
        :rtype: str
        """
        return self._attachment_set_id

    @attachment_set_id.setter
    def attachment_set_id(self, attachment_set_id):
        """Sets the attachment_set_id of this AddAttachmentsToSetRequest.


        :param attachment_set_id: The attachment_set_id of this AddAttachmentsToSetRequest.
        :type attachment_set_id: str
        """

        self._attachment_set_id = attachment_set_id

    @property
    def attachments(self):
        """Gets the attachments of this AddAttachmentsToSetRequest.


        :return: The attachments of this AddAttachmentsToSetRequest.
        :rtype: List
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this AddAttachmentsToSetRequest.


        :param attachments: The attachments of this AddAttachmentsToSetRequest.
        :type attachments: List
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments
