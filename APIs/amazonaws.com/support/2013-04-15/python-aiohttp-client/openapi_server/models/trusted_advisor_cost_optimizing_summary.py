# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrustedAdvisorCostOptimizingSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, estimated_monthly_savings: float=None, estimated_percent_monthly_savings: float=None):
        """TrustedAdvisorCostOptimizingSummary - a model defined in OpenAPI

        :param estimated_monthly_savings: The estimated_monthly_savings of this TrustedAdvisorCostOptimizingSummary.
        :param estimated_percent_monthly_savings: The estimated_percent_monthly_savings of this TrustedAdvisorCostOptimizingSummary.
        """
        self.openapi_types = {
            'estimated_monthly_savings': float,
            'estimated_percent_monthly_savings': float
        }

        self.attribute_map = {
            'estimated_monthly_savings': 'estimatedMonthlySavings',
            'estimated_percent_monthly_savings': 'estimatedPercentMonthlySavings'
        }

        self._estimated_monthly_savings = estimated_monthly_savings
        self._estimated_percent_monthly_savings = estimated_percent_monthly_savings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustedAdvisorCostOptimizingSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustedAdvisorCostOptimizingSummary of this TrustedAdvisorCostOptimizingSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def estimated_monthly_savings(self):
        """Gets the estimated_monthly_savings of this TrustedAdvisorCostOptimizingSummary.


        :return: The estimated_monthly_savings of this TrustedAdvisorCostOptimizingSummary.
        :rtype: float
        """
        return self._estimated_monthly_savings

    @estimated_monthly_savings.setter
    def estimated_monthly_savings(self, estimated_monthly_savings):
        """Sets the estimated_monthly_savings of this TrustedAdvisorCostOptimizingSummary.


        :param estimated_monthly_savings: The estimated_monthly_savings of this TrustedAdvisorCostOptimizingSummary.
        :type estimated_monthly_savings: float
        """
        if estimated_monthly_savings is None:
            raise ValueError("Invalid value for `estimated_monthly_savings`, must not be `None`")

        self._estimated_monthly_savings = estimated_monthly_savings

    @property
    def estimated_percent_monthly_savings(self):
        """Gets the estimated_percent_monthly_savings of this TrustedAdvisorCostOptimizingSummary.


        :return: The estimated_percent_monthly_savings of this TrustedAdvisorCostOptimizingSummary.
        :rtype: float
        """
        return self._estimated_percent_monthly_savings

    @estimated_percent_monthly_savings.setter
    def estimated_percent_monthly_savings(self, estimated_percent_monthly_savings):
        """Sets the estimated_percent_monthly_savings of this TrustedAdvisorCostOptimizingSummary.


        :param estimated_percent_monthly_savings: The estimated_percent_monthly_savings of this TrustedAdvisorCostOptimizingSummary.
        :type estimated_percent_monthly_savings: float
        """
        if estimated_percent_monthly_savings is None:
            raise ValueError("Invalid value for `estimated_percent_monthly_savings`, must not be `None`")

        self._estimated_percent_monthly_savings = estimated_percent_monthly_savings
