# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeCreateCaseOptionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_type: str=None, service_code: str=None, language: str=None, category_code: str=None):
        """DescribeCreateCaseOptionsRequest - a model defined in OpenAPI

        :param issue_type: The issue_type of this DescribeCreateCaseOptionsRequest.
        :param service_code: The service_code of this DescribeCreateCaseOptionsRequest.
        :param language: The language of this DescribeCreateCaseOptionsRequest.
        :param category_code: The category_code of this DescribeCreateCaseOptionsRequest.
        """
        self.openapi_types = {
            'issue_type': str,
            'service_code': str,
            'language': str,
            'category_code': str
        }

        self.attribute_map = {
            'issue_type': 'issueType',
            'service_code': 'serviceCode',
            'language': 'language',
            'category_code': 'categoryCode'
        }

        self._issue_type = issue_type
        self._service_code = service_code
        self._language = language
        self._category_code = category_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeCreateCaseOptionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeCreateCaseOptionsRequest of this DescribeCreateCaseOptionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_type(self):
        """Gets the issue_type of this DescribeCreateCaseOptionsRequest.


        :return: The issue_type of this DescribeCreateCaseOptionsRequest.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this DescribeCreateCaseOptionsRequest.


        :param issue_type: The issue_type of this DescribeCreateCaseOptionsRequest.
        :type issue_type: str
        """
        if issue_type is None:
            raise ValueError("Invalid value for `issue_type`, must not be `None`")

        self._issue_type = issue_type

    @property
    def service_code(self):
        """Gets the service_code of this DescribeCreateCaseOptionsRequest.


        :return: The service_code of this DescribeCreateCaseOptionsRequest.
        :rtype: str
        """
        return self._service_code

    @service_code.setter
    def service_code(self, service_code):
        """Sets the service_code of this DescribeCreateCaseOptionsRequest.


        :param service_code: The service_code of this DescribeCreateCaseOptionsRequest.
        :type service_code: str
        """
        if service_code is None:
            raise ValueError("Invalid value for `service_code`, must not be `None`")

        self._service_code = service_code

    @property
    def language(self):
        """Gets the language of this DescribeCreateCaseOptionsRequest.


        :return: The language of this DescribeCreateCaseOptionsRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DescribeCreateCaseOptionsRequest.


        :param language: The language of this DescribeCreateCaseOptionsRequest.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def category_code(self):
        """Gets the category_code of this DescribeCreateCaseOptionsRequest.


        :return: The category_code of this DescribeCreateCaseOptionsRequest.
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this DescribeCreateCaseOptionsRequest.


        :param category_code: The category_code of this DescribeCreateCaseOptionsRequest.
        :type category_code: str
        """
        if category_code is None:
            raise ValueError("Invalid value for `category_code`, must not be `None`")

        self._category_code = category_code
