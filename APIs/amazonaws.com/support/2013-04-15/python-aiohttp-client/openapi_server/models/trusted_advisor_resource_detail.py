# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrustedAdvisorResourceDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, region: str=None, resource_id: str=None, is_suppressed: bool=None, metadata: List=None):
        """TrustedAdvisorResourceDetail - a model defined in OpenAPI

        :param status: The status of this TrustedAdvisorResourceDetail.
        :param region: The region of this TrustedAdvisorResourceDetail.
        :param resource_id: The resource_id of this TrustedAdvisorResourceDetail.
        :param is_suppressed: The is_suppressed of this TrustedAdvisorResourceDetail.
        :param metadata: The metadata of this TrustedAdvisorResourceDetail.
        """
        self.openapi_types = {
            'status': str,
            'region': str,
            'resource_id': str,
            'is_suppressed': bool,
            'metadata': List
        }

        self.attribute_map = {
            'status': 'status',
            'region': 'region',
            'resource_id': 'resourceId',
            'is_suppressed': 'isSuppressed',
            'metadata': 'metadata'
        }

        self._status = status
        self._region = region
        self._resource_id = resource_id
        self._is_suppressed = is_suppressed
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustedAdvisorResourceDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustedAdvisorResourceDetail of this TrustedAdvisorResourceDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this TrustedAdvisorResourceDetail.


        :return: The status of this TrustedAdvisorResourceDetail.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrustedAdvisorResourceDetail.


        :param status: The status of this TrustedAdvisorResourceDetail.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def region(self):
        """Gets the region of this TrustedAdvisorResourceDetail.


        :return: The region of this TrustedAdvisorResourceDetail.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this TrustedAdvisorResourceDetail.


        :param region: The region of this TrustedAdvisorResourceDetail.
        :type region: str
        """

        self._region = region

    @property
    def resource_id(self):
        """Gets the resource_id of this TrustedAdvisorResourceDetail.


        :return: The resource_id of this TrustedAdvisorResourceDetail.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this TrustedAdvisorResourceDetail.


        :param resource_id: The resource_id of this TrustedAdvisorResourceDetail.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id

    @property
    def is_suppressed(self):
        """Gets the is_suppressed of this TrustedAdvisorResourceDetail.


        :return: The is_suppressed of this TrustedAdvisorResourceDetail.
        :rtype: bool
        """
        return self._is_suppressed

    @is_suppressed.setter
    def is_suppressed(self, is_suppressed):
        """Sets the is_suppressed of this TrustedAdvisorResourceDetail.


        :param is_suppressed: The is_suppressed of this TrustedAdvisorResourceDetail.
        :type is_suppressed: bool
        """

        self._is_suppressed = is_suppressed

    @property
    def metadata(self):
        """Gets the metadata of this TrustedAdvisorResourceDetail.


        :return: The metadata of this TrustedAdvisorResourceDetail.
        :rtype: List
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TrustedAdvisorResourceDetail.


        :param metadata: The metadata of this TrustedAdvisorResourceDetail.
        :type metadata: List
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata
