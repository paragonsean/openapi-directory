/**
 * AWS Support
 * <fullname>Amazon Web Services Support</fullname> <p>The <i>Amazon Web Services Support API Reference</i> is intended for programmers who need detailed information about the Amazon Web Services Support operations and data types. You can use the API to manage your support cases programmatically. The Amazon Web Services Support API uses HTTP methods that return results in JSON format.</p> <note> <ul> <li> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan to use the Amazon Web Services Support API. </p> </li> <li> <p>If you call the Amazon Web Services Support API from an account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, the <code>SubscriptionRequiredException</code> error message appears. For information about changing your support plan, see <a href=\"http://aws.amazon.com/premiumsupport/\">Amazon Web Services Support</a>.</p> </li> </ul> </note> <p>You can also use the Amazon Web Services Support API to access features for <a href=\"http://aws.amazon.com/premiumsupport/trustedadvisor/\">Trusted Advisor</a>. You can return a list of checks and their descriptions, get check results, specify checks to refresh, and get the refresh status of checks.</p> <p>You can manage your support cases with the following Amazon Web Services Support API operations:</p> <ul> <li> <p>The <a>CreateCase</a>, <a>DescribeCases</a>, <a>DescribeAttachment</a>, and <a>ResolveCase</a> operations create Amazon Web Services Support cases, retrieve information about cases, and resolve cases.</p> </li> <li> <p>The <a>DescribeCommunications</a>, <a>AddCommunicationToCase</a>, and <a>AddAttachmentsToSet</a> operations retrieve and add communications and attachments to Amazon Web Services Support cases.</p> </li> <li> <p>The <a>DescribeServices</a> and <a>DescribeSeverityLevels</a> operations return Amazon Web Service names, service codes, service categories, and problem severity levels. You use these values when you call the <a>CreateCase</a> operation.</p> </li> </ul> <p>You can also use the Amazon Web Services Support API to call the Trusted Advisor operations. For more information, see <a href=\"https://docs.aws.amazon.com/\">Trusted Advisor</a> in the <i>Amazon Web Services Support User Guide</i>.</p> <p>For authentication of requests, Amazon Web Services Support uses <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>.</p> <p>For more information about this service and the endpoints to use, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/about-support-api.html\">About the Amazon Web Services Support API</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2013-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TrustedAdvisorResourceDetail model module.
 * @module model/TrustedAdvisorResourceDetail
 * @version 2013-04-15
 */
class TrustedAdvisorResourceDetail {
    /**
     * Constructs a new <code>TrustedAdvisorResourceDetail</code>.
     * Contains information about a resource identified by a Trusted Advisor check.
     * @alias module:model/TrustedAdvisorResourceDetail
     * @param status {String} 
     * @param resourceId {String} 
     * @param metadata {Array} 
     */
    constructor(status, resourceId, metadata) { 
        
        TrustedAdvisorResourceDetail.initialize(this, status, resourceId, metadata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status, resourceId, metadata) { 
        obj['status'] = status;
        obj['resourceId'] = resourceId;
        obj['metadata'] = metadata;
    }

    /**
     * Constructs a <code>TrustedAdvisorResourceDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrustedAdvisorResourceDetail} obj Optional instance to populate.
     * @return {module:model/TrustedAdvisorResourceDetail} The populated <code>TrustedAdvisorResourceDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrustedAdvisorResourceDetail();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('resourceId')) {
                obj['resourceId'] = ApiClient.convertToType(data['resourceId'], 'String');
            }
            if (data.hasOwnProperty('isSuppressed')) {
                obj['isSuppressed'] = ApiClient.convertToType(data['isSuppressed'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrustedAdvisorResourceDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrustedAdvisorResourceDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrustedAdvisorResourceDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          String.validateJSON(data['status']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          String.validateJSON(data['region']);
        }
        // validate the optional field `resourceId`
        if (data['resourceId']) { // data not null
          String.validateJSON(data['resourceId']);
        }
        // validate the optional field `isSuppressed`
        if (data['isSuppressed']) { // data not null
          Boolean.validateJSON(data['isSuppressed']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          Array.validateJSON(data['metadata']);
        }

        return true;
    }


}

TrustedAdvisorResourceDetail.RequiredProperties = ["status", "resourceId", "metadata"];

/**
 * @member {String} status
 */
TrustedAdvisorResourceDetail.prototype['status'] = undefined;

/**
 * @member {String} region
 */
TrustedAdvisorResourceDetail.prototype['region'] = undefined;

/**
 * @member {String} resourceId
 */
TrustedAdvisorResourceDetail.prototype['resourceId'] = undefined;

/**
 * @member {Boolean} isSuppressed
 */
TrustedAdvisorResourceDetail.prototype['isSuppressed'] = undefined;

/**
 * @member {Array} metadata
 */
TrustedAdvisorResourceDetail.prototype['metadata'] = undefined;






export default TrustedAdvisorResourceDetail;

