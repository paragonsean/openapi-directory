/**
 * AWS Support
 * <fullname>Amazon Web Services Support</fullname> <p>The <i>Amazon Web Services Support API Reference</i> is intended for programmers who need detailed information about the Amazon Web Services Support operations and data types. You can use the API to manage your support cases programmatically. The Amazon Web Services Support API uses HTTP methods that return results in JSON format.</p> <note> <ul> <li> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan to use the Amazon Web Services Support API. </p> </li> <li> <p>If you call the Amazon Web Services Support API from an account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, the <code>SubscriptionRequiredException</code> error message appears. For information about changing your support plan, see <a href=\"http://aws.amazon.com/premiumsupport/\">Amazon Web Services Support</a>.</p> </li> </ul> </note> <p>You can also use the Amazon Web Services Support API to access features for <a href=\"http://aws.amazon.com/premiumsupport/trustedadvisor/\">Trusted Advisor</a>. You can return a list of checks and their descriptions, get check results, specify checks to refresh, and get the refresh status of checks.</p> <p>You can manage your support cases with the following Amazon Web Services Support API operations:</p> <ul> <li> <p>The <a>CreateCase</a>, <a>DescribeCases</a>, <a>DescribeAttachment</a>, and <a>ResolveCase</a> operations create Amazon Web Services Support cases, retrieve information about cases, and resolve cases.</p> </li> <li> <p>The <a>DescribeCommunications</a>, <a>AddCommunicationToCase</a>, and <a>AddAttachmentsToSet</a> operations retrieve and add communications and attachments to Amazon Web Services Support cases.</p> </li> <li> <p>The <a>DescribeServices</a> and <a>DescribeSeverityLevels</a> operations return Amazon Web Service names, service codes, service categories, and problem severity levels. You use these values when you call the <a>CreateCase</a> operation.</p> </li> </ul> <p>You can also use the Amazon Web Services Support API to call the Trusted Advisor operations. For more information, see <a href=\"https://docs.aws.amazon.com/\">Trusted Advisor</a> in the <i>Amazon Web Services Support User Guide</i>.</p> <p>For authentication of requests, Amazon Web Services Support uses <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>.</p> <p>For more information about this service and the endpoints to use, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/about-support-api.html\">About the Amazon Web Services Support API</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2013-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsSupport);
  }
}(this, function(expect, AwsSupport) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsSupport.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addAttachmentsToSet', function() {
      it('should call addAttachmentsToSet successfully', function(done) {
        //uncomment below and update the code to test addAttachmentsToSet
        //instance.addAttachmentsToSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCommunicationToCase', function() {
      it('should call addCommunicationToCase successfully', function(done) {
        //uncomment below and update the code to test addCommunicationToCase
        //instance.addCommunicationToCase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCase', function() {
      it('should call createCase successfully', function(done) {
        //uncomment below and update the code to test createCase
        //instance.createCase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAttachment', function() {
      it('should call describeAttachment successfully', function(done) {
        //uncomment below and update the code to test describeAttachment
        //instance.describeAttachment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCases', function() {
      it('should call describeCases successfully', function(done) {
        //uncomment below and update the code to test describeCases
        //instance.describeCases(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCommunications', function() {
      it('should call describeCommunications successfully', function(done) {
        //uncomment below and update the code to test describeCommunications
        //instance.describeCommunications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCreateCaseOptions', function() {
      it('should call describeCreateCaseOptions successfully', function(done) {
        //uncomment below and update the code to test describeCreateCaseOptions
        //instance.describeCreateCaseOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeServices', function() {
      it('should call describeServices successfully', function(done) {
        //uncomment below and update the code to test describeServices
        //instance.describeServices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSeverityLevels', function() {
      it('should call describeSeverityLevels successfully', function(done) {
        //uncomment below and update the code to test describeSeverityLevels
        //instance.describeSeverityLevels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSupportedLanguages', function() {
      it('should call describeSupportedLanguages successfully', function(done) {
        //uncomment below and update the code to test describeSupportedLanguages
        //instance.describeSupportedLanguages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTrustedAdvisorCheckRefreshStatuses', function() {
      it('should call describeTrustedAdvisorCheckRefreshStatuses successfully', function(done) {
        //uncomment below and update the code to test describeTrustedAdvisorCheckRefreshStatuses
        //instance.describeTrustedAdvisorCheckRefreshStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTrustedAdvisorCheckResult', function() {
      it('should call describeTrustedAdvisorCheckResult successfully', function(done) {
        //uncomment below and update the code to test describeTrustedAdvisorCheckResult
        //instance.describeTrustedAdvisorCheckResult(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTrustedAdvisorCheckSummaries', function() {
      it('should call describeTrustedAdvisorCheckSummaries successfully', function(done) {
        //uncomment below and update the code to test describeTrustedAdvisorCheckSummaries
        //instance.describeTrustedAdvisorCheckSummaries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTrustedAdvisorChecks', function() {
      it('should call describeTrustedAdvisorChecks successfully', function(done) {
        //uncomment below and update the code to test describeTrustedAdvisorChecks
        //instance.describeTrustedAdvisorChecks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshTrustedAdvisorCheck', function() {
      it('should call refreshTrustedAdvisorCheck successfully', function(done) {
        //uncomment below and update the code to test refreshTrustedAdvisorCheck
        //instance.refreshTrustedAdvisorCheck(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resolveCase', function() {
      it('should call resolveCase successfully', function(done) {
        //uncomment below and update the code to test resolveCase
        //instance.resolveCase(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
