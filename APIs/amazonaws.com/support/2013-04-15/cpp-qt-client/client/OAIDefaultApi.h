/**
 * AWS Support
 * <fullname>Amazon Web Services Support</fullname> <p>The <i>Amazon Web Services Support API Reference</i> is intended for programmers who need detailed information about the Amazon Web Services Support operations and data types. You can use the API to manage your support cases programmatically. The Amazon Web Services Support API uses HTTP methods that return results in JSON format.</p> <note> <ul> <li> <p>You must have a Business, Enterprise On-Ramp, or Enterprise Support plan to use the Amazon Web Services Support API. </p> </li> <li> <p>If you call the Amazon Web Services Support API from an account that doesn't have a Business, Enterprise On-Ramp, or Enterprise Support plan, the <code>SubscriptionRequiredException</code> error message appears. For information about changing your support plan, see <a href=\"http://aws.amazon.com/premiumsupport/\">Amazon Web Services Support</a>.</p> </li> </ul> </note> <p>You can also use the Amazon Web Services Support API to access features for <a href=\"http://aws.amazon.com/premiumsupport/trustedadvisor/\">Trusted Advisor</a>. You can return a list of checks and their descriptions, get check results, specify checks to refresh, and get the refresh status of checks.</p> <p>You can manage your support cases with the following Amazon Web Services Support API operations:</p> <ul> <li> <p>The <a>CreateCase</a>, <a>DescribeCases</a>, <a>DescribeAttachment</a>, and <a>ResolveCase</a> operations create Amazon Web Services Support cases, retrieve information about cases, and resolve cases.</p> </li> <li> <p>The <a>DescribeCommunications</a>, <a>AddCommunicationToCase</a>, and <a>AddAttachmentsToSet</a> operations retrieve and add communications and attachments to Amazon Web Services Support cases.</p> </li> <li> <p>The <a>DescribeServices</a> and <a>DescribeSeverityLevels</a> operations return Amazon Web Service names, service codes, service categories, and problem severity levels. You use these values when you call the <a>CreateCase</a> operation.</p> </li> </ul> <p>You can also use the Amazon Web Services Support API to call the Trusted Advisor operations. For more information, see <a href=\"https://docs.aws.amazon.com/\">Trusted Advisor</a> in the <i>Amazon Web Services Support User Guide</i>.</p> <p>For authentication of requests, Amazon Web Services Support uses <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a>.</p> <p>For more information about this service and the endpoints to use, see <a href=\"https://docs.aws.amazon.com/awssupport/latest/user/about-support-api.html\">About the Amazon Web Services Support API</a> in the <i>Amazon Web Services Support User Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2013-04-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddAttachmentsToSetRequest.h"
#include "OAIAddAttachmentsToSetResponse.h"
#include "OAIAddCommunicationToCaseRequest.h"
#include "OAIAddCommunicationToCaseResponse.h"
#include "OAICreateCaseRequest.h"
#include "OAICreateCaseResponse.h"
#include "OAIDescribeAttachmentRequest.h"
#include "OAIDescribeAttachmentResponse.h"
#include "OAIDescribeCasesRequest.h"
#include "OAIDescribeCasesResponse.h"
#include "OAIDescribeCommunicationsRequest.h"
#include "OAIDescribeCommunicationsResponse.h"
#include "OAIDescribeCreateCaseOptionsRequest.h"
#include "OAIDescribeCreateCaseOptionsResponse.h"
#include "OAIDescribeServicesRequest.h"
#include "OAIDescribeServicesResponse.h"
#include "OAIDescribeSeverityLevelsRequest.h"
#include "OAIDescribeSeverityLevelsResponse.h"
#include "OAIDescribeSupportedLanguagesRequest.h"
#include "OAIDescribeSupportedLanguagesResponse.h"
#include "OAIDescribeTrustedAdvisorCheckRefreshStatusesRequest.h"
#include "OAIDescribeTrustedAdvisorCheckRefreshStatusesResponse.h"
#include "OAIDescribeTrustedAdvisorCheckResultRequest.h"
#include "OAIDescribeTrustedAdvisorCheckResultResponse.h"
#include "OAIDescribeTrustedAdvisorCheckSummariesRequest.h"
#include "OAIDescribeTrustedAdvisorCheckSummariesResponse.h"
#include "OAIDescribeTrustedAdvisorChecksRequest.h"
#include "OAIDescribeTrustedAdvisorChecksResponse.h"
#include "OAIRefreshTrustedAdvisorCheckRequest.h"
#include "OAIRefreshTrustedAdvisorCheckResponse.h"
#include "OAIResolveCaseRequest.h"
#include "OAIResolveCaseResponse.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_add_attachments_to_set_request OAIAddAttachmentsToSetRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addAttachmentsToSet(const QString &x_amz_target, const OAIAddAttachmentsToSetRequest &oai_add_attachments_to_set_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_add_communication_to_case_request OAIAddCommunicationToCaseRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addCommunicationToCase(const QString &x_amz_target, const OAIAddCommunicationToCaseRequest &oai_add_communication_to_case_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_case_request OAICreateCaseRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCase(const QString &x_amz_target, const OAICreateCaseRequest &oai_create_case_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_attachment_request OAIDescribeAttachmentRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAttachment(const QString &x_amz_target, const OAIDescribeAttachmentRequest &oai_describe_attachment_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_cases_request OAIDescribeCasesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void describeCases(const QString &x_amz_target, const OAIDescribeCasesRequest &oai_describe_cases_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_communications_request OAIDescribeCommunicationsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void describeCommunications(const QString &x_amz_target, const OAIDescribeCommunicationsRequest &oai_describe_communications_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_create_case_options_request OAIDescribeCreateCaseOptionsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeCreateCaseOptions(const QString &x_amz_target, const OAIDescribeCreateCaseOptionsRequest &oai_describe_create_case_options_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_services_request OAIDescribeServicesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeServices(const QString &x_amz_target, const OAIDescribeServicesRequest &oai_describe_services_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_severity_levels_request OAIDescribeSeverityLevelsRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeSeverityLevels(const QString &x_amz_target, const OAIDescribeSeverityLevelsRequest &oai_describe_severity_levels_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_supported_languages_request OAIDescribeSupportedLanguagesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeSupportedLanguages(const QString &x_amz_target, const OAIDescribeSupportedLanguagesRequest &oai_describe_supported_languages_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_trusted_advisor_check_refresh_statuses_request OAIDescribeTrustedAdvisorCheckRefreshStatusesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTrustedAdvisorCheckRefreshStatuses(const QString &x_amz_target, const OAIDescribeTrustedAdvisorCheckRefreshStatusesRequest &oai_describe_trusted_advisor_check_refresh_statuses_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_trusted_advisor_check_result_request OAIDescribeTrustedAdvisorCheckResultRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTrustedAdvisorCheckResult(const QString &x_amz_target, const OAIDescribeTrustedAdvisorCheckResultRequest &oai_describe_trusted_advisor_check_result_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_trusted_advisor_check_summaries_request OAIDescribeTrustedAdvisorCheckSummariesRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTrustedAdvisorCheckSummaries(const QString &x_amz_target, const OAIDescribeTrustedAdvisorCheckSummariesRequest &oai_describe_trusted_advisor_check_summaries_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_trusted_advisor_checks_request OAIDescribeTrustedAdvisorChecksRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeTrustedAdvisorChecks(const QString &x_amz_target, const OAIDescribeTrustedAdvisorChecksRequest &oai_describe_trusted_advisor_checks_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_refresh_trusted_advisor_check_request OAIRefreshTrustedAdvisorCheckRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void refreshTrustedAdvisorCheck(const QString &x_amz_target, const OAIRefreshTrustedAdvisorCheckRequest &oai_refresh_trusted_advisor_check_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_resolve_case_request OAIResolveCaseRequest [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void resolveCase(const QString &x_amz_target, const OAIResolveCaseRequest &oai_resolve_case_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addAttachmentsToSetCallback(OAIHttpRequestWorker *worker);
    void addCommunicationToCaseCallback(OAIHttpRequestWorker *worker);
    void createCaseCallback(OAIHttpRequestWorker *worker);
    void describeAttachmentCallback(OAIHttpRequestWorker *worker);
    void describeCasesCallback(OAIHttpRequestWorker *worker);
    void describeCommunicationsCallback(OAIHttpRequestWorker *worker);
    void describeCreateCaseOptionsCallback(OAIHttpRequestWorker *worker);
    void describeServicesCallback(OAIHttpRequestWorker *worker);
    void describeSeverityLevelsCallback(OAIHttpRequestWorker *worker);
    void describeSupportedLanguagesCallback(OAIHttpRequestWorker *worker);
    void describeTrustedAdvisorCheckRefreshStatusesCallback(OAIHttpRequestWorker *worker);
    void describeTrustedAdvisorCheckResultCallback(OAIHttpRequestWorker *worker);
    void describeTrustedAdvisorCheckSummariesCallback(OAIHttpRequestWorker *worker);
    void describeTrustedAdvisorChecksCallback(OAIHttpRequestWorker *worker);
    void refreshTrustedAdvisorCheckCallback(OAIHttpRequestWorker *worker);
    void resolveCaseCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addAttachmentsToSetSignal(OAIAddAttachmentsToSetResponse summary);
    void addCommunicationToCaseSignal(OAIAddCommunicationToCaseResponse summary);
    void createCaseSignal(OAICreateCaseResponse summary);
    void describeAttachmentSignal(OAIDescribeAttachmentResponse summary);
    void describeCasesSignal(OAIDescribeCasesResponse summary);
    void describeCommunicationsSignal(OAIDescribeCommunicationsResponse summary);
    void describeCreateCaseOptionsSignal(OAIDescribeCreateCaseOptionsResponse summary);
    void describeServicesSignal(OAIDescribeServicesResponse summary);
    void describeSeverityLevelsSignal(OAIDescribeSeverityLevelsResponse summary);
    void describeSupportedLanguagesSignal(OAIDescribeSupportedLanguagesResponse summary);
    void describeTrustedAdvisorCheckRefreshStatusesSignal(OAIDescribeTrustedAdvisorCheckRefreshStatusesResponse summary);
    void describeTrustedAdvisorCheckResultSignal(OAIDescribeTrustedAdvisorCheckResultResponse summary);
    void describeTrustedAdvisorCheckSummariesSignal(OAIDescribeTrustedAdvisorCheckSummariesResponse summary);
    void describeTrustedAdvisorChecksSignal(OAIDescribeTrustedAdvisorChecksResponse summary);
    void refreshTrustedAdvisorCheckSignal(OAIRefreshTrustedAdvisorCheckResponse summary);
    void resolveCaseSignal(OAIResolveCaseResponse summary);


    void addAttachmentsToSetSignalFull(OAIHttpRequestWorker *worker, OAIAddAttachmentsToSetResponse summary);
    void addCommunicationToCaseSignalFull(OAIHttpRequestWorker *worker, OAIAddCommunicationToCaseResponse summary);
    void createCaseSignalFull(OAIHttpRequestWorker *worker, OAICreateCaseResponse summary);
    void describeAttachmentSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAttachmentResponse summary);
    void describeCasesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCasesResponse summary);
    void describeCommunicationsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCommunicationsResponse summary);
    void describeCreateCaseOptionsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCreateCaseOptionsResponse summary);
    void describeServicesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeServicesResponse summary);
    void describeSeverityLevelsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSeverityLevelsResponse summary);
    void describeSupportedLanguagesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSupportedLanguagesResponse summary);
    void describeTrustedAdvisorCheckRefreshStatusesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTrustedAdvisorCheckRefreshStatusesResponse summary);
    void describeTrustedAdvisorCheckResultSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTrustedAdvisorCheckResultResponse summary);
    void describeTrustedAdvisorCheckSummariesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTrustedAdvisorCheckSummariesResponse summary);
    void describeTrustedAdvisorChecksSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTrustedAdvisorChecksResponse summary);
    void refreshTrustedAdvisorCheckSignalFull(OAIHttpRequestWorker *worker, OAIRefreshTrustedAdvisorCheckResponse summary);
    void resolveCaseSignalFull(OAIHttpRequestWorker *worker, OAIResolveCaseResponse summary);

    Q_DECL_DEPRECATED_X("Use addAttachmentsToSetSignalError() instead")
    void addAttachmentsToSetSignalE(OAIAddAttachmentsToSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addAttachmentsToSetSignalError(OAIAddAttachmentsToSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCommunicationToCaseSignalError() instead")
    void addCommunicationToCaseSignalE(OAIAddCommunicationToCaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCommunicationToCaseSignalError(OAIAddCommunicationToCaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCaseSignalError() instead")
    void createCaseSignalE(OAICreateCaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCaseSignalError(OAICreateCaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAttachmentSignalError() instead")
    void describeAttachmentSignalE(OAIDescribeAttachmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAttachmentSignalError(OAIDescribeAttachmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCasesSignalError() instead")
    void describeCasesSignalE(OAIDescribeCasesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCasesSignalError(OAIDescribeCasesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCommunicationsSignalError() instead")
    void describeCommunicationsSignalE(OAIDescribeCommunicationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCommunicationsSignalError(OAIDescribeCommunicationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCreateCaseOptionsSignalError() instead")
    void describeCreateCaseOptionsSignalE(OAIDescribeCreateCaseOptionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCreateCaseOptionsSignalError(OAIDescribeCreateCaseOptionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServicesSignalError() instead")
    void describeServicesSignalE(OAIDescribeServicesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServicesSignalError(OAIDescribeServicesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSeverityLevelsSignalError() instead")
    void describeSeverityLevelsSignalE(OAIDescribeSeverityLevelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSeverityLevelsSignalError(OAIDescribeSeverityLevelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSupportedLanguagesSignalError() instead")
    void describeSupportedLanguagesSignalE(OAIDescribeSupportedLanguagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSupportedLanguagesSignalError(OAIDescribeSupportedLanguagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorCheckRefreshStatusesSignalError() instead")
    void describeTrustedAdvisorCheckRefreshStatusesSignalE(OAIDescribeTrustedAdvisorCheckRefreshStatusesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorCheckRefreshStatusesSignalError(OAIDescribeTrustedAdvisorCheckRefreshStatusesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorCheckResultSignalError() instead")
    void describeTrustedAdvisorCheckResultSignalE(OAIDescribeTrustedAdvisorCheckResultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorCheckResultSignalError(OAIDescribeTrustedAdvisorCheckResultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorCheckSummariesSignalError() instead")
    void describeTrustedAdvisorCheckSummariesSignalE(OAIDescribeTrustedAdvisorCheckSummariesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorCheckSummariesSignalError(OAIDescribeTrustedAdvisorCheckSummariesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorChecksSignalError() instead")
    void describeTrustedAdvisorChecksSignalE(OAIDescribeTrustedAdvisorChecksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorChecksSignalError(OAIDescribeTrustedAdvisorChecksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshTrustedAdvisorCheckSignalError() instead")
    void refreshTrustedAdvisorCheckSignalE(OAIRefreshTrustedAdvisorCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshTrustedAdvisorCheckSignalError(OAIRefreshTrustedAdvisorCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveCaseSignalError() instead")
    void resolveCaseSignalE(OAIResolveCaseResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveCaseSignalError(OAIResolveCaseResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addAttachmentsToSetSignalErrorFull() instead")
    void addAttachmentsToSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAttachmentsToSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCommunicationToCaseSignalErrorFull() instead")
    void addCommunicationToCaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCommunicationToCaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCaseSignalErrorFull() instead")
    void createCaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAttachmentSignalErrorFull() instead")
    void describeAttachmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAttachmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCasesSignalErrorFull() instead")
    void describeCasesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCasesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCommunicationsSignalErrorFull() instead")
    void describeCommunicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCommunicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCreateCaseOptionsSignalErrorFull() instead")
    void describeCreateCaseOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCreateCaseOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeServicesSignalErrorFull() instead")
    void describeServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSeverityLevelsSignalErrorFull() instead")
    void describeSeverityLevelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSeverityLevelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSupportedLanguagesSignalErrorFull() instead")
    void describeSupportedLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSupportedLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorCheckRefreshStatusesSignalErrorFull() instead")
    void describeTrustedAdvisorCheckRefreshStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorCheckRefreshStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorCheckResultSignalErrorFull() instead")
    void describeTrustedAdvisorCheckResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorCheckResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorCheckSummariesSignalErrorFull() instead")
    void describeTrustedAdvisorCheckSummariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorCheckSummariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTrustedAdvisorChecksSignalErrorFull() instead")
    void describeTrustedAdvisorChecksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTrustedAdvisorChecksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshTrustedAdvisorCheckSignalErrorFull() instead")
    void refreshTrustedAdvisorCheckSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshTrustedAdvisorCheckSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveCaseSignalErrorFull() instead")
    void resolveCaseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveCaseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
