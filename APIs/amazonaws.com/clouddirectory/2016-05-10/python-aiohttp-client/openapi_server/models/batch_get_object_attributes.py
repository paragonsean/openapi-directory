# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_get_object_attributes_object_reference import BatchGetObjectAttributesObjectReference
from openapi_server.models.batch_get_object_attributes_schema_facet import BatchGetObjectAttributesSchemaFacet
from openapi_server import util


class BatchGetObjectAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_reference: BatchGetObjectAttributesObjectReference=None, schema_facet: BatchGetObjectAttributesSchemaFacet=None, attribute_names: List=None):
        """BatchGetObjectAttributes - a model defined in OpenAPI

        :param object_reference: The object_reference of this BatchGetObjectAttributes.
        :param schema_facet: The schema_facet of this BatchGetObjectAttributes.
        :param attribute_names: The attribute_names of this BatchGetObjectAttributes.
        """
        self.openapi_types = {
            'object_reference': BatchGetObjectAttributesObjectReference,
            'schema_facet': BatchGetObjectAttributesSchemaFacet,
            'attribute_names': List
        }

        self.attribute_map = {
            'object_reference': 'ObjectReference',
            'schema_facet': 'SchemaFacet',
            'attribute_names': 'AttributeNames'
        }

        self._object_reference = object_reference
        self._schema_facet = schema_facet
        self._attribute_names = attribute_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchGetObjectAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchGetObjectAttributes of this BatchGetObjectAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_reference(self):
        """Gets the object_reference of this BatchGetObjectAttributes.


        :return: The object_reference of this BatchGetObjectAttributes.
        :rtype: BatchGetObjectAttributesObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this BatchGetObjectAttributes.


        :param object_reference: The object_reference of this BatchGetObjectAttributes.
        :type object_reference: BatchGetObjectAttributesObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference

    @property
    def schema_facet(self):
        """Gets the schema_facet of this BatchGetObjectAttributes.


        :return: The schema_facet of this BatchGetObjectAttributes.
        :rtype: BatchGetObjectAttributesSchemaFacet
        """
        return self._schema_facet

    @schema_facet.setter
    def schema_facet(self, schema_facet):
        """Sets the schema_facet of this BatchGetObjectAttributes.


        :param schema_facet: The schema_facet of this BatchGetObjectAttributes.
        :type schema_facet: BatchGetObjectAttributesSchemaFacet
        """
        if schema_facet is None:
            raise ValueError("Invalid value for `schema_facet`, must not be `None`")

        self._schema_facet = schema_facet

    @property
    def attribute_names(self):
        """Gets the attribute_names of this BatchGetObjectAttributes.


        :return: The attribute_names of this BatchGetObjectAttributes.
        :rtype: List
        """
        return self._attribute_names

    @attribute_names.setter
    def attribute_names(self, attribute_names):
        """Sets the attribute_names of this BatchGetObjectAttributes.


        :param attribute_names: The attribute_names of this BatchGetObjectAttributes.
        :type attribute_names: List
        """
        if attribute_names is None:
            raise ValueError("Invalid value for `attribute_names`, must not be `None`")

        self._attribute_names = attribute_names
