# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.typed_link_facet_attribute_update import TypedLinkFacetAttributeUpdate
import re
from openapi_server import util


class UpdateTypedLinkFacetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, attribute_updates: List[TypedLinkFacetAttributeUpdate]=None, identity_attribute_order: List[str]=None):
        """UpdateTypedLinkFacetRequest - a model defined in OpenAPI

        :param name: The name of this UpdateTypedLinkFacetRequest.
        :param attribute_updates: The attribute_updates of this UpdateTypedLinkFacetRequest.
        :param identity_attribute_order: The identity_attribute_order of this UpdateTypedLinkFacetRequest.
        """
        self.openapi_types = {
            'name': str,
            'attribute_updates': List[TypedLinkFacetAttributeUpdate],
            'identity_attribute_order': List[str]
        }

        self.attribute_map = {
            'name': 'Name',
            'attribute_updates': 'AttributeUpdates',
            'identity_attribute_order': 'IdentityAttributeOrder'
        }

        self._name = name
        self._attribute_updates = attribute_updates
        self._identity_attribute_order = identity_attribute_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateTypedLinkFacetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateTypedLinkFacet_request of this UpdateTypedLinkFacetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateTypedLinkFacetRequest.

        The unique name of the typed link facet.

        :return: The name of this UpdateTypedLinkFacetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateTypedLinkFacetRequest.

        The unique name of the typed link facet.

        :param name: The name of this UpdateTypedLinkFacetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and not re.search(r'^[a-zA-Z0-9._-]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._name = name

    @property
    def attribute_updates(self):
        """Gets the attribute_updates of this UpdateTypedLinkFacetRequest.

        Attributes update structure.

        :return: The attribute_updates of this UpdateTypedLinkFacetRequest.
        :rtype: List[TypedLinkFacetAttributeUpdate]
        """
        return self._attribute_updates

    @attribute_updates.setter
    def attribute_updates(self, attribute_updates):
        """Sets the attribute_updates of this UpdateTypedLinkFacetRequest.

        Attributes update structure.

        :param attribute_updates: The attribute_updates of this UpdateTypedLinkFacetRequest.
        :type attribute_updates: List[TypedLinkFacetAttributeUpdate]
        """
        if attribute_updates is None:
            raise ValueError("Invalid value for `attribute_updates`, must not be `None`")

        self._attribute_updates = attribute_updates

    @property
    def identity_attribute_order(self):
        """Gets the identity_attribute_order of this UpdateTypedLinkFacetRequest.

        The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\">Typed link</a>.

        :return: The identity_attribute_order of this UpdateTypedLinkFacetRequest.
        :rtype: List[str]
        """
        return self._identity_attribute_order

    @identity_attribute_order.setter
    def identity_attribute_order(self, identity_attribute_order):
        """Sets the identity_attribute_order of this UpdateTypedLinkFacetRequest.

        The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\">Typed link</a>.

        :param identity_attribute_order: The identity_attribute_order of this UpdateTypedLinkFacetRequest.
        :type identity_attribute_order: List[str]
        """
        if identity_attribute_order is None:
            raise ValueError("Invalid value for `identity_attribute_order`, must not be `None`")

        self._identity_attribute_order = identity_attribute_order
