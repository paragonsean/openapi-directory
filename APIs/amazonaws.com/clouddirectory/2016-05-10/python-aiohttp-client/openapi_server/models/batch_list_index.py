# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_list_index_index_reference import BatchListIndexIndexReference
from openapi_server import util


class BatchListIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ranges_on_indexed_values: List=None, index_reference: BatchListIndexIndexReference=None, max_results: int=None, next_token: str=None):
        """BatchListIndex - a model defined in OpenAPI

        :param ranges_on_indexed_values: The ranges_on_indexed_values of this BatchListIndex.
        :param index_reference: The index_reference of this BatchListIndex.
        :param max_results: The max_results of this BatchListIndex.
        :param next_token: The next_token of this BatchListIndex.
        """
        self.openapi_types = {
            'ranges_on_indexed_values': List,
            'index_reference': BatchListIndexIndexReference,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'ranges_on_indexed_values': 'RangesOnIndexedValues',
            'index_reference': 'IndexReference',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._ranges_on_indexed_values = ranges_on_indexed_values
        self._index_reference = index_reference
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchListIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchListIndex of this BatchListIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ranges_on_indexed_values(self):
        """Gets the ranges_on_indexed_values of this BatchListIndex.


        :return: The ranges_on_indexed_values of this BatchListIndex.
        :rtype: List
        """
        return self._ranges_on_indexed_values

    @ranges_on_indexed_values.setter
    def ranges_on_indexed_values(self, ranges_on_indexed_values):
        """Sets the ranges_on_indexed_values of this BatchListIndex.


        :param ranges_on_indexed_values: The ranges_on_indexed_values of this BatchListIndex.
        :type ranges_on_indexed_values: List
        """

        self._ranges_on_indexed_values = ranges_on_indexed_values

    @property
    def index_reference(self):
        """Gets the index_reference of this BatchListIndex.


        :return: The index_reference of this BatchListIndex.
        :rtype: BatchListIndexIndexReference
        """
        return self._index_reference

    @index_reference.setter
    def index_reference(self, index_reference):
        """Sets the index_reference of this BatchListIndex.


        :param index_reference: The index_reference of this BatchListIndex.
        :type index_reference: BatchListIndexIndexReference
        """
        if index_reference is None:
            raise ValueError("Invalid value for `index_reference`, must not be `None`")

        self._index_reference = index_reference

    @property
    def max_results(self):
        """Gets the max_results of this BatchListIndex.


        :return: The max_results of this BatchListIndex.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this BatchListIndex.


        :param max_results: The max_results of this BatchListIndex.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this BatchListIndex.


        :return: The next_token of this BatchListIndex.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this BatchListIndex.


        :param next_token: The next_token of this BatchListIndex.
        :type next_token: str
        """

        self._next_token = next_token
