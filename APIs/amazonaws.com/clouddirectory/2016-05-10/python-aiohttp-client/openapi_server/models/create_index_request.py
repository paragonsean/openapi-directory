# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_facet_to_object_request_object_reference import AddFacetToObjectRequestObjectReference
from openapi_server.models.attribute_key import AttributeKey
import re
from openapi_server import util


class CreateIndexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ordered_indexed_attribute_list: List[AttributeKey]=None, is_unique: bool=None, parent_reference: AddFacetToObjectRequestObjectReference=None, link_name: str=None):
        """CreateIndexRequest - a model defined in OpenAPI

        :param ordered_indexed_attribute_list: The ordered_indexed_attribute_list of this CreateIndexRequest.
        :param is_unique: The is_unique of this CreateIndexRequest.
        :param parent_reference: The parent_reference of this CreateIndexRequest.
        :param link_name: The link_name of this CreateIndexRequest.
        """
        self.openapi_types = {
            'ordered_indexed_attribute_list': List[AttributeKey],
            'is_unique': bool,
            'parent_reference': AddFacetToObjectRequestObjectReference,
            'link_name': str
        }

        self.attribute_map = {
            'ordered_indexed_attribute_list': 'OrderedIndexedAttributeList',
            'is_unique': 'IsUnique',
            'parent_reference': 'ParentReference',
            'link_name': 'LinkName'
        }

        self._ordered_indexed_attribute_list = ordered_indexed_attribute_list
        self._is_unique = is_unique
        self._parent_reference = parent_reference
        self._link_name = link_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIndexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIndex_request of this CreateIndexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ordered_indexed_attribute_list(self):
        """Gets the ordered_indexed_attribute_list of this CreateIndexRequest.

        Specifies the attributes that should be indexed on. Currently only a single attribute is supported.

        :return: The ordered_indexed_attribute_list of this CreateIndexRequest.
        :rtype: List[AttributeKey]
        """
        return self._ordered_indexed_attribute_list

    @ordered_indexed_attribute_list.setter
    def ordered_indexed_attribute_list(self, ordered_indexed_attribute_list):
        """Sets the ordered_indexed_attribute_list of this CreateIndexRequest.

        Specifies the attributes that should be indexed on. Currently only a single attribute is supported.

        :param ordered_indexed_attribute_list: The ordered_indexed_attribute_list of this CreateIndexRequest.
        :type ordered_indexed_attribute_list: List[AttributeKey]
        """
        if ordered_indexed_attribute_list is None:
            raise ValueError("Invalid value for `ordered_indexed_attribute_list`, must not be `None`")

        self._ordered_indexed_attribute_list = ordered_indexed_attribute_list

    @property
    def is_unique(self):
        """Gets the is_unique of this CreateIndexRequest.

        Indicates whether the attribute that is being indexed has unique values or not.

        :return: The is_unique of this CreateIndexRequest.
        :rtype: bool
        """
        return self._is_unique

    @is_unique.setter
    def is_unique(self, is_unique):
        """Sets the is_unique of this CreateIndexRequest.

        Indicates whether the attribute that is being indexed has unique values or not.

        :param is_unique: The is_unique of this CreateIndexRequest.
        :type is_unique: bool
        """
        if is_unique is None:
            raise ValueError("Invalid value for `is_unique`, must not be `None`")

        self._is_unique = is_unique

    @property
    def parent_reference(self):
        """Gets the parent_reference of this CreateIndexRequest.


        :return: The parent_reference of this CreateIndexRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._parent_reference

    @parent_reference.setter
    def parent_reference(self, parent_reference):
        """Sets the parent_reference of this CreateIndexRequest.


        :param parent_reference: The parent_reference of this CreateIndexRequest.
        :type parent_reference: AddFacetToObjectRequestObjectReference
        """

        self._parent_reference = parent_reference

    @property
    def link_name(self):
        """Gets the link_name of this CreateIndexRequest.

        The name of the link between the parent object and the index object.

        :return: The link_name of this CreateIndexRequest.
        :rtype: str
        """
        return self._link_name

    @link_name.setter
    def link_name(self, link_name):
        """Sets the link_name of this CreateIndexRequest.

        The name of the link between the parent object and the index object.

        :param link_name: The link_name of this CreateIndexRequest.
        :type link_name: str
        """
        if link_name is not None and len(link_name) > 64:
            raise ValueError("Invalid value for `link_name`, length must be less than or equal to `64`")
        if link_name is not None and len(link_name) < 1:
            raise ValueError("Invalid value for `link_name`, length must be greater than or equal to `1`")
        if link_name is not None and not re.search(r'[^\/\[\]\(\):\{\}#@!?\s\\;]+', link_name):
            raise ValueError("Invalid value for `link_name`, must be a follow pattern or equal to `/[^\/\[\]\(\):\{\}#@!?\s\\;]+/`")

        self._link_name = link_name
