# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_facet_to_object_request_object_reference import AddFacetToObjectRequestObjectReference
from openapi_server.models.add_facet_to_object_request_schema_facet import AddFacetToObjectRequestSchemaFacet
from openapi_server import util


class RemoveFacetFromObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schema_facet: AddFacetToObjectRequestSchemaFacet=None, object_reference: AddFacetToObjectRequestObjectReference=None):
        """RemoveFacetFromObjectRequest - a model defined in OpenAPI

        :param schema_facet: The schema_facet of this RemoveFacetFromObjectRequest.
        :param object_reference: The object_reference of this RemoveFacetFromObjectRequest.
        """
        self.openapi_types = {
            'schema_facet': AddFacetToObjectRequestSchemaFacet,
            'object_reference': AddFacetToObjectRequestObjectReference
        }

        self.attribute_map = {
            'schema_facet': 'SchemaFacet',
            'object_reference': 'ObjectReference'
        }

        self._schema_facet = schema_facet
        self._object_reference = object_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveFacetFromObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveFacetFromObject_request of this RemoveFacetFromObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_facet(self):
        """Gets the schema_facet of this RemoveFacetFromObjectRequest.


        :return: The schema_facet of this RemoveFacetFromObjectRequest.
        :rtype: AddFacetToObjectRequestSchemaFacet
        """
        return self._schema_facet

    @schema_facet.setter
    def schema_facet(self, schema_facet):
        """Sets the schema_facet of this RemoveFacetFromObjectRequest.


        :param schema_facet: The schema_facet of this RemoveFacetFromObjectRequest.
        :type schema_facet: AddFacetToObjectRequestSchemaFacet
        """
        if schema_facet is None:
            raise ValueError("Invalid value for `schema_facet`, must not be `None`")

        self._schema_facet = schema_facet

    @property
    def object_reference(self):
        """Gets the object_reference of this RemoveFacetFromObjectRequest.


        :return: The object_reference of this RemoveFacetFromObjectRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this RemoveFacetFromObjectRequest.


        :param object_reference: The object_reference of this RemoveFacetFromObjectRequest.
        :type object_reference: AddFacetToObjectRequestObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference
