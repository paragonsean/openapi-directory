# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_facet_to_object_request_object_reference import AddFacetToObjectRequestObjectReference
from openapi_server.models.attach_typed_link_request_typed_link_facet import AttachTypedLinkRequestTypedLinkFacet
from openapi_server.models.attribute_name_and_value import AttributeNameAndValue
from openapi_server import util


class AttachTypedLinkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_object_reference: AddFacetToObjectRequestObjectReference=None, target_object_reference: AddFacetToObjectRequestObjectReference=None, typed_link_facet: AttachTypedLinkRequestTypedLinkFacet=None, attributes: List[AttributeNameAndValue]=None):
        """AttachTypedLinkRequest - a model defined in OpenAPI

        :param source_object_reference: The source_object_reference of this AttachTypedLinkRequest.
        :param target_object_reference: The target_object_reference of this AttachTypedLinkRequest.
        :param typed_link_facet: The typed_link_facet of this AttachTypedLinkRequest.
        :param attributes: The attributes of this AttachTypedLinkRequest.
        """
        self.openapi_types = {
            'source_object_reference': AddFacetToObjectRequestObjectReference,
            'target_object_reference': AddFacetToObjectRequestObjectReference,
            'typed_link_facet': AttachTypedLinkRequestTypedLinkFacet,
            'attributes': List[AttributeNameAndValue]
        }

        self.attribute_map = {
            'source_object_reference': 'SourceObjectReference',
            'target_object_reference': 'TargetObjectReference',
            'typed_link_facet': 'TypedLinkFacet',
            'attributes': 'Attributes'
        }

        self._source_object_reference = source_object_reference
        self._target_object_reference = target_object_reference
        self._typed_link_facet = typed_link_facet
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachTypedLinkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachTypedLink_request of this AttachTypedLinkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_object_reference(self):
        """Gets the source_object_reference of this AttachTypedLinkRequest.


        :return: The source_object_reference of this AttachTypedLinkRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._source_object_reference

    @source_object_reference.setter
    def source_object_reference(self, source_object_reference):
        """Sets the source_object_reference of this AttachTypedLinkRequest.


        :param source_object_reference: The source_object_reference of this AttachTypedLinkRequest.
        :type source_object_reference: AddFacetToObjectRequestObjectReference
        """
        if source_object_reference is None:
            raise ValueError("Invalid value for `source_object_reference`, must not be `None`")

        self._source_object_reference = source_object_reference

    @property
    def target_object_reference(self):
        """Gets the target_object_reference of this AttachTypedLinkRequest.


        :return: The target_object_reference of this AttachTypedLinkRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._target_object_reference

    @target_object_reference.setter
    def target_object_reference(self, target_object_reference):
        """Sets the target_object_reference of this AttachTypedLinkRequest.


        :param target_object_reference: The target_object_reference of this AttachTypedLinkRequest.
        :type target_object_reference: AddFacetToObjectRequestObjectReference
        """
        if target_object_reference is None:
            raise ValueError("Invalid value for `target_object_reference`, must not be `None`")

        self._target_object_reference = target_object_reference

    @property
    def typed_link_facet(self):
        """Gets the typed_link_facet of this AttachTypedLinkRequest.


        :return: The typed_link_facet of this AttachTypedLinkRequest.
        :rtype: AttachTypedLinkRequestTypedLinkFacet
        """
        return self._typed_link_facet

    @typed_link_facet.setter
    def typed_link_facet(self, typed_link_facet):
        """Sets the typed_link_facet of this AttachTypedLinkRequest.


        :param typed_link_facet: The typed_link_facet of this AttachTypedLinkRequest.
        :type typed_link_facet: AttachTypedLinkRequestTypedLinkFacet
        """
        if typed_link_facet is None:
            raise ValueError("Invalid value for `typed_link_facet`, must not be `None`")

        self._typed_link_facet = typed_link_facet

    @property
    def attributes(self):
        """Gets the attributes of this AttachTypedLinkRequest.

        A set of attributes that are associated with the typed link.

        :return: The attributes of this AttachTypedLinkRequest.
        :rtype: List[AttributeNameAndValue]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this AttachTypedLinkRequest.

        A set of attributes that are associated with the typed link.

        :param attributes: The attributes of this AttachTypedLinkRequest.
        :type attributes: List[AttributeNameAndValue]
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes
