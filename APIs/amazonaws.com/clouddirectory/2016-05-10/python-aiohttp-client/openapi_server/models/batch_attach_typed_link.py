# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.detach_typed_link_request_typed_link_specifier_source_object_reference import DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference
from openapi_server.models.detach_typed_link_request_typed_link_specifier_target_object_reference import DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference
from openapi_server.models.detach_typed_link_request_typed_link_specifier_typed_link_facet import DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet
from openapi_server import util


class BatchAttachTypedLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_object_reference: DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference=None, target_object_reference: DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference=None, typed_link_facet: DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet=None, attributes: List=None):
        """BatchAttachTypedLink - a model defined in OpenAPI

        :param source_object_reference: The source_object_reference of this BatchAttachTypedLink.
        :param target_object_reference: The target_object_reference of this BatchAttachTypedLink.
        :param typed_link_facet: The typed_link_facet of this BatchAttachTypedLink.
        :param attributes: The attributes of this BatchAttachTypedLink.
        """
        self.openapi_types = {
            'source_object_reference': DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference,
            'target_object_reference': DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference,
            'typed_link_facet': DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet,
            'attributes': List
        }

        self.attribute_map = {
            'source_object_reference': 'SourceObjectReference',
            'target_object_reference': 'TargetObjectReference',
            'typed_link_facet': 'TypedLinkFacet',
            'attributes': 'Attributes'
        }

        self._source_object_reference = source_object_reference
        self._target_object_reference = target_object_reference
        self._typed_link_facet = typed_link_facet
        self._attributes = attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchAttachTypedLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchAttachTypedLink of this BatchAttachTypedLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_object_reference(self):
        """Gets the source_object_reference of this BatchAttachTypedLink.


        :return: The source_object_reference of this BatchAttachTypedLink.
        :rtype: DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference
        """
        return self._source_object_reference

    @source_object_reference.setter
    def source_object_reference(self, source_object_reference):
        """Sets the source_object_reference of this BatchAttachTypedLink.


        :param source_object_reference: The source_object_reference of this BatchAttachTypedLink.
        :type source_object_reference: DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference
        """
        if source_object_reference is None:
            raise ValueError("Invalid value for `source_object_reference`, must not be `None`")

        self._source_object_reference = source_object_reference

    @property
    def target_object_reference(self):
        """Gets the target_object_reference of this BatchAttachTypedLink.


        :return: The target_object_reference of this BatchAttachTypedLink.
        :rtype: DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference
        """
        return self._target_object_reference

    @target_object_reference.setter
    def target_object_reference(self, target_object_reference):
        """Sets the target_object_reference of this BatchAttachTypedLink.


        :param target_object_reference: The target_object_reference of this BatchAttachTypedLink.
        :type target_object_reference: DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference
        """
        if target_object_reference is None:
            raise ValueError("Invalid value for `target_object_reference`, must not be `None`")

        self._target_object_reference = target_object_reference

    @property
    def typed_link_facet(self):
        """Gets the typed_link_facet of this BatchAttachTypedLink.


        :return: The typed_link_facet of this BatchAttachTypedLink.
        :rtype: DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet
        """
        return self._typed_link_facet

    @typed_link_facet.setter
    def typed_link_facet(self, typed_link_facet):
        """Sets the typed_link_facet of this BatchAttachTypedLink.


        :param typed_link_facet: The typed_link_facet of this BatchAttachTypedLink.
        :type typed_link_facet: DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet
        """
        if typed_link_facet is None:
            raise ValueError("Invalid value for `typed_link_facet`, must not be `None`")

        self._typed_link_facet = typed_link_facet

    @property
    def attributes(self):
        """Gets the attributes of this BatchAttachTypedLink.


        :return: The attributes of this BatchAttachTypedLink.
        :rtype: List
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this BatchAttachTypedLink.


        :param attributes: The attributes of this BatchAttachTypedLink.
        :type attributes: List
        """
        if attributes is None:
            raise ValueError("Invalid value for `attributes`, must not be `None`")

        self._attributes = attributes
