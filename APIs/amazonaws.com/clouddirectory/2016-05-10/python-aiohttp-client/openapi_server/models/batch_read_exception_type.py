# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchReadExceptionType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    VALIDATIONEXCEPTION = 'ValidationException'
    INVALIDARNEXCEPTION = 'InvalidArnException'
    RESOURCENOTFOUNDEXCEPTION = 'ResourceNotFoundException'
    INVALIDNEXTTOKENEXCEPTION = 'InvalidNextTokenException'
    ACCESSDENIEDEXCEPTION = 'AccessDeniedException'
    NOTNODEEXCEPTION = 'NotNodeException'
    FACETVALIDATIONEXCEPTION = 'FacetValidationException'
    CANNOTLISTPARENTOFROOTEXCEPTION = 'CannotListParentOfRootException'
    NOTINDEXEXCEPTION = 'NotIndexException'
    NOTPOLICYEXCEPTION = 'NotPolicyException'
    DIRECTORYNOTENABLEDEXCEPTION = 'DirectoryNotEnabledException'
    LIMITEXCEEDEDEXCEPTION = 'LimitExceededException'
    INTERNALSERVICEEXCEPTION = 'InternalServiceException'

    def __init__(self):
        """BatchReadExceptionType - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchReadExceptionType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchReadExceptionType of this BatchReadExceptionType.
        """
        return util.deserialize_model(dikt, cls)
