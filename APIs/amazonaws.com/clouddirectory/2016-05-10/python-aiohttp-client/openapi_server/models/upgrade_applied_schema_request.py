# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpgradeAppliedSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, published_schema_arn: str=None, directory_arn: str=None, dry_run: bool=None):
        """UpgradeAppliedSchemaRequest - a model defined in OpenAPI

        :param published_schema_arn: The published_schema_arn of this UpgradeAppliedSchemaRequest.
        :param directory_arn: The directory_arn of this UpgradeAppliedSchemaRequest.
        :param dry_run: The dry_run of this UpgradeAppliedSchemaRequest.
        """
        self.openapi_types = {
            'published_schema_arn': str,
            'directory_arn': str,
            'dry_run': bool
        }

        self.attribute_map = {
            'published_schema_arn': 'PublishedSchemaArn',
            'directory_arn': 'DirectoryArn',
            'dry_run': 'DryRun'
        }

        self._published_schema_arn = published_schema_arn
        self._directory_arn = directory_arn
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeAppliedSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeAppliedSchema_request of this UpgradeAppliedSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def published_schema_arn(self):
        """Gets the published_schema_arn of this UpgradeAppliedSchemaRequest.

        The revision of the published schema to upgrade the directory to.

        :return: The published_schema_arn of this UpgradeAppliedSchemaRequest.
        :rtype: str
        """
        return self._published_schema_arn

    @published_schema_arn.setter
    def published_schema_arn(self, published_schema_arn):
        """Sets the published_schema_arn of this UpgradeAppliedSchemaRequest.

        The revision of the published schema to upgrade the directory to.

        :param published_schema_arn: The published_schema_arn of this UpgradeAppliedSchemaRequest.
        :type published_schema_arn: str
        """
        if published_schema_arn is None:
            raise ValueError("Invalid value for `published_schema_arn`, must not be `None`")

        self._published_schema_arn = published_schema_arn

    @property
    def directory_arn(self):
        """Gets the directory_arn of this UpgradeAppliedSchemaRequest.

        The ARN for the directory to which the upgraded schema will be applied.

        :return: The directory_arn of this UpgradeAppliedSchemaRequest.
        :rtype: str
        """
        return self._directory_arn

    @directory_arn.setter
    def directory_arn(self, directory_arn):
        """Sets the directory_arn of this UpgradeAppliedSchemaRequest.

        The ARN for the directory to which the upgraded schema will be applied.

        :param directory_arn: The directory_arn of this UpgradeAppliedSchemaRequest.
        :type directory_arn: str
        """
        if directory_arn is None:
            raise ValueError("Invalid value for `directory_arn`, must not be `None`")

        self._directory_arn = directory_arn

    @property
    def dry_run(self):
        """Gets the dry_run of this UpgradeAppliedSchemaRequest.

        Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.

        :return: The dry_run of this UpgradeAppliedSchemaRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this UpgradeAppliedSchemaRequest.

        Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.

        :param dry_run: The dry_run of this UpgradeAppliedSchemaRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run
