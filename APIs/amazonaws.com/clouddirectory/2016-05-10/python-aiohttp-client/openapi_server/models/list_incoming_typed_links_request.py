# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_facet_to_object_request_object_reference import AddFacetToObjectRequestObjectReference
from openapi_server.models.attach_typed_link_request_typed_link_facet import AttachTypedLinkRequestTypedLinkFacet
from openapi_server.models.typed_link_attribute_range import TypedLinkAttributeRange
from openapi_server import util


class ListIncomingTypedLinksRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_reference: AddFacetToObjectRequestObjectReference=None, filter_attribute_ranges: List[TypedLinkAttributeRange]=None, filter_typed_link: AttachTypedLinkRequestTypedLinkFacet=None, next_token: str=None, max_results: int=None, consistency_level: str=None):
        """ListIncomingTypedLinksRequest - a model defined in OpenAPI

        :param object_reference: The object_reference of this ListIncomingTypedLinksRequest.
        :param filter_attribute_ranges: The filter_attribute_ranges of this ListIncomingTypedLinksRequest.
        :param filter_typed_link: The filter_typed_link of this ListIncomingTypedLinksRequest.
        :param next_token: The next_token of this ListIncomingTypedLinksRequest.
        :param max_results: The max_results of this ListIncomingTypedLinksRequest.
        :param consistency_level: The consistency_level of this ListIncomingTypedLinksRequest.
        """
        self.openapi_types = {
            'object_reference': AddFacetToObjectRequestObjectReference,
            'filter_attribute_ranges': List[TypedLinkAttributeRange],
            'filter_typed_link': AttachTypedLinkRequestTypedLinkFacet,
            'next_token': str,
            'max_results': int,
            'consistency_level': str
        }

        self.attribute_map = {
            'object_reference': 'ObjectReference',
            'filter_attribute_ranges': 'FilterAttributeRanges',
            'filter_typed_link': 'FilterTypedLink',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'consistency_level': 'ConsistencyLevel'
        }

        self._object_reference = object_reference
        self._filter_attribute_ranges = filter_attribute_ranges
        self._filter_typed_link = filter_typed_link
        self._next_token = next_token
        self._max_results = max_results
        self._consistency_level = consistency_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListIncomingTypedLinksRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListIncomingTypedLinks_request of this ListIncomingTypedLinksRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_reference(self):
        """Gets the object_reference of this ListIncomingTypedLinksRequest.


        :return: The object_reference of this ListIncomingTypedLinksRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this ListIncomingTypedLinksRequest.


        :param object_reference: The object_reference of this ListIncomingTypedLinksRequest.
        :type object_reference: AddFacetToObjectRequestObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference

    @property
    def filter_attribute_ranges(self):
        """Gets the filter_attribute_ranges of this ListIncomingTypedLinksRequest.

        Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.

        :return: The filter_attribute_ranges of this ListIncomingTypedLinksRequest.
        :rtype: List[TypedLinkAttributeRange]
        """
        return self._filter_attribute_ranges

    @filter_attribute_ranges.setter
    def filter_attribute_ranges(self, filter_attribute_ranges):
        """Sets the filter_attribute_ranges of this ListIncomingTypedLinksRequest.

        Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.

        :param filter_attribute_ranges: The filter_attribute_ranges of this ListIncomingTypedLinksRequest.
        :type filter_attribute_ranges: List[TypedLinkAttributeRange]
        """

        self._filter_attribute_ranges = filter_attribute_ranges

    @property
    def filter_typed_link(self):
        """Gets the filter_typed_link of this ListIncomingTypedLinksRequest.


        :return: The filter_typed_link of this ListIncomingTypedLinksRequest.
        :rtype: AttachTypedLinkRequestTypedLinkFacet
        """
        return self._filter_typed_link

    @filter_typed_link.setter
    def filter_typed_link(self, filter_typed_link):
        """Sets the filter_typed_link of this ListIncomingTypedLinksRequest.


        :param filter_typed_link: The filter_typed_link of this ListIncomingTypedLinksRequest.
        :type filter_typed_link: AttachTypedLinkRequestTypedLinkFacet
        """

        self._filter_typed_link = filter_typed_link

    @property
    def next_token(self):
        """Gets the next_token of this ListIncomingTypedLinksRequest.

        The pagination token.

        :return: The next_token of this ListIncomingTypedLinksRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListIncomingTypedLinksRequest.

        The pagination token.

        :param next_token: The next_token of this ListIncomingTypedLinksRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListIncomingTypedLinksRequest.

        The maximum number of results to retrieve.

        :return: The max_results of this ListIncomingTypedLinksRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListIncomingTypedLinksRequest.

        The maximum number of results to retrieve.

        :param max_results: The max_results of this ListIncomingTypedLinksRequest.
        :type max_results: int
        """
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def consistency_level(self):
        """Gets the consistency_level of this ListIncomingTypedLinksRequest.

        The consistency level to execute the request at.

        :return: The consistency_level of this ListIncomingTypedLinksRequest.
        :rtype: str
        """
        return self._consistency_level

    @consistency_level.setter
    def consistency_level(self, consistency_level):
        """Sets the consistency_level of this ListIncomingTypedLinksRequest.

        The consistency level to execute the request at.

        :param consistency_level: The consistency_level of this ListIncomingTypedLinksRequest.
        :type consistency_level: str
        """
        allowed_values = ["SERIALIZABLE", "EVENTUAL"]  # noqa: E501
        if consistency_level not in allowed_values:
            raise ValueError(
                "Invalid value for `consistency_level` ({0}), must be one of {1}"
                .format(consistency_level, allowed_values)
            )

        self._consistency_level = consistency_level
