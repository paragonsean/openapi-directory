# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_update_object_attributes_object_reference import BatchUpdateObjectAttributesObjectReference
from openapi_server import util


class BatchUpdateObjectAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_reference: BatchUpdateObjectAttributesObjectReference=None, attribute_updates: List=None):
        """BatchUpdateObjectAttributes - a model defined in OpenAPI

        :param object_reference: The object_reference of this BatchUpdateObjectAttributes.
        :param attribute_updates: The attribute_updates of this BatchUpdateObjectAttributes.
        """
        self.openapi_types = {
            'object_reference': BatchUpdateObjectAttributesObjectReference,
            'attribute_updates': List
        }

        self.attribute_map = {
            'object_reference': 'ObjectReference',
            'attribute_updates': 'AttributeUpdates'
        }

        self._object_reference = object_reference
        self._attribute_updates = attribute_updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateObjectAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateObjectAttributes of this BatchUpdateObjectAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_reference(self):
        """Gets the object_reference of this BatchUpdateObjectAttributes.


        :return: The object_reference of this BatchUpdateObjectAttributes.
        :rtype: BatchUpdateObjectAttributesObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this BatchUpdateObjectAttributes.


        :param object_reference: The object_reference of this BatchUpdateObjectAttributes.
        :type object_reference: BatchUpdateObjectAttributesObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference

    @property
    def attribute_updates(self):
        """Gets the attribute_updates of this BatchUpdateObjectAttributes.


        :return: The attribute_updates of this BatchUpdateObjectAttributes.
        :rtype: List
        """
        return self._attribute_updates

    @attribute_updates.setter
    def attribute_updates(self, attribute_updates):
        """Sets the attribute_updates of this BatchUpdateObjectAttributes.


        :param attribute_updates: The attribute_updates of this BatchUpdateObjectAttributes.
        :type attribute_updates: List
        """
        if attribute_updates is None:
            raise ValueError("Invalid value for `attribute_updates`, must not be `None`")

        self._attribute_updates = attribute_updates
