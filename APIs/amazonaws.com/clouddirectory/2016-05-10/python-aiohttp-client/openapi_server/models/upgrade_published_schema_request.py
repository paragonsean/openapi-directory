# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpgradePublishedSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, development_schema_arn: str=None, published_schema_arn: str=None, minor_version: str=None, dry_run: bool=None):
        """UpgradePublishedSchemaRequest - a model defined in OpenAPI

        :param development_schema_arn: The development_schema_arn of this UpgradePublishedSchemaRequest.
        :param published_schema_arn: The published_schema_arn of this UpgradePublishedSchemaRequest.
        :param minor_version: The minor_version of this UpgradePublishedSchemaRequest.
        :param dry_run: The dry_run of this UpgradePublishedSchemaRequest.
        """
        self.openapi_types = {
            'development_schema_arn': str,
            'published_schema_arn': str,
            'minor_version': str,
            'dry_run': bool
        }

        self.attribute_map = {
            'development_schema_arn': 'DevelopmentSchemaArn',
            'published_schema_arn': 'PublishedSchemaArn',
            'minor_version': 'MinorVersion',
            'dry_run': 'DryRun'
        }

        self._development_schema_arn = development_schema_arn
        self._published_schema_arn = published_schema_arn
        self._minor_version = minor_version
        self._dry_run = dry_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradePublishedSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradePublishedSchema_request of this UpgradePublishedSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def development_schema_arn(self):
        """Gets the development_schema_arn of this UpgradePublishedSchemaRequest.

        The ARN of the development schema with the changes used for the upgrade.

        :return: The development_schema_arn of this UpgradePublishedSchemaRequest.
        :rtype: str
        """
        return self._development_schema_arn

    @development_schema_arn.setter
    def development_schema_arn(self, development_schema_arn):
        """Sets the development_schema_arn of this UpgradePublishedSchemaRequest.

        The ARN of the development schema with the changes used for the upgrade.

        :param development_schema_arn: The development_schema_arn of this UpgradePublishedSchemaRequest.
        :type development_schema_arn: str
        """
        if development_schema_arn is None:
            raise ValueError("Invalid value for `development_schema_arn`, must not be `None`")

        self._development_schema_arn = development_schema_arn

    @property
    def published_schema_arn(self):
        """Gets the published_schema_arn of this UpgradePublishedSchemaRequest.

        The ARN of the published schema to be upgraded.

        :return: The published_schema_arn of this UpgradePublishedSchemaRequest.
        :rtype: str
        """
        return self._published_schema_arn

    @published_schema_arn.setter
    def published_schema_arn(self, published_schema_arn):
        """Sets the published_schema_arn of this UpgradePublishedSchemaRequest.

        The ARN of the published schema to be upgraded.

        :param published_schema_arn: The published_schema_arn of this UpgradePublishedSchemaRequest.
        :type published_schema_arn: str
        """
        if published_schema_arn is None:
            raise ValueError("Invalid value for `published_schema_arn`, must not be `None`")

        self._published_schema_arn = published_schema_arn

    @property
    def minor_version(self):
        """Gets the minor_version of this UpgradePublishedSchemaRequest.

        Identifies the minor version of the published schema that will be created. This parameter is NOT optional.

        :return: The minor_version of this UpgradePublishedSchemaRequest.
        :rtype: str
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this UpgradePublishedSchemaRequest.

        Identifies the minor version of the published schema that will be created. This parameter is NOT optional.

        :param minor_version: The minor_version of this UpgradePublishedSchemaRequest.
        :type minor_version: str
        """
        if minor_version is None:
            raise ValueError("Invalid value for `minor_version`, must not be `None`")
        if minor_version is not None and len(minor_version) > 10:
            raise ValueError("Invalid value for `minor_version`, length must be less than or equal to `10`")
        if minor_version is not None and len(minor_version) < 1:
            raise ValueError("Invalid value for `minor_version`, length must be greater than or equal to `1`")
        if minor_version is not None and not re.search(r'^[a-zA-Z0-9._-]*$', minor_version):
            raise ValueError("Invalid value for `minor_version`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._minor_version = minor_version

    @property
    def dry_run(self):
        """Gets the dry_run of this UpgradePublishedSchemaRequest.

        Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.

        :return: The dry_run of this UpgradePublishedSchemaRequest.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run):
        """Sets the dry_run of this UpgradePublishedSchemaRequest.

        Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.

        :param dry_run: The dry_run of this UpgradePublishedSchemaRequest.
        :type dry_run: bool
        """

        self._dry_run = dry_run
