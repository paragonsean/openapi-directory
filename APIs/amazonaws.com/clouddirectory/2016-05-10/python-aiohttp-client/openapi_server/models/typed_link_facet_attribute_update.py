# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.typed_link_facet_attribute_update_attribute import TypedLinkFacetAttributeUpdateAttribute
from openapi_server.models.update_action_type import UpdateActionType
from openapi_server import util


class TypedLinkFacetAttributeUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: TypedLinkFacetAttributeUpdateAttribute=None, action: UpdateActionType=None):
        """TypedLinkFacetAttributeUpdate - a model defined in OpenAPI

        :param attribute: The attribute of this TypedLinkFacetAttributeUpdate.
        :param action: The action of this TypedLinkFacetAttributeUpdate.
        """
        self.openapi_types = {
            'attribute': TypedLinkFacetAttributeUpdateAttribute,
            'action': UpdateActionType
        }

        self.attribute_map = {
            'attribute': 'Attribute',
            'action': 'Action'
        }

        self._attribute = attribute
        self._action = action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypedLinkFacetAttributeUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypedLinkFacetAttributeUpdate of this TypedLinkFacetAttributeUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this TypedLinkFacetAttributeUpdate.


        :return: The attribute of this TypedLinkFacetAttributeUpdate.
        :rtype: TypedLinkFacetAttributeUpdateAttribute
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this TypedLinkFacetAttributeUpdate.


        :param attribute: The attribute of this TypedLinkFacetAttributeUpdate.
        :type attribute: TypedLinkFacetAttributeUpdateAttribute
        """
        if attribute is None:
            raise ValueError("Invalid value for `attribute`, must not be `None`")

        self._attribute = attribute

    @property
    def action(self):
        """Gets the action of this TypedLinkFacetAttributeUpdate.


        :return: The action of this TypedLinkFacetAttributeUpdate.
        :rtype: UpdateActionType
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TypedLinkFacetAttributeUpdate.


        :param action: The action of this TypedLinkFacetAttributeUpdate.
        :type action: UpdateActionType
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action
