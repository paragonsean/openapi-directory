/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddFacetToObjectRequestObjectReference;
import org.openapitools.client.model.AddFacetToObjectRequestSchemaFacet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetObjectAttributesRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetObjectAttributesRequest {
  public static final String SERIALIZED_NAME_OBJECT_REFERENCE = "ObjectReference";
  @SerializedName(SERIALIZED_NAME_OBJECT_REFERENCE)
  private AddFacetToObjectRequestObjectReference objectReference;

  public static final String SERIALIZED_NAME_SCHEMA_FACET = "SchemaFacet";
  @SerializedName(SERIALIZED_NAME_SCHEMA_FACET)
  private AddFacetToObjectRequestSchemaFacet schemaFacet;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAMES = "AttributeNames";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAMES)
  private List<String> attributeNames = new ArrayList<>();

  public GetObjectAttributesRequest() {
  }

  public GetObjectAttributesRequest objectReference(AddFacetToObjectRequestObjectReference objectReference) {
    this.objectReference = objectReference;
    return this;
  }

  /**
   * Get objectReference
   * @return objectReference
   */
  @javax.annotation.Nonnull
  public AddFacetToObjectRequestObjectReference getObjectReference() {
    return objectReference;
  }

  public void setObjectReference(AddFacetToObjectRequestObjectReference objectReference) {
    this.objectReference = objectReference;
  }


  public GetObjectAttributesRequest schemaFacet(AddFacetToObjectRequestSchemaFacet schemaFacet) {
    this.schemaFacet = schemaFacet;
    return this;
  }

  /**
   * Get schemaFacet
   * @return schemaFacet
   */
  @javax.annotation.Nonnull
  public AddFacetToObjectRequestSchemaFacet getSchemaFacet() {
    return schemaFacet;
  }

  public void setSchemaFacet(AddFacetToObjectRequestSchemaFacet schemaFacet) {
    this.schemaFacet = schemaFacet;
  }


  public GetObjectAttributesRequest attributeNames(List<String> attributeNames) {
    this.attributeNames = attributeNames;
    return this;
  }

  public GetObjectAttributesRequest addAttributeNamesItem(String attributeNamesItem) {
    if (this.attributeNames == null) {
      this.attributeNames = new ArrayList<>();
    }
    this.attributeNames.add(attributeNamesItem);
    return this;
  }

  /**
   * List of attribute names whose values will be retrieved.
   * @return attributeNames
   */
  @javax.annotation.Nonnull
  public List<String> getAttributeNames() {
    return attributeNames;
  }

  public void setAttributeNames(List<String> attributeNames) {
    this.attributeNames = attributeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetObjectAttributesRequest getObjectAttributesRequest = (GetObjectAttributesRequest) o;
    return Objects.equals(this.objectReference, getObjectAttributesRequest.objectReference) &&
        Objects.equals(this.schemaFacet, getObjectAttributesRequest.schemaFacet) &&
        Objects.equals(this.attributeNames, getObjectAttributesRequest.attributeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectReference, schemaFacet, attributeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetObjectAttributesRequest {\n");
    sb.append("    objectReference: ").append(toIndentedString(objectReference)).append("\n");
    sb.append("    schemaFacet: ").append(toIndentedString(schemaFacet)).append("\n");
    sb.append("    attributeNames: ").append(toIndentedString(attributeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObjectReference");
    openapiFields.add("SchemaFacet");
    openapiFields.add("AttributeNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ObjectReference");
    openapiRequiredFields.add("SchemaFacet");
    openapiRequiredFields.add("AttributeNames");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetObjectAttributesRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetObjectAttributesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetObjectAttributesRequest is not found in the empty JSON string", GetObjectAttributesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetObjectAttributesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetObjectAttributesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetObjectAttributesRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ObjectReference`
      AddFacetToObjectRequestObjectReference.validateJsonElement(jsonObj.get("ObjectReference"));
      // validate the required field `SchemaFacet`
      AddFacetToObjectRequestSchemaFacet.validateJsonElement(jsonObj.get("SchemaFacet"));
      // ensure the required json array is present
      if (jsonObj.get("AttributeNames") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("AttributeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeNames` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetObjectAttributesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetObjectAttributesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetObjectAttributesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetObjectAttributesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetObjectAttributesRequest>() {
           @Override
           public void write(JsonWriter out, GetObjectAttributesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetObjectAttributesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetObjectAttributesRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetObjectAttributesRequest
   * @throws IOException if the JSON string is invalid with respect to GetObjectAttributesRequest
   */
  public static GetObjectAttributesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetObjectAttributesRequest.class);
  }

  /**
   * Convert an instance of GetObjectAttributesRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

