/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FacetAttributeUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateFacetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFacetRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ATTRIBUTE_UPDATES = "AttributeUpdates";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_UPDATES)
  private List<FacetAttributeUpdate> attributeUpdates = new ArrayList<>();

  /**
   * The object type that is associated with the facet. See &lt;a&gt;CreateFacetRequest$ObjectType&lt;/a&gt; for more details.
   */
  @JsonAdapter(ObjectTypeEnum.Adapter.class)
  public enum ObjectTypeEnum {
    NODE("NODE"),
    
    LEAF_NODE("LEAF_NODE"),
    
    POLICY("POLICY"),
    
    INDEX("INDEX");

    private String value;

    ObjectTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectTypeEnum fromValue(String value) {
      for (ObjectTypeEnum b : ObjectTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ObjectTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ObjectTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ObjectTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "ObjectType";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private ObjectTypeEnum objectType;

  public UpdateFacetRequest() {
  }

  public UpdateFacetRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the facet.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateFacetRequest attributeUpdates(List<FacetAttributeUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
    return this;
  }

  public UpdateFacetRequest addAttributeUpdatesItem(FacetAttributeUpdate attributeUpdatesItem) {
    if (this.attributeUpdates == null) {
      this.attributeUpdates = new ArrayList<>();
    }
    this.attributeUpdates.add(attributeUpdatesItem);
    return this;
  }

  /**
   * List of attributes that need to be updated in a given schema &lt;a&gt;Facet&lt;/a&gt;. Each attribute is followed by &lt;code&gt;AttributeAction&lt;/code&gt;, which specifies the type of update operation to perform. 
   * @return attributeUpdates
   */
  @javax.annotation.Nullable
  public List<FacetAttributeUpdate> getAttributeUpdates() {
    return attributeUpdates;
  }

  public void setAttributeUpdates(List<FacetAttributeUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
  }


  public UpdateFacetRequest objectType(ObjectTypeEnum objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * The object type that is associated with the facet. See &lt;a&gt;CreateFacetRequest$ObjectType&lt;/a&gt; for more details.
   * @return objectType
   */
  @javax.annotation.Nullable
  public ObjectTypeEnum getObjectType() {
    return objectType;
  }

  public void setObjectType(ObjectTypeEnum objectType) {
    this.objectType = objectType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFacetRequest updateFacetRequest = (UpdateFacetRequest) o;
    return Objects.equals(this.name, updateFacetRequest.name) &&
        Objects.equals(this.attributeUpdates, updateFacetRequest.attributeUpdates) &&
        Objects.equals(this.objectType, updateFacetRequest.objectType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, attributeUpdates, objectType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFacetRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attributeUpdates: ").append(toIndentedString(attributeUpdates)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AttributeUpdates");
    openapiFields.add("ObjectType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFacetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFacetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFacetRequest is not found in the empty JSON string", UpdateFacetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFacetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFacetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateFacetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (jsonObj.get("AttributeUpdates") != null && !jsonObj.get("AttributeUpdates").isJsonNull()) {
        JsonArray jsonArrayattributeUpdates = jsonObj.getAsJsonArray("AttributeUpdates");
        if (jsonArrayattributeUpdates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AttributeUpdates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AttributeUpdates` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeUpdates").toString()));
          }

          // validate the optional field `AttributeUpdates` (array)
          for (int i = 0; i < jsonArrayattributeUpdates.size(); i++) {
            FacetAttributeUpdate.validateJsonElement(jsonArrayattributeUpdates.get(i));
          };
        }
      }
      if ((jsonObj.get("ObjectType") != null && !jsonObj.get("ObjectType").isJsonNull()) && !jsonObj.get("ObjectType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ObjectType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ObjectType").toString()));
      }
      // validate the optional field `ObjectType`
      if (jsonObj.get("ObjectType") != null && !jsonObj.get("ObjectType").isJsonNull()) {
        ObjectTypeEnum.validateJsonElement(jsonObj.get("ObjectType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFacetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFacetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFacetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFacetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFacetRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFacetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFacetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFacetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFacetRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFacetRequest
   */
  public static UpdateFacetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFacetRequest.class);
  }

  /**
   * Convert an instance of UpdateFacetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

