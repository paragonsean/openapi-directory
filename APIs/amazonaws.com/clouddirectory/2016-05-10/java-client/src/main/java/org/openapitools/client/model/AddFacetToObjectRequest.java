/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddFacetToObjectRequestObjectReference;
import org.openapitools.client.model.AddFacetToObjectRequestSchemaFacet;
import org.openapitools.client.model.AttributeKeyAndValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddFacetToObjectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddFacetToObjectRequest {
  public static final String SERIALIZED_NAME_SCHEMA_FACET = "SchemaFacet";
  @SerializedName(SERIALIZED_NAME_SCHEMA_FACET)
  private AddFacetToObjectRequestSchemaFacet schemaFacet;

  public static final String SERIALIZED_NAME_OBJECT_ATTRIBUTE_LIST = "ObjectAttributeList";
  @SerializedName(SERIALIZED_NAME_OBJECT_ATTRIBUTE_LIST)
  private List<AttributeKeyAndValue> objectAttributeList = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT_REFERENCE = "ObjectReference";
  @SerializedName(SERIALIZED_NAME_OBJECT_REFERENCE)
  private AddFacetToObjectRequestObjectReference objectReference;

  public AddFacetToObjectRequest() {
  }

  public AddFacetToObjectRequest schemaFacet(AddFacetToObjectRequestSchemaFacet schemaFacet) {
    this.schemaFacet = schemaFacet;
    return this;
  }

  /**
   * Get schemaFacet
   * @return schemaFacet
   */
  @javax.annotation.Nonnull
  public AddFacetToObjectRequestSchemaFacet getSchemaFacet() {
    return schemaFacet;
  }

  public void setSchemaFacet(AddFacetToObjectRequestSchemaFacet schemaFacet) {
    this.schemaFacet = schemaFacet;
  }


  public AddFacetToObjectRequest objectAttributeList(List<AttributeKeyAndValue> objectAttributeList) {
    this.objectAttributeList = objectAttributeList;
    return this;
  }

  public AddFacetToObjectRequest addObjectAttributeListItem(AttributeKeyAndValue objectAttributeListItem) {
    if (this.objectAttributeList == null) {
      this.objectAttributeList = new ArrayList<>();
    }
    this.objectAttributeList.add(objectAttributeListItem);
    return this;
  }

  /**
   * Attributes on the facet that you are adding to the object.
   * @return objectAttributeList
   */
  @javax.annotation.Nullable
  public List<AttributeKeyAndValue> getObjectAttributeList() {
    return objectAttributeList;
  }

  public void setObjectAttributeList(List<AttributeKeyAndValue> objectAttributeList) {
    this.objectAttributeList = objectAttributeList;
  }


  public AddFacetToObjectRequest objectReference(AddFacetToObjectRequestObjectReference objectReference) {
    this.objectReference = objectReference;
    return this;
  }

  /**
   * Get objectReference
   * @return objectReference
   */
  @javax.annotation.Nonnull
  public AddFacetToObjectRequestObjectReference getObjectReference() {
    return objectReference;
  }

  public void setObjectReference(AddFacetToObjectRequestObjectReference objectReference) {
    this.objectReference = objectReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddFacetToObjectRequest addFacetToObjectRequest = (AddFacetToObjectRequest) o;
    return Objects.equals(this.schemaFacet, addFacetToObjectRequest.schemaFacet) &&
        Objects.equals(this.objectAttributeList, addFacetToObjectRequest.objectAttributeList) &&
        Objects.equals(this.objectReference, addFacetToObjectRequest.objectReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaFacet, objectAttributeList, objectReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddFacetToObjectRequest {\n");
    sb.append("    schemaFacet: ").append(toIndentedString(schemaFacet)).append("\n");
    sb.append("    objectAttributeList: ").append(toIndentedString(objectAttributeList)).append("\n");
    sb.append("    objectReference: ").append(toIndentedString(objectReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaFacet");
    openapiFields.add("ObjectAttributeList");
    openapiFields.add("ObjectReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SchemaFacet");
    openapiRequiredFields.add("ObjectReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddFacetToObjectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddFacetToObjectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddFacetToObjectRequest is not found in the empty JSON string", AddFacetToObjectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddFacetToObjectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddFacetToObjectRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AddFacetToObjectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SchemaFacet`
      AddFacetToObjectRequestSchemaFacet.validateJsonElement(jsonObj.get("SchemaFacet"));
      if (jsonObj.get("ObjectAttributeList") != null && !jsonObj.get("ObjectAttributeList").isJsonNull()) {
        JsonArray jsonArrayobjectAttributeList = jsonObj.getAsJsonArray("ObjectAttributeList");
        if (jsonArrayobjectAttributeList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ObjectAttributeList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ObjectAttributeList` to be an array in the JSON string but got `%s`", jsonObj.get("ObjectAttributeList").toString()));
          }

          // validate the optional field `ObjectAttributeList` (array)
          for (int i = 0; i < jsonArrayobjectAttributeList.size(); i++) {
            AttributeKeyAndValue.validateJsonElement(jsonArrayobjectAttributeList.get(i));
          };
        }
      }
      // validate the required field `ObjectReference`
      AddFacetToObjectRequestObjectReference.validateJsonElement(jsonObj.get("ObjectReference"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddFacetToObjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddFacetToObjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddFacetToObjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddFacetToObjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddFacetToObjectRequest>() {
           @Override
           public void write(JsonWriter out, AddFacetToObjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddFacetToObjectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddFacetToObjectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddFacetToObjectRequest
   * @throws IOException if the JSON string is invalid with respect to AddFacetToObjectRequest
   */
  public static AddFacetToObjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddFacetToObjectRequest.class);
  }

  /**
   * Convert an instance of AddFacetToObjectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

