/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchListIncomingTypedLinksFilterTypedLink;
import org.openapitools.client.model.BatchListIncomingTypedLinksObjectReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchReadOperationListIncomingTypedLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchReadOperationListIncomingTypedLinks {
  public static final String SERIALIZED_NAME_OBJECT_REFERENCE = "ObjectReference";
  @SerializedName(SERIALIZED_NAME_OBJECT_REFERENCE)
  private BatchListIncomingTypedLinksObjectReference objectReference;

  public static final String SERIALIZED_NAME_FILTER_ATTRIBUTE_RANGES = "FilterAttributeRanges";
  @SerializedName(SERIALIZED_NAME_FILTER_ATTRIBUTE_RANGES)
  private List filterAttributeRanges;

  public static final String SERIALIZED_NAME_FILTER_TYPED_LINK = "FilterTypedLink";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPED_LINK)
  private BatchListIncomingTypedLinksFilterTypedLink filterTypedLink;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public BatchReadOperationListIncomingTypedLinks() {
  }

  public BatchReadOperationListIncomingTypedLinks objectReference(BatchListIncomingTypedLinksObjectReference objectReference) {
    this.objectReference = objectReference;
    return this;
  }

  /**
   * Get objectReference
   * @return objectReference
   */
  @javax.annotation.Nonnull
  public BatchListIncomingTypedLinksObjectReference getObjectReference() {
    return objectReference;
  }

  public void setObjectReference(BatchListIncomingTypedLinksObjectReference objectReference) {
    this.objectReference = objectReference;
  }


  public BatchReadOperationListIncomingTypedLinks filterAttributeRanges(List filterAttributeRanges) {
    this.filterAttributeRanges = filterAttributeRanges;
    return this;
  }

  /**
   * Get filterAttributeRanges
   * @return filterAttributeRanges
   */
  @javax.annotation.Nullable
  public List getFilterAttributeRanges() {
    return filterAttributeRanges;
  }

  public void setFilterAttributeRanges(List filterAttributeRanges) {
    this.filterAttributeRanges = filterAttributeRanges;
  }


  public BatchReadOperationListIncomingTypedLinks filterTypedLink(BatchListIncomingTypedLinksFilterTypedLink filterTypedLink) {
    this.filterTypedLink = filterTypedLink;
    return this;
  }

  /**
   * Get filterTypedLink
   * @return filterTypedLink
   */
  @javax.annotation.Nullable
  public BatchListIncomingTypedLinksFilterTypedLink getFilterTypedLink() {
    return filterTypedLink;
  }

  public void setFilterTypedLink(BatchListIncomingTypedLinksFilterTypedLink filterTypedLink) {
    this.filterTypedLink = filterTypedLink;
  }


  public BatchReadOperationListIncomingTypedLinks nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public BatchReadOperationListIncomingTypedLinks maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Get maxResults
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchReadOperationListIncomingTypedLinks batchReadOperationListIncomingTypedLinks = (BatchReadOperationListIncomingTypedLinks) o;
    return Objects.equals(this.objectReference, batchReadOperationListIncomingTypedLinks.objectReference) &&
        Objects.equals(this.filterAttributeRanges, batchReadOperationListIncomingTypedLinks.filterAttributeRanges) &&
        Objects.equals(this.filterTypedLink, batchReadOperationListIncomingTypedLinks.filterTypedLink) &&
        Objects.equals(this.nextToken, batchReadOperationListIncomingTypedLinks.nextToken) &&
        Objects.equals(this.maxResults, batchReadOperationListIncomingTypedLinks.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectReference, filterAttributeRanges, filterTypedLink, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchReadOperationListIncomingTypedLinks {\n");
    sb.append("    objectReference: ").append(toIndentedString(objectReference)).append("\n");
    sb.append("    filterAttributeRanges: ").append(toIndentedString(filterAttributeRanges)).append("\n");
    sb.append("    filterTypedLink: ").append(toIndentedString(filterTypedLink)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObjectReference");
    openapiFields.add("FilterAttributeRanges");
    openapiFields.add("FilterTypedLink");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ObjectReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchReadOperationListIncomingTypedLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchReadOperationListIncomingTypedLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchReadOperationListIncomingTypedLinks is not found in the empty JSON string", BatchReadOperationListIncomingTypedLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchReadOperationListIncomingTypedLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchReadOperationListIncomingTypedLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchReadOperationListIncomingTypedLinks.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ObjectReference`
      BatchListIncomingTypedLinksObjectReference.validateJsonElement(jsonObj.get("ObjectReference"));
      // validate the optional field `FilterAttributeRanges`
      if (jsonObj.get("FilterAttributeRanges") != null && !jsonObj.get("FilterAttributeRanges").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("FilterAttributeRanges"));
      }
      // validate the optional field `FilterTypedLink`
      if (jsonObj.get("FilterTypedLink") != null && !jsonObj.get("FilterTypedLink").isJsonNull()) {
        BatchListIncomingTypedLinksFilterTypedLink.validateJsonElement(jsonObj.get("FilterTypedLink"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
      // validate the optional field `MaxResults`
      if (jsonObj.get("MaxResults") != null && !jsonObj.get("MaxResults").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("MaxResults"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchReadOperationListIncomingTypedLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchReadOperationListIncomingTypedLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchReadOperationListIncomingTypedLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchReadOperationListIncomingTypedLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchReadOperationListIncomingTypedLinks>() {
           @Override
           public void write(JsonWriter out, BatchReadOperationListIncomingTypedLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchReadOperationListIncomingTypedLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchReadOperationListIncomingTypedLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchReadOperationListIncomingTypedLinks
   * @throws IOException if the JSON string is invalid with respect to BatchReadOperationListIncomingTypedLinks
   */
  public static BatchReadOperationListIncomingTypedLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchReadOperationListIncomingTypedLinks.class);
  }

  /**
   * Convert an instance of BatchReadOperationListIncomingTypedLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

