/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublishSchemaResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublishSchemaResponse {
  public static final String SERIALIZED_NAME_PUBLISHED_SCHEMA_ARN = "PublishedSchemaArn";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_SCHEMA_ARN)
  private String publishedSchemaArn;

  public PublishSchemaResponse() {
  }

  public PublishSchemaResponse publishedSchemaArn(String publishedSchemaArn) {
    this.publishedSchemaArn = publishedSchemaArn;
    return this;
  }

  /**
   * Get publishedSchemaArn
   * @return publishedSchemaArn
   */
  @javax.annotation.Nullable
  public String getPublishedSchemaArn() {
    return publishedSchemaArn;
  }

  public void setPublishedSchemaArn(String publishedSchemaArn) {
    this.publishedSchemaArn = publishedSchemaArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublishSchemaResponse publishSchemaResponse = (PublishSchemaResponse) o;
    return Objects.equals(this.publishedSchemaArn, publishSchemaResponse.publishedSchemaArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publishedSchemaArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublishSchemaResponse {\n");
    sb.append("    publishedSchemaArn: ").append(toIndentedString(publishedSchemaArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PublishedSchemaArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublishSchemaResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublishSchemaResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublishSchemaResponse is not found in the empty JSON string", PublishSchemaResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublishSchemaResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublishSchemaResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PublishedSchemaArn`
      if (jsonObj.get("PublishedSchemaArn") != null && !jsonObj.get("PublishedSchemaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PublishedSchemaArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublishSchemaResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublishSchemaResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublishSchemaResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublishSchemaResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PublishSchemaResponse>() {
           @Override
           public void write(JsonWriter out, PublishSchemaResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublishSchemaResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublishSchemaResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublishSchemaResponse
   * @throws IOException if the JSON string is invalid with respect to PublishSchemaResponse
   */
  public static PublishSchemaResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublishSchemaResponse.class);
  }

  /**
   * Convert an instance of PublishSchemaResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

