/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TypedLinkFacetAttributeUpdate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateTypedLinkFacetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateTypedLinkFacetRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ATTRIBUTE_UPDATES = "AttributeUpdates";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_UPDATES)
  private List<TypedLinkFacetAttributeUpdate> attributeUpdates = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_ATTRIBUTE_ORDER = "IdentityAttributeOrder";
  @SerializedName(SERIALIZED_NAME_IDENTITY_ATTRIBUTE_ORDER)
  private List<String> identityAttributeOrder = new ArrayList<>();

  public UpdateTypedLinkFacetRequest() {
  }

  public UpdateTypedLinkFacetRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique name of the typed link facet.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateTypedLinkFacetRequest attributeUpdates(List<TypedLinkFacetAttributeUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
    return this;
  }

  public UpdateTypedLinkFacetRequest addAttributeUpdatesItem(TypedLinkFacetAttributeUpdate attributeUpdatesItem) {
    if (this.attributeUpdates == null) {
      this.attributeUpdates = new ArrayList<>();
    }
    this.attributeUpdates.add(attributeUpdatesItem);
    return this;
  }

  /**
   * Attributes update structure.
   * @return attributeUpdates
   */
  @javax.annotation.Nonnull
  public List<TypedLinkFacetAttributeUpdate> getAttributeUpdates() {
    return attributeUpdates;
  }

  public void setAttributeUpdates(List<TypedLinkFacetAttributeUpdate> attributeUpdates) {
    this.attributeUpdates = attributeUpdates;
  }


  public UpdateTypedLinkFacetRequest identityAttributeOrder(List<String> identityAttributeOrder) {
    this.identityAttributeOrder = identityAttributeOrder;
    return this;
  }

  public UpdateTypedLinkFacetRequest addIdentityAttributeOrderItem(String identityAttributeOrderItem) {
    if (this.identityAttributeOrder == null) {
      this.identityAttributeOrder = new ArrayList<>();
    }
    this.identityAttributeOrder.add(identityAttributeOrderItem);
    return this;
  }

  /**
   * The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
   * @return identityAttributeOrder
   */
  @javax.annotation.Nonnull
  public List<String> getIdentityAttributeOrder() {
    return identityAttributeOrder;
  }

  public void setIdentityAttributeOrder(List<String> identityAttributeOrder) {
    this.identityAttributeOrder = identityAttributeOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest = (UpdateTypedLinkFacetRequest) o;
    return Objects.equals(this.name, updateTypedLinkFacetRequest.name) &&
        Objects.equals(this.attributeUpdates, updateTypedLinkFacetRequest.attributeUpdates) &&
        Objects.equals(this.identityAttributeOrder, updateTypedLinkFacetRequest.identityAttributeOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, attributeUpdates, identityAttributeOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateTypedLinkFacetRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attributeUpdates: ").append(toIndentedString(attributeUpdates)).append("\n");
    sb.append("    identityAttributeOrder: ").append(toIndentedString(identityAttributeOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AttributeUpdates");
    openapiFields.add("IdentityAttributeOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("AttributeUpdates");
    openapiRequiredFields.add("IdentityAttributeOrder");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateTypedLinkFacetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateTypedLinkFacetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateTypedLinkFacetRequest is not found in the empty JSON string", UpdateTypedLinkFacetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateTypedLinkFacetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateTypedLinkFacetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateTypedLinkFacetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("AttributeUpdates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttributeUpdates` to be an array in the JSON string but got `%s`", jsonObj.get("AttributeUpdates").toString()));
      }

      JsonArray jsonArrayattributeUpdates = jsonObj.getAsJsonArray("AttributeUpdates");
      // validate the required field `AttributeUpdates` (array)
      for (int i = 0; i < jsonArrayattributeUpdates.size(); i++) {
        TypedLinkFacetAttributeUpdate.validateJsonElement(jsonArrayattributeUpdates.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("IdentityAttributeOrder") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("IdentityAttributeOrder").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `IdentityAttributeOrder` to be an array in the JSON string but got `%s`", jsonObj.get("IdentityAttributeOrder").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateTypedLinkFacetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateTypedLinkFacetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateTypedLinkFacetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateTypedLinkFacetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateTypedLinkFacetRequest>() {
           @Override
           public void write(JsonWriter out, UpdateTypedLinkFacetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateTypedLinkFacetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateTypedLinkFacetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateTypedLinkFacetRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateTypedLinkFacetRequest
   */
  public static UpdateTypedLinkFacetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateTypedLinkFacetRequest.class);
  }

  /**
   * Convert an instance of UpdateTypedLinkFacetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

