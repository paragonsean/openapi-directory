/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FacetAttributeAttributeDefinition;
import org.openapitools.client.model.FacetAttributeAttributeReference;
import org.openapitools.client.model.RequiredAttributeBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An attribute that is associated with the &lt;a&gt;Facet&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FacetAttribute {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ATTRIBUTE_DEFINITION = "AttributeDefinition";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_DEFINITION)
  private FacetAttributeAttributeDefinition attributeDefinition;

  public static final String SERIALIZED_NAME_ATTRIBUTE_REFERENCE = "AttributeReference";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_REFERENCE)
  private FacetAttributeAttributeReference attributeReference;

  public static final String SERIALIZED_NAME_REQUIRED_BEHAVIOR = "RequiredBehavior";
  @SerializedName(SERIALIZED_NAME_REQUIRED_BEHAVIOR)
  private RequiredAttributeBehavior requiredBehavior;

  public FacetAttribute() {
  }

  public FacetAttribute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FacetAttribute attributeDefinition(FacetAttributeAttributeDefinition attributeDefinition) {
    this.attributeDefinition = attributeDefinition;
    return this;
  }

  /**
   * Get attributeDefinition
   * @return attributeDefinition
   */
  @javax.annotation.Nullable
  public FacetAttributeAttributeDefinition getAttributeDefinition() {
    return attributeDefinition;
  }

  public void setAttributeDefinition(FacetAttributeAttributeDefinition attributeDefinition) {
    this.attributeDefinition = attributeDefinition;
  }


  public FacetAttribute attributeReference(FacetAttributeAttributeReference attributeReference) {
    this.attributeReference = attributeReference;
    return this;
  }

  /**
   * Get attributeReference
   * @return attributeReference
   */
  @javax.annotation.Nullable
  public FacetAttributeAttributeReference getAttributeReference() {
    return attributeReference;
  }

  public void setAttributeReference(FacetAttributeAttributeReference attributeReference) {
    this.attributeReference = attributeReference;
  }


  public FacetAttribute requiredBehavior(RequiredAttributeBehavior requiredBehavior) {
    this.requiredBehavior = requiredBehavior;
    return this;
  }

  /**
   * Get requiredBehavior
   * @return requiredBehavior
   */
  @javax.annotation.Nullable
  public RequiredAttributeBehavior getRequiredBehavior() {
    return requiredBehavior;
  }

  public void setRequiredBehavior(RequiredAttributeBehavior requiredBehavior) {
    this.requiredBehavior = requiredBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacetAttribute facetAttribute = (FacetAttribute) o;
    return Objects.equals(this.name, facetAttribute.name) &&
        Objects.equals(this.attributeDefinition, facetAttribute.attributeDefinition) &&
        Objects.equals(this.attributeReference, facetAttribute.attributeReference) &&
        Objects.equals(this.requiredBehavior, facetAttribute.requiredBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, attributeDefinition, attributeReference, requiredBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacetAttribute {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    attributeDefinition: ").append(toIndentedString(attributeDefinition)).append("\n");
    sb.append("    attributeReference: ").append(toIndentedString(attributeReference)).append("\n");
    sb.append("    requiredBehavior: ").append(toIndentedString(requiredBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AttributeDefinition");
    openapiFields.add("AttributeReference");
    openapiFields.add("RequiredBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FacetAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FacetAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FacetAttribute is not found in the empty JSON string", FacetAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FacetAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FacetAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FacetAttribute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `AttributeDefinition`
      if (jsonObj.get("AttributeDefinition") != null && !jsonObj.get("AttributeDefinition").isJsonNull()) {
        FacetAttributeAttributeDefinition.validateJsonElement(jsonObj.get("AttributeDefinition"));
      }
      // validate the optional field `AttributeReference`
      if (jsonObj.get("AttributeReference") != null && !jsonObj.get("AttributeReference").isJsonNull()) {
        FacetAttributeAttributeReference.validateJsonElement(jsonObj.get("AttributeReference"));
      }
      // validate the optional field `RequiredBehavior`
      if (jsonObj.get("RequiredBehavior") != null && !jsonObj.get("RequiredBehavior").isJsonNull()) {
        RequiredAttributeBehavior.validateJsonElement(jsonObj.get("RequiredBehavior"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FacetAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FacetAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FacetAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FacetAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<FacetAttribute>() {
           @Override
           public void write(JsonWriter out, FacetAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FacetAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FacetAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FacetAttribute
   * @throws IOException if the JSON string is invalid with respect to FacetAttribute
   */
  public static FacetAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FacetAttribute.class);
  }

  /**
   * Convert an instance of FacetAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

