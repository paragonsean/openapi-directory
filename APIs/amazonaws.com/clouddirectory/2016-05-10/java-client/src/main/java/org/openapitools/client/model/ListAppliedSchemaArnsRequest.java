/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAppliedSchemaArnsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListAppliedSchemaArnsRequest {
  public static final String SERIALIZED_NAME_DIRECTORY_ARN = "DirectoryArn";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ARN)
  private String directoryArn;

  public static final String SERIALIZED_NAME_SCHEMA_ARN = "SchemaArn";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ARN)
  private String schemaArn;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public ListAppliedSchemaArnsRequest() {
  }

  public ListAppliedSchemaArnsRequest directoryArn(String directoryArn) {
    this.directoryArn = directoryArn;
    return this;
  }

  /**
   * The ARN of the directory you are listing.
   * @return directoryArn
   */
  @javax.annotation.Nonnull
  public String getDirectoryArn() {
    return directoryArn;
  }

  public void setDirectoryArn(String directoryArn) {
    this.directoryArn = directoryArn;
  }


  public ListAppliedSchemaArnsRequest schemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
    return this;
  }

  /**
   * The response for &lt;code&gt;ListAppliedSchemaArns&lt;/code&gt; when this parameter is used will list all minor version ARNs for a major version.
   * @return schemaArn
   */
  @javax.annotation.Nullable
  public String getSchemaArn() {
    return schemaArn;
  }

  public void setSchemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
  }


  public ListAppliedSchemaArnsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The pagination token.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListAppliedSchemaArnsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to retrieve.
   * minimum: 1
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest = (ListAppliedSchemaArnsRequest) o;
    return Objects.equals(this.directoryArn, listAppliedSchemaArnsRequest.directoryArn) &&
        Objects.equals(this.schemaArn, listAppliedSchemaArnsRequest.schemaArn) &&
        Objects.equals(this.nextToken, listAppliedSchemaArnsRequest.nextToken) &&
        Objects.equals(this.maxResults, listAppliedSchemaArnsRequest.maxResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directoryArn, schemaArn, nextToken, maxResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAppliedSchemaArnsRequest {\n");
    sb.append("    directoryArn: ").append(toIndentedString(directoryArn)).append("\n");
    sb.append("    schemaArn: ").append(toIndentedString(schemaArn)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DirectoryArn");
    openapiFields.add("SchemaArn");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DirectoryArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAppliedSchemaArnsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAppliedSchemaArnsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAppliedSchemaArnsRequest is not found in the empty JSON string", ListAppliedSchemaArnsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAppliedSchemaArnsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAppliedSchemaArnsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListAppliedSchemaArnsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DirectoryArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DirectoryArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DirectoryArn").toString()));
      }
      if ((jsonObj.get("SchemaArn") != null && !jsonObj.get("SchemaArn").isJsonNull()) && !jsonObj.get("SchemaArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SchemaArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SchemaArn").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAppliedSchemaArnsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAppliedSchemaArnsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAppliedSchemaArnsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAppliedSchemaArnsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAppliedSchemaArnsRequest>() {
           @Override
           public void write(JsonWriter out, ListAppliedSchemaArnsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAppliedSchemaArnsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAppliedSchemaArnsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAppliedSchemaArnsRequest
   * @throws IOException if the JSON string is invalid with respect to ListAppliedSchemaArnsRequest
   */
  public static ListAppliedSchemaArnsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAppliedSchemaArnsRequest.class);
  }

  /**
   * Convert an instance of ListAppliedSchemaArnsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

