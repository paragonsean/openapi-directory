/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttributeKeyAndValueKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttributeKeyAndValueKey {
  public static final String SERIALIZED_NAME_SCHEMA_ARN = "SchemaArn";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ARN)
  private String schemaArn;

  public static final String SERIALIZED_NAME_FACET_NAME = "FacetName";
  @SerializedName(SERIALIZED_NAME_FACET_NAME)
  private String facetName;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public AttributeKeyAndValueKey() {
  }

  public AttributeKeyAndValueKey schemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
    return this;
  }

  /**
   * Get schemaArn
   * @return schemaArn
   */
  @javax.annotation.Nonnull
  public String getSchemaArn() {
    return schemaArn;
  }

  public void setSchemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
  }


  public AttributeKeyAndValueKey facetName(String facetName) {
    this.facetName = facetName;
    return this;
  }

  /**
   * Get facetName
   * @return facetName
   */
  @javax.annotation.Nonnull
  public String getFacetName() {
    return facetName;
  }

  public void setFacetName(String facetName) {
    this.facetName = facetName;
  }


  public AttributeKeyAndValueKey name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttributeKeyAndValueKey attributeKeyAndValueKey = (AttributeKeyAndValueKey) o;
    return Objects.equals(this.schemaArn, attributeKeyAndValueKey.schemaArn) &&
        Objects.equals(this.facetName, attributeKeyAndValueKey.facetName) &&
        Objects.equals(this.name, attributeKeyAndValueKey.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaArn, facetName, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttributeKeyAndValueKey {\n");
    sb.append("    schemaArn: ").append(toIndentedString(schemaArn)).append("\n");
    sb.append("    facetName: ").append(toIndentedString(facetName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaArn");
    openapiFields.add("FacetName");
    openapiFields.add("Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SchemaArn");
    openapiRequiredFields.add("FacetName");
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttributeKeyAndValueKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttributeKeyAndValueKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttributeKeyAndValueKey is not found in the empty JSON string", AttributeKeyAndValueKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AttributeKeyAndValueKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AttributeKeyAndValueKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AttributeKeyAndValueKey.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SchemaArn`
      String.validateJsonElement(jsonObj.get("SchemaArn"));
      // validate the required field `FacetName`
      String.validateJsonElement(jsonObj.get("FacetName"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttributeKeyAndValueKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttributeKeyAndValueKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttributeKeyAndValueKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttributeKeyAndValueKey.class));

       return (TypeAdapter<T>) new TypeAdapter<AttributeKeyAndValueKey>() {
           @Override
           public void write(JsonWriter out, AttributeKeyAndValueKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AttributeKeyAndValueKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttributeKeyAndValueKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttributeKeyAndValueKey
   * @throws IOException if the JSON string is invalid with respect to AttributeKeyAndValueKey
   */
  public static AttributeKeyAndValueKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttributeKeyAndValueKey.class);
  }

  /**
   * Convert an instance of AttributeKeyAndValueKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

