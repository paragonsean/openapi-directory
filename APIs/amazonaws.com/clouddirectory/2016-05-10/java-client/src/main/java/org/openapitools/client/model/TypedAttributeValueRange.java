/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RangeMode;
import org.openapitools.client.model.TypedAttributeValueRangeEndValue;
import org.openapitools.client.model.TypedAttributeValueRangeStartValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A range of attribute values. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#rangefilters\&quot;&gt;Range Filters&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypedAttributeValueRange {
  public static final String SERIALIZED_NAME_START_MODE = "StartMode";
  @SerializedName(SERIALIZED_NAME_START_MODE)
  private RangeMode startMode;

  public static final String SERIALIZED_NAME_START_VALUE = "StartValue";
  @SerializedName(SERIALIZED_NAME_START_VALUE)
  private TypedAttributeValueRangeStartValue startValue;

  public static final String SERIALIZED_NAME_END_MODE = "EndMode";
  @SerializedName(SERIALIZED_NAME_END_MODE)
  private RangeMode endMode;

  public static final String SERIALIZED_NAME_END_VALUE = "EndValue";
  @SerializedName(SERIALIZED_NAME_END_VALUE)
  private TypedAttributeValueRangeEndValue endValue;

  public TypedAttributeValueRange() {
  }

  public TypedAttributeValueRange startMode(RangeMode startMode) {
    this.startMode = startMode;
    return this;
  }

  /**
   * Get startMode
   * @return startMode
   */
  @javax.annotation.Nonnull
  public RangeMode getStartMode() {
    return startMode;
  }

  public void setStartMode(RangeMode startMode) {
    this.startMode = startMode;
  }


  public TypedAttributeValueRange startValue(TypedAttributeValueRangeStartValue startValue) {
    this.startValue = startValue;
    return this;
  }

  /**
   * Get startValue
   * @return startValue
   */
  @javax.annotation.Nullable
  public TypedAttributeValueRangeStartValue getStartValue() {
    return startValue;
  }

  public void setStartValue(TypedAttributeValueRangeStartValue startValue) {
    this.startValue = startValue;
  }


  public TypedAttributeValueRange endMode(RangeMode endMode) {
    this.endMode = endMode;
    return this;
  }

  /**
   * Get endMode
   * @return endMode
   */
  @javax.annotation.Nonnull
  public RangeMode getEndMode() {
    return endMode;
  }

  public void setEndMode(RangeMode endMode) {
    this.endMode = endMode;
  }


  public TypedAttributeValueRange endValue(TypedAttributeValueRangeEndValue endValue) {
    this.endValue = endValue;
    return this;
  }

  /**
   * Get endValue
   * @return endValue
   */
  @javax.annotation.Nullable
  public TypedAttributeValueRangeEndValue getEndValue() {
    return endValue;
  }

  public void setEndValue(TypedAttributeValueRangeEndValue endValue) {
    this.endValue = endValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypedAttributeValueRange typedAttributeValueRange = (TypedAttributeValueRange) o;
    return Objects.equals(this.startMode, typedAttributeValueRange.startMode) &&
        Objects.equals(this.startValue, typedAttributeValueRange.startValue) &&
        Objects.equals(this.endMode, typedAttributeValueRange.endMode) &&
        Objects.equals(this.endValue, typedAttributeValueRange.endValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startMode, startValue, endMode, endValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypedAttributeValueRange {\n");
    sb.append("    startMode: ").append(toIndentedString(startMode)).append("\n");
    sb.append("    startValue: ").append(toIndentedString(startValue)).append("\n");
    sb.append("    endMode: ").append(toIndentedString(endMode)).append("\n");
    sb.append("    endValue: ").append(toIndentedString(endValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StartMode");
    openapiFields.add("StartValue");
    openapiFields.add("EndMode");
    openapiFields.add("EndValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StartMode");
    openapiRequiredFields.add("EndMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypedAttributeValueRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypedAttributeValueRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypedAttributeValueRange is not found in the empty JSON string", TypedAttributeValueRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypedAttributeValueRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypedAttributeValueRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TypedAttributeValueRange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `StartMode`
      RangeMode.validateJsonElement(jsonObj.get("StartMode"));
      // validate the optional field `StartValue`
      if (jsonObj.get("StartValue") != null && !jsonObj.get("StartValue").isJsonNull()) {
        TypedAttributeValueRangeStartValue.validateJsonElement(jsonObj.get("StartValue"));
      }
      // validate the required field `EndMode`
      RangeMode.validateJsonElement(jsonObj.get("EndMode"));
      // validate the optional field `EndValue`
      if (jsonObj.get("EndValue") != null && !jsonObj.get("EndValue").isJsonNull()) {
        TypedAttributeValueRangeEndValue.validateJsonElement(jsonObj.get("EndValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypedAttributeValueRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypedAttributeValueRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypedAttributeValueRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypedAttributeValueRange.class));

       return (TypeAdapter<T>) new TypeAdapter<TypedAttributeValueRange>() {
           @Override
           public void write(JsonWriter out, TypedAttributeValueRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypedAttributeValueRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypedAttributeValueRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypedAttributeValueRange
   * @throws IOException if the JSON string is invalid with respect to TypedAttributeValueRange
   */
  public static TypedAttributeValueRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypedAttributeValueRange.class);
  }

  /**
   * Convert an instance of TypedAttributeValueRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

