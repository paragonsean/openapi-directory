/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BatchWriteOperationResponseAttachObject;
import org.openapitools.client.model.BatchWriteOperationResponseAttachToIndex;
import org.openapitools.client.model.BatchWriteOperationResponseAttachTypedLink;
import org.openapitools.client.model.BatchWriteOperationResponseCreateIndex;
import org.openapitools.client.model.BatchWriteOperationResponseCreateObject;
import org.openapitools.client.model.BatchWriteOperationResponseDetachFromIndex;
import org.openapitools.client.model.BatchWriteOperationResponseDetachObject;
import org.openapitools.client.model.BatchWriteOperationResponseUpdateObjectAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the output of a &lt;code&gt;BatchWrite&lt;/code&gt; response operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchWriteOperationResponse {
  public static final String SERIALIZED_NAME_CREATE_OBJECT = "CreateObject";
  @SerializedName(SERIALIZED_NAME_CREATE_OBJECT)
  private BatchWriteOperationResponseCreateObject createObject;

  public static final String SERIALIZED_NAME_ATTACH_OBJECT = "AttachObject";
  @SerializedName(SERIALIZED_NAME_ATTACH_OBJECT)
  private BatchWriteOperationResponseAttachObject attachObject;

  public static final String SERIALIZED_NAME_DETACH_OBJECT = "DetachObject";
  @SerializedName(SERIALIZED_NAME_DETACH_OBJECT)
  private BatchWriteOperationResponseDetachObject detachObject;

  public static final String SERIALIZED_NAME_UPDATE_OBJECT_ATTRIBUTES = "UpdateObjectAttributes";
  @SerializedName(SERIALIZED_NAME_UPDATE_OBJECT_ATTRIBUTES)
  private BatchWriteOperationResponseUpdateObjectAttributes updateObjectAttributes;

  public static final String SERIALIZED_NAME_DELETE_OBJECT = "DeleteObject";
  @SerializedName(SERIALIZED_NAME_DELETE_OBJECT)
  private Object deleteObject;

  public static final String SERIALIZED_NAME_ADD_FACET_TO_OBJECT = "AddFacetToObject";
  @SerializedName(SERIALIZED_NAME_ADD_FACET_TO_OBJECT)
  private Object addFacetToObject;

  public static final String SERIALIZED_NAME_REMOVE_FACET_FROM_OBJECT = "RemoveFacetFromObject";
  @SerializedName(SERIALIZED_NAME_REMOVE_FACET_FROM_OBJECT)
  private Object removeFacetFromObject;

  public static final String SERIALIZED_NAME_ATTACH_POLICY = "AttachPolicy";
  @SerializedName(SERIALIZED_NAME_ATTACH_POLICY)
  private Object attachPolicy;

  public static final String SERIALIZED_NAME_DETACH_POLICY = "DetachPolicy";
  @SerializedName(SERIALIZED_NAME_DETACH_POLICY)
  private Object detachPolicy;

  public static final String SERIALIZED_NAME_CREATE_INDEX = "CreateIndex";
  @SerializedName(SERIALIZED_NAME_CREATE_INDEX)
  private BatchWriteOperationResponseCreateIndex createIndex;

  public static final String SERIALIZED_NAME_ATTACH_TO_INDEX = "AttachToIndex";
  @SerializedName(SERIALIZED_NAME_ATTACH_TO_INDEX)
  private BatchWriteOperationResponseAttachToIndex attachToIndex;

  public static final String SERIALIZED_NAME_DETACH_FROM_INDEX = "DetachFromIndex";
  @SerializedName(SERIALIZED_NAME_DETACH_FROM_INDEX)
  private BatchWriteOperationResponseDetachFromIndex detachFromIndex;

  public static final String SERIALIZED_NAME_ATTACH_TYPED_LINK = "AttachTypedLink";
  @SerializedName(SERIALIZED_NAME_ATTACH_TYPED_LINK)
  private BatchWriteOperationResponseAttachTypedLink attachTypedLink;

  public static final String SERIALIZED_NAME_DETACH_TYPED_LINK = "DetachTypedLink";
  @SerializedName(SERIALIZED_NAME_DETACH_TYPED_LINK)
  private Object detachTypedLink;

  public static final String SERIALIZED_NAME_UPDATE_LINK_ATTRIBUTES = "UpdateLinkAttributes";
  @SerializedName(SERIALIZED_NAME_UPDATE_LINK_ATTRIBUTES)
  private Object updateLinkAttributes;

  public BatchWriteOperationResponse() {
  }

  public BatchWriteOperationResponse createObject(BatchWriteOperationResponseCreateObject createObject) {
    this.createObject = createObject;
    return this;
  }

  /**
   * Get createObject
   * @return createObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseCreateObject getCreateObject() {
    return createObject;
  }

  public void setCreateObject(BatchWriteOperationResponseCreateObject createObject) {
    this.createObject = createObject;
  }


  public BatchWriteOperationResponse attachObject(BatchWriteOperationResponseAttachObject attachObject) {
    this.attachObject = attachObject;
    return this;
  }

  /**
   * Get attachObject
   * @return attachObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseAttachObject getAttachObject() {
    return attachObject;
  }

  public void setAttachObject(BatchWriteOperationResponseAttachObject attachObject) {
    this.attachObject = attachObject;
  }


  public BatchWriteOperationResponse detachObject(BatchWriteOperationResponseDetachObject detachObject) {
    this.detachObject = detachObject;
    return this;
  }

  /**
   * Get detachObject
   * @return detachObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseDetachObject getDetachObject() {
    return detachObject;
  }

  public void setDetachObject(BatchWriteOperationResponseDetachObject detachObject) {
    this.detachObject = detachObject;
  }


  public BatchWriteOperationResponse updateObjectAttributes(BatchWriteOperationResponseUpdateObjectAttributes updateObjectAttributes) {
    this.updateObjectAttributes = updateObjectAttributes;
    return this;
  }

  /**
   * Get updateObjectAttributes
   * @return updateObjectAttributes
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseUpdateObjectAttributes getUpdateObjectAttributes() {
    return updateObjectAttributes;
  }

  public void setUpdateObjectAttributes(BatchWriteOperationResponseUpdateObjectAttributes updateObjectAttributes) {
    this.updateObjectAttributes = updateObjectAttributes;
  }


  public BatchWriteOperationResponse deleteObject(Object deleteObject) {
    this.deleteObject = deleteObject;
    return this;
  }

  /**
   * Get deleteObject
   * @return deleteObject
   */
  @javax.annotation.Nullable
  public Object getDeleteObject() {
    return deleteObject;
  }

  public void setDeleteObject(Object deleteObject) {
    this.deleteObject = deleteObject;
  }


  public BatchWriteOperationResponse addFacetToObject(Object addFacetToObject) {
    this.addFacetToObject = addFacetToObject;
    return this;
  }

  /**
   * Get addFacetToObject
   * @return addFacetToObject
   */
  @javax.annotation.Nullable
  public Object getAddFacetToObject() {
    return addFacetToObject;
  }

  public void setAddFacetToObject(Object addFacetToObject) {
    this.addFacetToObject = addFacetToObject;
  }


  public BatchWriteOperationResponse removeFacetFromObject(Object removeFacetFromObject) {
    this.removeFacetFromObject = removeFacetFromObject;
    return this;
  }

  /**
   * Get removeFacetFromObject
   * @return removeFacetFromObject
   */
  @javax.annotation.Nullable
  public Object getRemoveFacetFromObject() {
    return removeFacetFromObject;
  }

  public void setRemoveFacetFromObject(Object removeFacetFromObject) {
    this.removeFacetFromObject = removeFacetFromObject;
  }


  public BatchWriteOperationResponse attachPolicy(Object attachPolicy) {
    this.attachPolicy = attachPolicy;
    return this;
  }

  /**
   * Get attachPolicy
   * @return attachPolicy
   */
  @javax.annotation.Nullable
  public Object getAttachPolicy() {
    return attachPolicy;
  }

  public void setAttachPolicy(Object attachPolicy) {
    this.attachPolicy = attachPolicy;
  }


  public BatchWriteOperationResponse detachPolicy(Object detachPolicy) {
    this.detachPolicy = detachPolicy;
    return this;
  }

  /**
   * Get detachPolicy
   * @return detachPolicy
   */
  @javax.annotation.Nullable
  public Object getDetachPolicy() {
    return detachPolicy;
  }

  public void setDetachPolicy(Object detachPolicy) {
    this.detachPolicy = detachPolicy;
  }


  public BatchWriteOperationResponse createIndex(BatchWriteOperationResponseCreateIndex createIndex) {
    this.createIndex = createIndex;
    return this;
  }

  /**
   * Get createIndex
   * @return createIndex
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseCreateIndex getCreateIndex() {
    return createIndex;
  }

  public void setCreateIndex(BatchWriteOperationResponseCreateIndex createIndex) {
    this.createIndex = createIndex;
  }


  public BatchWriteOperationResponse attachToIndex(BatchWriteOperationResponseAttachToIndex attachToIndex) {
    this.attachToIndex = attachToIndex;
    return this;
  }

  /**
   * Get attachToIndex
   * @return attachToIndex
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseAttachToIndex getAttachToIndex() {
    return attachToIndex;
  }

  public void setAttachToIndex(BatchWriteOperationResponseAttachToIndex attachToIndex) {
    this.attachToIndex = attachToIndex;
  }


  public BatchWriteOperationResponse detachFromIndex(BatchWriteOperationResponseDetachFromIndex detachFromIndex) {
    this.detachFromIndex = detachFromIndex;
    return this;
  }

  /**
   * Get detachFromIndex
   * @return detachFromIndex
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseDetachFromIndex getDetachFromIndex() {
    return detachFromIndex;
  }

  public void setDetachFromIndex(BatchWriteOperationResponseDetachFromIndex detachFromIndex) {
    this.detachFromIndex = detachFromIndex;
  }


  public BatchWriteOperationResponse attachTypedLink(BatchWriteOperationResponseAttachTypedLink attachTypedLink) {
    this.attachTypedLink = attachTypedLink;
    return this;
  }

  /**
   * Get attachTypedLink
   * @return attachTypedLink
   */
  @javax.annotation.Nullable
  public BatchWriteOperationResponseAttachTypedLink getAttachTypedLink() {
    return attachTypedLink;
  }

  public void setAttachTypedLink(BatchWriteOperationResponseAttachTypedLink attachTypedLink) {
    this.attachTypedLink = attachTypedLink;
  }


  public BatchWriteOperationResponse detachTypedLink(Object detachTypedLink) {
    this.detachTypedLink = detachTypedLink;
    return this;
  }

  /**
   * Get detachTypedLink
   * @return detachTypedLink
   */
  @javax.annotation.Nullable
  public Object getDetachTypedLink() {
    return detachTypedLink;
  }

  public void setDetachTypedLink(Object detachTypedLink) {
    this.detachTypedLink = detachTypedLink;
  }


  public BatchWriteOperationResponse updateLinkAttributes(Object updateLinkAttributes) {
    this.updateLinkAttributes = updateLinkAttributes;
    return this;
  }

  /**
   * Get updateLinkAttributes
   * @return updateLinkAttributes
   */
  @javax.annotation.Nullable
  public Object getUpdateLinkAttributes() {
    return updateLinkAttributes;
  }

  public void setUpdateLinkAttributes(Object updateLinkAttributes) {
    this.updateLinkAttributes = updateLinkAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchWriteOperationResponse batchWriteOperationResponse = (BatchWriteOperationResponse) o;
    return Objects.equals(this.createObject, batchWriteOperationResponse.createObject) &&
        Objects.equals(this.attachObject, batchWriteOperationResponse.attachObject) &&
        Objects.equals(this.detachObject, batchWriteOperationResponse.detachObject) &&
        Objects.equals(this.updateObjectAttributes, batchWriteOperationResponse.updateObjectAttributes) &&
        Objects.equals(this.deleteObject, batchWriteOperationResponse.deleteObject) &&
        Objects.equals(this.addFacetToObject, batchWriteOperationResponse.addFacetToObject) &&
        Objects.equals(this.removeFacetFromObject, batchWriteOperationResponse.removeFacetFromObject) &&
        Objects.equals(this.attachPolicy, batchWriteOperationResponse.attachPolicy) &&
        Objects.equals(this.detachPolicy, batchWriteOperationResponse.detachPolicy) &&
        Objects.equals(this.createIndex, batchWriteOperationResponse.createIndex) &&
        Objects.equals(this.attachToIndex, batchWriteOperationResponse.attachToIndex) &&
        Objects.equals(this.detachFromIndex, batchWriteOperationResponse.detachFromIndex) &&
        Objects.equals(this.attachTypedLink, batchWriteOperationResponse.attachTypedLink) &&
        Objects.equals(this.detachTypedLink, batchWriteOperationResponse.detachTypedLink) &&
        Objects.equals(this.updateLinkAttributes, batchWriteOperationResponse.updateLinkAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createObject, attachObject, detachObject, updateObjectAttributes, deleteObject, addFacetToObject, removeFacetFromObject, attachPolicy, detachPolicy, createIndex, attachToIndex, detachFromIndex, attachTypedLink, detachTypedLink, updateLinkAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchWriteOperationResponse {\n");
    sb.append("    createObject: ").append(toIndentedString(createObject)).append("\n");
    sb.append("    attachObject: ").append(toIndentedString(attachObject)).append("\n");
    sb.append("    detachObject: ").append(toIndentedString(detachObject)).append("\n");
    sb.append("    updateObjectAttributes: ").append(toIndentedString(updateObjectAttributes)).append("\n");
    sb.append("    deleteObject: ").append(toIndentedString(deleteObject)).append("\n");
    sb.append("    addFacetToObject: ").append(toIndentedString(addFacetToObject)).append("\n");
    sb.append("    removeFacetFromObject: ").append(toIndentedString(removeFacetFromObject)).append("\n");
    sb.append("    attachPolicy: ").append(toIndentedString(attachPolicy)).append("\n");
    sb.append("    detachPolicy: ").append(toIndentedString(detachPolicy)).append("\n");
    sb.append("    createIndex: ").append(toIndentedString(createIndex)).append("\n");
    sb.append("    attachToIndex: ").append(toIndentedString(attachToIndex)).append("\n");
    sb.append("    detachFromIndex: ").append(toIndentedString(detachFromIndex)).append("\n");
    sb.append("    attachTypedLink: ").append(toIndentedString(attachTypedLink)).append("\n");
    sb.append("    detachTypedLink: ").append(toIndentedString(detachTypedLink)).append("\n");
    sb.append("    updateLinkAttributes: ").append(toIndentedString(updateLinkAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreateObject");
    openapiFields.add("AttachObject");
    openapiFields.add("DetachObject");
    openapiFields.add("UpdateObjectAttributes");
    openapiFields.add("DeleteObject");
    openapiFields.add("AddFacetToObject");
    openapiFields.add("RemoveFacetFromObject");
    openapiFields.add("AttachPolicy");
    openapiFields.add("DetachPolicy");
    openapiFields.add("CreateIndex");
    openapiFields.add("AttachToIndex");
    openapiFields.add("DetachFromIndex");
    openapiFields.add("AttachTypedLink");
    openapiFields.add("DetachTypedLink");
    openapiFields.add("UpdateLinkAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchWriteOperationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchWriteOperationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchWriteOperationResponse is not found in the empty JSON string", BatchWriteOperationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchWriteOperationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchWriteOperationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CreateObject`
      if (jsonObj.get("CreateObject") != null && !jsonObj.get("CreateObject").isJsonNull()) {
        BatchWriteOperationResponseCreateObject.validateJsonElement(jsonObj.get("CreateObject"));
      }
      // validate the optional field `AttachObject`
      if (jsonObj.get("AttachObject") != null && !jsonObj.get("AttachObject").isJsonNull()) {
        BatchWriteOperationResponseAttachObject.validateJsonElement(jsonObj.get("AttachObject"));
      }
      // validate the optional field `DetachObject`
      if (jsonObj.get("DetachObject") != null && !jsonObj.get("DetachObject").isJsonNull()) {
        BatchWriteOperationResponseDetachObject.validateJsonElement(jsonObj.get("DetachObject"));
      }
      // validate the optional field `UpdateObjectAttributes`
      if (jsonObj.get("UpdateObjectAttributes") != null && !jsonObj.get("UpdateObjectAttributes").isJsonNull()) {
        BatchWriteOperationResponseUpdateObjectAttributes.validateJsonElement(jsonObj.get("UpdateObjectAttributes"));
      }
      // validate the optional field `DeleteObject`
      if (jsonObj.get("DeleteObject") != null && !jsonObj.get("DeleteObject").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("DeleteObject"));
      }
      // validate the optional field `AddFacetToObject`
      if (jsonObj.get("AddFacetToObject") != null && !jsonObj.get("AddFacetToObject").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("AddFacetToObject"));
      }
      // validate the optional field `RemoveFacetFromObject`
      if (jsonObj.get("RemoveFacetFromObject") != null && !jsonObj.get("RemoveFacetFromObject").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("RemoveFacetFromObject"));
      }
      // validate the optional field `AttachPolicy`
      if (jsonObj.get("AttachPolicy") != null && !jsonObj.get("AttachPolicy").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("AttachPolicy"));
      }
      // validate the optional field `DetachPolicy`
      if (jsonObj.get("DetachPolicy") != null && !jsonObj.get("DetachPolicy").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("DetachPolicy"));
      }
      // validate the optional field `CreateIndex`
      if (jsonObj.get("CreateIndex") != null && !jsonObj.get("CreateIndex").isJsonNull()) {
        BatchWriteOperationResponseCreateIndex.validateJsonElement(jsonObj.get("CreateIndex"));
      }
      // validate the optional field `AttachToIndex`
      if (jsonObj.get("AttachToIndex") != null && !jsonObj.get("AttachToIndex").isJsonNull()) {
        BatchWriteOperationResponseAttachToIndex.validateJsonElement(jsonObj.get("AttachToIndex"));
      }
      // validate the optional field `DetachFromIndex`
      if (jsonObj.get("DetachFromIndex") != null && !jsonObj.get("DetachFromIndex").isJsonNull()) {
        BatchWriteOperationResponseDetachFromIndex.validateJsonElement(jsonObj.get("DetachFromIndex"));
      }
      // validate the optional field `AttachTypedLink`
      if (jsonObj.get("AttachTypedLink") != null && !jsonObj.get("AttachTypedLink").isJsonNull()) {
        BatchWriteOperationResponseAttachTypedLink.validateJsonElement(jsonObj.get("AttachTypedLink"));
      }
      // validate the optional field `DetachTypedLink`
      if (jsonObj.get("DetachTypedLink") != null && !jsonObj.get("DetachTypedLink").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("DetachTypedLink"));
      }
      // validate the optional field `UpdateLinkAttributes`
      if (jsonObj.get("UpdateLinkAttributes") != null && !jsonObj.get("UpdateLinkAttributes").isJsonNull()) {
        Object.validateJsonElement(jsonObj.get("UpdateLinkAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchWriteOperationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchWriteOperationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchWriteOperationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchWriteOperationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchWriteOperationResponse>() {
           @Override
           public void write(JsonWriter out, BatchWriteOperationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchWriteOperationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchWriteOperationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchWriteOperationResponse
   * @throws IOException if the JSON string is invalid with respect to BatchWriteOperationResponse
   */
  public static BatchWriteOperationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchWriteOperationResponse.class);
  }

  /**
   * Convert an instance of BatchWriteOperationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

