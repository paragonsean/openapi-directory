/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TypedLinkFacetAttributeUpdateAttribute;
import org.openapitools.client.model.UpdateActionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A typed link facet attribute update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypedLinkFacetAttributeUpdate {
  public static final String SERIALIZED_NAME_ATTRIBUTE = "Attribute";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE)
  private TypedLinkFacetAttributeUpdateAttribute attribute;

  public static final String SERIALIZED_NAME_ACTION = "Action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private UpdateActionType action;

  public TypedLinkFacetAttributeUpdate() {
  }

  public TypedLinkFacetAttributeUpdate attribute(TypedLinkFacetAttributeUpdateAttribute attribute) {
    this.attribute = attribute;
    return this;
  }

  /**
   * Get attribute
   * @return attribute
   */
  @javax.annotation.Nonnull
  public TypedLinkFacetAttributeUpdateAttribute getAttribute() {
    return attribute;
  }

  public void setAttribute(TypedLinkFacetAttributeUpdateAttribute attribute) {
    this.attribute = attribute;
  }


  public TypedLinkFacetAttributeUpdate action(UpdateActionType action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public UpdateActionType getAction() {
    return action;
  }

  public void setAction(UpdateActionType action) {
    this.action = action;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypedLinkFacetAttributeUpdate typedLinkFacetAttributeUpdate = (TypedLinkFacetAttributeUpdate) o;
    return Objects.equals(this.attribute, typedLinkFacetAttributeUpdate.attribute) &&
        Objects.equals(this.action, typedLinkFacetAttributeUpdate.action);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute, action);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypedLinkFacetAttributeUpdate {\n");
    sb.append("    attribute: ").append(toIndentedString(attribute)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Attribute");
    openapiFields.add("Action");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Attribute");
    openapiRequiredFields.add("Action");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypedLinkFacetAttributeUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypedLinkFacetAttributeUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypedLinkFacetAttributeUpdate is not found in the empty JSON string", TypedLinkFacetAttributeUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypedLinkFacetAttributeUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypedLinkFacetAttributeUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TypedLinkFacetAttributeUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Attribute`
      TypedLinkFacetAttributeUpdateAttribute.validateJsonElement(jsonObj.get("Attribute"));
      // validate the required field `Action`
      UpdateActionType.validateJsonElement(jsonObj.get("Action"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypedLinkFacetAttributeUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypedLinkFacetAttributeUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypedLinkFacetAttributeUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypedLinkFacetAttributeUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<TypedLinkFacetAttributeUpdate>() {
           @Override
           public void write(JsonWriter out, TypedLinkFacetAttributeUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypedLinkFacetAttributeUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypedLinkFacetAttributeUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypedLinkFacetAttributeUpdate
   * @throws IOException if the JSON string is invalid with respect to TypedLinkFacetAttributeUpdate
   */
  public static TypedLinkFacetAttributeUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypedLinkFacetAttributeUpdate.class);
  }

  /**
   * Convert an instance of TypedLinkFacetAttributeUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

