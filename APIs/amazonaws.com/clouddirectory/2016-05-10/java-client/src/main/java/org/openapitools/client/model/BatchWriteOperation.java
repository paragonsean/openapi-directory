/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BatchWriteOperationAddFacetToObject;
import org.openapitools.client.model.BatchWriteOperationAttachObject;
import org.openapitools.client.model.BatchWriteOperationAttachPolicy;
import org.openapitools.client.model.BatchWriteOperationAttachToIndex;
import org.openapitools.client.model.BatchWriteOperationAttachTypedLink;
import org.openapitools.client.model.BatchWriteOperationCreateIndex;
import org.openapitools.client.model.BatchWriteOperationCreateObject;
import org.openapitools.client.model.BatchWriteOperationDeleteObject;
import org.openapitools.client.model.BatchWriteOperationDetachFromIndex;
import org.openapitools.client.model.BatchWriteOperationDetachObject;
import org.openapitools.client.model.BatchWriteOperationDetachPolicy;
import org.openapitools.client.model.BatchWriteOperationDetachTypedLink;
import org.openapitools.client.model.BatchWriteOperationRemoveFacetFromObject;
import org.openapitools.client.model.BatchWriteOperationUpdateLinkAttributes;
import org.openapitools.client.model.BatchWriteOperationUpdateObjectAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the output of a &lt;code&gt;BatchWrite&lt;/code&gt; operation. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchWriteOperation {
  public static final String SERIALIZED_NAME_CREATE_OBJECT = "CreateObject";
  @SerializedName(SERIALIZED_NAME_CREATE_OBJECT)
  private BatchWriteOperationCreateObject createObject;

  public static final String SERIALIZED_NAME_ATTACH_OBJECT = "AttachObject";
  @SerializedName(SERIALIZED_NAME_ATTACH_OBJECT)
  private BatchWriteOperationAttachObject attachObject;

  public static final String SERIALIZED_NAME_DETACH_OBJECT = "DetachObject";
  @SerializedName(SERIALIZED_NAME_DETACH_OBJECT)
  private BatchWriteOperationDetachObject detachObject;

  public static final String SERIALIZED_NAME_UPDATE_OBJECT_ATTRIBUTES = "UpdateObjectAttributes";
  @SerializedName(SERIALIZED_NAME_UPDATE_OBJECT_ATTRIBUTES)
  private BatchWriteOperationUpdateObjectAttributes updateObjectAttributes;

  public static final String SERIALIZED_NAME_DELETE_OBJECT = "DeleteObject";
  @SerializedName(SERIALIZED_NAME_DELETE_OBJECT)
  private BatchWriteOperationDeleteObject deleteObject;

  public static final String SERIALIZED_NAME_ADD_FACET_TO_OBJECT = "AddFacetToObject";
  @SerializedName(SERIALIZED_NAME_ADD_FACET_TO_OBJECT)
  private BatchWriteOperationAddFacetToObject addFacetToObject;

  public static final String SERIALIZED_NAME_REMOVE_FACET_FROM_OBJECT = "RemoveFacetFromObject";
  @SerializedName(SERIALIZED_NAME_REMOVE_FACET_FROM_OBJECT)
  private BatchWriteOperationRemoveFacetFromObject removeFacetFromObject;

  public static final String SERIALIZED_NAME_ATTACH_POLICY = "AttachPolicy";
  @SerializedName(SERIALIZED_NAME_ATTACH_POLICY)
  private BatchWriteOperationAttachPolicy attachPolicy;

  public static final String SERIALIZED_NAME_DETACH_POLICY = "DetachPolicy";
  @SerializedName(SERIALIZED_NAME_DETACH_POLICY)
  private BatchWriteOperationDetachPolicy detachPolicy;

  public static final String SERIALIZED_NAME_CREATE_INDEX = "CreateIndex";
  @SerializedName(SERIALIZED_NAME_CREATE_INDEX)
  private BatchWriteOperationCreateIndex createIndex;

  public static final String SERIALIZED_NAME_ATTACH_TO_INDEX = "AttachToIndex";
  @SerializedName(SERIALIZED_NAME_ATTACH_TO_INDEX)
  private BatchWriteOperationAttachToIndex attachToIndex;

  public static final String SERIALIZED_NAME_DETACH_FROM_INDEX = "DetachFromIndex";
  @SerializedName(SERIALIZED_NAME_DETACH_FROM_INDEX)
  private BatchWriteOperationDetachFromIndex detachFromIndex;

  public static final String SERIALIZED_NAME_ATTACH_TYPED_LINK = "AttachTypedLink";
  @SerializedName(SERIALIZED_NAME_ATTACH_TYPED_LINK)
  private BatchWriteOperationAttachTypedLink attachTypedLink;

  public static final String SERIALIZED_NAME_DETACH_TYPED_LINK = "DetachTypedLink";
  @SerializedName(SERIALIZED_NAME_DETACH_TYPED_LINK)
  private BatchWriteOperationDetachTypedLink detachTypedLink;

  public static final String SERIALIZED_NAME_UPDATE_LINK_ATTRIBUTES = "UpdateLinkAttributes";
  @SerializedName(SERIALIZED_NAME_UPDATE_LINK_ATTRIBUTES)
  private BatchWriteOperationUpdateLinkAttributes updateLinkAttributes;

  public BatchWriteOperation() {
  }

  public BatchWriteOperation createObject(BatchWriteOperationCreateObject createObject) {
    this.createObject = createObject;
    return this;
  }

  /**
   * Get createObject
   * @return createObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationCreateObject getCreateObject() {
    return createObject;
  }

  public void setCreateObject(BatchWriteOperationCreateObject createObject) {
    this.createObject = createObject;
  }


  public BatchWriteOperation attachObject(BatchWriteOperationAttachObject attachObject) {
    this.attachObject = attachObject;
    return this;
  }

  /**
   * Get attachObject
   * @return attachObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationAttachObject getAttachObject() {
    return attachObject;
  }

  public void setAttachObject(BatchWriteOperationAttachObject attachObject) {
    this.attachObject = attachObject;
  }


  public BatchWriteOperation detachObject(BatchWriteOperationDetachObject detachObject) {
    this.detachObject = detachObject;
    return this;
  }

  /**
   * Get detachObject
   * @return detachObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationDetachObject getDetachObject() {
    return detachObject;
  }

  public void setDetachObject(BatchWriteOperationDetachObject detachObject) {
    this.detachObject = detachObject;
  }


  public BatchWriteOperation updateObjectAttributes(BatchWriteOperationUpdateObjectAttributes updateObjectAttributes) {
    this.updateObjectAttributes = updateObjectAttributes;
    return this;
  }

  /**
   * Get updateObjectAttributes
   * @return updateObjectAttributes
   */
  @javax.annotation.Nullable
  public BatchWriteOperationUpdateObjectAttributes getUpdateObjectAttributes() {
    return updateObjectAttributes;
  }

  public void setUpdateObjectAttributes(BatchWriteOperationUpdateObjectAttributes updateObjectAttributes) {
    this.updateObjectAttributes = updateObjectAttributes;
  }


  public BatchWriteOperation deleteObject(BatchWriteOperationDeleteObject deleteObject) {
    this.deleteObject = deleteObject;
    return this;
  }

  /**
   * Get deleteObject
   * @return deleteObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationDeleteObject getDeleteObject() {
    return deleteObject;
  }

  public void setDeleteObject(BatchWriteOperationDeleteObject deleteObject) {
    this.deleteObject = deleteObject;
  }


  public BatchWriteOperation addFacetToObject(BatchWriteOperationAddFacetToObject addFacetToObject) {
    this.addFacetToObject = addFacetToObject;
    return this;
  }

  /**
   * Get addFacetToObject
   * @return addFacetToObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationAddFacetToObject getAddFacetToObject() {
    return addFacetToObject;
  }

  public void setAddFacetToObject(BatchWriteOperationAddFacetToObject addFacetToObject) {
    this.addFacetToObject = addFacetToObject;
  }


  public BatchWriteOperation removeFacetFromObject(BatchWriteOperationRemoveFacetFromObject removeFacetFromObject) {
    this.removeFacetFromObject = removeFacetFromObject;
    return this;
  }

  /**
   * Get removeFacetFromObject
   * @return removeFacetFromObject
   */
  @javax.annotation.Nullable
  public BatchWriteOperationRemoveFacetFromObject getRemoveFacetFromObject() {
    return removeFacetFromObject;
  }

  public void setRemoveFacetFromObject(BatchWriteOperationRemoveFacetFromObject removeFacetFromObject) {
    this.removeFacetFromObject = removeFacetFromObject;
  }


  public BatchWriteOperation attachPolicy(BatchWriteOperationAttachPolicy attachPolicy) {
    this.attachPolicy = attachPolicy;
    return this;
  }

  /**
   * Get attachPolicy
   * @return attachPolicy
   */
  @javax.annotation.Nullable
  public BatchWriteOperationAttachPolicy getAttachPolicy() {
    return attachPolicy;
  }

  public void setAttachPolicy(BatchWriteOperationAttachPolicy attachPolicy) {
    this.attachPolicy = attachPolicy;
  }


  public BatchWriteOperation detachPolicy(BatchWriteOperationDetachPolicy detachPolicy) {
    this.detachPolicy = detachPolicy;
    return this;
  }

  /**
   * Get detachPolicy
   * @return detachPolicy
   */
  @javax.annotation.Nullable
  public BatchWriteOperationDetachPolicy getDetachPolicy() {
    return detachPolicy;
  }

  public void setDetachPolicy(BatchWriteOperationDetachPolicy detachPolicy) {
    this.detachPolicy = detachPolicy;
  }


  public BatchWriteOperation createIndex(BatchWriteOperationCreateIndex createIndex) {
    this.createIndex = createIndex;
    return this;
  }

  /**
   * Get createIndex
   * @return createIndex
   */
  @javax.annotation.Nullable
  public BatchWriteOperationCreateIndex getCreateIndex() {
    return createIndex;
  }

  public void setCreateIndex(BatchWriteOperationCreateIndex createIndex) {
    this.createIndex = createIndex;
  }


  public BatchWriteOperation attachToIndex(BatchWriteOperationAttachToIndex attachToIndex) {
    this.attachToIndex = attachToIndex;
    return this;
  }

  /**
   * Get attachToIndex
   * @return attachToIndex
   */
  @javax.annotation.Nullable
  public BatchWriteOperationAttachToIndex getAttachToIndex() {
    return attachToIndex;
  }

  public void setAttachToIndex(BatchWriteOperationAttachToIndex attachToIndex) {
    this.attachToIndex = attachToIndex;
  }


  public BatchWriteOperation detachFromIndex(BatchWriteOperationDetachFromIndex detachFromIndex) {
    this.detachFromIndex = detachFromIndex;
    return this;
  }

  /**
   * Get detachFromIndex
   * @return detachFromIndex
   */
  @javax.annotation.Nullable
  public BatchWriteOperationDetachFromIndex getDetachFromIndex() {
    return detachFromIndex;
  }

  public void setDetachFromIndex(BatchWriteOperationDetachFromIndex detachFromIndex) {
    this.detachFromIndex = detachFromIndex;
  }


  public BatchWriteOperation attachTypedLink(BatchWriteOperationAttachTypedLink attachTypedLink) {
    this.attachTypedLink = attachTypedLink;
    return this;
  }

  /**
   * Get attachTypedLink
   * @return attachTypedLink
   */
  @javax.annotation.Nullable
  public BatchWriteOperationAttachTypedLink getAttachTypedLink() {
    return attachTypedLink;
  }

  public void setAttachTypedLink(BatchWriteOperationAttachTypedLink attachTypedLink) {
    this.attachTypedLink = attachTypedLink;
  }


  public BatchWriteOperation detachTypedLink(BatchWriteOperationDetachTypedLink detachTypedLink) {
    this.detachTypedLink = detachTypedLink;
    return this;
  }

  /**
   * Get detachTypedLink
   * @return detachTypedLink
   */
  @javax.annotation.Nullable
  public BatchWriteOperationDetachTypedLink getDetachTypedLink() {
    return detachTypedLink;
  }

  public void setDetachTypedLink(BatchWriteOperationDetachTypedLink detachTypedLink) {
    this.detachTypedLink = detachTypedLink;
  }


  public BatchWriteOperation updateLinkAttributes(BatchWriteOperationUpdateLinkAttributes updateLinkAttributes) {
    this.updateLinkAttributes = updateLinkAttributes;
    return this;
  }

  /**
   * Get updateLinkAttributes
   * @return updateLinkAttributes
   */
  @javax.annotation.Nullable
  public BatchWriteOperationUpdateLinkAttributes getUpdateLinkAttributes() {
    return updateLinkAttributes;
  }

  public void setUpdateLinkAttributes(BatchWriteOperationUpdateLinkAttributes updateLinkAttributes) {
    this.updateLinkAttributes = updateLinkAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchWriteOperation batchWriteOperation = (BatchWriteOperation) o;
    return Objects.equals(this.createObject, batchWriteOperation.createObject) &&
        Objects.equals(this.attachObject, batchWriteOperation.attachObject) &&
        Objects.equals(this.detachObject, batchWriteOperation.detachObject) &&
        Objects.equals(this.updateObjectAttributes, batchWriteOperation.updateObjectAttributes) &&
        Objects.equals(this.deleteObject, batchWriteOperation.deleteObject) &&
        Objects.equals(this.addFacetToObject, batchWriteOperation.addFacetToObject) &&
        Objects.equals(this.removeFacetFromObject, batchWriteOperation.removeFacetFromObject) &&
        Objects.equals(this.attachPolicy, batchWriteOperation.attachPolicy) &&
        Objects.equals(this.detachPolicy, batchWriteOperation.detachPolicy) &&
        Objects.equals(this.createIndex, batchWriteOperation.createIndex) &&
        Objects.equals(this.attachToIndex, batchWriteOperation.attachToIndex) &&
        Objects.equals(this.detachFromIndex, batchWriteOperation.detachFromIndex) &&
        Objects.equals(this.attachTypedLink, batchWriteOperation.attachTypedLink) &&
        Objects.equals(this.detachTypedLink, batchWriteOperation.detachTypedLink) &&
        Objects.equals(this.updateLinkAttributes, batchWriteOperation.updateLinkAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createObject, attachObject, detachObject, updateObjectAttributes, deleteObject, addFacetToObject, removeFacetFromObject, attachPolicy, detachPolicy, createIndex, attachToIndex, detachFromIndex, attachTypedLink, detachTypedLink, updateLinkAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchWriteOperation {\n");
    sb.append("    createObject: ").append(toIndentedString(createObject)).append("\n");
    sb.append("    attachObject: ").append(toIndentedString(attachObject)).append("\n");
    sb.append("    detachObject: ").append(toIndentedString(detachObject)).append("\n");
    sb.append("    updateObjectAttributes: ").append(toIndentedString(updateObjectAttributes)).append("\n");
    sb.append("    deleteObject: ").append(toIndentedString(deleteObject)).append("\n");
    sb.append("    addFacetToObject: ").append(toIndentedString(addFacetToObject)).append("\n");
    sb.append("    removeFacetFromObject: ").append(toIndentedString(removeFacetFromObject)).append("\n");
    sb.append("    attachPolicy: ").append(toIndentedString(attachPolicy)).append("\n");
    sb.append("    detachPolicy: ").append(toIndentedString(detachPolicy)).append("\n");
    sb.append("    createIndex: ").append(toIndentedString(createIndex)).append("\n");
    sb.append("    attachToIndex: ").append(toIndentedString(attachToIndex)).append("\n");
    sb.append("    detachFromIndex: ").append(toIndentedString(detachFromIndex)).append("\n");
    sb.append("    attachTypedLink: ").append(toIndentedString(attachTypedLink)).append("\n");
    sb.append("    detachTypedLink: ").append(toIndentedString(detachTypedLink)).append("\n");
    sb.append("    updateLinkAttributes: ").append(toIndentedString(updateLinkAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CreateObject");
    openapiFields.add("AttachObject");
    openapiFields.add("DetachObject");
    openapiFields.add("UpdateObjectAttributes");
    openapiFields.add("DeleteObject");
    openapiFields.add("AddFacetToObject");
    openapiFields.add("RemoveFacetFromObject");
    openapiFields.add("AttachPolicy");
    openapiFields.add("DetachPolicy");
    openapiFields.add("CreateIndex");
    openapiFields.add("AttachToIndex");
    openapiFields.add("DetachFromIndex");
    openapiFields.add("AttachTypedLink");
    openapiFields.add("DetachTypedLink");
    openapiFields.add("UpdateLinkAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchWriteOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchWriteOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchWriteOperation is not found in the empty JSON string", BatchWriteOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchWriteOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchWriteOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CreateObject`
      if (jsonObj.get("CreateObject") != null && !jsonObj.get("CreateObject").isJsonNull()) {
        BatchWriteOperationCreateObject.validateJsonElement(jsonObj.get("CreateObject"));
      }
      // validate the optional field `AttachObject`
      if (jsonObj.get("AttachObject") != null && !jsonObj.get("AttachObject").isJsonNull()) {
        BatchWriteOperationAttachObject.validateJsonElement(jsonObj.get("AttachObject"));
      }
      // validate the optional field `DetachObject`
      if (jsonObj.get("DetachObject") != null && !jsonObj.get("DetachObject").isJsonNull()) {
        BatchWriteOperationDetachObject.validateJsonElement(jsonObj.get("DetachObject"));
      }
      // validate the optional field `UpdateObjectAttributes`
      if (jsonObj.get("UpdateObjectAttributes") != null && !jsonObj.get("UpdateObjectAttributes").isJsonNull()) {
        BatchWriteOperationUpdateObjectAttributes.validateJsonElement(jsonObj.get("UpdateObjectAttributes"));
      }
      // validate the optional field `DeleteObject`
      if (jsonObj.get("DeleteObject") != null && !jsonObj.get("DeleteObject").isJsonNull()) {
        BatchWriteOperationDeleteObject.validateJsonElement(jsonObj.get("DeleteObject"));
      }
      // validate the optional field `AddFacetToObject`
      if (jsonObj.get("AddFacetToObject") != null && !jsonObj.get("AddFacetToObject").isJsonNull()) {
        BatchWriteOperationAddFacetToObject.validateJsonElement(jsonObj.get("AddFacetToObject"));
      }
      // validate the optional field `RemoveFacetFromObject`
      if (jsonObj.get("RemoveFacetFromObject") != null && !jsonObj.get("RemoveFacetFromObject").isJsonNull()) {
        BatchWriteOperationRemoveFacetFromObject.validateJsonElement(jsonObj.get("RemoveFacetFromObject"));
      }
      // validate the optional field `AttachPolicy`
      if (jsonObj.get("AttachPolicy") != null && !jsonObj.get("AttachPolicy").isJsonNull()) {
        BatchWriteOperationAttachPolicy.validateJsonElement(jsonObj.get("AttachPolicy"));
      }
      // validate the optional field `DetachPolicy`
      if (jsonObj.get("DetachPolicy") != null && !jsonObj.get("DetachPolicy").isJsonNull()) {
        BatchWriteOperationDetachPolicy.validateJsonElement(jsonObj.get("DetachPolicy"));
      }
      // validate the optional field `CreateIndex`
      if (jsonObj.get("CreateIndex") != null && !jsonObj.get("CreateIndex").isJsonNull()) {
        BatchWriteOperationCreateIndex.validateJsonElement(jsonObj.get("CreateIndex"));
      }
      // validate the optional field `AttachToIndex`
      if (jsonObj.get("AttachToIndex") != null && !jsonObj.get("AttachToIndex").isJsonNull()) {
        BatchWriteOperationAttachToIndex.validateJsonElement(jsonObj.get("AttachToIndex"));
      }
      // validate the optional field `DetachFromIndex`
      if (jsonObj.get("DetachFromIndex") != null && !jsonObj.get("DetachFromIndex").isJsonNull()) {
        BatchWriteOperationDetachFromIndex.validateJsonElement(jsonObj.get("DetachFromIndex"));
      }
      // validate the optional field `AttachTypedLink`
      if (jsonObj.get("AttachTypedLink") != null && !jsonObj.get("AttachTypedLink").isJsonNull()) {
        BatchWriteOperationAttachTypedLink.validateJsonElement(jsonObj.get("AttachTypedLink"));
      }
      // validate the optional field `DetachTypedLink`
      if (jsonObj.get("DetachTypedLink") != null && !jsonObj.get("DetachTypedLink").isJsonNull()) {
        BatchWriteOperationDetachTypedLink.validateJsonElement(jsonObj.get("DetachTypedLink"));
      }
      // validate the optional field `UpdateLinkAttributes`
      if (jsonObj.get("UpdateLinkAttributes") != null && !jsonObj.get("UpdateLinkAttributes").isJsonNull()) {
        BatchWriteOperationUpdateLinkAttributes.validateJsonElement(jsonObj.get("UpdateLinkAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchWriteOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchWriteOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchWriteOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchWriteOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchWriteOperation>() {
           @Override
           public void write(JsonWriter out, BatchWriteOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchWriteOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchWriteOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchWriteOperation
   * @throws IOException if the JSON string is invalid with respect to BatchWriteOperation
   */
  public static BatchWriteOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchWriteOperation.class);
  }

  /**
   * Convert an instance of BatchWriteOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

