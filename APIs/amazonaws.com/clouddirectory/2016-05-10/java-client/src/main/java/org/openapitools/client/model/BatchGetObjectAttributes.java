/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchGetObjectAttributesObjectReference;
import org.openapitools.client.model.BatchGetObjectAttributesSchemaFacet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Retrieves attributes within a facet that are associated with an object inside an &lt;a&gt;BatchRead&lt;/a&gt; operation. For more information, see &lt;a&gt;GetObjectAttributes&lt;/a&gt; and &lt;a&gt;BatchReadRequest$Operations&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchGetObjectAttributes {
  public static final String SERIALIZED_NAME_OBJECT_REFERENCE = "ObjectReference";
  @SerializedName(SERIALIZED_NAME_OBJECT_REFERENCE)
  private BatchGetObjectAttributesObjectReference objectReference;

  public static final String SERIALIZED_NAME_SCHEMA_FACET = "SchemaFacet";
  @SerializedName(SERIALIZED_NAME_SCHEMA_FACET)
  private BatchGetObjectAttributesSchemaFacet schemaFacet;

  public static final String SERIALIZED_NAME_ATTRIBUTE_NAMES = "AttributeNames";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_NAMES)
  private List attributeNames;

  public BatchGetObjectAttributes() {
  }

  public BatchGetObjectAttributes objectReference(BatchGetObjectAttributesObjectReference objectReference) {
    this.objectReference = objectReference;
    return this;
  }

  /**
   * Get objectReference
   * @return objectReference
   */
  @javax.annotation.Nonnull
  public BatchGetObjectAttributesObjectReference getObjectReference() {
    return objectReference;
  }

  public void setObjectReference(BatchGetObjectAttributesObjectReference objectReference) {
    this.objectReference = objectReference;
  }


  public BatchGetObjectAttributes schemaFacet(BatchGetObjectAttributesSchemaFacet schemaFacet) {
    this.schemaFacet = schemaFacet;
    return this;
  }

  /**
   * Get schemaFacet
   * @return schemaFacet
   */
  @javax.annotation.Nonnull
  public BatchGetObjectAttributesSchemaFacet getSchemaFacet() {
    return schemaFacet;
  }

  public void setSchemaFacet(BatchGetObjectAttributesSchemaFacet schemaFacet) {
    this.schemaFacet = schemaFacet;
  }


  public BatchGetObjectAttributes attributeNames(List attributeNames) {
    this.attributeNames = attributeNames;
    return this;
  }

  /**
   * Get attributeNames
   * @return attributeNames
   */
  @javax.annotation.Nonnull
  public List getAttributeNames() {
    return attributeNames;
  }

  public void setAttributeNames(List attributeNames) {
    this.attributeNames = attributeNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchGetObjectAttributes batchGetObjectAttributes = (BatchGetObjectAttributes) o;
    return Objects.equals(this.objectReference, batchGetObjectAttributes.objectReference) &&
        Objects.equals(this.schemaFacet, batchGetObjectAttributes.schemaFacet) &&
        Objects.equals(this.attributeNames, batchGetObjectAttributes.attributeNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectReference, schemaFacet, attributeNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchGetObjectAttributes {\n");
    sb.append("    objectReference: ").append(toIndentedString(objectReference)).append("\n");
    sb.append("    schemaFacet: ").append(toIndentedString(schemaFacet)).append("\n");
    sb.append("    attributeNames: ").append(toIndentedString(attributeNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObjectReference");
    openapiFields.add("SchemaFacet");
    openapiFields.add("AttributeNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ObjectReference");
    openapiRequiredFields.add("SchemaFacet");
    openapiRequiredFields.add("AttributeNames");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchGetObjectAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchGetObjectAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchGetObjectAttributes is not found in the empty JSON string", BatchGetObjectAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchGetObjectAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchGetObjectAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchGetObjectAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ObjectReference`
      BatchGetObjectAttributesObjectReference.validateJsonElement(jsonObj.get("ObjectReference"));
      // validate the required field `SchemaFacet`
      BatchGetObjectAttributesSchemaFacet.validateJsonElement(jsonObj.get("SchemaFacet"));
      // validate the required field `AttributeNames`
      List.validateJsonElement(jsonObj.get("AttributeNames"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchGetObjectAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchGetObjectAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchGetObjectAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchGetObjectAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchGetObjectAttributes>() {
           @Override
           public void write(JsonWriter out, BatchGetObjectAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchGetObjectAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchGetObjectAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchGetObjectAttributes
   * @throws IOException if the JSON string is invalid with respect to BatchGetObjectAttributes
   */
  public static BatchGetObjectAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchGetObjectAttributes.class);
  }

  /**
   * Convert an instance of BatchGetObjectAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

