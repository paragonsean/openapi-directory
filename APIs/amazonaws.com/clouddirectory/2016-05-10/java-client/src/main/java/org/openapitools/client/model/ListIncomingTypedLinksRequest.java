/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddFacetToObjectRequestObjectReference;
import org.openapitools.client.model.AttachTypedLinkRequestTypedLinkFacet;
import org.openapitools.client.model.TypedLinkAttributeRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListIncomingTypedLinksRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:57.596305-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListIncomingTypedLinksRequest {
  public static final String SERIALIZED_NAME_OBJECT_REFERENCE = "ObjectReference";
  @SerializedName(SERIALIZED_NAME_OBJECT_REFERENCE)
  private AddFacetToObjectRequestObjectReference objectReference;

  public static final String SERIALIZED_NAME_FILTER_ATTRIBUTE_RANGES = "FilterAttributeRanges";
  @SerializedName(SERIALIZED_NAME_FILTER_ATTRIBUTE_RANGES)
  private List<TypedLinkAttributeRange> filterAttributeRanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER_TYPED_LINK = "FilterTypedLink";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPED_LINK)
  private AttachTypedLinkRequestTypedLinkFacet filterTypedLink;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  /**
   * The consistency level to execute the request at.
   */
  @JsonAdapter(ConsistencyLevelEnum.Adapter.class)
  public enum ConsistencyLevelEnum {
    SERIALIZABLE("SERIALIZABLE"),
    
    EVENTUAL("EVENTUAL");

    private String value;

    ConsistencyLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConsistencyLevelEnum fromValue(String value) {
      for (ConsistencyLevelEnum b : ConsistencyLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConsistencyLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConsistencyLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConsistencyLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConsistencyLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConsistencyLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONSISTENCY_LEVEL = "ConsistencyLevel";
  @SerializedName(SERIALIZED_NAME_CONSISTENCY_LEVEL)
  private ConsistencyLevelEnum consistencyLevel;

  public ListIncomingTypedLinksRequest() {
  }

  public ListIncomingTypedLinksRequest objectReference(AddFacetToObjectRequestObjectReference objectReference) {
    this.objectReference = objectReference;
    return this;
  }

  /**
   * Get objectReference
   * @return objectReference
   */
  @javax.annotation.Nonnull
  public AddFacetToObjectRequestObjectReference getObjectReference() {
    return objectReference;
  }

  public void setObjectReference(AddFacetToObjectRequestObjectReference objectReference) {
    this.objectReference = objectReference;
  }


  public ListIncomingTypedLinksRequest filterAttributeRanges(List<TypedLinkAttributeRange> filterAttributeRanges) {
    this.filterAttributeRanges = filterAttributeRanges;
    return this;
  }

  public ListIncomingTypedLinksRequest addFilterAttributeRangesItem(TypedLinkAttributeRange filterAttributeRangesItem) {
    if (this.filterAttributeRanges == null) {
      this.filterAttributeRanges = new ArrayList<>();
    }
    this.filterAttributeRanges.add(filterAttributeRangesItem);
    return this;
  }

  /**
   * Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
   * @return filterAttributeRanges
   */
  @javax.annotation.Nullable
  public List<TypedLinkAttributeRange> getFilterAttributeRanges() {
    return filterAttributeRanges;
  }

  public void setFilterAttributeRanges(List<TypedLinkAttributeRange> filterAttributeRanges) {
    this.filterAttributeRanges = filterAttributeRanges;
  }


  public ListIncomingTypedLinksRequest filterTypedLink(AttachTypedLinkRequestTypedLinkFacet filterTypedLink) {
    this.filterTypedLink = filterTypedLink;
    return this;
  }

  /**
   * Get filterTypedLink
   * @return filterTypedLink
   */
  @javax.annotation.Nullable
  public AttachTypedLinkRequestTypedLinkFacet getFilterTypedLink() {
    return filterTypedLink;
  }

  public void setFilterTypedLink(AttachTypedLinkRequestTypedLinkFacet filterTypedLink) {
    this.filterTypedLink = filterTypedLink;
  }


  public ListIncomingTypedLinksRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * The pagination token.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListIncomingTypedLinksRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to retrieve.
   * minimum: 1
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListIncomingTypedLinksRequest consistencyLevel(ConsistencyLevelEnum consistencyLevel) {
    this.consistencyLevel = consistencyLevel;
    return this;
  }

  /**
   * The consistency level to execute the request at.
   * @return consistencyLevel
   */
  @javax.annotation.Nullable
  public ConsistencyLevelEnum getConsistencyLevel() {
    return consistencyLevel;
  }

  public void setConsistencyLevel(ConsistencyLevelEnum consistencyLevel) {
    this.consistencyLevel = consistencyLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListIncomingTypedLinksRequest listIncomingTypedLinksRequest = (ListIncomingTypedLinksRequest) o;
    return Objects.equals(this.objectReference, listIncomingTypedLinksRequest.objectReference) &&
        Objects.equals(this.filterAttributeRanges, listIncomingTypedLinksRequest.filterAttributeRanges) &&
        Objects.equals(this.filterTypedLink, listIncomingTypedLinksRequest.filterTypedLink) &&
        Objects.equals(this.nextToken, listIncomingTypedLinksRequest.nextToken) &&
        Objects.equals(this.maxResults, listIncomingTypedLinksRequest.maxResults) &&
        Objects.equals(this.consistencyLevel, listIncomingTypedLinksRequest.consistencyLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(objectReference, filterAttributeRanges, filterTypedLink, nextToken, maxResults, consistencyLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListIncomingTypedLinksRequest {\n");
    sb.append("    objectReference: ").append(toIndentedString(objectReference)).append("\n");
    sb.append("    filterAttributeRanges: ").append(toIndentedString(filterAttributeRanges)).append("\n");
    sb.append("    filterTypedLink: ").append(toIndentedString(filterTypedLink)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    consistencyLevel: ").append(toIndentedString(consistencyLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ObjectReference");
    openapiFields.add("FilterAttributeRanges");
    openapiFields.add("FilterTypedLink");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("ConsistencyLevel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ObjectReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListIncomingTypedLinksRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListIncomingTypedLinksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListIncomingTypedLinksRequest is not found in the empty JSON string", ListIncomingTypedLinksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListIncomingTypedLinksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListIncomingTypedLinksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ListIncomingTypedLinksRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ObjectReference`
      AddFacetToObjectRequestObjectReference.validateJsonElement(jsonObj.get("ObjectReference"));
      if (jsonObj.get("FilterAttributeRanges") != null && !jsonObj.get("FilterAttributeRanges").isJsonNull()) {
        JsonArray jsonArrayfilterAttributeRanges = jsonObj.getAsJsonArray("FilterAttributeRanges");
        if (jsonArrayfilterAttributeRanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("FilterAttributeRanges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `FilterAttributeRanges` to be an array in the JSON string but got `%s`", jsonObj.get("FilterAttributeRanges").toString()));
          }

          // validate the optional field `FilterAttributeRanges` (array)
          for (int i = 0; i < jsonArrayfilterAttributeRanges.size(); i++) {
            TypedLinkAttributeRange.validateJsonElement(jsonArrayfilterAttributeRanges.get(i));
          };
        }
      }
      // validate the optional field `FilterTypedLink`
      if (jsonObj.get("FilterTypedLink") != null && !jsonObj.get("FilterTypedLink").isJsonNull()) {
        AttachTypedLinkRequestTypedLinkFacet.validateJsonElement(jsonObj.get("FilterTypedLink"));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("ConsistencyLevel") != null && !jsonObj.get("ConsistencyLevel").isJsonNull()) && !jsonObj.get("ConsistencyLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ConsistencyLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ConsistencyLevel").toString()));
      }
      // validate the optional field `ConsistencyLevel`
      if (jsonObj.get("ConsistencyLevel") != null && !jsonObj.get("ConsistencyLevel").isJsonNull()) {
        ConsistencyLevelEnum.validateJsonElement(jsonObj.get("ConsistencyLevel"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListIncomingTypedLinksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListIncomingTypedLinksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListIncomingTypedLinksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListIncomingTypedLinksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListIncomingTypedLinksRequest>() {
           @Override
           public void write(JsonWriter out, ListIncomingTypedLinksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListIncomingTypedLinksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListIncomingTypedLinksRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListIncomingTypedLinksRequest
   * @throws IOException if the JSON string is invalid with respect to ListIncomingTypedLinksRequest
   */
  public static ListIncomingTypedLinksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListIncomingTypedLinksRequest.class);
  }

  /**
   * Convert an instance of ListIncomingTypedLinksRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

