/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessDeniedException;
import org.openapitools.client.model.AddFacetToObjectRequest;
import org.openapitools.client.model.ApplySchemaRequest;
import org.openapitools.client.model.ApplySchemaResponse;
import org.openapitools.client.model.AttachObjectRequest;
import org.openapitools.client.model.AttachObjectResponse;
import org.openapitools.client.model.AttachPolicyRequest;
import org.openapitools.client.model.AttachToIndexRequest;
import org.openapitools.client.model.AttachToIndexResponse;
import org.openapitools.client.model.AttachTypedLinkRequest;
import org.openapitools.client.model.AttachTypedLinkResponse;
import org.openapitools.client.model.BatchReadRequest;
import org.openapitools.client.model.BatchReadResponse;
import org.openapitools.client.model.BatchWriteException;
import org.openapitools.client.model.BatchWriteRequest;
import org.openapitools.client.model.BatchWriteResponse;
import org.openapitools.client.model.CannotListParentOfRootException;
import org.openapitools.client.model.CreateDirectoryRequest;
import org.openapitools.client.model.CreateDirectoryResponse;
import org.openapitools.client.model.CreateFacetRequest;
import org.openapitools.client.model.CreateIndexRequest;
import org.openapitools.client.model.CreateIndexResponse;
import org.openapitools.client.model.CreateObjectRequest;
import org.openapitools.client.model.CreateObjectResponse;
import org.openapitools.client.model.CreateSchemaRequest;
import org.openapitools.client.model.CreateSchemaResponse;
import org.openapitools.client.model.CreateTypedLinkFacetRequest;
import org.openapitools.client.model.DeleteDirectoryResponse;
import org.openapitools.client.model.DeleteFacetRequest;
import org.openapitools.client.model.DeleteObjectRequest;
import org.openapitools.client.model.DeleteSchemaResponse;
import org.openapitools.client.model.DeleteTypedLinkFacetRequest;
import org.openapitools.client.model.DetachFromIndexResponse;
import org.openapitools.client.model.DetachObjectRequest;
import org.openapitools.client.model.DetachObjectResponse;
import org.openapitools.client.model.DetachTypedLinkRequest;
import org.openapitools.client.model.DirectoryAlreadyExistsException;
import org.openapitools.client.model.DirectoryDeletedException;
import org.openapitools.client.model.DirectoryNotDisabledException;
import org.openapitools.client.model.DirectoryNotEnabledException;
import org.openapitools.client.model.DisableDirectoryResponse;
import org.openapitools.client.model.EnableDirectoryResponse;
import org.openapitools.client.model.FacetAlreadyExistsException;
import org.openapitools.client.model.FacetInUseException;
import org.openapitools.client.model.FacetNotFoundException;
import org.openapitools.client.model.FacetValidationException;
import org.openapitools.client.model.GetAppliedSchemaVersionRequest;
import org.openapitools.client.model.GetAppliedSchemaVersionResponse;
import org.openapitools.client.model.GetDirectoryResponse;
import org.openapitools.client.model.GetFacetRequest;
import org.openapitools.client.model.GetFacetResponse;
import org.openapitools.client.model.GetLinkAttributesRequest;
import org.openapitools.client.model.GetLinkAttributesResponse;
import org.openapitools.client.model.GetObjectAttributesRequest;
import org.openapitools.client.model.GetObjectAttributesResponse;
import org.openapitools.client.model.GetObjectInformationResponse;
import org.openapitools.client.model.GetSchemaAsJsonResponse;
import org.openapitools.client.model.GetTypedLinkFacetInformationResponse;
import org.openapitools.client.model.IncompatibleSchemaException;
import org.openapitools.client.model.IndexedAttributeMissingException;
import org.openapitools.client.model.InternalServiceException;
import org.openapitools.client.model.InvalidArnException;
import org.openapitools.client.model.InvalidAttachmentException;
import org.openapitools.client.model.InvalidFacetUpdateException;
import org.openapitools.client.model.InvalidNextTokenException;
import org.openapitools.client.model.InvalidRuleException;
import org.openapitools.client.model.InvalidSchemaDocException;
import org.openapitools.client.model.InvalidTaggingRequestException;
import org.openapitools.client.model.LimitExceededException;
import org.openapitools.client.model.LinkNameAlreadyInUseException;
import org.openapitools.client.model.ListAppliedSchemaArnsRequest;
import org.openapitools.client.model.ListAppliedSchemaArnsResponse;
import org.openapitools.client.model.ListAttachedIndicesRequest;
import org.openapitools.client.model.ListAttachedIndicesResponse;
import org.openapitools.client.model.ListDevelopmentSchemaArnsRequest;
import org.openapitools.client.model.ListDevelopmentSchemaArnsResponse;
import org.openapitools.client.model.ListDirectoriesRequest;
import org.openapitools.client.model.ListDirectoriesResponse;
import org.openapitools.client.model.ListFacetAttributesRequest;
import org.openapitools.client.model.ListFacetAttributesResponse;
import org.openapitools.client.model.ListFacetNamesResponse;
import org.openapitools.client.model.ListIncomingTypedLinksRequest;
import org.openapitools.client.model.ListIncomingTypedLinksResponse;
import org.openapitools.client.model.ListIndexRequest;
import org.openapitools.client.model.ListIndexResponse;
import org.openapitools.client.model.ListObjectAttributesRequest;
import org.openapitools.client.model.ListObjectAttributesResponse;
import org.openapitools.client.model.ListObjectChildrenRequest;
import org.openapitools.client.model.ListObjectChildrenResponse;
import org.openapitools.client.model.ListObjectParentPathsResponse;
import org.openapitools.client.model.ListObjectParentsResponse;
import org.openapitools.client.model.ListObjectPoliciesResponse;
import org.openapitools.client.model.ListOutgoingTypedLinksResponse;
import org.openapitools.client.model.ListPolicyAttachmentsRequest;
import org.openapitools.client.model.ListPolicyAttachmentsResponse;
import org.openapitools.client.model.ListPublishedSchemaArnsRequest;
import org.openapitools.client.model.ListPublishedSchemaArnsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTypedLinkFacetAttributesRequest;
import org.openapitools.client.model.ListTypedLinkFacetAttributesResponse;
import org.openapitools.client.model.ListTypedLinkFacetNamesResponse;
import org.openapitools.client.model.LookupPolicyRequest;
import org.openapitools.client.model.LookupPolicyResponse;
import org.openapitools.client.model.NotIndexException;
import org.openapitools.client.model.NotNodeException;
import org.openapitools.client.model.NotPolicyException;
import org.openapitools.client.model.ObjectAlreadyDetachedException;
import org.openapitools.client.model.ObjectNotDetachedException;
import org.openapitools.client.model.PublishSchemaRequest;
import org.openapitools.client.model.PublishSchemaResponse;
import org.openapitools.client.model.PutSchemaFromJsonRequest;
import org.openapitools.client.model.PutSchemaFromJsonResponse;
import org.openapitools.client.model.RemoveFacetFromObjectRequest;
import org.openapitools.client.model.ResourceNotFoundException;
import org.openapitools.client.model.RetryableConflictException;
import org.openapitools.client.model.SchemaAlreadyExistsException;
import org.openapitools.client.model.SchemaAlreadyPublishedException;
import org.openapitools.client.model.StillContainsLinksException;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UnsupportedIndexTypeException;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateFacetRequest;
import org.openapitools.client.model.UpdateLinkAttributesRequest;
import org.openapitools.client.model.UpdateObjectAttributesRequest;
import org.openapitools.client.model.UpdateObjectAttributesResponse;
import org.openapitools.client.model.UpdateSchemaRequest;
import org.openapitools.client.model.UpdateSchemaResponse;
import org.openapitools.client.model.UpdateTypedLinkFacetRequest;
import org.openapitools.client.model.UpgradeAppliedSchemaRequest;
import org.openapitools.client.model.UpgradeAppliedSchemaResponse;
import org.openapitools.client.model.UpgradePublishedSchemaRequest;
import org.openapitools.client.model.UpgradePublishedSchemaResponse;
import org.openapitools.client.model.ValidationException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Adds a new &lt;a&gt;Facet&lt;/a&gt; to an object. An object can have more than one facet applied on it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFacetToObjectTest() throws ApiException {
        String xAmzDataPartition = null;
        AddFacetToObjectRequest addFacetToObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.addFacetToObject(xAmzDataPartition, addFacetToObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Copies the input published schema, at the specified version, into the &lt;a&gt;Directory&lt;/a&gt; with the same name and version as that of the published schema.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applySchemaTest() throws ApiException {
        String xAmzDataPartition = null;
        ApplySchemaRequest applySchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ApplySchemaResponse response = api.applySchema(xAmzDataPartition, applySchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Attaches an existing object to another object. An object can be accessed in two ways:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Using the path&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;ObjectIdentifier&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachObjectTest() throws ApiException {
        String xAmzDataPartition = null;
        AttachObjectRequest attachObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachObjectResponse response = api.attachObject(xAmzDataPartition, attachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches a policy object to a regular object. An object can have a limited number of attached policies.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachPolicyTest() throws ApiException {
        String xAmzDataPartition = null;
        AttachPolicyRequest attachPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.attachPolicy(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches the specified object to the specified index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachToIndexTest() throws ApiException {
        String xAmzDataPartition = null;
        AttachToIndexRequest attachToIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachToIndexResponse response = api.attachToIndex(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attaches a typed link to a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachTypedLinkTest() throws ApiException {
        String xAmzDataPartition = null;
        AttachTypedLinkRequest attachTypedLinkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AttachTypedLinkResponse response = api.attachTypedLink(xAmzDataPartition, attachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Performs all the read operations in a batch. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchReadTest() throws ApiException {
        String xAmzDataPartition = null;
        BatchReadRequest batchReadRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        BatchReadResponse response = api.batchRead(xAmzDataPartition, batchReadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel);
        // TODO: test validations
    }

    /**
     * Performs all the write operations in a batch. Either all the operations succeed or none.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchWriteTest() throws ApiException {
        String xAmzDataPartition = null;
        BatchWriteRequest batchWriteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchWriteResponse response = api.batchWrite(xAmzDataPartition, batchWriteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a &lt;a&gt;Directory&lt;/a&gt; by copying the published schema into the directory. A directory cannot be created without a schema.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectoryTest() throws ApiException {
        String xAmzDataPartition = null;
        CreateDirectoryRequest createDirectoryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDirectoryResponse response = api.createDirectory(xAmzDataPartition, createDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new &lt;a&gt;Facet&lt;/a&gt; in a schema. Facet creation is allowed only in development or applied schemas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        CreateFacetRequest createFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createFacet(xAmzDataPartition, createFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an index object. See &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_indexing.html\&quot;&gt;Indexing&lt;/a&gt; for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIndexTest() throws ApiException {
        String xAmzDataPartition = null;
        CreateIndexRequest createIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIndexResponse response = api.createIndex(xAmzDataPartition, createIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an object in a &lt;a&gt;Directory&lt;/a&gt;. Additionally attaches the object to a parent, if a parent reference and &lt;code&gt;LinkName&lt;/code&gt; is specified. An object is simply a collection of &lt;a&gt;Facet&lt;/a&gt; attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createObjectTest() throws ApiException {
        String xAmzDataPartition = null;
        CreateObjectRequest createObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateObjectResponse response = api.createObject(xAmzDataPartition, createObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a new schema in a development state. A schema can exist in three phases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Development:&lt;/i&gt; This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Published:&lt;/i&gt; Published schemas are immutable and have a version associated with them.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Applied:&lt;/i&gt; Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSchemaTest() throws ApiException {
        CreateSchemaRequest createSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSchemaResponse response = api.createSchema(createSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTypedLinkFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        CreateTypedLinkFacetRequest createTypedLinkFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createTypedLinkFacet(xAmzDataPartition, createTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDirectoryTest() throws ApiException {
        String xAmzDataPartition = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteDirectoryResponse response = api.deleteDirectory(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a given &lt;a&gt;Facet&lt;/a&gt;. All attributes and &lt;a&gt;Rule&lt;/a&gt;s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        DeleteFacetRequest deleteFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteFacet(xAmzDataPartition, deleteFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteObjectTest() throws ApiException {
        String xAmzDataPartition = null;
        DeleteObjectRequest deleteObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteObject(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a given schema. Schemas in a development and published state can only be deleted. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaTest() throws ApiException {
        String xAmzDataPartition = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DeleteSchemaResponse response = api.deleteSchema(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTypedLinkFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteTypedLinkFacet(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches the specified object from the specified index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachFromIndexTest() throws ApiException {
        String xAmzDataPartition = null;
        AttachToIndexRequest attachToIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachFromIndexResponse response = api.detachFromIndex(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachObjectTest() throws ApiException {
        String xAmzDataPartition = null;
        DetachObjectRequest detachObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DetachObjectResponse response = api.detachObject(xAmzDataPartition, detachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches a policy from an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachPolicyTest() throws ApiException {
        String xAmzDataPartition = null;
        AttachPolicyRequest attachPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.detachPolicy(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Detaches a typed link from a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void detachTypedLinkTest() throws ApiException {
        String xAmzDataPartition = null;
        DetachTypedLinkRequest detachTypedLinkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.detachTypedLink(xAmzDataPartition, detachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableDirectoryTest() throws ApiException {
        String xAmzDataPartition = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DisableDirectoryResponse response = api.disableDirectory(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableDirectoryTest() throws ApiException {
        String xAmzDataPartition = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        EnableDirectoryResponse response = api.enableDirectory(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns current applied schema version ARN, including the minor version in use.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppliedSchemaVersionTest() throws ApiException {
        GetAppliedSchemaVersionRequest getAppliedSchemaVersionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAppliedSchemaVersionResponse response = api.getAppliedSchemaVersion(getAppliedSchemaVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves metadata about a directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectoryTest() throws ApiException {
        String xAmzDataPartition = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDirectoryResponse response = api.getDirectory(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets details of the &lt;a&gt;Facet&lt;/a&gt;, such as facet name, attributes, &lt;a&gt;Rule&lt;/a&gt;s, or &lt;code&gt;ObjectType&lt;/code&gt;. You can call this on all kinds of schema facets -- published, development, or applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        GetFacetRequest getFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetFacetResponse response = api.getFacet(xAmzDataPartition, getFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves attributes that are associated with a typed link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLinkAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        GetLinkAttributesRequest getLinkAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLinkAttributesResponse response = api.getLinkAttributes(xAmzDataPartition, getLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves attributes within a facet that are associated with an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        GetObjectAttributesRequest getObjectAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        GetObjectAttributesResponse response = api.getObjectAttributes(xAmzDataPartition, getObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel);
        // TODO: test validations
    }

    /**
     * Retrieves metadata about an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getObjectInformationTest() throws ApiException {
        String xAmzDataPartition = null;
        DeleteObjectRequest deleteObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        GetObjectInformationResponse response = api.getObjectInformation(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel);
        // TODO: test validations
    }

    /**
     * Retrieves a JSON representation of the schema. See &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSchemaAsJsonTest() throws ApiException {
        String xAmzDataPartition = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSchemaAsJsonResponse response = api.getSchemaAsJson(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the identity attribute order for a specific &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTypedLinkFacetInformationTest() throws ApiException {
        String xAmzDataPartition = null;
        DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTypedLinkFacetInformationResponse response = api.getTypedLinkFacetInformation(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists schema major versions applied to a directory. If &lt;code&gt;SchemaArn&lt;/code&gt; is provided, lists the minor version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppliedSchemaArnsTest() throws ApiException {
        ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListAppliedSchemaArnsResponse response = api.listAppliedSchemaArns(listAppliedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists indices attached to the specified object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAttachedIndicesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListAttachedIndicesRequest listAttachedIndicesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListAttachedIndicesResponse response = api.listAttachedIndices(xAmzDataPartition, listAttachedIndicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDevelopmentSchemaArnsTest() throws ApiException {
        ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDevelopmentSchemaArnsResponse response = api.listDevelopmentSchemaArns(listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists directories created within an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDirectoriesTest() throws ApiException {
        ListDirectoriesRequest listDirectoriesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDirectoriesResponse response = api.listDirectories(listDirectoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves attributes attached to the facet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFacetAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListFacetAttributesRequest listFacetAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFacetAttributesResponse response = api.listFacetAttributes(xAmzDataPartition, listFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves the names of facets that exist in a schema.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFacetNamesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListFacetNamesResponse response = api.listFacetNames(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all the incoming &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIncomingTypedLinksTest() throws ApiException {
        String xAmzDataPartition = null;
        ListIncomingTypedLinksRequest listIncomingTypedLinksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListIncomingTypedLinksResponse response = api.listIncomingTypedLinks(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists objects attached to the specified index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listIndexTest() throws ApiException {
        String xAmzDataPartition = null;
        ListIndexRequest listIndexRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListIndexResponse response = api.listIndex(xAmzDataPartition, listIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all attributes that are associated with an object. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListObjectAttributesRequest listObjectAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListObjectAttributesResponse response = api.listObjectAttributes(xAmzDataPartition, listObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of child objects that are associated with a given object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectChildrenTest() throws ApiException {
        String xAmzDataPartition = null;
        ListObjectChildrenRequest listObjectChildrenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListObjectChildrenResponse response = api.listObjectChildren(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#dirstructure\&quot;&gt;Directory Structure&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined &lt;code&gt;MaxResults&lt;/code&gt;, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectParentPathsTest() throws ApiException {
        String xAmzDataPartition = null;
        ListObjectChildrenRequest listObjectChildrenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListObjectParentPathsResponse response = api.listObjectParentPaths(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists parent objects that are associated with a given object in pagination fashion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectParentsTest() throws ApiException {
        String xAmzDataPartition = null;
        ListObjectChildrenRequest listObjectChildrenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListObjectParentsResponse response = api.listObjectParents(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns policies attached to an object in pagination fashion.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listObjectPoliciesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListObjectChildrenRequest listObjectChildrenRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListObjectPoliciesResponse response = api.listObjectPolicies(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all the outgoing &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOutgoingTypedLinksTest() throws ApiException {
        String xAmzDataPartition = null;
        ListIncomingTypedLinksRequest listIncomingTypedLinksRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListOutgoingTypedLinksResponse response = api.listOutgoingTypedLinks(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns all of the &lt;code&gt;ObjectIdentifiers&lt;/code&gt; to which a given policy is attached.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPolicyAttachmentsTest() throws ApiException {
        String xAmzDataPartition = null;
        ListPolicyAttachmentsRequest listPolicyAttachmentsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String xAmzConsistencyLevel = null;
        String maxResults = null;
        String nextToken = null;
        ListPolicyAttachmentsResponse response = api.listPolicyAttachments(xAmzDataPartition, listPolicyAttachmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the major version families of each published schema. If a major version ARN is provided as &lt;code&gt;SchemaArn&lt;/code&gt;, the minor version revisions in that family are listed instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPublishedSchemaArnsTest() throws ApiException {
        ListPublishedSchemaArnsRequest listPublishedSchemaArnsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPublishedSchemaArnsResponse response = api.listPublishedSchemaArns(listPublishedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        ListTagsForResourceRequest listTagsForResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTagsForResourceResponse response = api.listTagsForResource(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of all attribute definitions for a particular &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTypedLinkFacetAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListTypedLinkFacetAttributesRequest listTypedLinkFacetAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTypedLinkFacetAttributesResponse response = api.listTypedLinkFacetAttributes(xAmzDataPartition, listTypedLinkFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a paginated list of &lt;code&gt;TypedLink&lt;/code&gt; facet names for a particular schema. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTypedLinkFacetNamesTest() throws ApiException {
        String xAmzDataPartition = null;
        ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTypedLinkFacetNamesResponse response = api.listTypedLinkFacetNames(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all policies from the root of the &lt;a&gt;Directory&lt;/a&gt; to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don&#39;t have the policies attached, it returns the &lt;code&gt;ObjectIdentifier&lt;/code&gt; for such objects. If policies are present, it returns &lt;code&gt;ObjectIdentifier&lt;/code&gt;, &lt;code&gt;policyId&lt;/code&gt;, and &lt;code&gt;policyType&lt;/code&gt;. Paths that don&#39;t lead to the root from the target object are ignored. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_key_concepts.html#policies\&quot;&gt;Policies&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lookupPolicyTest() throws ApiException {
        String xAmzDataPartition = null;
        LookupPolicyRequest lookupPolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        LookupPolicyResponse response = api.lookupPolicy(xAmzDataPartition, lookupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Publishes a development schema with a major version and a recommended minor version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void publishSchemaTest() throws ApiException {
        String xAmzDataPartition = null;
        PublishSchemaRequest publishSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PublishSchemaResponse response = api.publishSchema(xAmzDataPartition, publishSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows a schema to be updated using JSON upload. Only available for development schemas. See &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/cd_schemas.html#jsonformat\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSchemaFromJsonTest() throws ApiException {
        String xAmzDataPartition = null;
        PutSchemaFromJsonRequest putSchemaFromJsonRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        PutSchemaFromJsonResponse response = api.putSchemaFromJson(xAmzDataPartition, putSchemaFromJsonRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes the specified facet from the specified object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFacetFromObjectTest() throws ApiException {
        String xAmzDataPartition = null;
        RemoveFacetFromObjectRequest removeFacetFromObjectRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeFacetFromObject(xAmzDataPartition, removeFacetFromObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * An API operation for adding tags to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * An API operation for removing tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        UntagResourceRequest untagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.untagResource(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Adds new &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deletes existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        UpdateFacetRequest updateFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateFacet(xAmzDataPartition, updateFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its &lt;code&gt;IdentityAttributeOrder&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLinkAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        UpdateLinkAttributesRequest updateLinkAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLinkAttributes(xAmzDataPartition, updateLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a given object&#39;s attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateObjectAttributesTest() throws ApiException {
        String xAmzDataPartition = null;
        UpdateObjectAttributesRequest updateObjectAttributesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateObjectAttributesResponse response = api.updateObjectAttributes(xAmzDataPartition, updateObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the schema name with a new name. Only development schema names can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSchemaTest() throws ApiException {
        String xAmzDataPartition = null;
        UpdateSchemaRequest updateSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSchemaResponse response = api.updateSchema(xAmzDataPartition, updateSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;http://docs.aws.amazon.com/directoryservice/latest/admin-guide/objectsandlinks.html#typedlink\&quot;&gt;Typed link&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypedLinkFacetTest() throws ApiException {
        String xAmzDataPartition = null;
        UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateTypedLinkFacet(xAmzDataPartition, updateTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Upgrades a single directory in-place using the &lt;code&gt;PublishedSchemaArn&lt;/code&gt; with schema updates found in &lt;code&gt;MinorVersion&lt;/code&gt;. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradeAppliedSchemaTest() throws ApiException {
        UpgradeAppliedSchemaRequest upgradeAppliedSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpgradeAppliedSchemaResponse response = api.upgradeAppliedSchema(upgradeAppliedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Upgrades a published schema under a new minor version revision using the current contents of &lt;code&gt;DevelopmentSchemaArn&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upgradePublishedSchemaTest() throws ApiException {
        UpgradePublishedSchemaRequest upgradePublishedSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpgradePublishedSchemaResponse response = api.upgradePublishedSchema(upgradePublishedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
