/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListObjectAttributesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListObjectAttributesRequest::OAIListObjectAttributesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListObjectAttributesRequest::OAIListObjectAttributesRequest() {
    this->initializeModel();
}

OAIListObjectAttributesRequest::~OAIListObjectAttributesRequest() {}

void OAIListObjectAttributesRequest::initializeModel() {

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_facet_filter_isSet = false;
    m_facet_filter_isValid = false;
}

void OAIListObjectAttributesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListObjectAttributesRequest::fromJsonObject(QJsonObject json) {

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_facet_filter_isValid = ::OpenAPI::fromJsonValue(m_facet_filter, json[QString("FacetFilter")]);
    m_facet_filter_isSet = !json[QString("FacetFilter")].isNull() && m_facet_filter_isValid;
}

QString OAIListObjectAttributesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListObjectAttributesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_facet_filter.isSet()) {
        obj.insert(QString("FacetFilter"), ::OpenAPI::toJsonValue(m_facet_filter));
    }
    return obj;
}

OAIBatchListIncomingTypedLinks_ObjectReference OAIListObjectAttributesRequest::getObjectReference() const {
    return m_object_reference;
}
void OAIListObjectAttributesRequest::setObjectReference(const OAIBatchListIncomingTypedLinks_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIListObjectAttributesRequest::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIListObjectAttributesRequest::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

QString OAIListObjectAttributesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListObjectAttributesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListObjectAttributesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListObjectAttributesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListObjectAttributesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListObjectAttributesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListObjectAttributesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListObjectAttributesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIBatchListObjectAttributes_FacetFilter OAIListObjectAttributesRequest::getFacetFilter() const {
    return m_facet_filter;
}
void OAIListObjectAttributesRequest::setFacetFilter(const OAIBatchListObjectAttributes_FacetFilter &facet_filter) {
    m_facet_filter = facet_filter;
    m_facet_filter_isSet = true;
}

bool OAIListObjectAttributesRequest::is_facet_filter_Set() const{
    return m_facet_filter_isSet;
}

bool OAIListObjectAttributesRequest::is_facet_filter_Valid() const{
    return m_facet_filter_isValid;
}

bool OAIListObjectAttributesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListObjectAttributesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_reference_isValid && true;
}

} // namespace OpenAPI
