/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchReadOperation_ListPolicyAttachments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchReadOperation_ListPolicyAttachments::OAIBatchReadOperation_ListPolicyAttachments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchReadOperation_ListPolicyAttachments::OAIBatchReadOperation_ListPolicyAttachments() {
    this->initializeModel();
}

OAIBatchReadOperation_ListPolicyAttachments::~OAIBatchReadOperation_ListPolicyAttachments() {}

void OAIBatchReadOperation_ListPolicyAttachments::initializeModel() {

    m_policy_reference_isSet = false;
    m_policy_reference_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIBatchReadOperation_ListPolicyAttachments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchReadOperation_ListPolicyAttachments::fromJsonObject(QJsonObject json) {

    m_policy_reference_isValid = ::OpenAPI::fromJsonValue(m_policy_reference, json[QString("PolicyReference")]);
    m_policy_reference_isSet = !json[QString("PolicyReference")].isNull() && m_policy_reference_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIBatchReadOperation_ListPolicyAttachments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchReadOperation_ListPolicyAttachments::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_reference.isSet()) {
        obj.insert(QString("PolicyReference"), ::OpenAPI::toJsonValue(m_policy_reference));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIBatchListPolicyAttachments_PolicyReference OAIBatchReadOperation_ListPolicyAttachments::getPolicyReference() const {
    return m_policy_reference;
}
void OAIBatchReadOperation_ListPolicyAttachments::setPolicyReference(const OAIBatchListPolicyAttachments_PolicyReference &policy_reference) {
    m_policy_reference = policy_reference;
    m_policy_reference_isSet = true;
}

bool OAIBatchReadOperation_ListPolicyAttachments::is_policy_reference_Set() const{
    return m_policy_reference_isSet;
}

bool OAIBatchReadOperation_ListPolicyAttachments::is_policy_reference_Valid() const{
    return m_policy_reference_isValid;
}

QString OAIBatchReadOperation_ListPolicyAttachments::getNextToken() const {
    return m_next_token;
}
void OAIBatchReadOperation_ListPolicyAttachments::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIBatchReadOperation_ListPolicyAttachments::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIBatchReadOperation_ListPolicyAttachments::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIBatchReadOperation_ListPolicyAttachments::getMaxResults() const {
    return m_max_results;
}
void OAIBatchReadOperation_ListPolicyAttachments::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIBatchReadOperation_ListPolicyAttachments::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIBatchReadOperation_ListPolicyAttachments::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIBatchReadOperation_ListPolicyAttachments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchReadOperation_ListPolicyAttachments::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_reference_isValid && true;
}

} // namespace OpenAPI
