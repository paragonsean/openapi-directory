/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypedLinkSpecifier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypedLinkSpecifier::OAITypedLinkSpecifier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypedLinkSpecifier::OAITypedLinkSpecifier() {
    this->initializeModel();
}

OAITypedLinkSpecifier::~OAITypedLinkSpecifier() {}

void OAITypedLinkSpecifier::initializeModel() {

    m_typed_link_facet_isSet = false;
    m_typed_link_facet_isValid = false;

    m_source_object_reference_isSet = false;
    m_source_object_reference_isValid = false;

    m_target_object_reference_isSet = false;
    m_target_object_reference_isValid = false;

    m_identity_attribute_values_isSet = false;
    m_identity_attribute_values_isValid = false;
}

void OAITypedLinkSpecifier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypedLinkSpecifier::fromJsonObject(QJsonObject json) {

    m_typed_link_facet_isValid = ::OpenAPI::fromJsonValue(m_typed_link_facet, json[QString("TypedLinkFacet")]);
    m_typed_link_facet_isSet = !json[QString("TypedLinkFacet")].isNull() && m_typed_link_facet_isValid;

    m_source_object_reference_isValid = ::OpenAPI::fromJsonValue(m_source_object_reference, json[QString("SourceObjectReference")]);
    m_source_object_reference_isSet = !json[QString("SourceObjectReference")].isNull() && m_source_object_reference_isValid;

    m_target_object_reference_isValid = ::OpenAPI::fromJsonValue(m_target_object_reference, json[QString("TargetObjectReference")]);
    m_target_object_reference_isSet = !json[QString("TargetObjectReference")].isNull() && m_target_object_reference_isValid;

    m_identity_attribute_values_isValid = ::OpenAPI::fromJsonValue(m_identity_attribute_values, json[QString("IdentityAttributeValues")]);
    m_identity_attribute_values_isSet = !json[QString("IdentityAttributeValues")].isNull() && m_identity_attribute_values_isValid;
}

QString OAITypedLinkSpecifier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypedLinkSpecifier::asJsonObject() const {
    QJsonObject obj;
    if (m_typed_link_facet.isSet()) {
        obj.insert(QString("TypedLinkFacet"), ::OpenAPI::toJsonValue(m_typed_link_facet));
    }
    if (m_source_object_reference.isSet()) {
        obj.insert(QString("SourceObjectReference"), ::OpenAPI::toJsonValue(m_source_object_reference));
    }
    if (m_target_object_reference.isSet()) {
        obj.insert(QString("TargetObjectReference"), ::OpenAPI::toJsonValue(m_target_object_reference));
    }
    if (m_identity_attribute_values.isSet()) {
        obj.insert(QString("IdentityAttributeValues"), ::OpenAPI::toJsonValue(m_identity_attribute_values));
    }
    return obj;
}

OAIDetachTypedLink_request_TypedLinkSpecifier_TypedLinkFacet OAITypedLinkSpecifier::getTypedLinkFacet() const {
    return m_typed_link_facet;
}
void OAITypedLinkSpecifier::setTypedLinkFacet(const OAIDetachTypedLink_request_TypedLinkSpecifier_TypedLinkFacet &typed_link_facet) {
    m_typed_link_facet = typed_link_facet;
    m_typed_link_facet_isSet = true;
}

bool OAITypedLinkSpecifier::is_typed_link_facet_Set() const{
    return m_typed_link_facet_isSet;
}

bool OAITypedLinkSpecifier::is_typed_link_facet_Valid() const{
    return m_typed_link_facet_isValid;
}

OAIDetachTypedLink_request_TypedLinkSpecifier_SourceObjectReference OAITypedLinkSpecifier::getSourceObjectReference() const {
    return m_source_object_reference;
}
void OAITypedLinkSpecifier::setSourceObjectReference(const OAIDetachTypedLink_request_TypedLinkSpecifier_SourceObjectReference &source_object_reference) {
    m_source_object_reference = source_object_reference;
    m_source_object_reference_isSet = true;
}

bool OAITypedLinkSpecifier::is_source_object_reference_Set() const{
    return m_source_object_reference_isSet;
}

bool OAITypedLinkSpecifier::is_source_object_reference_Valid() const{
    return m_source_object_reference_isValid;
}

OAIDetachTypedLink_request_TypedLinkSpecifier_TargetObjectReference OAITypedLinkSpecifier::getTargetObjectReference() const {
    return m_target_object_reference;
}
void OAITypedLinkSpecifier::setTargetObjectReference(const OAIDetachTypedLink_request_TypedLinkSpecifier_TargetObjectReference &target_object_reference) {
    m_target_object_reference = target_object_reference;
    m_target_object_reference_isSet = true;
}

bool OAITypedLinkSpecifier::is_target_object_reference_Set() const{
    return m_target_object_reference_isSet;
}

bool OAITypedLinkSpecifier::is_target_object_reference_Valid() const{
    return m_target_object_reference_isValid;
}

QList OAITypedLinkSpecifier::getIdentityAttributeValues() const {
    return m_identity_attribute_values;
}
void OAITypedLinkSpecifier::setIdentityAttributeValues(const QList &identity_attribute_values) {
    m_identity_attribute_values = identity_attribute_values;
    m_identity_attribute_values_isSet = true;
}

bool OAITypedLinkSpecifier::is_identity_attribute_values_Set() const{
    return m_identity_attribute_values_isSet;
}

bool OAITypedLinkSpecifier::is_identity_attribute_values_Valid() const{
    return m_identity_attribute_values_isValid;
}

bool OAITypedLinkSpecifier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_typed_link_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_attribute_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypedLinkSpecifier::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_typed_link_facet_isValid && m_source_object_reference_isValid && m_target_object_reference_isValid && m_identity_attribute_values_isValid && true;
}

} // namespace OpenAPI
