/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetachFromIndexRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetachFromIndexRequest::OAIDetachFromIndexRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetachFromIndexRequest::OAIDetachFromIndexRequest() {
    this->initializeModel();
}

OAIDetachFromIndexRequest::~OAIDetachFromIndexRequest() {}

void OAIDetachFromIndexRequest::initializeModel() {

    m_index_reference_isSet = false;
    m_index_reference_isValid = false;

    m_target_reference_isSet = false;
    m_target_reference_isValid = false;
}

void OAIDetachFromIndexRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetachFromIndexRequest::fromJsonObject(QJsonObject json) {

    m_index_reference_isValid = ::OpenAPI::fromJsonValue(m_index_reference, json[QString("IndexReference")]);
    m_index_reference_isSet = !json[QString("IndexReference")].isNull() && m_index_reference_isValid;

    m_target_reference_isValid = ::OpenAPI::fromJsonValue(m_target_reference, json[QString("TargetReference")]);
    m_target_reference_isSet = !json[QString("TargetReference")].isNull() && m_target_reference_isValid;
}

QString OAIDetachFromIndexRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetachFromIndexRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_index_reference.isSet()) {
        obj.insert(QString("IndexReference"), ::OpenAPI::toJsonValue(m_index_reference));
    }
    if (m_target_reference.isSet()) {
        obj.insert(QString("TargetReference"), ::OpenAPI::toJsonValue(m_target_reference));
    }
    return obj;
}

OAIBatchDetachFromIndex_IndexReference OAIDetachFromIndexRequest::getIndexReference() const {
    return m_index_reference;
}
void OAIDetachFromIndexRequest::setIndexReference(const OAIBatchDetachFromIndex_IndexReference &index_reference) {
    m_index_reference = index_reference;
    m_index_reference_isSet = true;
}

bool OAIDetachFromIndexRequest::is_index_reference_Set() const{
    return m_index_reference_isSet;
}

bool OAIDetachFromIndexRequest::is_index_reference_Valid() const{
    return m_index_reference_isValid;
}

OAIBatchDetachFromIndex_TargetReference OAIDetachFromIndexRequest::getTargetReference() const {
    return m_target_reference;
}
void OAIDetachFromIndexRequest::setTargetReference(const OAIBatchDetachFromIndex_TargetReference &target_reference) {
    m_target_reference = target_reference;
    m_target_reference_isSet = true;
}

bool OAIDetachFromIndexRequest::is_target_reference_Set() const{
    return m_target_reference_isSet;
}

bool OAIDetachFromIndexRequest::is_target_reference_Valid() const{
    return m_target_reference_isValid;
}

bool OAIDetachFromIndexRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetachFromIndexRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_reference_isValid && m_target_reference_isValid && true;
}

} // namespace OpenAPI
