/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplySchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplySchemaRequest::OAIApplySchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplySchemaRequest::OAIApplySchemaRequest() {
    this->initializeModel();
}

OAIApplySchemaRequest::~OAIApplySchemaRequest() {}

void OAIApplySchemaRequest::initializeModel() {

    m_published_schema_arn_isSet = false;
    m_published_schema_arn_isValid = false;
}

void OAIApplySchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplySchemaRequest::fromJsonObject(QJsonObject json) {

    m_published_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_published_schema_arn, json[QString("PublishedSchemaArn")]);
    m_published_schema_arn_isSet = !json[QString("PublishedSchemaArn")].isNull() && m_published_schema_arn_isValid;
}

QString OAIApplySchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplySchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_published_schema_arn_isSet) {
        obj.insert(QString("PublishedSchemaArn"), ::OpenAPI::toJsonValue(m_published_schema_arn));
    }
    return obj;
}

QString OAIApplySchemaRequest::getPublishedSchemaArn() const {
    return m_published_schema_arn;
}
void OAIApplySchemaRequest::setPublishedSchemaArn(const QString &published_schema_arn) {
    m_published_schema_arn = published_schema_arn;
    m_published_schema_arn_isSet = true;
}

bool OAIApplySchemaRequest::is_published_schema_arn_Set() const{
    return m_published_schema_arn_isSet;
}

bool OAIApplySchemaRequest::is_published_schema_arn_Valid() const{
    return m_published_schema_arn_isValid;
}

bool OAIApplySchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_published_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplySchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_published_schema_arn_isValid && true;
}

} // namespace OpenAPI
