/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchListObjectPoliciesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchListObjectPoliciesResponse::OAIBatchListObjectPoliciesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchListObjectPoliciesResponse::OAIBatchListObjectPoliciesResponse() {
    this->initializeModel();
}

OAIBatchListObjectPoliciesResponse::~OAIBatchListObjectPoliciesResponse() {}

void OAIBatchListObjectPoliciesResponse::initializeModel() {

    m_attached_policy_ids_isSet = false;
    m_attached_policy_ids_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIBatchListObjectPoliciesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchListObjectPoliciesResponse::fromJsonObject(QJsonObject json) {

    m_attached_policy_ids_isValid = ::OpenAPI::fromJsonValue(m_attached_policy_ids, json[QString("AttachedPolicyIds")]);
    m_attached_policy_ids_isSet = !json[QString("AttachedPolicyIds")].isNull() && m_attached_policy_ids_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIBatchListObjectPoliciesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchListObjectPoliciesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_policy_ids.isSet()) {
        obj.insert(QString("AttachedPolicyIds"), ::OpenAPI::toJsonValue(m_attached_policy_ids));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIBatchListObjectPoliciesResponse::getAttachedPolicyIds() const {
    return m_attached_policy_ids;
}
void OAIBatchListObjectPoliciesResponse::setAttachedPolicyIds(const QList &attached_policy_ids) {
    m_attached_policy_ids = attached_policy_ids;
    m_attached_policy_ids_isSet = true;
}

bool OAIBatchListObjectPoliciesResponse::is_attached_policy_ids_Set() const{
    return m_attached_policy_ids_isSet;
}

bool OAIBatchListObjectPoliciesResponse::is_attached_policy_ids_Valid() const{
    return m_attached_policy_ids_isValid;
}

QString OAIBatchListObjectPoliciesResponse::getNextToken() const {
    return m_next_token;
}
void OAIBatchListObjectPoliciesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIBatchListObjectPoliciesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIBatchListObjectPoliciesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIBatchListObjectPoliciesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_policy_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchListObjectPoliciesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
