/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAddFacetToObject_SchemaFacet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAddFacetToObject_SchemaFacet::OAIBatchAddFacetToObject_SchemaFacet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAddFacetToObject_SchemaFacet::OAIBatchAddFacetToObject_SchemaFacet() {
    this->initializeModel();
}

OAIBatchAddFacetToObject_SchemaFacet::~OAIBatchAddFacetToObject_SchemaFacet() {}

void OAIBatchAddFacetToObject_SchemaFacet::initializeModel() {

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_facet_name_isSet = false;
    m_facet_name_isValid = false;
}

void OAIBatchAddFacetToObject_SchemaFacet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAddFacetToObject_SchemaFacet::fromJsonObject(QJsonObject json) {

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_facet_name_isValid = ::OpenAPI::fromJsonValue(m_facet_name, json[QString("FacetName")]);
    m_facet_name_isSet = !json[QString("FacetName")].isNull() && m_facet_name_isValid;
}

QString OAIBatchAddFacetToObject_SchemaFacet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAddFacetToObject_SchemaFacet::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_facet_name_isSet) {
        obj.insert(QString("FacetName"), ::OpenAPI::toJsonValue(m_facet_name));
    }
    return obj;
}

QString OAIBatchAddFacetToObject_SchemaFacet::getSchemaArn() const {
    return m_schema_arn;
}
void OAIBatchAddFacetToObject_SchemaFacet::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIBatchAddFacetToObject_SchemaFacet::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIBatchAddFacetToObject_SchemaFacet::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAIBatchAddFacetToObject_SchemaFacet::getFacetName() const {
    return m_facet_name;
}
void OAIBatchAddFacetToObject_SchemaFacet::setFacetName(const QString &facet_name) {
    m_facet_name = facet_name;
    m_facet_name_isSet = true;
}

bool OAIBatchAddFacetToObject_SchemaFacet::is_facet_name_Set() const{
    return m_facet_name_isSet;
}

bool OAIBatchAddFacetToObject_SchemaFacet::is_facet_name_Valid() const{
    return m_facet_name_isValid;
}

bool OAIBatchAddFacetToObject_SchemaFacet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAddFacetToObject_SchemaFacet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
