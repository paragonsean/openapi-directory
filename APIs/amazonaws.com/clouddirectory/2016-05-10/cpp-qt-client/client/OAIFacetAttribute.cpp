/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetAttribute::OAIFacetAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetAttribute::OAIFacetAttribute() {
    this->initializeModel();
}

OAIFacetAttribute::~OAIFacetAttribute() {}

void OAIFacetAttribute::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_attribute_definition_isSet = false;
    m_attribute_definition_isValid = false;

    m_attribute_reference_isSet = false;
    m_attribute_reference_isValid = false;

    m_required_behavior_isSet = false;
    m_required_behavior_isValid = false;
}

void OAIFacetAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetAttribute::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_attribute_definition_isValid = ::OpenAPI::fromJsonValue(m_attribute_definition, json[QString("AttributeDefinition")]);
    m_attribute_definition_isSet = !json[QString("AttributeDefinition")].isNull() && m_attribute_definition_isValid;

    m_attribute_reference_isValid = ::OpenAPI::fromJsonValue(m_attribute_reference, json[QString("AttributeReference")]);
    m_attribute_reference_isSet = !json[QString("AttributeReference")].isNull() && m_attribute_reference_isValid;

    m_required_behavior_isValid = ::OpenAPI::fromJsonValue(m_required_behavior, json[QString("RequiredBehavior")]);
    m_required_behavior_isSet = !json[QString("RequiredBehavior")].isNull() && m_required_behavior_isValid;
}

QString OAIFacetAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_attribute_definition.isSet()) {
        obj.insert(QString("AttributeDefinition"), ::OpenAPI::toJsonValue(m_attribute_definition));
    }
    if (m_attribute_reference.isSet()) {
        obj.insert(QString("AttributeReference"), ::OpenAPI::toJsonValue(m_attribute_reference));
    }
    if (m_required_behavior.isSet()) {
        obj.insert(QString("RequiredBehavior"), ::OpenAPI::toJsonValue(m_required_behavior));
    }
    return obj;
}

QString OAIFacetAttribute::getName() const {
    return m_name;
}
void OAIFacetAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFacetAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFacetAttribute::is_name_Valid() const{
    return m_name_isValid;
}

OAIFacetAttribute_AttributeDefinition OAIFacetAttribute::getAttributeDefinition() const {
    return m_attribute_definition;
}
void OAIFacetAttribute::setAttributeDefinition(const OAIFacetAttribute_AttributeDefinition &attribute_definition) {
    m_attribute_definition = attribute_definition;
    m_attribute_definition_isSet = true;
}

bool OAIFacetAttribute::is_attribute_definition_Set() const{
    return m_attribute_definition_isSet;
}

bool OAIFacetAttribute::is_attribute_definition_Valid() const{
    return m_attribute_definition_isValid;
}

OAIFacetAttribute_AttributeReference OAIFacetAttribute::getAttributeReference() const {
    return m_attribute_reference;
}
void OAIFacetAttribute::setAttributeReference(const OAIFacetAttribute_AttributeReference &attribute_reference) {
    m_attribute_reference = attribute_reference;
    m_attribute_reference_isSet = true;
}

bool OAIFacetAttribute::is_attribute_reference_Set() const{
    return m_attribute_reference_isSet;
}

bool OAIFacetAttribute::is_attribute_reference_Valid() const{
    return m_attribute_reference_isValid;
}

OAIRequiredAttributeBehavior OAIFacetAttribute::getRequiredBehavior() const {
    return m_required_behavior;
}
void OAIFacetAttribute::setRequiredBehavior(const OAIRequiredAttributeBehavior &required_behavior) {
    m_required_behavior = required_behavior;
    m_required_behavior_isSet = true;
}

bool OAIFacetAttribute::is_required_behavior_Set() const{
    return m_required_behavior_isSet;
}

bool OAIFacetAttribute::is_required_behavior_Valid() const{
    return m_required_behavior_isValid;
}

bool OAIFacetAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
