/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddFacetToObject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddFacetToObject_request::OAIAddFacetToObject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddFacetToObject_request::OAIAddFacetToObject_request() {
    this->initializeModel();
}

OAIAddFacetToObject_request::~OAIAddFacetToObject_request() {}

void OAIAddFacetToObject_request::initializeModel() {

    m_schema_facet_isSet = false;
    m_schema_facet_isValid = false;

    m_object_attribute_list_isSet = false;
    m_object_attribute_list_isValid = false;

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;
}

void OAIAddFacetToObject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddFacetToObject_request::fromJsonObject(QJsonObject json) {

    m_schema_facet_isValid = ::OpenAPI::fromJsonValue(m_schema_facet, json[QString("SchemaFacet")]);
    m_schema_facet_isSet = !json[QString("SchemaFacet")].isNull() && m_schema_facet_isValid;

    m_object_attribute_list_isValid = ::OpenAPI::fromJsonValue(m_object_attribute_list, json[QString("ObjectAttributeList")]);
    m_object_attribute_list_isSet = !json[QString("ObjectAttributeList")].isNull() && m_object_attribute_list_isValid;

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;
}

QString OAIAddFacetToObject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddFacetToObject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_facet.isSet()) {
        obj.insert(QString("SchemaFacet"), ::OpenAPI::toJsonValue(m_schema_facet));
    }
    if (m_object_attribute_list.size() > 0) {
        obj.insert(QString("ObjectAttributeList"), ::OpenAPI::toJsonValue(m_object_attribute_list));
    }
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    return obj;
}

OAIAddFacetToObject_request_SchemaFacet OAIAddFacetToObject_request::getSchemaFacet() const {
    return m_schema_facet;
}
void OAIAddFacetToObject_request::setSchemaFacet(const OAIAddFacetToObject_request_SchemaFacet &schema_facet) {
    m_schema_facet = schema_facet;
    m_schema_facet_isSet = true;
}

bool OAIAddFacetToObject_request::is_schema_facet_Set() const{
    return m_schema_facet_isSet;
}

bool OAIAddFacetToObject_request::is_schema_facet_Valid() const{
    return m_schema_facet_isValid;
}

QList<OAIAttributeKeyAndValue> OAIAddFacetToObject_request::getObjectAttributeList() const {
    return m_object_attribute_list;
}
void OAIAddFacetToObject_request::setObjectAttributeList(const QList<OAIAttributeKeyAndValue> &object_attribute_list) {
    m_object_attribute_list = object_attribute_list;
    m_object_attribute_list_isSet = true;
}

bool OAIAddFacetToObject_request::is_object_attribute_list_Set() const{
    return m_object_attribute_list_isSet;
}

bool OAIAddFacetToObject_request::is_object_attribute_list_Valid() const{
    return m_object_attribute_list_isValid;
}

OAIAddFacetToObject_request_ObjectReference OAIAddFacetToObject_request::getObjectReference() const {
    return m_object_reference;
}
void OAIAddFacetToObject_request::setObjectReference(const OAIAddFacetToObject_request_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIAddFacetToObject_request::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIAddFacetToObject_request::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

bool OAIAddFacetToObject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_attribute_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddFacetToObject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_facet_isValid && m_object_reference_isValid && true;
}

} // namespace OpenAPI
