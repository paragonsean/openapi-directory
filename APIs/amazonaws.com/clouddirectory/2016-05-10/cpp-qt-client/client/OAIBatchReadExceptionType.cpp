/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchReadExceptionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchReadExceptionType::OAIBatchReadExceptionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchReadExceptionType::OAIBatchReadExceptionType() {
    this->initializeModel();
}

OAIBatchReadExceptionType::~OAIBatchReadExceptionType() {}

void OAIBatchReadExceptionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBatchReadExceptionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBatchReadExceptionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ValidationException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::VALIDATIONEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidArnException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::INVALIDARNEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ResourceNotFoundException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::RESOURCENOTFOUNDEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidNextTokenException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::INVALIDNEXTTOKENEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccessDeniedException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::ACCESSDENIEDEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotNodeException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::NOTNODEEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FacetValidationException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::FACETVALIDATIONEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CannotListParentOfRootException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::CANNOTLISTPARENTOFROOTEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotIndexException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::NOTINDEXEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotPolicyException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::NOTPOLICYEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DirectoryNotEnabledException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::DIRECTORYNOTENABLEDEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LimitExceededException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::LIMITEXCEEDEDEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InternalServiceException", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBatchReadExceptionType::INTERNALSERVICEEXCEPTION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBatchReadExceptionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBatchReadExceptionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBatchReadExceptionType::VALIDATIONEXCEPTION:
            val = "ValidationException";
            break;
        case eOAIBatchReadExceptionType::INVALIDARNEXCEPTION:
            val = "InvalidArnException";
            break;
        case eOAIBatchReadExceptionType::RESOURCENOTFOUNDEXCEPTION:
            val = "ResourceNotFoundException";
            break;
        case eOAIBatchReadExceptionType::INVALIDNEXTTOKENEXCEPTION:
            val = "InvalidNextTokenException";
            break;
        case eOAIBatchReadExceptionType::ACCESSDENIEDEXCEPTION:
            val = "AccessDeniedException";
            break;
        case eOAIBatchReadExceptionType::NOTNODEEXCEPTION:
            val = "NotNodeException";
            break;
        case eOAIBatchReadExceptionType::FACETVALIDATIONEXCEPTION:
            val = "FacetValidationException";
            break;
        case eOAIBatchReadExceptionType::CANNOTLISTPARENTOFROOTEXCEPTION:
            val = "CannotListParentOfRootException";
            break;
        case eOAIBatchReadExceptionType::NOTINDEXEXCEPTION:
            val = "NotIndexException";
            break;
        case eOAIBatchReadExceptionType::NOTPOLICYEXCEPTION:
            val = "NotPolicyException";
            break;
        case eOAIBatchReadExceptionType::DIRECTORYNOTENABLEDEXCEPTION:
            val = "DirectoryNotEnabledException";
            break;
        case eOAIBatchReadExceptionType::LIMITEXCEEDEDEXCEPTION:
            val = "LimitExceededException";
            break;
        case eOAIBatchReadExceptionType::INTERNALSERVICEEXCEPTION:
            val = "InternalServiceException";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBatchReadExceptionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBatchReadExceptionType::eOAIBatchReadExceptionType OAIBatchReadExceptionType::getValue() const {
    return m_value;
}

void OAIBatchReadExceptionType::setValue(const OAIBatchReadExceptionType::eOAIBatchReadExceptionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBatchReadExceptionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIBatchReadExceptionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
