/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchWriteException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchWriteException::OAIBatchWriteException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchWriteException::OAIBatchWriteException() {
    this->initializeModel();
}

OAIBatchWriteException::~OAIBatchWriteException() {}

void OAIBatchWriteException::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIBatchWriteException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchWriteException::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("Index")]);
    m_index_isSet = !json[QString("Index")].isNull() && m_index_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIBatchWriteException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchWriteException::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("Index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

qint32 OAIBatchWriteException::getIndex() const {
    return m_index;
}
void OAIBatchWriteException::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIBatchWriteException::is_index_Set() const{
    return m_index_isSet;
}

bool OAIBatchWriteException::is_index_Valid() const{
    return m_index_isValid;
}

OAIBatchWriteExceptionType OAIBatchWriteException::getType() const {
    return m_type;
}
void OAIBatchWriteException::setType(const OAIBatchWriteExceptionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatchWriteException::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatchWriteException::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBatchWriteException::getMessage() const {
    return m_message;
}
void OAIBatchWriteException::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBatchWriteException::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBatchWriteException::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIBatchWriteException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchWriteException::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
