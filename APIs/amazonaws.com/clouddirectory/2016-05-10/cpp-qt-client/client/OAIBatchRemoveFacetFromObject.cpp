/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRemoveFacetFromObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRemoveFacetFromObject::OAIBatchRemoveFacetFromObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRemoveFacetFromObject::OAIBatchRemoveFacetFromObject() {
    this->initializeModel();
}

OAIBatchRemoveFacetFromObject::~OAIBatchRemoveFacetFromObject() {}

void OAIBatchRemoveFacetFromObject::initializeModel() {

    m_schema_facet_isSet = false;
    m_schema_facet_isValid = false;

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;
}

void OAIBatchRemoveFacetFromObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRemoveFacetFromObject::fromJsonObject(QJsonObject json) {

    m_schema_facet_isValid = ::OpenAPI::fromJsonValue(m_schema_facet, json[QString("SchemaFacet")]);
    m_schema_facet_isSet = !json[QString("SchemaFacet")].isNull() && m_schema_facet_isValid;

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;
}

QString OAIBatchRemoveFacetFromObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRemoveFacetFromObject::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_facet.isSet()) {
        obj.insert(QString("SchemaFacet"), ::OpenAPI::toJsonValue(m_schema_facet));
    }
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    return obj;
}

OAIBatchRemoveFacetFromObject_SchemaFacet OAIBatchRemoveFacetFromObject::getSchemaFacet() const {
    return m_schema_facet;
}
void OAIBatchRemoveFacetFromObject::setSchemaFacet(const OAIBatchRemoveFacetFromObject_SchemaFacet &schema_facet) {
    m_schema_facet = schema_facet;
    m_schema_facet_isSet = true;
}

bool OAIBatchRemoveFacetFromObject::is_schema_facet_Set() const{
    return m_schema_facet_isSet;
}

bool OAIBatchRemoveFacetFromObject::is_schema_facet_Valid() const{
    return m_schema_facet_isValid;
}

OAIBatchRemoveFacetFromObject_ObjectReference OAIBatchRemoveFacetFromObject::getObjectReference() const {
    return m_object_reference;
}
void OAIBatchRemoveFacetFromObject::setObjectReference(const OAIBatchRemoveFacetFromObject_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIBatchRemoveFacetFromObject::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIBatchRemoveFacetFromObject::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

bool OAIBatchRemoveFacetFromObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRemoveFacetFromObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_facet_isValid && m_object_reference_isValid && true;
}

} // namespace OpenAPI
