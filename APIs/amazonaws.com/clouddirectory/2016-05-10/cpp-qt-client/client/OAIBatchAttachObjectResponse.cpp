/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAttachObjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAttachObjectResponse::OAIBatchAttachObjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAttachObjectResponse::OAIBatchAttachObjectResponse() {
    this->initializeModel();
}

OAIBatchAttachObjectResponse::~OAIBatchAttachObjectResponse() {}

void OAIBatchAttachObjectResponse::initializeModel() {

    m_attached_object_identifier_isSet = false;
    m_attached_object_identifier_isValid = false;
}

void OAIBatchAttachObjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAttachObjectResponse::fromJsonObject(QJsonObject json) {

    m_attached_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_attached_object_identifier, json[QString("attachedObjectIdentifier")]);
    m_attached_object_identifier_isSet = !json[QString("attachedObjectIdentifier")].isNull() && m_attached_object_identifier_isValid;
}

QString OAIBatchAttachObjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAttachObjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_object_identifier_isSet) {
        obj.insert(QString("attachedObjectIdentifier"), ::OpenAPI::toJsonValue(m_attached_object_identifier));
    }
    return obj;
}

QString OAIBatchAttachObjectResponse::getAttachedObjectIdentifier() const {
    return m_attached_object_identifier;
}
void OAIBatchAttachObjectResponse::setAttachedObjectIdentifier(const QString &attached_object_identifier) {
    m_attached_object_identifier = attached_object_identifier;
    m_attached_object_identifier_isSet = true;
}

bool OAIBatchAttachObjectResponse::is_attached_object_identifier_Set() const{
    return m_attached_object_identifier_isSet;
}

bool OAIBatchAttachObjectResponse::is_attached_object_identifier_Valid() const{
    return m_attached_object_identifier_isValid;
}

bool OAIBatchAttachObjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAttachObjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
