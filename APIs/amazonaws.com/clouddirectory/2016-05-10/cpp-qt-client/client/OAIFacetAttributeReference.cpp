/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetAttributeReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetAttributeReference::OAIFacetAttributeReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetAttributeReference::OAIFacetAttributeReference() {
    this->initializeModel();
}

OAIFacetAttributeReference::~OAIFacetAttributeReference() {}

void OAIFacetAttributeReference::initializeModel() {

    m_target_facet_name_isSet = false;
    m_target_facet_name_isValid = false;

    m_target_attribute_name_isSet = false;
    m_target_attribute_name_isValid = false;
}

void OAIFacetAttributeReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetAttributeReference::fromJsonObject(QJsonObject json) {

    m_target_facet_name_isValid = ::OpenAPI::fromJsonValue(m_target_facet_name, json[QString("TargetFacetName")]);
    m_target_facet_name_isSet = !json[QString("TargetFacetName")].isNull() && m_target_facet_name_isValid;

    m_target_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_target_attribute_name, json[QString("TargetAttributeName")]);
    m_target_attribute_name_isSet = !json[QString("TargetAttributeName")].isNull() && m_target_attribute_name_isValid;
}

QString OAIFacetAttributeReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetAttributeReference::asJsonObject() const {
    QJsonObject obj;
    if (m_target_facet_name_isSet) {
        obj.insert(QString("TargetFacetName"), ::OpenAPI::toJsonValue(m_target_facet_name));
    }
    if (m_target_attribute_name_isSet) {
        obj.insert(QString("TargetAttributeName"), ::OpenAPI::toJsonValue(m_target_attribute_name));
    }
    return obj;
}

QString OAIFacetAttributeReference::getTargetFacetName() const {
    return m_target_facet_name;
}
void OAIFacetAttributeReference::setTargetFacetName(const QString &target_facet_name) {
    m_target_facet_name = target_facet_name;
    m_target_facet_name_isSet = true;
}

bool OAIFacetAttributeReference::is_target_facet_name_Set() const{
    return m_target_facet_name_isSet;
}

bool OAIFacetAttributeReference::is_target_facet_name_Valid() const{
    return m_target_facet_name_isValid;
}

QString OAIFacetAttributeReference::getTargetAttributeName() const {
    return m_target_attribute_name;
}
void OAIFacetAttributeReference::setTargetAttributeName(const QString &target_attribute_name) {
    m_target_attribute_name = target_attribute_name;
    m_target_attribute_name_isSet = true;
}

bool OAIFacetAttributeReference::is_target_attribute_name_Set() const{
    return m_target_attribute_name_isSet;
}

bool OAIFacetAttributeReference::is_target_attribute_name_Valid() const{
    return m_target_attribute_name_isValid;
}

bool OAIFacetAttributeReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_facet_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetAttributeReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_facet_name_isValid && m_target_attribute_name_isValid && true;
}

} // namespace OpenAPI
