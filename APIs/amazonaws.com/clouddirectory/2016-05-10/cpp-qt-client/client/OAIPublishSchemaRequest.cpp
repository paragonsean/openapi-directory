/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishSchemaRequest::OAIPublishSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishSchemaRequest::OAIPublishSchemaRequest() {
    this->initializeModel();
}

OAIPublishSchemaRequest::~OAIPublishSchemaRequest() {}

void OAIPublishSchemaRequest::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;

    m_minor_version_isSet = false;
    m_minor_version_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIPublishSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishSchemaRequest::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_minor_version_isValid = ::OpenAPI::fromJsonValue(m_minor_version, json[QString("MinorVersion")]);
    m_minor_version_isSet = !json[QString("MinorVersion")].isNull() && m_minor_version_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAIPublishSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_minor_version_isSet) {
        obj.insert(QString("MinorVersion"), ::OpenAPI::toJsonValue(m_minor_version));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIPublishSchemaRequest::getVersion() const {
    return m_version;
}
void OAIPublishSchemaRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPublishSchemaRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPublishSchemaRequest::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIPublishSchemaRequest::getMinorVersion() const {
    return m_minor_version;
}
void OAIPublishSchemaRequest::setMinorVersion(const QString &minor_version) {
    m_minor_version = minor_version;
    m_minor_version_isSet = true;
}

bool OAIPublishSchemaRequest::is_minor_version_Set() const{
    return m_minor_version_isSet;
}

bool OAIPublishSchemaRequest::is_minor_version_Valid() const{
    return m_minor_version_isValid;
}

QString OAIPublishSchemaRequest::getName() const {
    return m_name;
}
void OAIPublishSchemaRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublishSchemaRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublishSchemaRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPublishSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_version_isValid && true;
}

} // namespace OpenAPI
