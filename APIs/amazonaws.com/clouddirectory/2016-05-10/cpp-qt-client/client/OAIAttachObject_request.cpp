/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachObject_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachObject_request::OAIAttachObject_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachObject_request::OAIAttachObject_request() {
    this->initializeModel();
}

OAIAttachObject_request::~OAIAttachObject_request() {}

void OAIAttachObject_request::initializeModel() {

    m_parent_reference_isSet = false;
    m_parent_reference_isValid = false;

    m_child_reference_isSet = false;
    m_child_reference_isValid = false;

    m_link_name_isSet = false;
    m_link_name_isValid = false;
}

void OAIAttachObject_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachObject_request::fromJsonObject(QJsonObject json) {

    m_parent_reference_isValid = ::OpenAPI::fromJsonValue(m_parent_reference, json[QString("ParentReference")]);
    m_parent_reference_isSet = !json[QString("ParentReference")].isNull() && m_parent_reference_isValid;

    m_child_reference_isValid = ::OpenAPI::fromJsonValue(m_child_reference, json[QString("ChildReference")]);
    m_child_reference_isSet = !json[QString("ChildReference")].isNull() && m_child_reference_isValid;

    m_link_name_isValid = ::OpenAPI::fromJsonValue(m_link_name, json[QString("LinkName")]);
    m_link_name_isSet = !json[QString("LinkName")].isNull() && m_link_name_isValid;
}

QString OAIAttachObject_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachObject_request::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_reference.isSet()) {
        obj.insert(QString("ParentReference"), ::OpenAPI::toJsonValue(m_parent_reference));
    }
    if (m_child_reference.isSet()) {
        obj.insert(QString("ChildReference"), ::OpenAPI::toJsonValue(m_child_reference));
    }
    if (m_link_name_isSet) {
        obj.insert(QString("LinkName"), ::OpenAPI::toJsonValue(m_link_name));
    }
    return obj;
}

OAIAddFacetToObject_request_ObjectReference OAIAttachObject_request::getParentReference() const {
    return m_parent_reference;
}
void OAIAttachObject_request::setParentReference(const OAIAddFacetToObject_request_ObjectReference &parent_reference) {
    m_parent_reference = parent_reference;
    m_parent_reference_isSet = true;
}

bool OAIAttachObject_request::is_parent_reference_Set() const{
    return m_parent_reference_isSet;
}

bool OAIAttachObject_request::is_parent_reference_Valid() const{
    return m_parent_reference_isValid;
}

OAIAddFacetToObject_request_ObjectReference OAIAttachObject_request::getChildReference() const {
    return m_child_reference;
}
void OAIAttachObject_request::setChildReference(const OAIAddFacetToObject_request_ObjectReference &child_reference) {
    m_child_reference = child_reference;
    m_child_reference_isSet = true;
}

bool OAIAttachObject_request::is_child_reference_Set() const{
    return m_child_reference_isSet;
}

bool OAIAttachObject_request::is_child_reference_Valid() const{
    return m_child_reference_isValid;
}

QString OAIAttachObject_request::getLinkName() const {
    return m_link_name;
}
void OAIAttachObject_request::setLinkName(const QString &link_name) {
    m_link_name = link_name;
    m_link_name_isSet = true;
}

bool OAIAttachObject_request::is_link_name_Set() const{
    return m_link_name_isSet;
}

bool OAIAttachObject_request::is_link_name_Valid() const{
    return m_link_name_isValid;
}

bool OAIAttachObject_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachObject_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parent_reference_isValid && m_child_reference_isValid && m_link_name_isValid && true;
}

} // namespace OpenAPI
