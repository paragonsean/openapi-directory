/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetObjectInformationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetObjectInformationResponse::OAIBatchGetObjectInformationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetObjectInformationResponse::OAIBatchGetObjectInformationResponse() {
    this->initializeModel();
}

OAIBatchGetObjectInformationResponse::~OAIBatchGetObjectInformationResponse() {}

void OAIBatchGetObjectInformationResponse::initializeModel() {

    m_schema_facets_isSet = false;
    m_schema_facets_isValid = false;

    m_object_identifier_isSet = false;
    m_object_identifier_isValid = false;
}

void OAIBatchGetObjectInformationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetObjectInformationResponse::fromJsonObject(QJsonObject json) {

    m_schema_facets_isValid = ::OpenAPI::fromJsonValue(m_schema_facets, json[QString("SchemaFacets")]);
    m_schema_facets_isSet = !json[QString("SchemaFacets")].isNull() && m_schema_facets_isValid;

    m_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_object_identifier, json[QString("ObjectIdentifier")]);
    m_object_identifier_isSet = !json[QString("ObjectIdentifier")].isNull() && m_object_identifier_isValid;
}

QString OAIBatchGetObjectInformationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetObjectInformationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_facets.isSet()) {
        obj.insert(QString("SchemaFacets"), ::OpenAPI::toJsonValue(m_schema_facets));
    }
    if (m_object_identifier_isSet) {
        obj.insert(QString("ObjectIdentifier"), ::OpenAPI::toJsonValue(m_object_identifier));
    }
    return obj;
}

QList OAIBatchGetObjectInformationResponse::getSchemaFacets() const {
    return m_schema_facets;
}
void OAIBatchGetObjectInformationResponse::setSchemaFacets(const QList &schema_facets) {
    m_schema_facets = schema_facets;
    m_schema_facets_isSet = true;
}

bool OAIBatchGetObjectInformationResponse::is_schema_facets_Set() const{
    return m_schema_facets_isSet;
}

bool OAIBatchGetObjectInformationResponse::is_schema_facets_Valid() const{
    return m_schema_facets_isValid;
}

QString OAIBatchGetObjectInformationResponse::getObjectIdentifier() const {
    return m_object_identifier;
}
void OAIBatchGetObjectInformationResponse::setObjectIdentifier(const QString &object_identifier) {
    m_object_identifier = object_identifier;
    m_object_identifier_isSet = true;
}

bool OAIBatchGetObjectInformationResponse::is_object_identifier_Set() const{
    return m_object_identifier_isSet;
}

bool OAIBatchGetObjectInformationResponse::is_object_identifier_Valid() const{
    return m_object_identifier_isValid;
}

bool OAIBatchGetObjectInformationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetObjectInformationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
