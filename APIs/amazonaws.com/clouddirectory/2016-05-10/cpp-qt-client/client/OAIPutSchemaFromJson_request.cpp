/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSchemaFromJson_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSchemaFromJson_request::OAIPutSchemaFromJson_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSchemaFromJson_request::OAIPutSchemaFromJson_request() {
    this->initializeModel();
}

OAIPutSchemaFromJson_request::~OAIPutSchemaFromJson_request() {}

void OAIPutSchemaFromJson_request::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;
}

void OAIPutSchemaFromJson_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSchemaFromJson_request::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("Document")]);
    m_document_isSet = !json[QString("Document")].isNull() && m_document_isValid;
}

QString OAIPutSchemaFromJson_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSchemaFromJson_request::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("Document"), ::OpenAPI::toJsonValue(m_document));
    }
    return obj;
}

QString OAIPutSchemaFromJson_request::getDocument() const {
    return m_document;
}
void OAIPutSchemaFromJson_request::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIPutSchemaFromJson_request::is_document_Set() const{
    return m_document_isSet;
}

bool OAIPutSchemaFromJson_request::is_document_Valid() const{
    return m_document_isValid;
}

bool OAIPutSchemaFromJson_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSchemaFromJson_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && true;
}

} // namespace OpenAPI
