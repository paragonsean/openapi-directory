/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchWriteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchWriteRequest::OAIBatchWriteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchWriteRequest::OAIBatchWriteRequest() {
    this->initializeModel();
}

OAIBatchWriteRequest::~OAIBatchWriteRequest() {}

void OAIBatchWriteRequest::initializeModel() {

    m_operations_isSet = false;
    m_operations_isValid = false;
}

void OAIBatchWriteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchWriteRequest::fromJsonObject(QJsonObject json) {

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("Operations")]);
    m_operations_isSet = !json[QString("Operations")].isNull() && m_operations_isValid;
}

QString OAIBatchWriteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchWriteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_operations.isSet()) {
        obj.insert(QString("Operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    return obj;
}

QList OAIBatchWriteRequest::getOperations() const {
    return m_operations;
}
void OAIBatchWriteRequest::setOperations(const QList &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIBatchWriteRequest::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIBatchWriteRequest::is_operations_Valid() const{
    return m_operations_isValid;
}

bool OAIBatchWriteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchWriteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operations_isValid && true;
}

} // namespace OpenAPI
