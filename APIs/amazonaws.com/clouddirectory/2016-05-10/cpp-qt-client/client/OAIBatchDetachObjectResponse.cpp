/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDetachObjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDetachObjectResponse::OAIBatchDetachObjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDetachObjectResponse::OAIBatchDetachObjectResponse() {
    this->initializeModel();
}

OAIBatchDetachObjectResponse::~OAIBatchDetachObjectResponse() {}

void OAIBatchDetachObjectResponse::initializeModel() {

    m_detached_object_identifier_isSet = false;
    m_detached_object_identifier_isValid = false;
}

void OAIBatchDetachObjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDetachObjectResponse::fromJsonObject(QJsonObject json) {

    m_detached_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_detached_object_identifier, json[QString("detachedObjectIdentifier")]);
    m_detached_object_identifier_isSet = !json[QString("detachedObjectIdentifier")].isNull() && m_detached_object_identifier_isValid;
}

QString OAIBatchDetachObjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDetachObjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_detached_object_identifier_isSet) {
        obj.insert(QString("detachedObjectIdentifier"), ::OpenAPI::toJsonValue(m_detached_object_identifier));
    }
    return obj;
}

QString OAIBatchDetachObjectResponse::getDetachedObjectIdentifier() const {
    return m_detached_object_identifier;
}
void OAIBatchDetachObjectResponse::setDetachedObjectIdentifier(const QString &detached_object_identifier) {
    m_detached_object_identifier = detached_object_identifier;
    m_detached_object_identifier_isSet = true;
}

bool OAIBatchDetachObjectResponse::is_detached_object_identifier_Set() const{
    return m_detached_object_identifier_isSet;
}

bool OAIBatchDetachObjectResponse::is_detached_object_identifier_Valid() const{
    return m_detached_object_identifier_isValid;
}

bool OAIBatchDetachObjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detached_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDetachObjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
