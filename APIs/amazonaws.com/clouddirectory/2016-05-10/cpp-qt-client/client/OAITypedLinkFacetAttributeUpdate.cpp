/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypedLinkFacetAttributeUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypedLinkFacetAttributeUpdate::OAITypedLinkFacetAttributeUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypedLinkFacetAttributeUpdate::OAITypedLinkFacetAttributeUpdate() {
    this->initializeModel();
}

OAITypedLinkFacetAttributeUpdate::~OAITypedLinkFacetAttributeUpdate() {}

void OAITypedLinkFacetAttributeUpdate::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;
}

void OAITypedLinkFacetAttributeUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypedLinkFacetAttributeUpdate::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("Attribute")]);
    m_attribute_isSet = !json[QString("Attribute")].isNull() && m_attribute_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("Action")]);
    m_action_isSet = !json[QString("Action")].isNull() && m_action_isValid;
}

QString OAITypedLinkFacetAttributeUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypedLinkFacetAttributeUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute.isSet()) {
        obj.insert(QString("Attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_action.isSet()) {
        obj.insert(QString("Action"), ::OpenAPI::toJsonValue(m_action));
    }
    return obj;
}

OAITypedLinkFacetAttributeUpdate_Attribute OAITypedLinkFacetAttributeUpdate::getAttribute() const {
    return m_attribute;
}
void OAITypedLinkFacetAttributeUpdate::setAttribute(const OAITypedLinkFacetAttributeUpdate_Attribute &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAITypedLinkFacetAttributeUpdate::is_attribute_Valid() const{
    return m_attribute_isValid;
}

OAIUpdateActionType OAITypedLinkFacetAttributeUpdate::getAction() const {
    return m_action;
}
void OAITypedLinkFacetAttributeUpdate::setAction(const OAIUpdateActionType &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate::is_action_Set() const{
    return m_action_isSet;
}

bool OAITypedLinkFacetAttributeUpdate::is_action_Valid() const{
    return m_action_isValid;
}

bool OAITypedLinkFacetAttributeUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypedLinkFacetAttributeUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_isValid && m_action_isValid && true;
}

} // namespace OpenAPI
