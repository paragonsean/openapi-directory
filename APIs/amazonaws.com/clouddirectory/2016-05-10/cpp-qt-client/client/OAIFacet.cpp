/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacet::OAIFacet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacet::OAIFacet() {
    this->initializeModel();
}

OAIFacet::~OAIFacet() {}

void OAIFacet::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAIFacet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacet::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("ObjectType")]);
    m_object_type_isSet = !json[QString("ObjectType")].isNull() && m_object_type_isValid;
}

QString OAIFacet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacet::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_object_type.isSet()) {
        obj.insert(QString("ObjectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QString OAIFacet::getName() const {
    return m_name;
}
void OAIFacet::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFacet::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFacet::is_name_Valid() const{
    return m_name_isValid;
}

OAIObjectType OAIFacet::getObjectType() const {
    return m_object_type;
}
void OAIFacet::setObjectType(const OAIObjectType &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIFacet::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIFacet::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAIFacet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
