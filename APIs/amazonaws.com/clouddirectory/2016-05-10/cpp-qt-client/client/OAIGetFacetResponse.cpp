/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFacetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFacetResponse::OAIGetFacetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFacetResponse::OAIGetFacetResponse() {
    this->initializeModel();
}

OAIGetFacetResponse::~OAIGetFacetResponse() {}

void OAIGetFacetResponse::initializeModel() {

    m_facet_isSet = false;
    m_facet_isValid = false;
}

void OAIGetFacetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFacetResponse::fromJsonObject(QJsonObject json) {

    m_facet_isValid = ::OpenAPI::fromJsonValue(m_facet, json[QString("Facet")]);
    m_facet_isSet = !json[QString("Facet")].isNull() && m_facet_isValid;
}

QString OAIGetFacetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFacetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_facet.isSet()) {
        obj.insert(QString("Facet"), ::OpenAPI::toJsonValue(m_facet));
    }
    return obj;
}

OAIGetFacetResponse_Facet OAIGetFacetResponse::getFacet() const {
    return m_facet;
}
void OAIGetFacetResponse::setFacet(const OAIGetFacetResponse_Facet &facet) {
    m_facet = facet;
    m_facet_isSet = true;
}

bool OAIGetFacetResponse::is_facet_Set() const{
    return m_facet_isSet;
}

bool OAIGetFacetResponse::is_facet_Valid() const{
    return m_facet_isValid;
}

bool OAIGetFacetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFacetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
