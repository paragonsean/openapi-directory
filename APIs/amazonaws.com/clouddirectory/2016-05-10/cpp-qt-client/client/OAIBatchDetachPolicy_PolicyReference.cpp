/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDetachPolicy_PolicyReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDetachPolicy_PolicyReference::OAIBatchDetachPolicy_PolicyReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDetachPolicy_PolicyReference::OAIBatchDetachPolicy_PolicyReference() {
    this->initializeModel();
}

OAIBatchDetachPolicy_PolicyReference::~OAIBatchDetachPolicy_PolicyReference() {}

void OAIBatchDetachPolicy_PolicyReference::initializeModel() {

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIBatchDetachPolicy_PolicyReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDetachPolicy_PolicyReference::fromJsonObject(QJsonObject json) {

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("Selector")]);
    m_selector_isSet = !json[QString("Selector")].isNull() && m_selector_isValid;
}

QString OAIBatchDetachPolicy_PolicyReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDetachPolicy_PolicyReference::asJsonObject() const {
    QJsonObject obj;
    if (m_selector_isSet) {
        obj.insert(QString("Selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIBatchDetachPolicy_PolicyReference::getSelector() const {
    return m_selector;
}
void OAIBatchDetachPolicy_PolicyReference::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIBatchDetachPolicy_PolicyReference::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIBatchDetachPolicy_PolicyReference::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIBatchDetachPolicy_PolicyReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDetachPolicy_PolicyReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
