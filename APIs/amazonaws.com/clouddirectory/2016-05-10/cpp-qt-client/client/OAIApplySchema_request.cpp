/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplySchema_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplySchema_request::OAIApplySchema_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplySchema_request::OAIApplySchema_request() {
    this->initializeModel();
}

OAIApplySchema_request::~OAIApplySchema_request() {}

void OAIApplySchema_request::initializeModel() {

    m_published_schema_arn_isSet = false;
    m_published_schema_arn_isValid = false;
}

void OAIApplySchema_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplySchema_request::fromJsonObject(QJsonObject json) {

    m_published_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_published_schema_arn, json[QString("PublishedSchemaArn")]);
    m_published_schema_arn_isSet = !json[QString("PublishedSchemaArn")].isNull() && m_published_schema_arn_isValid;
}

QString OAIApplySchema_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplySchema_request::asJsonObject() const {
    QJsonObject obj;
    if (m_published_schema_arn_isSet) {
        obj.insert(QString("PublishedSchemaArn"), ::OpenAPI::toJsonValue(m_published_schema_arn));
    }
    return obj;
}

QString OAIApplySchema_request::getPublishedSchemaArn() const {
    return m_published_schema_arn;
}
void OAIApplySchema_request::setPublishedSchemaArn(const QString &published_schema_arn) {
    m_published_schema_arn = published_schema_arn;
    m_published_schema_arn_isSet = true;
}

bool OAIApplySchema_request::is_published_schema_arn_Set() const{
    return m_published_schema_arn_isSet;
}

bool OAIApplySchema_request::is_published_schema_arn_Valid() const{
    return m_published_schema_arn_isValid;
}

bool OAIApplySchema_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_published_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplySchema_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_published_schema_arn_isValid && true;
}

} // namespace OpenAPI
