/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveFacetFromObjectRequest_ObjectReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveFacetFromObjectRequest_ObjectReference::OAIRemoveFacetFromObjectRequest_ObjectReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveFacetFromObjectRequest_ObjectReference::OAIRemoveFacetFromObjectRequest_ObjectReference() {
    this->initializeModel();
}

OAIRemoveFacetFromObjectRequest_ObjectReference::~OAIRemoveFacetFromObjectRequest_ObjectReference() {}

void OAIRemoveFacetFromObjectRequest_ObjectReference::initializeModel() {

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIRemoveFacetFromObjectRequest_ObjectReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveFacetFromObjectRequest_ObjectReference::fromJsonObject(QJsonObject json) {

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("Selector")]);
    m_selector_isSet = !json[QString("Selector")].isNull() && m_selector_isValid;
}

QString OAIRemoveFacetFromObjectRequest_ObjectReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveFacetFromObjectRequest_ObjectReference::asJsonObject() const {
    QJsonObject obj;
    if (m_selector_isSet) {
        obj.insert(QString("Selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIRemoveFacetFromObjectRequest_ObjectReference::getSelector() const {
    return m_selector;
}
void OAIRemoveFacetFromObjectRequest_ObjectReference::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIRemoveFacetFromObjectRequest_ObjectReference::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIRemoveFacetFromObjectRequest_ObjectReference::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIRemoveFacetFromObjectRequest_ObjectReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveFacetFromObjectRequest_ObjectReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
