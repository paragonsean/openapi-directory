/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplySchemaResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplySchemaResponse::OAIApplySchemaResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplySchemaResponse::OAIApplySchemaResponse() {
    this->initializeModel();
}

OAIApplySchemaResponse::~OAIApplySchemaResponse() {}

void OAIApplySchemaResponse::initializeModel() {

    m_applied_schema_arn_isSet = false;
    m_applied_schema_arn_isValid = false;

    m_directory_arn_isSet = false;
    m_directory_arn_isValid = false;
}

void OAIApplySchemaResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplySchemaResponse::fromJsonObject(QJsonObject json) {

    m_applied_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_applied_schema_arn, json[QString("AppliedSchemaArn")]);
    m_applied_schema_arn_isSet = !json[QString("AppliedSchemaArn")].isNull() && m_applied_schema_arn_isValid;

    m_directory_arn_isValid = ::OpenAPI::fromJsonValue(m_directory_arn, json[QString("DirectoryArn")]);
    m_directory_arn_isSet = !json[QString("DirectoryArn")].isNull() && m_directory_arn_isValid;
}

QString OAIApplySchemaResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplySchemaResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_schema_arn_isSet) {
        obj.insert(QString("AppliedSchemaArn"), ::OpenAPI::toJsonValue(m_applied_schema_arn));
    }
    if (m_directory_arn_isSet) {
        obj.insert(QString("DirectoryArn"), ::OpenAPI::toJsonValue(m_directory_arn));
    }
    return obj;
}

QString OAIApplySchemaResponse::getAppliedSchemaArn() const {
    return m_applied_schema_arn;
}
void OAIApplySchemaResponse::setAppliedSchemaArn(const QString &applied_schema_arn) {
    m_applied_schema_arn = applied_schema_arn;
    m_applied_schema_arn_isSet = true;
}

bool OAIApplySchemaResponse::is_applied_schema_arn_Set() const{
    return m_applied_schema_arn_isSet;
}

bool OAIApplySchemaResponse::is_applied_schema_arn_Valid() const{
    return m_applied_schema_arn_isValid;
}

QString OAIApplySchemaResponse::getDirectoryArn() const {
    return m_directory_arn;
}
void OAIApplySchemaResponse::setDirectoryArn(const QString &directory_arn) {
    m_directory_arn = directory_arn;
    m_directory_arn_isSet = true;
}

bool OAIApplySchemaResponse::is_directory_arn_Set() const{
    return m_directory_arn_isSet;
}

bool OAIApplySchemaResponse::is_directory_arn_Valid() const{
    return m_directory_arn_isValid;
}

bool OAIApplySchemaResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplySchemaResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
