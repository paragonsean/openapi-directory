/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateObjectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateObjectRequest::OAICreateObjectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateObjectRequest::OAICreateObjectRequest() {
    this->initializeModel();
}

OAICreateObjectRequest::~OAICreateObjectRequest() {}

void OAICreateObjectRequest::initializeModel() {

    m_schema_facets_isSet = false;
    m_schema_facets_isValid = false;

    m_object_attribute_list_isSet = false;
    m_object_attribute_list_isValid = false;

    m_parent_reference_isSet = false;
    m_parent_reference_isValid = false;

    m_link_name_isSet = false;
    m_link_name_isValid = false;
}

void OAICreateObjectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateObjectRequest::fromJsonObject(QJsonObject json) {

    m_schema_facets_isValid = ::OpenAPI::fromJsonValue(m_schema_facets, json[QString("SchemaFacets")]);
    m_schema_facets_isSet = !json[QString("SchemaFacets")].isNull() && m_schema_facets_isValid;

    m_object_attribute_list_isValid = ::OpenAPI::fromJsonValue(m_object_attribute_list, json[QString("ObjectAttributeList")]);
    m_object_attribute_list_isSet = !json[QString("ObjectAttributeList")].isNull() && m_object_attribute_list_isValid;

    m_parent_reference_isValid = ::OpenAPI::fromJsonValue(m_parent_reference, json[QString("ParentReference")]);
    m_parent_reference_isSet = !json[QString("ParentReference")].isNull() && m_parent_reference_isValid;

    m_link_name_isValid = ::OpenAPI::fromJsonValue(m_link_name, json[QString("LinkName")]);
    m_link_name_isSet = !json[QString("LinkName")].isNull() && m_link_name_isValid;
}

QString OAICreateObjectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateObjectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_facets.isSet()) {
        obj.insert(QString("SchemaFacets"), ::OpenAPI::toJsonValue(m_schema_facets));
    }
    if (m_object_attribute_list.isSet()) {
        obj.insert(QString("ObjectAttributeList"), ::OpenAPI::toJsonValue(m_object_attribute_list));
    }
    if (m_parent_reference.isSet()) {
        obj.insert(QString("ParentReference"), ::OpenAPI::toJsonValue(m_parent_reference));
    }
    if (m_link_name_isSet) {
        obj.insert(QString("LinkName"), ::OpenAPI::toJsonValue(m_link_name));
    }
    return obj;
}

QList OAICreateObjectRequest::getSchemaFacets() const {
    return m_schema_facets;
}
void OAICreateObjectRequest::setSchemaFacets(const QList &schema_facets) {
    m_schema_facets = schema_facets;
    m_schema_facets_isSet = true;
}

bool OAICreateObjectRequest::is_schema_facets_Set() const{
    return m_schema_facets_isSet;
}

bool OAICreateObjectRequest::is_schema_facets_Valid() const{
    return m_schema_facets_isValid;
}

QList OAICreateObjectRequest::getObjectAttributeList() const {
    return m_object_attribute_list;
}
void OAICreateObjectRequest::setObjectAttributeList(const QList &object_attribute_list) {
    m_object_attribute_list = object_attribute_list;
    m_object_attribute_list_isSet = true;
}

bool OAICreateObjectRequest::is_object_attribute_list_Set() const{
    return m_object_attribute_list_isSet;
}

bool OAICreateObjectRequest::is_object_attribute_list_Valid() const{
    return m_object_attribute_list_isValid;
}

OAIBatchCreateObject_ParentReference OAICreateObjectRequest::getParentReference() const {
    return m_parent_reference;
}
void OAICreateObjectRequest::setParentReference(const OAIBatchCreateObject_ParentReference &parent_reference) {
    m_parent_reference = parent_reference;
    m_parent_reference_isSet = true;
}

bool OAICreateObjectRequest::is_parent_reference_Set() const{
    return m_parent_reference_isSet;
}

bool OAICreateObjectRequest::is_parent_reference_Valid() const{
    return m_parent_reference_isValid;
}

QString OAICreateObjectRequest::getLinkName() const {
    return m_link_name;
}
void OAICreateObjectRequest::setLinkName(const QString &link_name) {
    m_link_name = link_name;
    m_link_name_isSet = true;
}

bool OAICreateObjectRequest::is_link_name_Set() const{
    return m_link_name_isSet;
}

bool OAICreateObjectRequest::is_link_name_Valid() const{
    return m_link_name_isValid;
}

bool OAICreateObjectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_attribute_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateObjectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_facets_isValid && true;
}

} // namespace OpenAPI
