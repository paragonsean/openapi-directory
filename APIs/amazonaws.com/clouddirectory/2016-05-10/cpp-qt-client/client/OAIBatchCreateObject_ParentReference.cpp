/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchCreateObject_ParentReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchCreateObject_ParentReference::OAIBatchCreateObject_ParentReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchCreateObject_ParentReference::OAIBatchCreateObject_ParentReference() {
    this->initializeModel();
}

OAIBatchCreateObject_ParentReference::~OAIBatchCreateObject_ParentReference() {}

void OAIBatchCreateObject_ParentReference::initializeModel() {

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIBatchCreateObject_ParentReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchCreateObject_ParentReference::fromJsonObject(QJsonObject json) {

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("Selector")]);
    m_selector_isSet = !json[QString("Selector")].isNull() && m_selector_isValid;
}

QString OAIBatchCreateObject_ParentReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchCreateObject_ParentReference::asJsonObject() const {
    QJsonObject obj;
    if (m_selector_isSet) {
        obj.insert(QString("Selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIBatchCreateObject_ParentReference::getSelector() const {
    return m_selector;
}
void OAIBatchCreateObject_ParentReference::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIBatchCreateObject_ParentReference::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIBatchCreateObject_ParentReference::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIBatchCreateObject_ParentReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchCreateObject_ParentReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
