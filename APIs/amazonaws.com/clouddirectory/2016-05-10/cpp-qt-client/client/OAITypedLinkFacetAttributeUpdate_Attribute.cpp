/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITypedLinkFacetAttributeUpdate_Attribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITypedLinkFacetAttributeUpdate_Attribute::OAITypedLinkFacetAttributeUpdate_Attribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITypedLinkFacetAttributeUpdate_Attribute::OAITypedLinkFacetAttributeUpdate_Attribute() {
    this->initializeModel();
}

OAITypedLinkFacetAttributeUpdate_Attribute::~OAITypedLinkFacetAttributeUpdate_Attribute() {}

void OAITypedLinkFacetAttributeUpdate_Attribute::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_default_value_isSet = false;
    m_default_value_isValid = false;

    m_is_immutable_isSet = false;
    m_is_immutable_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_required_behavior_isSet = false;
    m_required_behavior_isValid = false;
}

void OAITypedLinkFacetAttributeUpdate_Attribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITypedLinkFacetAttributeUpdate_Attribute::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_default_value_isValid = ::OpenAPI::fromJsonValue(m_default_value, json[QString("DefaultValue")]);
    m_default_value_isSet = !json[QString("DefaultValue")].isNull() && m_default_value_isValid;

    m_is_immutable_isValid = ::OpenAPI::fromJsonValue(m_is_immutable, json[QString("IsImmutable")]);
    m_is_immutable_isSet = !json[QString("IsImmutable")].isNull() && m_is_immutable_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("Rules")]);
    m_rules_isSet = !json[QString("Rules")].isNull() && m_rules_isValid;

    m_required_behavior_isValid = ::OpenAPI::fromJsonValue(m_required_behavior, json[QString("RequiredBehavior")]);
    m_required_behavior_isSet = !json[QString("RequiredBehavior")].isNull() && m_required_behavior_isValid;
}

QString OAITypedLinkFacetAttributeUpdate_Attribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITypedLinkFacetAttributeUpdate_Attribute::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_default_value.isSet()) {
        obj.insert(QString("DefaultValue"), ::OpenAPI::toJsonValue(m_default_value));
    }
    if (m_is_immutable_isSet) {
        obj.insert(QString("IsImmutable"), ::OpenAPI::toJsonValue(m_is_immutable));
    }
    if (m_rules.isSet()) {
        obj.insert(QString("Rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_required_behavior.isSet()) {
        obj.insert(QString("RequiredBehavior"), ::OpenAPI::toJsonValue(m_required_behavior));
    }
    return obj;
}

QString OAITypedLinkFacetAttributeUpdate_Attribute::getName() const {
    return m_name;
}
void OAITypedLinkFacetAttributeUpdate_Attribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_name_Valid() const{
    return m_name_isValid;
}

OAIFacetAttributeType OAITypedLinkFacetAttributeUpdate_Attribute::getType() const {
    return m_type;
}
void OAITypedLinkFacetAttributeUpdate_Attribute::setType(const OAIFacetAttributeType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_type_Set() const{
    return m_type_isSet;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_type_Valid() const{
    return m_type_isValid;
}

OAIFacetAttributeDefinition_DefaultValue OAITypedLinkFacetAttributeUpdate_Attribute::getDefaultValue() const {
    return m_default_value;
}
void OAITypedLinkFacetAttributeUpdate_Attribute::setDefaultValue(const OAIFacetAttributeDefinition_DefaultValue &default_value) {
    m_default_value = default_value;
    m_default_value_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_default_value_Set() const{
    return m_default_value_isSet;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_default_value_Valid() const{
    return m_default_value_isValid;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::getIsImmutable() const {
    return m_is_immutable;
}
void OAITypedLinkFacetAttributeUpdate_Attribute::setIsImmutable(const bool &is_immutable) {
    m_is_immutable = is_immutable;
    m_is_immutable_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_is_immutable_Set() const{
    return m_is_immutable_isSet;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_is_immutable_Valid() const{
    return m_is_immutable_isValid;
}

QMap OAITypedLinkFacetAttributeUpdate_Attribute::getRules() const {
    return m_rules;
}
void OAITypedLinkFacetAttributeUpdate_Attribute::setRules(const QMap &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_rules_Valid() const{
    return m_rules_isValid;
}

OAIRequiredAttributeBehavior OAITypedLinkFacetAttributeUpdate_Attribute::getRequiredBehavior() const {
    return m_required_behavior;
}
void OAITypedLinkFacetAttributeUpdate_Attribute::setRequiredBehavior(const OAIRequiredAttributeBehavior &required_behavior) {
    m_required_behavior = required_behavior;
    m_required_behavior_isSet = true;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_required_behavior_Set() const{
    return m_required_behavior_isSet;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::is_required_behavior_Valid() const{
    return m_required_behavior_isValid;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_value.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_immutable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITypedLinkFacetAttributeUpdate_Attribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && m_required_behavior_isValid && true;
}

} // namespace OpenAPI
