/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchListObjectAttributes_FacetFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchListObjectAttributes_FacetFilter::OAIBatchListObjectAttributes_FacetFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchListObjectAttributes_FacetFilter::OAIBatchListObjectAttributes_FacetFilter() {
    this->initializeModel();
}

OAIBatchListObjectAttributes_FacetFilter::~OAIBatchListObjectAttributes_FacetFilter() {}

void OAIBatchListObjectAttributes_FacetFilter::initializeModel() {

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_facet_name_isSet = false;
    m_facet_name_isValid = false;
}

void OAIBatchListObjectAttributes_FacetFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchListObjectAttributes_FacetFilter::fromJsonObject(QJsonObject json) {

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_facet_name_isValid = ::OpenAPI::fromJsonValue(m_facet_name, json[QString("FacetName")]);
    m_facet_name_isSet = !json[QString("FacetName")].isNull() && m_facet_name_isValid;
}

QString OAIBatchListObjectAttributes_FacetFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchListObjectAttributes_FacetFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_facet_name_isSet) {
        obj.insert(QString("FacetName"), ::OpenAPI::toJsonValue(m_facet_name));
    }
    return obj;
}

QString OAIBatchListObjectAttributes_FacetFilter::getSchemaArn() const {
    return m_schema_arn;
}
void OAIBatchListObjectAttributes_FacetFilter::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIBatchListObjectAttributes_FacetFilter::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIBatchListObjectAttributes_FacetFilter::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAIBatchListObjectAttributes_FacetFilter::getFacetName() const {
    return m_facet_name;
}
void OAIBatchListObjectAttributes_FacetFilter::setFacetName(const QString &facet_name) {
    m_facet_name = facet_name;
    m_facet_name_isSet = true;
}

bool OAIBatchListObjectAttributes_FacetFilter::is_facet_name_Set() const{
    return m_facet_name_isSet;
}

bool OAIBatchListObjectAttributes_FacetFilter::is_facet_name_Valid() const{
    return m_facet_name_isValid;
}

bool OAIBatchListObjectAttributes_FacetFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchListObjectAttributes_FacetFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
