/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDetachPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDetachPolicy::OAIBatchDetachPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDetachPolicy::OAIBatchDetachPolicy() {
    this->initializeModel();
}

OAIBatchDetachPolicy::~OAIBatchDetachPolicy() {}

void OAIBatchDetachPolicy::initializeModel() {

    m_policy_reference_isSet = false;
    m_policy_reference_isValid = false;

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;
}

void OAIBatchDetachPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDetachPolicy::fromJsonObject(QJsonObject json) {

    m_policy_reference_isValid = ::OpenAPI::fromJsonValue(m_policy_reference, json[QString("PolicyReference")]);
    m_policy_reference_isSet = !json[QString("PolicyReference")].isNull() && m_policy_reference_isValid;

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;
}

QString OAIBatchDetachPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDetachPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_reference.isSet()) {
        obj.insert(QString("PolicyReference"), ::OpenAPI::toJsonValue(m_policy_reference));
    }
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    return obj;
}

OAIBatchDetachPolicy_PolicyReference OAIBatchDetachPolicy::getPolicyReference() const {
    return m_policy_reference;
}
void OAIBatchDetachPolicy::setPolicyReference(const OAIBatchDetachPolicy_PolicyReference &policy_reference) {
    m_policy_reference = policy_reference;
    m_policy_reference_isSet = true;
}

bool OAIBatchDetachPolicy::is_policy_reference_Set() const{
    return m_policy_reference_isSet;
}

bool OAIBatchDetachPolicy::is_policy_reference_Valid() const{
    return m_policy_reference_isValid;
}

OAIBatchDetachPolicy_ObjectReference OAIBatchDetachPolicy::getObjectReference() const {
    return m_object_reference;
}
void OAIBatchDetachPolicy::setObjectReference(const OAIBatchDetachPolicy_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIBatchDetachPolicy::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIBatchDetachPolicy::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

bool OAIBatchDetachPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDetachPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_reference_isValid && m_object_reference_isValid && true;
}

} // namespace OpenAPI
