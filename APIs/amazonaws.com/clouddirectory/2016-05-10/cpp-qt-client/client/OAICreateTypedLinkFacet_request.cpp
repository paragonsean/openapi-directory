/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTypedLinkFacet_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTypedLinkFacet_request::OAICreateTypedLinkFacet_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTypedLinkFacet_request::OAICreateTypedLinkFacet_request() {
    this->initializeModel();
}

OAICreateTypedLinkFacet_request::~OAICreateTypedLinkFacet_request() {}

void OAICreateTypedLinkFacet_request::initializeModel() {

    m_facet_isSet = false;
    m_facet_isValid = false;
}

void OAICreateTypedLinkFacet_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTypedLinkFacet_request::fromJsonObject(QJsonObject json) {

    m_facet_isValid = ::OpenAPI::fromJsonValue(m_facet, json[QString("Facet")]);
    m_facet_isSet = !json[QString("Facet")].isNull() && m_facet_isValid;
}

QString OAICreateTypedLinkFacet_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTypedLinkFacet_request::asJsonObject() const {
    QJsonObject obj;
    if (m_facet.isSet()) {
        obj.insert(QString("Facet"), ::OpenAPI::toJsonValue(m_facet));
    }
    return obj;
}

OAICreateTypedLinkFacet_request_Facet OAICreateTypedLinkFacet_request::getFacet() const {
    return m_facet;
}
void OAICreateTypedLinkFacet_request::setFacet(const OAICreateTypedLinkFacet_request_Facet &facet) {
    m_facet = facet;
    m_facet_isSet = true;
}

bool OAICreateTypedLinkFacet_request::is_facet_Set() const{
    return m_facet_isSet;
}

bool OAICreateTypedLinkFacet_request::is_facet_Valid() const{
    return m_facet_isValid;
}

bool OAICreateTypedLinkFacet_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTypedLinkFacet_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_facet_isValid && true;
}

} // namespace OpenAPI
