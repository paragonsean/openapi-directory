/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradePublishedSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradePublishedSchemaRequest::OAIUpgradePublishedSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradePublishedSchemaRequest::OAIUpgradePublishedSchemaRequest() {
    this->initializeModel();
}

OAIUpgradePublishedSchemaRequest::~OAIUpgradePublishedSchemaRequest() {}

void OAIUpgradePublishedSchemaRequest::initializeModel() {

    m_development_schema_arn_isSet = false;
    m_development_schema_arn_isValid = false;

    m_published_schema_arn_isSet = false;
    m_published_schema_arn_isValid = false;

    m_minor_version_isSet = false;
    m_minor_version_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;
}

void OAIUpgradePublishedSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradePublishedSchemaRequest::fromJsonObject(QJsonObject json) {

    m_development_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_development_schema_arn, json[QString("DevelopmentSchemaArn")]);
    m_development_schema_arn_isSet = !json[QString("DevelopmentSchemaArn")].isNull() && m_development_schema_arn_isValid;

    m_published_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_published_schema_arn, json[QString("PublishedSchemaArn")]);
    m_published_schema_arn_isSet = !json[QString("PublishedSchemaArn")].isNull() && m_published_schema_arn_isValid;

    m_minor_version_isValid = ::OpenAPI::fromJsonValue(m_minor_version, json[QString("MinorVersion")]);
    m_minor_version_isSet = !json[QString("MinorVersion")].isNull() && m_minor_version_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("DryRun")]);
    m_dry_run_isSet = !json[QString("DryRun")].isNull() && m_dry_run_isValid;
}

QString OAIUpgradePublishedSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradePublishedSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_development_schema_arn_isSet) {
        obj.insert(QString("DevelopmentSchemaArn"), ::OpenAPI::toJsonValue(m_development_schema_arn));
    }
    if (m_published_schema_arn_isSet) {
        obj.insert(QString("PublishedSchemaArn"), ::OpenAPI::toJsonValue(m_published_schema_arn));
    }
    if (m_minor_version_isSet) {
        obj.insert(QString("MinorVersion"), ::OpenAPI::toJsonValue(m_minor_version));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("DryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    return obj;
}

QString OAIUpgradePublishedSchemaRequest::getDevelopmentSchemaArn() const {
    return m_development_schema_arn;
}
void OAIUpgradePublishedSchemaRequest::setDevelopmentSchemaArn(const QString &development_schema_arn) {
    m_development_schema_arn = development_schema_arn;
    m_development_schema_arn_isSet = true;
}

bool OAIUpgradePublishedSchemaRequest::is_development_schema_arn_Set() const{
    return m_development_schema_arn_isSet;
}

bool OAIUpgradePublishedSchemaRequest::is_development_schema_arn_Valid() const{
    return m_development_schema_arn_isValid;
}

QString OAIUpgradePublishedSchemaRequest::getPublishedSchemaArn() const {
    return m_published_schema_arn;
}
void OAIUpgradePublishedSchemaRequest::setPublishedSchemaArn(const QString &published_schema_arn) {
    m_published_schema_arn = published_schema_arn;
    m_published_schema_arn_isSet = true;
}

bool OAIUpgradePublishedSchemaRequest::is_published_schema_arn_Set() const{
    return m_published_schema_arn_isSet;
}

bool OAIUpgradePublishedSchemaRequest::is_published_schema_arn_Valid() const{
    return m_published_schema_arn_isValid;
}

QString OAIUpgradePublishedSchemaRequest::getMinorVersion() const {
    return m_minor_version;
}
void OAIUpgradePublishedSchemaRequest::setMinorVersion(const QString &minor_version) {
    m_minor_version = minor_version;
    m_minor_version_isSet = true;
}

bool OAIUpgradePublishedSchemaRequest::is_minor_version_Set() const{
    return m_minor_version_isSet;
}

bool OAIUpgradePublishedSchemaRequest::is_minor_version_Valid() const{
    return m_minor_version_isValid;
}

bool OAIUpgradePublishedSchemaRequest::getDryRun() const {
    return m_dry_run;
}
void OAIUpgradePublishedSchemaRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIUpgradePublishedSchemaRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIUpgradePublishedSchemaRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

bool OAIUpgradePublishedSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_development_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minor_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradePublishedSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_development_schema_arn_isValid && m_published_schema_arn_isValid && m_minor_version_isValid && true;
}

} // namespace OpenAPI
