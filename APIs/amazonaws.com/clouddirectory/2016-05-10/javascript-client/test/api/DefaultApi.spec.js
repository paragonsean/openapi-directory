/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about AWS Directory Services features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"http://docs.aws.amazon.com/directoryservice/latest/admin-guide/what_is.html\">AWS Directory Service Administration Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2016-05-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonCloudDirectory);
  }
}(this, function(expect, AmazonCloudDirectory) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonCloudDirectory.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addFacetToObject', function() {
      it('should call addFacetToObject successfully', function(done) {
        //uncomment below and update the code to test addFacetToObject
        //instance.addFacetToObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applySchema', function() {
      it('should call applySchema successfully', function(done) {
        //uncomment below and update the code to test applySchema
        //instance.applySchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachObject', function() {
      it('should call attachObject successfully', function(done) {
        //uncomment below and update the code to test attachObject
        //instance.attachObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachPolicy', function() {
      it('should call attachPolicy successfully', function(done) {
        //uncomment below and update the code to test attachPolicy
        //instance.attachPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachToIndex', function() {
      it('should call attachToIndex successfully', function(done) {
        //uncomment below and update the code to test attachToIndex
        //instance.attachToIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachTypedLink', function() {
      it('should call attachTypedLink successfully', function(done) {
        //uncomment below and update the code to test attachTypedLink
        //instance.attachTypedLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchRead', function() {
      it('should call batchRead successfully', function(done) {
        //uncomment below and update the code to test batchRead
        //instance.batchRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchWrite', function() {
      it('should call batchWrite successfully', function(done) {
        //uncomment below and update the code to test batchWrite
        //instance.batchWrite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDirectory', function() {
      it('should call createDirectory successfully', function(done) {
        //uncomment below and update the code to test createDirectory
        //instance.createDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFacet', function() {
      it('should call createFacet successfully', function(done) {
        //uncomment below and update the code to test createFacet
        //instance.createFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIndex', function() {
      it('should call createIndex successfully', function(done) {
        //uncomment below and update the code to test createIndex
        //instance.createIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createObject', function() {
      it('should call createObject successfully', function(done) {
        //uncomment below and update the code to test createObject
        //instance.createObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSchema', function() {
      it('should call createSchema successfully', function(done) {
        //uncomment below and update the code to test createSchema
        //instance.createSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTypedLinkFacet', function() {
      it('should call createTypedLinkFacet successfully', function(done) {
        //uncomment below and update the code to test createTypedLinkFacet
        //instance.createTypedLinkFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDirectory', function() {
      it('should call deleteDirectory successfully', function(done) {
        //uncomment below and update the code to test deleteDirectory
        //instance.deleteDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFacet', function() {
      it('should call deleteFacet successfully', function(done) {
        //uncomment below and update the code to test deleteFacet
        //instance.deleteFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteObject', function() {
      it('should call deleteObject successfully', function(done) {
        //uncomment below and update the code to test deleteObject
        //instance.deleteObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSchema', function() {
      it('should call deleteSchema successfully', function(done) {
        //uncomment below and update the code to test deleteSchema
        //instance.deleteSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTypedLinkFacet', function() {
      it('should call deleteTypedLinkFacet successfully', function(done) {
        //uncomment below and update the code to test deleteTypedLinkFacet
        //instance.deleteTypedLinkFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachFromIndex', function() {
      it('should call detachFromIndex successfully', function(done) {
        //uncomment below and update the code to test detachFromIndex
        //instance.detachFromIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachObject', function() {
      it('should call detachObject successfully', function(done) {
        //uncomment below and update the code to test detachObject
        //instance.detachObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachPolicy', function() {
      it('should call detachPolicy successfully', function(done) {
        //uncomment below and update the code to test detachPolicy
        //instance.detachPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachTypedLink', function() {
      it('should call detachTypedLink successfully', function(done) {
        //uncomment below and update the code to test detachTypedLink
        //instance.detachTypedLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableDirectory', function() {
      it('should call disableDirectory successfully', function(done) {
        //uncomment below and update the code to test disableDirectory
        //instance.disableDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableDirectory', function() {
      it('should call enableDirectory successfully', function(done) {
        //uncomment below and update the code to test enableDirectory
        //instance.enableDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppliedSchemaVersion', function() {
      it('should call getAppliedSchemaVersion successfully', function(done) {
        //uncomment below and update the code to test getAppliedSchemaVersion
        //instance.getAppliedSchemaVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDirectory', function() {
      it('should call getDirectory successfully', function(done) {
        //uncomment below and update the code to test getDirectory
        //instance.getDirectory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFacet', function() {
      it('should call getFacet successfully', function(done) {
        //uncomment below and update the code to test getFacet
        //instance.getFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLinkAttributes', function() {
      it('should call getLinkAttributes successfully', function(done) {
        //uncomment below and update the code to test getLinkAttributes
        //instance.getLinkAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectAttributes', function() {
      it('should call getObjectAttributes successfully', function(done) {
        //uncomment below and update the code to test getObjectAttributes
        //instance.getObjectAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getObjectInformation', function() {
      it('should call getObjectInformation successfully', function(done) {
        //uncomment below and update the code to test getObjectInformation
        //instance.getObjectInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSchemaAsJson', function() {
      it('should call getSchemaAsJson successfully', function(done) {
        //uncomment below and update the code to test getSchemaAsJson
        //instance.getSchemaAsJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTypedLinkFacetInformation', function() {
      it('should call getTypedLinkFacetInformation successfully', function(done) {
        //uncomment below and update the code to test getTypedLinkFacetInformation
        //instance.getTypedLinkFacetInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppliedSchemaArns', function() {
      it('should call listAppliedSchemaArns successfully', function(done) {
        //uncomment below and update the code to test listAppliedSchemaArns
        //instance.listAppliedSchemaArns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAttachedIndices', function() {
      it('should call listAttachedIndices successfully', function(done) {
        //uncomment below and update the code to test listAttachedIndices
        //instance.listAttachedIndices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDevelopmentSchemaArns', function() {
      it('should call listDevelopmentSchemaArns successfully', function(done) {
        //uncomment below and update the code to test listDevelopmentSchemaArns
        //instance.listDevelopmentSchemaArns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDirectories', function() {
      it('should call listDirectories successfully', function(done) {
        //uncomment below and update the code to test listDirectories
        //instance.listDirectories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFacetAttributes', function() {
      it('should call listFacetAttributes successfully', function(done) {
        //uncomment below and update the code to test listFacetAttributes
        //instance.listFacetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFacetNames', function() {
      it('should call listFacetNames successfully', function(done) {
        //uncomment below and update the code to test listFacetNames
        //instance.listFacetNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIncomingTypedLinks', function() {
      it('should call listIncomingTypedLinks successfully', function(done) {
        //uncomment below and update the code to test listIncomingTypedLinks
        //instance.listIncomingTypedLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listIndex', function() {
      it('should call listIndex successfully', function(done) {
        //uncomment below and update the code to test listIndex
        //instance.listIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listObjectAttributes', function() {
      it('should call listObjectAttributes successfully', function(done) {
        //uncomment below and update the code to test listObjectAttributes
        //instance.listObjectAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listObjectChildren', function() {
      it('should call listObjectChildren successfully', function(done) {
        //uncomment below and update the code to test listObjectChildren
        //instance.listObjectChildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listObjectParentPaths', function() {
      it('should call listObjectParentPaths successfully', function(done) {
        //uncomment below and update the code to test listObjectParentPaths
        //instance.listObjectParentPaths(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listObjectParents', function() {
      it('should call listObjectParents successfully', function(done) {
        //uncomment below and update the code to test listObjectParents
        //instance.listObjectParents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listObjectPolicies', function() {
      it('should call listObjectPolicies successfully', function(done) {
        //uncomment below and update the code to test listObjectPolicies
        //instance.listObjectPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listOutgoingTypedLinks', function() {
      it('should call listOutgoingTypedLinks successfully', function(done) {
        //uncomment below and update the code to test listOutgoingTypedLinks
        //instance.listOutgoingTypedLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPolicyAttachments', function() {
      it('should call listPolicyAttachments successfully', function(done) {
        //uncomment below and update the code to test listPolicyAttachments
        //instance.listPolicyAttachments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPublishedSchemaArns', function() {
      it('should call listPublishedSchemaArns successfully', function(done) {
        //uncomment below and update the code to test listPublishedSchemaArns
        //instance.listPublishedSchemaArns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTypedLinkFacetAttributes', function() {
      it('should call listTypedLinkFacetAttributes successfully', function(done) {
        //uncomment below and update the code to test listTypedLinkFacetAttributes
        //instance.listTypedLinkFacetAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTypedLinkFacetNames', function() {
      it('should call listTypedLinkFacetNames successfully', function(done) {
        //uncomment below and update the code to test listTypedLinkFacetNames
        //instance.listTypedLinkFacetNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lookupPolicy', function() {
      it('should call lookupPolicy successfully', function(done) {
        //uncomment below and update the code to test lookupPolicy
        //instance.lookupPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('publishSchema', function() {
      it('should call publishSchema successfully', function(done) {
        //uncomment below and update the code to test publishSchema
        //instance.publishSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSchemaFromJson', function() {
      it('should call putSchemaFromJson successfully', function(done) {
        //uncomment below and update the code to test putSchemaFromJson
        //instance.putSchemaFromJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFacetFromObject', function() {
      it('should call removeFacetFromObject successfully', function(done) {
        //uncomment below and update the code to test removeFacetFromObject
        //instance.removeFacetFromObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFacet', function() {
      it('should call updateFacet successfully', function(done) {
        //uncomment below and update the code to test updateFacet
        //instance.updateFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLinkAttributes', function() {
      it('should call updateLinkAttributes successfully', function(done) {
        //uncomment below and update the code to test updateLinkAttributes
        //instance.updateLinkAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateObjectAttributes', function() {
      it('should call updateObjectAttributes successfully', function(done) {
        //uncomment below and update the code to test updateObjectAttributes
        //instance.updateObjectAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSchema', function() {
      it('should call updateSchema successfully', function(done) {
        //uncomment below and update the code to test updateSchema
        //instance.updateSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTypedLinkFacet', function() {
      it('should call updateTypedLinkFacet successfully', function(done) {
        //uncomment below and update the code to test updateTypedLinkFacet
        //instance.updateTypedLinkFacet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgradeAppliedSchema', function() {
      it('should call upgradeAppliedSchema successfully', function(done) {
        //uncomment below and update the code to test upgradeAppliedSchema
        //instance.upgradeAppliedSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('upgradePublishedSchema', function() {
      it('should call upgradePublishedSchema successfully', function(done) {
        //uncomment below and update the code to test upgradePublishedSchema
        //instance.upgradePublishedSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
