# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FacetAttributeReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_facet_name: str=None, target_attribute_name: str=None):
        """FacetAttributeReference - a model defined in OpenAPI

        :param target_facet_name: The target_facet_name of this FacetAttributeReference.
        :param target_attribute_name: The target_attribute_name of this FacetAttributeReference.
        """
        self.openapi_types = {
            'target_facet_name': str,
            'target_attribute_name': str
        }

        self.attribute_map = {
            'target_facet_name': 'TargetFacetName',
            'target_attribute_name': 'TargetAttributeName'
        }

        self._target_facet_name = target_facet_name
        self._target_attribute_name = target_attribute_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetAttributeReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetAttributeReference of this FacetAttributeReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_facet_name(self):
        """Gets the target_facet_name of this FacetAttributeReference.


        :return: The target_facet_name of this FacetAttributeReference.
        :rtype: str
        """
        return self._target_facet_name

    @target_facet_name.setter
    def target_facet_name(self, target_facet_name):
        """Sets the target_facet_name of this FacetAttributeReference.


        :param target_facet_name: The target_facet_name of this FacetAttributeReference.
        :type target_facet_name: str
        """
        if target_facet_name is None:
            raise ValueError("Invalid value for `target_facet_name`, must not be `None`")

        self._target_facet_name = target_facet_name

    @property
    def target_attribute_name(self):
        """Gets the target_attribute_name of this FacetAttributeReference.


        :return: The target_attribute_name of this FacetAttributeReference.
        :rtype: str
        """
        return self._target_attribute_name

    @target_attribute_name.setter
    def target_attribute_name(self, target_attribute_name):
        """Sets the target_attribute_name of this FacetAttributeReference.


        :param target_attribute_name: The target_attribute_name of this FacetAttributeReference.
        :type target_attribute_name: str
        """
        if target_attribute_name is None:
            raise ValueError("Invalid value for `target_attribute_name`, must not be `None`")

        self._target_attribute_name = target_attribute_name
