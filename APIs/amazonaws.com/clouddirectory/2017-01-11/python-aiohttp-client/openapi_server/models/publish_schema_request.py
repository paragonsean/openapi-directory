# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PublishSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version: str=None, minor_version: str=None, name: str=None):
        """PublishSchemaRequest - a model defined in OpenAPI

        :param version: The version of this PublishSchemaRequest.
        :param minor_version: The minor_version of this PublishSchemaRequest.
        :param name: The name of this PublishSchemaRequest.
        """
        self.openapi_types = {
            'version': str,
            'minor_version': str,
            'name': str
        }

        self.attribute_map = {
            'version': 'Version',
            'minor_version': 'MinorVersion',
            'name': 'Name'
        }

        self._version = version
        self._minor_version = minor_version
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublishSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublishSchema_request of this PublishSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this PublishSchemaRequest.

        The major version under which the schema will be published. Schemas have both a major and minor version associated with them.

        :return: The version of this PublishSchemaRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PublishSchemaRequest.

        The major version under which the schema will be published. Schemas have both a major and minor version associated with them.

        :param version: The version of this PublishSchemaRequest.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")
        if version is not None and len(version) > 10:
            raise ValueError("Invalid value for `version`, length must be less than or equal to `10`")
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")
        if version is not None and not re.search(r'^[a-zA-Z0-9._-]*$', version):
            raise ValueError("Invalid value for `version`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._version = version

    @property
    def minor_version(self):
        """Gets the minor_version of this PublishSchemaRequest.

        The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.

        :return: The minor_version of this PublishSchemaRequest.
        :rtype: str
        """
        return self._minor_version

    @minor_version.setter
    def minor_version(self, minor_version):
        """Sets the minor_version of this PublishSchemaRequest.

        The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.

        :param minor_version: The minor_version of this PublishSchemaRequest.
        :type minor_version: str
        """
        if minor_version is not None and len(minor_version) > 10:
            raise ValueError("Invalid value for `minor_version`, length must be less than or equal to `10`")
        if minor_version is not None and len(minor_version) < 1:
            raise ValueError("Invalid value for `minor_version`, length must be greater than or equal to `1`")
        if minor_version is not None and not re.search(r'^[a-zA-Z0-9._-]*$', minor_version):
            raise ValueError("Invalid value for `minor_version`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._minor_version = minor_version

    @property
    def name(self):
        """Gets the name of this PublishSchemaRequest.

        The new name under which the schema will be published. If this is not provided, the development schema is considered.

        :return: The name of this PublishSchemaRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublishSchemaRequest.

        The new name under which the schema will be published. If this is not provided, the development schema is considered.

        :param name: The name of this PublishSchemaRequest.
        :type name: str
        """
        if name is not None and len(name) > 32:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `32`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9._-]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._name = name
