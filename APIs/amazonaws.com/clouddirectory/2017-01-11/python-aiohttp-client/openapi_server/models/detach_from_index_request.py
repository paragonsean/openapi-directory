# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_detach_from_index_index_reference import BatchDetachFromIndexIndexReference
from openapi_server.models.batch_detach_from_index_target_reference import BatchDetachFromIndexTargetReference
from openapi_server import util


class DetachFromIndexRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index_reference: BatchDetachFromIndexIndexReference=None, target_reference: BatchDetachFromIndexTargetReference=None):
        """DetachFromIndexRequest - a model defined in OpenAPI

        :param index_reference: The index_reference of this DetachFromIndexRequest.
        :param target_reference: The target_reference of this DetachFromIndexRequest.
        """
        self.openapi_types = {
            'index_reference': BatchDetachFromIndexIndexReference,
            'target_reference': BatchDetachFromIndexTargetReference
        }

        self.attribute_map = {
            'index_reference': 'IndexReference',
            'target_reference': 'TargetReference'
        }

        self._index_reference = index_reference
        self._target_reference = target_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetachFromIndexRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetachFromIndexRequest of this DetachFromIndexRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index_reference(self):
        """Gets the index_reference of this DetachFromIndexRequest.


        :return: The index_reference of this DetachFromIndexRequest.
        :rtype: BatchDetachFromIndexIndexReference
        """
        return self._index_reference

    @index_reference.setter
    def index_reference(self, index_reference):
        """Sets the index_reference of this DetachFromIndexRequest.


        :param index_reference: The index_reference of this DetachFromIndexRequest.
        :type index_reference: BatchDetachFromIndexIndexReference
        """
        if index_reference is None:
            raise ValueError("Invalid value for `index_reference`, must not be `None`")

        self._index_reference = index_reference

    @property
    def target_reference(self):
        """Gets the target_reference of this DetachFromIndexRequest.


        :return: The target_reference of this DetachFromIndexRequest.
        :rtype: BatchDetachFromIndexTargetReference
        """
        return self._target_reference

    @target_reference.setter
    def target_reference(self, target_reference):
        """Sets the target_reference of this DetachFromIndexRequest.


        :param target_reference: The target_reference of this DetachFromIndexRequest.
        :type target_reference: BatchDetachFromIndexTargetReference
        """
        if target_reference is None:
            raise ValueError("Invalid value for `target_reference`, must not be `None`")

        self._target_reference = target_reference
