# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_attribute_attribute_definition import FacetAttributeAttributeDefinition
from openapi_server.models.facet_attribute_attribute_reference import FacetAttributeAttributeReference
from openapi_server.models.required_attribute_behavior import RequiredAttributeBehavior
from openapi_server import util


class FacetAttribute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, attribute_definition: FacetAttributeAttributeDefinition=None, attribute_reference: FacetAttributeAttributeReference=None, required_behavior: RequiredAttributeBehavior=None):
        """FacetAttribute - a model defined in OpenAPI

        :param name: The name of this FacetAttribute.
        :param attribute_definition: The attribute_definition of this FacetAttribute.
        :param attribute_reference: The attribute_reference of this FacetAttribute.
        :param required_behavior: The required_behavior of this FacetAttribute.
        """
        self.openapi_types = {
            'name': str,
            'attribute_definition': FacetAttributeAttributeDefinition,
            'attribute_reference': FacetAttributeAttributeReference,
            'required_behavior': RequiredAttributeBehavior
        }

        self.attribute_map = {
            'name': 'Name',
            'attribute_definition': 'AttributeDefinition',
            'attribute_reference': 'AttributeReference',
            'required_behavior': 'RequiredBehavior'
        }

        self._name = name
        self._attribute_definition = attribute_definition
        self._attribute_reference = attribute_reference
        self._required_behavior = required_behavior

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetAttribute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetAttribute of this FacetAttribute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this FacetAttribute.


        :return: The name of this FacetAttribute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FacetAttribute.


        :param name: The name of this FacetAttribute.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def attribute_definition(self):
        """Gets the attribute_definition of this FacetAttribute.


        :return: The attribute_definition of this FacetAttribute.
        :rtype: FacetAttributeAttributeDefinition
        """
        return self._attribute_definition

    @attribute_definition.setter
    def attribute_definition(self, attribute_definition):
        """Sets the attribute_definition of this FacetAttribute.


        :param attribute_definition: The attribute_definition of this FacetAttribute.
        :type attribute_definition: FacetAttributeAttributeDefinition
        """

        self._attribute_definition = attribute_definition

    @property
    def attribute_reference(self):
        """Gets the attribute_reference of this FacetAttribute.


        :return: The attribute_reference of this FacetAttribute.
        :rtype: FacetAttributeAttributeReference
        """
        return self._attribute_reference

    @attribute_reference.setter
    def attribute_reference(self, attribute_reference):
        """Sets the attribute_reference of this FacetAttribute.


        :param attribute_reference: The attribute_reference of this FacetAttribute.
        :type attribute_reference: FacetAttributeAttributeReference
        """

        self._attribute_reference = attribute_reference

    @property
    def required_behavior(self):
        """Gets the required_behavior of this FacetAttribute.


        :return: The required_behavior of this FacetAttribute.
        :rtype: RequiredAttributeBehavior
        """
        return self._required_behavior

    @required_behavior.setter
    def required_behavior(self, required_behavior):
        """Sets the required_behavior of this FacetAttribute.


        :param required_behavior: The required_behavior of this FacetAttribute.
        :type required_behavior: RequiredAttributeBehavior
        """

        self._required_behavior = required_behavior
