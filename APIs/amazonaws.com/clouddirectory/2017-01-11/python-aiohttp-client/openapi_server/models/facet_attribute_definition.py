# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_attribute_definition_default_value import FacetAttributeDefinitionDefaultValue
from openapi_server.models.facet_attribute_type import FacetAttributeType
from openapi_server import util


class FacetAttributeDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: FacetAttributeType=None, default_value: FacetAttributeDefinitionDefaultValue=None, is_immutable: bool=None, rules: Dict=None):
        """FacetAttributeDefinition - a model defined in OpenAPI

        :param type: The type of this FacetAttributeDefinition.
        :param default_value: The default_value of this FacetAttributeDefinition.
        :param is_immutable: The is_immutable of this FacetAttributeDefinition.
        :param rules: The rules of this FacetAttributeDefinition.
        """
        self.openapi_types = {
            'type': FacetAttributeType,
            'default_value': FacetAttributeDefinitionDefaultValue,
            'is_immutable': bool,
            'rules': Dict
        }

        self.attribute_map = {
            'type': 'Type',
            'default_value': 'DefaultValue',
            'is_immutable': 'IsImmutable',
            'rules': 'Rules'
        }

        self._type = type
        self._default_value = default_value
        self._is_immutable = is_immutable
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetAttributeDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetAttributeDefinition of this FacetAttributeDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this FacetAttributeDefinition.


        :return: The type of this FacetAttributeDefinition.
        :rtype: FacetAttributeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FacetAttributeDefinition.


        :param type: The type of this FacetAttributeDefinition.
        :type type: FacetAttributeType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def default_value(self):
        """Gets the default_value of this FacetAttributeDefinition.


        :return: The default_value of this FacetAttributeDefinition.
        :rtype: FacetAttributeDefinitionDefaultValue
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this FacetAttributeDefinition.


        :param default_value: The default_value of this FacetAttributeDefinition.
        :type default_value: FacetAttributeDefinitionDefaultValue
        """

        self._default_value = default_value

    @property
    def is_immutable(self):
        """Gets the is_immutable of this FacetAttributeDefinition.


        :return: The is_immutable of this FacetAttributeDefinition.
        :rtype: bool
        """
        return self._is_immutable

    @is_immutable.setter
    def is_immutable(self, is_immutable):
        """Sets the is_immutable of this FacetAttributeDefinition.


        :param is_immutable: The is_immutable of this FacetAttributeDefinition.
        :type is_immutable: bool
        """

        self._is_immutable = is_immutable

    @property
    def rules(self):
        """Gets the rules of this FacetAttributeDefinition.


        :return: The rules of this FacetAttributeDefinition.
        :rtype: Dict
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this FacetAttributeDefinition.


        :param rules: The rules of this FacetAttributeDefinition.
        :type rules: Dict
        """

        self._rules = rules
