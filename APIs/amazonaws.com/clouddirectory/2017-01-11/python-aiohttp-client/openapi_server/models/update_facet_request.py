# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_attribute_update import FacetAttributeUpdate
import re
from openapi_server import util


class UpdateFacetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, attribute_updates: List[FacetAttributeUpdate]=None, object_type: str=None):
        """UpdateFacetRequest - a model defined in OpenAPI

        :param name: The name of this UpdateFacetRequest.
        :param attribute_updates: The attribute_updates of this UpdateFacetRequest.
        :param object_type: The object_type of this UpdateFacetRequest.
        """
        self.openapi_types = {
            'name': str,
            'attribute_updates': List[FacetAttributeUpdate],
            'object_type': str
        }

        self.attribute_map = {
            'name': 'Name',
            'attribute_updates': 'AttributeUpdates',
            'object_type': 'ObjectType'
        }

        self._name = name
        self._attribute_updates = attribute_updates
        self._object_type = object_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFacetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFacet_request of this UpdateFacetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateFacetRequest.

        The name of the facet.

        :return: The name of this UpdateFacetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateFacetRequest.

        The name of the facet.

        :param name: The name of this UpdateFacetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9._-]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._name = name

    @property
    def attribute_updates(self):
        """Gets the attribute_updates of this UpdateFacetRequest.

        List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. 

        :return: The attribute_updates of this UpdateFacetRequest.
        :rtype: List[FacetAttributeUpdate]
        """
        return self._attribute_updates

    @attribute_updates.setter
    def attribute_updates(self, attribute_updates):
        """Sets the attribute_updates of this UpdateFacetRequest.

        List of attributes that need to be updated in a given schema <a>Facet</a>. Each attribute is followed by <code>AttributeAction</code>, which specifies the type of update operation to perform. 

        :param attribute_updates: The attribute_updates of this UpdateFacetRequest.
        :type attribute_updates: List[FacetAttributeUpdate]
        """

        self._attribute_updates = attribute_updates

    @property
    def object_type(self):
        """Gets the object_type of this UpdateFacetRequest.

        The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.

        :return: The object_type of this UpdateFacetRequest.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this UpdateFacetRequest.

        The object type that is associated with the facet. See <a>CreateFacetRequest$ObjectType</a> for more details.

        :param object_type: The object_type of this UpdateFacetRequest.
        :type object_type: str
        """
        allowed_values = ["NODE", "LEAF_NODE", "POLICY", "INDEX"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type
