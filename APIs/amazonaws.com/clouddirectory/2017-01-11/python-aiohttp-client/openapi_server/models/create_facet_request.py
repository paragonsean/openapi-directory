# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_attribute import FacetAttribute
import re
from openapi_server import util


class CreateFacetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, attributes: List[FacetAttribute]=None, object_type: str=None, facet_style: str=None):
        """CreateFacetRequest - a model defined in OpenAPI

        :param name: The name of this CreateFacetRequest.
        :param attributes: The attributes of this CreateFacetRequest.
        :param object_type: The object_type of this CreateFacetRequest.
        :param facet_style: The facet_style of this CreateFacetRequest.
        """
        self.openapi_types = {
            'name': str,
            'attributes': List[FacetAttribute],
            'object_type': str,
            'facet_style': str
        }

        self.attribute_map = {
            'name': 'Name',
            'attributes': 'Attributes',
            'object_type': 'ObjectType',
            'facet_style': 'FacetStyle'
        }

        self._name = name
        self._attributes = attributes
        self._object_type = object_type
        self._facet_style = facet_style

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFacetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFacet_request of this CreateFacetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateFacetRequest.

        The name of the <a>Facet</a>, which is unique for a given schema.

        :return: The name of this CreateFacetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFacetRequest.

        The name of the <a>Facet</a>, which is unique for a given schema.

        :param name: The name of this CreateFacetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 64:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `64`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[a-zA-Z0-9._-]*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]*$/`")

        self._name = name

    @property
    def attributes(self):
        """Gets the attributes of this CreateFacetRequest.

        The attributes that are associated with the <a>Facet</a>.

        :return: The attributes of this CreateFacetRequest.
        :rtype: List[FacetAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this CreateFacetRequest.

        The attributes that are associated with the <a>Facet</a>.

        :param attributes: The attributes of this CreateFacetRequest.
        :type attributes: List[FacetAttribute]
        """

        self._attributes = attributes

    @property
    def object_type(self):
        """Gets the object_type of this CreateFacetRequest.

        <p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>

        :return: The object_type of this CreateFacetRequest.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this CreateFacetRequest.

        <p>Specifies whether a given object created from this facet is of type node, leaf node, policy or index.</p> <ul> <li> <p>Node: Can have multiple children but one parent.</p> </li> </ul> <ul> <li> <p>Leaf node: Cannot have children but can have multiple parents.</p> </li> </ul> <ul> <li> <p>Policy: Allows you to store a policy document and policy type. For more information, see <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\">Policies</a>.</p> </li> </ul> <ul> <li> <p>Index: Can be created with the Index API.</p> </li> </ul>

        :param object_type: The object_type of this CreateFacetRequest.
        :type object_type: str
        """
        allowed_values = ["NODE", "LEAF_NODE", "POLICY", "INDEX"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def facet_style(self):
        """Gets the facet_style of this CreateFacetRequest.

        There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.

        :return: The facet_style of this CreateFacetRequest.
        :rtype: str
        """
        return self._facet_style

    @facet_style.setter
    def facet_style(self, facet_style):
        """Sets the facet_style of this CreateFacetRequest.

        There are two different styles that you can define on any given facet, <code>Static</code> and <code>Dynamic</code>. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.

        :param facet_style: The facet_style of this CreateFacetRequest.
        :type facet_style: str
        """
        allowed_values = ["STATIC", "DYNAMIC"]  # noqa: E501
        if facet_style not in allowed_values:
            raise ValueError(
                "Invalid value for `facet_style` ({0}), must be one of {1}"
                .format(facet_style, allowed_values)
            )

        self._facet_style = facet_style
