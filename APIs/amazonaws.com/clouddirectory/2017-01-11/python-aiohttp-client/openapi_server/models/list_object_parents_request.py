# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_facet_to_object_request_object_reference import AddFacetToObjectRequestObjectReference
from openapi_server import util


class ListObjectParentsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_reference: AddFacetToObjectRequestObjectReference=None, next_token: str=None, max_results: int=None, include_all_links_to_each_parent: bool=None):
        """ListObjectParentsRequest - a model defined in OpenAPI

        :param object_reference: The object_reference of this ListObjectParentsRequest.
        :param next_token: The next_token of this ListObjectParentsRequest.
        :param max_results: The max_results of this ListObjectParentsRequest.
        :param include_all_links_to_each_parent: The include_all_links_to_each_parent of this ListObjectParentsRequest.
        """
        self.openapi_types = {
            'object_reference': AddFacetToObjectRequestObjectReference,
            'next_token': str,
            'max_results': int,
            'include_all_links_to_each_parent': bool
        }

        self.attribute_map = {
            'object_reference': 'ObjectReference',
            'next_token': 'NextToken',
            'max_results': 'MaxResults',
            'include_all_links_to_each_parent': 'IncludeAllLinksToEachParent'
        }

        self._object_reference = object_reference
        self._next_token = next_token
        self._max_results = max_results
        self._include_all_links_to_each_parent = include_all_links_to_each_parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListObjectParentsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListObjectParents_request of this ListObjectParentsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_reference(self):
        """Gets the object_reference of this ListObjectParentsRequest.


        :return: The object_reference of this ListObjectParentsRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this ListObjectParentsRequest.


        :param object_reference: The object_reference of this ListObjectParentsRequest.
        :type object_reference: AddFacetToObjectRequestObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference

    @property
    def next_token(self):
        """Gets the next_token of this ListObjectParentsRequest.

        The pagination token.

        :return: The next_token of this ListObjectParentsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListObjectParentsRequest.

        The pagination token.

        :param next_token: The next_token of this ListObjectParentsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListObjectParentsRequest.

        The maximum number of items to be retrieved in a single call. This is an approximate number.

        :return: The max_results of this ListObjectParentsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListObjectParentsRequest.

        The maximum number of items to be retrieved in a single call. This is an approximate number.

        :param max_results: The max_results of this ListObjectParentsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def include_all_links_to_each_parent(self):
        """Gets the include_all_links_to_each_parent of this ListObjectParentsRequest.

        When set to True, returns all <a>ListObjectParentsResponse$ParentLinks</a>. There could be multiple links between a parent-child pair.

        :return: The include_all_links_to_each_parent of this ListObjectParentsRequest.
        :rtype: bool
        """
        return self._include_all_links_to_each_parent

    @include_all_links_to_each_parent.setter
    def include_all_links_to_each_parent(self, include_all_links_to_each_parent):
        """Sets the include_all_links_to_each_parent of this ListObjectParentsRequest.

        When set to True, returns all <a>ListObjectParentsResponse$ParentLinks</a>. There could be multiple links between a parent-child pair.

        :param include_all_links_to_each_parent: The include_all_links_to_each_parent of this ListObjectParentsRequest.
        :type include_all_links_to_each_parent: bool
        """

        self._include_all_links_to_each_parent = include_all_links_to_each_parent
