# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttributeKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schema_arn: str=None, facet_name: str=None, name: str=None):
        """AttributeKey - a model defined in OpenAPI

        :param schema_arn: The schema_arn of this AttributeKey.
        :param facet_name: The facet_name of this AttributeKey.
        :param name: The name of this AttributeKey.
        """
        self.openapi_types = {
            'schema_arn': str,
            'facet_name': str,
            'name': str
        }

        self.attribute_map = {
            'schema_arn': 'SchemaArn',
            'facet_name': 'FacetName',
            'name': 'Name'
        }

        self._schema_arn = schema_arn
        self._facet_name = facet_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeKey of this AttributeKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_arn(self):
        """Gets the schema_arn of this AttributeKey.


        :return: The schema_arn of this AttributeKey.
        :rtype: str
        """
        return self._schema_arn

    @schema_arn.setter
    def schema_arn(self, schema_arn):
        """Sets the schema_arn of this AttributeKey.


        :param schema_arn: The schema_arn of this AttributeKey.
        :type schema_arn: str
        """
        if schema_arn is None:
            raise ValueError("Invalid value for `schema_arn`, must not be `None`")

        self._schema_arn = schema_arn

    @property
    def facet_name(self):
        """Gets the facet_name of this AttributeKey.


        :return: The facet_name of this AttributeKey.
        :rtype: str
        """
        return self._facet_name

    @facet_name.setter
    def facet_name(self, facet_name):
        """Sets the facet_name of this AttributeKey.


        :param facet_name: The facet_name of this AttributeKey.
        :type facet_name: str
        """
        if facet_name is None:
            raise ValueError("Invalid value for `facet_name`, must not be `None`")

        self._facet_name = facet_name

    @property
    def name(self):
        """Gets the name of this AttributeKey.


        :return: The name of this AttributeKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AttributeKey.


        :param name: The name of this AttributeKey.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
