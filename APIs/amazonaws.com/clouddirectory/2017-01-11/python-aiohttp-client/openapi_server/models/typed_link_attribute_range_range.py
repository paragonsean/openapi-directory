# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.range_mode import RangeMode
from openapi_server.models.typed_attribute_value_range_end_value import TypedAttributeValueRangeEndValue
from openapi_server.models.typed_attribute_value_range_start_value import TypedAttributeValueRangeStartValue
from openapi_server import util


class TypedLinkAttributeRangeRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_mode: RangeMode=None, start_value: TypedAttributeValueRangeStartValue=None, end_mode: RangeMode=None, end_value: TypedAttributeValueRangeEndValue=None):
        """TypedLinkAttributeRangeRange - a model defined in OpenAPI

        :param start_mode: The start_mode of this TypedLinkAttributeRangeRange.
        :param start_value: The start_value of this TypedLinkAttributeRangeRange.
        :param end_mode: The end_mode of this TypedLinkAttributeRangeRange.
        :param end_value: The end_value of this TypedLinkAttributeRangeRange.
        """
        self.openapi_types = {
            'start_mode': RangeMode,
            'start_value': TypedAttributeValueRangeStartValue,
            'end_mode': RangeMode,
            'end_value': TypedAttributeValueRangeEndValue
        }

        self.attribute_map = {
            'start_mode': 'StartMode',
            'start_value': 'StartValue',
            'end_mode': 'EndMode',
            'end_value': 'EndValue'
        }

        self._start_mode = start_mode
        self._start_value = start_value
        self._end_mode = end_mode
        self._end_value = end_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TypedLinkAttributeRangeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TypedLinkAttributeRange_Range of this TypedLinkAttributeRangeRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_mode(self):
        """Gets the start_mode of this TypedLinkAttributeRangeRange.


        :return: The start_mode of this TypedLinkAttributeRangeRange.
        :rtype: RangeMode
        """
        return self._start_mode

    @start_mode.setter
    def start_mode(self, start_mode):
        """Sets the start_mode of this TypedLinkAttributeRangeRange.


        :param start_mode: The start_mode of this TypedLinkAttributeRangeRange.
        :type start_mode: RangeMode
        """
        if start_mode is None:
            raise ValueError("Invalid value for `start_mode`, must not be `None`")

        self._start_mode = start_mode

    @property
    def start_value(self):
        """Gets the start_value of this TypedLinkAttributeRangeRange.


        :return: The start_value of this TypedLinkAttributeRangeRange.
        :rtype: TypedAttributeValueRangeStartValue
        """
        return self._start_value

    @start_value.setter
    def start_value(self, start_value):
        """Sets the start_value of this TypedLinkAttributeRangeRange.


        :param start_value: The start_value of this TypedLinkAttributeRangeRange.
        :type start_value: TypedAttributeValueRangeStartValue
        """

        self._start_value = start_value

    @property
    def end_mode(self):
        """Gets the end_mode of this TypedLinkAttributeRangeRange.


        :return: The end_mode of this TypedLinkAttributeRangeRange.
        :rtype: RangeMode
        """
        return self._end_mode

    @end_mode.setter
    def end_mode(self, end_mode):
        """Sets the end_mode of this TypedLinkAttributeRangeRange.


        :param end_mode: The end_mode of this TypedLinkAttributeRangeRange.
        :type end_mode: RangeMode
        """
        if end_mode is None:
            raise ValueError("Invalid value for `end_mode`, must not be `None`")

        self._end_mode = end_mode

    @property
    def end_value(self):
        """Gets the end_value of this TypedLinkAttributeRangeRange.


        :return: The end_value of this TypedLinkAttributeRangeRange.
        :rtype: TypedAttributeValueRangeEndValue
        """
        return self._end_value

    @end_value.setter
    def end_value(self, end_value):
        """Sets the end_value of this TypedLinkAttributeRangeRange.


        :param end_value: The end_value of this TypedLinkAttributeRangeRange.
        :type end_value: TypedAttributeValueRangeEndValue
        """

        self._end_value = end_value
