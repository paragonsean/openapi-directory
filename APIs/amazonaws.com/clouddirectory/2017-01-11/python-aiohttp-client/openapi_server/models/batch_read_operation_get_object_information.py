# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_get_object_information_object_reference import BatchGetObjectInformationObjectReference
from openapi_server import util


class BatchReadOperationGetObjectInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_reference: BatchGetObjectInformationObjectReference=None):
        """BatchReadOperationGetObjectInformation - a model defined in OpenAPI

        :param object_reference: The object_reference of this BatchReadOperationGetObjectInformation.
        """
        self.openapi_types = {
            'object_reference': BatchGetObjectInformationObjectReference
        }

        self.attribute_map = {
            'object_reference': 'ObjectReference'
        }

        self._object_reference = object_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchReadOperationGetObjectInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchReadOperation_GetObjectInformation of this BatchReadOperationGetObjectInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_reference(self):
        """Gets the object_reference of this BatchReadOperationGetObjectInformation.


        :return: The object_reference of this BatchReadOperationGetObjectInformation.
        :rtype: BatchGetObjectInformationObjectReference
        """
        return self._object_reference

    @object_reference.setter
    def object_reference(self, object_reference):
        """Sets the object_reference of this BatchReadOperationGetObjectInformation.


        :param object_reference: The object_reference of this BatchReadOperationGetObjectInformation.
        :type object_reference: BatchGetObjectInformationObjectReference
        """
        if object_reference is None:
            raise ValueError("Invalid value for `object_reference`, must not be `None`")

        self._object_reference = object_reference
