# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.add_facet_to_object_request_object_reference import AddFacetToObjectRequestObjectReference
import re
from openapi_server import util


class AttachObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent_reference: AddFacetToObjectRequestObjectReference=None, child_reference: AddFacetToObjectRequestObjectReference=None, link_name: str=None):
        """AttachObjectRequest - a model defined in OpenAPI

        :param parent_reference: The parent_reference of this AttachObjectRequest.
        :param child_reference: The child_reference of this AttachObjectRequest.
        :param link_name: The link_name of this AttachObjectRequest.
        """
        self.openapi_types = {
            'parent_reference': AddFacetToObjectRequestObjectReference,
            'child_reference': AddFacetToObjectRequestObjectReference,
            'link_name': str
        }

        self.attribute_map = {
            'parent_reference': 'ParentReference',
            'child_reference': 'ChildReference',
            'link_name': 'LinkName'
        }

        self._parent_reference = parent_reference
        self._child_reference = child_reference
        self._link_name = link_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachObject_request of this AttachObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent_reference(self):
        """Gets the parent_reference of this AttachObjectRequest.


        :return: The parent_reference of this AttachObjectRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._parent_reference

    @parent_reference.setter
    def parent_reference(self, parent_reference):
        """Sets the parent_reference of this AttachObjectRequest.


        :param parent_reference: The parent_reference of this AttachObjectRequest.
        :type parent_reference: AddFacetToObjectRequestObjectReference
        """
        if parent_reference is None:
            raise ValueError("Invalid value for `parent_reference`, must not be `None`")

        self._parent_reference = parent_reference

    @property
    def child_reference(self):
        """Gets the child_reference of this AttachObjectRequest.


        :return: The child_reference of this AttachObjectRequest.
        :rtype: AddFacetToObjectRequestObjectReference
        """
        return self._child_reference

    @child_reference.setter
    def child_reference(self, child_reference):
        """Sets the child_reference of this AttachObjectRequest.


        :param child_reference: The child_reference of this AttachObjectRequest.
        :type child_reference: AddFacetToObjectRequestObjectReference
        """
        if child_reference is None:
            raise ValueError("Invalid value for `child_reference`, must not be `None`")

        self._child_reference = child_reference

    @property
    def link_name(self):
        """Gets the link_name of this AttachObjectRequest.

        The link name with which the child object is attached to the parent.

        :return: The link_name of this AttachObjectRequest.
        :rtype: str
        """
        return self._link_name

    @link_name.setter
    def link_name(self, link_name):
        """Sets the link_name of this AttachObjectRequest.

        The link name with which the child object is attached to the parent.

        :param link_name: The link_name of this AttachObjectRequest.
        :type link_name: str
        """
        if link_name is None:
            raise ValueError("Invalid value for `link_name`, must not be `None`")
        if link_name is not None and len(link_name) > 64:
            raise ValueError("Invalid value for `link_name`, length must be less than or equal to `64`")
        if link_name is not None and len(link_name) < 1:
            raise ValueError("Invalid value for `link_name`, length must be greater than or equal to `1`")
        if link_name is not None and not re.search(r'[^\/\[\]\(\):\{\}#@!?\s\\;]+', link_name):
            raise ValueError("Invalid value for `link_name`, must be a follow pattern or equal to `/[^\/\[\]\(\):\{\}#@!?\s\\;]+/`")

        self._link_name = link_name
