/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PublishSchemaRequest model module.
 * @module model/PublishSchemaRequest
 * @version 2017-01-11
 */
class PublishSchemaRequest {
    /**
     * Constructs a new <code>PublishSchemaRequest</code>.
     * @alias module:model/PublishSchemaRequest
     * @param version {String} The major version under which the schema will be published. Schemas have both a major and minor version associated with them.
     */
    constructor(version) { 
        
        PublishSchemaRequest.initialize(this, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, version) { 
        obj['Version'] = version;
    }

    /**
     * Constructs a <code>PublishSchemaRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublishSchemaRequest} obj Optional instance to populate.
     * @return {module:model/PublishSchemaRequest} The populated <code>PublishSchemaRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublishSchemaRequest();

            if (data.hasOwnProperty('Version')) {
                obj['Version'] = ApiClient.convertToType(data['Version'], 'String');
            }
            if (data.hasOwnProperty('MinorVersion')) {
                obj['MinorVersion'] = ApiClient.convertToType(data['MinorVersion'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublishSchemaRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublishSchemaRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublishSchemaRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Version'] && !(typeof data['Version'] === 'string' || data['Version'] instanceof String)) {
            throw new Error("Expected the field `Version` to be a primitive type in the JSON string but got " + data['Version']);
        }
        // ensure the json data is a string
        if (data['MinorVersion'] && !(typeof data['MinorVersion'] === 'string' || data['MinorVersion'] instanceof String)) {
            throw new Error("Expected the field `MinorVersion` to be a primitive type in the JSON string but got " + data['MinorVersion']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}

PublishSchemaRequest.RequiredProperties = ["Version"];

/**
 * The major version under which the schema will be published. Schemas have both a major and minor version associated with them.
 * @member {String} Version
 */
PublishSchemaRequest.prototype['Version'] = undefined;

/**
 * The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.
 * @member {String} MinorVersion
 */
PublishSchemaRequest.prototype['MinorVersion'] = undefined;

/**
 * The new name under which the schema will be published. If this is not provided, the development schema is considered.
 * @member {String} Name
 */
PublishSchemaRequest.prototype['Name'] = undefined;






export default PublishSchemaRequest;

