/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchCreateObjectParentReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchWriteOperationCreateObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchWriteOperationCreateObject {
  public static final String SERIALIZED_NAME_SCHEMA_FACET = "SchemaFacet";
  @SerializedName(SERIALIZED_NAME_SCHEMA_FACET)
  private List schemaFacet;

  public static final String SERIALIZED_NAME_OBJECT_ATTRIBUTE_LIST = "ObjectAttributeList";
  @SerializedName(SERIALIZED_NAME_OBJECT_ATTRIBUTE_LIST)
  private List objectAttributeList;

  public static final String SERIALIZED_NAME_PARENT_REFERENCE = "ParentReference";
  @SerializedName(SERIALIZED_NAME_PARENT_REFERENCE)
  private BatchCreateObjectParentReference parentReference;

  public static final String SERIALIZED_NAME_LINK_NAME = "LinkName";
  @SerializedName(SERIALIZED_NAME_LINK_NAME)
  private String linkName;

  public static final String SERIALIZED_NAME_BATCH_REFERENCE_NAME = "BatchReferenceName";
  @SerializedName(SERIALIZED_NAME_BATCH_REFERENCE_NAME)
  private String batchReferenceName;

  public BatchWriteOperationCreateObject() {
  }

  public BatchWriteOperationCreateObject schemaFacet(List schemaFacet) {
    this.schemaFacet = schemaFacet;
    return this;
  }

  /**
   * Get schemaFacet
   * @return schemaFacet
   */
  @javax.annotation.Nonnull
  public List getSchemaFacet() {
    return schemaFacet;
  }

  public void setSchemaFacet(List schemaFacet) {
    this.schemaFacet = schemaFacet;
  }


  public BatchWriteOperationCreateObject objectAttributeList(List objectAttributeList) {
    this.objectAttributeList = objectAttributeList;
    return this;
  }

  /**
   * Get objectAttributeList
   * @return objectAttributeList
   */
  @javax.annotation.Nonnull
  public List getObjectAttributeList() {
    return objectAttributeList;
  }

  public void setObjectAttributeList(List objectAttributeList) {
    this.objectAttributeList = objectAttributeList;
  }


  public BatchWriteOperationCreateObject parentReference(BatchCreateObjectParentReference parentReference) {
    this.parentReference = parentReference;
    return this;
  }

  /**
   * Get parentReference
   * @return parentReference
   */
  @javax.annotation.Nullable
  public BatchCreateObjectParentReference getParentReference() {
    return parentReference;
  }

  public void setParentReference(BatchCreateObjectParentReference parentReference) {
    this.parentReference = parentReference;
  }


  public BatchWriteOperationCreateObject linkName(String linkName) {
    this.linkName = linkName;
    return this;
  }

  /**
   * Get linkName
   * @return linkName
   */
  @javax.annotation.Nullable
  public String getLinkName() {
    return linkName;
  }

  public void setLinkName(String linkName) {
    this.linkName = linkName;
  }


  public BatchWriteOperationCreateObject batchReferenceName(String batchReferenceName) {
    this.batchReferenceName = batchReferenceName;
    return this;
  }

  /**
   * Get batchReferenceName
   * @return batchReferenceName
   */
  @javax.annotation.Nullable
  public String getBatchReferenceName() {
    return batchReferenceName;
  }

  public void setBatchReferenceName(String batchReferenceName) {
    this.batchReferenceName = batchReferenceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchWriteOperationCreateObject batchWriteOperationCreateObject = (BatchWriteOperationCreateObject) o;
    return Objects.equals(this.schemaFacet, batchWriteOperationCreateObject.schemaFacet) &&
        Objects.equals(this.objectAttributeList, batchWriteOperationCreateObject.objectAttributeList) &&
        Objects.equals(this.parentReference, batchWriteOperationCreateObject.parentReference) &&
        Objects.equals(this.linkName, batchWriteOperationCreateObject.linkName) &&
        Objects.equals(this.batchReferenceName, batchWriteOperationCreateObject.batchReferenceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaFacet, objectAttributeList, parentReference, linkName, batchReferenceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchWriteOperationCreateObject {\n");
    sb.append("    schemaFacet: ").append(toIndentedString(schemaFacet)).append("\n");
    sb.append("    objectAttributeList: ").append(toIndentedString(objectAttributeList)).append("\n");
    sb.append("    parentReference: ").append(toIndentedString(parentReference)).append("\n");
    sb.append("    linkName: ").append(toIndentedString(linkName)).append("\n");
    sb.append("    batchReferenceName: ").append(toIndentedString(batchReferenceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaFacet");
    openapiFields.add("ObjectAttributeList");
    openapiFields.add("ParentReference");
    openapiFields.add("LinkName");
    openapiFields.add("BatchReferenceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SchemaFacet");
    openapiRequiredFields.add("ObjectAttributeList");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchWriteOperationCreateObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchWriteOperationCreateObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchWriteOperationCreateObject is not found in the empty JSON string", BatchWriteOperationCreateObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchWriteOperationCreateObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchWriteOperationCreateObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchWriteOperationCreateObject.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SchemaFacet`
      List.validateJsonElement(jsonObj.get("SchemaFacet"));
      // validate the required field `ObjectAttributeList`
      List.validateJsonElement(jsonObj.get("ObjectAttributeList"));
      // validate the optional field `ParentReference`
      if (jsonObj.get("ParentReference") != null && !jsonObj.get("ParentReference").isJsonNull()) {
        BatchCreateObjectParentReference.validateJsonElement(jsonObj.get("ParentReference"));
      }
      // validate the optional field `LinkName`
      if (jsonObj.get("LinkName") != null && !jsonObj.get("LinkName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LinkName"));
      }
      // validate the optional field `BatchReferenceName`
      if (jsonObj.get("BatchReferenceName") != null && !jsonObj.get("BatchReferenceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BatchReferenceName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchWriteOperationCreateObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchWriteOperationCreateObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchWriteOperationCreateObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchWriteOperationCreateObject.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchWriteOperationCreateObject>() {
           @Override
           public void write(JsonWriter out, BatchWriteOperationCreateObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchWriteOperationCreateObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchWriteOperationCreateObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchWriteOperationCreateObject
   * @throws IOException if the JSON string is invalid with respect to BatchWriteOperationCreateObject
   */
  public static BatchWriteOperationCreateObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchWriteOperationCreateObject.class);
  }

  /**
   * Convert an instance of BatchWriteOperationCreateObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

