/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AddFacetToObjectRequestSchemaFacet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddFacetToObjectRequestSchemaFacet {
  public static final String SERIALIZED_NAME_SCHEMA_ARN = "SchemaArn";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ARN)
  private String schemaArn;

  public static final String SERIALIZED_NAME_FACET_NAME = "FacetName";
  @SerializedName(SERIALIZED_NAME_FACET_NAME)
  private String facetName;

  public AddFacetToObjectRequestSchemaFacet() {
  }

  public AddFacetToObjectRequestSchemaFacet schemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
    return this;
  }

  /**
   * Get schemaArn
   * @return schemaArn
   */
  @javax.annotation.Nullable
  public String getSchemaArn() {
    return schemaArn;
  }

  public void setSchemaArn(String schemaArn) {
    this.schemaArn = schemaArn;
  }


  public AddFacetToObjectRequestSchemaFacet facetName(String facetName) {
    this.facetName = facetName;
    return this;
  }

  /**
   * Get facetName
   * @return facetName
   */
  @javax.annotation.Nullable
  public String getFacetName() {
    return facetName;
  }

  public void setFacetName(String facetName) {
    this.facetName = facetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddFacetToObjectRequestSchemaFacet addFacetToObjectRequestSchemaFacet = (AddFacetToObjectRequestSchemaFacet) o;
    return Objects.equals(this.schemaArn, addFacetToObjectRequestSchemaFacet.schemaArn) &&
        Objects.equals(this.facetName, addFacetToObjectRequestSchemaFacet.facetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaArn, facetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddFacetToObjectRequestSchemaFacet {\n");
    sb.append("    schemaArn: ").append(toIndentedString(schemaArn)).append("\n");
    sb.append("    facetName: ").append(toIndentedString(facetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaArn");
    openapiFields.add("FacetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddFacetToObjectRequestSchemaFacet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddFacetToObjectRequestSchemaFacet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddFacetToObjectRequestSchemaFacet is not found in the empty JSON string", AddFacetToObjectRequestSchemaFacet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddFacetToObjectRequestSchemaFacet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddFacetToObjectRequestSchemaFacet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `SchemaArn`
      if (jsonObj.get("SchemaArn") != null && !jsonObj.get("SchemaArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SchemaArn"));
      }
      // validate the optional field `FacetName`
      if (jsonObj.get("FacetName") != null && !jsonObj.get("FacetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FacetName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddFacetToObjectRequestSchemaFacet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddFacetToObjectRequestSchemaFacet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddFacetToObjectRequestSchemaFacet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddFacetToObjectRequestSchemaFacet.class));

       return (TypeAdapter<T>) new TypeAdapter<AddFacetToObjectRequestSchemaFacet>() {
           @Override
           public void write(JsonWriter out, AddFacetToObjectRequestSchemaFacet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddFacetToObjectRequestSchemaFacet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddFacetToObjectRequestSchemaFacet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddFacetToObjectRequestSchemaFacet
   * @throws IOException if the JSON string is invalid with respect to AddFacetToObjectRequestSchemaFacet
   */
  public static AddFacetToObjectRequestSchemaFacet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddFacetToObjectRequestSchemaFacet.class);
  }

  /**
   * Convert an instance of AddFacetToObjectRequestSchemaFacet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

