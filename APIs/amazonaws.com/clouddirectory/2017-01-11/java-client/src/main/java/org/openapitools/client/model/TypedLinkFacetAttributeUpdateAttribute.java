/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.FacetAttributeDefinitionDefaultValue;
import org.openapitools.client.model.FacetAttributeType;
import org.openapitools.client.model.RequiredAttributeBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TypedLinkFacetAttributeUpdateAttribute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypedLinkFacetAttributeUpdateAttribute {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private FacetAttributeType type;

  public static final String SERIALIZED_NAME_DEFAULT_VALUE = "DefaultValue";
  @SerializedName(SERIALIZED_NAME_DEFAULT_VALUE)
  private FacetAttributeDefinitionDefaultValue defaultValue;

  public static final String SERIALIZED_NAME_IS_IMMUTABLE = "IsImmutable";
  @SerializedName(SERIALIZED_NAME_IS_IMMUTABLE)
  private Boolean isImmutable;

  public static final String SERIALIZED_NAME_RULES = "Rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private Map rules;

  public static final String SERIALIZED_NAME_REQUIRED_BEHAVIOR = "RequiredBehavior";
  @SerializedName(SERIALIZED_NAME_REQUIRED_BEHAVIOR)
  private RequiredAttributeBehavior requiredBehavior;

  public TypedLinkFacetAttributeUpdateAttribute() {
  }

  public TypedLinkFacetAttributeUpdateAttribute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TypedLinkFacetAttributeUpdateAttribute type(FacetAttributeType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public FacetAttributeType getType() {
    return type;
  }

  public void setType(FacetAttributeType type) {
    this.type = type;
  }


  public TypedLinkFacetAttributeUpdateAttribute defaultValue(FacetAttributeDefinitionDefaultValue defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   * @return defaultValue
   */
  @javax.annotation.Nullable
  public FacetAttributeDefinitionDefaultValue getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(FacetAttributeDefinitionDefaultValue defaultValue) {
    this.defaultValue = defaultValue;
  }


  public TypedLinkFacetAttributeUpdateAttribute isImmutable(Boolean isImmutable) {
    this.isImmutable = isImmutable;
    return this;
  }

  /**
   * Get isImmutable
   * @return isImmutable
   */
  @javax.annotation.Nullable
  public Boolean getIsImmutable() {
    return isImmutable;
  }

  public void setIsImmutable(Boolean isImmutable) {
    this.isImmutable = isImmutable;
  }


  public TypedLinkFacetAttributeUpdateAttribute rules(Map rules) {
    this.rules = rules;
    return this;
  }

  /**
   * Get rules
   * @return rules
   */
  @javax.annotation.Nullable
  public Map getRules() {
    return rules;
  }

  public void setRules(Map rules) {
    this.rules = rules;
  }


  public TypedLinkFacetAttributeUpdateAttribute requiredBehavior(RequiredAttributeBehavior requiredBehavior) {
    this.requiredBehavior = requiredBehavior;
    return this;
  }

  /**
   * Get requiredBehavior
   * @return requiredBehavior
   */
  @javax.annotation.Nonnull
  public RequiredAttributeBehavior getRequiredBehavior() {
    return requiredBehavior;
  }

  public void setRequiredBehavior(RequiredAttributeBehavior requiredBehavior) {
    this.requiredBehavior = requiredBehavior;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypedLinkFacetAttributeUpdateAttribute typedLinkFacetAttributeUpdateAttribute = (TypedLinkFacetAttributeUpdateAttribute) o;
    return Objects.equals(this.name, typedLinkFacetAttributeUpdateAttribute.name) &&
        Objects.equals(this.type, typedLinkFacetAttributeUpdateAttribute.type) &&
        Objects.equals(this.defaultValue, typedLinkFacetAttributeUpdateAttribute.defaultValue) &&
        Objects.equals(this.isImmutable, typedLinkFacetAttributeUpdateAttribute.isImmutable) &&
        Objects.equals(this.rules, typedLinkFacetAttributeUpdateAttribute.rules) &&
        Objects.equals(this.requiredBehavior, typedLinkFacetAttributeUpdateAttribute.requiredBehavior);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, defaultValue, isImmutable, rules, requiredBehavior);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypedLinkFacetAttributeUpdateAttribute {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    isImmutable: ").append(toIndentedString(isImmutable)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    requiredBehavior: ").append(toIndentedString(requiredBehavior)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("DefaultValue");
    openapiFields.add("IsImmutable");
    openapiFields.add("Rules");
    openapiFields.add("RequiredBehavior");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("Type");
    openapiRequiredFields.add("RequiredBehavior");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypedLinkFacetAttributeUpdateAttribute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypedLinkFacetAttributeUpdateAttribute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypedLinkFacetAttributeUpdateAttribute is not found in the empty JSON string", TypedLinkFacetAttributeUpdateAttribute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypedLinkFacetAttributeUpdateAttribute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypedLinkFacetAttributeUpdateAttribute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TypedLinkFacetAttributeUpdateAttribute.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `Type`
      FacetAttributeType.validateJsonElement(jsonObj.get("Type"));
      // validate the optional field `DefaultValue`
      if (jsonObj.get("DefaultValue") != null && !jsonObj.get("DefaultValue").isJsonNull()) {
        FacetAttributeDefinitionDefaultValue.validateJsonElement(jsonObj.get("DefaultValue"));
      }
      // validate the optional field `IsImmutable`
      if (jsonObj.get("IsImmutable") != null && !jsonObj.get("IsImmutable").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsImmutable"));
      }
      // validate the optional field `Rules`
      if (jsonObj.get("Rules") != null && !jsonObj.get("Rules").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Rules"));
      }
      // validate the required field `RequiredBehavior`
      RequiredAttributeBehavior.validateJsonElement(jsonObj.get("RequiredBehavior"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypedLinkFacetAttributeUpdateAttribute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypedLinkFacetAttributeUpdateAttribute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypedLinkFacetAttributeUpdateAttribute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypedLinkFacetAttributeUpdateAttribute.class));

       return (TypeAdapter<T>) new TypeAdapter<TypedLinkFacetAttributeUpdateAttribute>() {
           @Override
           public void write(JsonWriter out, TypedLinkFacetAttributeUpdateAttribute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypedLinkFacetAttributeUpdateAttribute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypedLinkFacetAttributeUpdateAttribute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypedLinkFacetAttributeUpdateAttribute
   * @throws IOException if the JSON string is invalid with respect to TypedLinkFacetAttributeUpdateAttribute
   */
  public static TypedLinkFacetAttributeUpdateAttribute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypedLinkFacetAttributeUpdateAttribute.class);
  }

  /**
   * Convert an instance of TypedLinkFacetAttributeUpdateAttribute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

