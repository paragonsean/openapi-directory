/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TypedAttributeValueRangeStartValue
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TypedAttributeValueRangeStartValue {
  public static final String SERIALIZED_NAME_STRING_VALUE = "StringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public static final String SERIALIZED_NAME_BINARY_VALUE = "BinaryValue";
  @SerializedName(SERIALIZED_NAME_BINARY_VALUE)
  private String binaryValue;

  public static final String SERIALIZED_NAME_BOOLEAN_VALUE = "BooleanValue";
  @SerializedName(SERIALIZED_NAME_BOOLEAN_VALUE)
  private Boolean booleanValue;

  public static final String SERIALIZED_NAME_NUMBER_VALUE = "NumberValue";
  @SerializedName(SERIALIZED_NAME_NUMBER_VALUE)
  private String numberValue;

  public static final String SERIALIZED_NAME_DATETIME_VALUE = "DatetimeValue";
  @SerializedName(SERIALIZED_NAME_DATETIME_VALUE)
  private OffsetDateTime datetimeValue;

  public TypedAttributeValueRangeStartValue() {
  }

  public TypedAttributeValueRangeStartValue stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * Get stringValue
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }


  public TypedAttributeValueRangeStartValue binaryValue(String binaryValue) {
    this.binaryValue = binaryValue;
    return this;
  }

  /**
   * Get binaryValue
   * @return binaryValue
   */
  @javax.annotation.Nullable
  public String getBinaryValue() {
    return binaryValue;
  }

  public void setBinaryValue(String binaryValue) {
    this.binaryValue = binaryValue;
  }


  public TypedAttributeValueRangeStartValue booleanValue(Boolean booleanValue) {
    this.booleanValue = booleanValue;
    return this;
  }

  /**
   * Get booleanValue
   * @return booleanValue
   */
  @javax.annotation.Nullable
  public Boolean getBooleanValue() {
    return booleanValue;
  }

  public void setBooleanValue(Boolean booleanValue) {
    this.booleanValue = booleanValue;
  }


  public TypedAttributeValueRangeStartValue numberValue(String numberValue) {
    this.numberValue = numberValue;
    return this;
  }

  /**
   * Get numberValue
   * @return numberValue
   */
  @javax.annotation.Nullable
  public String getNumberValue() {
    return numberValue;
  }

  public void setNumberValue(String numberValue) {
    this.numberValue = numberValue;
  }


  public TypedAttributeValueRangeStartValue datetimeValue(OffsetDateTime datetimeValue) {
    this.datetimeValue = datetimeValue;
    return this;
  }

  /**
   * Get datetimeValue
   * @return datetimeValue
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDatetimeValue() {
    return datetimeValue;
  }

  public void setDatetimeValue(OffsetDateTime datetimeValue) {
    this.datetimeValue = datetimeValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TypedAttributeValueRangeStartValue typedAttributeValueRangeStartValue = (TypedAttributeValueRangeStartValue) o;
    return Objects.equals(this.stringValue, typedAttributeValueRangeStartValue.stringValue) &&
        Objects.equals(this.binaryValue, typedAttributeValueRangeStartValue.binaryValue) &&
        Objects.equals(this.booleanValue, typedAttributeValueRangeStartValue.booleanValue) &&
        Objects.equals(this.numberValue, typedAttributeValueRangeStartValue.numberValue) &&
        Objects.equals(this.datetimeValue, typedAttributeValueRangeStartValue.datetimeValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stringValue, binaryValue, booleanValue, numberValue, datetimeValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TypedAttributeValueRangeStartValue {\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("    binaryValue: ").append(toIndentedString(binaryValue)).append("\n");
    sb.append("    booleanValue: ").append(toIndentedString(booleanValue)).append("\n");
    sb.append("    numberValue: ").append(toIndentedString(numberValue)).append("\n");
    sb.append("    datetimeValue: ").append(toIndentedString(datetimeValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StringValue");
    openapiFields.add("BinaryValue");
    openapiFields.add("BooleanValue");
    openapiFields.add("NumberValue");
    openapiFields.add("DatetimeValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TypedAttributeValueRangeStartValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TypedAttributeValueRangeStartValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TypedAttributeValueRangeStartValue is not found in the empty JSON string", TypedAttributeValueRangeStartValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TypedAttributeValueRangeStartValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TypedAttributeValueRangeStartValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StringValue`
      if (jsonObj.get("StringValue") != null && !jsonObj.get("StringValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("StringValue"));
      }
      // validate the optional field `BinaryValue`
      if (jsonObj.get("BinaryValue") != null && !jsonObj.get("BinaryValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BinaryValue"));
      }
      // validate the optional field `BooleanValue`
      if (jsonObj.get("BooleanValue") != null && !jsonObj.get("BooleanValue").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("BooleanValue"));
      }
      // validate the optional field `NumberValue`
      if (jsonObj.get("NumberValue") != null && !jsonObj.get("NumberValue").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NumberValue"));
      }
      // validate the optional field `DatetimeValue`
      if (jsonObj.get("DatetimeValue") != null && !jsonObj.get("DatetimeValue").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DatetimeValue"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TypedAttributeValueRangeStartValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TypedAttributeValueRangeStartValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TypedAttributeValueRangeStartValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TypedAttributeValueRangeStartValue.class));

       return (TypeAdapter<T>) new TypeAdapter<TypedAttributeValueRangeStartValue>() {
           @Override
           public void write(JsonWriter out, TypedAttributeValueRangeStartValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TypedAttributeValueRangeStartValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TypedAttributeValueRangeStartValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TypedAttributeValueRangeStartValue
   * @throws IOException if the JSON string is invalid with respect to TypedAttributeValueRangeStartValue
   */
  public static TypedAttributeValueRangeStartValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TypedAttributeValueRangeStartValue.class);
  }

  /**
   * Convert an instance of TypedAttributeValueRangeStartValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

