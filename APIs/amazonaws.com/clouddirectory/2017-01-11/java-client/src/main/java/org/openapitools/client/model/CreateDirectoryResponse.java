/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDirectoryResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDirectoryResponse {
  public static final String SERIALIZED_NAME_DIRECTORY_ARN = "DirectoryArn";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_ARN)
  private String directoryArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT_IDENTIFIER = "ObjectIdentifier";
  @SerializedName(SERIALIZED_NAME_OBJECT_IDENTIFIER)
  private String objectIdentifier;

  public static final String SERIALIZED_NAME_APPLIED_SCHEMA_ARN = "AppliedSchemaArn";
  @SerializedName(SERIALIZED_NAME_APPLIED_SCHEMA_ARN)
  private String appliedSchemaArn;

  public CreateDirectoryResponse() {
  }

  public CreateDirectoryResponse directoryArn(String directoryArn) {
    this.directoryArn = directoryArn;
    return this;
  }

  /**
   * Get directoryArn
   * @return directoryArn
   */
  @javax.annotation.Nonnull
  public String getDirectoryArn() {
    return directoryArn;
  }

  public void setDirectoryArn(String directoryArn) {
    this.directoryArn = directoryArn;
  }


  public CreateDirectoryResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateDirectoryResponse objectIdentifier(String objectIdentifier) {
    this.objectIdentifier = objectIdentifier;
    return this;
  }

  /**
   * Get objectIdentifier
   * @return objectIdentifier
   */
  @javax.annotation.Nonnull
  public String getObjectIdentifier() {
    return objectIdentifier;
  }

  public void setObjectIdentifier(String objectIdentifier) {
    this.objectIdentifier = objectIdentifier;
  }


  public CreateDirectoryResponse appliedSchemaArn(String appliedSchemaArn) {
    this.appliedSchemaArn = appliedSchemaArn;
    return this;
  }

  /**
   * Get appliedSchemaArn
   * @return appliedSchemaArn
   */
  @javax.annotation.Nonnull
  public String getAppliedSchemaArn() {
    return appliedSchemaArn;
  }

  public void setAppliedSchemaArn(String appliedSchemaArn) {
    this.appliedSchemaArn = appliedSchemaArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDirectoryResponse createDirectoryResponse = (CreateDirectoryResponse) o;
    return Objects.equals(this.directoryArn, createDirectoryResponse.directoryArn) &&
        Objects.equals(this.name, createDirectoryResponse.name) &&
        Objects.equals(this.objectIdentifier, createDirectoryResponse.objectIdentifier) &&
        Objects.equals(this.appliedSchemaArn, createDirectoryResponse.appliedSchemaArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directoryArn, name, objectIdentifier, appliedSchemaArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDirectoryResponse {\n");
    sb.append("    directoryArn: ").append(toIndentedString(directoryArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    objectIdentifier: ").append(toIndentedString(objectIdentifier)).append("\n");
    sb.append("    appliedSchemaArn: ").append(toIndentedString(appliedSchemaArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DirectoryArn");
    openapiFields.add("Name");
    openapiFields.add("ObjectIdentifier");
    openapiFields.add("AppliedSchemaArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DirectoryArn");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("ObjectIdentifier");
    openapiRequiredFields.add("AppliedSchemaArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDirectoryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDirectoryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDirectoryResponse is not found in the empty JSON string", CreateDirectoryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDirectoryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDirectoryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDirectoryResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DirectoryArn`
      String.validateJsonElement(jsonObj.get("DirectoryArn"));
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the required field `ObjectIdentifier`
      String.validateJsonElement(jsonObj.get("ObjectIdentifier"));
      // validate the required field `AppliedSchemaArn`
      String.validateJsonElement(jsonObj.get("AppliedSchemaArn"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDirectoryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDirectoryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDirectoryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDirectoryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDirectoryResponse>() {
           @Override
           public void write(JsonWriter out, CreateDirectoryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDirectoryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDirectoryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDirectoryResponse
   * @throws IOException if the JSON string is invalid with respect to CreateDirectoryResponse
   */
  public static CreateDirectoryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDirectoryResponse.class);
  }

  /**
   * Convert an instance of CreateDirectoryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

