/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddFacetToObjectRequestObjectReference;
import org.openapitools.client.model.AttributeKeyAndValue;
import org.openapitools.client.model.SchemaFacet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateObjectRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateObjectRequest {
  public static final String SERIALIZED_NAME_SCHEMA_FACETS = "SchemaFacets";
  @SerializedName(SERIALIZED_NAME_SCHEMA_FACETS)
  private List<SchemaFacet> schemaFacets = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT_ATTRIBUTE_LIST = "ObjectAttributeList";
  @SerializedName(SERIALIZED_NAME_OBJECT_ATTRIBUTE_LIST)
  private List<AttributeKeyAndValue> objectAttributeList = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_REFERENCE = "ParentReference";
  @SerializedName(SERIALIZED_NAME_PARENT_REFERENCE)
  private AddFacetToObjectRequestObjectReference parentReference;

  public static final String SERIALIZED_NAME_LINK_NAME = "LinkName";
  @SerializedName(SERIALIZED_NAME_LINK_NAME)
  private String linkName;

  public CreateObjectRequest() {
  }

  public CreateObjectRequest schemaFacets(List<SchemaFacet> schemaFacets) {
    this.schemaFacets = schemaFacets;
    return this;
  }

  public CreateObjectRequest addSchemaFacetsItem(SchemaFacet schemaFacetsItem) {
    if (this.schemaFacets == null) {
      this.schemaFacets = new ArrayList<>();
    }
    this.schemaFacets.add(schemaFacetsItem);
    return this;
  }

  /**
   * A list of schema facets to be associated with the object. Do not provide minor version components. See &lt;a&gt;SchemaFacet&lt;/a&gt; for details.
   * @return schemaFacets
   */
  @javax.annotation.Nonnull
  public List<SchemaFacet> getSchemaFacets() {
    return schemaFacets;
  }

  public void setSchemaFacets(List<SchemaFacet> schemaFacets) {
    this.schemaFacets = schemaFacets;
  }


  public CreateObjectRequest objectAttributeList(List<AttributeKeyAndValue> objectAttributeList) {
    this.objectAttributeList = objectAttributeList;
    return this;
  }

  public CreateObjectRequest addObjectAttributeListItem(AttributeKeyAndValue objectAttributeListItem) {
    if (this.objectAttributeList == null) {
      this.objectAttributeList = new ArrayList<>();
    }
    this.objectAttributeList.add(objectAttributeListItem);
    return this;
  }

  /**
   * The attribute map whose attribute ARN contains the key and attribute value as the map value.
   * @return objectAttributeList
   */
  @javax.annotation.Nullable
  public List<AttributeKeyAndValue> getObjectAttributeList() {
    return objectAttributeList;
  }

  public void setObjectAttributeList(List<AttributeKeyAndValue> objectAttributeList) {
    this.objectAttributeList = objectAttributeList;
  }


  public CreateObjectRequest parentReference(AddFacetToObjectRequestObjectReference parentReference) {
    this.parentReference = parentReference;
    return this;
  }

  /**
   * Get parentReference
   * @return parentReference
   */
  @javax.annotation.Nullable
  public AddFacetToObjectRequestObjectReference getParentReference() {
    return parentReference;
  }

  public void setParentReference(AddFacetToObjectRequestObjectReference parentReference) {
    this.parentReference = parentReference;
  }


  public CreateObjectRequest linkName(String linkName) {
    this.linkName = linkName;
    return this;
  }

  /**
   * The name of link that is used to attach this object to a parent.
   * @return linkName
   */
  @javax.annotation.Nullable
  public String getLinkName() {
    return linkName;
  }

  public void setLinkName(String linkName) {
    this.linkName = linkName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateObjectRequest createObjectRequest = (CreateObjectRequest) o;
    return Objects.equals(this.schemaFacets, createObjectRequest.schemaFacets) &&
        Objects.equals(this.objectAttributeList, createObjectRequest.objectAttributeList) &&
        Objects.equals(this.parentReference, createObjectRequest.parentReference) &&
        Objects.equals(this.linkName, createObjectRequest.linkName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(schemaFacets, objectAttributeList, parentReference, linkName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateObjectRequest {\n");
    sb.append("    schemaFacets: ").append(toIndentedString(schemaFacets)).append("\n");
    sb.append("    objectAttributeList: ").append(toIndentedString(objectAttributeList)).append("\n");
    sb.append("    parentReference: ").append(toIndentedString(parentReference)).append("\n");
    sb.append("    linkName: ").append(toIndentedString(linkName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SchemaFacets");
    openapiFields.add("ObjectAttributeList");
    openapiFields.add("ParentReference");
    openapiFields.add("LinkName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SchemaFacets");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateObjectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateObjectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateObjectRequest is not found in the empty JSON string", CreateObjectRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateObjectRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateObjectRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateObjectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("SchemaFacets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SchemaFacets` to be an array in the JSON string but got `%s`", jsonObj.get("SchemaFacets").toString()));
      }

      JsonArray jsonArrayschemaFacets = jsonObj.getAsJsonArray("SchemaFacets");
      // validate the required field `SchemaFacets` (array)
      for (int i = 0; i < jsonArrayschemaFacets.size(); i++) {
        SchemaFacet.validateJsonElement(jsonArrayschemaFacets.get(i));
      };
      if (jsonObj.get("ObjectAttributeList") != null && !jsonObj.get("ObjectAttributeList").isJsonNull()) {
        JsonArray jsonArrayobjectAttributeList = jsonObj.getAsJsonArray("ObjectAttributeList");
        if (jsonArrayobjectAttributeList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ObjectAttributeList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ObjectAttributeList` to be an array in the JSON string but got `%s`", jsonObj.get("ObjectAttributeList").toString()));
          }

          // validate the optional field `ObjectAttributeList` (array)
          for (int i = 0; i < jsonArrayobjectAttributeList.size(); i++) {
            AttributeKeyAndValue.validateJsonElement(jsonArrayobjectAttributeList.get(i));
          };
        }
      }
      // validate the optional field `ParentReference`
      if (jsonObj.get("ParentReference") != null && !jsonObj.get("ParentReference").isJsonNull()) {
        AddFacetToObjectRequestObjectReference.validateJsonElement(jsonObj.get("ParentReference"));
      }
      if ((jsonObj.get("LinkName") != null && !jsonObj.get("LinkName").isJsonNull()) && !jsonObj.get("LinkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LinkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LinkName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateObjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateObjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateObjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateObjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateObjectRequest>() {
           @Override
           public void write(JsonWriter out, CreateObjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateObjectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateObjectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateObjectRequest
   * @throws IOException if the JSON string is invalid with respect to CreateObjectRequest
   */
  public static CreateObjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateObjectRequest.class);
  }

  /**
   * Convert an instance of CreateObjectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

