/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LinkAttributeUpdateAttributeAction;
import org.openapitools.client.model.LinkAttributeUpdateAttributeKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Structure that contains attribute update information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkAttributeUpdate {
  public static final String SERIALIZED_NAME_ATTRIBUTE_KEY = "AttributeKey";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_KEY)
  private LinkAttributeUpdateAttributeKey attributeKey;

  public static final String SERIALIZED_NAME_ATTRIBUTE_ACTION = "AttributeAction";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE_ACTION)
  private LinkAttributeUpdateAttributeAction attributeAction;

  public LinkAttributeUpdate() {
  }

  public LinkAttributeUpdate attributeKey(LinkAttributeUpdateAttributeKey attributeKey) {
    this.attributeKey = attributeKey;
    return this;
  }

  /**
   * Get attributeKey
   * @return attributeKey
   */
  @javax.annotation.Nullable
  public LinkAttributeUpdateAttributeKey getAttributeKey() {
    return attributeKey;
  }

  public void setAttributeKey(LinkAttributeUpdateAttributeKey attributeKey) {
    this.attributeKey = attributeKey;
  }


  public LinkAttributeUpdate attributeAction(LinkAttributeUpdateAttributeAction attributeAction) {
    this.attributeAction = attributeAction;
    return this;
  }

  /**
   * Get attributeAction
   * @return attributeAction
   */
  @javax.annotation.Nullable
  public LinkAttributeUpdateAttributeAction getAttributeAction() {
    return attributeAction;
  }

  public void setAttributeAction(LinkAttributeUpdateAttributeAction attributeAction) {
    this.attributeAction = attributeAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkAttributeUpdate linkAttributeUpdate = (LinkAttributeUpdate) o;
    return Objects.equals(this.attributeKey, linkAttributeUpdate.attributeKey) &&
        Objects.equals(this.attributeAction, linkAttributeUpdate.attributeAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeKey, attributeAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkAttributeUpdate {\n");
    sb.append("    attributeKey: ").append(toIndentedString(attributeKey)).append("\n");
    sb.append("    attributeAction: ").append(toIndentedString(attributeAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AttributeKey");
    openapiFields.add("AttributeAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkAttributeUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkAttributeUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkAttributeUpdate is not found in the empty JSON string", LinkAttributeUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkAttributeUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkAttributeUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AttributeKey`
      if (jsonObj.get("AttributeKey") != null && !jsonObj.get("AttributeKey").isJsonNull()) {
        LinkAttributeUpdateAttributeKey.validateJsonElement(jsonObj.get("AttributeKey"));
      }
      // validate the optional field `AttributeAction`
      if (jsonObj.get("AttributeAction") != null && !jsonObj.get("AttributeAction").isJsonNull()) {
        LinkAttributeUpdateAttributeAction.validateJsonElement(jsonObj.get("AttributeAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkAttributeUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkAttributeUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkAttributeUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkAttributeUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkAttributeUpdate>() {
           @Override
           public void write(JsonWriter out, LinkAttributeUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkAttributeUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkAttributeUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkAttributeUpdate
   * @throws IOException if the JSON string is invalid with respect to LinkAttributeUpdate
   */
  public static LinkAttributeUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkAttributeUpdate.class);
  }

  /**
   * Convert an instance of LinkAttributeUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

