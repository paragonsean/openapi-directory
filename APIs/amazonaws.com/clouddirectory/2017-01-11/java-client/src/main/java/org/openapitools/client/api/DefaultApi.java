/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddFacetToObjectRequest;
import org.openapitools.client.model.ApplySchemaRequest;
import org.openapitools.client.model.ApplySchemaResponse;
import org.openapitools.client.model.AttachObjectRequest;
import org.openapitools.client.model.AttachObjectResponse;
import org.openapitools.client.model.AttachPolicyRequest;
import org.openapitools.client.model.AttachToIndexRequest;
import org.openapitools.client.model.AttachToIndexResponse;
import org.openapitools.client.model.AttachTypedLinkRequest;
import org.openapitools.client.model.AttachTypedLinkResponse;
import org.openapitools.client.model.BatchReadRequest;
import org.openapitools.client.model.BatchReadResponse;
import org.openapitools.client.model.BatchWriteRequest;
import org.openapitools.client.model.BatchWriteResponse;
import org.openapitools.client.model.CreateDirectoryRequest;
import org.openapitools.client.model.CreateDirectoryResponse;
import org.openapitools.client.model.CreateFacetRequest;
import org.openapitools.client.model.CreateIndexRequest;
import org.openapitools.client.model.CreateIndexResponse;
import org.openapitools.client.model.CreateObjectRequest;
import org.openapitools.client.model.CreateObjectResponse;
import org.openapitools.client.model.CreateSchemaRequest;
import org.openapitools.client.model.CreateSchemaResponse;
import org.openapitools.client.model.CreateTypedLinkFacetRequest;
import org.openapitools.client.model.DeleteDirectoryResponse;
import org.openapitools.client.model.DeleteFacetRequest;
import org.openapitools.client.model.DeleteObjectRequest;
import org.openapitools.client.model.DeleteSchemaResponse;
import org.openapitools.client.model.DeleteTypedLinkFacetRequest;
import org.openapitools.client.model.DetachFromIndexResponse;
import org.openapitools.client.model.DetachObjectRequest;
import org.openapitools.client.model.DetachObjectResponse;
import org.openapitools.client.model.DetachTypedLinkRequest;
import org.openapitools.client.model.DisableDirectoryResponse;
import org.openapitools.client.model.EnableDirectoryResponse;
import org.openapitools.client.model.GetAppliedSchemaVersionRequest;
import org.openapitools.client.model.GetAppliedSchemaVersionResponse;
import org.openapitools.client.model.GetDirectoryResponse;
import org.openapitools.client.model.GetFacetRequest;
import org.openapitools.client.model.GetFacetResponse;
import org.openapitools.client.model.GetLinkAttributesRequest;
import org.openapitools.client.model.GetLinkAttributesResponse;
import org.openapitools.client.model.GetObjectAttributesRequest;
import org.openapitools.client.model.GetObjectAttributesResponse;
import org.openapitools.client.model.GetObjectInformationResponse;
import org.openapitools.client.model.GetSchemaAsJsonResponse;
import org.openapitools.client.model.GetTypedLinkFacetInformationResponse;
import org.openapitools.client.model.ListAppliedSchemaArnsRequest;
import org.openapitools.client.model.ListAppliedSchemaArnsResponse;
import org.openapitools.client.model.ListAttachedIndicesRequest;
import org.openapitools.client.model.ListAttachedIndicesResponse;
import org.openapitools.client.model.ListDevelopmentSchemaArnsRequest;
import org.openapitools.client.model.ListDevelopmentSchemaArnsResponse;
import org.openapitools.client.model.ListDirectoriesRequest;
import org.openapitools.client.model.ListDirectoriesResponse;
import org.openapitools.client.model.ListFacetAttributesRequest;
import org.openapitools.client.model.ListFacetAttributesResponse;
import org.openapitools.client.model.ListFacetNamesResponse;
import org.openapitools.client.model.ListIncomingTypedLinksRequest;
import org.openapitools.client.model.ListIncomingTypedLinksResponse;
import org.openapitools.client.model.ListIndexRequest;
import org.openapitools.client.model.ListIndexResponse;
import org.openapitools.client.model.ListManagedSchemaArnsRequest;
import org.openapitools.client.model.ListManagedSchemaArnsResponse;
import org.openapitools.client.model.ListObjectAttributesRequest;
import org.openapitools.client.model.ListObjectAttributesResponse;
import org.openapitools.client.model.ListObjectChildrenRequest;
import org.openapitools.client.model.ListObjectChildrenResponse;
import org.openapitools.client.model.ListObjectParentPathsResponse;
import org.openapitools.client.model.ListObjectParentsRequest;
import org.openapitools.client.model.ListObjectParentsResponse;
import org.openapitools.client.model.ListObjectPoliciesResponse;
import org.openapitools.client.model.ListOutgoingTypedLinksResponse;
import org.openapitools.client.model.ListPolicyAttachmentsRequest;
import org.openapitools.client.model.ListPolicyAttachmentsResponse;
import org.openapitools.client.model.ListPublishedSchemaArnsRequest;
import org.openapitools.client.model.ListPublishedSchemaArnsResponse;
import org.openapitools.client.model.ListTagsForResourceRequest;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTypedLinkFacetAttributesRequest;
import org.openapitools.client.model.ListTypedLinkFacetAttributesResponse;
import org.openapitools.client.model.ListTypedLinkFacetNamesResponse;
import org.openapitools.client.model.LookupPolicyRequest;
import org.openapitools.client.model.LookupPolicyResponse;
import org.openapitools.client.model.PublishSchemaRequest;
import org.openapitools.client.model.PublishSchemaResponse;
import org.openapitools.client.model.PutSchemaFromJsonRequest;
import org.openapitools.client.model.PutSchemaFromJsonResponse;
import org.openapitools.client.model.RemoveFacetFromObjectRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateFacetRequest;
import org.openapitools.client.model.UpdateLinkAttributesRequest;
import org.openapitools.client.model.UpdateObjectAttributesRequest;
import org.openapitools.client.model.UpdateObjectAttributesResponse;
import org.openapitools.client.model.UpdateSchemaRequest;
import org.openapitools.client.model.UpdateSchemaResponse;
import org.openapitools.client.model.UpdateTypedLinkFacetRequest;
import org.openapitools.client.model.UpgradeAppliedSchemaRequest;
import org.openapitools.client.model.UpgradeAppliedSchemaResponse;
import org.openapitools.client.model.UpgradePublishedSchemaRequest;
import org.openapitools.client.model.UpgradePublishedSchemaResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFacetToObject
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param addFacetToObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFacetToObjectCall(String xAmzDataPartition, AddFacetToObjectRequest addFacetToObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addFacetToObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/facets#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFacetToObjectValidateBeforeCall(String xAmzDataPartition, AddFacetToObjectRequest addFacetToObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling addFacetToObject(Async)");
        }

        // verify the required parameter 'addFacetToObjectRequest' is set
        if (addFacetToObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'addFacetToObjectRequest' when calling addFacetToObject(Async)");
        }

        return addFacetToObjectCall(xAmzDataPartition, addFacetToObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds a new &lt;a&gt;Facet&lt;/a&gt; to an object. An object can have more than one facet applied on it.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param addFacetToObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object addFacetToObject(String xAmzDataPartition, AddFacetToObjectRequest addFacetToObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = addFacetToObjectWithHttpInfo(xAmzDataPartition, addFacetToObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new &lt;a&gt;Facet&lt;/a&gt; to an object. An object can have more than one facet applied on it.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param addFacetToObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> addFacetToObjectWithHttpInfo(String xAmzDataPartition, AddFacetToObjectRequest addFacetToObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = addFacetToObjectValidateBeforeCall(xAmzDataPartition, addFacetToObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new &lt;a&gt;Facet&lt;/a&gt; to an object. An object can have more than one facet applied on it.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param addFacetToObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFacetToObjectAsync(String xAmzDataPartition, AddFacetToObjectRequest addFacetToObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFacetToObjectValidateBeforeCall(xAmzDataPartition, addFacetToObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applySchema
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; into which the schema is copied. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param applySchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applySchemaCall(String xAmzDataPartition, ApplySchemaRequest applySchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applySchemaRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/apply#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applySchemaValidateBeforeCall(String xAmzDataPartition, ApplySchemaRequest applySchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling applySchema(Async)");
        }

        // verify the required parameter 'applySchemaRequest' is set
        if (applySchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'applySchemaRequest' when calling applySchema(Async)");
        }

        return applySchemaCall(xAmzDataPartition, applySchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Copies the input published schema, at the specified version, into the &lt;a&gt;Directory&lt;/a&gt; with the same name and version as that of the published schema.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; into which the schema is copied. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param applySchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApplySchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
     </table>
     */
    public ApplySchemaResponse applySchema(String xAmzDataPartition, ApplySchemaRequest applySchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ApplySchemaResponse> localVarResp = applySchemaWithHttpInfo(xAmzDataPartition, applySchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Copies the input published schema, at the specified version, into the &lt;a&gt;Directory&lt;/a&gt; with the same name and version as that of the published schema.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; into which the schema is copied. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param applySchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ApplySchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplySchemaResponse> applySchemaWithHttpInfo(String xAmzDataPartition, ApplySchemaRequest applySchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = applySchemaValidateBeforeCall(xAmzDataPartition, applySchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ApplySchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Copies the input published schema, at the specified version, into the &lt;a&gt;Directory&lt;/a&gt; with the same name and version as that of the published schema.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; into which the schema is copied. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param applySchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applySchemaAsync(String xAmzDataPartition, ApplySchemaRequest applySchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ApplySchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = applySchemaValidateBeforeCall(xAmzDataPartition, applySchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ApplySchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachObject
     * @param xAmzDataPartition Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachObjectCall(String xAmzDataPartition, AttachObjectRequest attachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/attach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachObjectValidateBeforeCall(String xAmzDataPartition, AttachObjectRequest attachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling attachObject(Async)");
        }

        // verify the required parameter 'attachObjectRequest' is set
        if (attachObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'attachObjectRequest' when calling attachObject(Async)");
        }

        return attachObjectCall(xAmzDataPartition, attachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Attaches an existing object to another object. An object can be accessed in two ways:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Using the path&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;ObjectIdentifier&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzDataPartition Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AttachObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public AttachObjectResponse attachObject(String xAmzDataPartition, AttachObjectRequest attachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AttachObjectResponse> localVarResp = attachObjectWithHttpInfo(xAmzDataPartition, attachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Attaches an existing object to another object. An object can be accessed in two ways:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Using the path&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;ObjectIdentifier&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzDataPartition Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AttachObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachObjectResponse> attachObjectWithHttpInfo(String xAmzDataPartition, AttachObjectRequest attachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = attachObjectValidateBeforeCall(xAmzDataPartition, attachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AttachObjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Attaches an existing object to another object. An object can be accessed in two ways:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Using the path&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Using &lt;code&gt;ObjectIdentifier&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzDataPartition Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachObjectAsync(String xAmzDataPartition, AttachObjectRequest attachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AttachObjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachObjectValidateBeforeCall(xAmzDataPartition, attachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AttachObjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachPolicy
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachPolicyCall(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachPolicyRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/policy/attach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachPolicyValidateBeforeCall(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling attachPolicy(Async)");
        }

        // verify the required parameter 'attachPolicyRequest' is set
        if (attachPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'attachPolicyRequest' when calling attachPolicy(Async)");
        }

        return attachPolicyCall(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Attaches a policy object to a regular object. An object can have a limited number of attached policies.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public Object attachPolicy(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = attachPolicyWithHttpInfo(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Attaches a policy object to a regular object. An object can have a limited number of attached policies.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> attachPolicyWithHttpInfo(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = attachPolicyValidateBeforeCall(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attaches a policy object to a regular object. An object can have a limited number of attached policies.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachPolicyAsync(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachPolicyValidateBeforeCall(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachToIndex
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where the object and index exist. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IndexedAttributeMissingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachToIndexCall(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachToIndexRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/index/attach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachToIndexValidateBeforeCall(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling attachToIndex(Async)");
        }

        // verify the required parameter 'attachToIndexRequest' is set
        if (attachToIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'attachToIndexRequest' when calling attachToIndex(Async)");
        }

        return attachToIndexCall(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Attaches the specified object to the specified index.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where the object and index exist. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AttachToIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IndexedAttributeMissingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public AttachToIndexResponse attachToIndex(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AttachToIndexResponse> localVarResp = attachToIndexWithHttpInfo(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Attaches the specified object to the specified index.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where the object and index exist. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AttachToIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IndexedAttributeMissingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachToIndexResponse> attachToIndexWithHttpInfo(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = attachToIndexValidateBeforeCall(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AttachToIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attaches the specified object to the specified index.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where the object and index exist. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> IndexedAttributeMissingException </td><td>  -  </td></tr>
        <tr><td> 491 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachToIndexAsync(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AttachToIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachToIndexValidateBeforeCall(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AttachToIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for attachTypedLink
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to attach the typed link. (required)
     * @param attachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachTypedLinkCall(String xAmzDataPartition, AttachTypedLinkRequest attachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachTypedLinkRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/attach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call attachTypedLinkValidateBeforeCall(String xAmzDataPartition, AttachTypedLinkRequest attachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling attachTypedLink(Async)");
        }

        // verify the required parameter 'attachTypedLinkRequest' is set
        if (attachTypedLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'attachTypedLinkRequest' when calling attachTypedLink(Async)");
        }

        return attachTypedLinkCall(xAmzDataPartition, attachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Attaches a typed link to a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to attach the typed link. (required)
     * @param attachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AttachTypedLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public AttachTypedLinkResponse attachTypedLink(String xAmzDataPartition, AttachTypedLinkRequest attachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AttachTypedLinkResponse> localVarResp = attachTypedLinkWithHttpInfo(xAmzDataPartition, attachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Attaches a typed link to a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to attach the typed link. (required)
     * @param attachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AttachTypedLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachTypedLinkResponse> attachTypedLinkWithHttpInfo(String xAmzDataPartition, AttachTypedLinkRequest attachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = attachTypedLinkValidateBeforeCall(xAmzDataPartition, attachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AttachTypedLinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Attaches a typed link to a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to attach the typed link. (required)
     * @param attachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call attachTypedLinkAsync(String xAmzDataPartition, AttachTypedLinkRequest attachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AttachTypedLinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = attachTypedLinkValidateBeforeCall(xAmzDataPartition, attachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AttachTypedLinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchRead
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchReadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchReadCall(String xAmzDataPartition, BatchReadRequest batchReadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchReadRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/batchread#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchReadValidateBeforeCall(String xAmzDataPartition, BatchReadRequest batchReadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling batchRead(Async)");
        }

        // verify the required parameter 'batchReadRequest' is set
        if (batchReadRequest == null) {
            throw new ApiException("Missing the required parameter 'batchReadRequest' when calling batchRead(Async)");
        }

        return batchReadCall(xAmzDataPartition, batchReadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, _callback);

    }

    /**
     * 
     * Performs all the read operations in a batch. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchReadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @return BatchReadResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
     </table>
     */
    public BatchReadResponse batchRead(String xAmzDataPartition, BatchReadRequest batchReadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel) throws ApiException {
        ApiResponse<BatchReadResponse> localVarResp = batchReadWithHttpInfo(xAmzDataPartition, batchReadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel);
        return localVarResp.getData();
    }

    /**
     * 
     * Performs all the read operations in a batch. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchReadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @return ApiResponse&lt;BatchReadResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchReadResponse> batchReadWithHttpInfo(String xAmzDataPartition, BatchReadRequest batchReadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel) throws ApiException {
        okhttp3.Call localVarCall = batchReadValidateBeforeCall(xAmzDataPartition, batchReadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, null);
        Type localVarReturnType = new TypeToken<BatchReadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Performs all the read operations in a batch. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchReadRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchReadAsync(String xAmzDataPartition, BatchReadRequest batchReadRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback<BatchReadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchReadValidateBeforeCall(xAmzDataPartition, batchReadRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, _callback);
        Type localVarReturnType = new TypeToken<BatchReadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchWrite
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchWriteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchWriteException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchWriteCall(String xAmzDataPartition, BatchWriteRequest batchWriteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchWriteRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/batchwrite#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchWriteValidateBeforeCall(String xAmzDataPartition, BatchWriteRequest batchWriteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling batchWrite(Async)");
        }

        // verify the required parameter 'batchWriteRequest' is set
        if (batchWriteRequest == null) {
            throw new ApiException("Missing the required parameter 'batchWriteRequest' when calling batchWrite(Async)");
        }

        return batchWriteCall(xAmzDataPartition, batchWriteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Performs all the write operations in a batch. Either all the operations succeed or none.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchWriteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchWriteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchWriteException </td><td>  -  </td></tr>
     </table>
     */
    public BatchWriteResponse batchWrite(String xAmzDataPartition, BatchWriteRequest batchWriteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchWriteResponse> localVarResp = batchWriteWithHttpInfo(xAmzDataPartition, batchWriteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Performs all the write operations in a batch. Either all the operations succeed or none.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchWriteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchWriteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchWriteException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchWriteResponse> batchWriteWithHttpInfo(String xAmzDataPartition, BatchWriteRequest batchWriteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchWriteValidateBeforeCall(xAmzDataPartition, batchWriteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchWriteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Performs all the write operations in a batch. Either all the operations succeed or none.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param batchWriteRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> BatchWriteException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchWriteAsync(String xAmzDataPartition, BatchWriteRequest batchWriteRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchWriteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchWriteValidateBeforeCall(xAmzDataPartition, batchWriteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchWriteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDirectory
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the published schema that will be copied into the data &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createDirectoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectoryCall(String xAmzDataPartition, CreateDirectoryRequest createDirectoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDirectoryRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/directory/create#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectoryValidateBeforeCall(String xAmzDataPartition, CreateDirectoryRequest createDirectoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling createDirectory(Async)");
        }

        // verify the required parameter 'createDirectoryRequest' is set
        if (createDirectoryRequest == null) {
            throw new ApiException("Missing the required parameter 'createDirectoryRequest' when calling createDirectory(Async)");
        }

        return createDirectoryCall(xAmzDataPartition, createDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a &lt;a&gt;Directory&lt;/a&gt; by copying the published schema into the directory. A directory cannot be created without a schema.&lt;/p&gt; &lt;p&gt;You can also quickly create a directory using a managed schema, called the &lt;code&gt;QuickStartSchema&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html\&quot;&gt;Managed Schema&lt;/a&gt; in the &lt;i&gt;Amazon Cloud Directory Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the published schema that will be copied into the data &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createDirectoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateDirectoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public CreateDirectoryResponse createDirectory(String xAmzDataPartition, CreateDirectoryRequest createDirectoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateDirectoryResponse> localVarResp = createDirectoryWithHttpInfo(xAmzDataPartition, createDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a &lt;a&gt;Directory&lt;/a&gt; by copying the published schema into the directory. A directory cannot be created without a schema.&lt;/p&gt; &lt;p&gt;You can also quickly create a directory using a managed schema, called the &lt;code&gt;QuickStartSchema&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html\&quot;&gt;Managed Schema&lt;/a&gt; in the &lt;i&gt;Amazon Cloud Directory Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the published schema that will be copied into the data &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createDirectoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateDirectoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDirectoryResponse> createDirectoryWithHttpInfo(String xAmzDataPartition, CreateDirectoryRequest createDirectoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createDirectoryValidateBeforeCall(xAmzDataPartition, createDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateDirectoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a &lt;a&gt;Directory&lt;/a&gt; by copying the published schema into the directory. A directory cannot be created without a schema.&lt;/p&gt; &lt;p&gt;You can also quickly create a directory using a managed schema, called the &lt;code&gt;QuickStartSchema&lt;/code&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_managed.html\&quot;&gt;Managed Schema&lt;/a&gt; in the &lt;i&gt;Amazon Cloud Directory Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the published schema that will be copied into the data &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createDirectoryRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectoryAsync(String xAmzDataPartition, CreateDirectoryRequest createDirectoryRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateDirectoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectoryValidateBeforeCall(xAmzDataPartition, createDirectoryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateDirectoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createFacet
     * @param xAmzDataPartition The schema ARN in which the new &lt;a&gt;Facet&lt;/a&gt; will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFacetCall(String xAmzDataPartition, CreateFacetRequest createFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/facet/create#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createFacetValidateBeforeCall(String xAmzDataPartition, CreateFacetRequest createFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling createFacet(Async)");
        }

        // verify the required parameter 'createFacetRequest' is set
        if (createFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'createFacetRequest' when calling createFacet(Async)");
        }

        return createFacetCall(xAmzDataPartition, createFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a new &lt;a&gt;Facet&lt;/a&gt; in a schema. Facet creation is allowed only in development or applied schemas.
     * @param xAmzDataPartition The schema ARN in which the new &lt;a&gt;Facet&lt;/a&gt; will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object createFacet(String xAmzDataPartition, CreateFacetRequest createFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = createFacetWithHttpInfo(xAmzDataPartition, createFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new &lt;a&gt;Facet&lt;/a&gt; in a schema. Facet creation is allowed only in development or applied schemas.
     * @param xAmzDataPartition The schema ARN in which the new &lt;a&gt;Facet&lt;/a&gt; will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createFacetWithHttpInfo(String xAmzDataPartition, CreateFacetRequest createFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createFacetValidateBeforeCall(xAmzDataPartition, createFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new &lt;a&gt;Facet&lt;/a&gt; in a schema. Facet creation is allowed only in development or applied schemas.
     * @param xAmzDataPartition The schema ARN in which the new &lt;a&gt;Facet&lt;/a&gt; will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createFacetAsync(String xAmzDataPartition, CreateFacetRequest createFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createFacetValidateBeforeCall(xAmzDataPartition, createFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createIndex
     * @param xAmzDataPartition The ARN of the directory where the index should be created. (required)
     * @param createIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIndexCall(String xAmzDataPartition, CreateIndexRequest createIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIndexRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/index#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIndexValidateBeforeCall(String xAmzDataPartition, CreateIndexRequest createIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling createIndex(Async)");
        }

        // verify the required parameter 'createIndexRequest' is set
        if (createIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'createIndexRequest' when calling createIndex(Async)");
        }

        return createIndexCall(xAmzDataPartition, createIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an index object. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html\&quot;&gt;Indexing and search&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the directory where the index should be created. (required)
     * @param createIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public CreateIndexResponse createIndex(String xAmzDataPartition, CreateIndexRequest createIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateIndexResponse> localVarResp = createIndexWithHttpInfo(xAmzDataPartition, createIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an index object. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html\&quot;&gt;Indexing and search&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the directory where the index should be created. (required)
     * @param createIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateIndexResponse> createIndexWithHttpInfo(String xAmzDataPartition, CreateIndexRequest createIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createIndexValidateBeforeCall(xAmzDataPartition, createIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an index object. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/indexing_search.html\&quot;&gt;Indexing and search&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the directory where the index should be created. (required)
     * @param createIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIndexAsync(String xAmzDataPartition, CreateIndexRequest createIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIndexValidateBeforeCall(xAmzDataPartition, createIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createObject
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; in which the object will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createObjectCall(String xAmzDataPartition, CreateObjectRequest createObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createObjectValidateBeforeCall(String xAmzDataPartition, CreateObjectRequest createObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling createObject(Async)");
        }

        // verify the required parameter 'createObjectRequest' is set
        if (createObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'createObjectRequest' when calling createObject(Async)");
        }

        return createObjectCall(xAmzDataPartition, createObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an object in a &lt;a&gt;Directory&lt;/a&gt;. Additionally attaches the object to a parent, if a parent reference and &lt;code&gt;LinkName&lt;/code&gt; is specified. An object is simply a collection of &lt;a&gt;Facet&lt;/a&gt; attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; in which the object will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public CreateObjectResponse createObject(String xAmzDataPartition, CreateObjectRequest createObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateObjectResponse> localVarResp = createObjectWithHttpInfo(xAmzDataPartition, createObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an object in a &lt;a&gt;Directory&lt;/a&gt;. Additionally attaches the object to a parent, if a parent reference and &lt;code&gt;LinkName&lt;/code&gt; is specified. An object is simply a collection of &lt;a&gt;Facet&lt;/a&gt; attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; in which the object will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateObjectResponse> createObjectWithHttpInfo(String xAmzDataPartition, CreateObjectRequest createObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createObjectValidateBeforeCall(xAmzDataPartition, createObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateObjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an object in a &lt;a&gt;Directory&lt;/a&gt;. Additionally attaches the object to a parent, if a parent reference and &lt;code&gt;LinkName&lt;/code&gt; is specified. An object is simply a collection of &lt;a&gt;Facet&lt;/a&gt; attributes. You can also use this API call to create a policy object, if the facet from which you create the object is a policy facet. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; in which the object will be created. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> UnsupportedIndexTypeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createObjectAsync(String xAmzDataPartition, CreateObjectRequest createObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateObjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createObjectValidateBeforeCall(xAmzDataPartition, createObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateObjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSchema
     * @param createSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSchemaCall(CreateSchemaRequest createSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSchemaRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSchemaValidateBeforeCall(CreateSchemaRequest createSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSchemaRequest' is set
        if (createSchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'createSchemaRequest' when calling createSchema(Async)");
        }

        return createSchemaCall(createSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new schema in a development state. A schema can exist in three phases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Development:&lt;/i&gt; This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Published:&lt;/i&gt; Published schemas are immutable and have a version associated with them.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Applied:&lt;/i&gt; Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public CreateSchemaResponse createSchema(CreateSchemaRequest createSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSchemaResponse> localVarResp = createSchemaWithHttpInfo(createSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new schema in a development state. A schema can exist in three phases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Development:&lt;/i&gt; This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Published:&lt;/i&gt; Published schemas are immutable and have a version associated with them.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Applied:&lt;/i&gt; Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSchemaResponse> createSchemaWithHttpInfo(CreateSchemaRequest createSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSchemaValidateBeforeCall(createSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new schema in a development state. A schema can exist in three phases:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Development:&lt;/i&gt; This is a mutable phase of the schema. All new schemas are in the development phase. Once the schema is finalized, it can be published.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Published:&lt;/i&gt; Published schemas are immutable and have a version associated with them.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;Applied:&lt;/i&gt; Applied schemas are mutable in a way that allows you to add new schema facets. You can also add new, nonrequired attributes to existing schema facets. You can apply only published schemas to directories. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
     * @param createSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSchemaAsync(CreateSchemaRequest createSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSchemaValidateBeforeCall(createSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTypedLinkFacet
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTypedLinkFacetCall(String xAmzDataPartition, CreateTypedLinkFacetRequest createTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTypedLinkFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/facet/create#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTypedLinkFacetValidateBeforeCall(String xAmzDataPartition, CreateTypedLinkFacetRequest createTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling createTypedLinkFacet(Async)");
        }

        // verify the required parameter 'createTypedLinkFacetRequest' is set
        if (createTypedLinkFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'createTypedLinkFacetRequest' when calling createTypedLinkFacet(Async)");
        }

        return createTypedLinkFacetCall(xAmzDataPartition, createTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object createTypedLinkFacet(String xAmzDataPartition, CreateTypedLinkFacetRequest createTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = createTypedLinkFacetWithHttpInfo(xAmzDataPartition, createTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createTypedLinkFacetWithHttpInfo(String xAmzDataPartition, CreateTypedLinkFacetRequest createTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createTypedLinkFacetValidateBeforeCall(xAmzDataPartition, createTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param createTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetAlreadyExistsException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidRuleException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTypedLinkFacetAsync(String xAmzDataPartition, CreateTypedLinkFacetRequest createTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTypedLinkFacetValidateBeforeCall(xAmzDataPartition, createTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDirectory
     * @param xAmzDataPartition The ARN of the directory to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryNotDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDirectoryCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/directory#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDirectoryValidateBeforeCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling deleteDirectory(Async)");
        }

        return deleteDirectoryCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
     * @param xAmzDataPartition The ARN of the directory to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteDirectoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryNotDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDirectoryResponse deleteDirectory(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteDirectoryResponse> localVarResp = deleteDirectoryWithHttpInfo(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
     * @param xAmzDataPartition The ARN of the directory to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteDirectoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryNotDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteDirectoryResponse> deleteDirectoryWithHttpInfo(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteDirectoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a directory. Only disabled directories can be deleted. A deleted directory cannot be undone. Exercise extreme caution when deleting directories.
     * @param xAmzDataPartition The ARN of the directory to delete. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryNotDisabledException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDirectoryAsync(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteDirectoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteDirectoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFacet
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFacetCall(String xAmzDataPartition, DeleteFacetRequest deleteFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/facet/delete#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFacetValidateBeforeCall(String xAmzDataPartition, DeleteFacetRequest deleteFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling deleteFacet(Async)");
        }

        // verify the required parameter 'deleteFacetRequest' is set
        if (deleteFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteFacetRequest' when calling deleteFacet(Async)");
        }

        return deleteFacetCall(xAmzDataPartition, deleteFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a given &lt;a&gt;Facet&lt;/a&gt;. All attributes and &lt;a&gt;Rule&lt;/a&gt;s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetInUseException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteFacet(String xAmzDataPartition, DeleteFacetRequest deleteFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteFacetWithHttpInfo(xAmzDataPartition, deleteFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a given &lt;a&gt;Facet&lt;/a&gt;. All attributes and &lt;a&gt;Rule&lt;/a&gt;s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetInUseException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteFacetWithHttpInfo(String xAmzDataPartition, DeleteFacetRequest deleteFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteFacetValidateBeforeCall(xAmzDataPartition, deleteFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a given &lt;a&gt;Facet&lt;/a&gt;. All attributes and &lt;a&gt;Rule&lt;/a&gt;s that are associated with the facet will be deleted. Only development schema facets are allowed deletion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetInUseException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFacetAsync(String xAmzDataPartition, DeleteFacetRequest deleteFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFacetValidateBeforeCall(xAmzDataPartition, deleteFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteObject
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectNotDetachedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectCall(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/delete#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteObjectValidateBeforeCall(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling deleteObject(Async)");
        }

        // verify the required parameter 'deleteObjectRequest' is set
        if (deleteObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteObjectRequest' when calling deleteObject(Async)");
        }

        return deleteObjectCall(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html\&quot;&gt;Amazon Cloud Directory Limits&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectNotDetachedException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteObject(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteObjectWithHttpInfo(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html\&quot;&gt;Amazon Cloud Directory Limits&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectNotDetachedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteObjectWithHttpInfo(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes an object and its associated attributes. Only objects with no children and no parents can be deleted. The maximum number of attributes that can be deleted during an object deletion is 30. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/limits.html\&quot;&gt;Amazon Cloud Directory Limits&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectNotDetachedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteObjectAsync(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteObjectValidateBeforeCall(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSchema
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StillContainsLinksException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSchemaCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSchemaValidateBeforeCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling deleteSchema(Async)");
        }

        return deleteSchemaCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a given schema. Schemas in a development and published state can only be deleted. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DeleteSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StillContainsLinksException </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSchemaResponse deleteSchema(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DeleteSchemaResponse> localVarResp = deleteSchemaWithHttpInfo(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a given schema. Schemas in a development and published state can only be deleted. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DeleteSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StillContainsLinksException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteSchemaResponse> deleteSchemaWithHttpInfo(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSchemaValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DeleteSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a given schema. Schemas in a development and published state can only be deleted. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> StillContainsLinksException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSchemaAsync(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DeleteSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSchemaValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DeleteSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTypedLinkFacet
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTypedLinkFacetCall(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTypedLinkFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/facet/delete#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTypedLinkFacetValidateBeforeCall(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling deleteTypedLinkFacet(Async)");
        }

        // verify the required parameter 'deleteTypedLinkFacetRequest' is set
        if (deleteTypedLinkFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTypedLinkFacetRequest' when calling deleteTypedLinkFacet(Async)");
        }

        return deleteTypedLinkFacetCall(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTypedLinkFacet(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTypedLinkFacetWithHttpInfo(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTypedLinkFacetWithHttpInfo(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteTypedLinkFacetValidateBeforeCall(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTypedLinkFacetAsync(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTypedLinkFacetValidateBeforeCall(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachFromIndex
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory the index and object exist in. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectAlreadyDetachedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachFromIndexCall(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachToIndexRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/index/detach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachFromIndexValidateBeforeCall(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling detachFromIndex(Async)");
        }

        // verify the required parameter 'attachToIndexRequest' is set
        if (attachToIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'attachToIndexRequest' when calling detachFromIndex(Async)");
        }

        return detachFromIndexCall(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Detaches the specified object from the specified index.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory the index and object exist in. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DetachFromIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectAlreadyDetachedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public DetachFromIndexResponse detachFromIndex(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DetachFromIndexResponse> localVarResp = detachFromIndexWithHttpInfo(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Detaches the specified object from the specified index.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory the index and object exist in. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DetachFromIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectAlreadyDetachedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetachFromIndexResponse> detachFromIndexWithHttpInfo(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detachFromIndexValidateBeforeCall(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DetachFromIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Detaches the specified object from the specified index.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory the index and object exist in. (required)
     * @param attachToIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ObjectAlreadyDetachedException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachFromIndexAsync(String xAmzDataPartition, AttachToIndexRequest attachToIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DetachFromIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachFromIndexValidateBeforeCall(xAmzDataPartition, attachToIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DetachFromIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachObject
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param detachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachObjectCall(String xAmzDataPartition, DetachObjectRequest detachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/detach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachObjectValidateBeforeCall(String xAmzDataPartition, DetachObjectRequest detachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling detachObject(Async)");
        }

        // verify the required parameter 'detachObjectRequest' is set
        if (detachObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'detachObjectRequest' when calling detachObject(Async)");
        }

        return detachObjectCall(xAmzDataPartition, detachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param detachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DetachObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public DetachObjectResponse detachObject(String xAmzDataPartition, DetachObjectRequest detachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DetachObjectResponse> localVarResp = detachObjectWithHttpInfo(xAmzDataPartition, detachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param detachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DetachObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetachObjectResponse> detachObjectWithHttpInfo(String xAmzDataPartition, DetachObjectRequest detachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detachObjectValidateBeforeCall(xAmzDataPartition, detachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DetachObjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Detaches a given object from the parent object. The object that is to be detached from the parent is specified by the link name.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param detachObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachObjectAsync(String xAmzDataPartition, DetachObjectRequest detachObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DetachObjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachObjectValidateBeforeCall(xAmzDataPartition, detachObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DetachObjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachPolicy
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachPolicyCall(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attachPolicyRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/policy/detach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachPolicyValidateBeforeCall(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling detachPolicy(Async)");
        }

        // verify the required parameter 'attachPolicyRequest' is set
        if (attachPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'attachPolicyRequest' when calling detachPolicy(Async)");
        }

        return detachPolicyCall(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Detaches a policy from an object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public Object detachPolicy(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = detachPolicyWithHttpInfo(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Detaches a policy from an object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> detachPolicyWithHttpInfo(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detachPolicyValidateBeforeCall(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Detaches a policy from an object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where both objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param attachPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachPolicyAsync(String xAmzDataPartition, AttachPolicyRequest attachPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachPolicyValidateBeforeCall(xAmzDataPartition, attachPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for detachTypedLink
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to detach the typed link. (required)
     * @param detachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachTypedLinkCall(String xAmzDataPartition, DetachTypedLinkRequest detachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = detachTypedLinkRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/detach#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detachTypedLinkValidateBeforeCall(String xAmzDataPartition, DetachTypedLinkRequest detachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling detachTypedLink(Async)");
        }

        // verify the required parameter 'detachTypedLinkRequest' is set
        if (detachTypedLinkRequest == null) {
            throw new ApiException("Missing the required parameter 'detachTypedLinkRequest' when calling detachTypedLink(Async)");
        }

        return detachTypedLinkCall(xAmzDataPartition, detachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Detaches a typed link from a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to detach the typed link. (required)
     * @param detachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public void detachTypedLink(String xAmzDataPartition, DetachTypedLinkRequest detachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        detachTypedLinkWithHttpInfo(xAmzDataPartition, detachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Detaches a typed link from a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to detach the typed link. (required)
     * @param detachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> detachTypedLinkWithHttpInfo(String xAmzDataPartition, DetachTypedLinkRequest detachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = detachTypedLinkValidateBeforeCall(xAmzDataPartition, detachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Detaches a typed link from a specified source and target object. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to detach the typed link. (required)
     * @param detachTypedLinkRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detachTypedLinkAsync(String xAmzDataPartition, DetachTypedLinkRequest detachTypedLinkRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = detachTypedLinkValidateBeforeCall(xAmzDataPartition, detachTypedLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for disableDirectory
     * @param xAmzDataPartition The ARN of the directory to disable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDirectoryCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/directory/disable#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableDirectoryValidateBeforeCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling disableDirectory(Async)");
        }

        return disableDirectoryCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
     * @param xAmzDataPartition The ARN of the directory to disable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisableDirectoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public DisableDirectoryResponse disableDirectory(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisableDirectoryResponse> localVarResp = disableDirectoryWithHttpInfo(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
     * @param xAmzDataPartition The ARN of the directory to disable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisableDirectoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisableDirectoryResponse> disableDirectoryWithHttpInfo(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disableDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisableDirectoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disables the specified directory. Disabled directories cannot be read or written to. Only enabled directories can be disabled. Disabled directories may be reenabled.
     * @param xAmzDataPartition The ARN of the directory to disable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disableDirectoryAsync(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisableDirectoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisableDirectoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableDirectory
     * @param xAmzDataPartition The ARN of the directory to enable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDirectoryCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/directory/enable#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableDirectoryValidateBeforeCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling enableDirectory(Async)");
        }

        return enableDirectoryCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
     * @param xAmzDataPartition The ARN of the directory to enable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return EnableDirectoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public EnableDirectoryResponse enableDirectory(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<EnableDirectoryResponse> localVarResp = enableDirectoryWithHttpInfo(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
     * @param xAmzDataPartition The ARN of the directory to enable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;EnableDirectoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableDirectoryResponse> enableDirectoryWithHttpInfo(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = enableDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<EnableDirectoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Enables the specified directory. Only disabled directories can be enabled. Once enabled, the directory can then be read and written to.
     * @param xAmzDataPartition The ARN of the directory to enable. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> DirectoryDeletedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidArnException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableDirectoryAsync(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<EnableDirectoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<EnableDirectoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppliedSchemaVersion
     * @param getAppliedSchemaVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppliedSchemaVersionCall(GetAppliedSchemaVersionRequest getAppliedSchemaVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getAppliedSchemaVersionRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/getappliedschema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppliedSchemaVersionValidateBeforeCall(GetAppliedSchemaVersionRequest getAppliedSchemaVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'getAppliedSchemaVersionRequest' is set
        if (getAppliedSchemaVersionRequest == null) {
            throw new ApiException("Missing the required parameter 'getAppliedSchemaVersionRequest' when calling getAppliedSchemaVersion(Async)");
        }

        return getAppliedSchemaVersionCall(getAppliedSchemaVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns current applied schema version ARN, including the minor version in use.
     * @param getAppliedSchemaVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAppliedSchemaVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetAppliedSchemaVersionResponse getAppliedSchemaVersion(GetAppliedSchemaVersionRequest getAppliedSchemaVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAppliedSchemaVersionResponse> localVarResp = getAppliedSchemaVersionWithHttpInfo(getAppliedSchemaVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns current applied schema version ARN, including the minor version in use.
     * @param getAppliedSchemaVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAppliedSchemaVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAppliedSchemaVersionResponse> getAppliedSchemaVersionWithHttpInfo(GetAppliedSchemaVersionRequest getAppliedSchemaVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAppliedSchemaVersionValidateBeforeCall(getAppliedSchemaVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAppliedSchemaVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns current applied schema version ARN, including the minor version in use.
     * @param getAppliedSchemaVersionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppliedSchemaVersionAsync(GetAppliedSchemaVersionRequest getAppliedSchemaVersionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAppliedSchemaVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppliedSchemaVersionValidateBeforeCall(getAppliedSchemaVersionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAppliedSchemaVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectory
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectoryCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/directory/get#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectoryValidateBeforeCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getDirectory(Async)");
        }

        return getDirectoryCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves metadata about a directory.
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetDirectoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public GetDirectoryResponse getDirectory(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetDirectoryResponse> localVarResp = getDirectoryWithHttpInfo(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metadata about a directory.
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetDirectoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDirectoryResponse> getDirectoryWithHttpInfo(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetDirectoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metadata about a directory.
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectoryAsync(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetDirectoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectoryValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetDirectoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFacet
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param getFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetCall(String xAmzDataPartition, GetFacetRequest getFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFacetValidateBeforeCall(String xAmzDataPartition, GetFacetRequest getFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getFacet(Async)");
        }

        // verify the required parameter 'getFacetRequest' is set
        if (getFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'getFacetRequest' when calling getFacet(Async)");
        }

        return getFacetCall(xAmzDataPartition, getFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets details of the &lt;a&gt;Facet&lt;/a&gt;, such as facet name, attributes, &lt;a&gt;Rule&lt;/a&gt;s, or &lt;code&gt;ObjectType&lt;/code&gt;. You can call this on all kinds of schema facets -- published, development, or applied.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param getFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetFacetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetFacetResponse getFacet(String xAmzDataPartition, GetFacetRequest getFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetFacetResponse> localVarResp = getFacetWithHttpInfo(xAmzDataPartition, getFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details of the &lt;a&gt;Facet&lt;/a&gt;, such as facet name, attributes, &lt;a&gt;Rule&lt;/a&gt;s, or &lt;code&gt;ObjectType&lt;/code&gt;. You can call this on all kinds of schema facets -- published, development, or applied.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param getFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetFacetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFacetResponse> getFacetWithHttpInfo(String xAmzDataPartition, GetFacetRequest getFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getFacetValidateBeforeCall(xAmzDataPartition, getFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetFacetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details of the &lt;a&gt;Facet&lt;/a&gt;, such as facet name, attributes, &lt;a&gt;Rule&lt;/a&gt;s, or &lt;code&gt;ObjectType&lt;/code&gt;. You can call this on all kinds of schema facets -- published, development, or applied.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param getFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFacetAsync(String xAmzDataPartition, GetFacetRequest getFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetFacetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFacetValidateBeforeCall(xAmzDataPartition, getFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetFacetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLinkAttributes
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param getLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkAttributesCall(String xAmzDataPartition, GetLinkAttributesRequest getLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getLinkAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/attributes/get#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkAttributesValidateBeforeCall(String xAmzDataPartition, GetLinkAttributesRequest getLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getLinkAttributes(Async)");
        }

        // verify the required parameter 'getLinkAttributesRequest' is set
        if (getLinkAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'getLinkAttributesRequest' when calling getLinkAttributes(Async)");
        }

        return getLinkAttributesCall(xAmzDataPartition, getLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves attributes that are associated with a typed link.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param getLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetLinkAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkAttributesResponse getLinkAttributes(String xAmzDataPartition, GetLinkAttributesRequest getLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetLinkAttributesResponse> localVarResp = getLinkAttributesWithHttpInfo(xAmzDataPartition, getLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves attributes that are associated with a typed link.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param getLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetLinkAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLinkAttributesResponse> getLinkAttributesWithHttpInfo(String xAmzDataPartition, GetLinkAttributesRequest getLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getLinkAttributesValidateBeforeCall(xAmzDataPartition, getLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetLinkAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves attributes that are associated with a typed link.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param getLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLinkAttributesAsync(String xAmzDataPartition, GetLinkAttributesRequest getLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetLinkAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkAttributesValidateBeforeCall(xAmzDataPartition, getLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetLinkAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectAttributes
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. (required)
     * @param getObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the attributes on an object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectAttributesCall(String xAmzDataPartition, GetObjectAttributesRequest getObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getObjectAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/attributes/get#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectAttributesValidateBeforeCall(String xAmzDataPartition, GetObjectAttributesRequest getObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getObjectAttributes(Async)");
        }

        // verify the required parameter 'getObjectAttributesRequest' is set
        if (getObjectAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'getObjectAttributesRequest' when calling getObjectAttributes(Async)");
        }

        return getObjectAttributesCall(xAmzDataPartition, getObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, _callback);

    }

    /**
     * 
     * Retrieves attributes within a facet that are associated with an object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. (required)
     * @param getObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the attributes on an object. (optional)
     * @return GetObjectAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectAttributesResponse getObjectAttributes(String xAmzDataPartition, GetObjectAttributesRequest getObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel) throws ApiException {
        ApiResponse<GetObjectAttributesResponse> localVarResp = getObjectAttributesWithHttpInfo(xAmzDataPartition, getObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves attributes within a facet that are associated with an object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. (required)
     * @param getObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the attributes on an object. (optional)
     * @return ApiResponse&lt;GetObjectAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetObjectAttributesResponse> getObjectAttributesWithHttpInfo(String xAmzDataPartition, GetObjectAttributesRequest getObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel) throws ApiException {
        okhttp3.Call localVarCall = getObjectAttributesValidateBeforeCall(xAmzDataPartition, getObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, null);
        Type localVarReturnType = new TypeToken<GetObjectAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves attributes within a facet that are associated with an object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. (required)
     * @param getObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the attributes on an object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectAttributesAsync(String xAmzDataPartition, GetObjectAttributesRequest getObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback<GetObjectAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectAttributesValidateBeforeCall(xAmzDataPartition, getObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, _callback);
        Type localVarReturnType = new TypeToken<GetObjectAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getObjectInformation
     * @param xAmzDataPartition The ARN of the directory being retrieved. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the object information. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectInformationCall(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/information#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getObjectInformationValidateBeforeCall(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getObjectInformation(Async)");
        }

        // verify the required parameter 'deleteObjectRequest' is set
        if (deleteObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteObjectRequest' when calling getObjectInformation(Async)");
        }

        return getObjectInformationCall(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, _callback);

    }

    /**
     * 
     * Retrieves metadata about an object.
     * @param xAmzDataPartition The ARN of the directory being retrieved. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the object information. (optional)
     * @return GetObjectInformationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetObjectInformationResponse getObjectInformation(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel) throws ApiException {
        ApiResponse<GetObjectInformationResponse> localVarResp = getObjectInformationWithHttpInfo(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves metadata about an object.
     * @param xAmzDataPartition The ARN of the directory being retrieved. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the object information. (optional)
     * @return ApiResponse&lt;GetObjectInformationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetObjectInformationResponse> getObjectInformationWithHttpInfo(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel) throws ApiException {
        okhttp3.Call localVarCall = getObjectInformationValidateBeforeCall(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, null);
        Type localVarReturnType = new TypeToken<GetObjectInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves metadata about an object.
     * @param xAmzDataPartition The ARN of the directory being retrieved. (required)
     * @param deleteObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level at which to retrieve the object information. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getObjectInformationAsync(String xAmzDataPartition, DeleteObjectRequest deleteObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, final ApiCallback<GetObjectInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getObjectInformationValidateBeforeCall(xAmzDataPartition, deleteObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, _callback);
        Type localVarReturnType = new TypeToken<GetObjectInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSchemaAsJson
     * @param xAmzDataPartition The ARN of the schema to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaAsJsonCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSchemaAsJsonValidateBeforeCall(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getSchemaAsJson(Async)");
        }

        return getSchemaAsJsonCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves a JSON representation of the schema. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the schema to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSchemaAsJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public GetSchemaAsJsonResponse getSchemaAsJson(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSchemaAsJsonResponse> localVarResp = getSchemaAsJsonWithHttpInfo(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a JSON representation of the schema. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the schema to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSchemaAsJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSchemaAsJsonResponse> getSchemaAsJsonWithHttpInfo(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSchemaAsJsonValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSchemaAsJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a JSON representation of the schema. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the schema to retrieve. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSchemaAsJsonAsync(String xAmzDataPartition, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSchemaAsJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSchemaAsJsonValidateBeforeCall(xAmzDataPartition, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSchemaAsJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTypedLinkFacetInformation
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTypedLinkFacetInformationCall(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteTypedLinkFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/facet/get#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTypedLinkFacetInformationValidateBeforeCall(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling getTypedLinkFacetInformation(Async)");
        }

        // verify the required parameter 'deleteTypedLinkFacetRequest' is set
        if (deleteTypedLinkFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteTypedLinkFacetRequest' when calling getTypedLinkFacetInformation(Async)");
        }

        return getTypedLinkFacetInformationCall(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns the identity attribute order for a specific &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetTypedLinkFacetInformationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetTypedLinkFacetInformationResponse getTypedLinkFacetInformation(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetTypedLinkFacetInformationResponse> localVarResp = getTypedLinkFacetInformationWithHttpInfo(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the identity attribute order for a specific &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetTypedLinkFacetInformationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTypedLinkFacetInformationResponse> getTypedLinkFacetInformationWithHttpInfo(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getTypedLinkFacetInformationValidateBeforeCall(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetTypedLinkFacetInformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the identity attribute order for a specific &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param deleteTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTypedLinkFacetInformationAsync(String xAmzDataPartition, DeleteTypedLinkFacetRequest deleteTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetTypedLinkFacetInformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTypedLinkFacetInformationValidateBeforeCall(xAmzDataPartition, deleteTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetTypedLinkFacetInformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppliedSchemaArns
     * @param listAppliedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppliedSchemaArnsCall(ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAppliedSchemaArnsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/applied";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppliedSchemaArnsValidateBeforeCall(ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listAppliedSchemaArnsRequest' is set
        if (listAppliedSchemaArnsRequest == null) {
            throw new ApiException("Missing the required parameter 'listAppliedSchemaArnsRequest' when calling listAppliedSchemaArns(Async)");
        }

        return listAppliedSchemaArnsCall(listAppliedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists schema major versions applied to a directory. If &lt;code&gt;SchemaArn&lt;/code&gt; is provided, lists the minor version.
     * @param listAppliedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAppliedSchemaArnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListAppliedSchemaArnsResponse listAppliedSchemaArns(ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAppliedSchemaArnsResponse> localVarResp = listAppliedSchemaArnsWithHttpInfo(listAppliedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists schema major versions applied to a directory. If &lt;code&gt;SchemaArn&lt;/code&gt; is provided, lists the minor version.
     * @param listAppliedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAppliedSchemaArnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAppliedSchemaArnsResponse> listAppliedSchemaArnsWithHttpInfo(ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAppliedSchemaArnsValidateBeforeCall(listAppliedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAppliedSchemaArnsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists schema major versions applied to a directory. If &lt;code&gt;SchemaArn&lt;/code&gt; is provided, lists the minor version.
     * @param listAppliedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppliedSchemaArnsAsync(ListAppliedSchemaArnsRequest listAppliedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListAppliedSchemaArnsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppliedSchemaArnsValidateBeforeCall(listAppliedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAppliedSchemaArnsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttachedIndices
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param listAttachedIndicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to use for this operation. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttachedIndicesCall(String xAmzDataPartition, ListAttachedIndicesRequest listAttachedIndicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listAttachedIndicesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/indices#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttachedIndicesValidateBeforeCall(String xAmzDataPartition, ListAttachedIndicesRequest listAttachedIndicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listAttachedIndices(Async)");
        }

        // verify the required parameter 'listAttachedIndicesRequest' is set
        if (listAttachedIndicesRequest == null) {
            throw new ApiException("Missing the required parameter 'listAttachedIndicesRequest' when calling listAttachedIndices(Async)");
        }

        return listAttachedIndicesCall(xAmzDataPartition, listAttachedIndicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists indices attached to the specified object.
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param listAttachedIndicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to use for this operation. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListAttachedIndicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListAttachedIndicesResponse listAttachedIndices(String xAmzDataPartition, ListAttachedIndicesRequest listAttachedIndicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListAttachedIndicesResponse> localVarResp = listAttachedIndicesWithHttpInfo(xAmzDataPartition, listAttachedIndicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists indices attached to the specified object.
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param listAttachedIndicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to use for this operation. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListAttachedIndicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAttachedIndicesResponse> listAttachedIndicesWithHttpInfo(String xAmzDataPartition, ListAttachedIndicesRequest listAttachedIndicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listAttachedIndicesValidateBeforeCall(xAmzDataPartition, listAttachedIndicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListAttachedIndicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists indices attached to the specified object.
     * @param xAmzDataPartition The ARN of the directory. (required)
     * @param listAttachedIndicesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to use for this operation. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAttachedIndicesAsync(String xAmzDataPartition, ListAttachedIndicesRequest listAttachedIndicesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListAttachedIndicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttachedIndicesValidateBeforeCall(xAmzDataPartition, listAttachedIndicesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListAttachedIndicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDevelopmentSchemaArns
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDevelopmentSchemaArnsCall(ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDevelopmentSchemaArnsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/development";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDevelopmentSchemaArnsValidateBeforeCall(ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listDevelopmentSchemaArnsRequest' is set
        if (listDevelopmentSchemaArnsRequest == null) {
            throw new ApiException("Missing the required parameter 'listDevelopmentSchemaArnsRequest' when calling listDevelopmentSchemaArns(Async)");
        }

        return listDevelopmentSchemaArnsCall(listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListDevelopmentSchemaArnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListDevelopmentSchemaArnsResponse listDevelopmentSchemaArns(ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListDevelopmentSchemaArnsResponse> localVarResp = listDevelopmentSchemaArnsWithHttpInfo(listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListDevelopmentSchemaArnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDevelopmentSchemaArnsResponse> listDevelopmentSchemaArnsWithHttpInfo(ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listDevelopmentSchemaArnsValidateBeforeCall(listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDevelopmentSchemaArnsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves each Amazon Resource Name (ARN) of schemas in the development state.
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDevelopmentSchemaArnsAsync(ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListDevelopmentSchemaArnsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDevelopmentSchemaArnsValidateBeforeCall(listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDevelopmentSchemaArnsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDirectories
     * @param listDirectoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDirectoriesCall(ListDirectoriesRequest listDirectoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDirectoriesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/directory/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDirectoriesValidateBeforeCall(ListDirectoriesRequest listDirectoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listDirectoriesRequest' is set
        if (listDirectoriesRequest == null) {
            throw new ApiException("Missing the required parameter 'listDirectoriesRequest' when calling listDirectories(Async)");
        }

        return listDirectoriesCall(listDirectoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists directories created within an account.
     * @param listDirectoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListDirectoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListDirectoriesResponse listDirectories(ListDirectoriesRequest listDirectoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListDirectoriesResponse> localVarResp = listDirectoriesWithHttpInfo(listDirectoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists directories created within an account.
     * @param listDirectoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListDirectoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListDirectoriesResponse> listDirectoriesWithHttpInfo(ListDirectoriesRequest listDirectoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listDirectoriesValidateBeforeCall(listDirectoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDirectoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists directories created within an account.
     * @param listDirectoriesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDirectoriesAsync(ListDirectoriesRequest listDirectoriesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListDirectoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDirectoriesValidateBeforeCall(listDirectoriesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDirectoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFacetAttributes
     * @param xAmzDataPartition The ARN of the schema where the facet resides. (required)
     * @param listFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFacetAttributesCall(String xAmzDataPartition, ListFacetAttributesRequest listFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listFacetAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/facet/attributes#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFacetAttributesValidateBeforeCall(String xAmzDataPartition, ListFacetAttributesRequest listFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listFacetAttributes(Async)");
        }

        // verify the required parameter 'listFacetAttributesRequest' is set
        if (listFacetAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'listFacetAttributesRequest' when calling listFacetAttributes(Async)");
        }

        return listFacetAttributesCall(xAmzDataPartition, listFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Retrieves attributes attached to the facet.
     * @param xAmzDataPartition The ARN of the schema where the facet resides. (required)
     * @param listFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListFacetAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListFacetAttributesResponse listFacetAttributes(String xAmzDataPartition, ListFacetAttributesRequest listFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListFacetAttributesResponse> localVarResp = listFacetAttributesWithHttpInfo(xAmzDataPartition, listFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves attributes attached to the facet.
     * @param xAmzDataPartition The ARN of the schema where the facet resides. (required)
     * @param listFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListFacetAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFacetAttributesResponse> listFacetAttributesWithHttpInfo(String xAmzDataPartition, ListFacetAttributesRequest listFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listFacetAttributesValidateBeforeCall(xAmzDataPartition, listFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListFacetAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves attributes attached to the facet.
     * @param xAmzDataPartition The ARN of the schema where the facet resides. (required)
     * @param listFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFacetAttributesAsync(String xAmzDataPartition, ListFacetAttributesRequest listFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListFacetAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFacetAttributesValidateBeforeCall(xAmzDataPartition, listFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListFacetAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listFacetNames
     * @param xAmzDataPartition The Amazon Resource Name (ARN) to retrieve facet names from. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFacetNamesCall(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDevelopmentSchemaArnsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/facet/list#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFacetNamesValidateBeforeCall(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listFacetNames(Async)");
        }

        // verify the required parameter 'listDevelopmentSchemaArnsRequest' is set
        if (listDevelopmentSchemaArnsRequest == null) {
            throw new ApiException("Missing the required parameter 'listDevelopmentSchemaArnsRequest' when calling listFacetNames(Async)");
        }

        return listFacetNamesCall(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Retrieves the names of facets that exist in a schema.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) to retrieve facet names from. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListFacetNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListFacetNamesResponse listFacetNames(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListFacetNamesResponse> localVarResp = listFacetNamesWithHttpInfo(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the names of facets that exist in a schema.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) to retrieve facet names from. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListFacetNamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListFacetNamesResponse> listFacetNamesWithHttpInfo(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listFacetNamesValidateBeforeCall(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListFacetNamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the names of facets that exist in a schema.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) to retrieve facet names from. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listFacetNamesAsync(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListFacetNamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFacetNamesValidateBeforeCall(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListFacetNamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIncomingTypedLinks
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIncomingTypedLinksCall(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listIncomingTypedLinksRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/incoming#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIncomingTypedLinksValidateBeforeCall(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listIncomingTypedLinks(Async)");
        }

        // verify the required parameter 'listIncomingTypedLinksRequest' is set
        if (listIncomingTypedLinksRequest == null) {
            throw new ApiException("Missing the required parameter 'listIncomingTypedLinksRequest' when calling listIncomingTypedLinks(Async)");
        }

        return listIncomingTypedLinksCall(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns a paginated list of all the incoming &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListIncomingTypedLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ListIncomingTypedLinksResponse listIncomingTypedLinks(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListIncomingTypedLinksResponse> localVarResp = listIncomingTypedLinksWithHttpInfo(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of all the incoming &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListIncomingTypedLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIncomingTypedLinksResponse> listIncomingTypedLinksWithHttpInfo(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listIncomingTypedLinksValidateBeforeCall(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListIncomingTypedLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of all the incoming &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIncomingTypedLinksAsync(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListIncomingTypedLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIncomingTypedLinksValidateBeforeCall(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListIncomingTypedLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIndex
     * @param xAmzDataPartition The ARN of the directory that the index exists in. (required)
     * @param listIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to execute the request at. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndexCall(String xAmzDataPartition, ListIndexRequest listIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listIndexRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/index/targets#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIndexValidateBeforeCall(String xAmzDataPartition, ListIndexRequest listIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listIndex(Async)");
        }

        // verify the required parameter 'listIndexRequest' is set
        if (listIndexRequest == null) {
            throw new ApiException("Missing the required parameter 'listIndexRequest' when calling listIndex(Async)");
        }

        return listIndexCall(xAmzDataPartition, listIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists objects attached to the specified index.
     * @param xAmzDataPartition The ARN of the directory that the index exists in. (required)
     * @param listIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to execute the request at. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public ListIndexResponse listIndex(String xAmzDataPartition, ListIndexRequest listIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListIndexResponse> localVarResp = listIndexWithHttpInfo(xAmzDataPartition, listIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists objects attached to the specified index.
     * @param xAmzDataPartition The ARN of the directory that the index exists in. (required)
     * @param listIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to execute the request at. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIndexResponse> listIndexWithHttpInfo(String xAmzDataPartition, ListIndexRequest listIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listIndexValidateBeforeCall(xAmzDataPartition, listIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists objects attached to the specified index.
     * @param xAmzDataPartition The ARN of the directory that the index exists in. (required)
     * @param listIndexRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel The consistency level to execute the request at. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> NotIndexException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndexAsync(String xAmzDataPartition, ListIndexRequest listIndexRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIndexValidateBeforeCall(xAmzDataPartition, listIndexRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listManagedSchemaArns
     * @param listManagedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listManagedSchemaArnsCall(ListManagedSchemaArnsRequest listManagedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listManagedSchemaArnsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/managed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listManagedSchemaArnsValidateBeforeCall(ListManagedSchemaArnsRequest listManagedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listManagedSchemaArnsRequest' is set
        if (listManagedSchemaArnsRequest == null) {
            throw new ApiException("Missing the required parameter 'listManagedSchemaArnsRequest' when calling listManagedSchemaArns(Async)");
        }

        return listManagedSchemaArnsCall(listManagedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.
     * @param listManagedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListManagedSchemaArnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListManagedSchemaArnsResponse listManagedSchemaArns(ListManagedSchemaArnsRequest listManagedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListManagedSchemaArnsResponse> localVarResp = listManagedSchemaArnsWithHttpInfo(listManagedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.
     * @param listManagedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListManagedSchemaArnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListManagedSchemaArnsResponse> listManagedSchemaArnsWithHttpInfo(ListManagedSchemaArnsRequest listManagedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listManagedSchemaArnsValidateBeforeCall(listManagedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListManagedSchemaArnsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the major version families of each managed schema. If a major version ARN is provided as SchemaArn, the minor version revisions in that family are listed instead.
     * @param listManagedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listManagedSchemaArnsAsync(ListManagedSchemaArnsRequest listManagedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListManagedSchemaArnsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listManagedSchemaArnsValidateBeforeCall(listManagedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListManagedSchemaArnsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjectAttributes
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectAttributesCall(String xAmzDataPartition, ListObjectAttributesRequest listObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listObjectAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/attributes#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectAttributesValidateBeforeCall(String xAmzDataPartition, ListObjectAttributesRequest listObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listObjectAttributes(Async)");
        }

        // verify the required parameter 'listObjectAttributesRequest' is set
        if (listObjectAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'listObjectAttributesRequest' when calling listObjectAttributes(Async)");
        }

        return listObjectAttributesCall(xAmzDataPartition, listObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists all attributes that are associated with an object. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListObjectAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectAttributesResponse listObjectAttributes(String xAmzDataPartition, ListObjectAttributesRequest listObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListObjectAttributesResponse> localVarResp = listObjectAttributesWithHttpInfo(xAmzDataPartition, listObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all attributes that are associated with an object. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListObjectAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListObjectAttributesResponse> listObjectAttributesWithHttpInfo(String xAmzDataPartition, ListObjectAttributesRequest listObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listObjectAttributesValidateBeforeCall(xAmzDataPartition, listObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListObjectAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all attributes that are associated with an object. 
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectAttributesAsync(String xAmzDataPartition, ListObjectAttributesRequest listObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListObjectAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectAttributesValidateBeforeCall(xAmzDataPartition, listObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListObjectAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjectChildren
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectChildrenCall(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listObjectChildrenRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/children#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectChildrenValidateBeforeCall(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listObjectChildren(Async)");
        }

        // verify the required parameter 'listObjectChildrenRequest' is set
        if (listObjectChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'listObjectChildrenRequest' when calling listObjectChildren(Async)");
        }

        return listObjectChildrenCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of child objects that are associated with a given object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListObjectChildrenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectChildrenResponse listObjectChildren(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListObjectChildrenResponse> localVarResp = listObjectChildrenWithHttpInfo(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of child objects that are associated with a given object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListObjectChildrenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListObjectChildrenResponse> listObjectChildrenWithHttpInfo(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listObjectChildrenValidateBeforeCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListObjectChildrenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of child objects that are associated with a given object.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotNodeException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectChildrenAsync(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListObjectChildrenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectChildrenValidateBeforeCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListObjectChildrenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjectParentPaths
     * @param xAmzDataPartition The ARN of the directory to which the parent path applies. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectParentPathsCall(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listObjectChildrenRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/parentpaths#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectParentPathsValidateBeforeCall(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listObjectParentPaths(Async)");
        }

        // verify the required parameter 'listObjectChildrenRequest' is set
        if (listObjectChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'listObjectChildrenRequest' when calling listObjectParentPaths(Async)");
        }

        return listObjectParentPathsCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html\&quot;&gt;Directory Structure&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined &lt;code&gt;MaxResults&lt;/code&gt;, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.&lt;/p&gt;
     * @param xAmzDataPartition The ARN of the directory to which the parent path applies. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListObjectParentPathsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectParentPathsResponse listObjectParentPaths(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListObjectParentPathsResponse> localVarResp = listObjectParentPathsWithHttpInfo(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html\&quot;&gt;Directory Structure&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined &lt;code&gt;MaxResults&lt;/code&gt;, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.&lt;/p&gt;
     * @param xAmzDataPartition The ARN of the directory to which the parent path applies. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListObjectParentPathsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListObjectParentPathsResponse> listObjectParentPathsWithHttpInfo(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listObjectParentPathsValidateBeforeCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListObjectParentPathsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directorystructure.html\&quot;&gt;Directory Structure&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Use this API to evaluate all parents for an object. The call returns all objects from the root of the directory up to the requested object. The API returns the number of paths based on user-defined &lt;code&gt;MaxResults&lt;/code&gt;, in case there are multiple paths to the parent. The order of the paths and nodes returned is consistent among multiple API calls unless the objects are deleted or moved. Paths not leading to the directory root are ignored from the target object.&lt;/p&gt;
     * @param xAmzDataPartition The ARN of the directory to which the parent path applies. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectParentPathsAsync(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListObjectParentPathsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectParentPathsValidateBeforeCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListObjectParentPathsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjectParents
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CannotListParentOfRootException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectParentsCall(String xAmzDataPartition, ListObjectParentsRequest listObjectParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listObjectParentsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/parent#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectParentsValidateBeforeCall(String xAmzDataPartition, ListObjectParentsRequest listObjectParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listObjectParents(Async)");
        }

        // verify the required parameter 'listObjectParentsRequest' is set
        if (listObjectParentsRequest == null) {
            throw new ApiException("Missing the required parameter 'listObjectParentsRequest' when calling listObjectParents(Async)");
        }

        return listObjectParentsCall(xAmzDataPartition, listObjectParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists parent objects that are associated with a given object in pagination fashion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListObjectParentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CannotListParentOfRootException </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectParentsResponse listObjectParents(String xAmzDataPartition, ListObjectParentsRequest listObjectParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListObjectParentsResponse> localVarResp = listObjectParentsWithHttpInfo(xAmzDataPartition, listObjectParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists parent objects that are associated with a given object in pagination fashion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListObjectParentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CannotListParentOfRootException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListObjectParentsResponse> listObjectParentsWithHttpInfo(String xAmzDataPartition, ListObjectParentsRequest listObjectParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listObjectParentsValidateBeforeCall(xAmzDataPartition, listObjectParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListObjectParentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists parent objects that are associated with a given object in pagination fashion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectParentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> CannotListParentOfRootException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectParentsAsync(String xAmzDataPartition, ListObjectParentsRequest listObjectParentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListObjectParentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectParentsValidateBeforeCall(xAmzDataPartition, listObjectParentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListObjectParentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listObjectPolicies
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectPoliciesCall(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listObjectChildrenRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/policy#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listObjectPoliciesValidateBeforeCall(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listObjectPolicies(Async)");
        }

        // verify the required parameter 'listObjectChildrenRequest' is set
        if (listObjectChildrenRequest == null) {
            throw new ApiException("Missing the required parameter 'listObjectChildrenRequest' when calling listObjectPolicies(Async)");
        }

        return listObjectPoliciesCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns policies attached to an object in pagination fashion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListObjectPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListObjectPoliciesResponse listObjectPolicies(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListObjectPoliciesResponse> localVarResp = listObjectPoliciesWithHttpInfo(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns policies attached to an object in pagination fashion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListObjectPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListObjectPoliciesResponse> listObjectPoliciesWithHttpInfo(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listObjectPoliciesValidateBeforeCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListObjectPoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns policies attached to an object in pagination fashion.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listObjectChildrenRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listObjectPoliciesAsync(String xAmzDataPartition, ListObjectChildrenRequest listObjectChildrenRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListObjectPoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listObjectPoliciesValidateBeforeCall(xAmzDataPartition, listObjectChildrenRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListObjectPoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOutgoingTypedLinks
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOutgoingTypedLinksCall(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listIncomingTypedLinksRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/outgoing#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOutgoingTypedLinksValidateBeforeCall(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listOutgoingTypedLinks(Async)");
        }

        // verify the required parameter 'listIncomingTypedLinksRequest' is set
        if (listIncomingTypedLinksRequest == null) {
            throw new ApiException("Missing the required parameter 'listIncomingTypedLinksRequest' when calling listOutgoingTypedLinks(Async)");
        }

        return listOutgoingTypedLinksCall(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Returns a paginated list of all the outgoing &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListOutgoingTypedLinksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ListOutgoingTypedLinksResponse listOutgoingTypedLinks(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListOutgoingTypedLinksResponse> localVarResp = listOutgoingTypedLinksWithHttpInfo(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of all the outgoing &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListOutgoingTypedLinksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListOutgoingTypedLinksResponse> listOutgoingTypedLinksWithHttpInfo(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listOutgoingTypedLinksValidateBeforeCall(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListOutgoingTypedLinksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of all the outgoing &lt;a&gt;TypedLinkSpecifier&lt;/a&gt; information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the directory where you want to list the typed links. (required)
     * @param listIncomingTypedLinksRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listOutgoingTypedLinksAsync(String xAmzDataPartition, ListIncomingTypedLinksRequest listIncomingTypedLinksRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListOutgoingTypedLinksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOutgoingTypedLinksValidateBeforeCall(xAmzDataPartition, listIncomingTypedLinksRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListOutgoingTypedLinksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPolicyAttachments
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listPolicyAttachmentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPolicyAttachmentsCall(String xAmzDataPartition, ListPolicyAttachmentsRequest listPolicyAttachmentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPolicyAttachmentsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/policy/attachment#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        if (xAmzConsistencyLevel != null) {
            localVarHeaderParams.put("x-amz-consistency-level", localVarApiClient.parameterToString(xAmzConsistencyLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPolicyAttachmentsValidateBeforeCall(String xAmzDataPartition, ListPolicyAttachmentsRequest listPolicyAttachmentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listPolicyAttachments(Async)");
        }

        // verify the required parameter 'listPolicyAttachmentsRequest' is set
        if (listPolicyAttachmentsRequest == null) {
            throw new ApiException("Missing the required parameter 'listPolicyAttachmentsRequest' when calling listPolicyAttachments(Async)");
        }

        return listPolicyAttachmentsCall(xAmzDataPartition, listPolicyAttachmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns all of the &lt;code&gt;ObjectIdentifiers&lt;/code&gt; to which a given policy is attached.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listPolicyAttachmentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPolicyAttachmentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ListPolicyAttachmentsResponse listPolicyAttachments(String xAmzDataPartition, ListPolicyAttachmentsRequest listPolicyAttachmentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListPolicyAttachmentsResponse> localVarResp = listPolicyAttachmentsWithHttpInfo(xAmzDataPartition, listPolicyAttachmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the &lt;code&gt;ObjectIdentifiers&lt;/code&gt; to which a given policy is attached.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listPolicyAttachmentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPolicyAttachmentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPolicyAttachmentsResponse> listPolicyAttachmentsWithHttpInfo(String xAmzDataPartition, ListPolicyAttachmentsRequest listPolicyAttachmentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPolicyAttachmentsValidateBeforeCall(xAmzDataPartition, listPolicyAttachmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPolicyAttachmentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the &lt;code&gt;ObjectIdentifiers&lt;/code&gt; to which a given policy is attached.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where objects reside. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listPolicyAttachmentsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzConsistencyLevel Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object. (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> NotPolicyException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPolicyAttachmentsAsync(String xAmzDataPartition, ListPolicyAttachmentsRequest listPolicyAttachmentsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzConsistencyLevel, String maxResults, String nextToken, final ApiCallback<ListPolicyAttachmentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPolicyAttachmentsValidateBeforeCall(xAmzDataPartition, listPolicyAttachmentsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzConsistencyLevel, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPolicyAttachmentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPublishedSchemaArns
     * @param listPublishedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublishedSchemaArnsCall(ListPublishedSchemaArnsRequest listPublishedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listPublishedSchemaArnsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/published";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPublishedSchemaArnsValidateBeforeCall(ListPublishedSchemaArnsRequest listPublishedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listPublishedSchemaArnsRequest' is set
        if (listPublishedSchemaArnsRequest == null) {
            throw new ApiException("Missing the required parameter 'listPublishedSchemaArnsRequest' when calling listPublishedSchemaArns(Async)");
        }

        return listPublishedSchemaArnsCall(listPublishedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists the major version families of each published schema. If a major version ARN is provided as &lt;code&gt;SchemaArn&lt;/code&gt;, the minor version revisions in that family are listed instead.
     * @param listPublishedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListPublishedSchemaArnsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListPublishedSchemaArnsResponse listPublishedSchemaArns(ListPublishedSchemaArnsRequest listPublishedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListPublishedSchemaArnsResponse> localVarResp = listPublishedSchemaArnsWithHttpInfo(listPublishedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the major version families of each published schema. If a major version ARN is provided as &lt;code&gt;SchemaArn&lt;/code&gt;, the minor version revisions in that family are listed instead.
     * @param listPublishedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListPublishedSchemaArnsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPublishedSchemaArnsResponse> listPublishedSchemaArnsWithHttpInfo(ListPublishedSchemaArnsRequest listPublishedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPublishedSchemaArnsValidateBeforeCall(listPublishedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPublishedSchemaArnsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the major version families of each published schema. If a major version ARN is provided as &lt;code&gt;SchemaArn&lt;/code&gt;, the minor version revisions in that family are listed instead.
     * @param listPublishedSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPublishedSchemaArnsAsync(ListPublishedSchemaArnsRequest listPublishedSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListPublishedSchemaArnsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPublishedSchemaArnsValidateBeforeCall(listPublishedSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPublishedSchemaArnsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceCall(ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTagsForResourceRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listTagsForResourceRequest' is set
        if (listTagsForResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'listTagsForResourceRequest' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ListTagsForResourceResponse listTagsForResource(ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns tags for a resource. Tagging is currently supported only for directories with a limit of 50 tags per directory. All 50 tags are returned for a given directory with this API call.
     * @param listTagsForResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTagsForResourceAsync(ListTagsForResourceRequest listTagsForResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(listTagsForResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTypedLinkFacetAttributes
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listTypedLinkFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTypedLinkFacetAttributesCall(String xAmzDataPartition, ListTypedLinkFacetAttributesRequest listTypedLinkFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listTypedLinkFacetAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTypedLinkFacetAttributesValidateBeforeCall(String xAmzDataPartition, ListTypedLinkFacetAttributesRequest listTypedLinkFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listTypedLinkFacetAttributes(Async)");
        }

        // verify the required parameter 'listTypedLinkFacetAttributesRequest' is set
        if (listTypedLinkFacetAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'listTypedLinkFacetAttributesRequest' when calling listTypedLinkFacetAttributes(Async)");
        }

        return listTypedLinkFacetAttributesCall(xAmzDataPartition, listTypedLinkFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of all attribute definitions for a particular &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listTypedLinkFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTypedLinkFacetAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypedLinkFacetAttributesResponse listTypedLinkFacetAttributes(String xAmzDataPartition, ListTypedLinkFacetAttributesRequest listTypedLinkFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTypedLinkFacetAttributesResponse> localVarResp = listTypedLinkFacetAttributesWithHttpInfo(xAmzDataPartition, listTypedLinkFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of all attribute definitions for a particular &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listTypedLinkFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTypedLinkFacetAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypedLinkFacetAttributesResponse> listTypedLinkFacetAttributesWithHttpInfo(String xAmzDataPartition, ListTypedLinkFacetAttributesRequest listTypedLinkFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTypedLinkFacetAttributesValidateBeforeCall(xAmzDataPartition, listTypedLinkFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTypedLinkFacetAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of all attribute definitions for a particular &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listTypedLinkFacetAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTypedLinkFacetAttributesAsync(String xAmzDataPartition, ListTypedLinkFacetAttributesRequest listTypedLinkFacetAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTypedLinkFacetAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTypedLinkFacetAttributesValidateBeforeCall(xAmzDataPartition, listTypedLinkFacetAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTypedLinkFacetAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTypedLinkFacetNames
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTypedLinkFacetNamesCall(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listDevelopmentSchemaArnsRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/facet/list#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTypedLinkFacetNamesValidateBeforeCall(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling listTypedLinkFacetNames(Async)");
        }

        // verify the required parameter 'listDevelopmentSchemaArnsRequest' is set
        if (listDevelopmentSchemaArnsRequest == null) {
            throw new ApiException("Missing the required parameter 'listDevelopmentSchemaArnsRequest' when calling listTypedLinkFacetNames(Async)");
        }

        return listTypedLinkFacetNamesCall(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Returns a paginated list of &lt;code&gt;TypedLink&lt;/code&gt; facet names for a particular schema. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ListTypedLinkFacetNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ListTypedLinkFacetNamesResponse listTypedLinkFacetNames(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<ListTypedLinkFacetNamesResponse> localVarResp = listTypedLinkFacetNamesWithHttpInfo(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a paginated list of &lt;code&gt;TypedLink&lt;/code&gt; facet names for a particular schema. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;ListTypedLinkFacetNamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTypedLinkFacetNamesResponse> listTypedLinkFacetNamesWithHttpInfo(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listTypedLinkFacetNamesValidateBeforeCall(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<ListTypedLinkFacetNamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a paginated list of &lt;code&gt;TypedLink&lt;/code&gt; facet names for a particular schema. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param listDevelopmentSchemaArnsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTypedLinkFacetNamesAsync(String xAmzDataPartition, ListDevelopmentSchemaArnsRequest listDevelopmentSchemaArnsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<ListTypedLinkFacetNamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTypedLinkFacetNamesValidateBeforeCall(xAmzDataPartition, listDevelopmentSchemaArnsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListTypedLinkFacetNamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lookupPolicy
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param lookupPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupPolicyCall(String xAmzDataPartition, LookupPolicyRequest lookupPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookupPolicyRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/policy/lookup#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupPolicyValidateBeforeCall(String xAmzDataPartition, LookupPolicyRequest lookupPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling lookupPolicy(Async)");
        }

        // verify the required parameter 'lookupPolicyRequest' is set
        if (lookupPolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'lookupPolicyRequest' when calling lookupPolicy(Async)");
        }

        return lookupPolicyCall(xAmzDataPartition, lookupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);

    }

    /**
     * 
     * Lists all policies from the root of the &lt;a&gt;Directory&lt;/a&gt; to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don&#39;t have the policies attached, it returns the &lt;code&gt;ObjectIdentifier&lt;/code&gt; for such objects. If policies are present, it returns &lt;code&gt;ObjectIdentifier&lt;/code&gt;, &lt;code&gt;policyId&lt;/code&gt;, and &lt;code&gt;policyType&lt;/code&gt;. Paths that don&#39;t lead to the root from the target object are ignored. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\&quot;&gt;Policies&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param lookupPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return LookupPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public LookupPolicyResponse lookupPolicy(String xAmzDataPartition, LookupPolicyRequest lookupPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        ApiResponse<LookupPolicyResponse> localVarResp = lookupPolicyWithHttpInfo(xAmzDataPartition, lookupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all policies from the root of the &lt;a&gt;Directory&lt;/a&gt; to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don&#39;t have the policies attached, it returns the &lt;code&gt;ObjectIdentifier&lt;/code&gt; for such objects. If policies are present, it returns &lt;code&gt;ObjectIdentifier&lt;/code&gt;, &lt;code&gt;policyId&lt;/code&gt;, and &lt;code&gt;policyType&lt;/code&gt;. Paths that don&#39;t lead to the root from the target object are ignored. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\&quot;&gt;Policies&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param lookupPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @return ApiResponse&lt;LookupPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LookupPolicyResponse> lookupPolicyWithHttpInfo(String xAmzDataPartition, LookupPolicyRequest lookupPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = lookupPolicyValidateBeforeCall(xAmzDataPartition, lookupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, null);
        Type localVarReturnType = new TypeToken<LookupPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all policies from the root of the &lt;a&gt;Directory&lt;/a&gt; to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don&#39;t have the policies attached, it returns the &lt;code&gt;ObjectIdentifier&lt;/code&gt; for such objects. If policies are present, it returns &lt;code&gt;ObjectIdentifier&lt;/code&gt;, &lt;code&gt;policyId&lt;/code&gt;, and &lt;code&gt;policyType&lt;/code&gt;. Paths that don&#39;t lead to the root from the target object are ignored. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/key_concepts_directory.html#key_concepts_policies\&quot;&gt;Policies&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param lookupPolicyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults Pagination limit (optional)
     * @param nextToken Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidNextTokenException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lookupPolicyAsync(String xAmzDataPartition, LookupPolicyRequest lookupPolicyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String maxResults, String nextToken, final ApiCallback<LookupPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupPolicyValidateBeforeCall(xAmzDataPartition, lookupPolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, _callback);
        Type localVarReturnType = new TypeToken<LookupPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishSchema
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param publishSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SchemaAlreadyPublishedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishSchemaCall(String xAmzDataPartition, PublishSchemaRequest publishSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = publishSchemaRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/publish#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishSchemaValidateBeforeCall(String xAmzDataPartition, PublishSchemaRequest publishSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling publishSchema(Async)");
        }

        // verify the required parameter 'publishSchemaRequest' is set
        if (publishSchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'publishSchemaRequest' when calling publishSchema(Async)");
        }

        return publishSchemaCall(xAmzDataPartition, publishSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Publishes a development schema with a major version and a recommended minor version.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param publishSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PublishSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SchemaAlreadyPublishedException </td><td>  -  </td></tr>
     </table>
     */
    public PublishSchemaResponse publishSchema(String xAmzDataPartition, PublishSchemaRequest publishSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PublishSchemaResponse> localVarResp = publishSchemaWithHttpInfo(xAmzDataPartition, publishSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Publishes a development schema with a major version and a recommended minor version.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param publishSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PublishSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SchemaAlreadyPublishedException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PublishSchemaResponse> publishSchemaWithHttpInfo(String xAmzDataPartition, PublishSchemaRequest publishSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = publishSchemaValidateBeforeCall(xAmzDataPartition, publishSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PublishSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Publishes a development schema with a major version and a recommended minor version.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param publishSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> SchemaAlreadyPublishedException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishSchemaAsync(String xAmzDataPartition, PublishSchemaRequest publishSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PublishSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishSchemaValidateBeforeCall(xAmzDataPartition, publishSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PublishSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSchemaFromJson
     * @param xAmzDataPartition The ARN of the schema to update. (required)
     * @param putSchemaFromJsonRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemaDocException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSchemaFromJsonCall(String xAmzDataPartition, PutSchemaFromJsonRequest putSchemaFromJsonRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSchemaFromJsonRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/json#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSchemaFromJsonValidateBeforeCall(String xAmzDataPartition, PutSchemaFromJsonRequest putSchemaFromJsonRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling putSchemaFromJson(Async)");
        }

        // verify the required parameter 'putSchemaFromJsonRequest' is set
        if (putSchemaFromJsonRequest == null) {
            throw new ApiException("Missing the required parameter 'putSchemaFromJsonRequest' when calling putSchemaFromJson(Async)");
        }

        return putSchemaFromJsonCall(xAmzDataPartition, putSchemaFromJsonRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Allows a schema to be updated using JSON upload. Only available for development schemas. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the schema to update. (required)
     * @param putSchemaFromJsonRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutSchemaFromJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemaDocException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public PutSchemaFromJsonResponse putSchemaFromJson(String xAmzDataPartition, PutSchemaFromJsonRequest putSchemaFromJsonRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutSchemaFromJsonResponse> localVarResp = putSchemaFromJsonWithHttpInfo(xAmzDataPartition, putSchemaFromJsonRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Allows a schema to be updated using JSON upload. Only available for development schemas. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the schema to update. (required)
     * @param putSchemaFromJsonRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutSchemaFromJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemaDocException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutSchemaFromJsonResponse> putSchemaFromJsonWithHttpInfo(String xAmzDataPartition, PutSchemaFromJsonRequest putSchemaFromJsonRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putSchemaFromJsonValidateBeforeCall(xAmzDataPartition, putSchemaFromJsonRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutSchemaFromJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Allows a schema to be updated using JSON upload. Only available for development schemas. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/schemas_jsonformat.html#schemas_json\&quot;&gt;JSON Schema Format&lt;/a&gt; for more information.
     * @param xAmzDataPartition The ARN of the schema to update. (required)
     * @param putSchemaFromJsonRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidSchemaDocException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSchemaFromJsonAsync(String xAmzDataPartition, PutSchemaFromJsonRequest putSchemaFromJsonRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutSchemaFromJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSchemaFromJsonValidateBeforeCall(xAmzDataPartition, putSchemaFromJsonRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutSchemaFromJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeFacetFromObject
     * @param xAmzDataPartition The ARN of the directory in which the object resides. (required)
     * @param removeFacetFromObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFacetFromObjectCall(String xAmzDataPartition, RemoveFacetFromObjectRequest removeFacetFromObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeFacetFromObjectRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/facets/delete#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFacetFromObjectValidateBeforeCall(String xAmzDataPartition, RemoveFacetFromObjectRequest removeFacetFromObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling removeFacetFromObject(Async)");
        }

        // verify the required parameter 'removeFacetFromObjectRequest' is set
        if (removeFacetFromObjectRequest == null) {
            throw new ApiException("Missing the required parameter 'removeFacetFromObjectRequest' when calling removeFacetFromObject(Async)");
        }

        return removeFacetFromObjectCall(xAmzDataPartition, removeFacetFromObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes the specified facet from the specified object.
     * @param xAmzDataPartition The ARN of the directory in which the object resides. (required)
     * @param removeFacetFromObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object removeFacetFromObject(String xAmzDataPartition, RemoveFacetFromObjectRequest removeFacetFromObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = removeFacetFromObjectWithHttpInfo(xAmzDataPartition, removeFacetFromObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Removes the specified facet from the specified object.
     * @param xAmzDataPartition The ARN of the directory in which the object resides. (required)
     * @param removeFacetFromObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeFacetFromObjectWithHttpInfo(String xAmzDataPartition, RemoveFacetFromObjectRequest removeFacetFromObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = removeFacetFromObjectValidateBeforeCall(xAmzDataPartition, removeFacetFromObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Removes the specified facet from the specified object.
     * @param xAmzDataPartition The ARN of the directory in which the object resides. (required)
     * @param removeFacetFromObjectRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeFacetFromObjectAsync(String xAmzDataPartition, RemoveFacetFromObjectRequest removeFacetFromObjectRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFacetFromObjectValidateBeforeCall(xAmzDataPartition, removeFacetFromObjectRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceCall(TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/tags/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * An API operation for adding tags to a resource.
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object tagResource(TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = tagResourceWithHttpInfo(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * An API operation for adding tags to a resource.
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tagResourceWithHttpInfo(TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * An API operation for adding tags to a resource.
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tagResourceAsync(TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceCall(UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/tags/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * An API operation for removing tags from a resource.
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public Object untagResource(UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = untagResourceWithHttpInfo(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * An API operation for removing tags from a resource.
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> untagResourceWithHttpInfo(UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * An API operation for removing tags from a resource.
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidTaggingRequestException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call untagResourceAsync(UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateFacet
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFacetCall(String xAmzDataPartition, UpdateFacetRequest updateFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/facet#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFacetValidateBeforeCall(String xAmzDataPartition, UpdateFacetRequest updateFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling updateFacet(Async)");
        }

        // verify the required parameter 'updateFacetRequest' is set
        if (updateFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateFacetRequest' when calling updateFacet(Async)");
        }

        return updateFacetCall(xAmzDataPartition, updateFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Adds new &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deletes existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateFacet(String xAmzDataPartition, UpdateFacetRequest updateFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateFacetWithHttpInfo(xAmzDataPartition, updateFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Adds new &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deletes existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateFacetWithHttpInfo(String xAmzDataPartition, UpdateFacetRequest updateFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateFacetValidateBeforeCall(xAmzDataPartition, updateFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Does the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Adds new &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Updates existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Deletes existing &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;Rules&lt;/code&gt;, or &lt;code&gt;ObjectTypes&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt;
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Facet&lt;/a&gt;. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateFacetAsync(String xAmzDataPartition, UpdateFacetRequest updateFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFacetValidateBeforeCall(xAmzDataPartition, updateFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateLinkAttributes
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param updateLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLinkAttributesCall(String xAmzDataPartition, UpdateLinkAttributesRequest updateLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLinkAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/attributes/update#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLinkAttributesValidateBeforeCall(String xAmzDataPartition, UpdateLinkAttributesRequest updateLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling updateLinkAttributes(Async)");
        }

        // verify the required parameter 'updateLinkAttributesRequest' is set
        if (updateLinkAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateLinkAttributesRequest' when calling updateLinkAttributes(Async)");
        }

        return updateLinkAttributesCall(xAmzDataPartition, updateLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its &lt;code&gt;IdentityAttributeOrder&lt;/code&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param updateLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateLinkAttributes(String xAmzDataPartition, UpdateLinkAttributesRequest updateLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateLinkAttributesWithHttpInfo(xAmzDataPartition, updateLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its &lt;code&gt;IdentityAttributeOrder&lt;/code&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param updateLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateLinkAttributesWithHttpInfo(String xAmzDataPartition, UpdateLinkAttributesRequest updateLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateLinkAttributesValidateBeforeCall(xAmzDataPartition, updateLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a given typed link’s attributes. Attributes to be updated must not contribute to the typed link’s identity, as defined by its &lt;code&gt;IdentityAttributeOrder&lt;/code&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see &lt;a&gt;arns&lt;/a&gt; or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;. (required)
     * @param updateLinkAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateLinkAttributesAsync(String xAmzDataPartition, UpdateLinkAttributesRequest updateLinkAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLinkAttributesValidateBeforeCall(xAmzDataPartition, updateLinkAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateObjectAttributes
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectAttributesCall(String xAmzDataPartition, UpdateObjectAttributesRequest updateObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateObjectAttributesRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/object/update#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateObjectAttributesValidateBeforeCall(String xAmzDataPartition, UpdateObjectAttributesRequest updateObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling updateObjectAttributes(Async)");
        }

        // verify the required parameter 'updateObjectAttributesRequest' is set
        if (updateObjectAttributesRequest == null) {
            throw new ApiException("Missing the required parameter 'updateObjectAttributesRequest' when calling updateObjectAttributes(Async)");
        }

        return updateObjectAttributesCall(xAmzDataPartition, updateObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates a given object&#39;s attributes.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateObjectAttributesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateObjectAttributesResponse updateObjectAttributes(String xAmzDataPartition, UpdateObjectAttributesRequest updateObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateObjectAttributesResponse> localVarResp = updateObjectAttributesWithHttpInfo(xAmzDataPartition, updateObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a given object&#39;s attributes.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateObjectAttributesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateObjectAttributesResponse> updateObjectAttributesWithHttpInfo(String xAmzDataPartition, UpdateObjectAttributesRequest updateObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateObjectAttributesValidateBeforeCall(xAmzDataPartition, updateObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateObjectAttributesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a given object&#39;s attributes.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the &lt;a&gt;Directory&lt;/a&gt; where the object resides. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateObjectAttributesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> DirectoryNotEnabledException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LinkNameAlreadyInUseException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetValidationException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateObjectAttributesAsync(String xAmzDataPartition, UpdateObjectAttributesRequest updateObjectAttributesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateObjectAttributesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateObjectAttributesValidateBeforeCall(xAmzDataPartition, updateObjectAttributesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateObjectAttributesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSchema
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSchemaCall(String xAmzDataPartition, UpdateSchemaRequest updateSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSchemaRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/update#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSchemaValidateBeforeCall(String xAmzDataPartition, UpdateSchemaRequest updateSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling updateSchema(Async)");
        }

        // verify the required parameter 'updateSchemaRequest' is set
        if (updateSchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSchemaRequest' when calling updateSchema(Async)");
        }

        return updateSchemaCall(xAmzDataPartition, updateSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the schema name with a new name. Only development schema names can be updated.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSchemaResponse updateSchema(String xAmzDataPartition, UpdateSchemaRequest updateSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSchemaResponse> localVarResp = updateSchemaWithHttpInfo(xAmzDataPartition, updateSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the schema name with a new name. Only development schema names can be updated.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSchemaResponse> updateSchemaWithHttpInfo(String xAmzDataPartition, UpdateSchemaRequest updateSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSchemaValidateBeforeCall(xAmzDataPartition, updateSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the schema name with a new name. Only development schema names can be updated.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) of the development schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSchemaAsync(String xAmzDataPartition, UpdateSchemaRequest updateSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSchemaValidateBeforeCall(xAmzDataPartition, updateSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTypedLinkFacet
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTypedLinkFacetCall(String xAmzDataPartition, UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTypedLinkFacetRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/typedlink/facet#x-amz-data-partition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzDataPartition != null) {
            localVarHeaderParams.put("x-amz-data-partition", localVarApiClient.parameterToString(xAmzDataPartition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTypedLinkFacetValidateBeforeCall(String xAmzDataPartition, UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xAmzDataPartition' is set
        if (xAmzDataPartition == null) {
            throw new ApiException("Missing the required parameter 'xAmzDataPartition' when calling updateTypedLinkFacet(Async)");
        }

        // verify the required parameter 'updateTypedLinkFacetRequest' is set
        if (updateTypedLinkFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'updateTypedLinkFacetRequest' when calling updateTypedLinkFacet(Async)");
        }

        return updateTypedLinkFacetCall(xAmzDataPartition, updateTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateTypedLinkFacet(String xAmzDataPartition, UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateTypedLinkFacetWithHttpInfo(xAmzDataPartition, updateTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateTypedLinkFacetWithHttpInfo(String xAmzDataPartition, UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateTypedLinkFacetValidateBeforeCall(xAmzDataPartition, updateTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a &lt;a&gt;TypedLinkFacet&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/clouddirectory/latest/developerguide/directory_objects_links.html#directory_objects_links_typedlink\&quot;&gt;Typed Links&lt;/a&gt;.
     * @param xAmzDataPartition The Amazon Resource Name (ARN) that is associated with the schema. For more information, see &lt;a&gt;arns&lt;/a&gt;. (required)
     * @param updateTypedLinkFacetRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> LimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> FacetValidationException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidFacetUpdateException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 489 </td><td> FacetNotFoundException </td><td>  -  </td></tr>
        <tr><td> 490 </td><td> InvalidRuleException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTypedLinkFacetAsync(String xAmzDataPartition, UpdateTypedLinkFacetRequest updateTypedLinkFacetRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTypedLinkFacetValidateBeforeCall(xAmzDataPartition, updateTypedLinkFacetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upgradeAppliedSchema
     * @param upgradeAppliedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradeAppliedSchemaCall(UpgradeAppliedSchemaRequest upgradeAppliedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upgradeAppliedSchemaRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/upgradeapplied";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradeAppliedSchemaValidateBeforeCall(UpgradeAppliedSchemaRequest upgradeAppliedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upgradeAppliedSchemaRequest' is set
        if (upgradeAppliedSchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'upgradeAppliedSchemaRequest' when calling upgradeAppliedSchema(Async)");
        }

        return upgradeAppliedSchemaCall(upgradeAppliedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Upgrades a single directory in-place using the &lt;code&gt;PublishedSchemaArn&lt;/code&gt; with schema updates found in &lt;code&gt;MinorVersion&lt;/code&gt;. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
     * @param upgradeAppliedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpgradeAppliedSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public UpgradeAppliedSchemaResponse upgradeAppliedSchema(UpgradeAppliedSchemaRequest upgradeAppliedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpgradeAppliedSchemaResponse> localVarResp = upgradeAppliedSchemaWithHttpInfo(upgradeAppliedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Upgrades a single directory in-place using the &lt;code&gt;PublishedSchemaArn&lt;/code&gt; with schema updates found in &lt;code&gt;MinorVersion&lt;/code&gt;. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
     * @param upgradeAppliedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpgradeAppliedSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpgradeAppliedSchemaResponse> upgradeAppliedSchemaWithHttpInfo(UpgradeAppliedSchemaRequest upgradeAppliedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = upgradeAppliedSchemaValidateBeforeCall(upgradeAppliedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpgradeAppliedSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upgrades a single directory in-place using the &lt;code&gt;PublishedSchemaArn&lt;/code&gt; with schema updates found in &lt;code&gt;MinorVersion&lt;/code&gt;. Backwards-compatible minor version upgrades are instantaneously available for readers on all objects in the directory. Note: This is a synchronous API call and upgrades only one schema on a given directory per call. To upgrade multiple directories from one schema, you would need to call this API on each directory.
     * @param upgradeAppliedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> SchemaAlreadyExistsException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradeAppliedSchemaAsync(UpgradeAppliedSchemaRequest upgradeAppliedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpgradeAppliedSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradeAppliedSchemaValidateBeforeCall(upgradeAppliedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpgradeAppliedSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upgradePublishedSchema
     * @param upgradePublishedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradePublishedSchemaCall(UpgradePublishedSchemaRequest upgradePublishedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upgradePublishedSchemaRequest;

        // create path and map variables
        String localVarPath = "/amazonclouddirectory/2017-01-11/schema/upgradepublished";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upgradePublishedSchemaValidateBeforeCall(UpgradePublishedSchemaRequest upgradePublishedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upgradePublishedSchemaRequest' is set
        if (upgradePublishedSchemaRequest == null) {
            throw new ApiException("Missing the required parameter 'upgradePublishedSchemaRequest' when calling upgradePublishedSchema(Async)");
        }

        return upgradePublishedSchemaCall(upgradePublishedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Upgrades a published schema under a new minor version revision using the current contents of &lt;code&gt;DevelopmentSchemaArn&lt;/code&gt;.
     * @param upgradePublishedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpgradePublishedSchemaResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public UpgradePublishedSchemaResponse upgradePublishedSchema(UpgradePublishedSchemaRequest upgradePublishedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpgradePublishedSchemaResponse> localVarResp = upgradePublishedSchemaWithHttpInfo(upgradePublishedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Upgrades a published schema under a new minor version revision using the current contents of &lt;code&gt;DevelopmentSchemaArn&lt;/code&gt;.
     * @param upgradePublishedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpgradePublishedSchemaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpgradePublishedSchemaResponse> upgradePublishedSchemaWithHttpInfo(UpgradePublishedSchemaRequest upgradePublishedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = upgradePublishedSchemaValidateBeforeCall(upgradePublishedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpgradePublishedSchemaResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upgrades a published schema under a new minor version revision using the current contents of &lt;code&gt;DevelopmentSchemaArn&lt;/code&gt;.
     * @param upgradePublishedSchemaRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> InternalServiceException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> InvalidArnException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> RetryableConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ValidationException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> IncompatibleSchemaException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceNotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> InvalidAttachmentException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> LimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upgradePublishedSchemaAsync(UpgradePublishedSchemaRequest upgradePublishedSchemaRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpgradePublishedSchemaResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upgradePublishedSchemaValidateBeforeCall(upgradePublishedSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpgradePublishedSchemaResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
