/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpgradePublishedSchemaRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradePublishedSchemaRequest {
  public static final String SERIALIZED_NAME_DEVELOPMENT_SCHEMA_ARN = "DevelopmentSchemaArn";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT_SCHEMA_ARN)
  private String developmentSchemaArn;

  public static final String SERIALIZED_NAME_PUBLISHED_SCHEMA_ARN = "PublishedSchemaArn";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_SCHEMA_ARN)
  private String publishedSchemaArn;

  public static final String SERIALIZED_NAME_MINOR_VERSION = "MinorVersion";
  @SerializedName(SERIALIZED_NAME_MINOR_VERSION)
  private String minorVersion;

  public static final String SERIALIZED_NAME_DRY_RUN = "DryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public UpgradePublishedSchemaRequest() {
  }

  public UpgradePublishedSchemaRequest developmentSchemaArn(String developmentSchemaArn) {
    this.developmentSchemaArn = developmentSchemaArn;
    return this;
  }

  /**
   * The ARN of the development schema with the changes used for the upgrade.
   * @return developmentSchemaArn
   */
  @javax.annotation.Nonnull
  public String getDevelopmentSchemaArn() {
    return developmentSchemaArn;
  }

  public void setDevelopmentSchemaArn(String developmentSchemaArn) {
    this.developmentSchemaArn = developmentSchemaArn;
  }


  public UpgradePublishedSchemaRequest publishedSchemaArn(String publishedSchemaArn) {
    this.publishedSchemaArn = publishedSchemaArn;
    return this;
  }

  /**
   * The ARN of the published schema to be upgraded.
   * @return publishedSchemaArn
   */
  @javax.annotation.Nonnull
  public String getPublishedSchemaArn() {
    return publishedSchemaArn;
  }

  public void setPublishedSchemaArn(String publishedSchemaArn) {
    this.publishedSchemaArn = publishedSchemaArn;
  }


  public UpgradePublishedSchemaRequest minorVersion(String minorVersion) {
    this.minorVersion = minorVersion;
    return this;
  }

  /**
   * Identifies the minor version of the published schema that will be created. This parameter is NOT optional.
   * @return minorVersion
   */
  @javax.annotation.Nonnull
  public String getMinorVersion() {
    return minorVersion;
  }

  public void setMinorVersion(String minorVersion) {
    this.minorVersion = minorVersion;
  }


  public UpgradePublishedSchemaRequest dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

  /**
   * Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.
   * @return dryRun
   */
  @javax.annotation.Nullable
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradePublishedSchemaRequest upgradePublishedSchemaRequest = (UpgradePublishedSchemaRequest) o;
    return Objects.equals(this.developmentSchemaArn, upgradePublishedSchemaRequest.developmentSchemaArn) &&
        Objects.equals(this.publishedSchemaArn, upgradePublishedSchemaRequest.publishedSchemaArn) &&
        Objects.equals(this.minorVersion, upgradePublishedSchemaRequest.minorVersion) &&
        Objects.equals(this.dryRun, upgradePublishedSchemaRequest.dryRun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(developmentSchemaArn, publishedSchemaArn, minorVersion, dryRun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradePublishedSchemaRequest {\n");
    sb.append("    developmentSchemaArn: ").append(toIndentedString(developmentSchemaArn)).append("\n");
    sb.append("    publishedSchemaArn: ").append(toIndentedString(publishedSchemaArn)).append("\n");
    sb.append("    minorVersion: ").append(toIndentedString(minorVersion)).append("\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DevelopmentSchemaArn");
    openapiFields.add("PublishedSchemaArn");
    openapiFields.add("MinorVersion");
    openapiFields.add("DryRun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DevelopmentSchemaArn");
    openapiRequiredFields.add("PublishedSchemaArn");
    openapiRequiredFields.add("MinorVersion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradePublishedSchemaRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradePublishedSchemaRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradePublishedSchemaRequest is not found in the empty JSON string", UpgradePublishedSchemaRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradePublishedSchemaRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradePublishedSchemaRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpgradePublishedSchemaRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("DevelopmentSchemaArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DevelopmentSchemaArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DevelopmentSchemaArn").toString()));
      }
      if (!jsonObj.get("PublishedSchemaArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublishedSchemaArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublishedSchemaArn").toString()));
      }
      if (!jsonObj.get("MinorVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MinorVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MinorVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradePublishedSchemaRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradePublishedSchemaRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradePublishedSchemaRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradePublishedSchemaRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradePublishedSchemaRequest>() {
           @Override
           public void write(JsonWriter out, UpgradePublishedSchemaRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradePublishedSchemaRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradePublishedSchemaRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradePublishedSchemaRequest
   * @throws IOException if the JSON string is invalid with respect to UpgradePublishedSchemaRequest
   */
  public static UpgradePublishedSchemaRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradePublishedSchemaRequest.class);
  }

  /**
   * Convert an instance of UpgradePublishedSchemaRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

