/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BatchReadOperationGetLinkAttributes;
import org.openapitools.client.model.BatchReadOperationGetObjectAttributes;
import org.openapitools.client.model.BatchReadOperationGetObjectInformation;
import org.openapitools.client.model.BatchReadOperationListAttachedIndices;
import org.openapitools.client.model.BatchReadOperationListIncomingTypedLinks;
import org.openapitools.client.model.BatchReadOperationListIndex;
import org.openapitools.client.model.BatchReadOperationListObjectAttributes;
import org.openapitools.client.model.BatchReadOperationListObjectChildren;
import org.openapitools.client.model.BatchReadOperationListObjectParentPaths;
import org.openapitools.client.model.BatchReadOperationListObjectParents;
import org.openapitools.client.model.BatchReadOperationListObjectPolicies;
import org.openapitools.client.model.BatchReadOperationListOutgoingTypedLinks;
import org.openapitools.client.model.BatchReadOperationListPolicyAttachments;
import org.openapitools.client.model.BatchReadOperationLookupPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the output of a &lt;code&gt;BatchRead&lt;/code&gt; operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchReadOperation {
  public static final String SERIALIZED_NAME_LIST_OBJECT_ATTRIBUTES = "ListObjectAttributes";
  @SerializedName(SERIALIZED_NAME_LIST_OBJECT_ATTRIBUTES)
  private BatchReadOperationListObjectAttributes listObjectAttributes;

  public static final String SERIALIZED_NAME_LIST_OBJECT_CHILDREN = "ListObjectChildren";
  @SerializedName(SERIALIZED_NAME_LIST_OBJECT_CHILDREN)
  private BatchReadOperationListObjectChildren listObjectChildren;

  public static final String SERIALIZED_NAME_LIST_ATTACHED_INDICES = "ListAttachedIndices";
  @SerializedName(SERIALIZED_NAME_LIST_ATTACHED_INDICES)
  private BatchReadOperationListAttachedIndices listAttachedIndices;

  public static final String SERIALIZED_NAME_LIST_OBJECT_PARENT_PATHS = "ListObjectParentPaths";
  @SerializedName(SERIALIZED_NAME_LIST_OBJECT_PARENT_PATHS)
  private BatchReadOperationListObjectParentPaths listObjectParentPaths;

  public static final String SERIALIZED_NAME_GET_OBJECT_INFORMATION = "GetObjectInformation";
  @SerializedName(SERIALIZED_NAME_GET_OBJECT_INFORMATION)
  private BatchReadOperationGetObjectInformation getObjectInformation;

  public static final String SERIALIZED_NAME_GET_OBJECT_ATTRIBUTES = "GetObjectAttributes";
  @SerializedName(SERIALIZED_NAME_GET_OBJECT_ATTRIBUTES)
  private BatchReadOperationGetObjectAttributes getObjectAttributes;

  public static final String SERIALIZED_NAME_LIST_OBJECT_PARENTS = "ListObjectParents";
  @SerializedName(SERIALIZED_NAME_LIST_OBJECT_PARENTS)
  private BatchReadOperationListObjectParents listObjectParents;

  public static final String SERIALIZED_NAME_LIST_OBJECT_POLICIES = "ListObjectPolicies";
  @SerializedName(SERIALIZED_NAME_LIST_OBJECT_POLICIES)
  private BatchReadOperationListObjectPolicies listObjectPolicies;

  public static final String SERIALIZED_NAME_LIST_POLICY_ATTACHMENTS = "ListPolicyAttachments";
  @SerializedName(SERIALIZED_NAME_LIST_POLICY_ATTACHMENTS)
  private BatchReadOperationListPolicyAttachments listPolicyAttachments;

  public static final String SERIALIZED_NAME_LOOKUP_POLICY = "LookupPolicy";
  @SerializedName(SERIALIZED_NAME_LOOKUP_POLICY)
  private BatchReadOperationLookupPolicy lookupPolicy;

  public static final String SERIALIZED_NAME_LIST_INDEX = "ListIndex";
  @SerializedName(SERIALIZED_NAME_LIST_INDEX)
  private BatchReadOperationListIndex listIndex;

  public static final String SERIALIZED_NAME_LIST_OUTGOING_TYPED_LINKS = "ListOutgoingTypedLinks";
  @SerializedName(SERIALIZED_NAME_LIST_OUTGOING_TYPED_LINKS)
  private BatchReadOperationListOutgoingTypedLinks listOutgoingTypedLinks;

  public static final String SERIALIZED_NAME_LIST_INCOMING_TYPED_LINKS = "ListIncomingTypedLinks";
  @SerializedName(SERIALIZED_NAME_LIST_INCOMING_TYPED_LINKS)
  private BatchReadOperationListIncomingTypedLinks listIncomingTypedLinks;

  public static final String SERIALIZED_NAME_GET_LINK_ATTRIBUTES = "GetLinkAttributes";
  @SerializedName(SERIALIZED_NAME_GET_LINK_ATTRIBUTES)
  private BatchReadOperationGetLinkAttributes getLinkAttributes;

  public BatchReadOperation() {
  }

  public BatchReadOperation listObjectAttributes(BatchReadOperationListObjectAttributes listObjectAttributes) {
    this.listObjectAttributes = listObjectAttributes;
    return this;
  }

  /**
   * Get listObjectAttributes
   * @return listObjectAttributes
   */
  @javax.annotation.Nullable
  public BatchReadOperationListObjectAttributes getListObjectAttributes() {
    return listObjectAttributes;
  }

  public void setListObjectAttributes(BatchReadOperationListObjectAttributes listObjectAttributes) {
    this.listObjectAttributes = listObjectAttributes;
  }


  public BatchReadOperation listObjectChildren(BatchReadOperationListObjectChildren listObjectChildren) {
    this.listObjectChildren = listObjectChildren;
    return this;
  }

  /**
   * Get listObjectChildren
   * @return listObjectChildren
   */
  @javax.annotation.Nullable
  public BatchReadOperationListObjectChildren getListObjectChildren() {
    return listObjectChildren;
  }

  public void setListObjectChildren(BatchReadOperationListObjectChildren listObjectChildren) {
    this.listObjectChildren = listObjectChildren;
  }


  public BatchReadOperation listAttachedIndices(BatchReadOperationListAttachedIndices listAttachedIndices) {
    this.listAttachedIndices = listAttachedIndices;
    return this;
  }

  /**
   * Get listAttachedIndices
   * @return listAttachedIndices
   */
  @javax.annotation.Nullable
  public BatchReadOperationListAttachedIndices getListAttachedIndices() {
    return listAttachedIndices;
  }

  public void setListAttachedIndices(BatchReadOperationListAttachedIndices listAttachedIndices) {
    this.listAttachedIndices = listAttachedIndices;
  }


  public BatchReadOperation listObjectParentPaths(BatchReadOperationListObjectParentPaths listObjectParentPaths) {
    this.listObjectParentPaths = listObjectParentPaths;
    return this;
  }

  /**
   * Get listObjectParentPaths
   * @return listObjectParentPaths
   */
  @javax.annotation.Nullable
  public BatchReadOperationListObjectParentPaths getListObjectParentPaths() {
    return listObjectParentPaths;
  }

  public void setListObjectParentPaths(BatchReadOperationListObjectParentPaths listObjectParentPaths) {
    this.listObjectParentPaths = listObjectParentPaths;
  }


  public BatchReadOperation getObjectInformation(BatchReadOperationGetObjectInformation getObjectInformation) {
    this.getObjectInformation = getObjectInformation;
    return this;
  }

  /**
   * Get getObjectInformation
   * @return getObjectInformation
   */
  @javax.annotation.Nullable
  public BatchReadOperationGetObjectInformation getGetObjectInformation() {
    return getObjectInformation;
  }

  public void setGetObjectInformation(BatchReadOperationGetObjectInformation getObjectInformation) {
    this.getObjectInformation = getObjectInformation;
  }


  public BatchReadOperation getObjectAttributes(BatchReadOperationGetObjectAttributes getObjectAttributes) {
    this.getObjectAttributes = getObjectAttributes;
    return this;
  }

  /**
   * Get getObjectAttributes
   * @return getObjectAttributes
   */
  @javax.annotation.Nullable
  public BatchReadOperationGetObjectAttributes getGetObjectAttributes() {
    return getObjectAttributes;
  }

  public void setGetObjectAttributes(BatchReadOperationGetObjectAttributes getObjectAttributes) {
    this.getObjectAttributes = getObjectAttributes;
  }


  public BatchReadOperation listObjectParents(BatchReadOperationListObjectParents listObjectParents) {
    this.listObjectParents = listObjectParents;
    return this;
  }

  /**
   * Get listObjectParents
   * @return listObjectParents
   */
  @javax.annotation.Nullable
  public BatchReadOperationListObjectParents getListObjectParents() {
    return listObjectParents;
  }

  public void setListObjectParents(BatchReadOperationListObjectParents listObjectParents) {
    this.listObjectParents = listObjectParents;
  }


  public BatchReadOperation listObjectPolicies(BatchReadOperationListObjectPolicies listObjectPolicies) {
    this.listObjectPolicies = listObjectPolicies;
    return this;
  }

  /**
   * Get listObjectPolicies
   * @return listObjectPolicies
   */
  @javax.annotation.Nullable
  public BatchReadOperationListObjectPolicies getListObjectPolicies() {
    return listObjectPolicies;
  }

  public void setListObjectPolicies(BatchReadOperationListObjectPolicies listObjectPolicies) {
    this.listObjectPolicies = listObjectPolicies;
  }


  public BatchReadOperation listPolicyAttachments(BatchReadOperationListPolicyAttachments listPolicyAttachments) {
    this.listPolicyAttachments = listPolicyAttachments;
    return this;
  }

  /**
   * Get listPolicyAttachments
   * @return listPolicyAttachments
   */
  @javax.annotation.Nullable
  public BatchReadOperationListPolicyAttachments getListPolicyAttachments() {
    return listPolicyAttachments;
  }

  public void setListPolicyAttachments(BatchReadOperationListPolicyAttachments listPolicyAttachments) {
    this.listPolicyAttachments = listPolicyAttachments;
  }


  public BatchReadOperation lookupPolicy(BatchReadOperationLookupPolicy lookupPolicy) {
    this.lookupPolicy = lookupPolicy;
    return this;
  }

  /**
   * Get lookupPolicy
   * @return lookupPolicy
   */
  @javax.annotation.Nullable
  public BatchReadOperationLookupPolicy getLookupPolicy() {
    return lookupPolicy;
  }

  public void setLookupPolicy(BatchReadOperationLookupPolicy lookupPolicy) {
    this.lookupPolicy = lookupPolicy;
  }


  public BatchReadOperation listIndex(BatchReadOperationListIndex listIndex) {
    this.listIndex = listIndex;
    return this;
  }

  /**
   * Get listIndex
   * @return listIndex
   */
  @javax.annotation.Nullable
  public BatchReadOperationListIndex getListIndex() {
    return listIndex;
  }

  public void setListIndex(BatchReadOperationListIndex listIndex) {
    this.listIndex = listIndex;
  }


  public BatchReadOperation listOutgoingTypedLinks(BatchReadOperationListOutgoingTypedLinks listOutgoingTypedLinks) {
    this.listOutgoingTypedLinks = listOutgoingTypedLinks;
    return this;
  }

  /**
   * Get listOutgoingTypedLinks
   * @return listOutgoingTypedLinks
   */
  @javax.annotation.Nullable
  public BatchReadOperationListOutgoingTypedLinks getListOutgoingTypedLinks() {
    return listOutgoingTypedLinks;
  }

  public void setListOutgoingTypedLinks(BatchReadOperationListOutgoingTypedLinks listOutgoingTypedLinks) {
    this.listOutgoingTypedLinks = listOutgoingTypedLinks;
  }


  public BatchReadOperation listIncomingTypedLinks(BatchReadOperationListIncomingTypedLinks listIncomingTypedLinks) {
    this.listIncomingTypedLinks = listIncomingTypedLinks;
    return this;
  }

  /**
   * Get listIncomingTypedLinks
   * @return listIncomingTypedLinks
   */
  @javax.annotation.Nullable
  public BatchReadOperationListIncomingTypedLinks getListIncomingTypedLinks() {
    return listIncomingTypedLinks;
  }

  public void setListIncomingTypedLinks(BatchReadOperationListIncomingTypedLinks listIncomingTypedLinks) {
    this.listIncomingTypedLinks = listIncomingTypedLinks;
  }


  public BatchReadOperation getLinkAttributes(BatchReadOperationGetLinkAttributes getLinkAttributes) {
    this.getLinkAttributes = getLinkAttributes;
    return this;
  }

  /**
   * Get getLinkAttributes
   * @return getLinkAttributes
   */
  @javax.annotation.Nullable
  public BatchReadOperationGetLinkAttributes getGetLinkAttributes() {
    return getLinkAttributes;
  }

  public void setGetLinkAttributes(BatchReadOperationGetLinkAttributes getLinkAttributes) {
    this.getLinkAttributes = getLinkAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchReadOperation batchReadOperation = (BatchReadOperation) o;
    return Objects.equals(this.listObjectAttributes, batchReadOperation.listObjectAttributes) &&
        Objects.equals(this.listObjectChildren, batchReadOperation.listObjectChildren) &&
        Objects.equals(this.listAttachedIndices, batchReadOperation.listAttachedIndices) &&
        Objects.equals(this.listObjectParentPaths, batchReadOperation.listObjectParentPaths) &&
        Objects.equals(this.getObjectInformation, batchReadOperation.getObjectInformation) &&
        Objects.equals(this.getObjectAttributes, batchReadOperation.getObjectAttributes) &&
        Objects.equals(this.listObjectParents, batchReadOperation.listObjectParents) &&
        Objects.equals(this.listObjectPolicies, batchReadOperation.listObjectPolicies) &&
        Objects.equals(this.listPolicyAttachments, batchReadOperation.listPolicyAttachments) &&
        Objects.equals(this.lookupPolicy, batchReadOperation.lookupPolicy) &&
        Objects.equals(this.listIndex, batchReadOperation.listIndex) &&
        Objects.equals(this.listOutgoingTypedLinks, batchReadOperation.listOutgoingTypedLinks) &&
        Objects.equals(this.listIncomingTypedLinks, batchReadOperation.listIncomingTypedLinks) &&
        Objects.equals(this.getLinkAttributes, batchReadOperation.getLinkAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listObjectAttributes, listObjectChildren, listAttachedIndices, listObjectParentPaths, getObjectInformation, getObjectAttributes, listObjectParents, listObjectPolicies, listPolicyAttachments, lookupPolicy, listIndex, listOutgoingTypedLinks, listIncomingTypedLinks, getLinkAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchReadOperation {\n");
    sb.append("    listObjectAttributes: ").append(toIndentedString(listObjectAttributes)).append("\n");
    sb.append("    listObjectChildren: ").append(toIndentedString(listObjectChildren)).append("\n");
    sb.append("    listAttachedIndices: ").append(toIndentedString(listAttachedIndices)).append("\n");
    sb.append("    listObjectParentPaths: ").append(toIndentedString(listObjectParentPaths)).append("\n");
    sb.append("    getObjectInformation: ").append(toIndentedString(getObjectInformation)).append("\n");
    sb.append("    getObjectAttributes: ").append(toIndentedString(getObjectAttributes)).append("\n");
    sb.append("    listObjectParents: ").append(toIndentedString(listObjectParents)).append("\n");
    sb.append("    listObjectPolicies: ").append(toIndentedString(listObjectPolicies)).append("\n");
    sb.append("    listPolicyAttachments: ").append(toIndentedString(listPolicyAttachments)).append("\n");
    sb.append("    lookupPolicy: ").append(toIndentedString(lookupPolicy)).append("\n");
    sb.append("    listIndex: ").append(toIndentedString(listIndex)).append("\n");
    sb.append("    listOutgoingTypedLinks: ").append(toIndentedString(listOutgoingTypedLinks)).append("\n");
    sb.append("    listIncomingTypedLinks: ").append(toIndentedString(listIncomingTypedLinks)).append("\n");
    sb.append("    getLinkAttributes: ").append(toIndentedString(getLinkAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ListObjectAttributes");
    openapiFields.add("ListObjectChildren");
    openapiFields.add("ListAttachedIndices");
    openapiFields.add("ListObjectParentPaths");
    openapiFields.add("GetObjectInformation");
    openapiFields.add("GetObjectAttributes");
    openapiFields.add("ListObjectParents");
    openapiFields.add("ListObjectPolicies");
    openapiFields.add("ListPolicyAttachments");
    openapiFields.add("LookupPolicy");
    openapiFields.add("ListIndex");
    openapiFields.add("ListOutgoingTypedLinks");
    openapiFields.add("ListIncomingTypedLinks");
    openapiFields.add("GetLinkAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchReadOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchReadOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchReadOperation is not found in the empty JSON string", BatchReadOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchReadOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchReadOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ListObjectAttributes`
      if (jsonObj.get("ListObjectAttributes") != null && !jsonObj.get("ListObjectAttributes").isJsonNull()) {
        BatchReadOperationListObjectAttributes.validateJsonElement(jsonObj.get("ListObjectAttributes"));
      }
      // validate the optional field `ListObjectChildren`
      if (jsonObj.get("ListObjectChildren") != null && !jsonObj.get("ListObjectChildren").isJsonNull()) {
        BatchReadOperationListObjectChildren.validateJsonElement(jsonObj.get("ListObjectChildren"));
      }
      // validate the optional field `ListAttachedIndices`
      if (jsonObj.get("ListAttachedIndices") != null && !jsonObj.get("ListAttachedIndices").isJsonNull()) {
        BatchReadOperationListAttachedIndices.validateJsonElement(jsonObj.get("ListAttachedIndices"));
      }
      // validate the optional field `ListObjectParentPaths`
      if (jsonObj.get("ListObjectParentPaths") != null && !jsonObj.get("ListObjectParentPaths").isJsonNull()) {
        BatchReadOperationListObjectParentPaths.validateJsonElement(jsonObj.get("ListObjectParentPaths"));
      }
      // validate the optional field `GetObjectInformation`
      if (jsonObj.get("GetObjectInformation") != null && !jsonObj.get("GetObjectInformation").isJsonNull()) {
        BatchReadOperationGetObjectInformation.validateJsonElement(jsonObj.get("GetObjectInformation"));
      }
      // validate the optional field `GetObjectAttributes`
      if (jsonObj.get("GetObjectAttributes") != null && !jsonObj.get("GetObjectAttributes").isJsonNull()) {
        BatchReadOperationGetObjectAttributes.validateJsonElement(jsonObj.get("GetObjectAttributes"));
      }
      // validate the optional field `ListObjectParents`
      if (jsonObj.get("ListObjectParents") != null && !jsonObj.get("ListObjectParents").isJsonNull()) {
        BatchReadOperationListObjectParents.validateJsonElement(jsonObj.get("ListObjectParents"));
      }
      // validate the optional field `ListObjectPolicies`
      if (jsonObj.get("ListObjectPolicies") != null && !jsonObj.get("ListObjectPolicies").isJsonNull()) {
        BatchReadOperationListObjectPolicies.validateJsonElement(jsonObj.get("ListObjectPolicies"));
      }
      // validate the optional field `ListPolicyAttachments`
      if (jsonObj.get("ListPolicyAttachments") != null && !jsonObj.get("ListPolicyAttachments").isJsonNull()) {
        BatchReadOperationListPolicyAttachments.validateJsonElement(jsonObj.get("ListPolicyAttachments"));
      }
      // validate the optional field `LookupPolicy`
      if (jsonObj.get("LookupPolicy") != null && !jsonObj.get("LookupPolicy").isJsonNull()) {
        BatchReadOperationLookupPolicy.validateJsonElement(jsonObj.get("LookupPolicy"));
      }
      // validate the optional field `ListIndex`
      if (jsonObj.get("ListIndex") != null && !jsonObj.get("ListIndex").isJsonNull()) {
        BatchReadOperationListIndex.validateJsonElement(jsonObj.get("ListIndex"));
      }
      // validate the optional field `ListOutgoingTypedLinks`
      if (jsonObj.get("ListOutgoingTypedLinks") != null && !jsonObj.get("ListOutgoingTypedLinks").isJsonNull()) {
        BatchReadOperationListOutgoingTypedLinks.validateJsonElement(jsonObj.get("ListOutgoingTypedLinks"));
      }
      // validate the optional field `ListIncomingTypedLinks`
      if (jsonObj.get("ListIncomingTypedLinks") != null && !jsonObj.get("ListIncomingTypedLinks").isJsonNull()) {
        BatchReadOperationListIncomingTypedLinks.validateJsonElement(jsonObj.get("ListIncomingTypedLinks"));
      }
      // validate the optional field `GetLinkAttributes`
      if (jsonObj.get("GetLinkAttributes") != null && !jsonObj.get("GetLinkAttributes").isJsonNull()) {
        BatchReadOperationGetLinkAttributes.validateJsonElement(jsonObj.get("GetLinkAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchReadOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchReadOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchReadOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchReadOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchReadOperation>() {
           @Override
           public void write(JsonWriter out, BatchReadOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchReadOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchReadOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchReadOperation
   * @throws IOException if the JSON string is invalid with respect to BatchReadOperation
   */
  public static BatchReadOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchReadOperation.class);
  }

  /**
   * Convert an instance of BatchReadOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

