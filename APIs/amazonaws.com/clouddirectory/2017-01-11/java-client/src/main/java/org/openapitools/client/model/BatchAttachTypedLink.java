/*
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference;
import org.openapitools.client.model.DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference;
import org.openapitools.client.model.DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Attaches a typed link to a specified source and target object inside a &lt;a&gt;BatchRead&lt;/a&gt; operation. For more information, see &lt;a&gt;AttachTypedLink&lt;/a&gt; and &lt;a&gt;BatchReadRequest$Operations&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:14:06.179434-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchAttachTypedLink {
  public static final String SERIALIZED_NAME_SOURCE_OBJECT_REFERENCE = "SourceObjectReference";
  @SerializedName(SERIALIZED_NAME_SOURCE_OBJECT_REFERENCE)
  private DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference sourceObjectReference;

  public static final String SERIALIZED_NAME_TARGET_OBJECT_REFERENCE = "TargetObjectReference";
  @SerializedName(SERIALIZED_NAME_TARGET_OBJECT_REFERENCE)
  private DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference targetObjectReference;

  public static final String SERIALIZED_NAME_TYPED_LINK_FACET = "TypedLinkFacet";
  @SerializedName(SERIALIZED_NAME_TYPED_LINK_FACET)
  private DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet typedLinkFacet;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "Attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List attributes;

  public BatchAttachTypedLink() {
  }

  public BatchAttachTypedLink sourceObjectReference(DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference sourceObjectReference) {
    this.sourceObjectReference = sourceObjectReference;
    return this;
  }

  /**
   * Get sourceObjectReference
   * @return sourceObjectReference
   */
  @javax.annotation.Nonnull
  public DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference getSourceObjectReference() {
    return sourceObjectReference;
  }

  public void setSourceObjectReference(DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference sourceObjectReference) {
    this.sourceObjectReference = sourceObjectReference;
  }


  public BatchAttachTypedLink targetObjectReference(DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference targetObjectReference) {
    this.targetObjectReference = targetObjectReference;
    return this;
  }

  /**
   * Get targetObjectReference
   * @return targetObjectReference
   */
  @javax.annotation.Nonnull
  public DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference getTargetObjectReference() {
    return targetObjectReference;
  }

  public void setTargetObjectReference(DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference targetObjectReference) {
    this.targetObjectReference = targetObjectReference;
  }


  public BatchAttachTypedLink typedLinkFacet(DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet typedLinkFacet) {
    this.typedLinkFacet = typedLinkFacet;
    return this;
  }

  /**
   * Get typedLinkFacet
   * @return typedLinkFacet
   */
  @javax.annotation.Nonnull
  public DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet getTypedLinkFacet() {
    return typedLinkFacet;
  }

  public void setTypedLinkFacet(DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet typedLinkFacet) {
    this.typedLinkFacet = typedLinkFacet;
  }


  public BatchAttachTypedLink attributes(List attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nonnull
  public List getAttributes() {
    return attributes;
  }

  public void setAttributes(List attributes) {
    this.attributes = attributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchAttachTypedLink batchAttachTypedLink = (BatchAttachTypedLink) o;
    return Objects.equals(this.sourceObjectReference, batchAttachTypedLink.sourceObjectReference) &&
        Objects.equals(this.targetObjectReference, batchAttachTypedLink.targetObjectReference) &&
        Objects.equals(this.typedLinkFacet, batchAttachTypedLink.typedLinkFacet) &&
        Objects.equals(this.attributes, batchAttachTypedLink.attributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceObjectReference, targetObjectReference, typedLinkFacet, attributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchAttachTypedLink {\n");
    sb.append("    sourceObjectReference: ").append(toIndentedString(sourceObjectReference)).append("\n");
    sb.append("    targetObjectReference: ").append(toIndentedString(targetObjectReference)).append("\n");
    sb.append("    typedLinkFacet: ").append(toIndentedString(typedLinkFacet)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SourceObjectReference");
    openapiFields.add("TargetObjectReference");
    openapiFields.add("TypedLinkFacet");
    openapiFields.add("Attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SourceObjectReference");
    openapiRequiredFields.add("TargetObjectReference");
    openapiRequiredFields.add("TypedLinkFacet");
    openapiRequiredFields.add("Attributes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchAttachTypedLink
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchAttachTypedLink.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchAttachTypedLink is not found in the empty JSON string", BatchAttachTypedLink.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchAttachTypedLink.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchAttachTypedLink` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchAttachTypedLink.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `SourceObjectReference`
      DetachTypedLinkRequestTypedLinkSpecifierSourceObjectReference.validateJsonElement(jsonObj.get("SourceObjectReference"));
      // validate the required field `TargetObjectReference`
      DetachTypedLinkRequestTypedLinkSpecifierTargetObjectReference.validateJsonElement(jsonObj.get("TargetObjectReference"));
      // validate the required field `TypedLinkFacet`
      DetachTypedLinkRequestTypedLinkSpecifierTypedLinkFacet.validateJsonElement(jsonObj.get("TypedLinkFacet"));
      // validate the required field `Attributes`
      List.validateJsonElement(jsonObj.get("Attributes"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchAttachTypedLink.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchAttachTypedLink' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchAttachTypedLink> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchAttachTypedLink.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchAttachTypedLink>() {
           @Override
           public void write(JsonWriter out, BatchAttachTypedLink value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchAttachTypedLink read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchAttachTypedLink given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchAttachTypedLink
   * @throws IOException if the JSON string is invalid with respect to BatchAttachTypedLink
   */
  public static BatchAttachTypedLink fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchAttachTypedLink.class);
  }

  /**
   * Convert an instance of BatchAttachTypedLink to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

