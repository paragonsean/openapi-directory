/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchLookupPolicyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchLookupPolicyResponse::OAIBatchLookupPolicyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchLookupPolicyResponse::OAIBatchLookupPolicyResponse() {
    this->initializeModel();
}

OAIBatchLookupPolicyResponse::~OAIBatchLookupPolicyResponse() {}

void OAIBatchLookupPolicyResponse::initializeModel() {

    m_policy_to_path_list_isSet = false;
    m_policy_to_path_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIBatchLookupPolicyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchLookupPolicyResponse::fromJsonObject(QJsonObject json) {

    m_policy_to_path_list_isValid = ::OpenAPI::fromJsonValue(m_policy_to_path_list, json[QString("PolicyToPathList")]);
    m_policy_to_path_list_isSet = !json[QString("PolicyToPathList")].isNull() && m_policy_to_path_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIBatchLookupPolicyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchLookupPolicyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_to_path_list.isSet()) {
        obj.insert(QString("PolicyToPathList"), ::OpenAPI::toJsonValue(m_policy_to_path_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIBatchLookupPolicyResponse::getPolicyToPathList() const {
    return m_policy_to_path_list;
}
void OAIBatchLookupPolicyResponse::setPolicyToPathList(const QList &policy_to_path_list) {
    m_policy_to_path_list = policy_to_path_list;
    m_policy_to_path_list_isSet = true;
}

bool OAIBatchLookupPolicyResponse::is_policy_to_path_list_Set() const{
    return m_policy_to_path_list_isSet;
}

bool OAIBatchLookupPolicyResponse::is_policy_to_path_list_Valid() const{
    return m_policy_to_path_list_isValid;
}

QString OAIBatchLookupPolicyResponse::getNextToken() const {
    return m_next_token;
}
void OAIBatchLookupPolicyResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIBatchLookupPolicyResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIBatchLookupPolicyResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIBatchLookupPolicyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_to_path_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchLookupPolicyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
