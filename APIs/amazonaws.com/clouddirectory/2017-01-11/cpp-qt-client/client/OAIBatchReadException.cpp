/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchReadException.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchReadException::OAIBatchReadException(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchReadException::OAIBatchReadException() {
    this->initializeModel();
}

OAIBatchReadException::~OAIBatchReadException() {}

void OAIBatchReadException::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIBatchReadException::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchReadException::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;
}

QString OAIBatchReadException::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchReadException::asJsonObject() const {
    QJsonObject obj;
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIBatchReadExceptionType OAIBatchReadException::getType() const {
    return m_type;
}
void OAIBatchReadException::setType(const OAIBatchReadExceptionType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatchReadException::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatchReadException::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBatchReadException::getMessage() const {
    return m_message;
}
void OAIBatchReadException::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBatchReadException::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBatchReadException::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIBatchReadException::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchReadException::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
