/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAddFacetToObject_ObjectReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAddFacetToObject_ObjectReference::OAIBatchAddFacetToObject_ObjectReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAddFacetToObject_ObjectReference::OAIBatchAddFacetToObject_ObjectReference() {
    this->initializeModel();
}

OAIBatchAddFacetToObject_ObjectReference::~OAIBatchAddFacetToObject_ObjectReference() {}

void OAIBatchAddFacetToObject_ObjectReference::initializeModel() {

    m_selector_isSet = false;
    m_selector_isValid = false;
}

void OAIBatchAddFacetToObject_ObjectReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAddFacetToObject_ObjectReference::fromJsonObject(QJsonObject json) {

    m_selector_isValid = ::OpenAPI::fromJsonValue(m_selector, json[QString("Selector")]);
    m_selector_isSet = !json[QString("Selector")].isNull() && m_selector_isValid;
}

QString OAIBatchAddFacetToObject_ObjectReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAddFacetToObject_ObjectReference::asJsonObject() const {
    QJsonObject obj;
    if (m_selector_isSet) {
        obj.insert(QString("Selector"), ::OpenAPI::toJsonValue(m_selector));
    }
    return obj;
}

QString OAIBatchAddFacetToObject_ObjectReference::getSelector() const {
    return m_selector;
}
void OAIBatchAddFacetToObject_ObjectReference::setSelector(const QString &selector) {
    m_selector = selector;
    m_selector_isSet = true;
}

bool OAIBatchAddFacetToObject_ObjectReference::is_selector_Set() const{
    return m_selector_isSet;
}

bool OAIBatchAddFacetToObject_ObjectReference::is_selector_Valid() const{
    return m_selector_isValid;
}

bool OAIBatchAddFacetToObject_ObjectReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_selector_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAddFacetToObject_ObjectReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
