/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSchemaFromJsonRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSchemaFromJsonRequest::OAIPutSchemaFromJsonRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSchemaFromJsonRequest::OAIPutSchemaFromJsonRequest() {
    this->initializeModel();
}

OAIPutSchemaFromJsonRequest::~OAIPutSchemaFromJsonRequest() {}

void OAIPutSchemaFromJsonRequest::initializeModel() {

    m_document_isSet = false;
    m_document_isValid = false;
}

void OAIPutSchemaFromJsonRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSchemaFromJsonRequest::fromJsonObject(QJsonObject json) {

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("Document")]);
    m_document_isSet = !json[QString("Document")].isNull() && m_document_isValid;
}

QString OAIPutSchemaFromJsonRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSchemaFromJsonRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_isSet) {
        obj.insert(QString("Document"), ::OpenAPI::toJsonValue(m_document));
    }
    return obj;
}

QString OAIPutSchemaFromJsonRequest::getDocument() const {
    return m_document;
}
void OAIPutSchemaFromJsonRequest::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIPutSchemaFromJsonRequest::is_document_Set() const{
    return m_document_isSet;
}

bool OAIPutSchemaFromJsonRequest::is_document_Valid() const{
    return m_document_isValid;
}

bool OAIPutSchemaFromJsonRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSchemaFromJsonRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_isValid && true;
}

} // namespace OpenAPI
