/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSchemaAsJsonResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSchemaAsJsonResponse::OAIGetSchemaAsJsonResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSchemaAsJsonResponse::OAIGetSchemaAsJsonResponse() {
    this->initializeModel();
}

OAIGetSchemaAsJsonResponse::~OAIGetSchemaAsJsonResponse() {}

void OAIGetSchemaAsJsonResponse::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_document_isSet = false;
    m_document_isValid = false;
}

void OAIGetSchemaAsJsonResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSchemaAsJsonResponse::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_document_isValid = ::OpenAPI::fromJsonValue(m_document, json[QString("Document")]);
    m_document_isSet = !json[QString("Document")].isNull() && m_document_isValid;
}

QString OAIGetSchemaAsJsonResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSchemaAsJsonResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_document_isSet) {
        obj.insert(QString("Document"), ::OpenAPI::toJsonValue(m_document));
    }
    return obj;
}

QString OAIGetSchemaAsJsonResponse::getName() const {
    return m_name;
}
void OAIGetSchemaAsJsonResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGetSchemaAsJsonResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGetSchemaAsJsonResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGetSchemaAsJsonResponse::getDocument() const {
    return m_document;
}
void OAIGetSchemaAsJsonResponse::setDocument(const QString &document) {
    m_document = document;
    m_document_isSet = true;
}

bool OAIGetSchemaAsJsonResponse::is_document_Set() const{
    return m_document_isSet;
}

bool OAIGetSchemaAsJsonResponse::is_document_Valid() const{
    return m_document_isValid;
}

bool OAIGetSchemaAsJsonResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSchemaAsJsonResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
