/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRead_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRead_request::OAIBatchRead_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRead_request::OAIBatchRead_request() {
    this->initializeModel();
}

OAIBatchRead_request::~OAIBatchRead_request() {}

void OAIBatchRead_request::initializeModel() {

    m_operations_isSet = false;
    m_operations_isValid = false;
}

void OAIBatchRead_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRead_request::fromJsonObject(QJsonObject json) {

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("Operations")]);
    m_operations_isSet = !json[QString("Operations")].isNull() && m_operations_isValid;
}

QString OAIBatchRead_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRead_request::asJsonObject() const {
    QJsonObject obj;
    if (m_operations.size() > 0) {
        obj.insert(QString("Operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    return obj;
}

QList<OAIBatchReadOperation> OAIBatchRead_request::getOperations() const {
    return m_operations;
}
void OAIBatchRead_request::setOperations(const QList<OAIBatchReadOperation> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIBatchRead_request::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIBatchRead_request::is_operations_Valid() const{
    return m_operations_isValid;
}

bool OAIBatchRead_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRead_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_operations_isValid && true;
}

} // namespace OpenAPI
