/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeAppliedSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeAppliedSchemaRequest::OAIUpgradeAppliedSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeAppliedSchemaRequest::OAIUpgradeAppliedSchemaRequest() {
    this->initializeModel();
}

OAIUpgradeAppliedSchemaRequest::~OAIUpgradeAppliedSchemaRequest() {}

void OAIUpgradeAppliedSchemaRequest::initializeModel() {

    m_published_schema_arn_isSet = false;
    m_published_schema_arn_isValid = false;

    m_directory_arn_isSet = false;
    m_directory_arn_isValid = false;

    m_dry_run_isSet = false;
    m_dry_run_isValid = false;
}

void OAIUpgradeAppliedSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeAppliedSchemaRequest::fromJsonObject(QJsonObject json) {

    m_published_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_published_schema_arn, json[QString("PublishedSchemaArn")]);
    m_published_schema_arn_isSet = !json[QString("PublishedSchemaArn")].isNull() && m_published_schema_arn_isValid;

    m_directory_arn_isValid = ::OpenAPI::fromJsonValue(m_directory_arn, json[QString("DirectoryArn")]);
    m_directory_arn_isSet = !json[QString("DirectoryArn")].isNull() && m_directory_arn_isValid;

    m_dry_run_isValid = ::OpenAPI::fromJsonValue(m_dry_run, json[QString("DryRun")]);
    m_dry_run_isSet = !json[QString("DryRun")].isNull() && m_dry_run_isValid;
}

QString OAIUpgradeAppliedSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeAppliedSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_published_schema_arn_isSet) {
        obj.insert(QString("PublishedSchemaArn"), ::OpenAPI::toJsonValue(m_published_schema_arn));
    }
    if (m_directory_arn_isSet) {
        obj.insert(QString("DirectoryArn"), ::OpenAPI::toJsonValue(m_directory_arn));
    }
    if (m_dry_run_isSet) {
        obj.insert(QString("DryRun"), ::OpenAPI::toJsonValue(m_dry_run));
    }
    return obj;
}

QString OAIUpgradeAppliedSchemaRequest::getPublishedSchemaArn() const {
    return m_published_schema_arn;
}
void OAIUpgradeAppliedSchemaRequest::setPublishedSchemaArn(const QString &published_schema_arn) {
    m_published_schema_arn = published_schema_arn;
    m_published_schema_arn_isSet = true;
}

bool OAIUpgradeAppliedSchemaRequest::is_published_schema_arn_Set() const{
    return m_published_schema_arn_isSet;
}

bool OAIUpgradeAppliedSchemaRequest::is_published_schema_arn_Valid() const{
    return m_published_schema_arn_isValid;
}

QString OAIUpgradeAppliedSchemaRequest::getDirectoryArn() const {
    return m_directory_arn;
}
void OAIUpgradeAppliedSchemaRequest::setDirectoryArn(const QString &directory_arn) {
    m_directory_arn = directory_arn;
    m_directory_arn_isSet = true;
}

bool OAIUpgradeAppliedSchemaRequest::is_directory_arn_Set() const{
    return m_directory_arn_isSet;
}

bool OAIUpgradeAppliedSchemaRequest::is_directory_arn_Valid() const{
    return m_directory_arn_isValid;
}

bool OAIUpgradeAppliedSchemaRequest::getDryRun() const {
    return m_dry_run;
}
void OAIUpgradeAppliedSchemaRequest::setDryRun(const bool &dry_run) {
    m_dry_run = dry_run;
    m_dry_run_isSet = true;
}

bool OAIUpgradeAppliedSchemaRequest::is_dry_run_Set() const{
    return m_dry_run_isSet;
}

bool OAIUpgradeAppliedSchemaRequest::is_dry_run_Valid() const{
    return m_dry_run_isValid;
}

bool OAIUpgradeAppliedSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_published_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dry_run_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeAppliedSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_published_schema_arn_isValid && m_directory_arn_isValid && true;
}

} // namespace OpenAPI
