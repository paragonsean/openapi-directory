/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppliedSchemaArnsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppliedSchemaArnsRequest::OAIListAppliedSchemaArnsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppliedSchemaArnsRequest::OAIListAppliedSchemaArnsRequest() {
    this->initializeModel();
}

OAIListAppliedSchemaArnsRequest::~OAIListAppliedSchemaArnsRequest() {}

void OAIListAppliedSchemaArnsRequest::initializeModel() {

    m_directory_arn_isSet = false;
    m_directory_arn_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListAppliedSchemaArnsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppliedSchemaArnsRequest::fromJsonObject(QJsonObject json) {

    m_directory_arn_isValid = ::OpenAPI::fromJsonValue(m_directory_arn, json[QString("DirectoryArn")]);
    m_directory_arn_isSet = !json[QString("DirectoryArn")].isNull() && m_directory_arn_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListAppliedSchemaArnsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppliedSchemaArnsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_arn_isSet) {
        obj.insert(QString("DirectoryArn"), ::OpenAPI::toJsonValue(m_directory_arn));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QString OAIListAppliedSchemaArnsRequest::getDirectoryArn() const {
    return m_directory_arn;
}
void OAIListAppliedSchemaArnsRequest::setDirectoryArn(const QString &directory_arn) {
    m_directory_arn = directory_arn;
    m_directory_arn_isSet = true;
}

bool OAIListAppliedSchemaArnsRequest::is_directory_arn_Set() const{
    return m_directory_arn_isSet;
}

bool OAIListAppliedSchemaArnsRequest::is_directory_arn_Valid() const{
    return m_directory_arn_isValid;
}

QString OAIListAppliedSchemaArnsRequest::getSchemaArn() const {
    return m_schema_arn;
}
void OAIListAppliedSchemaArnsRequest::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIListAppliedSchemaArnsRequest::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIListAppliedSchemaArnsRequest::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAIListAppliedSchemaArnsRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAppliedSchemaArnsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppliedSchemaArnsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppliedSchemaArnsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListAppliedSchemaArnsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAppliedSchemaArnsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAppliedSchemaArnsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAppliedSchemaArnsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListAppliedSchemaArnsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppliedSchemaArnsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_directory_arn_isValid && true;
}

} // namespace OpenAPI
