/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchReadOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchReadOperation::OAIBatchReadOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchReadOperation::OAIBatchReadOperation() {
    this->initializeModel();
}

OAIBatchReadOperation::~OAIBatchReadOperation() {}

void OAIBatchReadOperation::initializeModel() {

    m_list_object_attributes_isSet = false;
    m_list_object_attributes_isValid = false;

    m_list_object_children_isSet = false;
    m_list_object_children_isValid = false;

    m_list_attached_indices_isSet = false;
    m_list_attached_indices_isValid = false;

    m_list_object_parent_paths_isSet = false;
    m_list_object_parent_paths_isValid = false;

    m_get_object_information_isSet = false;
    m_get_object_information_isValid = false;

    m_get_object_attributes_isSet = false;
    m_get_object_attributes_isValid = false;

    m_list_object_parents_isSet = false;
    m_list_object_parents_isValid = false;

    m_list_object_policies_isSet = false;
    m_list_object_policies_isValid = false;

    m_list_policy_attachments_isSet = false;
    m_list_policy_attachments_isValid = false;

    m_lookup_policy_isSet = false;
    m_lookup_policy_isValid = false;

    m_list_index_isSet = false;
    m_list_index_isValid = false;

    m_list_outgoing_typed_links_isSet = false;
    m_list_outgoing_typed_links_isValid = false;

    m_list_incoming_typed_links_isSet = false;
    m_list_incoming_typed_links_isValid = false;

    m_get_link_attributes_isSet = false;
    m_get_link_attributes_isValid = false;
}

void OAIBatchReadOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchReadOperation::fromJsonObject(QJsonObject json) {

    m_list_object_attributes_isValid = ::OpenAPI::fromJsonValue(m_list_object_attributes, json[QString("ListObjectAttributes")]);
    m_list_object_attributes_isSet = !json[QString("ListObjectAttributes")].isNull() && m_list_object_attributes_isValid;

    m_list_object_children_isValid = ::OpenAPI::fromJsonValue(m_list_object_children, json[QString("ListObjectChildren")]);
    m_list_object_children_isSet = !json[QString("ListObjectChildren")].isNull() && m_list_object_children_isValid;

    m_list_attached_indices_isValid = ::OpenAPI::fromJsonValue(m_list_attached_indices, json[QString("ListAttachedIndices")]);
    m_list_attached_indices_isSet = !json[QString("ListAttachedIndices")].isNull() && m_list_attached_indices_isValid;

    m_list_object_parent_paths_isValid = ::OpenAPI::fromJsonValue(m_list_object_parent_paths, json[QString("ListObjectParentPaths")]);
    m_list_object_parent_paths_isSet = !json[QString("ListObjectParentPaths")].isNull() && m_list_object_parent_paths_isValid;

    m_get_object_information_isValid = ::OpenAPI::fromJsonValue(m_get_object_information, json[QString("GetObjectInformation")]);
    m_get_object_information_isSet = !json[QString("GetObjectInformation")].isNull() && m_get_object_information_isValid;

    m_get_object_attributes_isValid = ::OpenAPI::fromJsonValue(m_get_object_attributes, json[QString("GetObjectAttributes")]);
    m_get_object_attributes_isSet = !json[QString("GetObjectAttributes")].isNull() && m_get_object_attributes_isValid;

    m_list_object_parents_isValid = ::OpenAPI::fromJsonValue(m_list_object_parents, json[QString("ListObjectParents")]);
    m_list_object_parents_isSet = !json[QString("ListObjectParents")].isNull() && m_list_object_parents_isValid;

    m_list_object_policies_isValid = ::OpenAPI::fromJsonValue(m_list_object_policies, json[QString("ListObjectPolicies")]);
    m_list_object_policies_isSet = !json[QString("ListObjectPolicies")].isNull() && m_list_object_policies_isValid;

    m_list_policy_attachments_isValid = ::OpenAPI::fromJsonValue(m_list_policy_attachments, json[QString("ListPolicyAttachments")]);
    m_list_policy_attachments_isSet = !json[QString("ListPolicyAttachments")].isNull() && m_list_policy_attachments_isValid;

    m_lookup_policy_isValid = ::OpenAPI::fromJsonValue(m_lookup_policy, json[QString("LookupPolicy")]);
    m_lookup_policy_isSet = !json[QString("LookupPolicy")].isNull() && m_lookup_policy_isValid;

    m_list_index_isValid = ::OpenAPI::fromJsonValue(m_list_index, json[QString("ListIndex")]);
    m_list_index_isSet = !json[QString("ListIndex")].isNull() && m_list_index_isValid;

    m_list_outgoing_typed_links_isValid = ::OpenAPI::fromJsonValue(m_list_outgoing_typed_links, json[QString("ListOutgoingTypedLinks")]);
    m_list_outgoing_typed_links_isSet = !json[QString("ListOutgoingTypedLinks")].isNull() && m_list_outgoing_typed_links_isValid;

    m_list_incoming_typed_links_isValid = ::OpenAPI::fromJsonValue(m_list_incoming_typed_links, json[QString("ListIncomingTypedLinks")]);
    m_list_incoming_typed_links_isSet = !json[QString("ListIncomingTypedLinks")].isNull() && m_list_incoming_typed_links_isValid;

    m_get_link_attributes_isValid = ::OpenAPI::fromJsonValue(m_get_link_attributes, json[QString("GetLinkAttributes")]);
    m_get_link_attributes_isSet = !json[QString("GetLinkAttributes")].isNull() && m_get_link_attributes_isValid;
}

QString OAIBatchReadOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchReadOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_list_object_attributes.isSet()) {
        obj.insert(QString("ListObjectAttributes"), ::OpenAPI::toJsonValue(m_list_object_attributes));
    }
    if (m_list_object_children.isSet()) {
        obj.insert(QString("ListObjectChildren"), ::OpenAPI::toJsonValue(m_list_object_children));
    }
    if (m_list_attached_indices.isSet()) {
        obj.insert(QString("ListAttachedIndices"), ::OpenAPI::toJsonValue(m_list_attached_indices));
    }
    if (m_list_object_parent_paths.isSet()) {
        obj.insert(QString("ListObjectParentPaths"), ::OpenAPI::toJsonValue(m_list_object_parent_paths));
    }
    if (m_get_object_information.isSet()) {
        obj.insert(QString("GetObjectInformation"), ::OpenAPI::toJsonValue(m_get_object_information));
    }
    if (m_get_object_attributes.isSet()) {
        obj.insert(QString("GetObjectAttributes"), ::OpenAPI::toJsonValue(m_get_object_attributes));
    }
    if (m_list_object_parents.isSet()) {
        obj.insert(QString("ListObjectParents"), ::OpenAPI::toJsonValue(m_list_object_parents));
    }
    if (m_list_object_policies.isSet()) {
        obj.insert(QString("ListObjectPolicies"), ::OpenAPI::toJsonValue(m_list_object_policies));
    }
    if (m_list_policy_attachments.isSet()) {
        obj.insert(QString("ListPolicyAttachments"), ::OpenAPI::toJsonValue(m_list_policy_attachments));
    }
    if (m_lookup_policy.isSet()) {
        obj.insert(QString("LookupPolicy"), ::OpenAPI::toJsonValue(m_lookup_policy));
    }
    if (m_list_index.isSet()) {
        obj.insert(QString("ListIndex"), ::OpenAPI::toJsonValue(m_list_index));
    }
    if (m_list_outgoing_typed_links.isSet()) {
        obj.insert(QString("ListOutgoingTypedLinks"), ::OpenAPI::toJsonValue(m_list_outgoing_typed_links));
    }
    if (m_list_incoming_typed_links.isSet()) {
        obj.insert(QString("ListIncomingTypedLinks"), ::OpenAPI::toJsonValue(m_list_incoming_typed_links));
    }
    if (m_get_link_attributes.isSet()) {
        obj.insert(QString("GetLinkAttributes"), ::OpenAPI::toJsonValue(m_get_link_attributes));
    }
    return obj;
}

OAIBatchReadOperation_ListObjectAttributes OAIBatchReadOperation::getListObjectAttributes() const {
    return m_list_object_attributes;
}
void OAIBatchReadOperation::setListObjectAttributes(const OAIBatchReadOperation_ListObjectAttributes &list_object_attributes) {
    m_list_object_attributes = list_object_attributes;
    m_list_object_attributes_isSet = true;
}

bool OAIBatchReadOperation::is_list_object_attributes_Set() const{
    return m_list_object_attributes_isSet;
}

bool OAIBatchReadOperation::is_list_object_attributes_Valid() const{
    return m_list_object_attributes_isValid;
}

OAIBatchReadOperation_ListObjectChildren OAIBatchReadOperation::getListObjectChildren() const {
    return m_list_object_children;
}
void OAIBatchReadOperation::setListObjectChildren(const OAIBatchReadOperation_ListObjectChildren &list_object_children) {
    m_list_object_children = list_object_children;
    m_list_object_children_isSet = true;
}

bool OAIBatchReadOperation::is_list_object_children_Set() const{
    return m_list_object_children_isSet;
}

bool OAIBatchReadOperation::is_list_object_children_Valid() const{
    return m_list_object_children_isValid;
}

OAIBatchReadOperation_ListAttachedIndices OAIBatchReadOperation::getListAttachedIndices() const {
    return m_list_attached_indices;
}
void OAIBatchReadOperation::setListAttachedIndices(const OAIBatchReadOperation_ListAttachedIndices &list_attached_indices) {
    m_list_attached_indices = list_attached_indices;
    m_list_attached_indices_isSet = true;
}

bool OAIBatchReadOperation::is_list_attached_indices_Set() const{
    return m_list_attached_indices_isSet;
}

bool OAIBatchReadOperation::is_list_attached_indices_Valid() const{
    return m_list_attached_indices_isValid;
}

OAIBatchReadOperation_ListObjectParentPaths OAIBatchReadOperation::getListObjectParentPaths() const {
    return m_list_object_parent_paths;
}
void OAIBatchReadOperation::setListObjectParentPaths(const OAIBatchReadOperation_ListObjectParentPaths &list_object_parent_paths) {
    m_list_object_parent_paths = list_object_parent_paths;
    m_list_object_parent_paths_isSet = true;
}

bool OAIBatchReadOperation::is_list_object_parent_paths_Set() const{
    return m_list_object_parent_paths_isSet;
}

bool OAIBatchReadOperation::is_list_object_parent_paths_Valid() const{
    return m_list_object_parent_paths_isValid;
}

OAIBatchReadOperation_GetObjectInformation OAIBatchReadOperation::getGetObjectInformation() const {
    return m_get_object_information;
}
void OAIBatchReadOperation::setGetObjectInformation(const OAIBatchReadOperation_GetObjectInformation &get_object_information) {
    m_get_object_information = get_object_information;
    m_get_object_information_isSet = true;
}

bool OAIBatchReadOperation::is_get_object_information_Set() const{
    return m_get_object_information_isSet;
}

bool OAIBatchReadOperation::is_get_object_information_Valid() const{
    return m_get_object_information_isValid;
}

OAIBatchReadOperation_GetObjectAttributes OAIBatchReadOperation::getGetObjectAttributes() const {
    return m_get_object_attributes;
}
void OAIBatchReadOperation::setGetObjectAttributes(const OAIBatchReadOperation_GetObjectAttributes &get_object_attributes) {
    m_get_object_attributes = get_object_attributes;
    m_get_object_attributes_isSet = true;
}

bool OAIBatchReadOperation::is_get_object_attributes_Set() const{
    return m_get_object_attributes_isSet;
}

bool OAIBatchReadOperation::is_get_object_attributes_Valid() const{
    return m_get_object_attributes_isValid;
}

OAIBatchReadOperation_ListObjectParents OAIBatchReadOperation::getListObjectParents() const {
    return m_list_object_parents;
}
void OAIBatchReadOperation::setListObjectParents(const OAIBatchReadOperation_ListObjectParents &list_object_parents) {
    m_list_object_parents = list_object_parents;
    m_list_object_parents_isSet = true;
}

bool OAIBatchReadOperation::is_list_object_parents_Set() const{
    return m_list_object_parents_isSet;
}

bool OAIBatchReadOperation::is_list_object_parents_Valid() const{
    return m_list_object_parents_isValid;
}

OAIBatchReadOperation_ListObjectPolicies OAIBatchReadOperation::getListObjectPolicies() const {
    return m_list_object_policies;
}
void OAIBatchReadOperation::setListObjectPolicies(const OAIBatchReadOperation_ListObjectPolicies &list_object_policies) {
    m_list_object_policies = list_object_policies;
    m_list_object_policies_isSet = true;
}

bool OAIBatchReadOperation::is_list_object_policies_Set() const{
    return m_list_object_policies_isSet;
}

bool OAIBatchReadOperation::is_list_object_policies_Valid() const{
    return m_list_object_policies_isValid;
}

OAIBatchReadOperation_ListPolicyAttachments OAIBatchReadOperation::getListPolicyAttachments() const {
    return m_list_policy_attachments;
}
void OAIBatchReadOperation::setListPolicyAttachments(const OAIBatchReadOperation_ListPolicyAttachments &list_policy_attachments) {
    m_list_policy_attachments = list_policy_attachments;
    m_list_policy_attachments_isSet = true;
}

bool OAIBatchReadOperation::is_list_policy_attachments_Set() const{
    return m_list_policy_attachments_isSet;
}

bool OAIBatchReadOperation::is_list_policy_attachments_Valid() const{
    return m_list_policy_attachments_isValid;
}

OAIBatchReadOperation_LookupPolicy OAIBatchReadOperation::getLookupPolicy() const {
    return m_lookup_policy;
}
void OAIBatchReadOperation::setLookupPolicy(const OAIBatchReadOperation_LookupPolicy &lookup_policy) {
    m_lookup_policy = lookup_policy;
    m_lookup_policy_isSet = true;
}

bool OAIBatchReadOperation::is_lookup_policy_Set() const{
    return m_lookup_policy_isSet;
}

bool OAIBatchReadOperation::is_lookup_policy_Valid() const{
    return m_lookup_policy_isValid;
}

OAIBatchReadOperation_ListIndex OAIBatchReadOperation::getListIndex() const {
    return m_list_index;
}
void OAIBatchReadOperation::setListIndex(const OAIBatchReadOperation_ListIndex &list_index) {
    m_list_index = list_index;
    m_list_index_isSet = true;
}

bool OAIBatchReadOperation::is_list_index_Set() const{
    return m_list_index_isSet;
}

bool OAIBatchReadOperation::is_list_index_Valid() const{
    return m_list_index_isValid;
}

OAIBatchReadOperation_ListOutgoingTypedLinks OAIBatchReadOperation::getListOutgoingTypedLinks() const {
    return m_list_outgoing_typed_links;
}
void OAIBatchReadOperation::setListOutgoingTypedLinks(const OAIBatchReadOperation_ListOutgoingTypedLinks &list_outgoing_typed_links) {
    m_list_outgoing_typed_links = list_outgoing_typed_links;
    m_list_outgoing_typed_links_isSet = true;
}

bool OAIBatchReadOperation::is_list_outgoing_typed_links_Set() const{
    return m_list_outgoing_typed_links_isSet;
}

bool OAIBatchReadOperation::is_list_outgoing_typed_links_Valid() const{
    return m_list_outgoing_typed_links_isValid;
}

OAIBatchReadOperation_ListIncomingTypedLinks OAIBatchReadOperation::getListIncomingTypedLinks() const {
    return m_list_incoming_typed_links;
}
void OAIBatchReadOperation::setListIncomingTypedLinks(const OAIBatchReadOperation_ListIncomingTypedLinks &list_incoming_typed_links) {
    m_list_incoming_typed_links = list_incoming_typed_links;
    m_list_incoming_typed_links_isSet = true;
}

bool OAIBatchReadOperation::is_list_incoming_typed_links_Set() const{
    return m_list_incoming_typed_links_isSet;
}

bool OAIBatchReadOperation::is_list_incoming_typed_links_Valid() const{
    return m_list_incoming_typed_links_isValid;
}

OAIBatchReadOperation_GetLinkAttributes OAIBatchReadOperation::getGetLinkAttributes() const {
    return m_get_link_attributes;
}
void OAIBatchReadOperation::setGetLinkAttributes(const OAIBatchReadOperation_GetLinkAttributes &get_link_attributes) {
    m_get_link_attributes = get_link_attributes;
    m_get_link_attributes_isSet = true;
}

bool OAIBatchReadOperation::is_get_link_attributes_Set() const{
    return m_get_link_attributes_isSet;
}

bool OAIBatchReadOperation::is_get_link_attributes_Valid() const{
    return m_get_link_attributes_isValid;
}

bool OAIBatchReadOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_object_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_object_children.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_attached_indices.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_object_parent_paths.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_object_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_object_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_object_parents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_object_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_policy_attachments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_index.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_outgoing_typed_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_incoming_typed_links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_get_link_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchReadOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
