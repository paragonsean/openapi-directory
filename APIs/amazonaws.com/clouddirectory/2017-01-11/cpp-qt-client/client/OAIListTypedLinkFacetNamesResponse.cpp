/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListTypedLinkFacetNamesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListTypedLinkFacetNamesResponse::OAIListTypedLinkFacetNamesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListTypedLinkFacetNamesResponse::OAIListTypedLinkFacetNamesResponse() {
    this->initializeModel();
}

OAIListTypedLinkFacetNamesResponse::~OAIListTypedLinkFacetNamesResponse() {}

void OAIListTypedLinkFacetNamesResponse::initializeModel() {

    m_facet_names_isSet = false;
    m_facet_names_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListTypedLinkFacetNamesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListTypedLinkFacetNamesResponse::fromJsonObject(QJsonObject json) {

    m_facet_names_isValid = ::OpenAPI::fromJsonValue(m_facet_names, json[QString("FacetNames")]);
    m_facet_names_isSet = !json[QString("FacetNames")].isNull() && m_facet_names_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListTypedLinkFacetNamesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListTypedLinkFacetNamesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_facet_names.isSet()) {
        obj.insert(QString("FacetNames"), ::OpenAPI::toJsonValue(m_facet_names));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListTypedLinkFacetNamesResponse::getFacetNames() const {
    return m_facet_names;
}
void OAIListTypedLinkFacetNamesResponse::setFacetNames(const QList &facet_names) {
    m_facet_names = facet_names;
    m_facet_names_isSet = true;
}

bool OAIListTypedLinkFacetNamesResponse::is_facet_names_Set() const{
    return m_facet_names_isSet;
}

bool OAIListTypedLinkFacetNamesResponse::is_facet_names_Valid() const{
    return m_facet_names_isValid;
}

QString OAIListTypedLinkFacetNamesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListTypedLinkFacetNamesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListTypedLinkFacetNamesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListTypedLinkFacetNamesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListTypedLinkFacetNamesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facet_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListTypedLinkFacetNamesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
