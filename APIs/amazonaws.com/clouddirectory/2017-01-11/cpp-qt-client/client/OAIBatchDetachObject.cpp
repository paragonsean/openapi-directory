/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchDetachObject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchDetachObject::OAIBatchDetachObject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchDetachObject::OAIBatchDetachObject() {
    this->initializeModel();
}

OAIBatchDetachObject::~OAIBatchDetachObject() {}

void OAIBatchDetachObject::initializeModel() {

    m_parent_reference_isSet = false;
    m_parent_reference_isValid = false;

    m_link_name_isSet = false;
    m_link_name_isValid = false;

    m_batch_reference_name_isSet = false;
    m_batch_reference_name_isValid = false;
}

void OAIBatchDetachObject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchDetachObject::fromJsonObject(QJsonObject json) {

    m_parent_reference_isValid = ::OpenAPI::fromJsonValue(m_parent_reference, json[QString("ParentReference")]);
    m_parent_reference_isSet = !json[QString("ParentReference")].isNull() && m_parent_reference_isValid;

    m_link_name_isValid = ::OpenAPI::fromJsonValue(m_link_name, json[QString("LinkName")]);
    m_link_name_isSet = !json[QString("LinkName")].isNull() && m_link_name_isValid;

    m_batch_reference_name_isValid = ::OpenAPI::fromJsonValue(m_batch_reference_name, json[QString("BatchReferenceName")]);
    m_batch_reference_name_isSet = !json[QString("BatchReferenceName")].isNull() && m_batch_reference_name_isValid;
}

QString OAIBatchDetachObject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchDetachObject::asJsonObject() const {
    QJsonObject obj;
    if (m_parent_reference.isSet()) {
        obj.insert(QString("ParentReference"), ::OpenAPI::toJsonValue(m_parent_reference));
    }
    if (m_link_name_isSet) {
        obj.insert(QString("LinkName"), ::OpenAPI::toJsonValue(m_link_name));
    }
    if (m_batch_reference_name_isSet) {
        obj.insert(QString("BatchReferenceName"), ::OpenAPI::toJsonValue(m_batch_reference_name));
    }
    return obj;
}

OAIBatchDetachObject_ParentReference OAIBatchDetachObject::getParentReference() const {
    return m_parent_reference;
}
void OAIBatchDetachObject::setParentReference(const OAIBatchDetachObject_ParentReference &parent_reference) {
    m_parent_reference = parent_reference;
    m_parent_reference_isSet = true;
}

bool OAIBatchDetachObject::is_parent_reference_Set() const{
    return m_parent_reference_isSet;
}

bool OAIBatchDetachObject::is_parent_reference_Valid() const{
    return m_parent_reference_isValid;
}

QString OAIBatchDetachObject::getLinkName() const {
    return m_link_name;
}
void OAIBatchDetachObject::setLinkName(const QString &link_name) {
    m_link_name = link_name;
    m_link_name_isSet = true;
}

bool OAIBatchDetachObject::is_link_name_Set() const{
    return m_link_name_isSet;
}

bool OAIBatchDetachObject::is_link_name_Valid() const{
    return m_link_name_isValid;
}

QString OAIBatchDetachObject::getBatchReferenceName() const {
    return m_batch_reference_name;
}
void OAIBatchDetachObject::setBatchReferenceName(const QString &batch_reference_name) {
    m_batch_reference_name = batch_reference_name;
    m_batch_reference_name_isSet = true;
}

bool OAIBatchDetachObject::is_batch_reference_name_Set() const{
    return m_batch_reference_name_isSet;
}

bool OAIBatchDetachObject::is_batch_reference_name_Valid() const{
    return m_batch_reference_name_isValid;
}

bool OAIBatchDetachObject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parent_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_reference_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchDetachObject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parent_reference_isValid && m_link_name_isValid && true;
}

} // namespace OpenAPI
