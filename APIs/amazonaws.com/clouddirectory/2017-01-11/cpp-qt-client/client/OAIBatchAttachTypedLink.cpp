/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchAttachTypedLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchAttachTypedLink::OAIBatchAttachTypedLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchAttachTypedLink::OAIBatchAttachTypedLink() {
    this->initializeModel();
}

OAIBatchAttachTypedLink::~OAIBatchAttachTypedLink() {}

void OAIBatchAttachTypedLink::initializeModel() {

    m_source_object_reference_isSet = false;
    m_source_object_reference_isValid = false;

    m_target_object_reference_isSet = false;
    m_target_object_reference_isValid = false;

    m_typed_link_facet_isSet = false;
    m_typed_link_facet_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIBatchAttachTypedLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchAttachTypedLink::fromJsonObject(QJsonObject json) {

    m_source_object_reference_isValid = ::OpenAPI::fromJsonValue(m_source_object_reference, json[QString("SourceObjectReference")]);
    m_source_object_reference_isSet = !json[QString("SourceObjectReference")].isNull() && m_source_object_reference_isValid;

    m_target_object_reference_isValid = ::OpenAPI::fromJsonValue(m_target_object_reference, json[QString("TargetObjectReference")]);
    m_target_object_reference_isSet = !json[QString("TargetObjectReference")].isNull() && m_target_object_reference_isValid;

    m_typed_link_facet_isValid = ::OpenAPI::fromJsonValue(m_typed_link_facet, json[QString("TypedLinkFacet")]);
    m_typed_link_facet_isSet = !json[QString("TypedLinkFacet")].isNull() && m_typed_link_facet_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;
}

QString OAIBatchAttachTypedLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchAttachTypedLink::asJsonObject() const {
    QJsonObject obj;
    if (m_source_object_reference.isSet()) {
        obj.insert(QString("SourceObjectReference"), ::OpenAPI::toJsonValue(m_source_object_reference));
    }
    if (m_target_object_reference.isSet()) {
        obj.insert(QString("TargetObjectReference"), ::OpenAPI::toJsonValue(m_target_object_reference));
    }
    if (m_typed_link_facet.isSet()) {
        obj.insert(QString("TypedLinkFacet"), ::OpenAPI::toJsonValue(m_typed_link_facet));
    }
    if (m_attributes.isSet()) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    return obj;
}

OAIDetachTypedLink_request_TypedLinkSpecifier_SourceObjectReference OAIBatchAttachTypedLink::getSourceObjectReference() const {
    return m_source_object_reference;
}
void OAIBatchAttachTypedLink::setSourceObjectReference(const OAIDetachTypedLink_request_TypedLinkSpecifier_SourceObjectReference &source_object_reference) {
    m_source_object_reference = source_object_reference;
    m_source_object_reference_isSet = true;
}

bool OAIBatchAttachTypedLink::is_source_object_reference_Set() const{
    return m_source_object_reference_isSet;
}

bool OAIBatchAttachTypedLink::is_source_object_reference_Valid() const{
    return m_source_object_reference_isValid;
}

OAIDetachTypedLink_request_TypedLinkSpecifier_TargetObjectReference OAIBatchAttachTypedLink::getTargetObjectReference() const {
    return m_target_object_reference;
}
void OAIBatchAttachTypedLink::setTargetObjectReference(const OAIDetachTypedLink_request_TypedLinkSpecifier_TargetObjectReference &target_object_reference) {
    m_target_object_reference = target_object_reference;
    m_target_object_reference_isSet = true;
}

bool OAIBatchAttachTypedLink::is_target_object_reference_Set() const{
    return m_target_object_reference_isSet;
}

bool OAIBatchAttachTypedLink::is_target_object_reference_Valid() const{
    return m_target_object_reference_isValid;
}

OAIDetachTypedLink_request_TypedLinkSpecifier_TypedLinkFacet OAIBatchAttachTypedLink::getTypedLinkFacet() const {
    return m_typed_link_facet;
}
void OAIBatchAttachTypedLink::setTypedLinkFacet(const OAIDetachTypedLink_request_TypedLinkSpecifier_TypedLinkFacet &typed_link_facet) {
    m_typed_link_facet = typed_link_facet;
    m_typed_link_facet_isSet = true;
}

bool OAIBatchAttachTypedLink::is_typed_link_facet_Set() const{
    return m_typed_link_facet_isSet;
}

bool OAIBatchAttachTypedLink::is_typed_link_facet_Valid() const{
    return m_typed_link_facet_isValid;
}

QList OAIBatchAttachTypedLink::getAttributes() const {
    return m_attributes;
}
void OAIBatchAttachTypedLink::setAttributes(const QList &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAIBatchAttachTypedLink::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIBatchAttachTypedLink::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIBatchAttachTypedLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_typed_link_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchAttachTypedLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_object_reference_isValid && m_target_object_reference_isValid && m_typed_link_facet_isValid && m_attributes_isValid && true;
}

} // namespace OpenAPI
