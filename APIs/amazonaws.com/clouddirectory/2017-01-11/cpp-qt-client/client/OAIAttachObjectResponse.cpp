/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachObjectResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachObjectResponse::OAIAttachObjectResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachObjectResponse::OAIAttachObjectResponse() {
    this->initializeModel();
}

OAIAttachObjectResponse::~OAIAttachObjectResponse() {}

void OAIAttachObjectResponse::initializeModel() {

    m_attached_object_identifier_isSet = false;
    m_attached_object_identifier_isValid = false;
}

void OAIAttachObjectResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachObjectResponse::fromJsonObject(QJsonObject json) {

    m_attached_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_attached_object_identifier, json[QString("AttachedObjectIdentifier")]);
    m_attached_object_identifier_isSet = !json[QString("AttachedObjectIdentifier")].isNull() && m_attached_object_identifier_isValid;
}

QString OAIAttachObjectResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachObjectResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_attached_object_identifier_isSet) {
        obj.insert(QString("AttachedObjectIdentifier"), ::OpenAPI::toJsonValue(m_attached_object_identifier));
    }
    return obj;
}

QString OAIAttachObjectResponse::getAttachedObjectIdentifier() const {
    return m_attached_object_identifier;
}
void OAIAttachObjectResponse::setAttachedObjectIdentifier(const QString &attached_object_identifier) {
    m_attached_object_identifier = attached_object_identifier;
    m_attached_object_identifier_isSet = true;
}

bool OAIAttachObjectResponse::is_attached_object_identifier_Set() const{
    return m_attached_object_identifier_isSet;
}

bool OAIAttachObjectResponse::is_attached_object_identifier_Valid() const{
    return m_attached_object_identifier_isValid;
}

bool OAIAttachObjectResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attached_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachObjectResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
