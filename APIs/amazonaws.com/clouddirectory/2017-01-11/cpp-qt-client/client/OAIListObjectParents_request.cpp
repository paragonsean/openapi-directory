/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListObjectParents_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListObjectParents_request::OAIListObjectParents_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListObjectParents_request::OAIListObjectParents_request() {
    this->initializeModel();
}

OAIListObjectParents_request::~OAIListObjectParents_request() {}

void OAIListObjectParents_request::initializeModel() {

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_include_all_links_to_each_parent_isSet = false;
    m_include_all_links_to_each_parent_isValid = false;
}

void OAIListObjectParents_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListObjectParents_request::fromJsonObject(QJsonObject json) {

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_include_all_links_to_each_parent_isValid = ::OpenAPI::fromJsonValue(m_include_all_links_to_each_parent, json[QString("IncludeAllLinksToEachParent")]);
    m_include_all_links_to_each_parent_isSet = !json[QString("IncludeAllLinksToEachParent")].isNull() && m_include_all_links_to_each_parent_isValid;
}

QString OAIListObjectParents_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListObjectParents_request::asJsonObject() const {
    QJsonObject obj;
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_include_all_links_to_each_parent_isSet) {
        obj.insert(QString("IncludeAllLinksToEachParent"), ::OpenAPI::toJsonValue(m_include_all_links_to_each_parent));
    }
    return obj;
}

OAIAddFacetToObject_request_ObjectReference OAIListObjectParents_request::getObjectReference() const {
    return m_object_reference;
}
void OAIListObjectParents_request::setObjectReference(const OAIAddFacetToObject_request_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIListObjectParents_request::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIListObjectParents_request::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

QString OAIListObjectParents_request::getNextToken() const {
    return m_next_token;
}
void OAIListObjectParents_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListObjectParents_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListObjectParents_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListObjectParents_request::getMaxResults() const {
    return m_max_results;
}
void OAIListObjectParents_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListObjectParents_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListObjectParents_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListObjectParents_request::isIncludeAllLinksToEachParent() const {
    return m_include_all_links_to_each_parent;
}
void OAIListObjectParents_request::setIncludeAllLinksToEachParent(const bool &include_all_links_to_each_parent) {
    m_include_all_links_to_each_parent = include_all_links_to_each_parent;
    m_include_all_links_to_each_parent_isSet = true;
}

bool OAIListObjectParents_request::is_include_all_links_to_each_parent_Set() const{
    return m_include_all_links_to_each_parent_isSet;
}

bool OAIListObjectParents_request::is_include_all_links_to_each_parent_Valid() const{
    return m_include_all_links_to_each_parent_isValid;
}

bool OAIListObjectParents_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_all_links_to_each_parent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListObjectParents_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_reference_isValid && true;
}

} // namespace OpenAPI
