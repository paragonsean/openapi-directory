/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchListIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchListIndex::OAIBatchListIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchListIndex::OAIBatchListIndex() {
    this->initializeModel();
}

OAIBatchListIndex::~OAIBatchListIndex() {}

void OAIBatchListIndex::initializeModel() {

    m_ranges_on_indexed_values_isSet = false;
    m_ranges_on_indexed_values_isValid = false;

    m_index_reference_isSet = false;
    m_index_reference_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIBatchListIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchListIndex::fromJsonObject(QJsonObject json) {

    m_ranges_on_indexed_values_isValid = ::OpenAPI::fromJsonValue(m_ranges_on_indexed_values, json[QString("RangesOnIndexedValues")]);
    m_ranges_on_indexed_values_isSet = !json[QString("RangesOnIndexedValues")].isNull() && m_ranges_on_indexed_values_isValid;

    m_index_reference_isValid = ::OpenAPI::fromJsonValue(m_index_reference, json[QString("IndexReference")]);
    m_index_reference_isSet = !json[QString("IndexReference")].isNull() && m_index_reference_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIBatchListIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchListIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_ranges_on_indexed_values.isSet()) {
        obj.insert(QString("RangesOnIndexedValues"), ::OpenAPI::toJsonValue(m_ranges_on_indexed_values));
    }
    if (m_index_reference.isSet()) {
        obj.insert(QString("IndexReference"), ::OpenAPI::toJsonValue(m_index_reference));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIBatchListIndex::getRangesOnIndexedValues() const {
    return m_ranges_on_indexed_values;
}
void OAIBatchListIndex::setRangesOnIndexedValues(const QList &ranges_on_indexed_values) {
    m_ranges_on_indexed_values = ranges_on_indexed_values;
    m_ranges_on_indexed_values_isSet = true;
}

bool OAIBatchListIndex::is_ranges_on_indexed_values_Set() const{
    return m_ranges_on_indexed_values_isSet;
}

bool OAIBatchListIndex::is_ranges_on_indexed_values_Valid() const{
    return m_ranges_on_indexed_values_isValid;
}

OAIBatchListIndex_IndexReference OAIBatchListIndex::getIndexReference() const {
    return m_index_reference;
}
void OAIBatchListIndex::setIndexReference(const OAIBatchListIndex_IndexReference &index_reference) {
    m_index_reference = index_reference;
    m_index_reference_isSet = true;
}

bool OAIBatchListIndex::is_index_reference_Set() const{
    return m_index_reference_isSet;
}

bool OAIBatchListIndex::is_index_reference_Valid() const{
    return m_index_reference_isValid;
}

qint32 OAIBatchListIndex::getMaxResults() const {
    return m_max_results;
}
void OAIBatchListIndex::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIBatchListIndex::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIBatchListIndex::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIBatchListIndex::getNextToken() const {
    return m_next_token;
}
void OAIBatchListIndex::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIBatchListIndex::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIBatchListIndex::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIBatchListIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ranges_on_indexed_values.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchListIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_index_reference_isValid && true;
}

} // namespace OpenAPI
