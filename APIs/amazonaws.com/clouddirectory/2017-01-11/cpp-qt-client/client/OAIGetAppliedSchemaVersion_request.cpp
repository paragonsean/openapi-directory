/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAppliedSchemaVersion_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAppliedSchemaVersion_request::OAIGetAppliedSchemaVersion_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAppliedSchemaVersion_request::OAIGetAppliedSchemaVersion_request() {
    this->initializeModel();
}

OAIGetAppliedSchemaVersion_request::~OAIGetAppliedSchemaVersion_request() {}

void OAIGetAppliedSchemaVersion_request::initializeModel() {

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;
}

void OAIGetAppliedSchemaVersion_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAppliedSchemaVersion_request::fromJsonObject(QJsonObject json) {

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;
}

QString OAIGetAppliedSchemaVersion_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAppliedSchemaVersion_request::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    return obj;
}

QString OAIGetAppliedSchemaVersion_request::getSchemaArn() const {
    return m_schema_arn;
}
void OAIGetAppliedSchemaVersion_request::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIGetAppliedSchemaVersion_request::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIGetAppliedSchemaVersion_request::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

bool OAIGetAppliedSchemaVersion_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAppliedSchemaVersion_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_schema_arn_isValid && true;
}

} // namespace OpenAPI
