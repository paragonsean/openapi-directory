/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyToPath.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyToPath::OAIPolicyToPath(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyToPath::OAIPolicyToPath() {
    this->initializeModel();
}

OAIPolicyToPath::~OAIPolicyToPath() {}

void OAIPolicyToPath::initializeModel() {

    m_path_isSet = false;
    m_path_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;
}

void OAIPolicyToPath::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyToPath::fromJsonObject(QJsonObject json) {

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("Path")]);
    m_path_isSet = !json[QString("Path")].isNull() && m_path_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("Policies")]);
    m_policies_isSet = !json[QString("Policies")].isNull() && m_policies_isValid;
}

QString OAIPolicyToPath::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyToPath::asJsonObject() const {
    QJsonObject obj;
    if (m_path_isSet) {
        obj.insert(QString("Path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("Policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    return obj;
}

QString OAIPolicyToPath::getPath() const {
    return m_path;
}
void OAIPolicyToPath::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIPolicyToPath::is_path_Set() const{
    return m_path_isSet;
}

bool OAIPolicyToPath::is_path_Valid() const{
    return m_path_isValid;
}

QList OAIPolicyToPath::getPolicies() const {
    return m_policies;
}
void OAIPolicyToPath::setPolicies(const QList &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIPolicyToPath::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIPolicyToPath::is_policies_Valid() const{
    return m_policies_isValid;
}

bool OAIPolicyToPath::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyToPath::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
