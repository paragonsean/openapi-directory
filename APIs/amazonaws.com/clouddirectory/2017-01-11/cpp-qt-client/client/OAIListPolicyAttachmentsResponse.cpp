/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPolicyAttachmentsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPolicyAttachmentsResponse::OAIListPolicyAttachmentsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPolicyAttachmentsResponse::OAIListPolicyAttachmentsResponse() {
    this->initializeModel();
}

OAIListPolicyAttachmentsResponse::~OAIListPolicyAttachmentsResponse() {}

void OAIListPolicyAttachmentsResponse::initializeModel() {

    m_object_identifiers_isSet = false;
    m_object_identifiers_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListPolicyAttachmentsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPolicyAttachmentsResponse::fromJsonObject(QJsonObject json) {

    m_object_identifiers_isValid = ::OpenAPI::fromJsonValue(m_object_identifiers, json[QString("ObjectIdentifiers")]);
    m_object_identifiers_isSet = !json[QString("ObjectIdentifiers")].isNull() && m_object_identifiers_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListPolicyAttachmentsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPolicyAttachmentsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_object_identifiers.isSet()) {
        obj.insert(QString("ObjectIdentifiers"), ::OpenAPI::toJsonValue(m_object_identifiers));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListPolicyAttachmentsResponse::getObjectIdentifiers() const {
    return m_object_identifiers;
}
void OAIListPolicyAttachmentsResponse::setObjectIdentifiers(const QList &object_identifiers) {
    m_object_identifiers = object_identifiers;
    m_object_identifiers_isSet = true;
}

bool OAIListPolicyAttachmentsResponse::is_object_identifiers_Set() const{
    return m_object_identifiers_isSet;
}

bool OAIListPolicyAttachmentsResponse::is_object_identifiers_Valid() const{
    return m_object_identifiers_isValid;
}

QString OAIListPolicyAttachmentsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListPolicyAttachmentsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListPolicyAttachmentsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListPolicyAttachmentsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListPolicyAttachmentsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_identifiers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPolicyAttachmentsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
