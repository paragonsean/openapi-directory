/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAttachedIndicesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAttachedIndicesRequest::OAIListAttachedIndicesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAttachedIndicesRequest::OAIListAttachedIndicesRequest() {
    this->initializeModel();
}

OAIListAttachedIndicesRequest::~OAIListAttachedIndicesRequest() {}

void OAIListAttachedIndicesRequest::initializeModel() {

    m_target_reference_isSet = false;
    m_target_reference_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIListAttachedIndicesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAttachedIndicesRequest::fromJsonObject(QJsonObject json) {

    m_target_reference_isValid = ::OpenAPI::fromJsonValue(m_target_reference, json[QString("TargetReference")]);
    m_target_reference_isSet = !json[QString("TargetReference")].isNull() && m_target_reference_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;
}

QString OAIListAttachedIndicesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAttachedIndicesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_target_reference.isSet()) {
        obj.insert(QString("TargetReference"), ::OpenAPI::toJsonValue(m_target_reference));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

OAIBatchListAttachedIndices_TargetReference OAIListAttachedIndicesRequest::getTargetReference() const {
    return m_target_reference;
}
void OAIListAttachedIndicesRequest::setTargetReference(const OAIBatchListAttachedIndices_TargetReference &target_reference) {
    m_target_reference = target_reference;
    m_target_reference_isSet = true;
}

bool OAIListAttachedIndicesRequest::is_target_reference_Set() const{
    return m_target_reference_isSet;
}

bool OAIListAttachedIndicesRequest::is_target_reference_Valid() const{
    return m_target_reference_isValid;
}

QString OAIListAttachedIndicesRequest::getNextToken() const {
    return m_next_token;
}
void OAIListAttachedIndicesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAttachedIndicesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAttachedIndicesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListAttachedIndicesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListAttachedIndicesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListAttachedIndicesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListAttachedIndicesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIListAttachedIndicesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAttachedIndicesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_reference_isValid && true;
}

} // namespace OpenAPI
