/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetObjectInformationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetObjectInformationResponse::OAIGetObjectInformationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetObjectInformationResponse::OAIGetObjectInformationResponse() {
    this->initializeModel();
}

OAIGetObjectInformationResponse::~OAIGetObjectInformationResponse() {}

void OAIGetObjectInformationResponse::initializeModel() {

    m_schema_facets_isSet = false;
    m_schema_facets_isValid = false;

    m_object_identifier_isSet = false;
    m_object_identifier_isValid = false;
}

void OAIGetObjectInformationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetObjectInformationResponse::fromJsonObject(QJsonObject json) {

    m_schema_facets_isValid = ::OpenAPI::fromJsonValue(m_schema_facets, json[QString("SchemaFacets")]);
    m_schema_facets_isSet = !json[QString("SchemaFacets")].isNull() && m_schema_facets_isValid;

    m_object_identifier_isValid = ::OpenAPI::fromJsonValue(m_object_identifier, json[QString("ObjectIdentifier")]);
    m_object_identifier_isSet = !json[QString("ObjectIdentifier")].isNull() && m_object_identifier_isValid;
}

QString OAIGetObjectInformationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetObjectInformationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_schema_facets.isSet()) {
        obj.insert(QString("SchemaFacets"), ::OpenAPI::toJsonValue(m_schema_facets));
    }
    if (m_object_identifier_isSet) {
        obj.insert(QString("ObjectIdentifier"), ::OpenAPI::toJsonValue(m_object_identifier));
    }
    return obj;
}

QList OAIGetObjectInformationResponse::getSchemaFacets() const {
    return m_schema_facets;
}
void OAIGetObjectInformationResponse::setSchemaFacets(const QList &schema_facets) {
    m_schema_facets = schema_facets;
    m_schema_facets_isSet = true;
}

bool OAIGetObjectInformationResponse::is_schema_facets_Set() const{
    return m_schema_facets_isSet;
}

bool OAIGetObjectInformationResponse::is_schema_facets_Valid() const{
    return m_schema_facets_isValid;
}

QString OAIGetObjectInformationResponse::getObjectIdentifier() const {
    return m_object_identifier;
}
void OAIGetObjectInformationResponse::setObjectIdentifier(const QString &object_identifier) {
    m_object_identifier = object_identifier;
    m_object_identifier_isSet = true;
}

bool OAIGetObjectInformationResponse::is_object_identifier_Set() const{
    return m_object_identifier_isSet;
}

bool OAIGetObjectInformationResponse::is_object_identifier_Valid() const{
    return m_object_identifier_isValid;
}

bool OAIGetObjectInformationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schema_facets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetObjectInformationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
