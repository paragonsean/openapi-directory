/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetObjectAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetObjectAttributes::OAIBatchGetObjectAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetObjectAttributes::OAIBatchGetObjectAttributes() {
    this->initializeModel();
}

OAIBatchGetObjectAttributes::~OAIBatchGetObjectAttributes() {}

void OAIBatchGetObjectAttributes::initializeModel() {

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;

    m_schema_facet_isSet = false;
    m_schema_facet_isValid = false;

    m_attribute_names_isSet = false;
    m_attribute_names_isValid = false;
}

void OAIBatchGetObjectAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetObjectAttributes::fromJsonObject(QJsonObject json) {

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;

    m_schema_facet_isValid = ::OpenAPI::fromJsonValue(m_schema_facet, json[QString("SchemaFacet")]);
    m_schema_facet_isSet = !json[QString("SchemaFacet")].isNull() && m_schema_facet_isValid;

    m_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_attribute_names, json[QString("AttributeNames")]);
    m_attribute_names_isSet = !json[QString("AttributeNames")].isNull() && m_attribute_names_isValid;
}

QString OAIBatchGetObjectAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetObjectAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    if (m_schema_facet.isSet()) {
        obj.insert(QString("SchemaFacet"), ::OpenAPI::toJsonValue(m_schema_facet));
    }
    if (m_attribute_names.isSet()) {
        obj.insert(QString("AttributeNames"), ::OpenAPI::toJsonValue(m_attribute_names));
    }
    return obj;
}

OAIBatchGetObjectAttributes_ObjectReference OAIBatchGetObjectAttributes::getObjectReference() const {
    return m_object_reference;
}
void OAIBatchGetObjectAttributes::setObjectReference(const OAIBatchGetObjectAttributes_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIBatchGetObjectAttributes::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIBatchGetObjectAttributes::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

OAIBatchGetObjectAttributes_SchemaFacet OAIBatchGetObjectAttributes::getSchemaFacet() const {
    return m_schema_facet;
}
void OAIBatchGetObjectAttributes::setSchemaFacet(const OAIBatchGetObjectAttributes_SchemaFacet &schema_facet) {
    m_schema_facet = schema_facet;
    m_schema_facet_isSet = true;
}

bool OAIBatchGetObjectAttributes::is_schema_facet_Set() const{
    return m_schema_facet_isSet;
}

bool OAIBatchGetObjectAttributes::is_schema_facet_Valid() const{
    return m_schema_facet_isValid;
}

QList OAIBatchGetObjectAttributes::getAttributeNames() const {
    return m_attribute_names;
}
void OAIBatchGetObjectAttributes::setAttributeNames(const QList &attribute_names) {
    m_attribute_names = attribute_names;
    m_attribute_names_isSet = true;
}

bool OAIBatchGetObjectAttributes::is_attribute_names_Set() const{
    return m_attribute_names_isSet;
}

bool OAIBatchGetObjectAttributes::is_attribute_names_Valid() const{
    return m_attribute_names_isValid;
}

bool OAIBatchGetObjectAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_facet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetObjectAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_reference_isValid && m_schema_facet_isValid && m_attribute_names_isValid && true;
}

} // namespace OpenAPI
