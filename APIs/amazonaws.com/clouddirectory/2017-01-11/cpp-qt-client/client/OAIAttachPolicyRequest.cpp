/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachPolicyRequest::OAIAttachPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachPolicyRequest::OAIAttachPolicyRequest() {
    this->initializeModel();
}

OAIAttachPolicyRequest::~OAIAttachPolicyRequest() {}

void OAIAttachPolicyRequest::initializeModel() {

    m_policy_reference_isSet = false;
    m_policy_reference_isValid = false;

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;
}

void OAIAttachPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachPolicyRequest::fromJsonObject(QJsonObject json) {

    m_policy_reference_isValid = ::OpenAPI::fromJsonValue(m_policy_reference, json[QString("PolicyReference")]);
    m_policy_reference_isSet = !json[QString("PolicyReference")].isNull() && m_policy_reference_isValid;

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;
}

QString OAIAttachPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_policy_reference.isSet()) {
        obj.insert(QString("PolicyReference"), ::OpenAPI::toJsonValue(m_policy_reference));
    }
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    return obj;
}

OAIAttachPolicyRequest_PolicyReference OAIAttachPolicyRequest::getPolicyReference() const {
    return m_policy_reference;
}
void OAIAttachPolicyRequest::setPolicyReference(const OAIAttachPolicyRequest_PolicyReference &policy_reference) {
    m_policy_reference = policy_reference;
    m_policy_reference_isSet = true;
}

bool OAIAttachPolicyRequest::is_policy_reference_Set() const{
    return m_policy_reference_isSet;
}

bool OAIAttachPolicyRequest::is_policy_reference_Valid() const{
    return m_policy_reference_isValid;
}

OAIAttachPolicyRequest_ObjectReference OAIAttachPolicyRequest::getObjectReference() const {
    return m_object_reference;
}
void OAIAttachPolicyRequest::setObjectReference(const OAIAttachPolicyRequest_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIAttachPolicyRequest::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIAttachPolicyRequest::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

bool OAIAttachPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_policy_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_reference_isValid && m_object_reference_isValid && true;
}

} // namespace OpenAPI
