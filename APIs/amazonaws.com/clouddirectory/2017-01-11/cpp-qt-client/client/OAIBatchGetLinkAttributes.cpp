/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchGetLinkAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchGetLinkAttributes::OAIBatchGetLinkAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchGetLinkAttributes::OAIBatchGetLinkAttributes() {
    this->initializeModel();
}

OAIBatchGetLinkAttributes::~OAIBatchGetLinkAttributes() {}

void OAIBatchGetLinkAttributes::initializeModel() {

    m_typed_link_specifier_isSet = false;
    m_typed_link_specifier_isValid = false;

    m_attribute_names_isSet = false;
    m_attribute_names_isValid = false;
}

void OAIBatchGetLinkAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchGetLinkAttributes::fromJsonObject(QJsonObject json) {

    m_typed_link_specifier_isValid = ::OpenAPI::fromJsonValue(m_typed_link_specifier, json[QString("TypedLinkSpecifier")]);
    m_typed_link_specifier_isSet = !json[QString("TypedLinkSpecifier")].isNull() && m_typed_link_specifier_isValid;

    m_attribute_names_isValid = ::OpenAPI::fromJsonValue(m_attribute_names, json[QString("AttributeNames")]);
    m_attribute_names_isSet = !json[QString("AttributeNames")].isNull() && m_attribute_names_isValid;
}

QString OAIBatchGetLinkAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchGetLinkAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_typed_link_specifier.isSet()) {
        obj.insert(QString("TypedLinkSpecifier"), ::OpenAPI::toJsonValue(m_typed_link_specifier));
    }
    if (m_attribute_names.isSet()) {
        obj.insert(QString("AttributeNames"), ::OpenAPI::toJsonValue(m_attribute_names));
    }
    return obj;
}

OAIBatchGetLinkAttributes_TypedLinkSpecifier OAIBatchGetLinkAttributes::getTypedLinkSpecifier() const {
    return m_typed_link_specifier;
}
void OAIBatchGetLinkAttributes::setTypedLinkSpecifier(const OAIBatchGetLinkAttributes_TypedLinkSpecifier &typed_link_specifier) {
    m_typed_link_specifier = typed_link_specifier;
    m_typed_link_specifier_isSet = true;
}

bool OAIBatchGetLinkAttributes::is_typed_link_specifier_Set() const{
    return m_typed_link_specifier_isSet;
}

bool OAIBatchGetLinkAttributes::is_typed_link_specifier_Valid() const{
    return m_typed_link_specifier_isValid;
}

QList OAIBatchGetLinkAttributes::getAttributeNames() const {
    return m_attribute_names;
}
void OAIBatchGetLinkAttributes::setAttributeNames(const QList &attribute_names) {
    m_attribute_names = attribute_names;
    m_attribute_names_isSet = true;
}

bool OAIBatchGetLinkAttributes::is_attribute_names_Set() const{
    return m_attribute_names_isSet;
}

bool OAIBatchGetLinkAttributes::is_attribute_names_Valid() const{
    return m_attribute_names_isValid;
}

bool OAIBatchGetLinkAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_typed_link_specifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_names.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchGetLinkAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_typed_link_specifier_isValid && m_attribute_names_isValid && true;
}

} // namespace OpenAPI
