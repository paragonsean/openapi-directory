/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchWriteOperationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchWriteOperationResponse::OAIBatchWriteOperationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchWriteOperationResponse::OAIBatchWriteOperationResponse() {
    this->initializeModel();
}

OAIBatchWriteOperationResponse::~OAIBatchWriteOperationResponse() {}

void OAIBatchWriteOperationResponse::initializeModel() {

    m_create_object_isSet = false;
    m_create_object_isValid = false;

    m_attach_object_isSet = false;
    m_attach_object_isValid = false;

    m_detach_object_isSet = false;
    m_detach_object_isValid = false;

    m_update_object_attributes_isSet = false;
    m_update_object_attributes_isValid = false;

    m_delete_object_isSet = false;
    m_delete_object_isValid = false;

    m_add_facet_to_object_isSet = false;
    m_add_facet_to_object_isValid = false;

    m_remove_facet_from_object_isSet = false;
    m_remove_facet_from_object_isValid = false;

    m_attach_policy_isSet = false;
    m_attach_policy_isValid = false;

    m_detach_policy_isSet = false;
    m_detach_policy_isValid = false;

    m_create_index_isSet = false;
    m_create_index_isValid = false;

    m_attach_to_index_isSet = false;
    m_attach_to_index_isValid = false;

    m_detach_from_index_isSet = false;
    m_detach_from_index_isValid = false;

    m_attach_typed_link_isSet = false;
    m_attach_typed_link_isValid = false;

    m_detach_typed_link_isSet = false;
    m_detach_typed_link_isValid = false;

    m_update_link_attributes_isSet = false;
    m_update_link_attributes_isValid = false;
}

void OAIBatchWriteOperationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchWriteOperationResponse::fromJsonObject(QJsonObject json) {

    m_create_object_isValid = ::OpenAPI::fromJsonValue(m_create_object, json[QString("CreateObject")]);
    m_create_object_isSet = !json[QString("CreateObject")].isNull() && m_create_object_isValid;

    m_attach_object_isValid = ::OpenAPI::fromJsonValue(m_attach_object, json[QString("AttachObject")]);
    m_attach_object_isSet = !json[QString("AttachObject")].isNull() && m_attach_object_isValid;

    m_detach_object_isValid = ::OpenAPI::fromJsonValue(m_detach_object, json[QString("DetachObject")]);
    m_detach_object_isSet = !json[QString("DetachObject")].isNull() && m_detach_object_isValid;

    m_update_object_attributes_isValid = ::OpenAPI::fromJsonValue(m_update_object_attributes, json[QString("UpdateObjectAttributes")]);
    m_update_object_attributes_isSet = !json[QString("UpdateObjectAttributes")].isNull() && m_update_object_attributes_isValid;

    m_delete_object_isValid = ::OpenAPI::fromJsonValue(m_delete_object, json[QString("DeleteObject")]);
    m_delete_object_isSet = !json[QString("DeleteObject")].isNull() && m_delete_object_isValid;

    m_add_facet_to_object_isValid = ::OpenAPI::fromJsonValue(m_add_facet_to_object, json[QString("AddFacetToObject")]);
    m_add_facet_to_object_isSet = !json[QString("AddFacetToObject")].isNull() && m_add_facet_to_object_isValid;

    m_remove_facet_from_object_isValid = ::OpenAPI::fromJsonValue(m_remove_facet_from_object, json[QString("RemoveFacetFromObject")]);
    m_remove_facet_from_object_isSet = !json[QString("RemoveFacetFromObject")].isNull() && m_remove_facet_from_object_isValid;

    m_attach_policy_isValid = ::OpenAPI::fromJsonValue(m_attach_policy, json[QString("AttachPolicy")]);
    m_attach_policy_isSet = !json[QString("AttachPolicy")].isNull() && m_attach_policy_isValid;

    m_detach_policy_isValid = ::OpenAPI::fromJsonValue(m_detach_policy, json[QString("DetachPolicy")]);
    m_detach_policy_isSet = !json[QString("DetachPolicy")].isNull() && m_detach_policy_isValid;

    m_create_index_isValid = ::OpenAPI::fromJsonValue(m_create_index, json[QString("CreateIndex")]);
    m_create_index_isSet = !json[QString("CreateIndex")].isNull() && m_create_index_isValid;

    m_attach_to_index_isValid = ::OpenAPI::fromJsonValue(m_attach_to_index, json[QString("AttachToIndex")]);
    m_attach_to_index_isSet = !json[QString("AttachToIndex")].isNull() && m_attach_to_index_isValid;

    m_detach_from_index_isValid = ::OpenAPI::fromJsonValue(m_detach_from_index, json[QString("DetachFromIndex")]);
    m_detach_from_index_isSet = !json[QString("DetachFromIndex")].isNull() && m_detach_from_index_isValid;

    m_attach_typed_link_isValid = ::OpenAPI::fromJsonValue(m_attach_typed_link, json[QString("AttachTypedLink")]);
    m_attach_typed_link_isSet = !json[QString("AttachTypedLink")].isNull() && m_attach_typed_link_isValid;

    m_detach_typed_link_isValid = ::OpenAPI::fromJsonValue(m_detach_typed_link, json[QString("DetachTypedLink")]);
    m_detach_typed_link_isSet = !json[QString("DetachTypedLink")].isNull() && m_detach_typed_link_isValid;

    m_update_link_attributes_isValid = ::OpenAPI::fromJsonValue(m_update_link_attributes, json[QString("UpdateLinkAttributes")]);
    m_update_link_attributes_isSet = !json[QString("UpdateLinkAttributes")].isNull() && m_update_link_attributes_isValid;
}

QString OAIBatchWriteOperationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchWriteOperationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_create_object.isSet()) {
        obj.insert(QString("CreateObject"), ::OpenAPI::toJsonValue(m_create_object));
    }
    if (m_attach_object.isSet()) {
        obj.insert(QString("AttachObject"), ::OpenAPI::toJsonValue(m_attach_object));
    }
    if (m_detach_object.isSet()) {
        obj.insert(QString("DetachObject"), ::OpenAPI::toJsonValue(m_detach_object));
    }
    if (m_update_object_attributes.isSet()) {
        obj.insert(QString("UpdateObjectAttributes"), ::OpenAPI::toJsonValue(m_update_object_attributes));
    }
    if (m_delete_object.isSet()) {
        obj.insert(QString("DeleteObject"), ::OpenAPI::toJsonValue(m_delete_object));
    }
    if (m_add_facet_to_object.isSet()) {
        obj.insert(QString("AddFacetToObject"), ::OpenAPI::toJsonValue(m_add_facet_to_object));
    }
    if (m_remove_facet_from_object.isSet()) {
        obj.insert(QString("RemoveFacetFromObject"), ::OpenAPI::toJsonValue(m_remove_facet_from_object));
    }
    if (m_attach_policy.isSet()) {
        obj.insert(QString("AttachPolicy"), ::OpenAPI::toJsonValue(m_attach_policy));
    }
    if (m_detach_policy.isSet()) {
        obj.insert(QString("DetachPolicy"), ::OpenAPI::toJsonValue(m_detach_policy));
    }
    if (m_create_index.isSet()) {
        obj.insert(QString("CreateIndex"), ::OpenAPI::toJsonValue(m_create_index));
    }
    if (m_attach_to_index.isSet()) {
        obj.insert(QString("AttachToIndex"), ::OpenAPI::toJsonValue(m_attach_to_index));
    }
    if (m_detach_from_index.isSet()) {
        obj.insert(QString("DetachFromIndex"), ::OpenAPI::toJsonValue(m_detach_from_index));
    }
    if (m_attach_typed_link.isSet()) {
        obj.insert(QString("AttachTypedLink"), ::OpenAPI::toJsonValue(m_attach_typed_link));
    }
    if (m_detach_typed_link.isSet()) {
        obj.insert(QString("DetachTypedLink"), ::OpenAPI::toJsonValue(m_detach_typed_link));
    }
    if (m_update_link_attributes.isSet()) {
        obj.insert(QString("UpdateLinkAttributes"), ::OpenAPI::toJsonValue(m_update_link_attributes));
    }
    return obj;
}

OAIBatchWriteOperationResponse_CreateObject OAIBatchWriteOperationResponse::getCreateObject() const {
    return m_create_object;
}
void OAIBatchWriteOperationResponse::setCreateObject(const OAIBatchWriteOperationResponse_CreateObject &create_object) {
    m_create_object = create_object;
    m_create_object_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_create_object_Set() const{
    return m_create_object_isSet;
}

bool OAIBatchWriteOperationResponse::is_create_object_Valid() const{
    return m_create_object_isValid;
}

OAIBatchWriteOperationResponse_AttachObject OAIBatchWriteOperationResponse::getAttachObject() const {
    return m_attach_object;
}
void OAIBatchWriteOperationResponse::setAttachObject(const OAIBatchWriteOperationResponse_AttachObject &attach_object) {
    m_attach_object = attach_object;
    m_attach_object_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_attach_object_Set() const{
    return m_attach_object_isSet;
}

bool OAIBatchWriteOperationResponse::is_attach_object_Valid() const{
    return m_attach_object_isValid;
}

OAIBatchWriteOperationResponse_DetachObject OAIBatchWriteOperationResponse::getDetachObject() const {
    return m_detach_object;
}
void OAIBatchWriteOperationResponse::setDetachObject(const OAIBatchWriteOperationResponse_DetachObject &detach_object) {
    m_detach_object = detach_object;
    m_detach_object_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_detach_object_Set() const{
    return m_detach_object_isSet;
}

bool OAIBatchWriteOperationResponse::is_detach_object_Valid() const{
    return m_detach_object_isValid;
}

OAIBatchWriteOperationResponse_UpdateObjectAttributes OAIBatchWriteOperationResponse::getUpdateObjectAttributes() const {
    return m_update_object_attributes;
}
void OAIBatchWriteOperationResponse::setUpdateObjectAttributes(const OAIBatchWriteOperationResponse_UpdateObjectAttributes &update_object_attributes) {
    m_update_object_attributes = update_object_attributes;
    m_update_object_attributes_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_update_object_attributes_Set() const{
    return m_update_object_attributes_isSet;
}

bool OAIBatchWriteOperationResponse::is_update_object_attributes_Valid() const{
    return m_update_object_attributes_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getDeleteObject() const {
    return m_delete_object;
}
void OAIBatchWriteOperationResponse::setDeleteObject(const OAIObject &delete_object) {
    m_delete_object = delete_object;
    m_delete_object_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_delete_object_Set() const{
    return m_delete_object_isSet;
}

bool OAIBatchWriteOperationResponse::is_delete_object_Valid() const{
    return m_delete_object_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getAddFacetToObject() const {
    return m_add_facet_to_object;
}
void OAIBatchWriteOperationResponse::setAddFacetToObject(const OAIObject &add_facet_to_object) {
    m_add_facet_to_object = add_facet_to_object;
    m_add_facet_to_object_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_add_facet_to_object_Set() const{
    return m_add_facet_to_object_isSet;
}

bool OAIBatchWriteOperationResponse::is_add_facet_to_object_Valid() const{
    return m_add_facet_to_object_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getRemoveFacetFromObject() const {
    return m_remove_facet_from_object;
}
void OAIBatchWriteOperationResponse::setRemoveFacetFromObject(const OAIObject &remove_facet_from_object) {
    m_remove_facet_from_object = remove_facet_from_object;
    m_remove_facet_from_object_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_remove_facet_from_object_Set() const{
    return m_remove_facet_from_object_isSet;
}

bool OAIBatchWriteOperationResponse::is_remove_facet_from_object_Valid() const{
    return m_remove_facet_from_object_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getAttachPolicy() const {
    return m_attach_policy;
}
void OAIBatchWriteOperationResponse::setAttachPolicy(const OAIObject &attach_policy) {
    m_attach_policy = attach_policy;
    m_attach_policy_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_attach_policy_Set() const{
    return m_attach_policy_isSet;
}

bool OAIBatchWriteOperationResponse::is_attach_policy_Valid() const{
    return m_attach_policy_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getDetachPolicy() const {
    return m_detach_policy;
}
void OAIBatchWriteOperationResponse::setDetachPolicy(const OAIObject &detach_policy) {
    m_detach_policy = detach_policy;
    m_detach_policy_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_detach_policy_Set() const{
    return m_detach_policy_isSet;
}

bool OAIBatchWriteOperationResponse::is_detach_policy_Valid() const{
    return m_detach_policy_isValid;
}

OAIBatchWriteOperationResponse_CreateIndex OAIBatchWriteOperationResponse::getCreateIndex() const {
    return m_create_index;
}
void OAIBatchWriteOperationResponse::setCreateIndex(const OAIBatchWriteOperationResponse_CreateIndex &create_index) {
    m_create_index = create_index;
    m_create_index_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_create_index_Set() const{
    return m_create_index_isSet;
}

bool OAIBatchWriteOperationResponse::is_create_index_Valid() const{
    return m_create_index_isValid;
}

OAIBatchWriteOperationResponse_AttachToIndex OAIBatchWriteOperationResponse::getAttachToIndex() const {
    return m_attach_to_index;
}
void OAIBatchWriteOperationResponse::setAttachToIndex(const OAIBatchWriteOperationResponse_AttachToIndex &attach_to_index) {
    m_attach_to_index = attach_to_index;
    m_attach_to_index_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_attach_to_index_Set() const{
    return m_attach_to_index_isSet;
}

bool OAIBatchWriteOperationResponse::is_attach_to_index_Valid() const{
    return m_attach_to_index_isValid;
}

OAIBatchWriteOperationResponse_DetachFromIndex OAIBatchWriteOperationResponse::getDetachFromIndex() const {
    return m_detach_from_index;
}
void OAIBatchWriteOperationResponse::setDetachFromIndex(const OAIBatchWriteOperationResponse_DetachFromIndex &detach_from_index) {
    m_detach_from_index = detach_from_index;
    m_detach_from_index_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_detach_from_index_Set() const{
    return m_detach_from_index_isSet;
}

bool OAIBatchWriteOperationResponse::is_detach_from_index_Valid() const{
    return m_detach_from_index_isValid;
}

OAIBatchWriteOperationResponse_AttachTypedLink OAIBatchWriteOperationResponse::getAttachTypedLink() const {
    return m_attach_typed_link;
}
void OAIBatchWriteOperationResponse::setAttachTypedLink(const OAIBatchWriteOperationResponse_AttachTypedLink &attach_typed_link) {
    m_attach_typed_link = attach_typed_link;
    m_attach_typed_link_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_attach_typed_link_Set() const{
    return m_attach_typed_link_isSet;
}

bool OAIBatchWriteOperationResponse::is_attach_typed_link_Valid() const{
    return m_attach_typed_link_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getDetachTypedLink() const {
    return m_detach_typed_link;
}
void OAIBatchWriteOperationResponse::setDetachTypedLink(const OAIObject &detach_typed_link) {
    m_detach_typed_link = detach_typed_link;
    m_detach_typed_link_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_detach_typed_link_Set() const{
    return m_detach_typed_link_isSet;
}

bool OAIBatchWriteOperationResponse::is_detach_typed_link_Valid() const{
    return m_detach_typed_link_isValid;
}

OAIObject OAIBatchWriteOperationResponse::getUpdateLinkAttributes() const {
    return m_update_link_attributes;
}
void OAIBatchWriteOperationResponse::setUpdateLinkAttributes(const OAIObject &update_link_attributes) {
    m_update_link_attributes = update_link_attributes;
    m_update_link_attributes_isSet = true;
}

bool OAIBatchWriteOperationResponse::is_update_link_attributes_Set() const{
    return m_update_link_attributes_isSet;
}

bool OAIBatchWriteOperationResponse::is_update_link_attributes_Valid() const{
    return m_update_link_attributes_isValid;
}

bool OAIBatchWriteOperationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detach_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_object_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_facet_to_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_facet_from_object.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detach_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_index.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_to_index.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detach_from_index.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_attach_typed_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detach_typed_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_link_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchWriteOperationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
