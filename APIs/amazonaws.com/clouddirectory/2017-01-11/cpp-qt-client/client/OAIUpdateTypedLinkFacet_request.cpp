/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTypedLinkFacet_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTypedLinkFacet_request::OAIUpdateTypedLinkFacet_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTypedLinkFacet_request::OAIUpdateTypedLinkFacet_request() {
    this->initializeModel();
}

OAIUpdateTypedLinkFacet_request::~OAIUpdateTypedLinkFacet_request() {}

void OAIUpdateTypedLinkFacet_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_attribute_updates_isSet = false;
    m_attribute_updates_isValid = false;

    m_identity_attribute_order_isSet = false;
    m_identity_attribute_order_isValid = false;
}

void OAIUpdateTypedLinkFacet_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTypedLinkFacet_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_attribute_updates_isValid = ::OpenAPI::fromJsonValue(m_attribute_updates, json[QString("AttributeUpdates")]);
    m_attribute_updates_isSet = !json[QString("AttributeUpdates")].isNull() && m_attribute_updates_isValid;

    m_identity_attribute_order_isValid = ::OpenAPI::fromJsonValue(m_identity_attribute_order, json[QString("IdentityAttributeOrder")]);
    m_identity_attribute_order_isSet = !json[QString("IdentityAttributeOrder")].isNull() && m_identity_attribute_order_isValid;
}

QString OAIUpdateTypedLinkFacet_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTypedLinkFacet_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_attribute_updates.size() > 0) {
        obj.insert(QString("AttributeUpdates"), ::OpenAPI::toJsonValue(m_attribute_updates));
    }
    if (m_identity_attribute_order.size() > 0) {
        obj.insert(QString("IdentityAttributeOrder"), ::OpenAPI::toJsonValue(m_identity_attribute_order));
    }
    return obj;
}

QString OAIUpdateTypedLinkFacet_request::getName() const {
    return m_name;
}
void OAIUpdateTypedLinkFacet_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateTypedLinkFacet_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateTypedLinkFacet_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAITypedLinkFacetAttributeUpdate> OAIUpdateTypedLinkFacet_request::getAttributeUpdates() const {
    return m_attribute_updates;
}
void OAIUpdateTypedLinkFacet_request::setAttributeUpdates(const QList<OAITypedLinkFacetAttributeUpdate> &attribute_updates) {
    m_attribute_updates = attribute_updates;
    m_attribute_updates_isSet = true;
}

bool OAIUpdateTypedLinkFacet_request::is_attribute_updates_Set() const{
    return m_attribute_updates_isSet;
}

bool OAIUpdateTypedLinkFacet_request::is_attribute_updates_Valid() const{
    return m_attribute_updates_isValid;
}

QList<QString> OAIUpdateTypedLinkFacet_request::getIdentityAttributeOrder() const {
    return m_identity_attribute_order;
}
void OAIUpdateTypedLinkFacet_request::setIdentityAttributeOrder(const QList<QString> &identity_attribute_order) {
    m_identity_attribute_order = identity_attribute_order;
    m_identity_attribute_order_isSet = true;
}

bool OAIUpdateTypedLinkFacet_request::is_identity_attribute_order_Set() const{
    return m_identity_attribute_order_isSet;
}

bool OAIUpdateTypedLinkFacet_request::is_identity_attribute_order_Valid() const{
    return m_identity_attribute_order_isValid;
}

bool OAIUpdateTypedLinkFacet_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_attribute_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTypedLinkFacet_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_attribute_updates_isValid && m_identity_attribute_order_isValid && true;
}

} // namespace OpenAPI
