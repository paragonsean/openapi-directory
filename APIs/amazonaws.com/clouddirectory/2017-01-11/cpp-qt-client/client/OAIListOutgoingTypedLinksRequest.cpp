/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOutgoingTypedLinksRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOutgoingTypedLinksRequest::OAIListOutgoingTypedLinksRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOutgoingTypedLinksRequest::OAIListOutgoingTypedLinksRequest() {
    this->initializeModel();
}

OAIListOutgoingTypedLinksRequest::~OAIListOutgoingTypedLinksRequest() {}

void OAIListOutgoingTypedLinksRequest::initializeModel() {

    m_object_reference_isSet = false;
    m_object_reference_isValid = false;

    m_filter_attribute_ranges_isSet = false;
    m_filter_attribute_ranges_isValid = false;

    m_filter_typed_link_isSet = false;
    m_filter_typed_link_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_consistency_level_isSet = false;
    m_consistency_level_isValid = false;
}

void OAIListOutgoingTypedLinksRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOutgoingTypedLinksRequest::fromJsonObject(QJsonObject json) {

    m_object_reference_isValid = ::OpenAPI::fromJsonValue(m_object_reference, json[QString("ObjectReference")]);
    m_object_reference_isSet = !json[QString("ObjectReference")].isNull() && m_object_reference_isValid;

    m_filter_attribute_ranges_isValid = ::OpenAPI::fromJsonValue(m_filter_attribute_ranges, json[QString("FilterAttributeRanges")]);
    m_filter_attribute_ranges_isSet = !json[QString("FilterAttributeRanges")].isNull() && m_filter_attribute_ranges_isValid;

    m_filter_typed_link_isValid = ::OpenAPI::fromJsonValue(m_filter_typed_link, json[QString("FilterTypedLink")]);
    m_filter_typed_link_isSet = !json[QString("FilterTypedLink")].isNull() && m_filter_typed_link_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_consistency_level_isValid = ::OpenAPI::fromJsonValue(m_consistency_level, json[QString("ConsistencyLevel")]);
    m_consistency_level_isSet = !json[QString("ConsistencyLevel")].isNull() && m_consistency_level_isValid;
}

QString OAIListOutgoingTypedLinksRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOutgoingTypedLinksRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_object_reference.isSet()) {
        obj.insert(QString("ObjectReference"), ::OpenAPI::toJsonValue(m_object_reference));
    }
    if (m_filter_attribute_ranges.isSet()) {
        obj.insert(QString("FilterAttributeRanges"), ::OpenAPI::toJsonValue(m_filter_attribute_ranges));
    }
    if (m_filter_typed_link.isSet()) {
        obj.insert(QString("FilterTypedLink"), ::OpenAPI::toJsonValue(m_filter_typed_link));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_consistency_level.isSet()) {
        obj.insert(QString("ConsistencyLevel"), ::OpenAPI::toJsonValue(m_consistency_level));
    }
    return obj;
}

OAIListOutgoingTypedLinksRequest_ObjectReference OAIListOutgoingTypedLinksRequest::getObjectReference() const {
    return m_object_reference;
}
void OAIListOutgoingTypedLinksRequest::setObjectReference(const OAIListOutgoingTypedLinksRequest_ObjectReference &object_reference) {
    m_object_reference = object_reference;
    m_object_reference_isSet = true;
}

bool OAIListOutgoingTypedLinksRequest::is_object_reference_Set() const{
    return m_object_reference_isSet;
}

bool OAIListOutgoingTypedLinksRequest::is_object_reference_Valid() const{
    return m_object_reference_isValid;
}

QList OAIListOutgoingTypedLinksRequest::getFilterAttributeRanges() const {
    return m_filter_attribute_ranges;
}
void OAIListOutgoingTypedLinksRequest::setFilterAttributeRanges(const QList &filter_attribute_ranges) {
    m_filter_attribute_ranges = filter_attribute_ranges;
    m_filter_attribute_ranges_isSet = true;
}

bool OAIListOutgoingTypedLinksRequest::is_filter_attribute_ranges_Set() const{
    return m_filter_attribute_ranges_isSet;
}

bool OAIListOutgoingTypedLinksRequest::is_filter_attribute_ranges_Valid() const{
    return m_filter_attribute_ranges_isValid;
}

OAIBatchListOutgoingTypedLinks_FilterTypedLink OAIListOutgoingTypedLinksRequest::getFilterTypedLink() const {
    return m_filter_typed_link;
}
void OAIListOutgoingTypedLinksRequest::setFilterTypedLink(const OAIBatchListOutgoingTypedLinks_FilterTypedLink &filter_typed_link) {
    m_filter_typed_link = filter_typed_link;
    m_filter_typed_link_isSet = true;
}

bool OAIListOutgoingTypedLinksRequest::is_filter_typed_link_Set() const{
    return m_filter_typed_link_isSet;
}

bool OAIListOutgoingTypedLinksRequest::is_filter_typed_link_Valid() const{
    return m_filter_typed_link_isValid;
}

QString OAIListOutgoingTypedLinksRequest::getNextToken() const {
    return m_next_token;
}
void OAIListOutgoingTypedLinksRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListOutgoingTypedLinksRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListOutgoingTypedLinksRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIListOutgoingTypedLinksRequest::getMaxResults() const {
    return m_max_results;
}
void OAIListOutgoingTypedLinksRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIListOutgoingTypedLinksRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIListOutgoingTypedLinksRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

OAIConsistencyLevel OAIListOutgoingTypedLinksRequest::getConsistencyLevel() const {
    return m_consistency_level;
}
void OAIListOutgoingTypedLinksRequest::setConsistencyLevel(const OAIConsistencyLevel &consistency_level) {
    m_consistency_level = consistency_level;
    m_consistency_level_isSet = true;
}

bool OAIListOutgoingTypedLinksRequest::is_consistency_level_Set() const{
    return m_consistency_level_isSet;
}

bool OAIListOutgoingTypedLinksRequest::is_consistency_level_Valid() const{
    return m_consistency_level_isValid;
}

bool OAIListOutgoingTypedLinksRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_attribute_ranges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_typed_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consistency_level.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOutgoingTypedLinksRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_reference_isValid && true;
}

} // namespace OpenAPI
