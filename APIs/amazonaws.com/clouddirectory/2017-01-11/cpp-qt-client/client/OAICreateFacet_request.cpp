/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateFacet_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateFacet_request::OAICreateFacet_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateFacet_request::OAICreateFacet_request() {
    this->initializeModel();
}

OAICreateFacet_request::~OAICreateFacet_request() {}

void OAICreateFacet_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_facet_style_isSet = false;
    m_facet_style_isValid = false;
}

void OAICreateFacet_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateFacet_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("Attributes")]);
    m_attributes_isSet = !json[QString("Attributes")].isNull() && m_attributes_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("ObjectType")]);
    m_object_type_isSet = !json[QString("ObjectType")].isNull() && m_object_type_isValid;

    m_facet_style_isValid = ::OpenAPI::fromJsonValue(m_facet_style, json[QString("FacetStyle")]);
    m_facet_style_isSet = !json[QString("FacetStyle")].isNull() && m_facet_style_isValid;
}

QString OAICreateFacet_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateFacet_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_attributes.size() > 0) {
        obj.insert(QString("Attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("ObjectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_facet_style_isSet) {
        obj.insert(QString("FacetStyle"), ::OpenAPI::toJsonValue(m_facet_style));
    }
    return obj;
}

QString OAICreateFacet_request::getName() const {
    return m_name;
}
void OAICreateFacet_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateFacet_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateFacet_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIFacetAttribute> OAICreateFacet_request::getAttributes() const {
    return m_attributes;
}
void OAICreateFacet_request::setAttributes(const QList<OAIFacetAttribute> &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICreateFacet_request::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICreateFacet_request::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAICreateFacet_request::getObjectType() const {
    return m_object_type;
}
void OAICreateFacet_request::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAICreateFacet_request::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAICreateFacet_request::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAICreateFacet_request::getFacetStyle() const {
    return m_facet_style;
}
void OAICreateFacet_request::setFacetStyle(const QString &facet_style) {
    m_facet_style = facet_style;
    m_facet_style_isSet = true;
}

bool OAICreateFacet_request::is_facet_style_Set() const{
    return m_facet_style_isSet;
}

bool OAICreateFacet_request::is_facet_style_Valid() const{
    return m_facet_style_isValid;
}

bool OAICreateFacet_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facet_style_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateFacet_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
