/**
 * Amazon CloudDirectory
 * <fullname>Amazon Cloud Directory</fullname> <p>Amazon Cloud Directory is a component of the AWS Directory Service that simplifies the development and management of cloud-scale web, mobile, and IoT applications. This guide describes the Cloud Directory operations that you can call programmatically and includes detailed information on data types and errors. For information about Cloud Directory features, see <a href=\"https://aws.amazon.com/directoryservice/\">AWS Directory Service</a> and the <a href=\"https://docs.aws.amazon.com/clouddirectory/latest/developerguide/what_is_cloud_directory.html\">Amazon Cloud Directory Developer Guide</a>.</p>
 *
 * The version of the OpenAPI document: 2017-01-11
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDirectoriesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDirectoriesResponse::OAIListDirectoriesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDirectoriesResponse::OAIListDirectoriesResponse() {
    this->initializeModel();
}

OAIListDirectoriesResponse::~OAIListDirectoriesResponse() {}

void OAIListDirectoriesResponse::initializeModel() {

    m_directories_isSet = false;
    m_directories_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListDirectoriesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDirectoriesResponse::fromJsonObject(QJsonObject json) {

    m_directories_isValid = ::OpenAPI::fromJsonValue(m_directories, json[QString("Directories")]);
    m_directories_isSet = !json[QString("Directories")].isNull() && m_directories_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListDirectoriesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDirectoriesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_directories.isSet()) {
        obj.insert(QString("Directories"), ::OpenAPI::toJsonValue(m_directories));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListDirectoriesResponse::getDirectories() const {
    return m_directories;
}
void OAIListDirectoriesResponse::setDirectories(const QList &directories) {
    m_directories = directories;
    m_directories_isSet = true;
}

bool OAIListDirectoriesResponse::is_directories_Set() const{
    return m_directories_isSet;
}

bool OAIListDirectoriesResponse::is_directories_Valid() const{
    return m_directories_isValid;
}

QString OAIListDirectoriesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListDirectoriesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListDirectoriesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListDirectoriesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListDirectoriesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directories.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDirectoriesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_directories_isValid && true;
}

} // namespace OpenAPI
