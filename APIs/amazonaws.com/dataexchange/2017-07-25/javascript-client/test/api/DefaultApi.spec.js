/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsDataExchange);
  }
}(this, function(expect, AwsDataExchange) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsDataExchange.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('cancelJob', function() {
      it('should call cancelJob successfully', function(done) {
        //uncomment below and update the code to test cancelJob
        //instance.cancelJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataSet', function() {
      it('should call createDataSet successfully', function(done) {
        //uncomment below and update the code to test createDataSet
        //instance.createDataSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createEventAction', function() {
      it('should call createEventAction successfully', function(done) {
        //uncomment below and update the code to test createEventAction
        //instance.createEventAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createJob', function() {
      it('should call createJob successfully', function(done) {
        //uncomment below and update the code to test createJob
        //instance.createJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRevision', function() {
      it('should call createRevision successfully', function(done) {
        //uncomment below and update the code to test createRevision
        //instance.createRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAsset', function() {
      it('should call deleteAsset successfully', function(done) {
        //uncomment below and update the code to test deleteAsset
        //instance.deleteAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataSet', function() {
      it('should call deleteDataSet successfully', function(done) {
        //uncomment below and update the code to test deleteDataSet
        //instance.deleteDataSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventAction', function() {
      it('should call deleteEventAction successfully', function(done) {
        //uncomment below and update the code to test deleteEventAction
        //instance.deleteEventAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRevision', function() {
      it('should call deleteRevision successfully', function(done) {
        //uncomment below and update the code to test deleteRevision
        //instance.deleteRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAsset', function() {
      it('should call getAsset successfully', function(done) {
        //uncomment below and update the code to test getAsset
        //instance.getAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataSet', function() {
      it('should call getDataSet successfully', function(done) {
        //uncomment below and update the code to test getDataSet
        //instance.getDataSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventAction', function() {
      it('should call getEventAction successfully', function(done) {
        //uncomment below and update the code to test getEventAction
        //instance.getEventAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getJob', function() {
      it('should call getJob successfully', function(done) {
        //uncomment below and update the code to test getJob
        //instance.getJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRevision', function() {
      it('should call getRevision successfully', function(done) {
        //uncomment below and update the code to test getRevision
        //instance.getRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataSetRevisions', function() {
      it('should call listDataSetRevisions successfully', function(done) {
        //uncomment below and update the code to test listDataSetRevisions
        //instance.listDataSetRevisions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataSets', function() {
      it('should call listDataSets successfully', function(done) {
        //uncomment below and update the code to test listDataSets
        //instance.listDataSets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listEventActions', function() {
      it('should call listEventActions successfully', function(done) {
        //uncomment below and update the code to test listEventActions
        //instance.listEventActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listJobs', function() {
      it('should call listJobs successfully', function(done) {
        //uncomment below and update the code to test listJobs
        //instance.listJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRevisionAssets', function() {
      it('should call listRevisionAssets successfully', function(done) {
        //uncomment below and update the code to test listRevisionAssets
        //instance.listRevisionAssets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeRevision', function() {
      it('should call revokeRevision successfully', function(done) {
        //uncomment below and update the code to test revokeRevision
        //instance.revokeRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendApiAsset', function() {
      it('should call sendApiAsset successfully', function(done) {
        //uncomment below and update the code to test sendApiAsset
        //instance.sendApiAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startJob', function() {
      it('should call startJob successfully', function(done) {
        //uncomment below and update the code to test startJob
        //instance.startJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAsset', function() {
      it('should call updateAsset successfully', function(done) {
        //uncomment below and update the code to test updateAsset
        //instance.updateAsset(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataSet', function() {
      it('should call updateDataSet successfully', function(done) {
        //uncomment below and update the code to test updateDataSet
        //instance.updateDataSet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateEventAction', function() {
      it('should call updateEventAction successfully', function(done) {
        //uncomment below and update the code to test updateEventAction
        //instance.updateEventAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRevision', function() {
      it('should call updateRevision successfully', function(done) {
        //uncomment below and update the code to test updateRevision
        //instance.updateRevision(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
