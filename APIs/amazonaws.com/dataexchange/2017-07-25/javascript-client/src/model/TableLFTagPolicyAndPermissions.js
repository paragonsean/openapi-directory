/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TableLFTagPolicyAndPermissions model module.
 * @module model/TableLFTagPolicyAndPermissions
 * @version 2017-07-25
 */
class TableLFTagPolicyAndPermissions {
    /**
     * Constructs a new <code>TableLFTagPolicyAndPermissions</code>.
     * The LF-tag policy and permissions that apply to table resources.
     * @alias module:model/TableLFTagPolicyAndPermissions
     * @param expression {Array} 
     * @param permissions {Array} 
     */
    constructor(expression, permissions) { 
        
        TableLFTagPolicyAndPermissions.initialize(this, expression, permissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression, permissions) { 
        obj['Expression'] = expression;
        obj['Permissions'] = permissions;
    }

    /**
     * Constructs a <code>TableLFTagPolicyAndPermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableLFTagPolicyAndPermissions} obj Optional instance to populate.
     * @return {module:model/TableLFTagPolicyAndPermissions} The populated <code>TableLFTagPolicyAndPermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableLFTagPolicyAndPermissions();

            if (data.hasOwnProperty('Expression')) {
                obj['Expression'] = ApiClient.convertToType(data['Expression'], Array);
            }
            if (data.hasOwnProperty('Permissions')) {
                obj['Permissions'] = ApiClient.convertToType(data['Permissions'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableLFTagPolicyAndPermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableLFTagPolicyAndPermissions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TableLFTagPolicyAndPermissions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Expression`
        if (data['Expression']) { // data not null
          Array.validateJSON(data['Expression']);
        }
        // validate the optional field `Permissions`
        if (data['Permissions']) { // data not null
          Array.validateJSON(data['Permissions']);
        }

        return true;
    }


}

TableLFTagPolicyAndPermissions.RequiredProperties = ["Expression", "Permissions"];

/**
 * @member {Array} Expression
 */
TableLFTagPolicyAndPermissions.prototype['Expression'] = undefined;

/**
 * @member {Array} Permissions
 */
TableLFTagPolicyAndPermissions.prototype['Permissions'] = undefined;






export default TableLFTagPolicyAndPermissions;

