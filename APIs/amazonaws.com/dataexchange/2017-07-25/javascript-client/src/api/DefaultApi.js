/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDataSetRequest from '../model/CreateDataSetRequest';
import CreateDataSetResponse from '../model/CreateDataSetResponse';
import CreateEventActionRequest from '../model/CreateEventActionRequest';
import CreateEventActionResponse from '../model/CreateEventActionResponse';
import CreateJobRequest from '../model/CreateJobRequest';
import CreateJobResponse from '../model/CreateJobResponse';
import CreateRevisionRequest from '../model/CreateRevisionRequest';
import CreateRevisionResponse from '../model/CreateRevisionResponse';
import GetAssetResponse from '../model/GetAssetResponse';
import GetDataSetResponse from '../model/GetDataSetResponse';
import GetEventActionResponse from '../model/GetEventActionResponse';
import GetJobResponse from '../model/GetJobResponse';
import GetRevisionResponse from '../model/GetRevisionResponse';
import ListDataSetRevisionsResponse from '../model/ListDataSetRevisionsResponse';
import ListDataSetsResponse from '../model/ListDataSetsResponse';
import ListEventActionsResponse from '../model/ListEventActionsResponse';
import ListJobsResponse from '../model/ListJobsResponse';
import ListRevisionAssetsResponse from '../model/ListRevisionAssetsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import RevokeRevisionRequest from '../model/RevokeRevisionRequest';
import RevokeRevisionResponse from '../model/RevokeRevisionResponse';
import SendApiAssetRequest from '../model/SendApiAssetRequest';
import SendApiAssetResponse from '../model/SendApiAssetResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateAssetRequest from '../model/UpdateAssetRequest';
import UpdateAssetResponse from '../model/UpdateAssetResponse';
import UpdateDataSetRequest from '../model/UpdateDataSetRequest';
import UpdateDataSetResponse from '../model/UpdateDataSetResponse';
import UpdateEventActionRequest from '../model/UpdateEventActionRequest';
import UpdateEventActionResponse from '../model/UpdateEventActionResponse';
import UpdateRevisionRequest from '../model/UpdateRevisionRequest';
import UpdateRevisionResponse from '../model/UpdateRevisionResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-07-25
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelJob operation.
     * @callback module:api/DefaultApi~cancelJobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation cancels a job. Jobs can be cancelled only when they are in the WAITING state.
     * @param {String} jobId The unique identifier for a job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelJobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling cancelJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/jobs/{JobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataSet operation.
     * @callback module:api/DefaultApi~createDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation creates a data set.
     * @param {module:model/CreateDataSetRequest} createDataSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDataSetResponse}
     */
    createDataSet(createDataSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataSetRequest;
      // verify the required parameter 'createDataSetRequest' is set
      if (createDataSetRequest === undefined || createDataSetRequest === null) {
        throw new Error("Missing the required parameter 'createDataSetRequest' when calling createDataSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDataSetResponse;
      return this.apiClient.callApi(
        '/v1/data-sets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEventAction operation.
     * @callback module:api/DefaultApi~createEventActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateEventActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation creates an event action.
     * @param {module:model/CreateEventActionRequest} createEventActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createEventActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateEventActionResponse}
     */
    createEventAction(createEventActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createEventActionRequest;
      // verify the required parameter 'createEventActionRequest' is set
      if (createEventActionRequest === undefined || createEventActionRequest === null) {
        throw new Error("Missing the required parameter 'createEventActionRequest' when calling createEventAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateEventActionResponse;
      return this.apiClient.callApi(
        '/v1/event-actions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:api/DefaultApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation creates a job.
     * @param {module:model/CreateJobRequest} createJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJobResponse}
     */
    createJob(createJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createJobRequest;
      // verify the required parameter 'createJobRequest' is set
      if (createJobRequest === undefined || createJobRequest === null) {
        throw new Error("Missing the required parameter 'createJobRequest' when calling createJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateJobResponse;
      return this.apiClient.callApi(
        '/v1/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRevision operation.
     * @callback module:api/DefaultApi~createRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRevisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation creates a revision for a data set.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {module:model/CreateRevisionRequest} createRevisionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRevisionResponse}
     */
    createRevision(dataSetId, createRevisionRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRevisionRequest;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling createRevision");
      }
      // verify the required parameter 'createRevisionRequest' is set
      if (createRevisionRequest === undefined || createRevisionRequest === null) {
        throw new Error("Missing the required parameter 'createRevisionRequest' when calling createRevision");
      }

      let pathParams = {
        'DataSetId': dataSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRevisionResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAsset operation.
     * @callback module:api/DefaultApi~deleteAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation deletes an asset.
     * @param {String} assetId The unique identifier for an asset.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAsset(assetId, dataSetId, revisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deleteAsset");
      }
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling deleteAsset");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling deleteAsset");
      }

      let pathParams = {
        'AssetId': assetId,
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataSet operation.
     * @callback module:api/DefaultApi~deleteDataSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation deletes a data set.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDataSet(dataSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling deleteDataSet");
      }

      let pathParams = {
        'DataSetId': dataSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEventAction operation.
     * @callback module:api/DefaultApi~deleteEventActionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation deletes the event action.
     * @param {String} eventActionId The unique identifier for the event action.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteEventActionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEventAction(eventActionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventActionId' is set
      if (eventActionId === undefined || eventActionId === null) {
        throw new Error("Missing the required parameter 'eventActionId' when calling deleteEventAction");
      }

      let pathParams = {
        'EventActionId': eventActionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/event-actions/{EventActionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRevision operation.
     * @callback module:api/DefaultApi~deleteRevisionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation deletes a revision.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRevision(dataSetId, revisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling deleteRevision");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling deleteRevision");
      }

      let pathParams = {
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAsset operation.
     * @callback module:api/DefaultApi~getAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns information about an asset.
     * @param {String} assetId The unique identifier for an asset.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssetResponse}
     */
    getAsset(assetId, dataSetId, revisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAsset");
      }
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling getAsset");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling getAsset");
      }

      let pathParams = {
        'AssetId': assetId,
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssetResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSet operation.
     * @callback module:api/DefaultApi~getDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns information about a data set.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataSetResponse}
     */
    getDataSet(dataSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling getDataSet");
      }

      let pathParams = {
        'DataSetId': dataSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDataSetResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEventAction operation.
     * @callback module:api/DefaultApi~getEventActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation retrieves information about an event action.
     * @param {String} eventActionId The unique identifier for the event action.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getEventActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEventActionResponse}
     */
    getEventAction(eventActionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'eventActionId' is set
      if (eventActionId === undefined || eventActionId === null) {
        throw new Error("Missing the required parameter 'eventActionId' when calling getEventAction");
      }

      let pathParams = {
        'EventActionId': eventActionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventActionResponse;
      return this.apiClient.callApi(
        '/v1/event-actions/{EventActionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/DefaultApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns information about a job.
     * @param {String} jobId The unique identifier for a job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJobResponse}
     */
    getJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetJobResponse;
      return this.apiClient.callApi(
        '/v1/jobs/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRevision operation.
     * @callback module:api/DefaultApi~getRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRevisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation returns information about a revision.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRevisionResponse}
     */
    getRevision(dataSetId, revisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling getRevision");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling getRevision");
      }

      let pathParams = {
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRevisionResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSetRevisions operation.
     * @callback module:api/DefaultApi~listDataSetRevisionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSetRevisionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation lists a data set's revisions sorted by CreatedAt in descending order.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results returned by a single call.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDataSetRevisionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSetRevisionsResponse}
     */
    listDataSetRevisions(dataSetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling listDataSetRevisions");
      }

      let pathParams = {
        'DataSetId': dataSetId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDataSetRevisionsResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSets operation.
     * @callback module:api/DefaultApi~listDataSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation lists your data sets. When listing by origin OWNED, results are sorted by CreatedAt in descending order. When listing by origin ENTITLED, there is no order and the maxResults parameter is ignored.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results returned by a single call.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {String} [origin] A property that defines the data set as OWNED by the account (for providers) or ENTITLED to the account (for subscribers).
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSetsResponse}
     */
    listDataSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'origin': opts['origin'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDataSetsResponse;
      return this.apiClient.callApi(
        '/v1/data-sets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEventActions operation.
     * @callback module:api/DefaultApi~listEventActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEventActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation lists your event actions.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [eventSourceId] The unique identifier for the event source.
     * @param {Number} [maxResults] The maximum number of results returned by a single call.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listEventActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEventActionsResponse}
     */
    listEventActions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'eventSourceId': opts['eventSourceId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEventActionsResponse;
      return this.apiClient.callApi(
        '/v1/event-actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobs operation.
     * @callback module:api/DefaultApi~listJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation lists your jobs sorted by CreatedAt in descending order.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [dataSetId] The unique identifier for a data set.
     * @param {Number} [maxResults] The maximum number of results returned by a single call.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {String} [revisionId] The unique identifier for a revision.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsResponse}
     */
    listJobs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'dataSetId': opts['dataSetId'],
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'revisionId': opts['revisionId'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListJobsResponse;
      return this.apiClient.callApi(
        '/v1/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRevisionAssets operation.
     * @callback module:api/DefaultApi~listRevisionAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRevisionAssetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation lists a revision's assets sorted alphabetically in descending order.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of results returned by a single call.
     * @param {String} [nextToken] The token value retrieved from a previous call to access the next page of results.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRevisionAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRevisionAssetsResponse}
     */
    listRevisionAssets(dataSetId, revisionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling listRevisionAssets");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling listRevisionAssets");
      }

      let pathParams = {
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRevisionAssetsResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation lists the tags on the resource.
     * @param {String} resourceArn An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeRevision operation.
     * @callback module:api/DefaultApi~revokeRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RevokeRevisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation revokes subscribers' access to a revision.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {module:model/RevokeRevisionRequest} revokeRevisionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokeRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RevokeRevisionResponse}
     */
    revokeRevision(dataSetId, revisionId, revokeRevisionRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokeRevisionRequest;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling revokeRevision");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling revokeRevision");
      }
      // verify the required parameter 'revokeRevisionRequest' is set
      if (revokeRevisionRequest === undefined || revokeRevisionRequest === null) {
        throw new Error("Missing the required parameter 'revokeRevisionRequest' when calling revokeRevision");
      }

      let pathParams = {
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RevokeRevisionResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendApiAsset operation.
     * @callback module:api/DefaultApi~sendApiAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendApiAssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation invokes an API Gateway API asset. The request is proxied to the provider’s API Gateway API.
     * @param {String} xAmznDataexchangeAssetId Asset ID value for the API request.
     * @param {String} xAmznDataexchangeDataSetId Data set ID value for the API request.
     * @param {String} xAmznDataexchangeRevisionId Revision ID value for the API request.
     * @param {module:model/SendApiAssetRequest} sendApiAssetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Object.<String, {String: String}>} [queryStringParameters] Attach query string parameters to the end of the URI (for example, /v1/examplePath?exampleParam=exampleValue).
     * @param {String} [xAmznDataexchangeHttpMethod] HTTP method value for the API request. Alternatively, you can use the appropriate verb in your request.
     * @param {String} [xAmznDataexchangePath] URI path value for the API request. Alternatively, you can set the URI path directly by invoking /v1/{pathValue}.
     * @param {module:api/DefaultApi~sendApiAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendApiAssetResponse}
     */
    sendApiAsset(xAmznDataexchangeAssetId, xAmznDataexchangeDataSetId, xAmznDataexchangeRevisionId, sendApiAssetRequest, opts, callback) {
      opts = opts || {};
      let postBody = sendApiAssetRequest;
      // verify the required parameter 'xAmznDataexchangeAssetId' is set
      if (xAmznDataexchangeAssetId === undefined || xAmznDataexchangeAssetId === null) {
        throw new Error("Missing the required parameter 'xAmznDataexchangeAssetId' when calling sendApiAsset");
      }
      // verify the required parameter 'xAmznDataexchangeDataSetId' is set
      if (xAmznDataexchangeDataSetId === undefined || xAmznDataexchangeDataSetId === null) {
        throw new Error("Missing the required parameter 'xAmznDataexchangeDataSetId' when calling sendApiAsset");
      }
      // verify the required parameter 'xAmznDataexchangeRevisionId' is set
      if (xAmznDataexchangeRevisionId === undefined || xAmznDataexchangeRevisionId === null) {
        throw new Error("Missing the required parameter 'xAmznDataexchangeRevisionId' when calling sendApiAsset");
      }
      // verify the required parameter 'sendApiAssetRequest' is set
      if (sendApiAssetRequest === undefined || sendApiAssetRequest === null) {
        throw new Error("Missing the required parameter 'sendApiAssetRequest' when calling sendApiAsset");
      }

      let pathParams = {
      };
      let queryParams = {
        'QueryStringParameters': opts['queryStringParameters']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'x-amzn-dataexchange-asset-id': xAmznDataexchangeAssetId,
        'x-amzn-dataexchange-data-set-id': xAmznDataexchangeDataSetId,
        'x-amzn-dataexchange-http-method': opts['xAmznDataexchangeHttpMethod'],
        'x-amzn-dataexchange-path': opts['xAmznDataexchangePath'],
        'x-amzn-dataexchange-revision-id': xAmznDataexchangeRevisionId
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendApiAssetResponse;
      return this.apiClient.callApi(
        '/v1#x-amzn-dataexchange-asset-id&x-amzn-dataexchange-data-set-id&x-amzn-dataexchange-revision-id', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startJob operation.
     * @callback module:api/DefaultApi~startJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation starts a job.
     * @param {String} jobId The unique identifier for a job.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    startJob(jobId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling startJob");
      }

      let pathParams = {
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/jobs/{JobId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation tags a resource.
     * @param {String} resourceArn An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation removes one or more tags from a resource.
     * @param {String} resourceArn An Amazon Resource Name (ARN) that uniquely identifies an AWS resource.
     * @param {Array.<String>} tagKeys The key tags.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'ResourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{ResourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAsset operation.
     * @callback module:api/DefaultApi~updateAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation updates an asset.
     * @param {String} assetId The unique identifier for an asset.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {module:model/UpdateAssetRequest} updateAssetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAssetResponse}
     */
    updateAsset(assetId, dataSetId, revisionId, updateAssetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAssetRequest;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling updateAsset");
      }
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling updateAsset");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling updateAsset");
      }
      // verify the required parameter 'updateAssetRequest' is set
      if (updateAssetRequest === undefined || updateAssetRequest === null) {
        throw new Error("Missing the required parameter 'updateAssetRequest' when calling updateAsset");
      }

      let pathParams = {
        'AssetId': assetId,
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAssetResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataSet operation.
     * @callback module:api/DefaultApi~updateDataSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDataSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation updates a data set.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {module:model/UpdateDataSetRequest} updateDataSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDataSetResponse}
     */
    updateDataSet(dataSetId, updateDataSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDataSetRequest;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling updateDataSet");
      }
      // verify the required parameter 'updateDataSetRequest' is set
      if (updateDataSetRequest === undefined || updateDataSetRequest === null) {
        throw new Error("Missing the required parameter 'updateDataSetRequest' when calling updateDataSet");
      }

      let pathParams = {
        'DataSetId': dataSetId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDataSetResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEventAction operation.
     * @callback module:api/DefaultApi~updateEventActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateEventActionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation updates the event action.
     * @param {String} eventActionId The unique identifier for the event action.
     * @param {module:model/UpdateEventActionRequest} updateEventActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateEventActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateEventActionResponse}
     */
    updateEventAction(eventActionId, updateEventActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateEventActionRequest;
      // verify the required parameter 'eventActionId' is set
      if (eventActionId === undefined || eventActionId === null) {
        throw new Error("Missing the required parameter 'eventActionId' when calling updateEventAction");
      }
      // verify the required parameter 'updateEventActionRequest' is set
      if (updateEventActionRequest === undefined || updateEventActionRequest === null) {
        throw new Error("Missing the required parameter 'updateEventActionRequest' when calling updateEventAction");
      }

      let pathParams = {
        'EventActionId': eventActionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateEventActionResponse;
      return this.apiClient.callApi(
        '/v1/event-actions/{EventActionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRevision operation.
     * @callback module:api/DefaultApi~updateRevisionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRevisionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation updates a revision.
     * @param {String} dataSetId The unique identifier for a data set.
     * @param {String} revisionId The unique identifier for a revision.
     * @param {module:model/UpdateRevisionRequest} updateRevisionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRevisionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRevisionResponse}
     */
    updateRevision(dataSetId, revisionId, updateRevisionRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRevisionRequest;
      // verify the required parameter 'dataSetId' is set
      if (dataSetId === undefined || dataSetId === null) {
        throw new Error("Missing the required parameter 'dataSetId' when calling updateRevision");
      }
      // verify the required parameter 'revisionId' is set
      if (revisionId === undefined || revisionId === null) {
        throw new Error("Missing the required parameter 'revisionId' when calling updateRevision");
      }
      // verify the required parameter 'updateRevisionRequest' is set
      if (updateRevisionRequest === undefined || updateRevisionRequest === null) {
        throw new Error("Missing the required parameter 'updateRevisionRequest' when calling updateRevision");
      }

      let pathParams = {
        'DataSetId': dataSetId,
        'RevisionId': revisionId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRevisionResponse;
      return this.apiClient.callApi(
        '/v1/data-sets/{DataSetId}/revisions/{RevisionId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
