# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RevokeRevisionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, revocation_comment: str=None):
        """RevokeRevisionRequest - a model defined in OpenAPI

        :param revocation_comment: The revocation_comment of this RevokeRevisionRequest.
        """
        self.openapi_types = {
            'revocation_comment': str
        }

        self.attribute_map = {
            'revocation_comment': 'RevocationComment'
        }

        self._revocation_comment = revocation_comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RevokeRevisionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RevokeRevision_request of this RevokeRevisionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def revocation_comment(self):
        """Gets the revocation_comment of this RevokeRevisionRequest.

        A required comment to inform subscribers of the reason their access to the revision was revoked.

        :return: The revocation_comment of this RevokeRevisionRequest.
        :rtype: str
        """
        return self._revocation_comment

    @revocation_comment.setter
    def revocation_comment(self, revocation_comment):
        """Sets the revocation_comment of this RevokeRevisionRequest.

        A required comment to inform subscribers of the reason their access to the revision was revoked.

        :param revocation_comment: The revocation_comment of this RevokeRevisionRequest.
        :type revocation_comment: str
        """
        if revocation_comment is None:
            raise ValueError("Invalid value for `revocation_comment`, must not be `None`")
        if revocation_comment is not None and len(revocation_comment) > 512:
            raise ValueError("Invalid value for `revocation_comment`, length must be less than or equal to `512`")
        if revocation_comment is not None and len(revocation_comment) < 10:
            raise ValueError("Invalid value for `revocation_comment`, length must be greater than or equal to `10`")

        self._revocation_comment = revocation_comment
