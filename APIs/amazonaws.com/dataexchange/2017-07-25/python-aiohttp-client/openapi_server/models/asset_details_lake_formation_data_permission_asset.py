# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lake_formation_data_permission_asset_lake_formation_data_permission_details import LakeFormationDataPermissionAssetLakeFormationDataPermissionDetails
from openapi_server.models.lake_formation_data_permission_type import LakeFormationDataPermissionType
from openapi_server import util


class AssetDetailsLakeFormationDataPermissionAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lake_formation_data_permission_details: LakeFormationDataPermissionAssetLakeFormationDataPermissionDetails=None, lake_formation_data_permission_type: LakeFormationDataPermissionType=None, permissions: List=None, role_arn: str=None):
        """AssetDetailsLakeFormationDataPermissionAsset - a model defined in OpenAPI

        :param lake_formation_data_permission_details: The lake_formation_data_permission_details of this AssetDetailsLakeFormationDataPermissionAsset.
        :param lake_formation_data_permission_type: The lake_formation_data_permission_type of this AssetDetailsLakeFormationDataPermissionAsset.
        :param permissions: The permissions of this AssetDetailsLakeFormationDataPermissionAsset.
        :param role_arn: The role_arn of this AssetDetailsLakeFormationDataPermissionAsset.
        """
        self.openapi_types = {
            'lake_formation_data_permission_details': LakeFormationDataPermissionAssetLakeFormationDataPermissionDetails,
            'lake_formation_data_permission_type': LakeFormationDataPermissionType,
            'permissions': List,
            'role_arn': str
        }

        self.attribute_map = {
            'lake_formation_data_permission_details': 'LakeFormationDataPermissionDetails',
            'lake_formation_data_permission_type': 'LakeFormationDataPermissionType',
            'permissions': 'Permissions',
            'role_arn': 'RoleArn'
        }

        self._lake_formation_data_permission_details = lake_formation_data_permission_details
        self._lake_formation_data_permission_type = lake_formation_data_permission_type
        self._permissions = permissions
        self._role_arn = role_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetDetailsLakeFormationDataPermissionAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetDetails_LakeFormationDataPermissionAsset of this AssetDetailsLakeFormationDataPermissionAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lake_formation_data_permission_details(self):
        """Gets the lake_formation_data_permission_details of this AssetDetailsLakeFormationDataPermissionAsset.


        :return: The lake_formation_data_permission_details of this AssetDetailsLakeFormationDataPermissionAsset.
        :rtype: LakeFormationDataPermissionAssetLakeFormationDataPermissionDetails
        """
        return self._lake_formation_data_permission_details

    @lake_formation_data_permission_details.setter
    def lake_formation_data_permission_details(self, lake_formation_data_permission_details):
        """Sets the lake_formation_data_permission_details of this AssetDetailsLakeFormationDataPermissionAsset.


        :param lake_formation_data_permission_details: The lake_formation_data_permission_details of this AssetDetailsLakeFormationDataPermissionAsset.
        :type lake_formation_data_permission_details: LakeFormationDataPermissionAssetLakeFormationDataPermissionDetails
        """
        if lake_formation_data_permission_details is None:
            raise ValueError("Invalid value for `lake_formation_data_permission_details`, must not be `None`")

        self._lake_formation_data_permission_details = lake_formation_data_permission_details

    @property
    def lake_formation_data_permission_type(self):
        """Gets the lake_formation_data_permission_type of this AssetDetailsLakeFormationDataPermissionAsset.


        :return: The lake_formation_data_permission_type of this AssetDetailsLakeFormationDataPermissionAsset.
        :rtype: LakeFormationDataPermissionType
        """
        return self._lake_formation_data_permission_type

    @lake_formation_data_permission_type.setter
    def lake_formation_data_permission_type(self, lake_formation_data_permission_type):
        """Sets the lake_formation_data_permission_type of this AssetDetailsLakeFormationDataPermissionAsset.


        :param lake_formation_data_permission_type: The lake_formation_data_permission_type of this AssetDetailsLakeFormationDataPermissionAsset.
        :type lake_formation_data_permission_type: LakeFormationDataPermissionType
        """
        if lake_formation_data_permission_type is None:
            raise ValueError("Invalid value for `lake_formation_data_permission_type`, must not be `None`")

        self._lake_formation_data_permission_type = lake_formation_data_permission_type

    @property
    def permissions(self):
        """Gets the permissions of this AssetDetailsLakeFormationDataPermissionAsset.


        :return: The permissions of this AssetDetailsLakeFormationDataPermissionAsset.
        :rtype: List
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AssetDetailsLakeFormationDataPermissionAsset.


        :param permissions: The permissions of this AssetDetailsLakeFormationDataPermissionAsset.
        :type permissions: List
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def role_arn(self):
        """Gets the role_arn of this AssetDetailsLakeFormationDataPermissionAsset.


        :return: The role_arn of this AssetDetailsLakeFormationDataPermissionAsset.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this AssetDetailsLakeFormationDataPermissionAsset.


        :param role_arn: The role_arn of this AssetDetailsLakeFormationDataPermissionAsset.
        :type role_arn: str
        """

        self._role_arn = role_arn
