# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auto_export_revision_to_s3_request_details_encryption import AutoExportRevisionToS3RequestDetailsEncryption
from openapi_server.models.auto_export_revision_to_s3_request_details_revision_destination import AutoExportRevisionToS3RequestDetailsRevisionDestination
from openapi_server import util


class CreateEventActionRequestActionExportRevisionToS3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption: AutoExportRevisionToS3RequestDetailsEncryption=None, revision_destination: AutoExportRevisionToS3RequestDetailsRevisionDestination=None):
        """CreateEventActionRequestActionExportRevisionToS3 - a model defined in OpenAPI

        :param encryption: The encryption of this CreateEventActionRequestActionExportRevisionToS3.
        :param revision_destination: The revision_destination of this CreateEventActionRequestActionExportRevisionToS3.
        """
        self.openapi_types = {
            'encryption': AutoExportRevisionToS3RequestDetailsEncryption,
            'revision_destination': AutoExportRevisionToS3RequestDetailsRevisionDestination
        }

        self.attribute_map = {
            'encryption': 'Encryption',
            'revision_destination': 'RevisionDestination'
        }

        self._encryption = encryption
        self._revision_destination = revision_destination

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEventActionRequestActionExportRevisionToS3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEventAction_request_Action_ExportRevisionToS3 of this CreateEventActionRequestActionExportRevisionToS3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption(self):
        """Gets the encryption of this CreateEventActionRequestActionExportRevisionToS3.


        :return: The encryption of this CreateEventActionRequestActionExportRevisionToS3.
        :rtype: AutoExportRevisionToS3RequestDetailsEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this CreateEventActionRequestActionExportRevisionToS3.


        :param encryption: The encryption of this CreateEventActionRequestActionExportRevisionToS3.
        :type encryption: AutoExportRevisionToS3RequestDetailsEncryption
        """

        self._encryption = encryption

    @property
    def revision_destination(self):
        """Gets the revision_destination of this CreateEventActionRequestActionExportRevisionToS3.


        :return: The revision_destination of this CreateEventActionRequestActionExportRevisionToS3.
        :rtype: AutoExportRevisionToS3RequestDetailsRevisionDestination
        """
        return self._revision_destination

    @revision_destination.setter
    def revision_destination(self, revision_destination):
        """Sets the revision_destination of this CreateEventActionRequestActionExportRevisionToS3.


        :param revision_destination: The revision_destination of this CreateEventActionRequestActionExportRevisionToS3.
        :type revision_destination: AutoExportRevisionToS3RequestDetailsRevisionDestination
        """
        if revision_destination is None:
            raise ValueError("Invalid value for `revision_destination`, must not be `None`")

        self._revision_destination = revision_destination
