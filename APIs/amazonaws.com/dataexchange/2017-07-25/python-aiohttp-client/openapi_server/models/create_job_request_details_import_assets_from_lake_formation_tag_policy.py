# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_assets_from_lake_formation_tag_policy_request_details_database import ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase
from openapi_server.models.import_assets_from_lake_formation_tag_policy_request_details_table import ImportAssetsFromLakeFormationTagPolicyRequestDetailsTable
from openapi_server import util


class CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, database: ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase=None, table: ImportAssetsFromLakeFormationTagPolicyRequestDetailsTable=None, role_arn: str=None, data_set_id: str=None, revision_id: str=None):
        """CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :param database: The database of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :param table: The table of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :param role_arn: The role_arn of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :param data_set_id: The data_set_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :param revision_id: The revision_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        """
        self.openapi_types = {
            'catalog_id': str,
            'database': ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase,
            'table': ImportAssetsFromLakeFormationTagPolicyRequestDetailsTable,
            'role_arn': str,
            'data_set_id': str,
            'revision_id': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'database': 'Database',
            'table': 'Table',
            'role_arn': 'RoleArn',
            'data_set_id': 'DataSetId',
            'revision_id': 'RevisionId'
        }

        self._catalog_id = catalog_id
        self._database = database
        self._table = table
        self._role_arn = role_arn
        self._data_set_id = data_set_id
        self._revision_id = revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateJob_request_Details_ImportAssetsFromLakeFormationTagPolicy of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :return: The catalog_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :param catalog_id: The catalog_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :type catalog_id: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")

        self._catalog_id = catalog_id

    @property
    def database(self):
        """Gets the database of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :return: The database of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :rtype: ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :param database: The database of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :type database: ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase
        """

        self._database = database

    @property
    def table(self):
        """Gets the table of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :return: The table of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :rtype: ImportAssetsFromLakeFormationTagPolicyRequestDetailsTable
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :param table: The table of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :type table: ImportAssetsFromLakeFormationTagPolicyRequestDetailsTable
        """

        self._table = table

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :return: The role_arn of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :param role_arn: The role_arn of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :type role_arn: str
        """
        if role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")

        self._role_arn = role_arn

    @property
    def data_set_id(self):
        """Gets the data_set_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :return: The data_set_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :param data_set_id: The data_set_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :type data_set_id: str
        """
        if data_set_id is None:
            raise ValueError("Invalid value for `data_set_id`, must not be `None`")

        self._data_set_id = data_set_id

    @property
    def revision_id(self):
        """Gets the revision_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :return: The revision_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.


        :param revision_id: The revision_id of this CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id
