# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_assets_to_s3_response_details_encryption import ExportAssetsToS3ResponseDetailsEncryption
from openapi_server import util


class ExportRevisionsToS3ResponseDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_id: str=None, encryption: ExportAssetsToS3ResponseDetailsEncryption=None, revision_destinations: List=None, event_action_arn: str=None):
        """ExportRevisionsToS3ResponseDetails - a model defined in OpenAPI

        :param data_set_id: The data_set_id of this ExportRevisionsToS3ResponseDetails.
        :param encryption: The encryption of this ExportRevisionsToS3ResponseDetails.
        :param revision_destinations: The revision_destinations of this ExportRevisionsToS3ResponseDetails.
        :param event_action_arn: The event_action_arn of this ExportRevisionsToS3ResponseDetails.
        """
        self.openapi_types = {
            'data_set_id': str,
            'encryption': ExportAssetsToS3ResponseDetailsEncryption,
            'revision_destinations': List,
            'event_action_arn': str
        }

        self.attribute_map = {
            'data_set_id': 'DataSetId',
            'encryption': 'Encryption',
            'revision_destinations': 'RevisionDestinations',
            'event_action_arn': 'EventActionArn'
        }

        self._data_set_id = data_set_id
        self._encryption = encryption
        self._revision_destinations = revision_destinations
        self._event_action_arn = event_action_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportRevisionsToS3ResponseDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportRevisionsToS3ResponseDetails of this ExportRevisionsToS3ResponseDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_id(self):
        """Gets the data_set_id of this ExportRevisionsToS3ResponseDetails.


        :return: The data_set_id of this ExportRevisionsToS3ResponseDetails.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this ExportRevisionsToS3ResponseDetails.


        :param data_set_id: The data_set_id of this ExportRevisionsToS3ResponseDetails.
        :type data_set_id: str
        """
        if data_set_id is None:
            raise ValueError("Invalid value for `data_set_id`, must not be `None`")

        self._data_set_id = data_set_id

    @property
    def encryption(self):
        """Gets the encryption of this ExportRevisionsToS3ResponseDetails.


        :return: The encryption of this ExportRevisionsToS3ResponseDetails.
        :rtype: ExportAssetsToS3ResponseDetailsEncryption
        """
        return self._encryption

    @encryption.setter
    def encryption(self, encryption):
        """Sets the encryption of this ExportRevisionsToS3ResponseDetails.


        :param encryption: The encryption of this ExportRevisionsToS3ResponseDetails.
        :type encryption: ExportAssetsToS3ResponseDetailsEncryption
        """

        self._encryption = encryption

    @property
    def revision_destinations(self):
        """Gets the revision_destinations of this ExportRevisionsToS3ResponseDetails.


        :return: The revision_destinations of this ExportRevisionsToS3ResponseDetails.
        :rtype: List
        """
        return self._revision_destinations

    @revision_destinations.setter
    def revision_destinations(self, revision_destinations):
        """Sets the revision_destinations of this ExportRevisionsToS3ResponseDetails.


        :param revision_destinations: The revision_destinations of this ExportRevisionsToS3ResponseDetails.
        :type revision_destinations: List
        """
        if revision_destinations is None:
            raise ValueError("Invalid value for `revision_destinations`, must not be `None`")

        self._revision_destinations = revision_destinations

    @property
    def event_action_arn(self):
        """Gets the event_action_arn of this ExportRevisionsToS3ResponseDetails.


        :return: The event_action_arn of this ExportRevisionsToS3ResponseDetails.
        :rtype: str
        """
        return self._event_action_arn

    @event_action_arn.setter
    def event_action_arn(self, event_action_arn):
        """Sets the event_action_arn of this ExportRevisionsToS3ResponseDetails.


        :param event_action_arn: The event_action_arn of this ExportRevisionsToS3ResponseDetails.
        :type event_action_arn: str
        """

        self._event_action_arn = event_action_arn
