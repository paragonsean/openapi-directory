# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateRevisionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, finalized: bool=None):
        """UpdateRevisionRequest - a model defined in OpenAPI

        :param comment: The comment of this UpdateRevisionRequest.
        :param finalized: The finalized of this UpdateRevisionRequest.
        """
        self.openapi_types = {
            'comment': str,
            'finalized': bool
        }

        self.attribute_map = {
            'comment': 'Comment',
            'finalized': 'Finalized'
        }

        self._comment = comment
        self._finalized = finalized

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRevisionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRevision_request of this UpdateRevisionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this UpdateRevisionRequest.

        An optional comment about the revision.

        :return: The comment of this UpdateRevisionRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this UpdateRevisionRequest.

        An optional comment about the revision.

        :param comment: The comment of this UpdateRevisionRequest.
        :type comment: str
        """
        if comment is not None and len(comment) > 16384:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `16384`")
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")

        self._comment = comment

    @property
    def finalized(self):
        """Gets the finalized of this UpdateRevisionRequest.

        Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.

        :return: The finalized of this UpdateRevisionRequest.
        :rtype: bool
        """
        return self._finalized

    @finalized.setter
    def finalized(self, finalized):
        """Sets the finalized of this UpdateRevisionRequest.

        Finalizing a revision tells AWS Data Exchange that your changes to the assets in the revision are complete. After it's in this read-only state, you can publish the revision to your products.

        :param finalized: The finalized of this UpdateRevisionRequest.
        :type finalized: bool
        """

        self._finalized = finalized
