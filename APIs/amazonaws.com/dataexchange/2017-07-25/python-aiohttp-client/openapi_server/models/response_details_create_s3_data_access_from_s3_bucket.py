# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_s3_data_access_from_s3_bucket_response_details_asset_source import CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
from openapi_server import util


class ResponseDetailsCreateS3DataAccessFromS3Bucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_source: CreateS3DataAccessFromS3BucketResponseDetailsAssetSource=None, data_set_id: str=None, revision_id: str=None):
        """ResponseDetailsCreateS3DataAccessFromS3Bucket - a model defined in OpenAPI

        :param asset_source: The asset_source of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :param data_set_id: The data_set_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :param revision_id: The revision_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        """
        self.openapi_types = {
            'asset_source': CreateS3DataAccessFromS3BucketResponseDetailsAssetSource,
            'data_set_id': str,
            'revision_id': str
        }

        self.attribute_map = {
            'asset_source': 'AssetSource',
            'data_set_id': 'DataSetId',
            'revision_id': 'RevisionId'
        }

        self._asset_source = asset_source
        self._data_set_id = data_set_id
        self._revision_id = revision_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseDetailsCreateS3DataAccessFromS3Bucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseDetails_CreateS3DataAccessFromS3Bucket of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_source(self):
        """Gets the asset_source of this ResponseDetailsCreateS3DataAccessFromS3Bucket.


        :return: The asset_source of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :rtype: CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
        """
        return self._asset_source

    @asset_source.setter
    def asset_source(self, asset_source):
        """Sets the asset_source of this ResponseDetailsCreateS3DataAccessFromS3Bucket.


        :param asset_source: The asset_source of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :type asset_source: CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
        """
        if asset_source is None:
            raise ValueError("Invalid value for `asset_source`, must not be `None`")

        self._asset_source = asset_source

    @property
    def data_set_id(self):
        """Gets the data_set_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.


        :return: The data_set_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.


        :param data_set_id: The data_set_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :type data_set_id: str
        """
        if data_set_id is None:
            raise ValueError("Invalid value for `data_set_id`, must not be `None`")

        self._data_set_id = data_set_id

    @property
    def revision_id(self):
        """Gets the revision_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.


        :return: The revision_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.


        :param revision_id: The revision_id of this ResponseDetailsCreateS3DataAccessFromS3Bucket.
        :type revision_id: str
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")

        self._revision_id = revision_id
