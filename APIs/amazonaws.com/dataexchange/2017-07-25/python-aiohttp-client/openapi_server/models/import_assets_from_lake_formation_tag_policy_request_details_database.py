# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: List=None, permissions: List=None):
        """ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase - a model defined in OpenAPI

        :param expression: The expression of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        :param permissions: The permissions of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        """
        self.openapi_types = {
            'expression': List,
            'permissions': List
        }

        self.attribute_map = {
            'expression': 'Expression',
            'permissions': 'Permissions'
        }

        self._expression = expression
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportAssetsFromLakeFormationTagPolicyRequestDetails_Database of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.


        :return: The expression of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        :rtype: List
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.


        :param expression: The expression of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        :type expression: List
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def permissions(self):
        """Gets the permissions of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.


        :return: The permissions of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        :rtype: List
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.


        :param permissions: The permissions of this ImportAssetsFromLakeFormationTagPolicyRequestDetailsDatabase.
        :type permissions: List
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions
