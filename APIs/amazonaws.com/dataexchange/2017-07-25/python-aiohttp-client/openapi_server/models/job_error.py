# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.code import Code
from openapi_server.models.job_error_details import JobErrorDetails
from openapi_server.models.job_error_limit_name import JobErrorLimitName
from openapi_server.models.job_error_resource_types import JobErrorResourceTypes
from openapi_server import util


class JobError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: Code=None, details: JobErrorDetails=None, limit_name: JobErrorLimitName=None, limit_value: float=None, message: str=None, resource_id: str=None, resource_type: JobErrorResourceTypes=None):
        """JobError - a model defined in OpenAPI

        :param code: The code of this JobError.
        :param details: The details of this JobError.
        :param limit_name: The limit_name of this JobError.
        :param limit_value: The limit_value of this JobError.
        :param message: The message of this JobError.
        :param resource_id: The resource_id of this JobError.
        :param resource_type: The resource_type of this JobError.
        """
        self.openapi_types = {
            'code': Code,
            'details': JobErrorDetails,
            'limit_name': JobErrorLimitName,
            'limit_value': float,
            'message': str,
            'resource_id': str,
            'resource_type': JobErrorResourceTypes
        }

        self.attribute_map = {
            'code': 'Code',
            'details': 'Details',
            'limit_name': 'LimitName',
            'limit_value': 'LimitValue',
            'message': 'Message',
            'resource_id': 'ResourceId',
            'resource_type': 'ResourceType'
        }

        self._code = code
        self._details = details
        self._limit_name = limit_name
        self._limit_value = limit_value
        self._message = message
        self._resource_id = resource_id
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobError of this JobError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this JobError.


        :return: The code of this JobError.
        :rtype: Code
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this JobError.


        :param code: The code of this JobError.
        :type code: Code
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this JobError.


        :return: The details of this JobError.
        :rtype: JobErrorDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobError.


        :param details: The details of this JobError.
        :type details: JobErrorDetails
        """

        self._details = details

    @property
    def limit_name(self):
        """Gets the limit_name of this JobError.


        :return: The limit_name of this JobError.
        :rtype: JobErrorLimitName
        """
        return self._limit_name

    @limit_name.setter
    def limit_name(self, limit_name):
        """Sets the limit_name of this JobError.


        :param limit_name: The limit_name of this JobError.
        :type limit_name: JobErrorLimitName
        """

        self._limit_name = limit_name

    @property
    def limit_value(self):
        """Gets the limit_value of this JobError.


        :return: The limit_value of this JobError.
        :rtype: float
        """
        return self._limit_value

    @limit_value.setter
    def limit_value(self, limit_value):
        """Sets the limit_value of this JobError.


        :param limit_value: The limit_value of this JobError.
        :type limit_value: float
        """

        self._limit_value = limit_value

    @property
    def message(self):
        """Gets the message of this JobError.


        :return: The message of this JobError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobError.


        :param message: The message of this JobError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def resource_id(self):
        """Gets the resource_id of this JobError.


        :return: The resource_id of this JobError.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this JobError.


        :param resource_id: The resource_id of this JobError.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this JobError.


        :return: The resource_type of this JobError.
        :rtype: JobErrorResourceTypes
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this JobError.


        :param resource_type: The resource_type of this JobError.
        :type resource_type: JobErrorResourceTypes
        """

        self._resource_type = resource_type
