# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lf_resource_type import LFResourceType
from openapi_server.models.lf_tag_policy_details_resource_details import LFTagPolicyDetailsResourceDetails
from openapi_server import util


class LakeFormationDataPermissionDetailsLFTagPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, resource_type: LFResourceType=None, resource_details: LFTagPolicyDetailsResourceDetails=None):
        """LakeFormationDataPermissionDetailsLFTagPolicy - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :param resource_type: The resource_type of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :param resource_details: The resource_details of this LakeFormationDataPermissionDetailsLFTagPolicy.
        """
        self.openapi_types = {
            'catalog_id': str,
            'resource_type': LFResourceType,
            'resource_details': LFTagPolicyDetailsResourceDetails
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'resource_type': 'ResourceType',
            'resource_details': 'ResourceDetails'
        }

        self._catalog_id = catalog_id
        self._resource_type = resource_type
        self._resource_details = resource_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LakeFormationDataPermissionDetailsLFTagPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LakeFormationDataPermissionDetails_LFTagPolicy of this LakeFormationDataPermissionDetailsLFTagPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this LakeFormationDataPermissionDetailsLFTagPolicy.


        :return: The catalog_id of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this LakeFormationDataPermissionDetailsLFTagPolicy.


        :param catalog_id: The catalog_id of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :type catalog_id: str
        """
        if catalog_id is None:
            raise ValueError("Invalid value for `catalog_id`, must not be `None`")

        self._catalog_id = catalog_id

    @property
    def resource_type(self):
        """Gets the resource_type of this LakeFormationDataPermissionDetailsLFTagPolicy.


        :return: The resource_type of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :rtype: LFResourceType
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LakeFormationDataPermissionDetailsLFTagPolicy.


        :param resource_type: The resource_type of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :type resource_type: LFResourceType
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def resource_details(self):
        """Gets the resource_details of this LakeFormationDataPermissionDetailsLFTagPolicy.


        :return: The resource_details of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :rtype: LFTagPolicyDetailsResourceDetails
        """
        return self._resource_details

    @resource_details.setter
    def resource_details(self, resource_details):
        """Sets the resource_details of this LakeFormationDataPermissionDetailsLFTagPolicy.


        :param resource_details: The resource_details of this LakeFormationDataPermissionDetailsLFTagPolicy.
        :type resource_details: LFTagPolicyDetailsResourceDetails
        """
        if resource_details is None:
            raise ValueError("Invalid value for `resource_details`, must not be `None`")

        self._resource_details = resource_details
