# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateDataSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_type: str=None, description: str=None, name: str=None, tags: Dict[str, str]=None):
        """CreateDataSetRequest - a model defined in OpenAPI

        :param asset_type: The asset_type of this CreateDataSetRequest.
        :param description: The description of this CreateDataSetRequest.
        :param name: The name of this CreateDataSetRequest.
        :param tags: The tags of this CreateDataSetRequest.
        """
        self.openapi_types = {
            'asset_type': str,
            'description': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'asset_type': 'AssetType',
            'description': 'Description',
            'name': 'Name',
            'tags': 'Tags'
        }

        self._asset_type = asset_type
        self._description = description
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDataSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDataSet_request of this CreateDataSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_type(self):
        """Gets the asset_type of this CreateDataSetRequest.

        The type of asset that is added to a data set.

        :return: The asset_type of this CreateDataSetRequest.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this CreateDataSetRequest.

        The type of asset that is added to a data set.

        :param asset_type: The asset_type of this CreateDataSetRequest.
        :type asset_type: str
        """
        allowed_values = ["S3_SNAPSHOT", "REDSHIFT_DATA_SHARE", "API_GATEWAY_API", "S3_DATA_ACCESS", "LAKE_FORMATION_DATA_PERMISSION"]  # noqa: E501
        if asset_type not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_type` ({0}), must be one of {1}"
                .format(asset_type, allowed_values)
            )

        self._asset_type = asset_type

    @property
    def description(self):
        """Gets the description of this CreateDataSetRequest.

        A description for the data set. This value can be up to 16,348 characters long.

        :return: The description of this CreateDataSetRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateDataSetRequest.

        A description for the data set. This value can be up to 16,348 characters long.

        :param description: The description of this CreateDataSetRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateDataSetRequest.

        The name of the data set.

        :return: The name of this CreateDataSetRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateDataSetRequest.

        The name of the data set.

        :param name: The name of this CreateDataSetRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateDataSetRequest.

        A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.

        :return: The tags of this CreateDataSetRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateDataSetRequest.

        A data set tag is an optional label that you can assign to a data set when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.

        :param tags: The tags of this CreateDataSetRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
