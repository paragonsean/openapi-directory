# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRevisionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, tags: Dict[str, str]=None):
        """CreateRevisionRequest - a model defined in OpenAPI

        :param comment: The comment of this CreateRevisionRequest.
        :param tags: The tags of this CreateRevisionRequest.
        """
        self.openapi_types = {
            'comment': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'comment': 'Comment',
            'tags': 'Tags'
        }

        self._comment = comment
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRevisionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRevision_request of this CreateRevisionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this CreateRevisionRequest.

        An optional comment about the revision.

        :return: The comment of this CreateRevisionRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreateRevisionRequest.

        An optional comment about the revision.

        :param comment: The comment of this CreateRevisionRequest.
        :type comment: str
        """
        if comment is not None and len(comment) > 16384:
            raise ValueError("Invalid value for `comment`, length must be less than or equal to `16384`")
        if comment is not None and len(comment) < 0:
            raise ValueError("Invalid value for `comment`, length must be greater than or equal to `0`")

        self._comment = comment

    @property
    def tags(self):
        """Gets the tags of this CreateRevisionRequest.

        A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.

        :return: The tags of this CreateRevisionRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateRevisionRequest.

        A revision tag is an optional label that you can assign to a revision when you create it. Each tag consists of a key and an optional value, both of which you define. When you use tagging, you can also use tag-based access control in IAM policies to control access to these data sets and revisions.

        :param tags: The tags of this CreateRevisionRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
