# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3DataAccessAssetSourceEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket: str=None, key_prefixes: List=None, keys: List=None, kms_keys_to_grant: List=None):
        """S3DataAccessAssetSourceEntry - a model defined in OpenAPI

        :param bucket: The bucket of this S3DataAccessAssetSourceEntry.
        :param key_prefixes: The key_prefixes of this S3DataAccessAssetSourceEntry.
        :param keys: The keys of this S3DataAccessAssetSourceEntry.
        :param kms_keys_to_grant: The kms_keys_to_grant of this S3DataAccessAssetSourceEntry.
        """
        self.openapi_types = {
            'bucket': str,
            'key_prefixes': List,
            'keys': List,
            'kms_keys_to_grant': List
        }

        self.attribute_map = {
            'bucket': 'Bucket',
            'key_prefixes': 'KeyPrefixes',
            'keys': 'Keys',
            'kms_keys_to_grant': 'KmsKeysToGrant'
        }

        self._bucket = bucket
        self._key_prefixes = key_prefixes
        self._keys = keys
        self._kms_keys_to_grant = kms_keys_to_grant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3DataAccessAssetSourceEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3DataAccessAssetSourceEntry of this S3DataAccessAssetSourceEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket(self):
        """Gets the bucket of this S3DataAccessAssetSourceEntry.


        :return: The bucket of this S3DataAccessAssetSourceEntry.
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this S3DataAccessAssetSourceEntry.


        :param bucket: The bucket of this S3DataAccessAssetSourceEntry.
        :type bucket: str
        """
        if bucket is None:
            raise ValueError("Invalid value for `bucket`, must not be `None`")

        self._bucket = bucket

    @property
    def key_prefixes(self):
        """Gets the key_prefixes of this S3DataAccessAssetSourceEntry.


        :return: The key_prefixes of this S3DataAccessAssetSourceEntry.
        :rtype: List
        """
        return self._key_prefixes

    @key_prefixes.setter
    def key_prefixes(self, key_prefixes):
        """Sets the key_prefixes of this S3DataAccessAssetSourceEntry.


        :param key_prefixes: The key_prefixes of this S3DataAccessAssetSourceEntry.
        :type key_prefixes: List
        """

        self._key_prefixes = key_prefixes

    @property
    def keys(self):
        """Gets the keys of this S3DataAccessAssetSourceEntry.


        :return: The keys of this S3DataAccessAssetSourceEntry.
        :rtype: List
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this S3DataAccessAssetSourceEntry.


        :param keys: The keys of this S3DataAccessAssetSourceEntry.
        :type keys: List
        """

        self._keys = keys

    @property
    def kms_keys_to_grant(self):
        """Gets the kms_keys_to_grant of this S3DataAccessAssetSourceEntry.


        :return: The kms_keys_to_grant of this S3DataAccessAssetSourceEntry.
        :rtype: List
        """
        return self._kms_keys_to_grant

    @kms_keys_to_grant.setter
    def kms_keys_to_grant(self, kms_keys_to_grant):
        """Sets the kms_keys_to_grant of this S3DataAccessAssetSourceEntry.


        :param kms_keys_to_grant: The kms_keys_to_grant of this S3DataAccessAssetSourceEntry.
        :type kms_keys_to_grant: List
        """

        self._kms_keys_to_grant = kms_keys_to_grant
