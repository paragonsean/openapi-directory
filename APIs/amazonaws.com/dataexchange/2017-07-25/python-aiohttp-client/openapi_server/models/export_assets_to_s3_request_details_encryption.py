# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server_side_encryption_types import ServerSideEncryptionTypes
from openapi_server import util


class ExportAssetsToS3RequestDetailsEncryption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kms_key_arn: str=None, type: ServerSideEncryptionTypes=None):
        """ExportAssetsToS3RequestDetailsEncryption - a model defined in OpenAPI

        :param kms_key_arn: The kms_key_arn of this ExportAssetsToS3RequestDetailsEncryption.
        :param type: The type of this ExportAssetsToS3RequestDetailsEncryption.
        """
        self.openapi_types = {
            'kms_key_arn': str,
            'type': ServerSideEncryptionTypes
        }

        self.attribute_map = {
            'kms_key_arn': 'KmsKeyArn',
            'type': 'Type'
        }

        self._kms_key_arn = kms_key_arn
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportAssetsToS3RequestDetailsEncryption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportAssetsToS3RequestDetails_Encryption of this ExportAssetsToS3RequestDetailsEncryption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this ExportAssetsToS3RequestDetailsEncryption.


        :return: The kms_key_arn of this ExportAssetsToS3RequestDetailsEncryption.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this ExportAssetsToS3RequestDetailsEncryption.


        :param kms_key_arn: The kms_key_arn of this ExportAssetsToS3RequestDetailsEncryption.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn

    @property
    def type(self):
        """Gets the type of this ExportAssetsToS3RequestDetailsEncryption.


        :return: The type of this ExportAssetsToS3RequestDetailsEncryption.
        :rtype: ServerSideEncryptionTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExportAssetsToS3RequestDetailsEncryption.


        :param type: The type of this ExportAssetsToS3RequestDetailsEncryption.
        :type type: ServerSideEncryptionTypes
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
