# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_event_action_request_action import CreateEventActionRequestAction
from openapi_server.models.create_event_action_request_event import CreateEventActionRequestEvent
from openapi_server import util


class CreateEventActionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: CreateEventActionRequestAction=None, event: CreateEventActionRequestEvent=None):
        """CreateEventActionRequest - a model defined in OpenAPI

        :param action: The action of this CreateEventActionRequest.
        :param event: The event of this CreateEventActionRequest.
        """
        self.openapi_types = {
            'action': CreateEventActionRequestAction,
            'event': CreateEventActionRequestEvent
        }

        self.attribute_map = {
            'action': 'Action',
            'event': 'Event'
        }

        self._action = action
        self._event = event

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateEventActionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateEventAction_request of this CreateEventActionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this CreateEventActionRequest.


        :return: The action of this CreateEventActionRequest.
        :rtype: CreateEventActionRequestAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateEventActionRequest.


        :param action: The action of this CreateEventActionRequest.
        :type action: CreateEventActionRequestAction
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def event(self):
        """Gets the event of this CreateEventActionRequest.


        :return: The event of this CreateEventActionRequest.
        :rtype: CreateEventActionRequestEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this CreateEventActionRequest.


        :param event: The event of this CreateEventActionRequest.
        :type event: CreateEventActionRequestEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event
