/*
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ProtocolType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseDetailsImportAssetFromApiGatewayApi
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:38.729802-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseDetailsImportAssetFromApiGatewayApi {
  public static final String SERIALIZED_NAME_API_DESCRIPTION = "ApiDescription";
  @SerializedName(SERIALIZED_NAME_API_DESCRIPTION)
  private String apiDescription;

  public static final String SERIALIZED_NAME_API_ID = "ApiId";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  public static final String SERIALIZED_NAME_API_KEY = "ApiKey";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_API_NAME = "ApiName";
  @SerializedName(SERIALIZED_NAME_API_NAME)
  private String apiName;

  public static final String SERIALIZED_NAME_API_SPECIFICATION_MD5_HASH = "ApiSpecificationMd5Hash";
  @SerializedName(SERIALIZED_NAME_API_SPECIFICATION_MD5_HASH)
  private String apiSpecificationMd5Hash;

  public static final String SERIALIZED_NAME_API_SPECIFICATION_UPLOAD_URL = "ApiSpecificationUploadUrl";
  @SerializedName(SERIALIZED_NAME_API_SPECIFICATION_UPLOAD_URL)
  private String apiSpecificationUploadUrl;

  public static final String SERIALIZED_NAME_API_SPECIFICATION_UPLOAD_URL_EXPIRES_AT = "ApiSpecificationUploadUrlExpiresAt";
  @SerializedName(SERIALIZED_NAME_API_SPECIFICATION_UPLOAD_URL_EXPIRES_AT)
  private OffsetDateTime apiSpecificationUploadUrlExpiresAt;

  public static final String SERIALIZED_NAME_DATA_SET_ID = "DataSetId";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ID)
  private String dataSetId;

  public static final String SERIALIZED_NAME_PROTOCOL_TYPE = "ProtocolType";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_TYPE)
  private ProtocolType protocolType;

  public static final String SERIALIZED_NAME_REVISION_ID = "RevisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_STAGE = "Stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private String stage;

  public ResponseDetailsImportAssetFromApiGatewayApi() {
  }

  public ResponseDetailsImportAssetFromApiGatewayApi apiDescription(String apiDescription) {
    this.apiDescription = apiDescription;
    return this;
  }

  /**
   * Get apiDescription
   * @return apiDescription
   */
  @javax.annotation.Nullable
  public String getApiDescription() {
    return apiDescription;
  }

  public void setApiDescription(String apiDescription) {
    this.apiDescription = apiDescription;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * Get apiId
   * @return apiId
   */
  @javax.annotation.Nonnull
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi apiKey(String apiKey) {
    this.apiKey = apiKey;
    return this;
  }

  /**
   * Get apiKey
   * @return apiKey
   */
  @javax.annotation.Nullable
  public String getApiKey() {
    return apiKey;
  }

  public void setApiKey(String apiKey) {
    this.apiKey = apiKey;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi apiName(String apiName) {
    this.apiName = apiName;
    return this;
  }

  /**
   * Get apiName
   * @return apiName
   */
  @javax.annotation.Nonnull
  public String getApiName() {
    return apiName;
  }

  public void setApiName(String apiName) {
    this.apiName = apiName;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi apiSpecificationMd5Hash(String apiSpecificationMd5Hash) {
    this.apiSpecificationMd5Hash = apiSpecificationMd5Hash;
    return this;
  }

  /**
   * Get apiSpecificationMd5Hash
   * @return apiSpecificationMd5Hash
   */
  @javax.annotation.Nonnull
  public String getApiSpecificationMd5Hash() {
    return apiSpecificationMd5Hash;
  }

  public void setApiSpecificationMd5Hash(String apiSpecificationMd5Hash) {
    this.apiSpecificationMd5Hash = apiSpecificationMd5Hash;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi apiSpecificationUploadUrl(String apiSpecificationUploadUrl) {
    this.apiSpecificationUploadUrl = apiSpecificationUploadUrl;
    return this;
  }

  /**
   * Get apiSpecificationUploadUrl
   * @return apiSpecificationUploadUrl
   */
  @javax.annotation.Nonnull
  public String getApiSpecificationUploadUrl() {
    return apiSpecificationUploadUrl;
  }

  public void setApiSpecificationUploadUrl(String apiSpecificationUploadUrl) {
    this.apiSpecificationUploadUrl = apiSpecificationUploadUrl;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi apiSpecificationUploadUrlExpiresAt(OffsetDateTime apiSpecificationUploadUrlExpiresAt) {
    this.apiSpecificationUploadUrlExpiresAt = apiSpecificationUploadUrlExpiresAt;
    return this;
  }

  /**
   * Get apiSpecificationUploadUrlExpiresAt
   * @return apiSpecificationUploadUrlExpiresAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getApiSpecificationUploadUrlExpiresAt() {
    return apiSpecificationUploadUrlExpiresAt;
  }

  public void setApiSpecificationUploadUrlExpiresAt(OffsetDateTime apiSpecificationUploadUrlExpiresAt) {
    this.apiSpecificationUploadUrlExpiresAt = apiSpecificationUploadUrlExpiresAt;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi dataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
    return this;
  }

  /**
   * Get dataSetId
   * @return dataSetId
   */
  @javax.annotation.Nonnull
  public String getDataSetId() {
    return dataSetId;
  }

  public void setDataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi protocolType(ProtocolType protocolType) {
    this.protocolType = protocolType;
    return this;
  }

  /**
   * Get protocolType
   * @return protocolType
   */
  @javax.annotation.Nonnull
  public ProtocolType getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(ProtocolType protocolType) {
    this.protocolType = protocolType;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi revisionId(String revisionId) {
    this.revisionId = revisionId;
    return this;
  }

  /**
   * Get revisionId
   * @return revisionId
   */
  @javax.annotation.Nonnull
  public String getRevisionId() {
    return revisionId;
  }

  public void setRevisionId(String revisionId) {
    this.revisionId = revisionId;
  }


  public ResponseDetailsImportAssetFromApiGatewayApi stage(String stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Get stage
   * @return stage
   */
  @javax.annotation.Nonnull
  public String getStage() {
    return stage;
  }

  public void setStage(String stage) {
    this.stage = stage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseDetailsImportAssetFromApiGatewayApi responseDetailsImportAssetFromApiGatewayApi = (ResponseDetailsImportAssetFromApiGatewayApi) o;
    return Objects.equals(this.apiDescription, responseDetailsImportAssetFromApiGatewayApi.apiDescription) &&
        Objects.equals(this.apiId, responseDetailsImportAssetFromApiGatewayApi.apiId) &&
        Objects.equals(this.apiKey, responseDetailsImportAssetFromApiGatewayApi.apiKey) &&
        Objects.equals(this.apiName, responseDetailsImportAssetFromApiGatewayApi.apiName) &&
        Objects.equals(this.apiSpecificationMd5Hash, responseDetailsImportAssetFromApiGatewayApi.apiSpecificationMd5Hash) &&
        Objects.equals(this.apiSpecificationUploadUrl, responseDetailsImportAssetFromApiGatewayApi.apiSpecificationUploadUrl) &&
        Objects.equals(this.apiSpecificationUploadUrlExpiresAt, responseDetailsImportAssetFromApiGatewayApi.apiSpecificationUploadUrlExpiresAt) &&
        Objects.equals(this.dataSetId, responseDetailsImportAssetFromApiGatewayApi.dataSetId) &&
        Objects.equals(this.protocolType, responseDetailsImportAssetFromApiGatewayApi.protocolType) &&
        Objects.equals(this.revisionId, responseDetailsImportAssetFromApiGatewayApi.revisionId) &&
        Objects.equals(this.stage, responseDetailsImportAssetFromApiGatewayApi.stage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiDescription, apiId, apiKey, apiName, apiSpecificationMd5Hash, apiSpecificationUploadUrl, apiSpecificationUploadUrlExpiresAt, dataSetId, protocolType, revisionId, stage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseDetailsImportAssetFromApiGatewayApi {\n");
    sb.append("    apiDescription: ").append(toIndentedString(apiDescription)).append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    apiName: ").append(toIndentedString(apiName)).append("\n");
    sb.append("    apiSpecificationMd5Hash: ").append(toIndentedString(apiSpecificationMd5Hash)).append("\n");
    sb.append("    apiSpecificationUploadUrl: ").append(toIndentedString(apiSpecificationUploadUrl)).append("\n");
    sb.append("    apiSpecificationUploadUrlExpiresAt: ").append(toIndentedString(apiSpecificationUploadUrlExpiresAt)).append("\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiDescription");
    openapiFields.add("ApiId");
    openapiFields.add("ApiKey");
    openapiFields.add("ApiName");
    openapiFields.add("ApiSpecificationMd5Hash");
    openapiFields.add("ApiSpecificationUploadUrl");
    openapiFields.add("ApiSpecificationUploadUrlExpiresAt");
    openapiFields.add("DataSetId");
    openapiFields.add("ProtocolType");
    openapiFields.add("RevisionId");
    openapiFields.add("Stage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ApiId");
    openapiRequiredFields.add("ApiName");
    openapiRequiredFields.add("ApiSpecificationMd5Hash");
    openapiRequiredFields.add("ApiSpecificationUploadUrl");
    openapiRequiredFields.add("ApiSpecificationUploadUrlExpiresAt");
    openapiRequiredFields.add("DataSetId");
    openapiRequiredFields.add("ProtocolType");
    openapiRequiredFields.add("RevisionId");
    openapiRequiredFields.add("Stage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseDetailsImportAssetFromApiGatewayApi
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseDetailsImportAssetFromApiGatewayApi.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseDetailsImportAssetFromApiGatewayApi is not found in the empty JSON string", ResponseDetailsImportAssetFromApiGatewayApi.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseDetailsImportAssetFromApiGatewayApi.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseDetailsImportAssetFromApiGatewayApi` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ResponseDetailsImportAssetFromApiGatewayApi.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiDescription`
      if (jsonObj.get("ApiDescription") != null && !jsonObj.get("ApiDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiDescription"));
      }
      // validate the required field `ApiId`
      String.validateJsonElement(jsonObj.get("ApiId"));
      // validate the optional field `ApiKey`
      if (jsonObj.get("ApiKey") != null && !jsonObj.get("ApiKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiKey"));
      }
      // validate the required field `ApiName`
      String.validateJsonElement(jsonObj.get("ApiName"));
      // validate the required field `ApiSpecificationMd5Hash`
      String.validateJsonElement(jsonObj.get("ApiSpecificationMd5Hash"));
      // validate the required field `ApiSpecificationUploadUrl`
      String.validateJsonElement(jsonObj.get("ApiSpecificationUploadUrl"));
      // validate the required field `ApiSpecificationUploadUrlExpiresAt`
      OffsetDateTime.validateJsonElement(jsonObj.get("ApiSpecificationUploadUrlExpiresAt"));
      // validate the required field `DataSetId`
      String.validateJsonElement(jsonObj.get("DataSetId"));
      // validate the required field `ProtocolType`
      ProtocolType.validateJsonElement(jsonObj.get("ProtocolType"));
      // validate the required field `RevisionId`
      String.validateJsonElement(jsonObj.get("RevisionId"));
      // validate the required field `Stage`
      String.validateJsonElement(jsonObj.get("Stage"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseDetailsImportAssetFromApiGatewayApi.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseDetailsImportAssetFromApiGatewayApi' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseDetailsImportAssetFromApiGatewayApi> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseDetailsImportAssetFromApiGatewayApi.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseDetailsImportAssetFromApiGatewayApi>() {
           @Override
           public void write(JsonWriter out, ResponseDetailsImportAssetFromApiGatewayApi value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseDetailsImportAssetFromApiGatewayApi read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseDetailsImportAssetFromApiGatewayApi given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseDetailsImportAssetFromApiGatewayApi
   * @throws IOException if the JSON string is invalid with respect to ResponseDetailsImportAssetFromApiGatewayApi
   */
  public static ResponseDetailsImportAssetFromApiGatewayApi fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseDetailsImportAssetFromApiGatewayApi.class);
  }

  /**
   * Convert an instance of ResponseDetailsImportAssetFromApiGatewayApi to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

