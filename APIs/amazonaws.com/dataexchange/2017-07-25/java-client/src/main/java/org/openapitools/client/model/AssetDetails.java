/*
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AssetDetailsApiGatewayApiAsset;
import org.openapitools.client.model.AssetDetailsLakeFormationDataPermissionAsset;
import org.openapitools.client.model.AssetDetailsRedshiftDataShareAsset;
import org.openapitools.client.model.AssetDetailsS3DataAccessAsset;
import org.openapitools.client.model.AssetDetailsS3SnapshotAsset;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the asset.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:38.729802-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetDetails {
  public static final String SERIALIZED_NAME_S3_SNAPSHOT_ASSET = "S3SnapshotAsset";
  @SerializedName(SERIALIZED_NAME_S3_SNAPSHOT_ASSET)
  private AssetDetailsS3SnapshotAsset s3SnapshotAsset;

  public static final String SERIALIZED_NAME_REDSHIFT_DATA_SHARE_ASSET = "RedshiftDataShareAsset";
  @SerializedName(SERIALIZED_NAME_REDSHIFT_DATA_SHARE_ASSET)
  private AssetDetailsRedshiftDataShareAsset redshiftDataShareAsset;

  public static final String SERIALIZED_NAME_API_GATEWAY_API_ASSET = "ApiGatewayApiAsset";
  @SerializedName(SERIALIZED_NAME_API_GATEWAY_API_ASSET)
  private AssetDetailsApiGatewayApiAsset apiGatewayApiAsset;

  public static final String SERIALIZED_NAME_S3_DATA_ACCESS_ASSET = "S3DataAccessAsset";
  @SerializedName(SERIALIZED_NAME_S3_DATA_ACCESS_ASSET)
  private AssetDetailsS3DataAccessAsset s3DataAccessAsset;

  public static final String SERIALIZED_NAME_LAKE_FORMATION_DATA_PERMISSION_ASSET = "LakeFormationDataPermissionAsset";
  @SerializedName(SERIALIZED_NAME_LAKE_FORMATION_DATA_PERMISSION_ASSET)
  private AssetDetailsLakeFormationDataPermissionAsset lakeFormationDataPermissionAsset;

  public AssetDetails() {
  }

  public AssetDetails s3SnapshotAsset(AssetDetailsS3SnapshotAsset s3SnapshotAsset) {
    this.s3SnapshotAsset = s3SnapshotAsset;
    return this;
  }

  /**
   * Get s3SnapshotAsset
   * @return s3SnapshotAsset
   */
  @javax.annotation.Nullable
  public AssetDetailsS3SnapshotAsset getS3SnapshotAsset() {
    return s3SnapshotAsset;
  }

  public void setS3SnapshotAsset(AssetDetailsS3SnapshotAsset s3SnapshotAsset) {
    this.s3SnapshotAsset = s3SnapshotAsset;
  }


  public AssetDetails redshiftDataShareAsset(AssetDetailsRedshiftDataShareAsset redshiftDataShareAsset) {
    this.redshiftDataShareAsset = redshiftDataShareAsset;
    return this;
  }

  /**
   * Get redshiftDataShareAsset
   * @return redshiftDataShareAsset
   */
  @javax.annotation.Nullable
  public AssetDetailsRedshiftDataShareAsset getRedshiftDataShareAsset() {
    return redshiftDataShareAsset;
  }

  public void setRedshiftDataShareAsset(AssetDetailsRedshiftDataShareAsset redshiftDataShareAsset) {
    this.redshiftDataShareAsset = redshiftDataShareAsset;
  }


  public AssetDetails apiGatewayApiAsset(AssetDetailsApiGatewayApiAsset apiGatewayApiAsset) {
    this.apiGatewayApiAsset = apiGatewayApiAsset;
    return this;
  }

  /**
   * Get apiGatewayApiAsset
   * @return apiGatewayApiAsset
   */
  @javax.annotation.Nullable
  public AssetDetailsApiGatewayApiAsset getApiGatewayApiAsset() {
    return apiGatewayApiAsset;
  }

  public void setApiGatewayApiAsset(AssetDetailsApiGatewayApiAsset apiGatewayApiAsset) {
    this.apiGatewayApiAsset = apiGatewayApiAsset;
  }


  public AssetDetails s3DataAccessAsset(AssetDetailsS3DataAccessAsset s3DataAccessAsset) {
    this.s3DataAccessAsset = s3DataAccessAsset;
    return this;
  }

  /**
   * Get s3DataAccessAsset
   * @return s3DataAccessAsset
   */
  @javax.annotation.Nullable
  public AssetDetailsS3DataAccessAsset getS3DataAccessAsset() {
    return s3DataAccessAsset;
  }

  public void setS3DataAccessAsset(AssetDetailsS3DataAccessAsset s3DataAccessAsset) {
    this.s3DataAccessAsset = s3DataAccessAsset;
  }


  public AssetDetails lakeFormationDataPermissionAsset(AssetDetailsLakeFormationDataPermissionAsset lakeFormationDataPermissionAsset) {
    this.lakeFormationDataPermissionAsset = lakeFormationDataPermissionAsset;
    return this;
  }

  /**
   * Get lakeFormationDataPermissionAsset
   * @return lakeFormationDataPermissionAsset
   */
  @javax.annotation.Nullable
  public AssetDetailsLakeFormationDataPermissionAsset getLakeFormationDataPermissionAsset() {
    return lakeFormationDataPermissionAsset;
  }

  public void setLakeFormationDataPermissionAsset(AssetDetailsLakeFormationDataPermissionAsset lakeFormationDataPermissionAsset) {
    this.lakeFormationDataPermissionAsset = lakeFormationDataPermissionAsset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetDetails assetDetails = (AssetDetails) o;
    return Objects.equals(this.s3SnapshotAsset, assetDetails.s3SnapshotAsset) &&
        Objects.equals(this.redshiftDataShareAsset, assetDetails.redshiftDataShareAsset) &&
        Objects.equals(this.apiGatewayApiAsset, assetDetails.apiGatewayApiAsset) &&
        Objects.equals(this.s3DataAccessAsset, assetDetails.s3DataAccessAsset) &&
        Objects.equals(this.lakeFormationDataPermissionAsset, assetDetails.lakeFormationDataPermissionAsset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3SnapshotAsset, redshiftDataShareAsset, apiGatewayApiAsset, s3DataAccessAsset, lakeFormationDataPermissionAsset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetDetails {\n");
    sb.append("    s3SnapshotAsset: ").append(toIndentedString(s3SnapshotAsset)).append("\n");
    sb.append("    redshiftDataShareAsset: ").append(toIndentedString(redshiftDataShareAsset)).append("\n");
    sb.append("    apiGatewayApiAsset: ").append(toIndentedString(apiGatewayApiAsset)).append("\n");
    sb.append("    s3DataAccessAsset: ").append(toIndentedString(s3DataAccessAsset)).append("\n");
    sb.append("    lakeFormationDataPermissionAsset: ").append(toIndentedString(lakeFormationDataPermissionAsset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3SnapshotAsset");
    openapiFields.add("RedshiftDataShareAsset");
    openapiFields.add("ApiGatewayApiAsset");
    openapiFields.add("S3DataAccessAsset");
    openapiFields.add("LakeFormationDataPermissionAsset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetDetails is not found in the empty JSON string", AssetDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3SnapshotAsset`
      if (jsonObj.get("S3SnapshotAsset") != null && !jsonObj.get("S3SnapshotAsset").isJsonNull()) {
        AssetDetailsS3SnapshotAsset.validateJsonElement(jsonObj.get("S3SnapshotAsset"));
      }
      // validate the optional field `RedshiftDataShareAsset`
      if (jsonObj.get("RedshiftDataShareAsset") != null && !jsonObj.get("RedshiftDataShareAsset").isJsonNull()) {
        AssetDetailsRedshiftDataShareAsset.validateJsonElement(jsonObj.get("RedshiftDataShareAsset"));
      }
      // validate the optional field `ApiGatewayApiAsset`
      if (jsonObj.get("ApiGatewayApiAsset") != null && !jsonObj.get("ApiGatewayApiAsset").isJsonNull()) {
        AssetDetailsApiGatewayApiAsset.validateJsonElement(jsonObj.get("ApiGatewayApiAsset"));
      }
      // validate the optional field `S3DataAccessAsset`
      if (jsonObj.get("S3DataAccessAsset") != null && !jsonObj.get("S3DataAccessAsset").isJsonNull()) {
        AssetDetailsS3DataAccessAsset.validateJsonElement(jsonObj.get("S3DataAccessAsset"));
      }
      // validate the optional field `LakeFormationDataPermissionAsset`
      if (jsonObj.get("LakeFormationDataPermissionAsset") != null && !jsonObj.get("LakeFormationDataPermissionAsset").isJsonNull()) {
        AssetDetailsLakeFormationDataPermissionAsset.validateJsonElement(jsonObj.get("LakeFormationDataPermissionAsset"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetDetails>() {
           @Override
           public void write(JsonWriter out, AssetDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetDetails
   * @throws IOException if the JSON string is invalid with respect to AssetDetails
   */
  public static AssetDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetDetails.class);
  }

  /**
   * Convert an instance of AssetDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

