/*
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateJobRequestDetailsCreateS3DataAccessFromS3Bucket;
import org.openapitools.client.model.CreateJobRequestDetailsExportAssetToSignedUrl;
import org.openapitools.client.model.CreateJobRequestDetailsExportAssetsToS3;
import org.openapitools.client.model.CreateJobRequestDetailsExportRevisionsToS3;
import org.openapitools.client.model.CreateJobRequestDetailsImportAssetFromApiGatewayApi;
import org.openapitools.client.model.CreateJobRequestDetailsImportAssetFromSignedUrl;
import org.openapitools.client.model.CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy;
import org.openapitools.client.model.CreateJobRequestDetailsImportAssetsFromRedshiftDataShares;
import org.openapitools.client.model.CreateJobRequestDetailsImportAssetsFromS3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The details for the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:38.729802-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestDetails {
  public static final String SERIALIZED_NAME_EXPORT_ASSET_TO_SIGNED_URL = "ExportAssetToSignedUrl";
  @SerializedName(SERIALIZED_NAME_EXPORT_ASSET_TO_SIGNED_URL)
  private CreateJobRequestDetailsExportAssetToSignedUrl exportAssetToSignedUrl;

  public static final String SERIALIZED_NAME_EXPORT_ASSETS_TO_S3 = "ExportAssetsToS3";
  @SerializedName(SERIALIZED_NAME_EXPORT_ASSETS_TO_S3)
  private CreateJobRequestDetailsExportAssetsToS3 exportAssetsToS3;

  public static final String SERIALIZED_NAME_EXPORT_REVISIONS_TO_S3 = "ExportRevisionsToS3";
  @SerializedName(SERIALIZED_NAME_EXPORT_REVISIONS_TO_S3)
  private CreateJobRequestDetailsExportRevisionsToS3 exportRevisionsToS3;

  public static final String SERIALIZED_NAME_IMPORT_ASSET_FROM_SIGNED_URL = "ImportAssetFromSignedUrl";
  @SerializedName(SERIALIZED_NAME_IMPORT_ASSET_FROM_SIGNED_URL)
  private CreateJobRequestDetailsImportAssetFromSignedUrl importAssetFromSignedUrl;

  public static final String SERIALIZED_NAME_IMPORT_ASSETS_FROM_S3 = "ImportAssetsFromS3";
  @SerializedName(SERIALIZED_NAME_IMPORT_ASSETS_FROM_S3)
  private CreateJobRequestDetailsImportAssetsFromS3 importAssetsFromS3;

  public static final String SERIALIZED_NAME_IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES = "ImportAssetsFromRedshiftDataShares";
  @SerializedName(SERIALIZED_NAME_IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES)
  private CreateJobRequestDetailsImportAssetsFromRedshiftDataShares importAssetsFromRedshiftDataShares;

  public static final String SERIALIZED_NAME_IMPORT_ASSET_FROM_API_GATEWAY_API = "ImportAssetFromApiGatewayApi";
  @SerializedName(SERIALIZED_NAME_IMPORT_ASSET_FROM_API_GATEWAY_API)
  private CreateJobRequestDetailsImportAssetFromApiGatewayApi importAssetFromApiGatewayApi;

  public static final String SERIALIZED_NAME_CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET = "CreateS3DataAccessFromS3Bucket";
  @SerializedName(SERIALIZED_NAME_CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET)
  private CreateJobRequestDetailsCreateS3DataAccessFromS3Bucket createS3DataAccessFromS3Bucket;

  public static final String SERIALIZED_NAME_IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY = "ImportAssetsFromLakeFormationTagPolicy";
  @SerializedName(SERIALIZED_NAME_IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY)
  private CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy importAssetsFromLakeFormationTagPolicy;

  public RequestDetails() {
  }

  public RequestDetails exportAssetToSignedUrl(CreateJobRequestDetailsExportAssetToSignedUrl exportAssetToSignedUrl) {
    this.exportAssetToSignedUrl = exportAssetToSignedUrl;
    return this;
  }

  /**
   * Get exportAssetToSignedUrl
   * @return exportAssetToSignedUrl
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsExportAssetToSignedUrl getExportAssetToSignedUrl() {
    return exportAssetToSignedUrl;
  }

  public void setExportAssetToSignedUrl(CreateJobRequestDetailsExportAssetToSignedUrl exportAssetToSignedUrl) {
    this.exportAssetToSignedUrl = exportAssetToSignedUrl;
  }


  public RequestDetails exportAssetsToS3(CreateJobRequestDetailsExportAssetsToS3 exportAssetsToS3) {
    this.exportAssetsToS3 = exportAssetsToS3;
    return this;
  }

  /**
   * Get exportAssetsToS3
   * @return exportAssetsToS3
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsExportAssetsToS3 getExportAssetsToS3() {
    return exportAssetsToS3;
  }

  public void setExportAssetsToS3(CreateJobRequestDetailsExportAssetsToS3 exportAssetsToS3) {
    this.exportAssetsToS3 = exportAssetsToS3;
  }


  public RequestDetails exportRevisionsToS3(CreateJobRequestDetailsExportRevisionsToS3 exportRevisionsToS3) {
    this.exportRevisionsToS3 = exportRevisionsToS3;
    return this;
  }

  /**
   * Get exportRevisionsToS3
   * @return exportRevisionsToS3
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsExportRevisionsToS3 getExportRevisionsToS3() {
    return exportRevisionsToS3;
  }

  public void setExportRevisionsToS3(CreateJobRequestDetailsExportRevisionsToS3 exportRevisionsToS3) {
    this.exportRevisionsToS3 = exportRevisionsToS3;
  }


  public RequestDetails importAssetFromSignedUrl(CreateJobRequestDetailsImportAssetFromSignedUrl importAssetFromSignedUrl) {
    this.importAssetFromSignedUrl = importAssetFromSignedUrl;
    return this;
  }

  /**
   * Get importAssetFromSignedUrl
   * @return importAssetFromSignedUrl
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsImportAssetFromSignedUrl getImportAssetFromSignedUrl() {
    return importAssetFromSignedUrl;
  }

  public void setImportAssetFromSignedUrl(CreateJobRequestDetailsImportAssetFromSignedUrl importAssetFromSignedUrl) {
    this.importAssetFromSignedUrl = importAssetFromSignedUrl;
  }


  public RequestDetails importAssetsFromS3(CreateJobRequestDetailsImportAssetsFromS3 importAssetsFromS3) {
    this.importAssetsFromS3 = importAssetsFromS3;
    return this;
  }

  /**
   * Get importAssetsFromS3
   * @return importAssetsFromS3
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsImportAssetsFromS3 getImportAssetsFromS3() {
    return importAssetsFromS3;
  }

  public void setImportAssetsFromS3(CreateJobRequestDetailsImportAssetsFromS3 importAssetsFromS3) {
    this.importAssetsFromS3 = importAssetsFromS3;
  }


  public RequestDetails importAssetsFromRedshiftDataShares(CreateJobRequestDetailsImportAssetsFromRedshiftDataShares importAssetsFromRedshiftDataShares) {
    this.importAssetsFromRedshiftDataShares = importAssetsFromRedshiftDataShares;
    return this;
  }

  /**
   * Get importAssetsFromRedshiftDataShares
   * @return importAssetsFromRedshiftDataShares
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsImportAssetsFromRedshiftDataShares getImportAssetsFromRedshiftDataShares() {
    return importAssetsFromRedshiftDataShares;
  }

  public void setImportAssetsFromRedshiftDataShares(CreateJobRequestDetailsImportAssetsFromRedshiftDataShares importAssetsFromRedshiftDataShares) {
    this.importAssetsFromRedshiftDataShares = importAssetsFromRedshiftDataShares;
  }


  public RequestDetails importAssetFromApiGatewayApi(CreateJobRequestDetailsImportAssetFromApiGatewayApi importAssetFromApiGatewayApi) {
    this.importAssetFromApiGatewayApi = importAssetFromApiGatewayApi;
    return this;
  }

  /**
   * Get importAssetFromApiGatewayApi
   * @return importAssetFromApiGatewayApi
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsImportAssetFromApiGatewayApi getImportAssetFromApiGatewayApi() {
    return importAssetFromApiGatewayApi;
  }

  public void setImportAssetFromApiGatewayApi(CreateJobRequestDetailsImportAssetFromApiGatewayApi importAssetFromApiGatewayApi) {
    this.importAssetFromApiGatewayApi = importAssetFromApiGatewayApi;
  }


  public RequestDetails createS3DataAccessFromS3Bucket(CreateJobRequestDetailsCreateS3DataAccessFromS3Bucket createS3DataAccessFromS3Bucket) {
    this.createS3DataAccessFromS3Bucket = createS3DataAccessFromS3Bucket;
    return this;
  }

  /**
   * Get createS3DataAccessFromS3Bucket
   * @return createS3DataAccessFromS3Bucket
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsCreateS3DataAccessFromS3Bucket getCreateS3DataAccessFromS3Bucket() {
    return createS3DataAccessFromS3Bucket;
  }

  public void setCreateS3DataAccessFromS3Bucket(CreateJobRequestDetailsCreateS3DataAccessFromS3Bucket createS3DataAccessFromS3Bucket) {
    this.createS3DataAccessFromS3Bucket = createS3DataAccessFromS3Bucket;
  }


  public RequestDetails importAssetsFromLakeFormationTagPolicy(CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy importAssetsFromLakeFormationTagPolicy) {
    this.importAssetsFromLakeFormationTagPolicy = importAssetsFromLakeFormationTagPolicy;
    return this;
  }

  /**
   * Get importAssetsFromLakeFormationTagPolicy
   * @return importAssetsFromLakeFormationTagPolicy
   */
  @javax.annotation.Nullable
  public CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy getImportAssetsFromLakeFormationTagPolicy() {
    return importAssetsFromLakeFormationTagPolicy;
  }

  public void setImportAssetsFromLakeFormationTagPolicy(CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy importAssetsFromLakeFormationTagPolicy) {
    this.importAssetsFromLakeFormationTagPolicy = importAssetsFromLakeFormationTagPolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestDetails requestDetails = (RequestDetails) o;
    return Objects.equals(this.exportAssetToSignedUrl, requestDetails.exportAssetToSignedUrl) &&
        Objects.equals(this.exportAssetsToS3, requestDetails.exportAssetsToS3) &&
        Objects.equals(this.exportRevisionsToS3, requestDetails.exportRevisionsToS3) &&
        Objects.equals(this.importAssetFromSignedUrl, requestDetails.importAssetFromSignedUrl) &&
        Objects.equals(this.importAssetsFromS3, requestDetails.importAssetsFromS3) &&
        Objects.equals(this.importAssetsFromRedshiftDataShares, requestDetails.importAssetsFromRedshiftDataShares) &&
        Objects.equals(this.importAssetFromApiGatewayApi, requestDetails.importAssetFromApiGatewayApi) &&
        Objects.equals(this.createS3DataAccessFromS3Bucket, requestDetails.createS3DataAccessFromS3Bucket) &&
        Objects.equals(this.importAssetsFromLakeFormationTagPolicy, requestDetails.importAssetsFromLakeFormationTagPolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportAssetToSignedUrl, exportAssetsToS3, exportRevisionsToS3, importAssetFromSignedUrl, importAssetsFromS3, importAssetsFromRedshiftDataShares, importAssetFromApiGatewayApi, createS3DataAccessFromS3Bucket, importAssetsFromLakeFormationTagPolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestDetails {\n");
    sb.append("    exportAssetToSignedUrl: ").append(toIndentedString(exportAssetToSignedUrl)).append("\n");
    sb.append("    exportAssetsToS3: ").append(toIndentedString(exportAssetsToS3)).append("\n");
    sb.append("    exportRevisionsToS3: ").append(toIndentedString(exportRevisionsToS3)).append("\n");
    sb.append("    importAssetFromSignedUrl: ").append(toIndentedString(importAssetFromSignedUrl)).append("\n");
    sb.append("    importAssetsFromS3: ").append(toIndentedString(importAssetsFromS3)).append("\n");
    sb.append("    importAssetsFromRedshiftDataShares: ").append(toIndentedString(importAssetsFromRedshiftDataShares)).append("\n");
    sb.append("    importAssetFromApiGatewayApi: ").append(toIndentedString(importAssetFromApiGatewayApi)).append("\n");
    sb.append("    createS3DataAccessFromS3Bucket: ").append(toIndentedString(createS3DataAccessFromS3Bucket)).append("\n");
    sb.append("    importAssetsFromLakeFormationTagPolicy: ").append(toIndentedString(importAssetsFromLakeFormationTagPolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExportAssetToSignedUrl");
    openapiFields.add("ExportAssetsToS3");
    openapiFields.add("ExportRevisionsToS3");
    openapiFields.add("ImportAssetFromSignedUrl");
    openapiFields.add("ImportAssetsFromS3");
    openapiFields.add("ImportAssetsFromRedshiftDataShares");
    openapiFields.add("ImportAssetFromApiGatewayApi");
    openapiFields.add("CreateS3DataAccessFromS3Bucket");
    openapiFields.add("ImportAssetsFromLakeFormationTagPolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestDetails is not found in the empty JSON string", RequestDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ExportAssetToSignedUrl`
      if (jsonObj.get("ExportAssetToSignedUrl") != null && !jsonObj.get("ExportAssetToSignedUrl").isJsonNull()) {
        CreateJobRequestDetailsExportAssetToSignedUrl.validateJsonElement(jsonObj.get("ExportAssetToSignedUrl"));
      }
      // validate the optional field `ExportAssetsToS3`
      if (jsonObj.get("ExportAssetsToS3") != null && !jsonObj.get("ExportAssetsToS3").isJsonNull()) {
        CreateJobRequestDetailsExportAssetsToS3.validateJsonElement(jsonObj.get("ExportAssetsToS3"));
      }
      // validate the optional field `ExportRevisionsToS3`
      if (jsonObj.get("ExportRevisionsToS3") != null && !jsonObj.get("ExportRevisionsToS3").isJsonNull()) {
        CreateJobRequestDetailsExportRevisionsToS3.validateJsonElement(jsonObj.get("ExportRevisionsToS3"));
      }
      // validate the optional field `ImportAssetFromSignedUrl`
      if (jsonObj.get("ImportAssetFromSignedUrl") != null && !jsonObj.get("ImportAssetFromSignedUrl").isJsonNull()) {
        CreateJobRequestDetailsImportAssetFromSignedUrl.validateJsonElement(jsonObj.get("ImportAssetFromSignedUrl"));
      }
      // validate the optional field `ImportAssetsFromS3`
      if (jsonObj.get("ImportAssetsFromS3") != null && !jsonObj.get("ImportAssetsFromS3").isJsonNull()) {
        CreateJobRequestDetailsImportAssetsFromS3.validateJsonElement(jsonObj.get("ImportAssetsFromS3"));
      }
      // validate the optional field `ImportAssetsFromRedshiftDataShares`
      if (jsonObj.get("ImportAssetsFromRedshiftDataShares") != null && !jsonObj.get("ImportAssetsFromRedshiftDataShares").isJsonNull()) {
        CreateJobRequestDetailsImportAssetsFromRedshiftDataShares.validateJsonElement(jsonObj.get("ImportAssetsFromRedshiftDataShares"));
      }
      // validate the optional field `ImportAssetFromApiGatewayApi`
      if (jsonObj.get("ImportAssetFromApiGatewayApi") != null && !jsonObj.get("ImportAssetFromApiGatewayApi").isJsonNull()) {
        CreateJobRequestDetailsImportAssetFromApiGatewayApi.validateJsonElement(jsonObj.get("ImportAssetFromApiGatewayApi"));
      }
      // validate the optional field `CreateS3DataAccessFromS3Bucket`
      if (jsonObj.get("CreateS3DataAccessFromS3Bucket") != null && !jsonObj.get("CreateS3DataAccessFromS3Bucket").isJsonNull()) {
        CreateJobRequestDetailsCreateS3DataAccessFromS3Bucket.validateJsonElement(jsonObj.get("CreateS3DataAccessFromS3Bucket"));
      }
      // validate the optional field `ImportAssetsFromLakeFormationTagPolicy`
      if (jsonObj.get("ImportAssetsFromLakeFormationTagPolicy") != null && !jsonObj.get("ImportAssetsFromLakeFormationTagPolicy").isJsonNull()) {
        CreateJobRequestDetailsImportAssetsFromLakeFormationTagPolicy.validateJsonElement(jsonObj.get("ImportAssetsFromLakeFormationTagPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestDetails>() {
           @Override
           public void write(JsonWriter out, RequestDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestDetails
   * @throws IOException if the JSON string is invalid with respect to RequestDetails
   */
  public static RequestDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestDetails.class);
  }

  /**
   * Convert an instance of RequestDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

