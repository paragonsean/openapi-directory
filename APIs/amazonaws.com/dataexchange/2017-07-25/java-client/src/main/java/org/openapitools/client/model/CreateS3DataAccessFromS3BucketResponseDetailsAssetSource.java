/*
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:38.729802-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateS3DataAccessFromS3BucketResponseDetailsAssetSource {
  public static final String SERIALIZED_NAME_BUCKET = "Bucket";
  @SerializedName(SERIALIZED_NAME_BUCKET)
  private String bucket;

  public static final String SERIALIZED_NAME_KEY_PREFIXES = "KeyPrefixes";
  @SerializedName(SERIALIZED_NAME_KEY_PREFIXES)
  private List keyPrefixes;

  public static final String SERIALIZED_NAME_KEYS = "Keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List keys;

  public static final String SERIALIZED_NAME_KMS_KEYS_TO_GRANT = "KmsKeysToGrant";
  @SerializedName(SERIALIZED_NAME_KMS_KEYS_TO_GRANT)
  private List kmsKeysToGrant;

  public CreateS3DataAccessFromS3BucketResponseDetailsAssetSource() {
  }

  public CreateS3DataAccessFromS3BucketResponseDetailsAssetSource bucket(String bucket) {
    this.bucket = bucket;
    return this;
  }

  /**
   * Get bucket
   * @return bucket
   */
  @javax.annotation.Nonnull
  public String getBucket() {
    return bucket;
  }

  public void setBucket(String bucket) {
    this.bucket = bucket;
  }


  public CreateS3DataAccessFromS3BucketResponseDetailsAssetSource keyPrefixes(List keyPrefixes) {
    this.keyPrefixes = keyPrefixes;
    return this;
  }

  /**
   * Get keyPrefixes
   * @return keyPrefixes
   */
  @javax.annotation.Nullable
  public List getKeyPrefixes() {
    return keyPrefixes;
  }

  public void setKeyPrefixes(List keyPrefixes) {
    this.keyPrefixes = keyPrefixes;
  }


  public CreateS3DataAccessFromS3BucketResponseDetailsAssetSource keys(List keys) {
    this.keys = keys;
    return this;
  }

  /**
   * Get keys
   * @return keys
   */
  @javax.annotation.Nullable
  public List getKeys() {
    return keys;
  }

  public void setKeys(List keys) {
    this.keys = keys;
  }


  public CreateS3DataAccessFromS3BucketResponseDetailsAssetSource kmsKeysToGrant(List kmsKeysToGrant) {
    this.kmsKeysToGrant = kmsKeysToGrant;
    return this;
  }

  /**
   * Get kmsKeysToGrant
   * @return kmsKeysToGrant
   */
  @javax.annotation.Nullable
  public List getKmsKeysToGrant() {
    return kmsKeysToGrant;
  }

  public void setKmsKeysToGrant(List kmsKeysToGrant) {
    this.kmsKeysToGrant = kmsKeysToGrant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateS3DataAccessFromS3BucketResponseDetailsAssetSource createS3DataAccessFromS3BucketResponseDetailsAssetSource = (CreateS3DataAccessFromS3BucketResponseDetailsAssetSource) o;
    return Objects.equals(this.bucket, createS3DataAccessFromS3BucketResponseDetailsAssetSource.bucket) &&
        Objects.equals(this.keyPrefixes, createS3DataAccessFromS3BucketResponseDetailsAssetSource.keyPrefixes) &&
        Objects.equals(this.keys, createS3DataAccessFromS3BucketResponseDetailsAssetSource.keys) &&
        Objects.equals(this.kmsKeysToGrant, createS3DataAccessFromS3BucketResponseDetailsAssetSource.kmsKeysToGrant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucket, keyPrefixes, keys, kmsKeysToGrant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateS3DataAccessFromS3BucketResponseDetailsAssetSource {\n");
    sb.append("    bucket: ").append(toIndentedString(bucket)).append("\n");
    sb.append("    keyPrefixes: ").append(toIndentedString(keyPrefixes)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    kmsKeysToGrant: ").append(toIndentedString(kmsKeysToGrant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bucket");
    openapiFields.add("KeyPrefixes");
    openapiFields.add("Keys");
    openapiFields.add("KmsKeysToGrant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Bucket");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateS3DataAccessFromS3BucketResponseDetailsAssetSource is not found in the empty JSON string", CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateS3DataAccessFromS3BucketResponseDetailsAssetSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Bucket`
      String.validateJsonElement(jsonObj.get("Bucket"));
      // validate the optional field `KeyPrefixes`
      if (jsonObj.get("KeyPrefixes") != null && !jsonObj.get("KeyPrefixes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KeyPrefixes"));
      }
      // validate the optional field `Keys`
      if (jsonObj.get("Keys") != null && !jsonObj.get("Keys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Keys"));
      }
      // validate the optional field `KmsKeysToGrant`
      if (jsonObj.get("KmsKeysToGrant") != null && !jsonObj.get("KmsKeysToGrant").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("KmsKeysToGrant"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateS3DataAccessFromS3BucketResponseDetailsAssetSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateS3DataAccessFromS3BucketResponseDetailsAssetSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateS3DataAccessFromS3BucketResponseDetailsAssetSource>() {
           @Override
           public void write(JsonWriter out, CreateS3DataAccessFromS3BucketResponseDetailsAssetSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateS3DataAccessFromS3BucketResponseDetailsAssetSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateS3DataAccessFromS3BucketResponseDetailsAssetSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
   * @throws IOException if the JSON string is invalid with respect to CreateS3DataAccessFromS3BucketResponseDetailsAssetSource
   */
  public static CreateS3DataAccessFromS3BucketResponseDetailsAssetSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateS3DataAccessFromS3BucketResponseDetailsAssetSource.class);
  }

  /**
   * Convert an instance of CreateS3DataAccessFromS3BucketResponseDetailsAssetSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

