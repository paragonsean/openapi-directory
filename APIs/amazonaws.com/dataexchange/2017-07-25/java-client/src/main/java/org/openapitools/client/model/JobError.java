/*
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Code;
import org.openapitools.client.model.JobErrorDetails;
import org.openapitools.client.model.JobErrorLimitName;
import org.openapitools.client.model.JobErrorResourceTypes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An error that occurred with the job request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:25:38.729802-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobError {
  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Code code;

  public static final String SERIALIZED_NAME_DETAILS = "Details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private JobErrorDetails details;

  public static final String SERIALIZED_NAME_LIMIT_NAME = "LimitName";
  @SerializedName(SERIALIZED_NAME_LIMIT_NAME)
  private JobErrorLimitName limitName;

  public static final String SERIALIZED_NAME_LIMIT_VALUE = "LimitValue";
  @SerializedName(SERIALIZED_NAME_LIMIT_VALUE)
  private Double limitValue;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "ResourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private JobErrorResourceTypes resourceType;

  public JobError() {
  }

  public JobError code(Code code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nonnull
  public Code getCode() {
    return code;
  }

  public void setCode(Code code) {
    this.code = code;
  }


  public JobError details(JobErrorDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public JobErrorDetails getDetails() {
    return details;
  }

  public void setDetails(JobErrorDetails details) {
    this.details = details;
  }


  public JobError limitName(JobErrorLimitName limitName) {
    this.limitName = limitName;
    return this;
  }

  /**
   * Get limitName
   * @return limitName
   */
  @javax.annotation.Nullable
  public JobErrorLimitName getLimitName() {
    return limitName;
  }

  public void setLimitName(JobErrorLimitName limitName) {
    this.limitName = limitName;
  }


  public JobError limitValue(Double limitValue) {
    this.limitValue = limitValue;
    return this;
  }

  /**
   * Get limitValue
   * @return limitValue
   */
  @javax.annotation.Nullable
  public Double getLimitValue() {
    return limitValue;
  }

  public void setLimitValue(Double limitValue) {
    this.limitValue = limitValue;
  }


  public JobError message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public JobError resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Get resourceId
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public JobError resourceType(JobErrorResourceTypes resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Get resourceType
   * @return resourceType
   */
  @javax.annotation.Nullable
  public JobErrorResourceTypes getResourceType() {
    return resourceType;
  }

  public void setResourceType(JobErrorResourceTypes resourceType) {
    this.resourceType = resourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobError jobError = (JobError) o;
    return Objects.equals(this.code, jobError.code) &&
        Objects.equals(this.details, jobError.details) &&
        Objects.equals(this.limitName, jobError.limitName) &&
        Objects.equals(this.limitValue, jobError.limitValue) &&
        Objects.equals(this.message, jobError.message) &&
        Objects.equals(this.resourceId, jobError.resourceId) &&
        Objects.equals(this.resourceType, jobError.resourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, details, limitName, limitValue, message, resourceId, resourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    limitName: ").append(toIndentedString(limitName)).append("\n");
    sb.append("    limitValue: ").append(toIndentedString(limitValue)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Code");
    openapiFields.add("Details");
    openapiFields.add("LimitName");
    openapiFields.add("LimitValue");
    openapiFields.add("Message");
    openapiFields.add("ResourceId");
    openapiFields.add("ResourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Code");
    openapiRequiredFields.add("Message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobError is not found in the empty JSON string", JobError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobError.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Code`
      Code.validateJsonElement(jsonObj.get("Code"));
      // validate the optional field `Details`
      if (jsonObj.get("Details") != null && !jsonObj.get("Details").isJsonNull()) {
        JobErrorDetails.validateJsonElement(jsonObj.get("Details"));
      }
      // validate the optional field `LimitName`
      if (jsonObj.get("LimitName") != null && !jsonObj.get("LimitName").isJsonNull()) {
        JobErrorLimitName.validateJsonElement(jsonObj.get("LimitName"));
      }
      // validate the optional field `LimitValue`
      if (jsonObj.get("LimitValue") != null && !jsonObj.get("LimitValue").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("LimitValue"));
      }
      // validate the required field `Message`
      String.validateJsonElement(jsonObj.get("Message"));
      // validate the optional field `ResourceId`
      if (jsonObj.get("ResourceId") != null && !jsonObj.get("ResourceId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceId"));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        JobErrorResourceTypes.validateJsonElement(jsonObj.get("ResourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobError.class));

       return (TypeAdapter<T>) new TypeAdapter<JobError>() {
           @Override
           public void write(JsonWriter out, JobError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobError
   * @throws IOException if the JSON string is invalid with respect to JobError
   */
  public static JobError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobError.class);
  }

  /**
   * Convert an instance of JobError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

