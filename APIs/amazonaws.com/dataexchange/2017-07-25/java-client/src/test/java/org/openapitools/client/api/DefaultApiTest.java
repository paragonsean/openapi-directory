/*
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDataSetRequest;
import org.openapitools.client.model.CreateDataSetResponse;
import org.openapitools.client.model.CreateEventActionRequest;
import org.openapitools.client.model.CreateEventActionResponse;
import org.openapitools.client.model.CreateJobRequest;
import org.openapitools.client.model.CreateJobResponse;
import org.openapitools.client.model.CreateRevisionRequest;
import org.openapitools.client.model.CreateRevisionResponse;
import org.openapitools.client.model.GetAssetResponse;
import org.openapitools.client.model.GetDataSetResponse;
import org.openapitools.client.model.GetEventActionResponse;
import org.openapitools.client.model.GetJobResponse;
import org.openapitools.client.model.GetRevisionResponse;
import org.openapitools.client.model.ListDataSetRevisionsResponse;
import org.openapitools.client.model.ListDataSetsResponse;
import org.openapitools.client.model.ListEventActionsResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListRevisionAssetsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.RevokeRevisionRequest;
import org.openapitools.client.model.RevokeRevisionResponse;
import org.openapitools.client.model.SendApiAssetRequest;
import org.openapitools.client.model.SendApiAssetResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateAssetRequest;
import org.openapitools.client.model.UpdateAssetResponse;
import org.openapitools.client.model.UpdateDataSetRequest;
import org.openapitools.client.model.UpdateDataSetResponse;
import org.openapitools.client.model.UpdateEventActionRequest;
import org.openapitools.client.model.UpdateEventActionResponse;
import org.openapitools.client.model.UpdateRevisionRequest;
import org.openapitools.client.model.UpdateRevisionResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * This operation cancels a job. Jobs can be cancelled only when they are in the WAITING state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.cancelJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation creates a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataSetTest() throws ApiException {
        CreateDataSetRequest createDataSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDataSetResponse response = api.createDataSet(createDataSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation creates an event action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEventActionTest() throws ApiException {
        CreateEventActionRequest createEventActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateEventActionResponse response = api.createEventAction(createEventActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation creates a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        CreateJobRequest createJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateJobResponse response = api.createJob(createJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation creates a revision for a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRevisionTest() throws ApiException {
        String dataSetId = null;
        CreateRevisionRequest createRevisionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRevisionResponse response = api.createRevision(dataSetId, createRevisionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation deletes an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetTest() throws ApiException {
        String assetId = null;
        String dataSetId = null;
        String revisionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAsset(assetId, dataSetId, revisionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation deletes a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataSetTest() throws ApiException {
        String dataSetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDataSet(dataSetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation deletes the event action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEventActionTest() throws ApiException {
        String eventActionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteEventAction(eventActionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation deletes a revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRevisionTest() throws ApiException {
        String dataSetId = null;
        String revisionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRevision(dataSetId, revisionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation returns information about an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetTest() throws ApiException {
        String assetId = null;
        String dataSetId = null;
        String revisionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAssetResponse response = api.getAsset(assetId, dataSetId, revisionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation returns information about a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataSetTest() throws ApiException {
        String dataSetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataSetResponse response = api.getDataSet(dataSetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation retrieves information about an event action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventActionTest() throws ApiException {
        String eventActionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetEventActionResponse response = api.getEventAction(eventActionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation returns information about a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobResponse response = api.getJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation returns information about a revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRevisionTest() throws ApiException {
        String dataSetId = null;
        String revisionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRevisionResponse response = api.getRevision(dataSetId, revisionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation lists a data set&#39;s revisions sorted by CreatedAt in descending order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataSetRevisionsTest() throws ApiException {
        String dataSetId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListDataSetRevisionsResponse response = api.listDataSetRevisions(dataSetId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * This operation lists your data sets. When listing by origin OWNED, results are sorted by CreatedAt in descending order. When listing by origin ENTITLED, there is no order and the maxResults parameter is ignored.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataSetsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String origin = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListDataSetsResponse response = api.listDataSets(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, origin, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * This operation lists your event actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventActionsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String eventSourceId = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListEventActionsResponse response = api.listEventActions(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, eventSourceId, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * This operation lists your jobs sorted by CreatedAt in descending order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJobsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String dataSetId = null;
        Integer maxResults = null;
        String nextToken = null;
        String revisionId = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListJobsResponse response = api.listJobs(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, dataSetId, maxResults, nextToken, revisionId, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * This operation lists a revision&#39;s assets sorted alphabetically in descending order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRevisionAssetsTest() throws ApiException {
        String dataSetId = null;
        String revisionId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        String maxResults2 = null;
        String nextToken2 = null;
        ListRevisionAssetsResponse response = api.listRevisionAssets(dataSetId, revisionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        // TODO: test validations
    }

    /**
     * This operation lists the tags on the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation revokes subscribers&#39; access to a revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeRevisionTest() throws ApiException {
        String dataSetId = null;
        String revisionId = null;
        RevokeRevisionRequest revokeRevisionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RevokeRevisionResponse response = api.revokeRevision(dataSetId, revisionId, revokeRevisionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation invokes an API Gateway API asset. The request is proxied to the provider’s API Gateway API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendApiAssetTest() throws ApiException {
        String xAmznDataexchangeAssetId = null;
        String xAmznDataexchangeDataSetId = null;
        String xAmznDataexchangeRevisionId = null;
        SendApiAssetRequest sendApiAssetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Map<String, String> queryStringParameters = null;
        String xAmznDataexchangeHttpMethod = null;
        String xAmznDataexchangePath = null;
        SendApiAssetResponse response = api.sendApiAsset(xAmznDataexchangeAssetId, xAmznDataexchangeDataSetId, xAmznDataexchangeRevisionId, sendApiAssetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, queryStringParameters, xAmznDataexchangeHttpMethod, xAmznDataexchangePath);
        // TODO: test validations
    }

    /**
     * This operation starts a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startJobTest() throws ApiException {
        String jobId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.startJob(jobId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation tags a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation removes one or more tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation updates an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssetTest() throws ApiException {
        String assetId = null;
        String dataSetId = null;
        String revisionId = null;
        UpdateAssetRequest updateAssetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAssetResponse response = api.updateAsset(assetId, dataSetId, revisionId, updateAssetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation updates a data set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataSetTest() throws ApiException {
        String dataSetId = null;
        UpdateDataSetRequest updateDataSetRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDataSetResponse response = api.updateDataSet(dataSetId, updateDataSetRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation updates the event action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEventActionTest() throws ApiException {
        String eventActionId = null;
        UpdateEventActionRequest updateEventActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateEventActionResponse response = api.updateEventAction(eventActionId, updateEventActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation updates a revision.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRevisionTest() throws ApiException {
        String dataSetId = null;
        String revisionId = null;
        UpdateRevisionRequest updateRevisionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRevisionResponse response = api.updateRevision(dataSetId, revisionId, updateRevisionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
