openapi: 3.0.0
info:
  contact:
    email: mike.ralphson@gmail.com
    name: Mike Ralphson
    url: https://github.com/mermade/aws2openapi
    x-twitter: PermittedSoc
  description: "<p>AWS Data Exchange is a service that makes it easy for AWS customers\
    \ to exchange data in the cloud. You can use the AWS Data Exchange APIs to create,\
    \ update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a\
    \ subscriber, you can view and access the data sets that you have an entitlement\
    \ to through a subscription. You can use the APIs to download or copy your entitled\
    \ data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety\
    \ of AWS analytics and machine learning services.</p> <p>As a provider, you can\
    \ create and manage your data sets that you would like to publish to a product.\
    \ Being able to package and provide your data sets into products requires a few\
    \ steps to determine eligibility. For more information, visit the <i>AWS Data\
    \ Exchange User Guide</i>.</p> <p>A data set is a collection of data that can\
    \ be changed or updated over time. Data sets can be updated using revisions, which\
    \ represent a new version or incremental change to a data set. A revision contains\
    \ one or more assets. An asset in AWS Data Exchange is a piece of data that can\
    \ be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake\
    \ Formation data permission, or Amazon S3 data access. The asset can be a structured\
    \ data file, an image file, or some other data file. Jobs are asynchronous import\
    \ or export operations used to create or copy assets.</p>"
  license:
    name: Apache 2.0 License
    url: http://www.apache.org/licenses/
  termsOfService: https://aws.amazon.com/service-terms/
  title: AWS Data Exchange
  version: 2017-07-25
  x-release: v4
  x-logo:
    url: https://twitter.com/awscloud/profile_image?size=original
    backgroundColor: '#FFFFFF'
  x-providerName: amazonaws.com
  x-serviceName: dataexchange
  x-aws-signingName: dataexchange
  x-origin:
  - contentType: application/json
    url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/dataexchange-2017-07-25.normal.json
    converter:
      url: https://github.com/mermade/aws2openapi
      version: 1.0.0
    x-apisguru-driver: external
  x-apiClientRegistration:
    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct
  x-apisguru-categories:
  - cloud
  x-preferred: true
externalDocs:
  description: Amazon Web Services documentation
  url: https://docs.aws.amazon.com/dataexchange/
servers:
- description: The AWS Data Exchange multi-region endpoint
  url: "http://dataexchange.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS Data Exchange multi-region endpoint
  url: "https://dataexchange.{region}.amazonaws.com"
  variables:
    region:
      default: us-east-1
      description: The AWS region
      enum:
      - us-east-1
      - us-east-2
      - us-west-1
      - us-west-2
      - us-gov-west-1
      - us-gov-east-1
      - ca-central-1
      - eu-north-1
      - eu-west-1
      - eu-west-2
      - eu-west-3
      - eu-central-1
      - eu-south-1
      - af-south-1
      - ap-northeast-1
      - ap-northeast-2
      - ap-northeast-3
      - ap-southeast-1
      - ap-southeast-2
      - ap-east-1
      - ap-south-1
      - sa-east-1
      - me-south-1
- description: The AWS Data Exchange endpoint for China (Beijing) and China (Ningxia)
  url: "http://dataexchange.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
- description: The AWS Data Exchange endpoint for China (Beijing) and China (Ningxia)
  url: "https://dataexchange.{region}.amazonaws.com.cn"
  variables:
    region:
      default: cn-north-1
      description: The AWS region
      enum:
      - cn-north-1
      - cn-northwest-1
security:
- hmac: []
paths:
  /v1/jobs/{JobId}:
    delete:
      description: This operation cancels a job. Jobs can be cancelled only when they
        are in the WAITING state.
      operationId: CancelJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a job.
        explode: false
        in: path
        name: JobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: This operation returns information about a job.
      operationId: GetJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a job.
        explode: false
        in: path
        name: JobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    patch:
      description: This operation starts a job.
      operationId: StartJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a job.
        explode: false
        in: path
        name: JobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /v1/data-sets:
    get:
      description: "This operation lists your data sets. When listing by origin OWNED,\
        \ results are sorted by CreatedAt in descending order. When listing by origin\
        \ ENTITLED, there is no order and the maxResults parameter is ignored."
      operationId: ListDataSets
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The maximum number of results returned by a single call.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: The token value retrieved from a previous call to access the
          next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: A property that defines the data set as OWNED by the account
          (for providers) or ENTITLED to the account (for subscribers).
        explode: true
        in: query
        name: origin
        required: false
        schema:
          type: string
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataSetsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    post:
      description: This operation creates a data set.
      operationId: CreateDataSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDataSet_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDataSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLimitExceededException'
          description: ServiceLimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/event-actions:
    get:
      description: This operation lists your event actions.
      operationId: ListEventActions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for the event source.
        explode: true
        in: query
        name: eventSourceId
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of results returned by a single call.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: The token value retrieved from a previous call to access the
          next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEventActionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    post:
      description: This operation creates an event action.
      operationId: CreateEventAction
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventAction_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventActionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceLimitExceededException'
          description: ServiceLimitExceededException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/jobs:
    get:
      description: This operation lists your jobs sorted by CreatedAt in descending
        order.
      operationId: ListJobs
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: true
        in: query
        name: dataSetId
        required: false
        schema:
          type: string
        style: form
      - description: The maximum number of results returned by a single call.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: The token value retrieved from a previous call to access the
          next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The unique identifier for a revision.
        explode: true
        in: query
        name: revisionId
        required: false
        schema:
          type: string
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListJobsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    post:
      description: This operation creates a job.
      operationId: CreateJob
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateJob_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateJobResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/data-sets/{DataSetId}/revisions:
    get:
      description: This operation lists a data set's revisions sorted by CreatedAt
        in descending order.
      operationId: ListDataSetRevisions
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of results returned by a single call.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: The token value retrieved from a previous call to access the
          next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDataSetRevisionsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    post:
      description: This operation creates a revision for a data set.
      operationId: CreateRevision
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRevision_request'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRevisionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets/{AssetId}:
    delete:
      description: This operation deletes an asset.
      operationId: DeleteAsset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for an asset.
        explode: false
        in: path
        name: AssetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: This operation returns information about an asset.
      operationId: GetAsset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for an asset.
        explode: false
        in: path
        name: AssetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAssetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    patch:
      description: This operation updates an asset.
      operationId: UpdateAsset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for an asset.
        explode: false
        in: path
        name: AssetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAsset_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAssetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/data-sets/{DataSetId}:
    delete:
      description: This operation deletes a data set.
      operationId: DeleteDataSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: This operation returns information about a data set.
      operationId: GetDataSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetDataSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    patch:
      description: This operation updates a data set.
      operationId: UpdateDataSet
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataSet_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDataSetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/event-actions/{EventActionId}:
    delete:
      description: This operation deletes the event action.
      operationId: DeleteEventAction
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for the event action.
        explode: false
        in: path
        name: EventActionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: This operation retrieves information about an event action.
      operationId: GetEventAction
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for the event action.
        explode: false
        in: path
        name: EventActionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetEventActionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    patch:
      description: This operation updates the event action.
      operationId: UpdateEventAction
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for the event action.
        explode: false
        in: path
        name: EventActionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEventAction_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateEventActionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}:
    delete:
      description: This operation deletes a revision.
      operationId: DeleteRevision
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    get:
      description: This operation returns information about a revision.
      operationId: GetRevision
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRevisionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
    patch:
      description: This operation updates a revision.
      operationId: UpdateRevision
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRevision_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRevisionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}/assets:
    get:
      description: This operation lists a revision's assets sorted alphabetically
        in descending order.
      operationId: ListRevisionAssets
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of results returned by a single call.
        explode: true
        in: query
        name: maxResults
        required: false
        schema:
          maximum: 200
          minimum: 1
          type: integer
        style: form
      - description: The token value retrieved from a previous call to access the
          next page of results.
        explode: true
        in: query
        name: nextToken
        required: false
        schema:
          type: string
        style: form
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      - description: Pagination limit
        explode: true
        in: query
        name: MaxResults
        required: false
        schema:
          type: string
        style: form
      - description: Pagination token
        explode: true
        in: query
        name: NextToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRevisionAssetsResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-accepts:
      - application/json
  /tags/{ResourceArn}:
    get:
      description: This operation lists the tags on the resource.
      operationId: ListTagsForResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: An Amazon Resource Name (ARN) that uniquely identifies an AWS
          resource.
        explode: false
        in: path
        name: ResourceArn
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTagsForResourceResponse'
          description: Success
      x-accepts:
      - application/json
    post:
      description: This operation tags a resource.
      operationId: TagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: An Amazon Resource Name (ARN) that uniquely identifies an AWS
          resource.
        explode: false
        in: path
        name: ResourceArn
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagResource_request'
        required: true
      responses:
        "204":
          description: Success
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1/data-sets/{DataSetId}/revisions/{RevisionId}/revoke:
    post:
      description: This operation revokes subscribers' access to a revision.
      operationId: RevokeRevision
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: The unique identifier for a data set.
        explode: false
        in: path
        name: DataSetId
        required: true
        schema:
          type: string
        style: simple
      - description: The unique identifier for a revision.
        explode: false
        in: path
        name: RevisionId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeRevision_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeRevisionResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConflictException'
          description: ConflictException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "485":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /v1#x-amzn-dataexchange-asset-id&x-amzn-dataexchange-data-set-id&x-amzn-dataexchange-revision-id:
    post:
      description: This operation invokes an API Gateway API asset. The request is
        proxied to the provider’s API Gateway API.
      operationId: SendApiAsset
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: "Attach query string parameters to the end of the URI (for example,\
          \ /v1/examplePath?exampleParam=exampleValue)."
        explode: true
        in: query
        name: QueryStringParameters
        required: false
        schema:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          type: object
        style: form
      - description: Asset ID value for the API request.
        explode: false
        in: header
        name: x-amzn-dataexchange-asset-id
        required: true
        schema:
          type: string
        style: simple
      - description: Data set ID value for the API request.
        explode: false
        in: header
        name: x-amzn-dataexchange-data-set-id
        required: true
        schema:
          type: string
        style: simple
      - description: "HTTP method value for the API request. Alternatively, you can\
          \ use the appropriate verb in your request."
        explode: false
        in: header
        name: x-amzn-dataexchange-http-method
        required: false
        schema:
          type: string
        style: simple
      - description: "URI path value for the API request. Alternatively, you can set\
          \ the URI path directly by invoking /v1/{pathValue}."
        explode: false
        in: header
        name: x-amzn-dataexchange-path
        required: false
        schema:
          type: string
        style: simple
      - description: Revision ID value for the API request.
        explode: false
        in: header
        name: x-amzn-dataexchange-revision-id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendApiAsset_request'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendApiAssetResponse'
          description: Success
        "480":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceNotFoundException'
          description: ResourceNotFoundException
        "481":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlingException'
          description: ThrottlingException
        "482":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedException'
          description: AccessDeniedException
        "483":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationException'
          description: ValidationException
        "484":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerException'
          description: InternalServerException
      x-content-type: application/json
      x-accepts:
      - application/json
  /tags/{ResourceArn}#tagKeys:
    delete:
      description: This operation removes one or more tags from a resource.
      operationId: UntagResource
      parameters:
      - explode: false
        in: header
        name: X-Amz-Content-Sha256
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Date
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Algorithm
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Credential
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Security-Token
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-Signature
        required: false
        schema:
          type: string
        style: simple
      - explode: false
        in: header
        name: X-Amz-SignedHeaders
        required: false
        schema:
          type: string
        style: simple
      - description: An Amazon Resource Name (ARN) that uniquely identifies an AWS
          resource.
        explode: false
        in: path
        name: ResourceArn
        required: true
        schema:
          type: string
        style: simple
      - description: The key tags.
        explode: true
        in: query
        name: tagKeys
        required: true
        schema:
          items:
            $ref: '#/components/schemas/__string'
          type: array
        style: form
      responses:
        "204":
          description: Success
      x-accepts:
      - application/json
components:
  parameters:
    X-Amz-Content-Sha256:
      explode: false
      in: header
      name: X-Amz-Content-Sha256
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Date:
      explode: false
      in: header
      name: X-Amz-Date
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Algorithm:
      explode: false
      in: header
      name: X-Amz-Algorithm
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Credential:
      explode: false
      in: header
      name: X-Amz-Credential
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Security-Token:
      explode: false
      in: header
      name: X-Amz-Security-Token
      required: false
      schema:
        type: string
      style: simple
    X-Amz-Signature:
      explode: false
      in: header
      name: X-Amz-Signature
      required: false
      schema:
        type: string
      style: simple
    X-Amz-SignedHeaders:
      explode: false
      in: header
      name: X-Amz-SignedHeaders
      required: false
      schema:
        type: string
      style: simple
  schemas:
    ResourceNotFoundException: {}
    ThrottlingException: {}
    ConflictException: {}
    ValidationException: {}
    InternalServerException: {}
    CreateDataSetResponse:
      example:
        Origin: ""
        AssetType: ""
        Description: ""
        OriginDetails:
          ProductId: ""
        CreatedAt: ""
        SourceId: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
        Tags: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was created, in ISO\
              \ 8601 format."
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          - description: A property that defines the data set as OWNED by the account
              (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          $ref: '#/components/schemas/CreateDataSetResponse_OriginDetails'
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID of the owned data set corresponding to the
              entitled data set being viewed. This parameter is returned when a data
              set owner is viewing the entitled copy of its owned data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: The tags for the data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was last updated, in\
              \ ISO 8601 format."
      type: object
    __string:
      type: string
    ServiceLimitExceededException: {}
    AccessDeniedException: {}
    CreateEventActionResponse:
      example:
        Action:
          ExportRevisionToS3:
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionDestination:
              KeyPattern: ""
              Bucket: ""
        CreatedAt: ""
        Event:
          RevisionPublished:
            DataSetId: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventActionResponse_Action'
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was created, in\
              \ ISO 8601 format."
        Event:
          $ref: '#/components/schemas/CreateEventActionResponse_Event'
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was last updated,\
              \ in ISO 8601 format."
      type: object
    AutoExportRevisionToS3RequestDetails:
      description: Details of the operation to be performed by the job.
      properties:
        Encryption:
          $ref: '#/components/schemas/AutoExportRevisionToS3RequestDetails_Encryption'
        RevisionDestination:
          $ref: '#/components/schemas/AutoExportRevisionToS3RequestDetails_RevisionDestination'
      required:
      - RevisionDestination
      type: object
    RevisionPublished:
      description: Information about the published revision.
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID of the published revision.
      required:
      - DataSetId
      type: object
    CreateJobResponse:
      example:
        Errors: ""
        Type: ""
        Details:
          ImportAssetsFromLakeFormationTagPolicy:
            Table:
              Expression: ""
              Permissions: ""
            Database:
              Expression: ""
              Permissions: ""
            DataSetId: ""
            CatalogId: ""
            RoleArn: ""
            RevisionId: ""
          ImportAssetsFromRedshiftDataShares:
            AssetSources: ""
            DataSetId: ""
            RevisionId: ""
          ImportAssetFromApiGatewayApi:
            ApiSpecificationUploadUrlExpiresAt: ""
            ApiKey: ""
            ApiName: ""
            ProtocolType: ""
            ApiSpecificationMd5Hash: ""
            Stage: ""
            DataSetId: ""
            ApiDescription: ""
            ApiId: ""
            RevisionId: ""
            ApiSpecificationUploadUrl: ""
          ExportRevisionsToS3:
            RevisionDestinations: ""
            DataSetId: ""
            Encryption:
              Type: ""
              KmsKeyArn: ""
            EventActionArn: ""
          ImportAssetFromSignedUrl:
            SignedUrl: ""
            DataSetId: ""
            Md5Hash: ""
            AssetName: ""
            RevisionId: ""
            SignedUrlExpiresAt: ""
          ExportAssetToSignedUrl:
            SignedUrl: ""
            DataSetId: ""
            AssetId: ""
            RevisionId: ""
            SignedUrlExpiresAt: ""
          ImportAssetsFromS3:
            AssetSources: ""
            DataSetId: ""
            RevisionId: ""
          CreateS3DataAccessFromS3Bucket:
            AssetSource:
              KeyPrefixes: ""
              KmsKeysToGrant: ""
              Bucket: ""
              Keys: ""
            DataSetId: ""
            RevisionId: ""
          ExportAssetsToS3:
            AssetDestinations: ""
            DataSetId: ""
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionId: ""
        State: ""
        CreatedAt: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the job.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the job was created, in ISO 8601\
              \ format."
        Details:
          $ref: '#/components/schemas/CreateJobResponse_Details'
        Errors:
          allOf:
          - $ref: '#/components/schemas/ListOfJobError'
          - description: The errors associated with jobs.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the job.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          - description: The state of the job.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - description: The job type.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the job was last updated, in ISO\
              \ 8601 format."
      type: object
    ExportAssetToSignedUrlRequestDetails:
      description: Details of the operation to be performed by the job.
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the asset that is exported to a
              signed URL.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              export job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              export request.
      required:
      - AssetId
      - DataSetId
      - RevisionId
      type: object
    ExportAssetsToS3RequestDetails:
      description: Details of the operation to be performed by the job.
      properties:
        AssetDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetDestinationEntry'
          - description: The destination for the asset.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              export job.
        Encryption:
          $ref: '#/components/schemas/ExportAssetsToS3RequestDetails_Encryption'
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              export request.
      required:
      - AssetDestinations
      - DataSetId
      - RevisionId
      type: object
    ExportRevisionsToS3RequestDetails:
      description: Details of the operation to be performed by the job.
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              export job.
        Encryption:
          $ref: '#/components/schemas/ExportAssetsToS3RequestDetails_Encryption'
        RevisionDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfRevisionDestinationEntry'
          - description: The destination for the revision.
      required:
      - DataSetId
      - RevisionDestinations
      type: object
    ImportAssetFromSignedUrlRequestDetails:
      description: Details of the operation to be performed by the job.
      properties:
        AssetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: "The name of the asset. When importing from Amazon S3, the\
              \ Amazon S3 object key is used as the asset name."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        Md5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          - description: "The Base64-encoded Md5 hash for the asset, used to ensure\
              \ the integrity of the file at that location."
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import request.
      required:
      - AssetName
      - DataSetId
      - Md5Hash
      - RevisionId
      type: object
    ImportAssetsFromS3RequestDetails:
      description: Details of the operation to be performed by the job.
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetSourceEntry'
          - description: Is a list of Amazon S3 bucket and object key pairs.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import request.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      type: object
    ImportAssetsFromRedshiftDataSharesRequestDetails:
      description: Details from an import from Amazon Redshift datashare request.
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfRedshiftDataShareAssetSourceEntry'
          - description: A list of Amazon Redshift datashare assets.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import job.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      type: object
    ImportAssetFromApiGatewayApiRequestDetails:
      description: The request details.
      properties:
        ApiDescription:
          allOf:
          - $ref: '#/components/schemas/ApiDescription'
          - description: The API description. Markdown supported.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API Gateway API ID.
        ApiKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API Gateway API key.
        ApiName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API name.
        ApiSpecificationMd5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          - description: The Base64-encoded MD5 hash of the OpenAPI 3.0 JSON API specification
              file. It is used to ensure the integrity of the file.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The protocol type.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID.
        Stage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API stage.
      required:
      - ApiId
      - ApiName
      - ApiSpecificationMd5Hash
      - DataSetId
      - ProtocolType
      - RevisionId
      - Stage
      type: object
    CreateS3DataAccessFromS3BucketRequestDetails:
      description: Details of the operation to create an Amazon S3 data access from
        an S3 bucket.
      properties:
        AssetSource:
          $ref: '#/components/schemas/CreateS3DataAccessFromS3BucketRequestDetails_AssetSource'
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with the
              creation of this Amazon S3 data access.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for a revision.
      required:
      - AssetSource
      - DataSetId
      - RevisionId
      type: object
    ImportAssetsFromLakeFormationTagPolicyRequestDetails:
      description: Details about the assets imported from an AWS Lake Formation tag
        policy request.
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          - description: The identifier for the AWS Glue Data Catalog.
        Database:
          $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails_Database'
        Table:
          $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails_Table'
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The IAM role's ARN that allows AWS Data Exchange to assume
              the role and grant and revoke permissions of subscribers to AWS Lake
              Formation data permissions.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import job.
      required:
      - CatalogId
      - DataSetId
      - RevisionId
      - RoleArn
      type: object
    CreateRevisionResponse:
      example:
        Comment: ""
        Revoked: ""
        CreatedAt: ""
        SourceId: ""
        DataSetId: ""
        Id: ""
        RevocationComment: ""
        Arn: ""
        UpdatedAt: ""
        Finalized: ""
        Tags: ""
        RevokedAt: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was created, in ISO\
              \ 8601 format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with the
              data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "To publish a revision to a data set in a product, the revision\
              \ must first be finalized. Finalizing a revision tells AWS Data Exchange\
              \ that your changes to the assets in the revision are complete. After\
              \ it's in this read-only state, you can publish the revision to your\
              \ products. Finalized revisions can be published through the AWS Data\
              \ Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet\
              \ AWS Marketplace Catalog API action. When using the API, revisions\
              \ are uniquely identified by their ARN."
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID of the owned revision corresponding to the
              entitled revision being viewed. This parameter is returned when a revision
              owner is viewing the entitled copy of its owned revision.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: The tags for the revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was last updated, in\
              \ ISO 8601 format."
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          - description: A required comment to inform subscribers of the reason their
              access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: A status indicating that subscribers' access to the revision
              was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was revoked, in ISO\
              \ 8601 format."
      type: object
    GetAssetResponse:
      example:
        AssetType: ""
        CreatedAt: ""
        SourceId: ""
        DataSetId: ""
        Id: ""
        Arn: ""
        AssetDetails:
          ApiGatewayApiAsset:
            ApiKey: ""
            ApiName: ""
            ApiSpecificationDownloadUrl: ""
            ProtocolType: ""
            Stage: ""
            ApiEndpoint: ""
            ApiDescription: ""
            ApiId: ""
            ApiSpecificationDownloadUrlExpiresAt: ""
          RedshiftDataShareAsset:
            Arn: ""
          LakeFormationDataPermissionAsset:
            LakeFormationDataPermissionDetails:
              LFTagPolicy:
                ResourceDetails:
                  Table:
                    Expression: ""
                  Database:
                    Expression: ""
                ResourceType: ""
                CatalogId: ""
            LakeFormationDataPermissionType: ""
            Permissions: ""
            RoleArn: ""
          S3DataAccessAsset:
            KeyPrefixes: ""
            KmsKeysToGrant: ""
            Bucket: ""
            Keys: ""
            S3AccessPointArn: ""
            S3AccessPointAlias: ""
          S3SnapshotAsset:
            Size: ""
        UpdatedAt: ""
        RevisionId: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the asset.
        AssetDetails:
          $ref: '#/components/schemas/GetAssetResponse_AssetDetails'
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the asset was created, in ISO 8601\
              \ format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              asset.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the asset.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: "The name of the asset. When importing from Amazon S3, the\
              \ Amazon S3 object key is used as the asset name. When exporting to\
              \ Amazon S3, the asset name is used as default target Amazon S3 object\
              \ key. When importing from Amazon API Gateway API, the API name is used\
              \ as the asset name. When importing from Amazon Redshift, the datashare\
              \ name is used as the asset name. When importing from AWS Lake Formation,\
              \ the static values of \"Database(s) included in the LF-tag policy\"\
              \ or \"Table(s) included in the LF-tag policy\" are used as the asset\
              \ name."
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              asset.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The asset ID of the owned asset corresponding to the entitled
              asset being viewed. This parameter is returned when an asset owner is
              viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the asset was last updated, in ISO\
              \ 8601 format."
      type: object
    GetDataSetResponse:
      example:
        Origin: ""
        AssetType: ""
        Description: ""
        OriginDetails:
          ProductId: ""
        CreatedAt: ""
        SourceId: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
        Tags: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was created, in ISO\
              \ 8601 format."
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          - description: A property that defines the data set as OWNED by the account
              (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          $ref: '#/components/schemas/CreateDataSetResponse_OriginDetails'
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID of the owned data set corresponding to the
              entitled data set being viewed. This parameter is returned when a data
              set owner is viewing the entitled copy of its owned data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: The tags for the data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was last updated, in\
              \ ISO 8601 format."
      type: object
    GetEventActionResponse:
      example:
        Action:
          ExportRevisionToS3:
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionDestination:
              KeyPattern: ""
              Bucket: ""
        CreatedAt: ""
        Event:
          RevisionPublished:
            DataSetId: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventActionResponse_Action'
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was created, in\
              \ ISO 8601 format."
        Event:
          $ref: '#/components/schemas/CreateEventActionResponse_Event'
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was last updated,\
              \ in ISO 8601 format."
      type: object
    GetJobResponse:
      example:
        Errors: ""
        Type: ""
        Details:
          ImportAssetsFromLakeFormationTagPolicy:
            Table:
              Expression: ""
              Permissions: ""
            Database:
              Expression: ""
              Permissions: ""
            DataSetId: ""
            CatalogId: ""
            RoleArn: ""
            RevisionId: ""
          ImportAssetsFromRedshiftDataShares:
            AssetSources: ""
            DataSetId: ""
            RevisionId: ""
          ImportAssetFromApiGatewayApi:
            ApiSpecificationUploadUrlExpiresAt: ""
            ApiKey: ""
            ApiName: ""
            ProtocolType: ""
            ApiSpecificationMd5Hash: ""
            Stage: ""
            DataSetId: ""
            ApiDescription: ""
            ApiId: ""
            RevisionId: ""
            ApiSpecificationUploadUrl: ""
          ExportRevisionsToS3:
            RevisionDestinations: ""
            DataSetId: ""
            Encryption:
              Type: ""
              KmsKeyArn: ""
            EventActionArn: ""
          ImportAssetFromSignedUrl:
            SignedUrl: ""
            DataSetId: ""
            Md5Hash: ""
            AssetName: ""
            RevisionId: ""
            SignedUrlExpiresAt: ""
          ExportAssetToSignedUrl:
            SignedUrl: ""
            DataSetId: ""
            AssetId: ""
            RevisionId: ""
            SignedUrlExpiresAt: ""
          ImportAssetsFromS3:
            AssetSources: ""
            DataSetId: ""
            RevisionId: ""
          CreateS3DataAccessFromS3Bucket:
            AssetSource:
              KeyPrefixes: ""
              KmsKeysToGrant: ""
              Bucket: ""
              Keys: ""
            DataSetId: ""
            RevisionId: ""
          ExportAssetsToS3:
            AssetDestinations: ""
            DataSetId: ""
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionId: ""
        State: ""
        CreatedAt: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the job.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the job was created, in ISO 8601\
              \ format."
        Details:
          $ref: '#/components/schemas/CreateJobResponse_Details'
        Errors:
          allOf:
          - $ref: '#/components/schemas/ListOfJobError'
          - description: The errors associated with jobs.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the job.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          - description: The state of the job.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - description: The job type.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the job was last updated, in ISO\
              \ 8601 format."
      type: object
    GetRevisionResponse:
      example:
        Comment: ""
        Revoked: ""
        CreatedAt: ""
        SourceId: ""
        DataSetId: ""
        Id: ""
        RevocationComment: ""
        Arn: ""
        UpdatedAt: ""
        Finalized: ""
        Tags: ""
        RevokedAt: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was created, in ISO\
              \ 8601 format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with the
              data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "To publish a revision to a data set in a product, the revision\
              \ must first be finalized. Finalizing a revision tells AWS Data Exchange\
              \ that your changes to the assets in the revision are complete. After\
              \ it's in this read-only state, you can publish the revision to your\
              \ products. Finalized revisions can be published through the AWS Data\
              \ Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet\
              \ AWS Marketplace Catalog API action. When using the API, revisions\
              \ are uniquely identified by their ARN."
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID of the owned revision corresponding to the
              entitled revision being viewed. This parameter is returned when a revision
              owner is viewing the entitled copy of its owned revision.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: The tags for the revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was last updated, in\
              \ ISO 8601 format."
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          - description: A required comment to inform subscribers of the reason their
              access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: A status indicating that subscribers' access to the revision
              was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was revoked, in ISO\
              \ 8601 format."
      type: object
    ListDataSetRevisionsResponse:
      example:
        NextToken: ""
        Revisions: ""
      properties:
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token value retrieved from a previous call to access
              the next page of results.
        Revisions:
          allOf:
          - $ref: '#/components/schemas/ListOfRevisionEntry'
          - description: The asset objects listed by the request.
      type: object
    ListDataSetsResponse:
      example:
        NextToken: ""
        DataSets: ""
      properties:
        DataSets:
          allOf:
          - $ref: '#/components/schemas/ListOfDataSetEntry'
          - description: The data set objects listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token value retrieved from a previous call to access
              the next page of results.
      type: object
    ListEventActionsResponse:
      example:
        NextToken: ""
        EventActions: ""
      properties:
        EventActions:
          allOf:
          - $ref: '#/components/schemas/ListOfEventActionEntry'
          - description: The event action objects listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token value retrieved from a previous call to access
              the next page of results.
      type: object
    ListJobsResponse:
      example:
        NextToken: ""
        Jobs: ""
      properties:
        Jobs:
          allOf:
          - $ref: '#/components/schemas/ListOfJobEntry'
          - description: The jobs listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token value retrieved from a previous call to access
              the next page of results.
      type: object
    ListRevisionAssetsResponse:
      example:
        NextToken: ""
        Assets: ""
      properties:
        Assets:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetEntry'
          - description: The asset objects listed by the request.
        NextToken:
          allOf:
          - $ref: '#/components/schemas/NextToken'
          - description: The token value retrieved from a previous call to access
              the next page of results.
      type: object
    ListTagsForResourceResponse:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: A label that consists of a customer-defined key and an optional
              value.
            xml:
              name: tags
      type: object
    RevokeRevisionResponse:
      example:
        Comment: ""
        Revoked: ""
        CreatedAt: ""
        SourceId: ""
        DataSetId: ""
        Id: ""
        RevocationComment: ""
        Arn: ""
        UpdatedAt: ""
        Finalized: ""
        RevokedAt: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was created, in ISO\
              \ 8601 format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with the
              data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "To publish a revision to a data set in a product, the revision\
              \ must first be finalized. Finalizing a revision tells AWS Data Exchange\
              \ that changes to the assets in the revision are complete. After it's\
              \ in this read-only state, you can publish the revision to your products.\
              \ Finalized revisions can be published through the AWS Data Exchange\
              \ console or the AWS Marketplace Catalog API, using the StartChangeSet\
              \ AWS Marketplace Catalog API action. When using the API, revisions\
              \ are uniquely identified by their ARN."
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID of the owned revision corresponding to the
              entitled revision being viewed. This parameter is returned when a revision
              owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was last updated, in\
              \ ISO 8601 format."
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          - description: A required comment to inform subscribers of the reason their
              access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: A status indicating that subscribers' access to the revision
              was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was revoked, in ISO\
              \ 8601 format."
      type: object
    SendApiAssetResponse:
      example:
        ResponseHeaders: ""
        Body: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The response body from the underlying API tracked by the
              API asset.
        ResponseHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: The response headers from the underlying API tracked by the
              API asset.
      type: object
    StartJobResponse:
      properties: {}
      type: object
    UpdateAssetResponse:
      example:
        AssetType: ""
        CreatedAt: ""
        SourceId: ""
        DataSetId: ""
        Id: ""
        Arn: ""
        AssetDetails:
          ApiGatewayApiAsset:
            ApiKey: ""
            ApiName: ""
            ApiSpecificationDownloadUrl: ""
            ProtocolType: ""
            Stage: ""
            ApiEndpoint: ""
            ApiDescription: ""
            ApiId: ""
            ApiSpecificationDownloadUrlExpiresAt: ""
          RedshiftDataShareAsset:
            Arn: ""
          LakeFormationDataPermissionAsset:
            LakeFormationDataPermissionDetails:
              LFTagPolicy:
                ResourceDetails:
                  Table:
                    Expression: ""
                  Database:
                    Expression: ""
                ResourceType: ""
                CatalogId: ""
            LakeFormationDataPermissionType: ""
            Permissions: ""
            RoleArn: ""
          S3DataAccessAsset:
            KeyPrefixes: ""
            KmsKeysToGrant: ""
            Bucket: ""
            Keys: ""
            S3AccessPointArn: ""
            S3AccessPointAlias: ""
          S3SnapshotAsset:
            Size: ""
        UpdatedAt: ""
        RevisionId: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the asset.
        AssetDetails:
          $ref: '#/components/schemas/GetAssetResponse_AssetDetails'
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the asset was created, in ISO 8601\
              \ format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              asset.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the asset.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: "The name of the asset. When importing from Amazon S3, the\
              \ Amazon S3 object key is used as the asset name. When exporting to\
              \ Amazon S3, the asset name is used as default target Amazon S3 object\
              \ key. When importing from Amazon API Gateway API, the API name is used\
              \ as the asset name. When importing from Amazon Redshift, the datashare\
              \ name is used as the asset name. When importing from AWS Lake Formation,\
              \ the static values of \"Database(s) included in the LF-tag policy\"\
              - or \"Table(s) included in LF-tag policy\" are used as the asset name."
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              asset.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The asset ID of the owned asset corresponding to the entitled
              asset being viewed. This parameter is returned when an asset owner is
              viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the asset was last updated, in ISO\
              \ 8601 format."
      type: object
    UpdateDataSetResponse:
      example:
        Origin: ""
        AssetType: ""
        Description: ""
        OriginDetails:
          ProductId: ""
        CreatedAt: ""
        SourceId: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
        Name: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was created, in ISO\
              \ 8601 format."
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          - description: A property that defines the data set as OWNED by the account
              (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          $ref: '#/components/schemas/CreateDataSetResponse_OriginDetails'
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID of the owned data set corresponding to the
              entitled data set being viewed. This parameter is returned when a data
              set owner is viewing the entitled copy of its owned data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was last updated, in\
              \ ISO 8601 format."
      type: object
    UpdateEventActionResponse:
      example:
        Action:
          ExportRevisionToS3:
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionDestination:
              KeyPattern: ""
              Bucket: ""
        CreatedAt: ""
        Event:
          RevisionPublished:
            DataSetId: ""
        Id: ""
        Arn: ""
        UpdatedAt: ""
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventActionResponse_Action'
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was created, in\
              \ ISO 8601 format."
        Event:
          $ref: '#/components/schemas/CreateEventActionResponse_Event'
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was last updated,\
              \ in ISO 8601 format."
      type: object
    UpdateRevisionResponse:
      example:
        Comment: ""
        Revoked: ""
        CreatedAt: ""
        SourceId: ""
        DataSetId: ""
        Id: ""
        RevocationComment: ""
        Arn: ""
        UpdatedAt: ""
        Finalized: ""
        RevokedAt: ""
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was created, in ISO\
              \ 8601 format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with the
              data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "To publish a revision to a data set in a product, the revision\
              \ must first be finalized. Finalizing a revision tells AWS Data Exchange\
              \ that changes to the assets in the revision are complete. After it's\
              \ in this read-only state, you can publish the revision to your products.\
              \ Finalized revisions can be published through the AWS Data Exchange\
              \ console or the AWS Marketplace Catalog API, using the StartChangeSet\
              \ AWS Marketplace Catalog API action. When using the API, revisions\
              \ are uniquely identified by their ARN."
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID of the owned revision corresponding to the
              entitled revision being viewed. This parameter is returned when a revision
              owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was last updated, in\
              \ ISO 8601 format."
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          - description: A required comment to inform subscribers of the reason their
              access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: A status indicating that subscribers' access to the revision
              was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was revoked, in ISO\
              \ 8601 format."
      type: object
    Action:
      description: What occurs after a certain event.
      properties:
        ExportRevisionToS3:
          $ref: '#/components/schemas/CreateEventAction_request_Action_ExportRevisionToS3'
      type: object
    ApiDescription:
      type: string
    Timestamp:
      format: date-time
      type: string
    ProtocolType:
      enum:
      - REST
      type: string
    ApiGatewayApiAsset:
      description: The API Gateway API that is the asset.
      properties:
        ApiDescription:
          allOf:
          - $ref: '#/components/schemas/ApiDescription'
          - description: The API description of the API asset.
        ApiEndpoint:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API endpoint of the API asset.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique identifier of the API asset.
        ApiKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API key of the API asset.
        ApiName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API name of the API asset.
        ApiSpecificationDownloadUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The download URL of the API specification of the API asset.
        ApiSpecificationDownloadUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the upload URL expires, in ISO 8601\
              \ format."
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The protocol type of the API asset.
        Stage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The stage of the API asset.
      type: object
    Arn:
      type: string
    Id:
      type: string
    AssetDestinationEntry:
      description: The destination for the asset.
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the asset.
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon S3 bucket that is the destination for the asset.
        Key:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The name of the object in Amazon S3 for the asset.
      required:
      - AssetId
      - Bucket
      type: object
    S3SnapshotAsset:
      description: The Amazon S3 object that is the asset.
      properties:
        Size:
          allOf:
          - $ref: '#/components/schemas/__doubleMin0'
          - description: The size of the Amazon S3 object that is the object.
      required:
      - Size
      type: object
    RedshiftDataShareAsset:
      description: The Amazon Redshift datashare asset.
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon Resource Name (ARN) of the datashare asset.
      required:
      - Arn
      type: object
    S3DataAccessAsset:
      description: The Amazon S3 data access that is the asset.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon S3 bucket hosting data to be shared in the S3
              data access.
        KeyPrefixes:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          - description: The Amazon S3 bucket used for hosting shared data in the
              Amazon S3 data access.
        Keys:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          - description: S3 keys made available using this asset.
        S3AccessPointAlias:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The automatically-generated bucket-style alias for your Amazon
              S3 Access Point. Customers can access their entitled data using the
              S3 Access Point alias.
        S3AccessPointArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The ARN for your Amazon S3 Access Point. Customers can also
              access their entitled data using the S3 Access Point ARN.
        KmsKeysToGrant:
          allOf:
          - $ref: '#/components/schemas/ListOfKmsKeysToGrant'
          - description: ' List of AWS KMS CMKs (Key Management System Customer Managed
              Keys) and ARNs used to encrypt S3 objects being shared in this S3 Data
              Access asset. Providers must include all AWS KMS keys used to encrypt
              these shared S3 objects.'
      required:
      - Bucket
      type: object
    LakeFormationDataPermissionAsset:
      description: The AWS Lake Formation data permission asset.
      properties:
        LakeFormationDataPermissionDetails:
          $ref: '#/components/schemas/LakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails'
        LakeFormationDataPermissionType:
          allOf:
          - $ref: '#/components/schemas/LakeFormationDataPermissionType'
          - description: The data permission type.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/ListOfLFPermissions'
          - description: The permissions granted to the subscribers on the resource.
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The IAM role's ARN that allows AWS Data Exchange to assume
              the role and grant and revoke permissions to AWS Lake Formation data
              permissions.
      required:
      - LakeFormationDataPermissionDetails
      - LakeFormationDataPermissionType
      - Permissions
      type: object
    AssetDetails:
      description: Details about the asset.
      properties:
        S3SnapshotAsset:
          $ref: '#/components/schemas/AssetDetails_S3SnapshotAsset'
        RedshiftDataShareAsset:
          $ref: '#/components/schemas/AssetDetails_RedshiftDataShareAsset'
        ApiGatewayApiAsset:
          $ref: '#/components/schemas/AssetDetails_ApiGatewayApiAsset'
        S3DataAccessAsset:
          $ref: '#/components/schemas/AssetDetails_S3DataAccessAsset'
        LakeFormationDataPermissionAsset:
          $ref: '#/components/schemas/AssetDetails_LakeFormationDataPermissionAsset'
      type: object
    AssetType:
      enum:
      - S3_SNAPSHOT
      - REDSHIFT_DATA_SHARE
      - API_GATEWAY_API
      - S3_DATA_ACCESS
      - LAKE_FORMATION_DATA_PERMISSION
      type: string
    AssetName:
      type: string
    AssetEntry:
      description: "An asset in AWS Data Exchange is a piece of data (Amazon S3 object)\
        \ or a means of fulfilling data (Amazon Redshift datashare or Amazon API Gateway\
        \ API, AWS Lake Formation data permission, or Amazon S3 data access). The\
        \ asset can be a structured data file, an image file, or some other data file\
        \ that can be stored as an Amazon S3 object, an Amazon API Gateway API, or\
        \ an Amazon Redshift datashare, an AWS Lake Formation data permission, or\
        \ an Amazon S3 data access. When you create an import job for your files,\
        \ API Gateway APIs, Amazon Redshift datashares, AWS Lake Formation data permission,\
        \ or Amazon S3 data access, you create an asset in AWS Data Exchange."
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the asset.
        AssetDetails:
          $ref: '#/components/schemas/GetAssetResponse_AssetDetails'
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the asset was created, in ISO 8601\
              \ format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              asset.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the asset.
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: "The name of the asset. When importing from Amazon S3, the\
              \ Amazon S3 object key is used as the asset name. When exporting to\
              \ Amazon S3, the asset name is used as default target Amazon S3 object\
              \ key. When importing from Amazon API Gateway API, the API name is used\
              \ as the asset name. When importing from Amazon Redshift, the datashare\
              \ name is used as the asset name. When importing from AWS Lake Formation,\
              \ the static values of \"Database(s) included in LF-tag policy\" or\
              \ \"Table(s) included in LF-tag policy\" are used as the asset name."
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              asset.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The asset ID of the owned asset corresponding to the entitled
              asset being viewed. This parameter is returned when an asset owner is
              viewing the entitled copy of its owned asset.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the asset was last updated, in ISO\
              \ 8601 format."
      required:
      - Arn
      - AssetDetails
      - AssetType
      - CreatedAt
      - DataSetId
      - Id
      - Name
      - RevisionId
      - UpdatedAt
      type: object
    AssetSourceEntry:
      description: The source of the assets.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon S3 bucket that's part of the source of the asset.
        Key:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The name of the object in Amazon S3 for the asset.
      required:
      - Bucket
      - Key
      type: object
    AutoExportRevisionDestinationEntry:
      description: A revision destination is the Amazon S3 bucket folder destination
        to where the export will be sent.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon S3 bucket that is the destination for the event
              action.
        KeyPattern:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "A string representing the pattern for generated names of\
              \ the individual assets in the revision. For more information about\
              \ key patterns, see <a href=\"https://docs.aws.amazon.com/data-exchange/latest/userguide/jobs.html#revision-export-keypatterns\"\
              >Key patterns when exporting revisions</a>."
      required:
      - Bucket
      type: object
    ExportServerSideEncryption:
      description: Encryption configuration of the export job. Includes the encryption
        type in addition to the AWS KMS key. The KMS key is only necessary if you
        chose the KMS encryption type.
      properties:
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon Resource Name (ARN) of the AWS KMS key you want
              to use to encrypt the Amazon S3 objects. This parameter is required
              if you choose aws:kms as an encryption type.
        Type:
          allOf:
          - $ref: '#/components/schemas/ServerSideEncryptionTypes'
          - description: The type of server side encryption used for encrypting the
              objects in Amazon S3.
      required:
      - Type
      type: object
    AwsAccountId:
      maxLength: 12
      minLength: 12
      pattern: ".*/^[\\d]{12}$/.*"
      type: string
    CancelJobRequest:
      properties: {}
      title: CancelJobRequest
      type: object
    Code:
      enum:
      - ACCESS_DENIED_EXCEPTION
      - INTERNAL_SERVER_EXCEPTION
      - MALWARE_DETECTED
      - RESOURCE_NOT_FOUND_EXCEPTION
      - SERVICE_QUOTA_EXCEEDED_EXCEPTION
      - VALIDATION_EXCEPTION
      - MALWARE_SCAN_ENCRYPTED_FILE
      type: string
    Description:
      type: string
    Name:
      type: string
    MapOf__string:
      additionalProperties:
        $ref: '#/components/schemas/__string'
      type: object
    CreateDataSetRequest:
      example:
        AssetType: ""
        Description: ""
        Tags: ""
        Name: ""
      properties:
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: "A description for the data set. This value can be up to\
              \ 16,348 characters long."
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the data set.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: "A data set tag is an optional label that you can assign\
              \ to a data set when you create it. Each tag consists of a key and an\
              \ optional value, both of which you define. When you use tagging, you\
              \ can also use tag-based access control in IAM policies to control access\
              \ to these data sets and revisions."
      required:
      - AssetType
      - Description
      - Name
      title: CreateDataSetRequest
      type: object
    Origin:
      enum:
      - OWNED
      - ENTITLED
      type: string
    OriginDetails:
      description: Details about the origin of the data set.
      properties:
        ProductId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The product ID of the origin of the data set.
      required:
      - ProductId
      type: object
    Event:
      description: What occurs to start an action.
      properties:
        RevisionPublished:
          $ref: '#/components/schemas/CreateEventAction_request_Event_RevisionPublished'
      type: object
    CreateEventActionRequest:
      example:
        Action:
          ExportRevisionToS3:
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionDestination:
              KeyPattern: ""
              Bucket: ""
        Event:
          RevisionPublished:
            DataSetId: ""
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventActionResponse_Action'
        Event:
          $ref: '#/components/schemas/CreateEventActionResponse_Event'
      required:
      - Action
      - Event
      title: CreateEventActionRequest
      type: object
    RequestDetails:
      description: The details for the request.
      properties:
        ExportAssetToSignedUrl:
          $ref: '#/components/schemas/CreateJob_request_Details_ExportAssetToSignedUrl'
        ExportAssetsToS3:
          $ref: '#/components/schemas/CreateJob_request_Details_ExportAssetsToS3'
        ExportRevisionsToS3:
          $ref: '#/components/schemas/CreateJob_request_Details_ExportRevisionsToS3'
        ImportAssetFromSignedUrl:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetFromSignedUrl'
        ImportAssetsFromS3:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetsFromS3'
        ImportAssetsFromRedshiftDataShares:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetsFromRedshiftDataShares'
        ImportAssetFromApiGatewayApi:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetFromApiGatewayApi'
        CreateS3DataAccessFromS3Bucket:
          $ref: '#/components/schemas/CreateJob_request_Details_CreateS3DataAccessFromS3Bucket'
        ImportAssetsFromLakeFormationTagPolicy:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetsFromLakeFormationTagPolicy'
      type: object
    Type:
      enum:
      - IMPORT_ASSETS_FROM_S3
      - IMPORT_ASSET_FROM_SIGNED_URL
      - EXPORT_ASSETS_TO_S3
      - EXPORT_ASSET_TO_SIGNED_URL
      - EXPORT_REVISIONS_TO_S3
      - IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES
      - IMPORT_ASSET_FROM_API_GATEWAY_API
      - CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET
      - IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY
      type: string
    CreateJobRequest:
      example:
        Type: ""
        Details:
          ImportAssetsFromLakeFormationTagPolicy:
            Table:
              Expression: ""
              Permissions: ""
            Database:
              Expression: ""
              Permissions: ""
            DataSetId: ""
            CatalogId: ""
            RoleArn: ""
            RevisionId: ""
          ImportAssetsFromRedshiftDataShares:
            AssetSources: ""
            DataSetId: ""
            RevisionId: ""
          ImportAssetFromApiGatewayApi:
            ApiKey: ""
            ApiName: ""
            ProtocolType: ""
            ApiSpecificationMd5Hash: ""
            Stage: ""
            DataSetId: ""
            ApiDescription: ""
            ApiId: ""
            RevisionId: ""
          ExportRevisionsToS3:
            RevisionDestinations: ""
            DataSetId: ""
            Encryption:
              Type: ""
              KmsKeyArn: ""
          ImportAssetFromSignedUrl:
            DataSetId: ""
            Md5Hash: ""
            AssetName: ""
            RevisionId: ""
          ExportAssetToSignedUrl:
            DataSetId: ""
            AssetId: ""
            RevisionId: ""
          ImportAssetsFromS3:
            AssetSources: ""
            DataSetId: ""
            RevisionId: ""
          CreateS3DataAccessFromS3Bucket:
            AssetSource:
              KeyPrefixes: ""
              KmsKeysToGrant: ""
              Bucket: ""
              Keys: ""
            DataSetId: ""
            RevisionId: ""
          ExportAssetsToS3:
            AssetDestinations: ""
            DataSetId: ""
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionId: ""
      properties:
        Details:
          $ref: '#/components/schemas/CreateJobRequest_Details'
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - description: The type of job to be created.
      required:
      - Details
      - Type
      title: CreateJobRequest
      type: object
    ResponseDetails:
      description: Details for the response.
      properties:
        ExportAssetToSignedUrl:
          $ref: '#/components/schemas/ResponseDetails_ExportAssetToSignedUrl'
        ExportAssetsToS3:
          $ref: '#/components/schemas/ResponseDetails_ExportAssetsToS3'
        ExportRevisionsToS3:
          $ref: '#/components/schemas/ResponseDetails_ExportRevisionsToS3'
        ImportAssetFromSignedUrl:
          $ref: '#/components/schemas/ResponseDetails_ImportAssetFromSignedUrl'
        ImportAssetsFromS3:
          $ref: '#/components/schemas/ResponseDetails_ImportAssetsFromS3'
        ImportAssetsFromRedshiftDataShares:
          $ref: '#/components/schemas/ResponseDetails_ImportAssetsFromRedshiftDataShares'
        ImportAssetFromApiGatewayApi:
          $ref: '#/components/schemas/ResponseDetails_ImportAssetFromApiGatewayApi'
        CreateS3DataAccessFromS3Bucket:
          $ref: '#/components/schemas/ResponseDetails_CreateS3DataAccessFromS3Bucket'
        ImportAssetsFromLakeFormationTagPolicy:
          $ref: '#/components/schemas/ResponseDetails_ImportAssetsFromLakeFormationTagPolicy'
      type: object
    ListOfJobError:
      items:
        $ref: '#/components/schemas/JobError'
      type: array
    State:
      enum:
      - WAITING
      - IN_PROGRESS
      - ERROR
      - COMPLETED
      - CANCELLED
      - TIMED_OUT
      type: string
    __stringMin0Max16384:
      maxLength: 16384
      minLength: 0
      type: string
    CreateRevisionRequest:
      example:
        Comment: ""
        Tags: ""
      properties:
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: "A revision tag is an optional label that you can assign\
              \ to a revision when you create it. Each tag consists of a key and an\
              \ optional value, both of which you define. When you use tagging, you\
              \ can also use tag-based access control in IAM policies to control access\
              \ to these data sets and revisions."
      title: CreateRevisionRequest
      type: object
    __boolean:
      type: boolean
    __stringMin10Max512:
      maxLength: 512
      minLength: 10
      type: string
    S3DataAccessAssetSourceEntry:
      description: Source details for an Amazon S3 data access asset.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon S3 bucket used for hosting shared data in the
              Amazon S3 data access.
        KeyPrefixes:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          - description: Organizes Amazon S3 asset key prefixes stored in an Amazon
              S3 bucket.
        Keys:
          allOf:
          - $ref: '#/components/schemas/ListOf__string'
          - description: The keys used to create the Amazon S3 data access.
        KmsKeysToGrant:
          allOf:
          - $ref: '#/components/schemas/ListOfKmsKeysToGrant'
          - description: List of AWS KMS CMKs (Key Management System Customer Managed
              Keys) and ARNs used to encrypt S3 objects being shared in this S3 Data
              Access asset.
      required:
      - Bucket
      type: object
    CreateS3DataAccessFromS3BucketResponseDetails:
      description: Details about the response of the operation to create an S3 data
        access from an S3 bucket.
      properties:
        AssetSource:
          $ref: '#/components/schemas/CreateS3DataAccessFromS3BucketResponseDetails_AssetSource'
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for this data set.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
      required:
      - AssetSource
      - DataSetId
      - RevisionId
      type: object
    DataSetEntry:
      description: A data set is an AWS resource with one or more revisions.
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the data set.
        AssetType:
          allOf:
          - $ref: '#/components/schemas/AssetType'
          - description: The type of asset that is added to a data set.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was created, in ISO\
              \ 8601 format."
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description for the data set.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the data set.
        Origin:
          allOf:
          - $ref: '#/components/schemas/Origin'
          - description: A property that defines the data set as OWNED by the account
              (for providers) or ENTITLED to the account (for subscribers).
        OriginDetails:
          $ref: '#/components/schemas/CreateDataSetResponse_OriginDetails'
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID of the owned data set corresponding to the
              entitled data set being viewed. This parameter is returned when a data
              set owner is viewing the entitled copy of its owned data set.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the data set was last updated, in\
              \ ISO 8601 format."
      required:
      - Arn
      - AssetType
      - CreatedAt
      - Description
      - Id
      - Name
      - Origin
      - UpdatedAt
      type: object
    ListOfLFTags:
      items:
        $ref: '#/components/schemas/LFTag'
      type: array
    DatabaseLFTagPolicy:
      description: The LF-tag policy for database resources.
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          - description: A list of LF-tag conditions that apply to database resources.
      required:
      - Expression
      type: object
    ListOfDatabaseLFTagPolicyPermissions:
      items:
        $ref: '#/components/schemas/DatabaseLFTagPolicyPermission'
      type: array
    DatabaseLFTagPolicyAndPermissions:
      description: The LF-tag policy and permissions for database resources.
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          - description: A list of LF-tag conditions that apply to database resources.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/ListOfDatabaseLFTagPolicyPermissions'
          - description: The permissions granted to subscribers on database resources.
      required:
      - Expression
      - Permissions
      type: object
    DatabaseLFTagPolicyPermission:
      enum:
      - DESCRIBE
      type: string
    DeleteAssetRequest:
      properties: {}
      title: DeleteAssetRequest
      type: object
    DeleteDataSetRequest:
      properties: {}
      title: DeleteDataSetRequest
      type: object
    DeleteEventActionRequest:
      properties: {}
      title: DeleteEventActionRequest
      type: object
    DeleteRevisionRequest:
      properties: {}
      title: DeleteRevisionRequest
      type: object
    ImportAssetFromSignedUrlJobErrorDetails:
      description: Details about the job error.
      properties:
        AssetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: Details about the job error.
      required:
      - AssetName
      type: object
    ListOfAssetSourceEntry:
      items:
        $ref: '#/components/schemas/AssetSourceEntry'
      type: array
    Details:
      description: Information about the job error.
      properties:
        ImportAssetFromSignedUrlJobErrorDetails:
          $ref: '#/components/schemas/Details_ImportAssetFromSignedUrlJobErrorDetails'
        ImportAssetsFromS3JobErrorDetails:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetSourceEntry'
          - description: Details about the job error.
      type: object
    EventActionEntry:
      description: An event action is an object that defines the relationship between
        a specific event and an automated action that will be taken on behalf of the
        customer.
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventActionResponse_Action'
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The Amazon Resource Name (ARN) for the event action.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was created, in\
              \ ISO 8601 format."
        Event:
          $ref: '#/components/schemas/CreateEventActionResponse_Event'
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the event action.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the event action was last updated,\
              \ in ISO 8601 format."
      required:
      - Action
      - Arn
      - CreatedAt
      - Event
      - Id
      - UpdatedAt
      type: object
    ExportAssetToSignedUrlResponseDetails:
      description: The details of the export to signed URL response.
      properties:
        AssetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the asset associated with this
              export job.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              export job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              export response.
        SignedUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The signed URL for the export request.
        SignedUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the signed URL expires, in ISO 8601\
              \ format."
      required:
      - AssetId
      - DataSetId
      - RevisionId
      type: object
    ListOfAssetDestinationEntry:
      items:
        $ref: '#/components/schemas/AssetDestinationEntry'
      type: array
    ExportAssetsToS3ResponseDetails:
      description: Details about the export to Amazon S3 response.
      properties:
        AssetDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetDestinationEntry'
          - description: The destination in Amazon S3 where the asset is exported.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              export job.
        Encryption:
          $ref: '#/components/schemas/ExportAssetsToS3ResponseDetails_Encryption'
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              export response.
      required:
      - AssetDestinations
      - DataSetId
      - RevisionId
      type: object
    ListOfRevisionDestinationEntry:
      items:
        $ref: '#/components/schemas/RevisionDestinationEntry'
      type: array
    ExportRevisionsToS3ResponseDetails:
      description: Details about the export revisions to Amazon S3 response.
      properties:
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              export job.
        Encryption:
          $ref: '#/components/schemas/ExportAssetsToS3ResponseDetails_Encryption'
        RevisionDestinations:
          allOf:
          - $ref: '#/components/schemas/ListOfRevisionDestinationEntry'
          - description: The destination in Amazon S3 where the revision is exported.
        EventActionArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon Resource Name (ARN) of the event action.
      required:
      - DataSetId
      - RevisionDestinations
      type: object
    ServerSideEncryptionTypes:
      enum:
      - aws:kms
      - AES256
      type: string
    GetAssetRequest:
      properties: {}
      title: GetAssetRequest
      type: object
    GetDataSetRequest:
      properties: {}
      title: GetDataSetRequest
      type: object
    GetEventActionRequest:
      properties: {}
      title: GetEventActionRequest
      type: object
    GetJobRequest:
      properties: {}
      title: GetJobRequest
      type: object
    GetRevisionRequest:
      properties: {}
      title: GetRevisionRequest
      type: object
    __stringMin24Max24PatternAZaZ094AZaZ092AZaZ093:
      maxLength: 24
      minLength: 24
      pattern: "(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?"
      type: string
    ImportAssetFromApiGatewayApiResponseDetails:
      description: The response details.
      properties:
        ApiDescription:
          allOf:
          - $ref: '#/components/schemas/ApiDescription'
          - description: The API description.
        ApiId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API ID.
        ApiKey:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API key.
        ApiName:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API name.
        ApiSpecificationMd5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          - description: "The Base64-encoded Md5 hash for the API asset, used to ensure\
              \ the integrity of the API at that location."
        ApiSpecificationUploadUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The upload URL of the API specification.
        ApiSpecificationUploadUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the upload URL expires, in ISO 8601\
              \ format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The data set ID.
        ProtocolType:
          allOf:
          - $ref: '#/components/schemas/ProtocolType'
          - description: The protocol type.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID.
        Stage:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The API stage.
      required:
      - ApiId
      - ApiName
      - ApiSpecificationMd5Hash
      - ApiSpecificationUploadUrl
      - ApiSpecificationUploadUrlExpiresAt
      - DataSetId
      - ProtocolType
      - RevisionId
      - Stage
      type: object
    ImportAssetFromSignedUrlResponseDetails:
      description: "The details in the response for an import request, including the\
        \ signed URL and other information."
      properties:
        AssetName:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: The name for the asset associated with this import job.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        Md5Hash:
          allOf:
          - $ref: '#/components/schemas/__stringMin24Max24PatternAZaZ094AZaZ092AZaZ093'
          - description: "The Base64-encoded Md5 hash for the asset, used to ensure\
              \ the integrity of the file at that location."
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import response.
        SignedUrl:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The signed URL.
        SignedUrlExpiresAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The time and date at which the signed URL expires, in ISO\
              \ 8601 format."
      required:
      - AssetName
      - DataSetId
      - RevisionId
      type: object
    TableLFTagPolicyAndPermissions:
      description: The LF-tag policy and permissions that apply to table resources.
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          - description: A list of LF-tag conditions that apply to table resources.
        Permissions:
          allOf:
          - $ref: '#/components/schemas/ListOfTableTagPolicyLFPermissions'
          - description: The permissions granted to subscribers on table resources.
      required:
      - Expression
      - Permissions
      type: object
    RoleArn:
      pattern: "arn:aws:iam::(\\d{12}):role\\/.+"
      type: string
    ImportAssetsFromLakeFormationTagPolicyResponseDetails:
      description: Details from an import AWS Lake Formation tag policy job response.
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          - description: The identifier for the AWS Glue Data Catalog.
        Database:
          $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails_Database'
        Table:
          $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails_Table'
        RoleArn:
          allOf:
          - $ref: '#/components/schemas/RoleArn'
          - description: The IAM role's ARN that allows AWS Data Exchange to assume
              the role and grant and revoke permissions to AWS Lake Formation data
              permissions.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import job.
      required:
      - CatalogId
      - DataSetId
      - RevisionId
      - RoleArn
      type: object
    ListOfRedshiftDataShareAssetSourceEntry:
      items:
        $ref: '#/components/schemas/RedshiftDataShareAssetSourceEntry'
      type: array
    ImportAssetsFromRedshiftDataSharesResponseDetails:
      description: Details from an import from Amazon Redshift datashare response.
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfRedshiftDataShareAssetSourceEntry'
          - description: A list of Amazon Redshift datashare asset sources.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import job.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      type: object
    ImportAssetsFromS3ResponseDetails:
      description: Details from an import from Amazon S3 response.
      properties:
        AssetSources:
          allOf:
          - $ref: '#/components/schemas/ListOfAssetSourceEntry'
          - description: Is a list of Amazon S3 bucket and object key pairs.
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with this
              import job.
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision associated with this
              import response.
      required:
      - AssetSources
      - DataSetId
      - RevisionId
      type: object
    JobEntry:
      description: AWS Data Exchange Jobs are asynchronous import or export operations
        used to create or copy assets. A data set owner can both import and export
        as they see fit. Someone with an entitlement to a data set can only export.
        Jobs are deleted 90 days after they are created.
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the job.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the job was created, in ISO 8601\
              \ format."
        Details:
          $ref: '#/components/schemas/JobEntry_Details'
        Errors:
          allOf:
          - $ref: '#/components/schemas/ListOfJobError'
          - description: Errors for jobs.
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the job.
        State:
          allOf:
          - $ref: '#/components/schemas/State'
          - description: The state of the job.
        Type:
          allOf:
          - $ref: '#/components/schemas/Type'
          - description: The job type.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the job was last updated, in ISO\
              \ 8601 format."
      required:
      - Arn
      - CreatedAt
      - Details
      - Id
      - State
      - Type
      - UpdatedAt
      type: object
    JobErrorLimitName:
      enum:
      - Assets per revision
      - Asset size in GB
      - Amazon Redshift datashare assets per revision
      - AWS Lake Formation data permission assets per revision
      - Amazon S3 data access assets per revision
      type: string
    __double:
      format: double
      type: number
    JobErrorResourceTypes:
      enum:
      - REVISION
      - ASSET
      - DATA_SET
      type: string
    JobError:
      description: An error that occurred with the job request.
      properties:
        Code:
          allOf:
          - $ref: '#/components/schemas/Code'
          - description: The code for the job error.
        Details:
          $ref: '#/components/schemas/JobError_Details'
        LimitName:
          allOf:
          - $ref: '#/components/schemas/JobErrorLimitName'
          - description: The name of the limit that was reached.
        LimitValue:
          allOf:
          - $ref: '#/components/schemas/__double'
          - description: The value of the exceeded limit.
        Message:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The message related to the job error.
        ResourceId:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The unique identifier for the resource related to the error.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/JobErrorResourceTypes'
          - description: The type of resource related to the error.
      required:
      - Code
      - Message
      type: object
    KmsKeyArn:
      maxLength: 2048
      minLength: 1
      type: string
    KmsKeyToGrant:
      description: The Amazon Resource Name (ARN) of the AWS KMS key used to encrypt
        the shared S3 objects.
      properties:
        KmsKeyArn:
          allOf:
          - $ref: '#/components/schemas/KmsKeyArn'
          - description: The AWS KMS CMK (Key Management System Customer Managed Key)
              used to encrypt S3 objects in the shared S3 Bucket. AWS Data exchange
              will create a KMS grant for each subscriber to allow them to access
              and decrypt their entitled data that is encrypted using this KMS key
              specified.
      required:
      - KmsKeyArn
      type: object
    LFPermission:
      enum:
      - DESCRIBE
      - SELECT
      type: string
    TableLFTagPolicy:
      description: The LF-tag policy for a table resource.
      properties:
        Expression:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTags'
          - description: A list of LF-tag conditions that apply to table resources.
      required:
      - Expression
      type: object
    LFResourceDetails:
      description: Details about the AWS Lake Formation resource (Table or Database)
        included in the AWS Lake Formation data permission.
      properties:
        Database:
          $ref: '#/components/schemas/LFResourceDetails_Database'
        Table:
          $ref: '#/components/schemas/LFResourceDetails_Table'
      type: object
    LFResourceType:
      enum:
      - TABLE
      - DATABASE
      type: string
    String:
      type: string
    ListOfLFTagValues:
      items:
        $ref: '#/components/schemas/String'
      type: array
    LFTag:
      description: A structure that allows an LF-admin to grant permissions on certain
        conditions.
      properties:
        TagKey:
          allOf:
          - $ref: '#/components/schemas/String'
          - description: The key name for the LF-tag.
        TagValues:
          allOf:
          - $ref: '#/components/schemas/ListOfLFTagValues'
          - description: A list of LF-tag values.
      required:
      - TagKey
      - TagValues
      type: object
    LFTagPolicyDetails:
      description: Details about the LF-tag policy.
      properties:
        CatalogId:
          allOf:
          - $ref: '#/components/schemas/AwsAccountId'
          - description: The identifier for the AWS Glue Data Catalog.
        ResourceType:
          allOf:
          - $ref: '#/components/schemas/LFResourceType'
          - description: The resource type for which the LF-tag policy applies.
        ResourceDetails:
          $ref: '#/components/schemas/LFTagPolicyDetails_ResourceDetails'
      required:
      - CatalogId
      - ResourceDetails
      - ResourceType
      type: object
    LakeFormationDataPermissionDetails:
      description: Details about the AWS Lake Formation data permission.
      properties:
        LFTagPolicy:
          $ref: '#/components/schemas/LakeFormationDataPermissionDetails_LFTagPolicy'
      type: object
    LakeFormationDataPermissionType:
      enum:
      - LFTagPolicy
      type: string
    ListOfLFPermissions:
      items:
        $ref: '#/components/schemas/LFPermission'
      type: array
    MaxResults:
      maximum: 200
      minimum: 1
      type: integer
    ListDataSetRevisionsRequest:
      properties: {}
      title: ListDataSetRevisionsRequest
      type: object
    NextToken:
      type: string
    ListOfRevisionEntry:
      items:
        $ref: '#/components/schemas/RevisionEntry'
      type: array
    ListDataSetsRequest:
      properties: {}
      title: ListDataSetsRequest
      type: object
    ListOfDataSetEntry:
      items:
        $ref: '#/components/schemas/DataSetEntry'
      type: array
    ListEventActionsRequest:
      properties: {}
      title: ListEventActionsRequest
      type: object
    ListOfEventActionEntry:
      items:
        $ref: '#/components/schemas/EventActionEntry'
      type: array
    ListJobsRequest:
      properties: {}
      title: ListJobsRequest
      type: object
    ListOfJobEntry:
      items:
        $ref: '#/components/schemas/JobEntry'
      type: array
    ListOfAssetEntry:
      items:
        $ref: '#/components/schemas/AssetEntry'
      type: array
    ListOfKmsKeysToGrant:
      items:
        $ref: '#/components/schemas/KmsKeyToGrant'
      maxItems: 10
      minItems: 1
      type: array
    RedshiftDataShareAssetSourceEntry:
      description: The source of the Amazon Redshift datashare asset.
      properties:
        DataShareArn:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon Resource Name (ARN) of the datashare asset.
      required:
      - DataShareArn
      type: object
    RevisionDestinationEntry:
      description: The destination where the assets in the revision will be exported.
      properties:
        Bucket:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The Amazon S3 bucket that is the destination for the assets
              in the revision.
        KeyPattern:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: "A string representing the pattern for generated names of\
              \ the individual assets in the revision. For more information about\
              \ key patterns, see <a href=\"https://docs.aws.amazon.com/data-exchange/latest/userguide/jobs.html#revision-export-keypatterns\"\
              >Key patterns when exporting revisions</a>."
        RevisionId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
      required:
      - Bucket
      - RevisionId
      type: object
    RevisionEntry:
      description: A revision is a container for one or more assets.
      properties:
        Arn:
          allOf:
          - $ref: '#/components/schemas/Arn'
          - description: The ARN for the revision.
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        CreatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was created, in ISO\
              \ 8601 format."
        DataSetId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the data set associated with the
              data set revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "To publish a revision to a data set in a product, the revision\
              \ must first be finalized. Finalizing a revision tells AWS Data Exchange\
              \ that your changes to the assets in the revision are complete. After\
              \ it's in this read-only state, you can publish the revision to your\
              \ products. Finalized revisions can be published through the AWS Data\
              \ Exchange console or the AWS Marketplace Catalog API, using the StartChangeSet\
              \ AWS Marketplace Catalog API action. When using the API, revisions\
              \ are uniquely identified by their ARN."
        Id:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The unique identifier for the revision.
        SourceId:
          allOf:
          - $ref: '#/components/schemas/Id'
          - description: The revision ID of the owned revision corresponding to the
              entitled revision being viewed. This parameter is returned when a revision
              owner is viewing the entitled copy of its owned revision.
        UpdatedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was last updated, in\
              \ ISO 8601 format."
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          - description: A required comment to inform subscribers of the reason their
              access to the revision was revoked.
        Revoked:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: A status indicating that subscribers' access to the revision
              was revoked.
        RevokedAt:
          allOf:
          - $ref: '#/components/schemas/Timestamp'
          - description: "The date and time that the revision was revoked, in ISO\
              \ 8601 format."
      required:
      - Arn
      - CreatedAt
      - DataSetId
      - Id
      - UpdatedAt
      type: object
    TableTagPolicyLFPermission:
      enum:
      - DESCRIBE
      - SELECT
      type: string
    ListOfTableTagPolicyLFPermissions:
      items:
        $ref: '#/components/schemas/TableTagPolicyLFPermission'
      type: array
    ListOf__string:
      items:
        $ref: '#/components/schemas/__string'
      type: array
    ListRevisionAssetsRequest:
      properties: {}
      title: ListRevisionAssetsRequest
      type: object
    ListTagsForResourceRequest:
      properties: {}
      title: ListTagsForResourceRequest
      type: object
    RevokeRevisionRequest:
      example:
        RevocationComment: ""
      properties:
        RevocationComment:
          allOf:
          - $ref: '#/components/schemas/__stringMin10Max512'
          - description: A required comment to inform subscribers of the reason their
              access to the revision was revoked.
      required:
      - RevocationComment
      title: RevokeRevisionRequest
      type: object
    __doubleMin0:
      format: double
      type: number
    SendApiAssetRequest:
      example:
        RequestHeaders: ""
        Body: ""
      properties:
        Body:
          allOf:
          - $ref: '#/components/schemas/__string'
          - description: The request body.
        RequestHeaders:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: "Any header value prefixed with x-amzn-dataexchange-header-\
              \ will have that stripped before sending the Asset API request. Use\
              \ this when you want to override a header that AWS Data Exchange uses.\
              \ Alternatively, you can use the header without a prefix to the HTTP\
              \ request."
            xml:
              name: x-amzn-dataexchange-header-
      title: SendApiAssetRequest
      type: object
    StartJobRequest:
      properties: {}
      title: StartJobRequest
      type: object
    TagResourceRequest:
      example:
        Tags: ""
      properties:
        Tags:
          allOf:
          - $ref: '#/components/schemas/MapOf__string'
          - description: A label that consists of a customer-defined key and an optional
              value.
            xml:
              name: tags
      required:
      - Tags
      title: TagResourceRequest
      type: object
    UntagResourceRequest:
      properties: {}
      title: UntagResourceRequest
      type: object
    UpdateAssetRequest:
      example:
        Name: ""
      properties:
        Name:
          allOf:
          - $ref: '#/components/schemas/AssetName'
          - description: "The name of the asset. When importing from Amazon S3, the\
              \ Amazon S3 object key is used as the asset name. When exporting to\
              \ Amazon S3, the asset name is used as default target Amazon S3 object\
              \ key. When importing from Amazon API Gateway API, the API name is used\
              \ as the asset name. When importing from Amazon Redshift, the datashare\
              \ name is used as the asset name. When importing from AWS Lake Formation,\
              \ the static values of \"Database(s) included in the LF-tag policy\"\
              \ or \"Table(s) included in LF-tag policy\" are used as the name."
      required:
      - Name
      title: UpdateAssetRequest
      type: object
    UpdateDataSetRequest:
      example:
        Description: ""
        Name: ""
      properties:
        Description:
          allOf:
          - $ref: '#/components/schemas/Description'
          - description: The description for the data set.
        Name:
          allOf:
          - $ref: '#/components/schemas/Name'
          - description: The name of the data set.
      title: UpdateDataSetRequest
      type: object
    UpdateEventActionRequest:
      example:
        Action:
          ExportRevisionToS3:
            Encryption:
              Type: ""
              KmsKeyArn: ""
            RevisionDestination:
              KeyPattern: ""
              Bucket: ""
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventActionResponse_Action'
      title: UpdateEventActionRequest
      type: object
    UpdateRevisionRequest:
      example:
        Comment: ""
        Finalized: ""
      properties:
        Comment:
          allOf:
          - $ref: '#/components/schemas/__stringMin0Max16384'
          - description: An optional comment about the revision.
        Finalized:
          allOf:
          - $ref: '#/components/schemas/__boolean'
          - description: "Finalizing a revision tells AWS Data Exchange that your\
              \ changes to the assets in the revision are complete. After it's in\
              \ this read-only state, you can publish the revision to your products."
      title: UpdateRevisionRequest
      type: object
    CreateDataSet_request:
      properties:
        AssetType:
          description: The type of asset that is added to a data set.
          enum:
          - S3_SNAPSHOT
          - REDSHIFT_DATA_SHARE
          - API_GATEWAY_API
          - S3_DATA_ACCESS
          - LAKE_FORMATION_DATA_PERMISSION
          type: string
        Description:
          description: "A description for the data set. This value can be up to 16,348\
            \ characters long."
          type: string
        Name:
          description: The name of the data set.
          type: string
        Tags:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: "A data set tag is an optional label that you can assign to\
            \ a data set when you create it. Each tag consists of a key and an optional\
            \ value, both of which you define. When you use tagging, you can also\
            \ use tag-based access control in IAM policies to control access to these\
            \ data sets and revisions."
          type: object
      required:
      - AssetType
      - Description
      - Name
      type: object
    CreateEventAction_request_Action_ExportRevisionToS3:
      allOf:
      - $ref: '#/components/schemas/AutoExportRevisionToS3RequestDetails'
      - description: Details for the export revision to Amazon S3 action.
      example:
        Encryption:
          Type: ""
          KmsKeyArn: ""
        RevisionDestination:
          KeyPattern: ""
          Bucket: ""
    CreateEventAction_request_Action:
      description: What occurs after a certain event.
      properties:
        ExportRevisionToS3:
          $ref: '#/components/schemas/CreateEventAction_request_Action_ExportRevisionToS3'
      type: object
    CreateEventAction_request_Event_RevisionPublished:
      allOf:
      - $ref: '#/components/schemas/RevisionPublished'
      - description: What occurs to start the revision publish action.
      example:
        DataSetId: ""
    CreateEventAction_request_Event:
      description: What occurs to start an action.
      properties:
        RevisionPublished:
          $ref: '#/components/schemas/CreateEventAction_request_Event_RevisionPublished'
      type: object
    CreateEventAction_request:
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventAction_request_Action'
        Event:
          $ref: '#/components/schemas/CreateEventAction_request_Event'
      required:
      - Action
      - Event
      type: object
    CreateJob_request_Details_ExportAssetToSignedUrl:
      allOf:
      - $ref: '#/components/schemas/ExportAssetToSignedUrlRequestDetails'
      - description: Details about the export to signed URL request.
      example:
        DataSetId: ""
        AssetId: ""
        RevisionId: ""
    CreateJob_request_Details_ExportAssetsToS3:
      allOf:
      - $ref: '#/components/schemas/ExportAssetsToS3RequestDetails'
      - description: Details about the export to Amazon S3 request.
      example:
        AssetDestinations: ""
        DataSetId: ""
        Encryption:
          Type: ""
          KmsKeyArn: ""
        RevisionId: ""
    CreateJob_request_Details_ExportRevisionsToS3:
      allOf:
      - $ref: '#/components/schemas/ExportRevisionsToS3RequestDetails'
      - description: Details about the export to Amazon S3 request.
      example:
        RevisionDestinations: ""
        DataSetId: ""
        Encryption:
          Type: ""
          KmsKeyArn: ""
    CreateJob_request_Details_ImportAssetFromSignedUrl:
      allOf:
      - $ref: '#/components/schemas/ImportAssetFromSignedUrlRequestDetails'
      - description: Details about the import from Amazon S3 request.
      example:
        DataSetId: ""
        Md5Hash: ""
        AssetName: ""
        RevisionId: ""
    CreateJob_request_Details_ImportAssetsFromS3:
      allOf:
      - $ref: '#/components/schemas/ImportAssetsFromS3RequestDetails'
      - description: Details about the import asset from API Gateway API request.
      example:
        AssetSources: ""
        DataSetId: ""
        RevisionId: ""
    CreateJob_request_Details_ImportAssetsFromRedshiftDataShares:
      allOf:
      - $ref: '#/components/schemas/ImportAssetsFromRedshiftDataSharesRequestDetails'
      - description: Details from an import from Amazon Redshift datashare request.
      example:
        AssetSources: ""
        DataSetId: ""
        RevisionId: ""
    CreateJob_request_Details_ImportAssetFromApiGatewayApi:
      allOf:
      - $ref: '#/components/schemas/ImportAssetFromApiGatewayApiRequestDetails'
      - description: Details about the import from signed URL request.
      example:
        ApiKey: ""
        ApiName: ""
        ProtocolType: ""
        ApiSpecificationMd5Hash: ""
        Stage: ""
        DataSetId: ""
        ApiDescription: ""
        ApiId: ""
        RevisionId: ""
    CreateJob_request_Details_CreateS3DataAccessFromS3Bucket:
      allOf:
      - $ref: '#/components/schemas/CreateS3DataAccessFromS3BucketRequestDetails'
      - description: Details of the request to create S3 data access from the Amazon
          S3 bucket.
      example:
        AssetSource:
          KeyPrefixes: ""
          KmsKeysToGrant: ""
          Bucket: ""
          Keys: ""
        DataSetId: ""
        RevisionId: ""
    CreateJob_request_Details_ImportAssetsFromLakeFormationTagPolicy:
      allOf:
      - $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyRequestDetails'
      - description: Request details for the ImportAssetsFromLakeFormationTagPolicy
          job.
      example:
        Table:
          Expression: ""
          Permissions: ""
        Database:
          Expression: ""
          Permissions: ""
        DataSetId: ""
        CatalogId: ""
        RoleArn: ""
        RevisionId: ""
    CreateJob_request_Details:
      description: The details for the request.
      properties:
        ExportAssetToSignedUrl:
          $ref: '#/components/schemas/CreateJob_request_Details_ExportAssetToSignedUrl'
        ExportAssetsToS3:
          $ref: '#/components/schemas/CreateJob_request_Details_ExportAssetsToS3'
        ExportRevisionsToS3:
          $ref: '#/components/schemas/CreateJob_request_Details_ExportRevisionsToS3'
        ImportAssetFromSignedUrl:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetFromSignedUrl'
        ImportAssetsFromS3:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetsFromS3'
        ImportAssetsFromRedshiftDataShares:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetsFromRedshiftDataShares'
        ImportAssetFromApiGatewayApi:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetFromApiGatewayApi'
        CreateS3DataAccessFromS3Bucket:
          $ref: '#/components/schemas/CreateJob_request_Details_CreateS3DataAccessFromS3Bucket'
        ImportAssetsFromLakeFormationTagPolicy:
          $ref: '#/components/schemas/CreateJob_request_Details_ImportAssetsFromLakeFormationTagPolicy'
      type: object
    CreateJob_request:
      properties:
        Details:
          $ref: '#/components/schemas/CreateJob_request_Details'
        Type:
          description: The type of job to be created.
          enum:
          - IMPORT_ASSETS_FROM_S3
          - IMPORT_ASSET_FROM_SIGNED_URL
          - EXPORT_ASSETS_TO_S3
          - EXPORT_ASSET_TO_SIGNED_URL
          - EXPORT_REVISIONS_TO_S3
          - IMPORT_ASSETS_FROM_REDSHIFT_DATA_SHARES
          - IMPORT_ASSET_FROM_API_GATEWAY_API
          - CREATE_S3_DATA_ACCESS_FROM_S3_BUCKET
          - IMPORT_ASSETS_FROM_LAKE_FORMATION_TAG_POLICY
          type: string
      required:
      - Details
      - Type
      type: object
    CreateRevision_request:
      properties:
        Comment:
          description: An optional comment about the revision.
          maxLength: 16384
          minLength: 0
          type: string
        Tags:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: "A revision tag is an optional label that you can assign to\
            \ a revision when you create it. Each tag consists of a key and an optional\
            \ value, both of which you define. When you use tagging, you can also\
            \ use tag-based access control in IAM policies to control access to these\
            \ data sets and revisions."
          type: object
      type: object
    UpdateAsset_request:
      properties:
        Name:
          description: "The name of the asset. When importing from Amazon S3, the\
            \ Amazon S3 object key is used as the asset name. When exporting to Amazon\
            \ S3, the asset name is used as default target Amazon S3 object key. When\
            \ importing from Amazon API Gateway API, the API name is used as the asset\
            \ name. When importing from Amazon Redshift, the datashare name is used\
            \ as the asset name. When importing from AWS Lake Formation, the static\
            \ values of \"Database(s) included in the LF-tag policy\" or \"Table(s)\
            \ included in LF-tag policy\" are used as the name."
          type: string
      required:
      - Name
      type: object
    UpdateDataSet_request:
      properties:
        Description:
          description: The description for the data set.
          type: string
        Name:
          description: The name of the data set.
          type: string
      type: object
    UpdateEventAction_request:
      properties:
        Action:
          $ref: '#/components/schemas/CreateEventAction_request_Action'
      type: object
    UpdateRevision_request:
      properties:
        Comment:
          description: An optional comment about the revision.
          maxLength: 16384
          minLength: 0
          type: string
        Finalized:
          description: "Finalizing a revision tells AWS Data Exchange that your changes\
            \ to the assets in the revision are complete. After it's in this read-only\
            \ state, you can publish the revision to your products."
          type: boolean
      type: object
    TagResource_request:
      properties:
        tags:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: A label that consists of a customer-defined key and an optional
            value.
          type: object
      required:
      - tags
      type: object
    RevokeRevision_request:
      properties:
        RevocationComment:
          description: A required comment to inform subscribers of the reason their
            access to the revision was revoked.
          maxLength: 512
          minLength: 10
          type: string
      required:
      - RevocationComment
      type: object
    SendApiAsset_request:
      properties:
        Body:
          description: The request body.
          type: string
        x-amzn-dataexchange-header-:
          additionalProperties:
            $ref: '#/components/schemas/__string'
          description: "Any header value prefixed with x-amzn-dataexchange-header-\
            \ will have that stripped before sending the Asset API request. Use this\
            \ when you want to override a header that AWS Data Exchange uses. Alternatively,\
            \ you can use the header without a prefix to the HTTP request."
          type: object
      type: object
    CreateDataSetResponse_OriginDetails:
      allOf:
      - $ref: '#/components/schemas/OriginDetails'
      - description: "If the origin of this data set is ENTITLED, includes the details\
          \ for the product on AWS Marketplace."
      example:
        ProductId: ""
    CreateEventActionResponse_Action:
      allOf:
      - $ref: '#/components/schemas/Action'
      - description: What occurs after a certain event.
      example:
        ExportRevisionToS3:
          Encryption:
            Type: ""
            KmsKeyArn: ""
          RevisionDestination:
            KeyPattern: ""
            Bucket: ""
    CreateEventActionResponse_Event:
      allOf:
      - $ref: '#/components/schemas/Event'
      - description: What occurs to start an action.
      example:
        RevisionPublished:
          DataSetId: ""
    AutoExportRevisionToS3RequestDetails_Encryption:
      allOf:
      - $ref: '#/components/schemas/ExportServerSideEncryption'
      - description: Encryption configuration for the auto export job.
      example:
        Type: ""
        KmsKeyArn: ""
    AutoExportRevisionToS3RequestDetails_RevisionDestination:
      allOf:
      - $ref: '#/components/schemas/AutoExportRevisionDestinationEntry'
      - description: A revision destination is the Amazon S3 bucket folder destination
          to where the export will be sent.
      example:
        KeyPattern: ""
        Bucket: ""
    CreateJobResponse_Details:
      allOf:
      - $ref: '#/components/schemas/ResponseDetails'
      - description: Details about the job.
      example:
        ImportAssetsFromLakeFormationTagPolicy:
          Table:
            Expression: ""
            Permissions: ""
          Database:
            Expression: ""
            Permissions: ""
          DataSetId: ""
          CatalogId: ""
          RoleArn: ""
          RevisionId: ""
        ImportAssetsFromRedshiftDataShares:
          AssetSources: ""
          DataSetId: ""
          RevisionId: ""
        ImportAssetFromApiGatewayApi:
          ApiSpecificationUploadUrlExpiresAt: ""
          ApiKey: ""
          ApiName: ""
          ProtocolType: ""
          ApiSpecificationMd5Hash: ""
          Stage: ""
          DataSetId: ""
          ApiDescription: ""
          ApiId: ""
          RevisionId: ""
          ApiSpecificationUploadUrl: ""
        ExportRevisionsToS3:
          RevisionDestinations: ""
          DataSetId: ""
          Encryption:
            Type: ""
            KmsKeyArn: ""
          EventActionArn: ""
        ImportAssetFromSignedUrl:
          SignedUrl: ""
          DataSetId: ""
          Md5Hash: ""
          AssetName: ""
          RevisionId: ""
          SignedUrlExpiresAt: ""
        ExportAssetToSignedUrl:
          SignedUrl: ""
          DataSetId: ""
          AssetId: ""
          RevisionId: ""
          SignedUrlExpiresAt: ""
        ImportAssetsFromS3:
          AssetSources: ""
          DataSetId: ""
          RevisionId: ""
        CreateS3DataAccessFromS3Bucket:
          AssetSource:
            KeyPrefixes: ""
            KmsKeysToGrant: ""
            Bucket: ""
            Keys: ""
          DataSetId: ""
          RevisionId: ""
        ExportAssetsToS3:
          AssetDestinations: ""
          DataSetId: ""
          Encryption:
            Type: ""
            KmsKeyArn: ""
          RevisionId: ""
    ExportAssetsToS3RequestDetails_Encryption:
      allOf:
      - $ref: '#/components/schemas/ExportServerSideEncryption'
      - description: Encryption configuration for the export job.
      example:
        Type: ""
        KmsKeyArn: ""
    CreateS3DataAccessFromS3BucketRequestDetails_AssetSource:
      allOf:
      - $ref: '#/components/schemas/S3DataAccessAssetSourceEntry'
      - description: Details about the S3 data access source asset.
      example:
        KeyPrefixes: ""
        KmsKeysToGrant: ""
        Bucket: ""
        Keys: ""
    ImportAssetsFromLakeFormationTagPolicyRequestDetails_Database:
      allOf:
      - $ref: '#/components/schemas/DatabaseLFTagPolicyAndPermissions'
      - description: A structure for the database object.
      example:
        Expression: ""
        Permissions: ""
    ImportAssetsFromLakeFormationTagPolicyRequestDetails_Table:
      allOf:
      - $ref: '#/components/schemas/TableLFTagPolicyAndPermissions'
      - description: A structure for the table object.
      example:
        Expression: ""
        Permissions: ""
    GetAssetResponse_AssetDetails:
      allOf:
      - $ref: '#/components/schemas/AssetDetails'
      - description: Details about the asset.
      example:
        ApiGatewayApiAsset:
          ApiKey: ""
          ApiName: ""
          ApiSpecificationDownloadUrl: ""
          ProtocolType: ""
          Stage: ""
          ApiEndpoint: ""
          ApiDescription: ""
          ApiId: ""
          ApiSpecificationDownloadUrlExpiresAt: ""
        RedshiftDataShareAsset:
          Arn: ""
        LakeFormationDataPermissionAsset:
          LakeFormationDataPermissionDetails:
            LFTagPolicy:
              ResourceDetails:
                Table:
                  Expression: ""
                Database:
                  Expression: ""
              ResourceType: ""
              CatalogId: ""
          LakeFormationDataPermissionType: ""
          Permissions: ""
          RoleArn: ""
        S3DataAccessAsset:
          KeyPrefixes: ""
          KmsKeysToGrant: ""
          Bucket: ""
          Keys: ""
          S3AccessPointArn: ""
          S3AccessPointAlias: ""
        S3SnapshotAsset:
          Size: ""
    LakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails:
      allOf:
      - $ref: '#/components/schemas/LakeFormationDataPermissionDetails'
      - description: Details about the AWS Lake Formation data permission.
      example:
        LFTagPolicy:
          ResourceDetails:
            Table:
              Expression: ""
            Database:
              Expression: ""
          ResourceType: ""
          CatalogId: ""
    AssetDetails_S3SnapshotAsset:
      allOf:
      - $ref: '#/components/schemas/S3SnapshotAsset'
      - description: The Amazon S3 object that is the asset.
      example:
        Size: ""
    AssetDetails_RedshiftDataShareAsset:
      allOf:
      - $ref: '#/components/schemas/RedshiftDataShareAsset'
      - description: The Amazon Redshift datashare that is the asset.
      example:
        Arn: ""
    AssetDetails_ApiGatewayApiAsset:
      allOf:
      - $ref: '#/components/schemas/ApiGatewayApiAsset'
      - description: Information about the API Gateway API asset.
      example:
        ApiKey: ""
        ApiName: ""
        ApiSpecificationDownloadUrl: ""
        ProtocolType: ""
        Stage: ""
        ApiEndpoint: ""
        ApiDescription: ""
        ApiId: ""
        ApiSpecificationDownloadUrlExpiresAt: ""
    AssetDetails_S3DataAccessAsset:
      allOf:
      - $ref: '#/components/schemas/S3DataAccessAsset'
      - description: The Amazon S3 data access that is the asset.
      example:
        KeyPrefixes: ""
        KmsKeysToGrant: ""
        Bucket: ""
        Keys: ""
        S3AccessPointArn: ""
        S3AccessPointAlias: ""
    AssetDetails_LakeFormationDataPermissionAsset:
      allOf:
      - $ref: '#/components/schemas/LakeFormationDataPermissionAsset'
      - description: The AWS Lake Formation data permission that is the asset.
      example:
        LakeFormationDataPermissionDetails:
          LFTagPolicy:
            ResourceDetails:
              Table:
                Expression: ""
              Database:
                Expression: ""
            ResourceType: ""
            CatalogId: ""
        LakeFormationDataPermissionType: ""
        Permissions: ""
        RoleArn: ""
    CreateJobRequest_Details:
      allOf:
      - $ref: '#/components/schemas/RequestDetails'
      - description: The details for the CreateJob request.
      example:
        ImportAssetsFromLakeFormationTagPolicy:
          Table:
            Expression: ""
            Permissions: ""
          Database:
            Expression: ""
            Permissions: ""
          DataSetId: ""
          CatalogId: ""
          RoleArn: ""
          RevisionId: ""
        ImportAssetsFromRedshiftDataShares:
          AssetSources: ""
          DataSetId: ""
          RevisionId: ""
        ImportAssetFromApiGatewayApi:
          ApiKey: ""
          ApiName: ""
          ProtocolType: ""
          ApiSpecificationMd5Hash: ""
          Stage: ""
          DataSetId: ""
          ApiDescription: ""
          ApiId: ""
          RevisionId: ""
        ExportRevisionsToS3:
          RevisionDestinations: ""
          DataSetId: ""
          Encryption:
            Type: ""
            KmsKeyArn: ""
        ImportAssetFromSignedUrl:
          DataSetId: ""
          Md5Hash: ""
          AssetName: ""
          RevisionId: ""
        ExportAssetToSignedUrl:
          DataSetId: ""
          AssetId: ""
          RevisionId: ""
        ImportAssetsFromS3:
          AssetSources: ""
          DataSetId: ""
          RevisionId: ""
        CreateS3DataAccessFromS3Bucket:
          AssetSource:
            KeyPrefixes: ""
            KmsKeysToGrant: ""
            Bucket: ""
            Keys: ""
          DataSetId: ""
          RevisionId: ""
        ExportAssetsToS3:
          AssetDestinations: ""
          DataSetId: ""
          Encryption:
            Type: ""
            KmsKeyArn: ""
          RevisionId: ""
    ResponseDetails_ExportAssetToSignedUrl:
      allOf:
      - $ref: '#/components/schemas/ExportAssetToSignedUrlResponseDetails'
      - description: Details for the export to signed URL response.
      example:
        SignedUrl: ""
        DataSetId: ""
        AssetId: ""
        RevisionId: ""
        SignedUrlExpiresAt: ""
    ResponseDetails_ExportAssetsToS3:
      allOf:
      - $ref: '#/components/schemas/ExportAssetsToS3ResponseDetails'
      - description: Details for the export to Amazon S3 response.
      example:
        AssetDestinations: ""
        DataSetId: ""
        Encryption:
          Type: ""
          KmsKeyArn: ""
        RevisionId: ""
    ResponseDetails_ExportRevisionsToS3:
      allOf:
      - $ref: '#/components/schemas/ExportRevisionsToS3ResponseDetails'
      - description: Details for the export revisions to Amazon S3 response.
      example:
        RevisionDestinations: ""
        DataSetId: ""
        Encryption:
          Type: ""
          KmsKeyArn: ""
        EventActionArn: ""
    ResponseDetails_ImportAssetFromSignedUrl:
      allOf:
      - $ref: '#/components/schemas/ImportAssetFromSignedUrlResponseDetails'
      - description: Details for the import from signed URL response.
      example:
        SignedUrl: ""
        DataSetId: ""
        Md5Hash: ""
        AssetName: ""
        RevisionId: ""
        SignedUrlExpiresAt: ""
    ResponseDetails_ImportAssetsFromS3:
      allOf:
      - $ref: '#/components/schemas/ImportAssetsFromS3ResponseDetails'
      - description: Details for the import from Amazon S3 response.
      example:
        AssetSources: ""
        DataSetId: ""
        RevisionId: ""
    ResponseDetails_ImportAssetsFromRedshiftDataShares:
      allOf:
      - $ref: '#/components/schemas/ImportAssetsFromRedshiftDataSharesResponseDetails'
      - description: Details from an import from Amazon Redshift datashare response.
      example:
        AssetSources: ""
        DataSetId: ""
        RevisionId: ""
    ResponseDetails_ImportAssetFromApiGatewayApi:
      allOf:
      - $ref: '#/components/schemas/ImportAssetFromApiGatewayApiResponseDetails'
      - description: The response details.
      example:
        ApiSpecificationUploadUrlExpiresAt: ""
        ApiKey: ""
        ApiName: ""
        ProtocolType: ""
        ApiSpecificationMd5Hash: ""
        Stage: ""
        DataSetId: ""
        ApiDescription: ""
        ApiId: ""
        RevisionId: ""
        ApiSpecificationUploadUrl: ""
    ResponseDetails_CreateS3DataAccessFromS3Bucket:
      allOf:
      - $ref: '#/components/schemas/CreateS3DataAccessFromS3BucketResponseDetails'
      - description: Response details from the CreateS3DataAccessFromS3Bucket job.
      example:
        AssetSource:
          KeyPrefixes: ""
          KmsKeysToGrant: ""
          Bucket: ""
          Keys: ""
        DataSetId: ""
        RevisionId: ""
    ResponseDetails_ImportAssetsFromLakeFormationTagPolicy:
      allOf:
      - $ref: '#/components/schemas/ImportAssetsFromLakeFormationTagPolicyResponseDetails'
      - description: Response details from the ImportAssetsFromLakeFormationTagPolicy
          job.
      example:
        Table:
          Expression: ""
          Permissions: ""
        Database:
          Expression: ""
          Permissions: ""
        DataSetId: ""
        CatalogId: ""
        RoleArn: ""
        RevisionId: ""
    CreateS3DataAccessFromS3BucketResponseDetails_AssetSource:
      allOf:
      - $ref: '#/components/schemas/S3DataAccessAssetSourceEntry'
      - description: Details about the asset source from an Amazon S3 bucket.
      example:
        KeyPrefixes: ""
        KmsKeysToGrant: ""
        Bucket: ""
        Keys: ""
    Details_ImportAssetFromSignedUrlJobErrorDetails:
      allOf:
      - $ref: '#/components/schemas/ImportAssetFromSignedUrlJobErrorDetails'
      - description: Information about the job error.
    ExportAssetsToS3ResponseDetails_Encryption:
      allOf:
      - $ref: '#/components/schemas/ExportServerSideEncryption'
      - description: Encryption configuration of the export job.
      example:
        Type: ""
        KmsKeyArn: ""
    JobEntry_Details:
      allOf:
      - $ref: '#/components/schemas/ResponseDetails'
      - description: "Details of the operation to be performed by the job, such as\
          \ export destination details or import source details."
    JobError_Details:
      allOf:
      - $ref: '#/components/schemas/Details'
      - description: The details about the job error.
    LFResourceDetails_Database:
      allOf:
      - $ref: '#/components/schemas/DatabaseLFTagPolicy'
      - description: Details about the database resource included in the AWS Lake
          Formation data permission.
      example:
        Expression: ""
    LFResourceDetails_Table:
      allOf:
      - $ref: '#/components/schemas/TableLFTagPolicy'
      - description: Details about the table resource included in the AWS Lake Formation
          data permission.
      example:
        Expression: ""
    LFTagPolicyDetails_ResourceDetails:
      allOf:
      - $ref: '#/components/schemas/LFResourceDetails'
      - description: Details for the Lake Formation Resources included in the LF-tag
          policy.
      example:
        Table:
          Expression: ""
        Database:
          Expression: ""
    LakeFormationDataPermissionDetails_LFTagPolicy:
      allOf:
      - $ref: '#/components/schemas/LFTagPolicyDetails'
      - description: Details about the LF-tag policy.
      example:
        ResourceDetails:
          Table:
            Expression: ""
          Database:
            Expression: ""
        ResourceType: ""
        CatalogId: ""
  securitySchemes:
    hmac:
      description: Amazon Signature authorization v4
      in: header
      name: Authorization
      type: apiKey
      x-amazon-apigateway-authtype: awsSigv4
x-hasEquivalentPaths: true

