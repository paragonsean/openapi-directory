/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssetDetails_LakeFormationDataPermissionAsset.h
 *
 * 
 */

#ifndef OAIAssetDetails_LakeFormationDataPermissionAsset_H
#define OAIAssetDetails_LakeFormationDataPermissionAsset_H

#include <QJsonObject>

#include "OAILakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails.h"
#include "OAILakeFormationDataPermissionType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails;

class OAIAssetDetails_LakeFormationDataPermissionAsset : public OAIObject {
public:
    OAIAssetDetails_LakeFormationDataPermissionAsset();
    OAIAssetDetails_LakeFormationDataPermissionAsset(QString json);
    ~OAIAssetDetails_LakeFormationDataPermissionAsset() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAILakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails getLakeFormationDataPermissionDetails() const;
    void setLakeFormationDataPermissionDetails(const OAILakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails &lake_formation_data_permission_details);
    bool is_lake_formation_data_permission_details_Set() const;
    bool is_lake_formation_data_permission_details_Valid() const;

    OAILakeFormationDataPermissionType getLakeFormationDataPermissionType() const;
    void setLakeFormationDataPermissionType(const OAILakeFormationDataPermissionType &lake_formation_data_permission_type);
    bool is_lake_formation_data_permission_type_Set() const;
    bool is_lake_formation_data_permission_type_Valid() const;

    QList getPermissions() const;
    void setPermissions(const QList &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QString getRoleArn() const;
    void setRoleArn(const QString &role_arn);
    bool is_role_arn_Set() const;
    bool is_role_arn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAILakeFormationDataPermissionAsset_LakeFormationDataPermissionDetails m_lake_formation_data_permission_details;
    bool m_lake_formation_data_permission_details_isSet;
    bool m_lake_formation_data_permission_details_isValid;

    OAILakeFormationDataPermissionType m_lake_formation_data_permission_type;
    bool m_lake_formation_data_permission_type_isSet;
    bool m_lake_formation_data_permission_type_isValid;

    QList m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QString m_role_arn;
    bool m_role_arn_isSet;
    bool m_role_arn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssetDetails_LakeFormationDataPermissionAsset)

#endif // OAIAssetDetails_LakeFormationDataPermissionAsset_H
