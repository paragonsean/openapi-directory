/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateDataSetResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateDataSetResponse::OAICreateDataSetResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateDataSetResponse::OAICreateDataSetResponse() {
    this->initializeModel();
}

OAICreateDataSetResponse::~OAICreateDataSetResponse() {}

void OAICreateDataSetResponse::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_origin_details_isSet = false;
    m_origin_details_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICreateDataSetResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateDataSetResponse::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("Arn")]);
    m_arn_isSet = !json[QString("Arn")].isNull() && m_arn_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("AssetType")]);
    m_asset_type_isSet = !json[QString("AssetType")].isNull() && m_asset_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("CreatedAt")]);
    m_created_at_isSet = !json[QString("CreatedAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("Origin")]);
    m_origin_isSet = !json[QString("Origin")].isNull() && m_origin_isValid;

    m_origin_details_isValid = ::OpenAPI::fromJsonValue(m_origin_details, json[QString("OriginDetails")]);
    m_origin_details_isSet = !json[QString("OriginDetails")].isNull() && m_origin_details_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("SourceId")]);
    m_source_id_isSet = !json[QString("SourceId")].isNull() && m_source_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("UpdatedAt")]);
    m_updated_at_isSet = !json[QString("UpdatedAt")].isNull() && m_updated_at_isValid;
}

QString OAICreateDataSetResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateDataSetResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("Arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_asset_type.isSet()) {
        obj.insert(QString("AssetType"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("CreatedAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("Origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_origin_details.isSet()) {
        obj.insert(QString("OriginDetails"), ::OpenAPI::toJsonValue(m_origin_details));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("SourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("UpdatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAICreateDataSetResponse::getArn() const {
    return m_arn;
}
void OAICreateDataSetResponse::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAICreateDataSetResponse::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAICreateDataSetResponse::is_arn_Valid() const{
    return m_arn_isValid;
}

OAIAssetType OAICreateDataSetResponse::getAssetType() const {
    return m_asset_type;
}
void OAICreateDataSetResponse::setAssetType(const OAIAssetType &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAICreateDataSetResponse::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAICreateDataSetResponse::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QDateTime OAICreateDataSetResponse::getCreatedAt() const {
    return m_created_at;
}
void OAICreateDataSetResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICreateDataSetResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICreateDataSetResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICreateDataSetResponse::getDescription() const {
    return m_description;
}
void OAICreateDataSetResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateDataSetResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateDataSetResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateDataSetResponse::getId() const {
    return m_id;
}
void OAICreateDataSetResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateDataSetResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateDataSetResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateDataSetResponse::getName() const {
    return m_name;
}
void OAICreateDataSetResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateDataSetResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateDataSetResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIOrigin OAICreateDataSetResponse::getOrigin() const {
    return m_origin;
}
void OAICreateDataSetResponse::setOrigin(const OAIOrigin &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAICreateDataSetResponse::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAICreateDataSetResponse::is_origin_Valid() const{
    return m_origin_isValid;
}

OAICreateDataSetResponse_OriginDetails OAICreateDataSetResponse::getOriginDetails() const {
    return m_origin_details;
}
void OAICreateDataSetResponse::setOriginDetails(const OAICreateDataSetResponse_OriginDetails &origin_details) {
    m_origin_details = origin_details;
    m_origin_details_isSet = true;
}

bool OAICreateDataSetResponse::is_origin_details_Set() const{
    return m_origin_details_isSet;
}

bool OAICreateDataSetResponse::is_origin_details_Valid() const{
    return m_origin_details_isValid;
}

QString OAICreateDataSetResponse::getSourceId() const {
    return m_source_id;
}
void OAICreateDataSetResponse::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAICreateDataSetResponse::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAICreateDataSetResponse::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QMap OAICreateDataSetResponse::getTags() const {
    return m_tags;
}
void OAICreateDataSetResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateDataSetResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateDataSetResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QDateTime OAICreateDataSetResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAICreateDataSetResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICreateDataSetResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICreateDataSetResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICreateDataSetResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateDataSetResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
