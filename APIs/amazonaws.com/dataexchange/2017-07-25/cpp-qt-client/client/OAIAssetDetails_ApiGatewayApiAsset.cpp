/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetDetails_ApiGatewayApiAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetDetails_ApiGatewayApiAsset::OAIAssetDetails_ApiGatewayApiAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetDetails_ApiGatewayApiAsset::OAIAssetDetails_ApiGatewayApiAsset() {
    this->initializeModel();
}

OAIAssetDetails_ApiGatewayApiAsset::~OAIAssetDetails_ApiGatewayApiAsset() {}

void OAIAssetDetails_ApiGatewayApiAsset::initializeModel() {

    m_api_description_isSet = false;
    m_api_description_isValid = false;

    m_api_endpoint_isSet = false;
    m_api_endpoint_isValid = false;

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_api_name_isSet = false;
    m_api_name_isValid = false;

    m_api_specification_download_url_isSet = false;
    m_api_specification_download_url_isValid = false;

    m_api_specification_download_url_expires_at_isSet = false;
    m_api_specification_download_url_expires_at_isValid = false;

    m_protocol_type_isSet = false;
    m_protocol_type_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;
}

void OAIAssetDetails_ApiGatewayApiAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetDetails_ApiGatewayApiAsset::fromJsonObject(QJsonObject json) {

    m_api_description_isValid = ::OpenAPI::fromJsonValue(m_api_description, json[QString("ApiDescription")]);
    m_api_description_isSet = !json[QString("ApiDescription")].isNull() && m_api_description_isValid;

    m_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_api_endpoint, json[QString("ApiEndpoint")]);
    m_api_endpoint_isSet = !json[QString("ApiEndpoint")].isNull() && m_api_endpoint_isValid;

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("ApiId")]);
    m_api_id_isSet = !json[QString("ApiId")].isNull() && m_api_id_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("ApiKey")]);
    m_api_key_isSet = !json[QString("ApiKey")].isNull() && m_api_key_isValid;

    m_api_name_isValid = ::OpenAPI::fromJsonValue(m_api_name, json[QString("ApiName")]);
    m_api_name_isSet = !json[QString("ApiName")].isNull() && m_api_name_isValid;

    m_api_specification_download_url_isValid = ::OpenAPI::fromJsonValue(m_api_specification_download_url, json[QString("ApiSpecificationDownloadUrl")]);
    m_api_specification_download_url_isSet = !json[QString("ApiSpecificationDownloadUrl")].isNull() && m_api_specification_download_url_isValid;

    m_api_specification_download_url_expires_at_isValid = ::OpenAPI::fromJsonValue(m_api_specification_download_url_expires_at, json[QString("ApiSpecificationDownloadUrlExpiresAt")]);
    m_api_specification_download_url_expires_at_isSet = !json[QString("ApiSpecificationDownloadUrlExpiresAt")].isNull() && m_api_specification_download_url_expires_at_isValid;

    m_protocol_type_isValid = ::OpenAPI::fromJsonValue(m_protocol_type, json[QString("ProtocolType")]);
    m_protocol_type_isSet = !json[QString("ProtocolType")].isNull() && m_protocol_type_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("Stage")]);
    m_stage_isSet = !json[QString("Stage")].isNull() && m_stage_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetDetails_ApiGatewayApiAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_api_description_isSet) {
        obj.insert(QString("ApiDescription"), ::OpenAPI::toJsonValue(m_api_description));
    }
    if (m_api_endpoint_isSet) {
        obj.insert(QString("ApiEndpoint"), ::OpenAPI::toJsonValue(m_api_endpoint));
    }
    if (m_api_id_isSet) {
        obj.insert(QString("ApiId"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("ApiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_api_name_isSet) {
        obj.insert(QString("ApiName"), ::OpenAPI::toJsonValue(m_api_name));
    }
    if (m_api_specification_download_url_isSet) {
        obj.insert(QString("ApiSpecificationDownloadUrl"), ::OpenAPI::toJsonValue(m_api_specification_download_url));
    }
    if (m_api_specification_download_url_expires_at_isSet) {
        obj.insert(QString("ApiSpecificationDownloadUrlExpiresAt"), ::OpenAPI::toJsonValue(m_api_specification_download_url_expires_at));
    }
    if (m_protocol_type.isSet()) {
        obj.insert(QString("ProtocolType"), ::OpenAPI::toJsonValue(m_protocol_type));
    }
    if (m_stage_isSet) {
        obj.insert(QString("Stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    return obj;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getApiDescription() const {
    return m_api_description;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiDescription(const QString &api_description) {
    m_api_description = api_description;
    m_api_description_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_description_Set() const{
    return m_api_description_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_description_Valid() const{
    return m_api_description_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getApiEndpoint() const {
    return m_api_endpoint;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiEndpoint(const QString &api_endpoint) {
    m_api_endpoint = api_endpoint;
    m_api_endpoint_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_endpoint_Set() const{
    return m_api_endpoint_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_endpoint_Valid() const{
    return m_api_endpoint_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getApiId() const {
    return m_api_id;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getApiKey() const {
    return m_api_key;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getApiName() const {
    return m_api_name;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiName(const QString &api_name) {
    m_api_name = api_name;
    m_api_name_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_name_Set() const{
    return m_api_name_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_name_Valid() const{
    return m_api_name_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getApiSpecificationDownloadUrl() const {
    return m_api_specification_download_url;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiSpecificationDownloadUrl(const QString &api_specification_download_url) {
    m_api_specification_download_url = api_specification_download_url;
    m_api_specification_download_url_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_specification_download_url_Set() const{
    return m_api_specification_download_url_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_specification_download_url_Valid() const{
    return m_api_specification_download_url_isValid;
}

QDateTime OAIAssetDetails_ApiGatewayApiAsset::getApiSpecificationDownloadUrlExpiresAt() const {
    return m_api_specification_download_url_expires_at;
}
void OAIAssetDetails_ApiGatewayApiAsset::setApiSpecificationDownloadUrlExpiresAt(const QDateTime &api_specification_download_url_expires_at) {
    m_api_specification_download_url_expires_at = api_specification_download_url_expires_at;
    m_api_specification_download_url_expires_at_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_specification_download_url_expires_at_Set() const{
    return m_api_specification_download_url_expires_at_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_api_specification_download_url_expires_at_Valid() const{
    return m_api_specification_download_url_expires_at_isValid;
}

OAIProtocolType OAIAssetDetails_ApiGatewayApiAsset::getProtocolType() const {
    return m_protocol_type;
}
void OAIAssetDetails_ApiGatewayApiAsset::setProtocolType(const OAIProtocolType &protocol_type) {
    m_protocol_type = protocol_type;
    m_protocol_type_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_protocol_type_Set() const{
    return m_protocol_type_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_protocol_type_Valid() const{
    return m_protocol_type_isValid;
}

QString OAIAssetDetails_ApiGatewayApiAsset::getStage() const {
    return m_stage;
}
void OAIAssetDetails_ApiGatewayApiAsset::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIAssetDetails_ApiGatewayApiAsset::is_stage_Valid() const{
    return m_stage_isValid;
}

bool OAIAssetDetails_ApiGatewayApiAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_specification_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_specification_download_url_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetDetails_ApiGatewayApiAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
