/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportRevisionsToS3ResponseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportRevisionsToS3ResponseDetails::OAIExportRevisionsToS3ResponseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportRevisionsToS3ResponseDetails::OAIExportRevisionsToS3ResponseDetails() {
    this->initializeModel();
}

OAIExportRevisionsToS3ResponseDetails::~OAIExportRevisionsToS3ResponseDetails() {}

void OAIExportRevisionsToS3ResponseDetails::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_encryption_isSet = false;
    m_encryption_isValid = false;

    m_revision_destinations_isSet = false;
    m_revision_destinations_isValid = false;

    m_event_action_arn_isSet = false;
    m_event_action_arn_isValid = false;
}

void OAIExportRevisionsToS3ResponseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportRevisionsToS3ResponseDetails::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("DataSetId")]);
    m_data_set_id_isSet = !json[QString("DataSetId")].isNull() && m_data_set_id_isValid;

    m_encryption_isValid = ::OpenAPI::fromJsonValue(m_encryption, json[QString("Encryption")]);
    m_encryption_isSet = !json[QString("Encryption")].isNull() && m_encryption_isValid;

    m_revision_destinations_isValid = ::OpenAPI::fromJsonValue(m_revision_destinations, json[QString("RevisionDestinations")]);
    m_revision_destinations_isSet = !json[QString("RevisionDestinations")].isNull() && m_revision_destinations_isValid;

    m_event_action_arn_isValid = ::OpenAPI::fromJsonValue(m_event_action_arn, json[QString("EventActionArn")]);
    m_event_action_arn_isSet = !json[QString("EventActionArn")].isNull() && m_event_action_arn_isValid;
}

QString OAIExportRevisionsToS3ResponseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportRevisionsToS3ResponseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("DataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_encryption.isSet()) {
        obj.insert(QString("Encryption"), ::OpenAPI::toJsonValue(m_encryption));
    }
    if (m_revision_destinations.isSet()) {
        obj.insert(QString("RevisionDestinations"), ::OpenAPI::toJsonValue(m_revision_destinations));
    }
    if (m_event_action_arn_isSet) {
        obj.insert(QString("EventActionArn"), ::OpenAPI::toJsonValue(m_event_action_arn));
    }
    return obj;
}

QString OAIExportRevisionsToS3ResponseDetails::getDataSetId() const {
    return m_data_set_id;
}
void OAIExportRevisionsToS3ResponseDetails::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIExportRevisionsToS3ResponseDetails::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIExportRevisionsToS3ResponseDetails::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

OAIExportAssetsToS3ResponseDetails_Encryption OAIExportRevisionsToS3ResponseDetails::getEncryption() const {
    return m_encryption;
}
void OAIExportRevisionsToS3ResponseDetails::setEncryption(const OAIExportAssetsToS3ResponseDetails_Encryption &encryption) {
    m_encryption = encryption;
    m_encryption_isSet = true;
}

bool OAIExportRevisionsToS3ResponseDetails::is_encryption_Set() const{
    return m_encryption_isSet;
}

bool OAIExportRevisionsToS3ResponseDetails::is_encryption_Valid() const{
    return m_encryption_isValid;
}

QList OAIExportRevisionsToS3ResponseDetails::getRevisionDestinations() const {
    return m_revision_destinations;
}
void OAIExportRevisionsToS3ResponseDetails::setRevisionDestinations(const QList &revision_destinations) {
    m_revision_destinations = revision_destinations;
    m_revision_destinations_isSet = true;
}

bool OAIExportRevisionsToS3ResponseDetails::is_revision_destinations_Set() const{
    return m_revision_destinations_isSet;
}

bool OAIExportRevisionsToS3ResponseDetails::is_revision_destinations_Valid() const{
    return m_revision_destinations_isValid;
}

QString OAIExportRevisionsToS3ResponseDetails::getEventActionArn() const {
    return m_event_action_arn;
}
void OAIExportRevisionsToS3ResponseDetails::setEventActionArn(const QString &event_action_arn) {
    m_event_action_arn = event_action_arn;
    m_event_action_arn_isSet = true;
}

bool OAIExportRevisionsToS3ResponseDetails::is_event_action_arn_Set() const{
    return m_event_action_arn_isSet;
}

bool OAIExportRevisionsToS3ResponseDetails::is_event_action_arn_Valid() const{
    return m_event_action_arn_isValid;
}

bool OAIExportRevisionsToS3ResponseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_destinations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_action_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportRevisionsToS3ResponseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_id_isValid && m_revision_destinations_isValid && true;
}

} // namespace OpenAPI
