/**
 * AWS Data Exchange
 * <p>AWS Data Exchange is a service that makes it easy for AWS customers to exchange data in the cloud. You can use the AWS Data Exchange APIs to create, update, manage, and access file-based data set in the AWS Cloud.</p> <p>As a subscriber, you can view and access the data sets that you have an entitlement to through a subscription. You can use the APIs to download or copy your entitled data sets to Amazon Simple Storage Service (Amazon S3) for use across a variety of AWS analytics and machine learning services.</p> <p>As a provider, you can create and manage your data sets that you would like to publish to a product. Being able to package and provide your data sets into products requires a few steps to determine eligibility. For more information, visit the <i>AWS Data Exchange User Guide</i>.</p> <p>A data set is a collection of data that can be changed or updated over time. Data sets can be updated using revisions, which represent a new version or incremental change to a data set. A revision contains one or more assets. An asset in AWS Data Exchange is a piece of data that can be stored as an Amazon S3 object, Redshift datashare, API Gateway API, AWS Lake Formation data permission, or Amazon S3 data access. The asset can be a structured data file, an image file, or some other data file. Jobs are asynchronous import or export operations used to create or copy assets.</p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseDetails::OAIResponseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseDetails::OAIResponseDetails() {
    this->initializeModel();
}

OAIResponseDetails::~OAIResponseDetails() {}

void OAIResponseDetails::initializeModel() {

    m_export_asset_to_signed_url_isSet = false;
    m_export_asset_to_signed_url_isValid = false;

    m_export_assets_to_s3_isSet = false;
    m_export_assets_to_s3_isValid = false;

    m_export_revisions_to_s3_isSet = false;
    m_export_revisions_to_s3_isValid = false;

    m_import_asset_from_signed_url_isSet = false;
    m_import_asset_from_signed_url_isValid = false;

    m_import_assets_from_s3_isSet = false;
    m_import_assets_from_s3_isValid = false;

    m_import_assets_from_redshift_data_shares_isSet = false;
    m_import_assets_from_redshift_data_shares_isValid = false;

    m_import_asset_from_api_gateway_api_isSet = false;
    m_import_asset_from_api_gateway_api_isValid = false;

    m_create_s3_data_access_from_s3_bucket_isSet = false;
    m_create_s3_data_access_from_s3_bucket_isValid = false;

    m_import_assets_from_lake_formation_tag_policy_isSet = false;
    m_import_assets_from_lake_formation_tag_policy_isValid = false;
}

void OAIResponseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseDetails::fromJsonObject(QJsonObject json) {

    m_export_asset_to_signed_url_isValid = ::OpenAPI::fromJsonValue(m_export_asset_to_signed_url, json[QString("ExportAssetToSignedUrl")]);
    m_export_asset_to_signed_url_isSet = !json[QString("ExportAssetToSignedUrl")].isNull() && m_export_asset_to_signed_url_isValid;

    m_export_assets_to_s3_isValid = ::OpenAPI::fromJsonValue(m_export_assets_to_s3, json[QString("ExportAssetsToS3")]);
    m_export_assets_to_s3_isSet = !json[QString("ExportAssetsToS3")].isNull() && m_export_assets_to_s3_isValid;

    m_export_revisions_to_s3_isValid = ::OpenAPI::fromJsonValue(m_export_revisions_to_s3, json[QString("ExportRevisionsToS3")]);
    m_export_revisions_to_s3_isSet = !json[QString("ExportRevisionsToS3")].isNull() && m_export_revisions_to_s3_isValid;

    m_import_asset_from_signed_url_isValid = ::OpenAPI::fromJsonValue(m_import_asset_from_signed_url, json[QString("ImportAssetFromSignedUrl")]);
    m_import_asset_from_signed_url_isSet = !json[QString("ImportAssetFromSignedUrl")].isNull() && m_import_asset_from_signed_url_isValid;

    m_import_assets_from_s3_isValid = ::OpenAPI::fromJsonValue(m_import_assets_from_s3, json[QString("ImportAssetsFromS3")]);
    m_import_assets_from_s3_isSet = !json[QString("ImportAssetsFromS3")].isNull() && m_import_assets_from_s3_isValid;

    m_import_assets_from_redshift_data_shares_isValid = ::OpenAPI::fromJsonValue(m_import_assets_from_redshift_data_shares, json[QString("ImportAssetsFromRedshiftDataShares")]);
    m_import_assets_from_redshift_data_shares_isSet = !json[QString("ImportAssetsFromRedshiftDataShares")].isNull() && m_import_assets_from_redshift_data_shares_isValid;

    m_import_asset_from_api_gateway_api_isValid = ::OpenAPI::fromJsonValue(m_import_asset_from_api_gateway_api, json[QString("ImportAssetFromApiGatewayApi")]);
    m_import_asset_from_api_gateway_api_isSet = !json[QString("ImportAssetFromApiGatewayApi")].isNull() && m_import_asset_from_api_gateway_api_isValid;

    m_create_s3_data_access_from_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_create_s3_data_access_from_s3_bucket, json[QString("CreateS3DataAccessFromS3Bucket")]);
    m_create_s3_data_access_from_s3_bucket_isSet = !json[QString("CreateS3DataAccessFromS3Bucket")].isNull() && m_create_s3_data_access_from_s3_bucket_isValid;

    m_import_assets_from_lake_formation_tag_policy_isValid = ::OpenAPI::fromJsonValue(m_import_assets_from_lake_formation_tag_policy, json[QString("ImportAssetsFromLakeFormationTagPolicy")]);
    m_import_assets_from_lake_formation_tag_policy_isSet = !json[QString("ImportAssetsFromLakeFormationTagPolicy")].isNull() && m_import_assets_from_lake_formation_tag_policy_isValid;
}

QString OAIResponseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_export_asset_to_signed_url.isSet()) {
        obj.insert(QString("ExportAssetToSignedUrl"), ::OpenAPI::toJsonValue(m_export_asset_to_signed_url));
    }
    if (m_export_assets_to_s3.isSet()) {
        obj.insert(QString("ExportAssetsToS3"), ::OpenAPI::toJsonValue(m_export_assets_to_s3));
    }
    if (m_export_revisions_to_s3.isSet()) {
        obj.insert(QString("ExportRevisionsToS3"), ::OpenAPI::toJsonValue(m_export_revisions_to_s3));
    }
    if (m_import_asset_from_signed_url.isSet()) {
        obj.insert(QString("ImportAssetFromSignedUrl"), ::OpenAPI::toJsonValue(m_import_asset_from_signed_url));
    }
    if (m_import_assets_from_s3.isSet()) {
        obj.insert(QString("ImportAssetsFromS3"), ::OpenAPI::toJsonValue(m_import_assets_from_s3));
    }
    if (m_import_assets_from_redshift_data_shares.isSet()) {
        obj.insert(QString("ImportAssetsFromRedshiftDataShares"), ::OpenAPI::toJsonValue(m_import_assets_from_redshift_data_shares));
    }
    if (m_import_asset_from_api_gateway_api.isSet()) {
        obj.insert(QString("ImportAssetFromApiGatewayApi"), ::OpenAPI::toJsonValue(m_import_asset_from_api_gateway_api));
    }
    if (m_create_s3_data_access_from_s3_bucket.isSet()) {
        obj.insert(QString("CreateS3DataAccessFromS3Bucket"), ::OpenAPI::toJsonValue(m_create_s3_data_access_from_s3_bucket));
    }
    if (m_import_assets_from_lake_formation_tag_policy.isSet()) {
        obj.insert(QString("ImportAssetsFromLakeFormationTagPolicy"), ::OpenAPI::toJsonValue(m_import_assets_from_lake_formation_tag_policy));
    }
    return obj;
}

OAIResponseDetails_ExportAssetToSignedUrl OAIResponseDetails::getExportAssetToSignedUrl() const {
    return m_export_asset_to_signed_url;
}
void OAIResponseDetails::setExportAssetToSignedUrl(const OAIResponseDetails_ExportAssetToSignedUrl &export_asset_to_signed_url) {
    m_export_asset_to_signed_url = export_asset_to_signed_url;
    m_export_asset_to_signed_url_isSet = true;
}

bool OAIResponseDetails::is_export_asset_to_signed_url_Set() const{
    return m_export_asset_to_signed_url_isSet;
}

bool OAIResponseDetails::is_export_asset_to_signed_url_Valid() const{
    return m_export_asset_to_signed_url_isValid;
}

OAIResponseDetails_ExportAssetsToS3 OAIResponseDetails::getExportAssetsToS3() const {
    return m_export_assets_to_s3;
}
void OAIResponseDetails::setExportAssetsToS3(const OAIResponseDetails_ExportAssetsToS3 &export_assets_to_s3) {
    m_export_assets_to_s3 = export_assets_to_s3;
    m_export_assets_to_s3_isSet = true;
}

bool OAIResponseDetails::is_export_assets_to_s3_Set() const{
    return m_export_assets_to_s3_isSet;
}

bool OAIResponseDetails::is_export_assets_to_s3_Valid() const{
    return m_export_assets_to_s3_isValid;
}

OAIResponseDetails_ExportRevisionsToS3 OAIResponseDetails::getExportRevisionsToS3() const {
    return m_export_revisions_to_s3;
}
void OAIResponseDetails::setExportRevisionsToS3(const OAIResponseDetails_ExportRevisionsToS3 &export_revisions_to_s3) {
    m_export_revisions_to_s3 = export_revisions_to_s3;
    m_export_revisions_to_s3_isSet = true;
}

bool OAIResponseDetails::is_export_revisions_to_s3_Set() const{
    return m_export_revisions_to_s3_isSet;
}

bool OAIResponseDetails::is_export_revisions_to_s3_Valid() const{
    return m_export_revisions_to_s3_isValid;
}

OAIResponseDetails_ImportAssetFromSignedUrl OAIResponseDetails::getImportAssetFromSignedUrl() const {
    return m_import_asset_from_signed_url;
}
void OAIResponseDetails::setImportAssetFromSignedUrl(const OAIResponseDetails_ImportAssetFromSignedUrl &import_asset_from_signed_url) {
    m_import_asset_from_signed_url = import_asset_from_signed_url;
    m_import_asset_from_signed_url_isSet = true;
}

bool OAIResponseDetails::is_import_asset_from_signed_url_Set() const{
    return m_import_asset_from_signed_url_isSet;
}

bool OAIResponseDetails::is_import_asset_from_signed_url_Valid() const{
    return m_import_asset_from_signed_url_isValid;
}

OAIResponseDetails_ImportAssetsFromS3 OAIResponseDetails::getImportAssetsFromS3() const {
    return m_import_assets_from_s3;
}
void OAIResponseDetails::setImportAssetsFromS3(const OAIResponseDetails_ImportAssetsFromS3 &import_assets_from_s3) {
    m_import_assets_from_s3 = import_assets_from_s3;
    m_import_assets_from_s3_isSet = true;
}

bool OAIResponseDetails::is_import_assets_from_s3_Set() const{
    return m_import_assets_from_s3_isSet;
}

bool OAIResponseDetails::is_import_assets_from_s3_Valid() const{
    return m_import_assets_from_s3_isValid;
}

OAIResponseDetails_ImportAssetsFromRedshiftDataShares OAIResponseDetails::getImportAssetsFromRedshiftDataShares() const {
    return m_import_assets_from_redshift_data_shares;
}
void OAIResponseDetails::setImportAssetsFromRedshiftDataShares(const OAIResponseDetails_ImportAssetsFromRedshiftDataShares &import_assets_from_redshift_data_shares) {
    m_import_assets_from_redshift_data_shares = import_assets_from_redshift_data_shares;
    m_import_assets_from_redshift_data_shares_isSet = true;
}

bool OAIResponseDetails::is_import_assets_from_redshift_data_shares_Set() const{
    return m_import_assets_from_redshift_data_shares_isSet;
}

bool OAIResponseDetails::is_import_assets_from_redshift_data_shares_Valid() const{
    return m_import_assets_from_redshift_data_shares_isValid;
}

OAIResponseDetails_ImportAssetFromApiGatewayApi OAIResponseDetails::getImportAssetFromApiGatewayApi() const {
    return m_import_asset_from_api_gateway_api;
}
void OAIResponseDetails::setImportAssetFromApiGatewayApi(const OAIResponseDetails_ImportAssetFromApiGatewayApi &import_asset_from_api_gateway_api) {
    m_import_asset_from_api_gateway_api = import_asset_from_api_gateway_api;
    m_import_asset_from_api_gateway_api_isSet = true;
}

bool OAIResponseDetails::is_import_asset_from_api_gateway_api_Set() const{
    return m_import_asset_from_api_gateway_api_isSet;
}

bool OAIResponseDetails::is_import_asset_from_api_gateway_api_Valid() const{
    return m_import_asset_from_api_gateway_api_isValid;
}

OAIResponseDetails_CreateS3DataAccessFromS3Bucket OAIResponseDetails::getCreateS3DataAccessFromS3Bucket() const {
    return m_create_s3_data_access_from_s3_bucket;
}
void OAIResponseDetails::setCreateS3DataAccessFromS3Bucket(const OAIResponseDetails_CreateS3DataAccessFromS3Bucket &create_s3_data_access_from_s3_bucket) {
    m_create_s3_data_access_from_s3_bucket = create_s3_data_access_from_s3_bucket;
    m_create_s3_data_access_from_s3_bucket_isSet = true;
}

bool OAIResponseDetails::is_create_s3_data_access_from_s3_bucket_Set() const{
    return m_create_s3_data_access_from_s3_bucket_isSet;
}

bool OAIResponseDetails::is_create_s3_data_access_from_s3_bucket_Valid() const{
    return m_create_s3_data_access_from_s3_bucket_isValid;
}

OAIResponseDetails_ImportAssetsFromLakeFormationTagPolicy OAIResponseDetails::getImportAssetsFromLakeFormationTagPolicy() const {
    return m_import_assets_from_lake_formation_tag_policy;
}
void OAIResponseDetails::setImportAssetsFromLakeFormationTagPolicy(const OAIResponseDetails_ImportAssetsFromLakeFormationTagPolicy &import_assets_from_lake_formation_tag_policy) {
    m_import_assets_from_lake_formation_tag_policy = import_assets_from_lake_formation_tag_policy;
    m_import_assets_from_lake_formation_tag_policy_isSet = true;
}

bool OAIResponseDetails::is_import_assets_from_lake_formation_tag_policy_Set() const{
    return m_import_assets_from_lake_formation_tag_policy_isSet;
}

bool OAIResponseDetails::is_import_assets_from_lake_formation_tag_policy_Valid() const{
    return m_import_assets_from_lake_formation_tag_policy_isValid;
}

bool OAIResponseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_export_asset_to_signed_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_assets_to_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_revisions_to_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_asset_from_signed_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_assets_from_s3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_assets_from_redshift_data_shares.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_asset_from_api_gateway_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_s3_data_access_from_s3_bucket.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_assets_from_lake_formation_tag_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
