/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlanRate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlanRate::OAISavingsPlanRate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlanRate::OAISavingsPlanRate() {
    this->initializeModel();
}

OAISavingsPlanRate::~OAISavingsPlanRate() {}

void OAISavingsPlanRate::initializeModel() {

    m_rate_isSet = false;
    m_rate_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_service_code_isSet = false;
    m_service_code_isValid = false;

    m_usage_type_isSet = false;
    m_usage_type_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAISavingsPlanRate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlanRate::fromJsonObject(QJsonObject json) {

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("rate")]);
    m_rate_isSet = !json[QString("rate")].isNull() && m_rate_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_service_code_isValid = ::OpenAPI::fromJsonValue(m_service_code, json[QString("serviceCode")]);
    m_service_code_isSet = !json[QString("serviceCode")].isNull() && m_service_code_isValid;

    m_usage_type_isValid = ::OpenAPI::fromJsonValue(m_usage_type, json[QString("usageType")]);
    m_usage_type_isSet = !json[QString("usageType")].isNull() && m_usage_type_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAISavingsPlanRate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlanRate::asJsonObject() const {
    QJsonObject obj;
    if (m_rate_isSet) {
        obj.insert(QString("rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_product_type.isSet()) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_service_code.isSet()) {
        obj.insert(QString("serviceCode"), ::OpenAPI::toJsonValue(m_service_code));
    }
    if (m_usage_type_isSet) {
        obj.insert(QString("usageType"), ::OpenAPI::toJsonValue(m_usage_type));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

QString OAISavingsPlanRate::getRate() const {
    return m_rate;
}
void OAISavingsPlanRate::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAISavingsPlanRate::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAISavingsPlanRate::is_rate_Valid() const{
    return m_rate_isValid;
}

OAICurrencyCode OAISavingsPlanRate::getCurrency() const {
    return m_currency;
}
void OAISavingsPlanRate::setCurrency(const OAICurrencyCode &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISavingsPlanRate::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISavingsPlanRate::is_currency_Valid() const{
    return m_currency_isValid;
}

OAISavingsPlanRateUnit OAISavingsPlanRate::getUnit() const {
    return m_unit;
}
void OAISavingsPlanRate::setUnit(const OAISavingsPlanRateUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAISavingsPlanRate::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAISavingsPlanRate::is_unit_Valid() const{
    return m_unit_isValid;
}

OAISavingsPlanProductType OAISavingsPlanRate::getProductType() const {
    return m_product_type;
}
void OAISavingsPlanRate::setProductType(const OAISavingsPlanProductType &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAISavingsPlanRate::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAISavingsPlanRate::is_product_type_Valid() const{
    return m_product_type_isValid;
}

OAISavingsPlanRateServiceCode OAISavingsPlanRate::getServiceCode() const {
    return m_service_code;
}
void OAISavingsPlanRate::setServiceCode(const OAISavingsPlanRateServiceCode &service_code) {
    m_service_code = service_code;
    m_service_code_isSet = true;
}

bool OAISavingsPlanRate::is_service_code_Set() const{
    return m_service_code_isSet;
}

bool OAISavingsPlanRate::is_service_code_Valid() const{
    return m_service_code_isValid;
}

QString OAISavingsPlanRate::getUsageType() const {
    return m_usage_type;
}
void OAISavingsPlanRate::setUsageType(const QString &usage_type) {
    m_usage_type = usage_type;
    m_usage_type_isSet = true;
}

bool OAISavingsPlanRate::is_usage_type_Set() const{
    return m_usage_type_isSet;
}

bool OAISavingsPlanRate::is_usage_type_Valid() const{
    return m_usage_type_isValid;
}

QString OAISavingsPlanRate::getOperation() const {
    return m_operation;
}
void OAISavingsPlanRate::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISavingsPlanRate::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISavingsPlanRate::is_operation_Valid() const{
    return m_operation_isValid;
}

QJsonValue OAISavingsPlanRate::getProperties() const {
    return m_properties;
}
void OAISavingsPlanRate::setProperties(const QJsonValue &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISavingsPlanRate::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISavingsPlanRate::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAISavingsPlanRate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlanRate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
