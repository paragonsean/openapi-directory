/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSavingsPlansOfferingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSavingsPlansOfferingsRequest::OAIDescribeSavingsPlansOfferingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSavingsPlansOfferingsRequest::OAIDescribeSavingsPlansOfferingsRequest() {
    this->initializeModel();
}

OAIDescribeSavingsPlansOfferingsRequest::~OAIDescribeSavingsPlansOfferingsRequest() {}

void OAIDescribeSavingsPlansOfferingsRequest::initializeModel() {

    m_offering_ids_isSet = false;
    m_offering_ids_isValid = false;

    m_payment_options_isSet = false;
    m_payment_options_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_plan_types_isSet = false;
    m_plan_types_isValid = false;

    m_durations_isSet = false;
    m_durations_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;

    m_descriptions_isSet = false;
    m_descriptions_isValid = false;

    m_service_codes_isSet = false;
    m_service_codes_isValid = false;

    m_usage_types_isSet = false;
    m_usage_types_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeSavingsPlansOfferingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSavingsPlansOfferingsRequest::fromJsonObject(QJsonObject json) {

    m_offering_ids_isValid = ::OpenAPI::fromJsonValue(m_offering_ids, json[QString("offeringIds")]);
    m_offering_ids_isSet = !json[QString("offeringIds")].isNull() && m_offering_ids_isValid;

    m_payment_options_isValid = ::OpenAPI::fromJsonValue(m_payment_options, json[QString("paymentOptions")]);
    m_payment_options_isSet = !json[QString("paymentOptions")].isNull() && m_payment_options_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("productType")]);
    m_product_type_isSet = !json[QString("productType")].isNull() && m_product_type_isValid;

    m_plan_types_isValid = ::OpenAPI::fromJsonValue(m_plan_types, json[QString("planTypes")]);
    m_plan_types_isSet = !json[QString("planTypes")].isNull() && m_plan_types_isValid;

    m_durations_isValid = ::OpenAPI::fromJsonValue(m_durations, json[QString("durations")]);
    m_durations_isSet = !json[QString("durations")].isNull() && m_durations_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(m_currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;

    m_descriptions_isValid = ::OpenAPI::fromJsonValue(m_descriptions, json[QString("descriptions")]);
    m_descriptions_isSet = !json[QString("descriptions")].isNull() && m_descriptions_isValid;

    m_service_codes_isValid = ::OpenAPI::fromJsonValue(m_service_codes, json[QString("serviceCodes")]);
    m_service_codes_isSet = !json[QString("serviceCodes")].isNull() && m_service_codes_isValid;

    m_usage_types_isValid = ::OpenAPI::fromJsonValue(m_usage_types, json[QString("usageTypes")]);
    m_usage_types_isSet = !json[QString("usageTypes")].isNull() && m_usage_types_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeSavingsPlansOfferingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSavingsPlansOfferingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_offering_ids.isSet()) {
        obj.insert(QString("offeringIds"), ::OpenAPI::toJsonValue(m_offering_ids));
    }
    if (m_payment_options.isSet()) {
        obj.insert(QString("paymentOptions"), ::OpenAPI::toJsonValue(m_payment_options));
    }
    if (m_product_type.isSet()) {
        obj.insert(QString("productType"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_plan_types.isSet()) {
        obj.insert(QString("planTypes"), ::OpenAPI::toJsonValue(m_plan_types));
    }
    if (m_durations.isSet()) {
        obj.insert(QString("durations"), ::OpenAPI::toJsonValue(m_durations));
    }
    if (m_currencies.isSet()) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(m_currencies));
    }
    if (m_descriptions.isSet()) {
        obj.insert(QString("descriptions"), ::OpenAPI::toJsonValue(m_descriptions));
    }
    if (m_service_codes.isSet()) {
        obj.insert(QString("serviceCodes"), ::OpenAPI::toJsonValue(m_service_codes));
    }
    if (m_usage_types.isSet()) {
        obj.insert(QString("usageTypes"), ::OpenAPI::toJsonValue(m_usage_types));
    }
    if (m_operations.isSet()) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getOfferingIds() const {
    return m_offering_ids;
}
void OAIDescribeSavingsPlansOfferingsRequest::setOfferingIds(const QList &offering_ids) {
    m_offering_ids = offering_ids;
    m_offering_ids_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_offering_ids_Set() const{
    return m_offering_ids_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_offering_ids_Valid() const{
    return m_offering_ids_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getPaymentOptions() const {
    return m_payment_options;
}
void OAIDescribeSavingsPlansOfferingsRequest::setPaymentOptions(const QList &payment_options) {
    m_payment_options = payment_options;
    m_payment_options_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_payment_options_Set() const{
    return m_payment_options_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_payment_options_Valid() const{
    return m_payment_options_isValid;
}

OAISavingsPlanProductType OAIDescribeSavingsPlansOfferingsRequest::getProductType() const {
    return m_product_type;
}
void OAIDescribeSavingsPlansOfferingsRequest::setProductType(const OAISavingsPlanProductType &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_product_type_Valid() const{
    return m_product_type_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getPlanTypes() const {
    return m_plan_types;
}
void OAIDescribeSavingsPlansOfferingsRequest::setPlanTypes(const QList &plan_types) {
    m_plan_types = plan_types;
    m_plan_types_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_plan_types_Set() const{
    return m_plan_types_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_plan_types_Valid() const{
    return m_plan_types_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getDurations() const {
    return m_durations;
}
void OAIDescribeSavingsPlansOfferingsRequest::setDurations(const QList &durations) {
    m_durations = durations;
    m_durations_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_durations_Set() const{
    return m_durations_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_durations_Valid() const{
    return m_durations_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getCurrencies() const {
    return m_currencies;
}
void OAIDescribeSavingsPlansOfferingsRequest::setCurrencies(const QList &currencies) {
    m_currencies = currencies;
    m_currencies_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_currencies_Valid() const{
    return m_currencies_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getDescriptions() const {
    return m_descriptions;
}
void OAIDescribeSavingsPlansOfferingsRequest::setDescriptions(const QList &descriptions) {
    m_descriptions = descriptions;
    m_descriptions_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_descriptions_Set() const{
    return m_descriptions_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_descriptions_Valid() const{
    return m_descriptions_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getServiceCodes() const {
    return m_service_codes;
}
void OAIDescribeSavingsPlansOfferingsRequest::setServiceCodes(const QList &service_codes) {
    m_service_codes = service_codes;
    m_service_codes_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_service_codes_Set() const{
    return m_service_codes_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_service_codes_Valid() const{
    return m_service_codes_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getUsageTypes() const {
    return m_usage_types;
}
void OAIDescribeSavingsPlansOfferingsRequest::setUsageTypes(const QList &usage_types) {
    m_usage_types = usage_types;
    m_usage_types_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_usage_types_Set() const{
    return m_usage_types_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_usage_types_Valid() const{
    return m_usage_types_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getOperations() const {
    return m_operations;
}
void OAIDescribeSavingsPlansOfferingsRequest::setOperations(const QList &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_operations_Valid() const{
    return m_operations_isValid;
}

QList OAIDescribeSavingsPlansOfferingsRequest::getFilters() const {
    return m_filters;
}
void OAIDescribeSavingsPlansOfferingsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIDescribeSavingsPlansOfferingsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeSavingsPlansOfferingsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeSavingsPlansOfferingsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeSavingsPlansOfferingsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeSavingsPlansOfferingsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeSavingsPlansOfferingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offering_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_durations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_codes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSavingsPlansOfferingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
