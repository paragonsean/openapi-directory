/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlan::OAISavingsPlan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlan::OAISavingsPlan() {
    this->initializeModel();
}

OAISavingsPlan::~OAISavingsPlan() {}

void OAISavingsPlan::initializeModel() {

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_savings_plan_id_isSet = false;
    m_savings_plan_id_isValid = false;

    m_savings_plan_arn_isSet = false;
    m_savings_plan_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_end_isSet = false;
    m_end_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_ec2_instance_family_isSet = false;
    m_ec2_instance_family_isValid = false;

    m_savings_plan_type_isSet = false;
    m_savings_plan_type_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_product_types_isSet = false;
    m_product_types_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_commitment_isSet = false;
    m_commitment_isValid = false;

    m_upfront_payment_amount_isSet = false;
    m_upfront_payment_amount_isValid = false;

    m_recurring_payment_amount_isSet = false;
    m_recurring_payment_amount_isValid = false;

    m_term_duration_in_seconds_isSet = false;
    m_term_duration_in_seconds_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISavingsPlan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISavingsPlan::fromJsonObject(QJsonObject json) {

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("offeringId")]);
    m_offering_id_isSet = !json[QString("offeringId")].isNull() && m_offering_id_isValid;

    m_savings_plan_id_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_id, json[QString("savingsPlanId")]);
    m_savings_plan_id_isSet = !json[QString("savingsPlanId")].isNull() && m_savings_plan_id_isValid;

    m_savings_plan_arn_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_arn, json[QString("savingsPlanArn")]);
    m_savings_plan_arn_isSet = !json[QString("savingsPlanArn")].isNull() && m_savings_plan_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_end_isValid = ::OpenAPI::fromJsonValue(m_end, json[QString("end")]);
    m_end_isSet = !json[QString("end")].isNull() && m_end_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_ec2_instance_family_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_family, json[QString("ec2InstanceFamily")]);
    m_ec2_instance_family_isSet = !json[QString("ec2InstanceFamily")].isNull() && m_ec2_instance_family_isValid;

    m_savings_plan_type_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_type, json[QString("savingsPlanType")]);
    m_savings_plan_type_isSet = !json[QString("savingsPlanType")].isNull() && m_savings_plan_type_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("paymentOption")]);
    m_payment_option_isSet = !json[QString("paymentOption")].isNull() && m_payment_option_isValid;

    m_product_types_isValid = ::OpenAPI::fromJsonValue(m_product_types, json[QString("productTypes")]);
    m_product_types_isSet = !json[QString("productTypes")].isNull() && m_product_types_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_commitment_isValid = ::OpenAPI::fromJsonValue(m_commitment, json[QString("commitment")]);
    m_commitment_isSet = !json[QString("commitment")].isNull() && m_commitment_isValid;

    m_upfront_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_upfront_payment_amount, json[QString("upfrontPaymentAmount")]);
    m_upfront_payment_amount_isSet = !json[QString("upfrontPaymentAmount")].isNull() && m_upfront_payment_amount_isValid;

    m_recurring_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_recurring_payment_amount, json[QString("recurringPaymentAmount")]);
    m_recurring_payment_amount_isSet = !json[QString("recurringPaymentAmount")].isNull() && m_recurring_payment_amount_isValid;

    m_term_duration_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_term_duration_in_seconds, json[QString("termDurationInSeconds")]);
    m_term_duration_in_seconds_isSet = !json[QString("termDurationInSeconds")].isNull() && m_term_duration_in_seconds_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISavingsPlan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISavingsPlan::asJsonObject() const {
    QJsonObject obj;
    if (m_offering_id_isSet) {
        obj.insert(QString("offeringId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_savings_plan_id_isSet) {
        obj.insert(QString("savingsPlanId"), ::OpenAPI::toJsonValue(m_savings_plan_id));
    }
    if (m_savings_plan_arn_isSet) {
        obj.insert(QString("savingsPlanArn"), ::OpenAPI::toJsonValue(m_savings_plan_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_end_isSet) {
        obj.insert(QString("end"), ::OpenAPI::toJsonValue(m_end));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_ec2_instance_family_isSet) {
        obj.insert(QString("ec2InstanceFamily"), ::OpenAPI::toJsonValue(m_ec2_instance_family));
    }
    if (m_savings_plan_type.isSet()) {
        obj.insert(QString("savingsPlanType"), ::OpenAPI::toJsonValue(m_savings_plan_type));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("paymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_product_types.isSet()) {
        obj.insert(QString("productTypes"), ::OpenAPI::toJsonValue(m_product_types));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_commitment_isSet) {
        obj.insert(QString("commitment"), ::OpenAPI::toJsonValue(m_commitment));
    }
    if (m_upfront_payment_amount_isSet) {
        obj.insert(QString("upfrontPaymentAmount"), ::OpenAPI::toJsonValue(m_upfront_payment_amount));
    }
    if (m_recurring_payment_amount_isSet) {
        obj.insert(QString("recurringPaymentAmount"), ::OpenAPI::toJsonValue(m_recurring_payment_amount));
    }
    if (m_term_duration_in_seconds_isSet) {
        obj.insert(QString("termDurationInSeconds"), ::OpenAPI::toJsonValue(m_term_duration_in_seconds));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAISavingsPlan::getOfferingId() const {
    return m_offering_id;
}
void OAISavingsPlan::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAISavingsPlan::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAISavingsPlan::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

QString OAISavingsPlan::getSavingsPlanId() const {
    return m_savings_plan_id;
}
void OAISavingsPlan::setSavingsPlanId(const QString &savings_plan_id) {
    m_savings_plan_id = savings_plan_id;
    m_savings_plan_id_isSet = true;
}

bool OAISavingsPlan::is_savings_plan_id_Set() const{
    return m_savings_plan_id_isSet;
}

bool OAISavingsPlan::is_savings_plan_id_Valid() const{
    return m_savings_plan_id_isValid;
}

QString OAISavingsPlan::getSavingsPlanArn() const {
    return m_savings_plan_arn;
}
void OAISavingsPlan::setSavingsPlanArn(const QString &savings_plan_arn) {
    m_savings_plan_arn = savings_plan_arn;
    m_savings_plan_arn_isSet = true;
}

bool OAISavingsPlan::is_savings_plan_arn_Set() const{
    return m_savings_plan_arn_isSet;
}

bool OAISavingsPlan::is_savings_plan_arn_Valid() const{
    return m_savings_plan_arn_isValid;
}

QString OAISavingsPlan::getDescription() const {
    return m_description;
}
void OAISavingsPlan::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISavingsPlan::is_description_Set() const{
    return m_description_isSet;
}

bool OAISavingsPlan::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISavingsPlan::getStart() const {
    return m_start;
}
void OAISavingsPlan::setStart(const QString &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAISavingsPlan::is_start_Set() const{
    return m_start_isSet;
}

bool OAISavingsPlan::is_start_Valid() const{
    return m_start_isValid;
}

QString OAISavingsPlan::getEnd() const {
    return m_end;
}
void OAISavingsPlan::setEnd(const QString &end) {
    m_end = end;
    m_end_isSet = true;
}

bool OAISavingsPlan::is_end_Set() const{
    return m_end_isSet;
}

bool OAISavingsPlan::is_end_Valid() const{
    return m_end_isValid;
}

OAISavingsPlanState OAISavingsPlan::getState() const {
    return m_state;
}
void OAISavingsPlan::setState(const OAISavingsPlanState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISavingsPlan::is_state_Set() const{
    return m_state_isSet;
}

bool OAISavingsPlan::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISavingsPlan::getRegion() const {
    return m_region;
}
void OAISavingsPlan::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISavingsPlan::is_region_Set() const{
    return m_region_isSet;
}

bool OAISavingsPlan::is_region_Valid() const{
    return m_region_isValid;
}

QString OAISavingsPlan::getEc2InstanceFamily() const {
    return m_ec2_instance_family;
}
void OAISavingsPlan::setEc2InstanceFamily(const QString &ec2_instance_family) {
    m_ec2_instance_family = ec2_instance_family;
    m_ec2_instance_family_isSet = true;
}

bool OAISavingsPlan::is_ec2_instance_family_Set() const{
    return m_ec2_instance_family_isSet;
}

bool OAISavingsPlan::is_ec2_instance_family_Valid() const{
    return m_ec2_instance_family_isValid;
}

OAISavingsPlanType OAISavingsPlan::getSavingsPlanType() const {
    return m_savings_plan_type;
}
void OAISavingsPlan::setSavingsPlanType(const OAISavingsPlanType &savings_plan_type) {
    m_savings_plan_type = savings_plan_type;
    m_savings_plan_type_isSet = true;
}

bool OAISavingsPlan::is_savings_plan_type_Set() const{
    return m_savings_plan_type_isSet;
}

bool OAISavingsPlan::is_savings_plan_type_Valid() const{
    return m_savings_plan_type_isValid;
}

OAISavingsPlanPaymentOption OAISavingsPlan::getPaymentOption() const {
    return m_payment_option;
}
void OAISavingsPlan::setPaymentOption(const OAISavingsPlanPaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAISavingsPlan::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAISavingsPlan::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

QList OAISavingsPlan::getProductTypes() const {
    return m_product_types;
}
void OAISavingsPlan::setProductTypes(const QList &product_types) {
    m_product_types = product_types;
    m_product_types_isSet = true;
}

bool OAISavingsPlan::is_product_types_Set() const{
    return m_product_types_isSet;
}

bool OAISavingsPlan::is_product_types_Valid() const{
    return m_product_types_isValid;
}

OAICurrencyCode OAISavingsPlan::getCurrency() const {
    return m_currency;
}
void OAISavingsPlan::setCurrency(const OAICurrencyCode &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAISavingsPlan::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAISavingsPlan::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAISavingsPlan::getCommitment() const {
    return m_commitment;
}
void OAISavingsPlan::setCommitment(const QString &commitment) {
    m_commitment = commitment;
    m_commitment_isSet = true;
}

bool OAISavingsPlan::is_commitment_Set() const{
    return m_commitment_isSet;
}

bool OAISavingsPlan::is_commitment_Valid() const{
    return m_commitment_isValid;
}

QString OAISavingsPlan::getUpfrontPaymentAmount() const {
    return m_upfront_payment_amount;
}
void OAISavingsPlan::setUpfrontPaymentAmount(const QString &upfront_payment_amount) {
    m_upfront_payment_amount = upfront_payment_amount;
    m_upfront_payment_amount_isSet = true;
}

bool OAISavingsPlan::is_upfront_payment_amount_Set() const{
    return m_upfront_payment_amount_isSet;
}

bool OAISavingsPlan::is_upfront_payment_amount_Valid() const{
    return m_upfront_payment_amount_isValid;
}

QString OAISavingsPlan::getRecurringPaymentAmount() const {
    return m_recurring_payment_amount;
}
void OAISavingsPlan::setRecurringPaymentAmount(const QString &recurring_payment_amount) {
    m_recurring_payment_amount = recurring_payment_amount;
    m_recurring_payment_amount_isSet = true;
}

bool OAISavingsPlan::is_recurring_payment_amount_Set() const{
    return m_recurring_payment_amount_isSet;
}

bool OAISavingsPlan::is_recurring_payment_amount_Valid() const{
    return m_recurring_payment_amount_isValid;
}

qint32 OAISavingsPlan::getTermDurationInSeconds() const {
    return m_term_duration_in_seconds;
}
void OAISavingsPlan::setTermDurationInSeconds(const qint32 &term_duration_in_seconds) {
    m_term_duration_in_seconds = term_duration_in_seconds;
    m_term_duration_in_seconds_isSet = true;
}

bool OAISavingsPlan::is_term_duration_in_seconds_Set() const{
    return m_term_duration_in_seconds_isSet;
}

bool OAISavingsPlan::is_term_duration_in_seconds_Valid() const{
    return m_term_duration_in_seconds_isValid;
}

QMap OAISavingsPlan::getTags() const {
    return m_tags;
}
void OAISavingsPlan::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISavingsPlan::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISavingsPlan::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISavingsPlan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plan_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_instance_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upfront_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_duration_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISavingsPlan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
