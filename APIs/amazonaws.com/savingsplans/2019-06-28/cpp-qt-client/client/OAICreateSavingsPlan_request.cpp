/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSavingsPlan_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSavingsPlan_request::OAICreateSavingsPlan_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSavingsPlan_request::OAICreateSavingsPlan_request() {
    this->initializeModel();
}

OAICreateSavingsPlan_request::~OAICreateSavingsPlan_request() {}

void OAICreateSavingsPlan_request::initializeModel() {

    m_savings_plan_offering_id_isSet = false;
    m_savings_plan_offering_id_isValid = false;

    m_commitment_isSet = false;
    m_commitment_isValid = false;

    m_upfront_payment_amount_isSet = false;
    m_upfront_payment_amount_isValid = false;

    m_purchase_time_isSet = false;
    m_purchase_time_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateSavingsPlan_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSavingsPlan_request::fromJsonObject(QJsonObject json) {

    m_savings_plan_offering_id_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_offering_id, json[QString("savingsPlanOfferingId")]);
    m_savings_plan_offering_id_isSet = !json[QString("savingsPlanOfferingId")].isNull() && m_savings_plan_offering_id_isValid;

    m_commitment_isValid = ::OpenAPI::fromJsonValue(m_commitment, json[QString("commitment")]);
    m_commitment_isSet = !json[QString("commitment")].isNull() && m_commitment_isValid;

    m_upfront_payment_amount_isValid = ::OpenAPI::fromJsonValue(m_upfront_payment_amount, json[QString("upfrontPaymentAmount")]);
    m_upfront_payment_amount_isSet = !json[QString("upfrontPaymentAmount")].isNull() && m_upfront_payment_amount_isValid;

    m_purchase_time_isValid = ::OpenAPI::fromJsonValue(m_purchase_time, json[QString("purchaseTime")]);
    m_purchase_time_isSet = !json[QString("purchaseTime")].isNull() && m_purchase_time_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAICreateSavingsPlan_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSavingsPlan_request::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plan_offering_id_isSet) {
        obj.insert(QString("savingsPlanOfferingId"), ::OpenAPI::toJsonValue(m_savings_plan_offering_id));
    }
    if (m_commitment_isSet) {
        obj.insert(QString("commitment"), ::OpenAPI::toJsonValue(m_commitment));
    }
    if (m_upfront_payment_amount_isSet) {
        obj.insert(QString("upfrontPaymentAmount"), ::OpenAPI::toJsonValue(m_upfront_payment_amount));
    }
    if (m_purchase_time_isSet) {
        obj.insert(QString("purchaseTime"), ::OpenAPI::toJsonValue(m_purchase_time));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateSavingsPlan_request::getSavingsPlanOfferingId() const {
    return m_savings_plan_offering_id;
}
void OAICreateSavingsPlan_request::setSavingsPlanOfferingId(const QString &savings_plan_offering_id) {
    m_savings_plan_offering_id = savings_plan_offering_id;
    m_savings_plan_offering_id_isSet = true;
}

bool OAICreateSavingsPlan_request::is_savings_plan_offering_id_Set() const{
    return m_savings_plan_offering_id_isSet;
}

bool OAICreateSavingsPlan_request::is_savings_plan_offering_id_Valid() const{
    return m_savings_plan_offering_id_isValid;
}

QString OAICreateSavingsPlan_request::getCommitment() const {
    return m_commitment;
}
void OAICreateSavingsPlan_request::setCommitment(const QString &commitment) {
    m_commitment = commitment;
    m_commitment_isSet = true;
}

bool OAICreateSavingsPlan_request::is_commitment_Set() const{
    return m_commitment_isSet;
}

bool OAICreateSavingsPlan_request::is_commitment_Valid() const{
    return m_commitment_isValid;
}

QString OAICreateSavingsPlan_request::getUpfrontPaymentAmount() const {
    return m_upfront_payment_amount;
}
void OAICreateSavingsPlan_request::setUpfrontPaymentAmount(const QString &upfront_payment_amount) {
    m_upfront_payment_amount = upfront_payment_amount;
    m_upfront_payment_amount_isSet = true;
}

bool OAICreateSavingsPlan_request::is_upfront_payment_amount_Set() const{
    return m_upfront_payment_amount_isSet;
}

bool OAICreateSavingsPlan_request::is_upfront_payment_amount_Valid() const{
    return m_upfront_payment_amount_isValid;
}

QDateTime OAICreateSavingsPlan_request::getPurchaseTime() const {
    return m_purchase_time;
}
void OAICreateSavingsPlan_request::setPurchaseTime(const QDateTime &purchase_time) {
    m_purchase_time = purchase_time;
    m_purchase_time_isSet = true;
}

bool OAICreateSavingsPlan_request::is_purchase_time_Set() const{
    return m_purchase_time_isSet;
}

bool OAICreateSavingsPlan_request::is_purchase_time_Valid() const{
    return m_purchase_time_isValid;
}

QString OAICreateSavingsPlan_request::getClientToken() const {
    return m_client_token;
}
void OAICreateSavingsPlan_request::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateSavingsPlan_request::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateSavingsPlan_request::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QMap<QString, QString> OAICreateSavingsPlan_request::getTags() const {
    return m_tags;
}
void OAICreateSavingsPlan_request::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateSavingsPlan_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateSavingsPlan_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateSavingsPlan_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plan_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commitment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upfront_payment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSavingsPlan_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_savings_plan_offering_id_isValid && m_commitment_isValid && true;
}

} // namespace OpenAPI
