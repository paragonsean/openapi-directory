/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSavingsPlansOfferingRates_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSavingsPlansOfferingRates_request::OAIDescribeSavingsPlansOfferingRates_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSavingsPlansOfferingRates_request::OAIDescribeSavingsPlansOfferingRates_request() {
    this->initializeModel();
}

OAIDescribeSavingsPlansOfferingRates_request::~OAIDescribeSavingsPlansOfferingRates_request() {}

void OAIDescribeSavingsPlansOfferingRates_request::initializeModel() {

    m_savings_plan_offering_ids_isSet = false;
    m_savings_plan_offering_ids_isValid = false;

    m_savings_plan_payment_options_isSet = false;
    m_savings_plan_payment_options_isValid = false;

    m_savings_plan_types_isSet = false;
    m_savings_plan_types_isValid = false;

    m_products_isSet = false;
    m_products_isValid = false;

    m_service_codes_isSet = false;
    m_service_codes_isValid = false;

    m_usage_types_isSet = false;
    m_usage_types_isValid = false;

    m_operations_isSet = false;
    m_operations_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;
}

void OAIDescribeSavingsPlansOfferingRates_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSavingsPlansOfferingRates_request::fromJsonObject(QJsonObject json) {

    m_savings_plan_offering_ids_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_offering_ids, json[QString("savingsPlanOfferingIds")]);
    m_savings_plan_offering_ids_isSet = !json[QString("savingsPlanOfferingIds")].isNull() && m_savings_plan_offering_ids_isValid;

    m_savings_plan_payment_options_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_payment_options, json[QString("savingsPlanPaymentOptions")]);
    m_savings_plan_payment_options_isSet = !json[QString("savingsPlanPaymentOptions")].isNull() && m_savings_plan_payment_options_isValid;

    m_savings_plan_types_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_types, json[QString("savingsPlanTypes")]);
    m_savings_plan_types_isSet = !json[QString("savingsPlanTypes")].isNull() && m_savings_plan_types_isValid;

    m_products_isValid = ::OpenAPI::fromJsonValue(m_products, json[QString("products")]);
    m_products_isSet = !json[QString("products")].isNull() && m_products_isValid;

    m_service_codes_isValid = ::OpenAPI::fromJsonValue(m_service_codes, json[QString("serviceCodes")]);
    m_service_codes_isSet = !json[QString("serviceCodes")].isNull() && m_service_codes_isValid;

    m_usage_types_isValid = ::OpenAPI::fromJsonValue(m_usage_types, json[QString("usageTypes")]);
    m_usage_types_isSet = !json[QString("usageTypes")].isNull() && m_usage_types_isValid;

    m_operations_isValid = ::OpenAPI::fromJsonValue(m_operations, json[QString("operations")]);
    m_operations_isSet = !json[QString("operations")].isNull() && m_operations_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;
}

QString OAIDescribeSavingsPlansOfferingRates_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSavingsPlansOfferingRates_request::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plan_offering_ids.size() > 0) {
        obj.insert(QString("savingsPlanOfferingIds"), ::OpenAPI::toJsonValue(m_savings_plan_offering_ids));
    }
    if (m_savings_plan_payment_options.size() > 0) {
        obj.insert(QString("savingsPlanPaymentOptions"), ::OpenAPI::toJsonValue(m_savings_plan_payment_options));
    }
    if (m_savings_plan_types.size() > 0) {
        obj.insert(QString("savingsPlanTypes"), ::OpenAPI::toJsonValue(m_savings_plan_types));
    }
    if (m_products.size() > 0) {
        obj.insert(QString("products"), ::OpenAPI::toJsonValue(m_products));
    }
    if (m_service_codes.size() > 0) {
        obj.insert(QString("serviceCodes"), ::OpenAPI::toJsonValue(m_service_codes));
    }
    if (m_usage_types.size() > 0) {
        obj.insert(QString("usageTypes"), ::OpenAPI::toJsonValue(m_usage_types));
    }
    if (m_operations.size() > 0) {
        obj.insert(QString("operations"), ::OpenAPI::toJsonValue(m_operations));
    }
    if (m_filters.size() > 0) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    return obj;
}

QList<QString> OAIDescribeSavingsPlansOfferingRates_request::getSavingsPlanOfferingIds() const {
    return m_savings_plan_offering_ids;
}
void OAIDescribeSavingsPlansOfferingRates_request::setSavingsPlanOfferingIds(const QList<QString> &savings_plan_offering_ids) {
    m_savings_plan_offering_ids = savings_plan_offering_ids;
    m_savings_plan_offering_ids_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_savings_plan_offering_ids_Set() const{
    return m_savings_plan_offering_ids_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_savings_plan_offering_ids_Valid() const{
    return m_savings_plan_offering_ids_isValid;
}

QList<OAISavingsPlanPaymentOption> OAIDescribeSavingsPlansOfferingRates_request::getSavingsPlanPaymentOptions() const {
    return m_savings_plan_payment_options;
}
void OAIDescribeSavingsPlansOfferingRates_request::setSavingsPlanPaymentOptions(const QList<OAISavingsPlanPaymentOption> &savings_plan_payment_options) {
    m_savings_plan_payment_options = savings_plan_payment_options;
    m_savings_plan_payment_options_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_savings_plan_payment_options_Set() const{
    return m_savings_plan_payment_options_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_savings_plan_payment_options_Valid() const{
    return m_savings_plan_payment_options_isValid;
}

QList<OAISavingsPlanType> OAIDescribeSavingsPlansOfferingRates_request::getSavingsPlanTypes() const {
    return m_savings_plan_types;
}
void OAIDescribeSavingsPlansOfferingRates_request::setSavingsPlanTypes(const QList<OAISavingsPlanType> &savings_plan_types) {
    m_savings_plan_types = savings_plan_types;
    m_savings_plan_types_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_savings_plan_types_Set() const{
    return m_savings_plan_types_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_savings_plan_types_Valid() const{
    return m_savings_plan_types_isValid;
}

QList<OAISavingsPlanProductType> OAIDescribeSavingsPlansOfferingRates_request::getProducts() const {
    return m_products;
}
void OAIDescribeSavingsPlansOfferingRates_request::setProducts(const QList<OAISavingsPlanProductType> &products) {
    m_products = products;
    m_products_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_products_Set() const{
    return m_products_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_products_Valid() const{
    return m_products_isValid;
}

QList<OAISavingsPlanRateServiceCode> OAIDescribeSavingsPlansOfferingRates_request::getServiceCodes() const {
    return m_service_codes;
}
void OAIDescribeSavingsPlansOfferingRates_request::setServiceCodes(const QList<OAISavingsPlanRateServiceCode> &service_codes) {
    m_service_codes = service_codes;
    m_service_codes_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_service_codes_Set() const{
    return m_service_codes_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_service_codes_Valid() const{
    return m_service_codes_isValid;
}

QList<QString> OAIDescribeSavingsPlansOfferingRates_request::getUsageTypes() const {
    return m_usage_types;
}
void OAIDescribeSavingsPlansOfferingRates_request::setUsageTypes(const QList<QString> &usage_types) {
    m_usage_types = usage_types;
    m_usage_types_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_usage_types_Set() const{
    return m_usage_types_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_usage_types_Valid() const{
    return m_usage_types_isValid;
}

QList<QString> OAIDescribeSavingsPlansOfferingRates_request::getOperations() const {
    return m_operations;
}
void OAIDescribeSavingsPlansOfferingRates_request::setOperations(const QList<QString> &operations) {
    m_operations = operations;
    m_operations_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_operations_Set() const{
    return m_operations_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_operations_Valid() const{
    return m_operations_isValid;
}

QList<OAISavingsPlanOfferingRateFilterElement> OAIDescribeSavingsPlansOfferingRates_request::getFilters() const {
    return m_filters;
}
void OAIDescribeSavingsPlansOfferingRates_request::setFilters(const QList<OAISavingsPlanOfferingRateFilterElement> &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAIDescribeSavingsPlansOfferingRates_request::getNextToken() const {
    return m_next_token;
}
void OAIDescribeSavingsPlansOfferingRates_request::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeSavingsPlansOfferingRates_request::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeSavingsPlansOfferingRates_request::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeSavingsPlansOfferingRates_request::is_max_results_Valid() const{
    return m_max_results_isValid;
}

bool OAIDescribeSavingsPlansOfferingRates_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plan_offering_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plan_payment_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plan_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_products.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_codes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSavingsPlansOfferingRates_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
