/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParentSavingsPlanOffering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParentSavingsPlanOffering::OAIParentSavingsPlanOffering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParentSavingsPlanOffering::OAIParentSavingsPlanOffering() {
    this->initializeModel();
}

OAIParentSavingsPlanOffering::~OAIParentSavingsPlanOffering() {}

void OAIParentSavingsPlanOffering::initializeModel() {

    m_offering_id_isSet = false;
    m_offering_id_isValid = false;

    m_payment_option_isSet = false;
    m_payment_option_isValid = false;

    m_plan_type_isSet = false;
    m_plan_type_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_plan_description_isSet = false;
    m_plan_description_isValid = false;
}

void OAIParentSavingsPlanOffering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParentSavingsPlanOffering::fromJsonObject(QJsonObject json) {

    m_offering_id_isValid = ::OpenAPI::fromJsonValue(m_offering_id, json[QString("offeringId")]);
    m_offering_id_isSet = !json[QString("offeringId")].isNull() && m_offering_id_isValid;

    m_payment_option_isValid = ::OpenAPI::fromJsonValue(m_payment_option, json[QString("paymentOption")]);
    m_payment_option_isSet = !json[QString("paymentOption")].isNull() && m_payment_option_isValid;

    m_plan_type_isValid = ::OpenAPI::fromJsonValue(m_plan_type, json[QString("planType")]);
    m_plan_type_isSet = !json[QString("planType")].isNull() && m_plan_type_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("durationSeconds")]);
    m_duration_seconds_isSet = !json[QString("durationSeconds")].isNull() && m_duration_seconds_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_plan_description_isValid = ::OpenAPI::fromJsonValue(m_plan_description, json[QString("planDescription")]);
    m_plan_description_isSet = !json[QString("planDescription")].isNull() && m_plan_description_isValid;
}

QString OAIParentSavingsPlanOffering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParentSavingsPlanOffering::asJsonObject() const {
    QJsonObject obj;
    if (m_offering_id_isSet) {
        obj.insert(QString("offeringId"), ::OpenAPI::toJsonValue(m_offering_id));
    }
    if (m_payment_option.isSet()) {
        obj.insert(QString("paymentOption"), ::OpenAPI::toJsonValue(m_payment_option));
    }
    if (m_plan_type.isSet()) {
        obj.insert(QString("planType"), ::OpenAPI::toJsonValue(m_plan_type));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("durationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_plan_description_isSet) {
        obj.insert(QString("planDescription"), ::OpenAPI::toJsonValue(m_plan_description));
    }
    return obj;
}

QString OAIParentSavingsPlanOffering::getOfferingId() const {
    return m_offering_id;
}
void OAIParentSavingsPlanOffering::setOfferingId(const QString &offering_id) {
    m_offering_id = offering_id;
    m_offering_id_isSet = true;
}

bool OAIParentSavingsPlanOffering::is_offering_id_Set() const{
    return m_offering_id_isSet;
}

bool OAIParentSavingsPlanOffering::is_offering_id_Valid() const{
    return m_offering_id_isValid;
}

OAISavingsPlanPaymentOption OAIParentSavingsPlanOffering::getPaymentOption() const {
    return m_payment_option;
}
void OAIParentSavingsPlanOffering::setPaymentOption(const OAISavingsPlanPaymentOption &payment_option) {
    m_payment_option = payment_option;
    m_payment_option_isSet = true;
}

bool OAIParentSavingsPlanOffering::is_payment_option_Set() const{
    return m_payment_option_isSet;
}

bool OAIParentSavingsPlanOffering::is_payment_option_Valid() const{
    return m_payment_option_isValid;
}

OAISavingsPlanType OAIParentSavingsPlanOffering::getPlanType() const {
    return m_plan_type;
}
void OAIParentSavingsPlanOffering::setPlanType(const OAISavingsPlanType &plan_type) {
    m_plan_type = plan_type;
    m_plan_type_isSet = true;
}

bool OAIParentSavingsPlanOffering::is_plan_type_Set() const{
    return m_plan_type_isSet;
}

bool OAIParentSavingsPlanOffering::is_plan_type_Valid() const{
    return m_plan_type_isValid;
}

qint32 OAIParentSavingsPlanOffering::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIParentSavingsPlanOffering::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIParentSavingsPlanOffering::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIParentSavingsPlanOffering::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

OAICurrencyCode OAIParentSavingsPlanOffering::getCurrency() const {
    return m_currency;
}
void OAIParentSavingsPlanOffering::setCurrency(const OAICurrencyCode &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIParentSavingsPlanOffering::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIParentSavingsPlanOffering::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIParentSavingsPlanOffering::getPlanDescription() const {
    return m_plan_description;
}
void OAIParentSavingsPlanOffering::setPlanDescription(const QString &plan_description) {
    m_plan_description = plan_description;
    m_plan_description_isSet = true;
}

bool OAIParentSavingsPlanOffering::is_plan_description_Set() const{
    return m_plan_description_isSet;
}

bool OAIParentSavingsPlanOffering::is_plan_description_Valid() const{
    return m_plan_description_isValid;
}

bool OAIParentSavingsPlanOffering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offering_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParentSavingsPlanOffering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
