/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSavingsPlansRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSavingsPlansRequest::OAIDescribeSavingsPlansRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSavingsPlansRequest::OAIDescribeSavingsPlansRequest() {
    this->initializeModel();
}

OAIDescribeSavingsPlansRequest::~OAIDescribeSavingsPlansRequest() {}

void OAIDescribeSavingsPlansRequest::initializeModel() {

    m_savings_plan_arns_isSet = false;
    m_savings_plan_arns_isValid = false;

    m_savings_plan_ids_isSet = false;
    m_savings_plan_ids_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_states_isSet = false;
    m_states_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;
}

void OAIDescribeSavingsPlansRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSavingsPlansRequest::fromJsonObject(QJsonObject json) {

    m_savings_plan_arns_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_arns, json[QString("savingsPlanArns")]);
    m_savings_plan_arns_isSet = !json[QString("savingsPlanArns")].isNull() && m_savings_plan_arns_isValid;

    m_savings_plan_ids_isValid = ::OpenAPI::fromJsonValue(m_savings_plan_ids, json[QString("savingsPlanIds")]);
    m_savings_plan_ids_isSet = !json[QString("savingsPlanIds")].isNull() && m_savings_plan_ids_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_states_isValid = ::OpenAPI::fromJsonValue(m_states, json[QString("states")]);
    m_states_isSet = !json[QString("states")].isNull() && m_states_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;
}

QString OAIDescribeSavingsPlansRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSavingsPlansRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plan_arns.isSet()) {
        obj.insert(QString("savingsPlanArns"), ::OpenAPI::toJsonValue(m_savings_plan_arns));
    }
    if (m_savings_plan_ids.isSet()) {
        obj.insert(QString("savingsPlanIds"), ::OpenAPI::toJsonValue(m_savings_plan_ids));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_states.isSet()) {
        obj.insert(QString("states"), ::OpenAPI::toJsonValue(m_states));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    return obj;
}

QList OAIDescribeSavingsPlansRequest::getSavingsPlanArns() const {
    return m_savings_plan_arns;
}
void OAIDescribeSavingsPlansRequest::setSavingsPlanArns(const QList &savings_plan_arns) {
    m_savings_plan_arns = savings_plan_arns;
    m_savings_plan_arns_isSet = true;
}

bool OAIDescribeSavingsPlansRequest::is_savings_plan_arns_Set() const{
    return m_savings_plan_arns_isSet;
}

bool OAIDescribeSavingsPlansRequest::is_savings_plan_arns_Valid() const{
    return m_savings_plan_arns_isValid;
}

QList OAIDescribeSavingsPlansRequest::getSavingsPlanIds() const {
    return m_savings_plan_ids;
}
void OAIDescribeSavingsPlansRequest::setSavingsPlanIds(const QList &savings_plan_ids) {
    m_savings_plan_ids = savings_plan_ids;
    m_savings_plan_ids_isSet = true;
}

bool OAIDescribeSavingsPlansRequest::is_savings_plan_ids_Set() const{
    return m_savings_plan_ids_isSet;
}

bool OAIDescribeSavingsPlansRequest::is_savings_plan_ids_Valid() const{
    return m_savings_plan_ids_isValid;
}

QString OAIDescribeSavingsPlansRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeSavingsPlansRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeSavingsPlansRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeSavingsPlansRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

qint32 OAIDescribeSavingsPlansRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeSavingsPlansRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeSavingsPlansRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeSavingsPlansRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QList OAIDescribeSavingsPlansRequest::getStates() const {
    return m_states;
}
void OAIDescribeSavingsPlansRequest::setStates(const QList &states) {
    m_states = states;
    m_states_isSet = true;
}

bool OAIDescribeSavingsPlansRequest::is_states_Set() const{
    return m_states_isSet;
}

bool OAIDescribeSavingsPlansRequest::is_states_Valid() const{
    return m_states_isValid;
}

QList OAIDescribeSavingsPlansRequest::getFilters() const {
    return m_filters;
}
void OAIDescribeSavingsPlansRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeSavingsPlansRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeSavingsPlansRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

bool OAIDescribeSavingsPlansRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plan_arns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_savings_plan_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSavingsPlansRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
