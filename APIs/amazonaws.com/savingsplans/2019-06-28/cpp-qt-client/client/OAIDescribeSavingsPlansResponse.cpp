/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSavingsPlansResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSavingsPlansResponse::OAIDescribeSavingsPlansResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSavingsPlansResponse::OAIDescribeSavingsPlansResponse() {
    this->initializeModel();
}

OAIDescribeSavingsPlansResponse::~OAIDescribeSavingsPlansResponse() {}

void OAIDescribeSavingsPlansResponse::initializeModel() {

    m_savings_plans_isSet = false;
    m_savings_plans_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeSavingsPlansResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSavingsPlansResponse::fromJsonObject(QJsonObject json) {

    m_savings_plans_isValid = ::OpenAPI::fromJsonValue(m_savings_plans, json[QString("savingsPlans")]);
    m_savings_plans_isSet = !json[QString("savingsPlans")].isNull() && m_savings_plans_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeSavingsPlansResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSavingsPlansResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_savings_plans.isSet()) {
        obj.insert(QString("savingsPlans"), ::OpenAPI::toJsonValue(m_savings_plans));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeSavingsPlansResponse::getSavingsPlans() const {
    return m_savings_plans;
}
void OAIDescribeSavingsPlansResponse::setSavingsPlans(const QList &savings_plans) {
    m_savings_plans = savings_plans;
    m_savings_plans_isSet = true;
}

bool OAIDescribeSavingsPlansResponse::is_savings_plans_Set() const{
    return m_savings_plans_isSet;
}

bool OAIDescribeSavingsPlansResponse::is_savings_plans_Valid() const{
    return m_savings_plans_isValid;
}

QString OAIDescribeSavingsPlansResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeSavingsPlansResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeSavingsPlansResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeSavingsPlansResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeSavingsPlansResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_savings_plans.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSavingsPlansResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
