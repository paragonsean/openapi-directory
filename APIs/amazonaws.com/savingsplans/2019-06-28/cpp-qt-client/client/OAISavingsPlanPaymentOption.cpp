/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISavingsPlanPaymentOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISavingsPlanPaymentOption::OAISavingsPlanPaymentOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISavingsPlanPaymentOption::OAISavingsPlanPaymentOption() {
    this->initializeModel();
}

OAISavingsPlanPaymentOption::~OAISavingsPlanPaymentOption() {}

void OAISavingsPlanPaymentOption::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISavingsPlanPaymentOption::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISavingsPlanPaymentOption::fromJson(QString jsonString) {
    
    if ( jsonString.compare("All Upfront", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlanPaymentOption::ALL_UPFRONT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Partial Upfront", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlanPaymentOption::PARTIAL_UPFRONT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("No Upfront", Qt::CaseInsensitive) == 0) {
        m_value = eOAISavingsPlanPaymentOption::NO_UPFRONT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISavingsPlanPaymentOption::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISavingsPlanPaymentOption::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISavingsPlanPaymentOption::ALL_UPFRONT:
            val = "All Upfront";
            break;
        case eOAISavingsPlanPaymentOption::PARTIAL_UPFRONT:
            val = "Partial Upfront";
            break;
        case eOAISavingsPlanPaymentOption::NO_UPFRONT:
            val = "No Upfront";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISavingsPlanPaymentOption::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISavingsPlanPaymentOption::eOAISavingsPlanPaymentOption OAISavingsPlanPaymentOption::getValue() const {
    return m_value;
}

void OAISavingsPlanPaymentOption::setValue(const OAISavingsPlanPaymentOption::eOAISavingsPlanPaymentOption& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISavingsPlanPaymentOption::isSet() const {
    
    return m_value_isSet;
}

bool OAISavingsPlanPaymentOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
