# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_code import CurrencyCode
from openapi_server.models.savings_plan_offering_filter_element import SavingsPlanOfferingFilterElement
from openapi_server.models.savings_plan_payment_option import SavingsPlanPaymentOption
from openapi_server.models.savings_plan_type import SavingsPlanType
import re
from openapi_server import util


class DescribeSavingsPlansOfferingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offering_ids: List[str]=None, payment_options: List[SavingsPlanPaymentOption]=None, product_type: str=None, plan_types: List[SavingsPlanType]=None, durations: List[int]=None, currencies: List[CurrencyCode]=None, descriptions: List[str]=None, service_codes: List[str]=None, usage_types: List[str]=None, operations: List[str]=None, filters: List[SavingsPlanOfferingFilterElement]=None, next_token: str=None, max_results: int=None):
        """DescribeSavingsPlansOfferingsRequest - a model defined in OpenAPI

        :param offering_ids: The offering_ids of this DescribeSavingsPlansOfferingsRequest.
        :param payment_options: The payment_options of this DescribeSavingsPlansOfferingsRequest.
        :param product_type: The product_type of this DescribeSavingsPlansOfferingsRequest.
        :param plan_types: The plan_types of this DescribeSavingsPlansOfferingsRequest.
        :param durations: The durations of this DescribeSavingsPlansOfferingsRequest.
        :param currencies: The currencies of this DescribeSavingsPlansOfferingsRequest.
        :param descriptions: The descriptions of this DescribeSavingsPlansOfferingsRequest.
        :param service_codes: The service_codes of this DescribeSavingsPlansOfferingsRequest.
        :param usage_types: The usage_types of this DescribeSavingsPlansOfferingsRequest.
        :param operations: The operations of this DescribeSavingsPlansOfferingsRequest.
        :param filters: The filters of this DescribeSavingsPlansOfferingsRequest.
        :param next_token: The next_token of this DescribeSavingsPlansOfferingsRequest.
        :param max_results: The max_results of this DescribeSavingsPlansOfferingsRequest.
        """
        self.openapi_types = {
            'offering_ids': List[str],
            'payment_options': List[SavingsPlanPaymentOption],
            'product_type': str,
            'plan_types': List[SavingsPlanType],
            'durations': List[int],
            'currencies': List[CurrencyCode],
            'descriptions': List[str],
            'service_codes': List[str],
            'usage_types': List[str],
            'operations': List[str],
            'filters': List[SavingsPlanOfferingFilterElement],
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'offering_ids': 'offeringIds',
            'payment_options': 'paymentOptions',
            'product_type': 'productType',
            'plan_types': 'planTypes',
            'durations': 'durations',
            'currencies': 'currencies',
            'descriptions': 'descriptions',
            'service_codes': 'serviceCodes',
            'usage_types': 'usageTypes',
            'operations': 'operations',
            'filters': 'filters',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._offering_ids = offering_ids
        self._payment_options = payment_options
        self._product_type = product_type
        self._plan_types = plan_types
        self._durations = durations
        self._currencies = currencies
        self._descriptions = descriptions
        self._service_codes = service_codes
        self._usage_types = usage_types
        self._operations = operations
        self._filters = filters
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSavingsPlansOfferingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSavingsPlansOfferings_request of this DescribeSavingsPlansOfferingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offering_ids(self):
        """Gets the offering_ids of this DescribeSavingsPlansOfferingsRequest.

        The IDs of the offerings.

        :return: The offering_ids of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[str]
        """
        return self._offering_ids

    @offering_ids.setter
    def offering_ids(self, offering_ids):
        """Sets the offering_ids of this DescribeSavingsPlansOfferingsRequest.

        The IDs of the offerings.

        :param offering_ids: The offering_ids of this DescribeSavingsPlansOfferingsRequest.
        :type offering_ids: List[str]
        """

        self._offering_ids = offering_ids

    @property
    def payment_options(self):
        """Gets the payment_options of this DescribeSavingsPlansOfferingsRequest.

        The payment options.

        :return: The payment_options of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[SavingsPlanPaymentOption]
        """
        return self._payment_options

    @payment_options.setter
    def payment_options(self, payment_options):
        """Sets the payment_options of this DescribeSavingsPlansOfferingsRequest.

        The payment options.

        :param payment_options: The payment_options of this DescribeSavingsPlansOfferingsRequest.
        :type payment_options: List[SavingsPlanPaymentOption]
        """

        self._payment_options = payment_options

    @property
    def product_type(self):
        """Gets the product_type of this DescribeSavingsPlansOfferingsRequest.

        The product type.

        :return: The product_type of this DescribeSavingsPlansOfferingsRequest.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this DescribeSavingsPlansOfferingsRequest.

        The product type.

        :param product_type: The product_type of this DescribeSavingsPlansOfferingsRequest.
        :type product_type: str
        """
        allowed_values = ["EC2", "Fargate", "Lambda", "SageMaker"]  # noqa: E501
        if product_type not in allowed_values:
            raise ValueError(
                "Invalid value for `product_type` ({0}), must be one of {1}"
                .format(product_type, allowed_values)
            )

        self._product_type = product_type

    @property
    def plan_types(self):
        """Gets the plan_types of this DescribeSavingsPlansOfferingsRequest.

        The plan type.

        :return: The plan_types of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[SavingsPlanType]
        """
        return self._plan_types

    @plan_types.setter
    def plan_types(self, plan_types):
        """Sets the plan_types of this DescribeSavingsPlansOfferingsRequest.

        The plan type.

        :param plan_types: The plan_types of this DescribeSavingsPlansOfferingsRequest.
        :type plan_types: List[SavingsPlanType]
        """

        self._plan_types = plan_types

    @property
    def durations(self):
        """Gets the durations of this DescribeSavingsPlansOfferingsRequest.

        The durations, in seconds.

        :return: The durations of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[int]
        """
        return self._durations

    @durations.setter
    def durations(self, durations):
        """Sets the durations of this DescribeSavingsPlansOfferingsRequest.

        The durations, in seconds.

        :param durations: The durations of this DescribeSavingsPlansOfferingsRequest.
        :type durations: List[int]
        """

        self._durations = durations

    @property
    def currencies(self):
        """Gets the currencies of this DescribeSavingsPlansOfferingsRequest.

        The currencies.

        :return: The currencies of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[CurrencyCode]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this DescribeSavingsPlansOfferingsRequest.

        The currencies.

        :param currencies: The currencies of this DescribeSavingsPlansOfferingsRequest.
        :type currencies: List[CurrencyCode]
        """

        self._currencies = currencies

    @property
    def descriptions(self):
        """Gets the descriptions of this DescribeSavingsPlansOfferingsRequest.

        The descriptions.

        :return: The descriptions of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """Sets the descriptions of this DescribeSavingsPlansOfferingsRequest.

        The descriptions.

        :param descriptions: The descriptions of this DescribeSavingsPlansOfferingsRequest.
        :type descriptions: List[str]
        """

        self._descriptions = descriptions

    @property
    def service_codes(self):
        """Gets the service_codes of this DescribeSavingsPlansOfferingsRequest.

        The services.

        :return: The service_codes of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[str]
        """
        return self._service_codes

    @service_codes.setter
    def service_codes(self, service_codes):
        """Sets the service_codes of this DescribeSavingsPlansOfferingsRequest.

        The services.

        :param service_codes: The service_codes of this DescribeSavingsPlansOfferingsRequest.
        :type service_codes: List[str]
        """

        self._service_codes = service_codes

    @property
    def usage_types(self):
        """Gets the usage_types of this DescribeSavingsPlansOfferingsRequest.

        The usage details of the line item in the billing report.

        :return: The usage_types of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[str]
        """
        return self._usage_types

    @usage_types.setter
    def usage_types(self, usage_types):
        """Sets the usage_types of this DescribeSavingsPlansOfferingsRequest.

        The usage details of the line item in the billing report.

        :param usage_types: The usage_types of this DescribeSavingsPlansOfferingsRequest.
        :type usage_types: List[str]
        """

        self._usage_types = usage_types

    @property
    def operations(self):
        """Gets the operations of this DescribeSavingsPlansOfferingsRequest.

        The specific AWS operation for the line item in the billing report.

        :return: The operations of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this DescribeSavingsPlansOfferingsRequest.

        The specific AWS operation for the line item in the billing report.

        :param operations: The operations of this DescribeSavingsPlansOfferingsRequest.
        :type operations: List[str]
        """

        self._operations = operations

    @property
    def filters(self):
        """Gets the filters of this DescribeSavingsPlansOfferingsRequest.

        The filters.

        :return: The filters of this DescribeSavingsPlansOfferingsRequest.
        :rtype: List[SavingsPlanOfferingFilterElement]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeSavingsPlansOfferingsRequest.

        The filters.

        :param filters: The filters of this DescribeSavingsPlansOfferingsRequest.
        :type filters: List[SavingsPlanOfferingFilterElement]
        """

        self._filters = filters

    @property
    def next_token(self):
        """Gets the next_token of this DescribeSavingsPlansOfferingsRequest.

        The token for the next page of results.

        :return: The next_token of this DescribeSavingsPlansOfferingsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeSavingsPlansOfferingsRequest.

        The token for the next page of results.

        :param next_token: The next_token of this DescribeSavingsPlansOfferingsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1024:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1024`")
        if next_token is not None and not re.search(r'^[A-Za-z0-9\/=\+]+$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[A-Za-z0-9\/=\+]+$/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this DescribeSavingsPlansOfferingsRequest.

        The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.

        :return: The max_results of this DescribeSavingsPlansOfferingsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeSavingsPlansOfferingsRequest.

        The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.

        :param max_results: The max_results of this DescribeSavingsPlansOfferingsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 0:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `0`")

        self._max_results = max_results
