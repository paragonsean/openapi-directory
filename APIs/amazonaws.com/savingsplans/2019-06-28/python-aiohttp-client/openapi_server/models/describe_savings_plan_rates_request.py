# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.savings_plan_rate_filter import SavingsPlanRateFilter
import re
from openapi_server import util


class DescribeSavingsPlanRatesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, savings_plan_id: str=None, filters: List[SavingsPlanRateFilter]=None, next_token: str=None, max_results: int=None):
        """DescribeSavingsPlanRatesRequest - a model defined in OpenAPI

        :param savings_plan_id: The savings_plan_id of this DescribeSavingsPlanRatesRequest.
        :param filters: The filters of this DescribeSavingsPlanRatesRequest.
        :param next_token: The next_token of this DescribeSavingsPlanRatesRequest.
        :param max_results: The max_results of this DescribeSavingsPlanRatesRequest.
        """
        self.openapi_types = {
            'savings_plan_id': str,
            'filters': List[SavingsPlanRateFilter],
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'savings_plan_id': 'savingsPlanId',
            'filters': 'filters',
            'next_token': 'nextToken',
            'max_results': 'maxResults'
        }

        self._savings_plan_id = savings_plan_id
        self._filters = filters
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeSavingsPlanRatesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeSavingsPlanRates_request of this DescribeSavingsPlanRatesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def savings_plan_id(self):
        """Gets the savings_plan_id of this DescribeSavingsPlanRatesRequest.

        The ID of the Savings Plan.

        :return: The savings_plan_id of this DescribeSavingsPlanRatesRequest.
        :rtype: str
        """
        return self._savings_plan_id

    @savings_plan_id.setter
    def savings_plan_id(self, savings_plan_id):
        """Sets the savings_plan_id of this DescribeSavingsPlanRatesRequest.

        The ID of the Savings Plan.

        :param savings_plan_id: The savings_plan_id of this DescribeSavingsPlanRatesRequest.
        :type savings_plan_id: str
        """
        if savings_plan_id is None:
            raise ValueError("Invalid value for `savings_plan_id`, must not be `None`")

        self._savings_plan_id = savings_plan_id

    @property
    def filters(self):
        """Gets the filters of this DescribeSavingsPlanRatesRequest.

        The filters.

        :return: The filters of this DescribeSavingsPlanRatesRequest.
        :rtype: List[SavingsPlanRateFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeSavingsPlanRatesRequest.

        The filters.

        :param filters: The filters of this DescribeSavingsPlanRatesRequest.
        :type filters: List[SavingsPlanRateFilter]
        """

        self._filters = filters

    @property
    def next_token(self):
        """Gets the next_token of this DescribeSavingsPlanRatesRequest.

        The token for the next page of results.

        :return: The next_token of this DescribeSavingsPlanRatesRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeSavingsPlanRatesRequest.

        The token for the next page of results.

        :param next_token: The next_token of this DescribeSavingsPlanRatesRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 1024:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `1024`")
        if next_token is not None and not re.search(r'^[A-Za-z0-9\/=\+]+$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[A-Za-z0-9\/=\+]+$/`")

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this DescribeSavingsPlanRatesRequest.

        The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.

        :return: The max_results of this DescribeSavingsPlanRatesRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeSavingsPlanRatesRequest.

        The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.

        :param max_results: The max_results of this DescribeSavingsPlanRatesRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results
