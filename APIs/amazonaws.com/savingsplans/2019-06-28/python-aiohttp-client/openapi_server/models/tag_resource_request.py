# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TagResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, tags: Dict[str, str]=None):
        """TagResourceRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this TagResourceRequest.
        :param tags: The tags of this TagResourceRequest.
        """
        self.openapi_types = {
            'resource_arn': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'resource_arn': 'resourceArn',
            'tags': 'tags'
        }

        self._resource_arn = resource_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagResource_request of this TagResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this TagResourceRequest.

        The Amazon Resource Name (ARN) of the resource.

        :return: The resource_arn of this TagResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this TagResourceRequest.

        The Amazon Resource Name (ARN) of the resource.

        :param resource_arn: The resource_arn of this TagResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and not re.search(r'arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:aws:[a-z]+:([a-z]{2}-[a-z]+-\d{1}|):(\d{12}):savingsplan\/([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})$/`")

        self._resource_arn = resource_arn

    @property
    def tags(self):
        """Gets the tags of this TagResourceRequest.

        One or more tags. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :return: The tags of this TagResourceRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagResourceRequest.

        One or more tags. For example, { \"tags\": {\"key1\":\"value1\", \"key2\":\"value2\"} }.

        :param tags: The tags of this TagResourceRequest.
        :type tags: Dict[str, str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
