# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSavingsPlanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, savings_plan_offering_id: str=None, commitment: str=None, upfront_payment_amount: str=None, purchase_time: datetime=None, client_token: str=None, tags: Dict[str, str]=None):
        """CreateSavingsPlanRequest - a model defined in OpenAPI

        :param savings_plan_offering_id: The savings_plan_offering_id of this CreateSavingsPlanRequest.
        :param commitment: The commitment of this CreateSavingsPlanRequest.
        :param upfront_payment_amount: The upfront_payment_amount of this CreateSavingsPlanRequest.
        :param purchase_time: The purchase_time of this CreateSavingsPlanRequest.
        :param client_token: The client_token of this CreateSavingsPlanRequest.
        :param tags: The tags of this CreateSavingsPlanRequest.
        """
        self.openapi_types = {
            'savings_plan_offering_id': str,
            'commitment': str,
            'upfront_payment_amount': str,
            'purchase_time': datetime,
            'client_token': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'savings_plan_offering_id': 'savingsPlanOfferingId',
            'commitment': 'commitment',
            'upfront_payment_amount': 'upfrontPaymentAmount',
            'purchase_time': 'purchaseTime',
            'client_token': 'clientToken',
            'tags': 'tags'
        }

        self._savings_plan_offering_id = savings_plan_offering_id
        self._commitment = commitment
        self._upfront_payment_amount = upfront_payment_amount
        self._purchase_time = purchase_time
        self._client_token = client_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSavingsPlanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSavingsPlan_request of this CreateSavingsPlanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def savings_plan_offering_id(self):
        """Gets the savings_plan_offering_id of this CreateSavingsPlanRequest.

        The ID of the offering.

        :return: The savings_plan_offering_id of this CreateSavingsPlanRequest.
        :rtype: str
        """
        return self._savings_plan_offering_id

    @savings_plan_offering_id.setter
    def savings_plan_offering_id(self, savings_plan_offering_id):
        """Sets the savings_plan_offering_id of this CreateSavingsPlanRequest.

        The ID of the offering.

        :param savings_plan_offering_id: The savings_plan_offering_id of this CreateSavingsPlanRequest.
        :type savings_plan_offering_id: str
        """
        if savings_plan_offering_id is None:
            raise ValueError("Invalid value for `savings_plan_offering_id`, must not be `None`")

        self._savings_plan_offering_id = savings_plan_offering_id

    @property
    def commitment(self):
        """Gets the commitment of this CreateSavingsPlanRequest.

        The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.

        :return: The commitment of this CreateSavingsPlanRequest.
        :rtype: str
        """
        return self._commitment

    @commitment.setter
    def commitment(self, commitment):
        """Sets the commitment of this CreateSavingsPlanRequest.

        The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.

        :param commitment: The commitment of this CreateSavingsPlanRequest.
        :type commitment: str
        """
        if commitment is None:
            raise ValueError("Invalid value for `commitment`, must not be `None`")

        self._commitment = commitment

    @property
    def upfront_payment_amount(self):
        """Gets the upfront_payment_amount of this CreateSavingsPlanRequest.

        The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is <code>Partial Upfront</code>.

        :return: The upfront_payment_amount of this CreateSavingsPlanRequest.
        :rtype: str
        """
        return self._upfront_payment_amount

    @upfront_payment_amount.setter
    def upfront_payment_amount(self, upfront_payment_amount):
        """Sets the upfront_payment_amount of this CreateSavingsPlanRequest.

        The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is <code>Partial Upfront</code>.

        :param upfront_payment_amount: The upfront_payment_amount of this CreateSavingsPlanRequest.
        :type upfront_payment_amount: str
        """

        self._upfront_payment_amount = upfront_payment_amount

    @property
    def purchase_time(self):
        """Gets the purchase_time of this CreateSavingsPlanRequest.

        The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).

        :return: The purchase_time of this CreateSavingsPlanRequest.
        :rtype: datetime
        """
        return self._purchase_time

    @purchase_time.setter
    def purchase_time(self, purchase_time):
        """Sets the purchase_time of this CreateSavingsPlanRequest.

        The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).

        :param purchase_time: The purchase_time of this CreateSavingsPlanRequest.
        :type purchase_time: datetime
        """

        self._purchase_time = purchase_time

    @property
    def client_token(self):
        """Gets the client_token of this CreateSavingsPlanRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :return: The client_token of this CreateSavingsPlanRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateSavingsPlanRequest.

        Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.

        :param client_token: The client_token of this CreateSavingsPlanRequest.
        :type client_token: str
        """

        self._client_token = client_token

    @property
    def tags(self):
        """Gets the tags of this CreateSavingsPlanRequest.

        One or more tags.

        :return: The tags of this CreateSavingsPlanRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSavingsPlanRequest.

        One or more tags.

        :param tags: The tags of this CreateSavingsPlanRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
