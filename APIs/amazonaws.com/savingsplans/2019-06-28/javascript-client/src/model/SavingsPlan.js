/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyCode from './CurrencyCode';
import SavingsPlanPaymentOption from './SavingsPlanPaymentOption';
import SavingsPlanState from './SavingsPlanState';
import SavingsPlanType from './SavingsPlanType';

/**
 * The SavingsPlan model module.
 * @module model/SavingsPlan
 * @version 2019-06-28
 */
class SavingsPlan {
    /**
     * Constructs a new <code>SavingsPlan</code>.
     * Information about a Savings Plan.
     * @alias module:model/SavingsPlan
     */
    constructor() { 
        
        SavingsPlan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SavingsPlan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SavingsPlan} obj Optional instance to populate.
     * @return {module:model/SavingsPlan} The populated <code>SavingsPlan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SavingsPlan();

            if (data.hasOwnProperty('offeringId')) {
                obj['offeringId'] = ApiClient.convertToType(data['offeringId'], 'String');
            }
            if (data.hasOwnProperty('savingsPlanId')) {
                obj['savingsPlanId'] = ApiClient.convertToType(data['savingsPlanId'], 'String');
            }
            if (data.hasOwnProperty('savingsPlanArn')) {
                obj['savingsPlanArn'] = ApiClient.convertToType(data['savingsPlanArn'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], SavingsPlanState);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('ec2InstanceFamily')) {
                obj['ec2InstanceFamily'] = ApiClient.convertToType(data['ec2InstanceFamily'], 'String');
            }
            if (data.hasOwnProperty('savingsPlanType')) {
                obj['savingsPlanType'] = ApiClient.convertToType(data['savingsPlanType'], SavingsPlanType);
            }
            if (data.hasOwnProperty('paymentOption')) {
                obj['paymentOption'] = ApiClient.convertToType(data['paymentOption'], SavingsPlanPaymentOption);
            }
            if (data.hasOwnProperty('productTypes')) {
                obj['productTypes'] = ApiClient.convertToType(data['productTypes'], Array);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], CurrencyCode);
            }
            if (data.hasOwnProperty('commitment')) {
                obj['commitment'] = ApiClient.convertToType(data['commitment'], 'String');
            }
            if (data.hasOwnProperty('upfrontPaymentAmount')) {
                obj['upfrontPaymentAmount'] = ApiClient.convertToType(data['upfrontPaymentAmount'], 'String');
            }
            if (data.hasOwnProperty('recurringPaymentAmount')) {
                obj['recurringPaymentAmount'] = ApiClient.convertToType(data['recurringPaymentAmount'], 'String');
            }
            if (data.hasOwnProperty('termDurationInSeconds')) {
                obj['termDurationInSeconds'] = ApiClient.convertToType(data['termDurationInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SavingsPlan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SavingsPlan</code>.
     */
    static validateJSON(data) {
        // validate the optional field `offeringId`
        if (data['offeringId']) { // data not null
          String.validateJSON(data['offeringId']);
        }
        // validate the optional field `savingsPlanId`
        if (data['savingsPlanId']) { // data not null
          String.validateJSON(data['savingsPlanId']);
        }
        // validate the optional field `savingsPlanArn`
        if (data['savingsPlanArn']) { // data not null
          String.validateJSON(data['savingsPlanArn']);
        }
        // validate the optional field `description`
        if (data['description']) { // data not null
          String.validateJSON(data['description']);
        }
        // validate the optional field `start`
        if (data['start']) { // data not null
          String.validateJSON(data['start']);
        }
        // validate the optional field `end`
        if (data['end']) { // data not null
          String.validateJSON(data['end']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          SavingsPlanState.validateJSON(data['state']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          String.validateJSON(data['region']);
        }
        // validate the optional field `ec2InstanceFamily`
        if (data['ec2InstanceFamily']) { // data not null
          String.validateJSON(data['ec2InstanceFamily']);
        }
        // validate the optional field `savingsPlanType`
        if (data['savingsPlanType']) { // data not null
          SavingsPlanType.validateJSON(data['savingsPlanType']);
        }
        // validate the optional field `paymentOption`
        if (data['paymentOption']) { // data not null
          SavingsPlanPaymentOption.validateJSON(data['paymentOption']);
        }
        // validate the optional field `productTypes`
        if (data['productTypes']) { // data not null
          Array.validateJSON(data['productTypes']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          CurrencyCode.validateJSON(data['currency']);
        }
        // validate the optional field `commitment`
        if (data['commitment']) { // data not null
          String.validateJSON(data['commitment']);
        }
        // validate the optional field `upfrontPaymentAmount`
        if (data['upfrontPaymentAmount']) { // data not null
          String.validateJSON(data['upfrontPaymentAmount']);
        }
        // validate the optional field `recurringPaymentAmount`
        if (data['recurringPaymentAmount']) { // data not null
          String.validateJSON(data['recurringPaymentAmount']);
        }
        // validate the optional field `termDurationInSeconds`
        if (data['termDurationInSeconds']) { // data not null
          Number.validateJSON(data['termDurationInSeconds']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }

        return true;
    }


}



/**
 * @member {String} offeringId
 */
SavingsPlan.prototype['offeringId'] = undefined;

/**
 * @member {String} savingsPlanId
 */
SavingsPlan.prototype['savingsPlanId'] = undefined;

/**
 * @member {String} savingsPlanArn
 */
SavingsPlan.prototype['savingsPlanArn'] = undefined;

/**
 * @member {String} description
 */
SavingsPlan.prototype['description'] = undefined;

/**
 * @member {String} start
 */
SavingsPlan.prototype['start'] = undefined;

/**
 * @member {String} end
 */
SavingsPlan.prototype['end'] = undefined;

/**
 * @member {module:model/SavingsPlanState} state
 */
SavingsPlan.prototype['state'] = undefined;

/**
 * @member {String} region
 */
SavingsPlan.prototype['region'] = undefined;

/**
 * @member {String} ec2InstanceFamily
 */
SavingsPlan.prototype['ec2InstanceFamily'] = undefined;

/**
 * @member {module:model/SavingsPlanType} savingsPlanType
 */
SavingsPlan.prototype['savingsPlanType'] = undefined;

/**
 * @member {module:model/SavingsPlanPaymentOption} paymentOption
 */
SavingsPlan.prototype['paymentOption'] = undefined;

/**
 * @member {Array} productTypes
 */
SavingsPlan.prototype['productTypes'] = undefined;

/**
 * @member {module:model/CurrencyCode} currency
 */
SavingsPlan.prototype['currency'] = undefined;

/**
 * @member {String} commitment
 */
SavingsPlan.prototype['commitment'] = undefined;

/**
 * @member {String} upfrontPaymentAmount
 */
SavingsPlan.prototype['upfrontPaymentAmount'] = undefined;

/**
 * @member {String} recurringPaymentAmount
 */
SavingsPlan.prototype['recurringPaymentAmount'] = undefined;

/**
 * @member {Number} termDurationInSeconds
 */
SavingsPlan.prototype['termDurationInSeconds'] = undefined;

/**
 * @member {Object} tags
 */
SavingsPlan.prototype['tags'] = undefined;






export default SavingsPlan;

