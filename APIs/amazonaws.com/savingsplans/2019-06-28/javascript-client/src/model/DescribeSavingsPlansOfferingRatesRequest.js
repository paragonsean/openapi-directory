/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SavingsPlanOfferingRateFilterElement from './SavingsPlanOfferingRateFilterElement';
import SavingsPlanPaymentOption from './SavingsPlanPaymentOption';
import SavingsPlanProductType from './SavingsPlanProductType';
import SavingsPlanRateServiceCode from './SavingsPlanRateServiceCode';
import SavingsPlanType from './SavingsPlanType';

/**
 * The DescribeSavingsPlansOfferingRatesRequest model module.
 * @module model/DescribeSavingsPlansOfferingRatesRequest
 * @version 2019-06-28
 */
class DescribeSavingsPlansOfferingRatesRequest {
    /**
     * Constructs a new <code>DescribeSavingsPlansOfferingRatesRequest</code>.
     * @alias module:model/DescribeSavingsPlansOfferingRatesRequest
     */
    constructor() { 
        
        DescribeSavingsPlansOfferingRatesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeSavingsPlansOfferingRatesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeSavingsPlansOfferingRatesRequest} obj Optional instance to populate.
     * @return {module:model/DescribeSavingsPlansOfferingRatesRequest} The populated <code>DescribeSavingsPlansOfferingRatesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeSavingsPlansOfferingRatesRequest();

            if (data.hasOwnProperty('savingsPlanOfferingIds')) {
                obj['savingsPlanOfferingIds'] = ApiClient.convertToType(data['savingsPlanOfferingIds'], ['String']);
            }
            if (data.hasOwnProperty('savingsPlanPaymentOptions')) {
                obj['savingsPlanPaymentOptions'] = ApiClient.convertToType(data['savingsPlanPaymentOptions'], [SavingsPlanPaymentOption]);
            }
            if (data.hasOwnProperty('savingsPlanTypes')) {
                obj['savingsPlanTypes'] = ApiClient.convertToType(data['savingsPlanTypes'], [SavingsPlanType]);
            }
            if (data.hasOwnProperty('products')) {
                obj['products'] = ApiClient.convertToType(data['products'], [SavingsPlanProductType]);
            }
            if (data.hasOwnProperty('serviceCodes')) {
                obj['serviceCodes'] = ApiClient.convertToType(data['serviceCodes'], [SavingsPlanRateServiceCode]);
            }
            if (data.hasOwnProperty('usageTypes')) {
                obj['usageTypes'] = ApiClient.convertToType(data['usageTypes'], ['String']);
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], ['String']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [SavingsPlanOfferingRateFilterElement]);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeSavingsPlansOfferingRatesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeSavingsPlansOfferingRatesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['savingsPlanOfferingIds'])) {
            throw new Error("Expected the field `savingsPlanOfferingIds` to be an array in the JSON data but got " + data['savingsPlanOfferingIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['savingsPlanPaymentOptions'])) {
            throw new Error("Expected the field `savingsPlanPaymentOptions` to be an array in the JSON data but got " + data['savingsPlanPaymentOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['savingsPlanTypes'])) {
            throw new Error("Expected the field `savingsPlanTypes` to be an array in the JSON data but got " + data['savingsPlanTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['products'])) {
            throw new Error("Expected the field `products` to be an array in the JSON data but got " + data['products']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceCodes'])) {
            throw new Error("Expected the field `serviceCodes` to be an array in the JSON data but got " + data['serviceCodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usageTypes'])) {
            throw new Error("Expected the field `usageTypes` to be an array in the JSON data but got " + data['usageTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operations'])) {
            throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                SavingsPlanOfferingRateFilterElement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }

        return true;
    }


}



/**
 * The IDs of the offerings.
 * @member {Array.<String>} savingsPlanOfferingIds
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['savingsPlanOfferingIds'] = undefined;

/**
 * The payment options.
 * @member {Array.<module:model/SavingsPlanPaymentOption>} savingsPlanPaymentOptions
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['savingsPlanPaymentOptions'] = undefined;

/**
 * The plan types.
 * @member {Array.<module:model/SavingsPlanType>} savingsPlanTypes
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['savingsPlanTypes'] = undefined;

/**
 * The AWS products.
 * @member {Array.<module:model/SavingsPlanProductType>} products
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['products'] = undefined;

/**
 * The services.
 * @member {Array.<module:model/SavingsPlanRateServiceCode>} serviceCodes
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['serviceCodes'] = undefined;

/**
 * The usage details of the line item in the billing report.
 * @member {Array.<String>} usageTypes
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['usageTypes'] = undefined;

/**
 * The specific AWS operation for the line item in the billing report.
 * @member {Array.<String>} operations
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['operations'] = undefined;

/**
 * The filters.
 * @member {Array.<module:model/SavingsPlanOfferingRateFilterElement>} filters
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['filters'] = undefined;

/**
 * The token for the next page of results.
 * @member {String} nextToken
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['nextToken'] = undefined;

/**
 * The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
 * @member {Number} maxResults
 */
DescribeSavingsPlansOfferingRatesRequest.prototype['maxResults'] = undefined;






export default DescribeSavingsPlansOfferingRatesRequest;

