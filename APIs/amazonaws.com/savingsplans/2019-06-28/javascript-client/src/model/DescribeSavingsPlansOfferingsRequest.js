/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CurrencyCode from './CurrencyCode';
import SavingsPlanOfferingFilterElement from './SavingsPlanOfferingFilterElement';
import SavingsPlanPaymentOption from './SavingsPlanPaymentOption';
import SavingsPlanType from './SavingsPlanType';

/**
 * The DescribeSavingsPlansOfferingsRequest model module.
 * @module model/DescribeSavingsPlansOfferingsRequest
 * @version 2019-06-28
 */
class DescribeSavingsPlansOfferingsRequest {
    /**
     * Constructs a new <code>DescribeSavingsPlansOfferingsRequest</code>.
     * @alias module:model/DescribeSavingsPlansOfferingsRequest
     */
    constructor() { 
        
        DescribeSavingsPlansOfferingsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeSavingsPlansOfferingsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeSavingsPlansOfferingsRequest} obj Optional instance to populate.
     * @return {module:model/DescribeSavingsPlansOfferingsRequest} The populated <code>DescribeSavingsPlansOfferingsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeSavingsPlansOfferingsRequest();

            if (data.hasOwnProperty('offeringIds')) {
                obj['offeringIds'] = ApiClient.convertToType(data['offeringIds'], ['String']);
            }
            if (data.hasOwnProperty('paymentOptions')) {
                obj['paymentOptions'] = ApiClient.convertToType(data['paymentOptions'], [SavingsPlanPaymentOption]);
            }
            if (data.hasOwnProperty('productType')) {
                obj['productType'] = ApiClient.convertToType(data['productType'], 'String');
            }
            if (data.hasOwnProperty('planTypes')) {
                obj['planTypes'] = ApiClient.convertToType(data['planTypes'], [SavingsPlanType]);
            }
            if (data.hasOwnProperty('durations')) {
                obj['durations'] = ApiClient.convertToType(data['durations'], ['Number']);
            }
            if (data.hasOwnProperty('currencies')) {
                obj['currencies'] = ApiClient.convertToType(data['currencies'], [CurrencyCode]);
            }
            if (data.hasOwnProperty('descriptions')) {
                obj['descriptions'] = ApiClient.convertToType(data['descriptions'], ['String']);
            }
            if (data.hasOwnProperty('serviceCodes')) {
                obj['serviceCodes'] = ApiClient.convertToType(data['serviceCodes'], ['String']);
            }
            if (data.hasOwnProperty('usageTypes')) {
                obj['usageTypes'] = ApiClient.convertToType(data['usageTypes'], ['String']);
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], ['String']);
            }
            if (data.hasOwnProperty('filters')) {
                obj['filters'] = ApiClient.convertToType(data['filters'], [SavingsPlanOfferingFilterElement]);
            }
            if (data.hasOwnProperty('nextToken')) {
                obj['nextToken'] = ApiClient.convertToType(data['nextToken'], 'String');
            }
            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeSavingsPlansOfferingsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeSavingsPlansOfferingsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['offeringIds'])) {
            throw new Error("Expected the field `offeringIds` to be an array in the JSON data but got " + data['offeringIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['paymentOptions'])) {
            throw new Error("Expected the field `paymentOptions` to be an array in the JSON data but got " + data['paymentOptions']);
        }
        // ensure the json data is a string
        if (data['productType'] && !(typeof data['productType'] === 'string' || data['productType'] instanceof String)) {
            throw new Error("Expected the field `productType` to be a primitive type in the JSON string but got " + data['productType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['planTypes'])) {
            throw new Error("Expected the field `planTypes` to be an array in the JSON data but got " + data['planTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['durations'])) {
            throw new Error("Expected the field `durations` to be an array in the JSON data but got " + data['durations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['currencies'])) {
            throw new Error("Expected the field `currencies` to be an array in the JSON data but got " + data['currencies']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['descriptions'])) {
            throw new Error("Expected the field `descriptions` to be an array in the JSON data but got " + data['descriptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serviceCodes'])) {
            throw new Error("Expected the field `serviceCodes` to be an array in the JSON data but got " + data['serviceCodes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['usageTypes'])) {
            throw new Error("Expected the field `usageTypes` to be an array in the JSON data but got " + data['usageTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['operations'])) {
            throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
        }
        if (data['filters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['filters'])) {
                throw new Error("Expected the field `filters` to be an array in the JSON data but got " + data['filters']);
            }
            // validate the optional field `filters` (array)
            for (const item of data['filters']) {
                SavingsPlanOfferingFilterElement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextToken'] && !(typeof data['nextToken'] === 'string' || data['nextToken'] instanceof String)) {
            throw new Error("Expected the field `nextToken` to be a primitive type in the JSON string but got " + data['nextToken']);
        }

        return true;
    }


}



/**
 * The IDs of the offerings.
 * @member {Array.<String>} offeringIds
 */
DescribeSavingsPlansOfferingsRequest.prototype['offeringIds'] = undefined;

/**
 * The payment options.
 * @member {Array.<module:model/SavingsPlanPaymentOption>} paymentOptions
 */
DescribeSavingsPlansOfferingsRequest.prototype['paymentOptions'] = undefined;

/**
 * The product type.
 * @member {module:model/DescribeSavingsPlansOfferingsRequest.ProductTypeEnum} productType
 */
DescribeSavingsPlansOfferingsRequest.prototype['productType'] = undefined;

/**
 * The plan type.
 * @member {Array.<module:model/SavingsPlanType>} planTypes
 */
DescribeSavingsPlansOfferingsRequest.prototype['planTypes'] = undefined;

/**
 * The durations, in seconds.
 * @member {Array.<Number>} durations
 */
DescribeSavingsPlansOfferingsRequest.prototype['durations'] = undefined;

/**
 * The currencies.
 * @member {Array.<module:model/CurrencyCode>} currencies
 */
DescribeSavingsPlansOfferingsRequest.prototype['currencies'] = undefined;

/**
 * The descriptions.
 * @member {Array.<String>} descriptions
 */
DescribeSavingsPlansOfferingsRequest.prototype['descriptions'] = undefined;

/**
 * The services.
 * @member {Array.<String>} serviceCodes
 */
DescribeSavingsPlansOfferingsRequest.prototype['serviceCodes'] = undefined;

/**
 * The usage details of the line item in the billing report.
 * @member {Array.<String>} usageTypes
 */
DescribeSavingsPlansOfferingsRequest.prototype['usageTypes'] = undefined;

/**
 * The specific AWS operation for the line item in the billing report.
 * @member {Array.<String>} operations
 */
DescribeSavingsPlansOfferingsRequest.prototype['operations'] = undefined;

/**
 * The filters.
 * @member {Array.<module:model/SavingsPlanOfferingFilterElement>} filters
 */
DescribeSavingsPlansOfferingsRequest.prototype['filters'] = undefined;

/**
 * The token for the next page of results.
 * @member {String} nextToken
 */
DescribeSavingsPlansOfferingsRequest.prototype['nextToken'] = undefined;

/**
 * The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.
 * @member {Number} maxResults
 */
DescribeSavingsPlansOfferingsRequest.prototype['maxResults'] = undefined;





/**
 * Allowed values for the <code>productType</code> property.
 * @enum {String}
 * @readonly
 */
DescribeSavingsPlansOfferingsRequest['ProductTypeEnum'] = {

    /**
     * value: "EC2"
     * @const
     */
    "EC2": "EC2",

    /**
     * value: "Fargate"
     * @const
     */
    "Fargate": "Fargate",

    /**
     * value: "Lambda"
     * @const
     */
    "Lambda": "Lambda",

    /**
     * value: "SageMaker"
     * @const
     */
    "SageMaker": "SageMaker"
};



export default DescribeSavingsPlansOfferingsRequest;

