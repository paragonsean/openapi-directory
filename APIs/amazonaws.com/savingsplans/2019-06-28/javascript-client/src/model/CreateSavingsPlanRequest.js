/**
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateSavingsPlanRequest model module.
 * @module model/CreateSavingsPlanRequest
 * @version 2019-06-28
 */
class CreateSavingsPlanRequest {
    /**
     * Constructs a new <code>CreateSavingsPlanRequest</code>.
     * @alias module:model/CreateSavingsPlanRequest
     * @param savingsPlanOfferingId {String} The ID of the offering.
     * @param commitment {String} The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.
     */
    constructor(savingsPlanOfferingId, commitment) { 
        
        CreateSavingsPlanRequest.initialize(this, savingsPlanOfferingId, commitment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, savingsPlanOfferingId, commitment) { 
        obj['savingsPlanOfferingId'] = savingsPlanOfferingId;
        obj['commitment'] = commitment;
    }

    /**
     * Constructs a <code>CreateSavingsPlanRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateSavingsPlanRequest} obj Optional instance to populate.
     * @return {module:model/CreateSavingsPlanRequest} The populated <code>CreateSavingsPlanRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateSavingsPlanRequest();

            if (data.hasOwnProperty('savingsPlanOfferingId')) {
                obj['savingsPlanOfferingId'] = ApiClient.convertToType(data['savingsPlanOfferingId'], 'String');
            }
            if (data.hasOwnProperty('commitment')) {
                obj['commitment'] = ApiClient.convertToType(data['commitment'], 'String');
            }
            if (data.hasOwnProperty('upfrontPaymentAmount')) {
                obj['upfrontPaymentAmount'] = ApiClient.convertToType(data['upfrontPaymentAmount'], 'String');
            }
            if (data.hasOwnProperty('purchaseTime')) {
                obj['purchaseTime'] = ApiClient.convertToType(data['purchaseTime'], 'Date');
            }
            if (data.hasOwnProperty('clientToken')) {
                obj['clientToken'] = ApiClient.convertToType(data['clientToken'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateSavingsPlanRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateSavingsPlanRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateSavingsPlanRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['savingsPlanOfferingId'] && !(typeof data['savingsPlanOfferingId'] === 'string' || data['savingsPlanOfferingId'] instanceof String)) {
            throw new Error("Expected the field `savingsPlanOfferingId` to be a primitive type in the JSON string but got " + data['savingsPlanOfferingId']);
        }
        // ensure the json data is a string
        if (data['commitment'] && !(typeof data['commitment'] === 'string' || data['commitment'] instanceof String)) {
            throw new Error("Expected the field `commitment` to be a primitive type in the JSON string but got " + data['commitment']);
        }
        // ensure the json data is a string
        if (data['upfrontPaymentAmount'] && !(typeof data['upfrontPaymentAmount'] === 'string' || data['upfrontPaymentAmount'] instanceof String)) {
            throw new Error("Expected the field `upfrontPaymentAmount` to be a primitive type in the JSON string but got " + data['upfrontPaymentAmount']);
        }
        // ensure the json data is a string
        if (data['clientToken'] && !(typeof data['clientToken'] === 'string' || data['clientToken'] instanceof String)) {
            throw new Error("Expected the field `clientToken` to be a primitive type in the JSON string but got " + data['clientToken']);
        }

        return true;
    }


}

CreateSavingsPlanRequest.RequiredProperties = ["savingsPlanOfferingId", "commitment"];

/**
 * The ID of the offering.
 * @member {String} savingsPlanOfferingId
 */
CreateSavingsPlanRequest.prototype['savingsPlanOfferingId'] = undefined;

/**
 * The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.
 * @member {String} commitment
 */
CreateSavingsPlanRequest.prototype['commitment'] = undefined;

/**
 * The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is <code>Partial Upfront</code>.
 * @member {String} upfrontPaymentAmount
 */
CreateSavingsPlanRequest.prototype['upfrontPaymentAmount'] = undefined;

/**
 * The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).
 * @member {Date} purchaseTime
 */
CreateSavingsPlanRequest.prototype['purchaseTime'] = undefined;

/**
 * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
 * @member {String} clientToken
 */
CreateSavingsPlanRequest.prototype['clientToken'] = undefined;

/**
 * One or more tags.
 * @member {Object.<String, String>} tags
 */
CreateSavingsPlanRequest.prototype['tags'] = undefined;






export default CreateSavingsPlanRequest;

