/*
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CurrencyCode;
import org.openapitools.client.model.SavingsPlanPaymentOption;
import org.openapitools.client.model.SavingsPlanType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SavingsPlanOfferingRateSavingsPlanOffering
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:04.017777-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SavingsPlanOfferingRateSavingsPlanOffering {
  public static final String SERIALIZED_NAME_OFFERING_ID = "offeringId";
  @SerializedName(SERIALIZED_NAME_OFFERING_ID)
  private String offeringId;

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "paymentOption";
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private SavingsPlanPaymentOption paymentOption;

  public static final String SERIALIZED_NAME_PLAN_TYPE = "planType";
  @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
  private SavingsPlanType planType;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "durationSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Integer durationSeconds;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyCode currency;

  public static final String SERIALIZED_NAME_PLAN_DESCRIPTION = "planDescription";
  @SerializedName(SERIALIZED_NAME_PLAN_DESCRIPTION)
  private String planDescription;

  public SavingsPlanOfferingRateSavingsPlanOffering() {
  }

  public SavingsPlanOfferingRateSavingsPlanOffering offeringId(String offeringId) {
    this.offeringId = offeringId;
    return this;
  }

  /**
   * Get offeringId
   * @return offeringId
   */
  @javax.annotation.Nullable
  public String getOfferingId() {
    return offeringId;
  }

  public void setOfferingId(String offeringId) {
    this.offeringId = offeringId;
  }


  public SavingsPlanOfferingRateSavingsPlanOffering paymentOption(SavingsPlanPaymentOption paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Get paymentOption
   * @return paymentOption
   */
  @javax.annotation.Nullable
  public SavingsPlanPaymentOption getPaymentOption() {
    return paymentOption;
  }

  public void setPaymentOption(SavingsPlanPaymentOption paymentOption) {
    this.paymentOption = paymentOption;
  }


  public SavingsPlanOfferingRateSavingsPlanOffering planType(SavingsPlanType planType) {
    this.planType = planType;
    return this;
  }

  /**
   * Get planType
   * @return planType
   */
  @javax.annotation.Nullable
  public SavingsPlanType getPlanType() {
    return planType;
  }

  public void setPlanType(SavingsPlanType planType) {
    this.planType = planType;
  }


  public SavingsPlanOfferingRateSavingsPlanOffering durationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * Get durationSeconds
   * @return durationSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public SavingsPlanOfferingRateSavingsPlanOffering currency(CurrencyCode currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public CurrencyCode getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyCode currency) {
    this.currency = currency;
  }


  public SavingsPlanOfferingRateSavingsPlanOffering planDescription(String planDescription) {
    this.planDescription = planDescription;
    return this;
  }

  /**
   * Get planDescription
   * @return planDescription
   */
  @javax.annotation.Nullable
  public String getPlanDescription() {
    return planDescription;
  }

  public void setPlanDescription(String planDescription) {
    this.planDescription = planDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavingsPlanOfferingRateSavingsPlanOffering savingsPlanOfferingRateSavingsPlanOffering = (SavingsPlanOfferingRateSavingsPlanOffering) o;
    return Objects.equals(this.offeringId, savingsPlanOfferingRateSavingsPlanOffering.offeringId) &&
        Objects.equals(this.paymentOption, savingsPlanOfferingRateSavingsPlanOffering.paymentOption) &&
        Objects.equals(this.planType, savingsPlanOfferingRateSavingsPlanOffering.planType) &&
        Objects.equals(this.durationSeconds, savingsPlanOfferingRateSavingsPlanOffering.durationSeconds) &&
        Objects.equals(this.currency, savingsPlanOfferingRateSavingsPlanOffering.currency) &&
        Objects.equals(this.planDescription, savingsPlanOfferingRateSavingsPlanOffering.planDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offeringId, paymentOption, planType, durationSeconds, currency, planDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavingsPlanOfferingRateSavingsPlanOffering {\n");
    sb.append("    offeringId: ").append(toIndentedString(offeringId)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    planDescription: ").append(toIndentedString(planDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offeringId");
    openapiFields.add("paymentOption");
    openapiFields.add("planType");
    openapiFields.add("durationSeconds");
    openapiFields.add("currency");
    openapiFields.add("planDescription");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SavingsPlanOfferingRateSavingsPlanOffering
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SavingsPlanOfferingRateSavingsPlanOffering.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SavingsPlanOfferingRateSavingsPlanOffering is not found in the empty JSON string", SavingsPlanOfferingRateSavingsPlanOffering.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SavingsPlanOfferingRateSavingsPlanOffering.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SavingsPlanOfferingRateSavingsPlanOffering` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `offeringId`
      if (jsonObj.get("offeringId") != null && !jsonObj.get("offeringId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("offeringId"));
      }
      // validate the optional field `paymentOption`
      if (jsonObj.get("paymentOption") != null && !jsonObj.get("paymentOption").isJsonNull()) {
        SavingsPlanPaymentOption.validateJsonElement(jsonObj.get("paymentOption"));
      }
      // validate the optional field `planType`
      if (jsonObj.get("planType") != null && !jsonObj.get("planType").isJsonNull()) {
        SavingsPlanType.validateJsonElement(jsonObj.get("planType"));
      }
      // validate the optional field `durationSeconds`
      if (jsonObj.get("durationSeconds") != null && !jsonObj.get("durationSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("durationSeconds"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        CurrencyCode.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `planDescription`
      if (jsonObj.get("planDescription") != null && !jsonObj.get("planDescription").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("planDescription"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SavingsPlanOfferingRateSavingsPlanOffering.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SavingsPlanOfferingRateSavingsPlanOffering' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SavingsPlanOfferingRateSavingsPlanOffering> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SavingsPlanOfferingRateSavingsPlanOffering.class));

       return (TypeAdapter<T>) new TypeAdapter<SavingsPlanOfferingRateSavingsPlanOffering>() {
           @Override
           public void write(JsonWriter out, SavingsPlanOfferingRateSavingsPlanOffering value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SavingsPlanOfferingRateSavingsPlanOffering read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SavingsPlanOfferingRateSavingsPlanOffering given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SavingsPlanOfferingRateSavingsPlanOffering
   * @throws IOException if the JSON string is invalid with respect to SavingsPlanOfferingRateSavingsPlanOffering
   */
  public static SavingsPlanOfferingRateSavingsPlanOffering fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SavingsPlanOfferingRateSavingsPlanOffering.class);
  }

  /**
   * Convert an instance of SavingsPlanOfferingRateSavingsPlanOffering to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

