/*
 * AWS Savings Plans
 * Savings Plans are a pricing model that offer significant savings on AWS usage (for example, on Amazon EC2 instances). You commit to a consistent amount of usage, in USD per hour, for a term of 1 or 3 years, and receive a lower price for that usage. For more information, see the <a href=\"https://docs.aws.amazon.com/savingsplans/latest/userguide/\">AWS Savings Plans User Guide</a>.
 *
 * The version of the OpenAPI document: 2019-06-28
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSavingsPlanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:09:04.017777-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSavingsPlanRequest {
  public static final String SERIALIZED_NAME_SAVINGS_PLAN_OFFERING_ID = "savingsPlanOfferingId";
  @SerializedName(SERIALIZED_NAME_SAVINGS_PLAN_OFFERING_ID)
  private String savingsPlanOfferingId;

  public static final String SERIALIZED_NAME_COMMITMENT = "commitment";
  @SerializedName(SERIALIZED_NAME_COMMITMENT)
  private String commitment;

  public static final String SERIALIZED_NAME_UPFRONT_PAYMENT_AMOUNT = "upfrontPaymentAmount";
  @SerializedName(SERIALIZED_NAME_UPFRONT_PAYMENT_AMOUNT)
  private String upfrontPaymentAmount;

  public static final String SERIALIZED_NAME_PURCHASE_TIME = "purchaseTime";
  @SerializedName(SERIALIZED_NAME_PURCHASE_TIME)
  private OffsetDateTime purchaseTime;

  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "clientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateSavingsPlanRequest() {
  }

  public CreateSavingsPlanRequest savingsPlanOfferingId(String savingsPlanOfferingId) {
    this.savingsPlanOfferingId = savingsPlanOfferingId;
    return this;
  }

  /**
   * The ID of the offering.
   * @return savingsPlanOfferingId
   */
  @javax.annotation.Nonnull
  public String getSavingsPlanOfferingId() {
    return savingsPlanOfferingId;
  }

  public void setSavingsPlanOfferingId(String savingsPlanOfferingId) {
    this.savingsPlanOfferingId = savingsPlanOfferingId;
  }


  public CreateSavingsPlanRequest commitment(String commitment) {
    this.commitment = commitment;
    return this;
  }

  /**
   * The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.
   * @return commitment
   */
  @javax.annotation.Nonnull
  public String getCommitment() {
    return commitment;
  }

  public void setCommitment(String commitment) {
    this.commitment = commitment;
  }


  public CreateSavingsPlanRequest upfrontPaymentAmount(String upfrontPaymentAmount) {
    this.upfrontPaymentAmount = upfrontPaymentAmount;
    return this;
  }

  /**
   * The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is &lt;code&gt;Partial Upfront&lt;/code&gt;.
   * @return upfrontPaymentAmount
   */
  @javax.annotation.Nullable
  public String getUpfrontPaymentAmount() {
    return upfrontPaymentAmount;
  }

  public void setUpfrontPaymentAmount(String upfrontPaymentAmount) {
    this.upfrontPaymentAmount = upfrontPaymentAmount;
  }


  public CreateSavingsPlanRequest purchaseTime(OffsetDateTime purchaseTime) {
    this.purchaseTime = purchaseTime;
    return this;
  }

  /**
   * The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).
   * @return purchaseTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPurchaseTime() {
    return purchaseTime;
  }

  public void setPurchaseTime(OffsetDateTime purchaseTime) {
    this.purchaseTime = purchaseTime;
  }


  public CreateSavingsPlanRequest clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.
   * @return clientToken
   */
  @javax.annotation.Nullable
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateSavingsPlanRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateSavingsPlanRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * One or more tags.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSavingsPlanRequest createSavingsPlanRequest = (CreateSavingsPlanRequest) o;
    return Objects.equals(this.savingsPlanOfferingId, createSavingsPlanRequest.savingsPlanOfferingId) &&
        Objects.equals(this.commitment, createSavingsPlanRequest.commitment) &&
        Objects.equals(this.upfrontPaymentAmount, createSavingsPlanRequest.upfrontPaymentAmount) &&
        Objects.equals(this.purchaseTime, createSavingsPlanRequest.purchaseTime) &&
        Objects.equals(this.clientToken, createSavingsPlanRequest.clientToken) &&
        Objects.equals(this.tags, createSavingsPlanRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(savingsPlanOfferingId, commitment, upfrontPaymentAmount, purchaseTime, clientToken, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSavingsPlanRequest {\n");
    sb.append("    savingsPlanOfferingId: ").append(toIndentedString(savingsPlanOfferingId)).append("\n");
    sb.append("    commitment: ").append(toIndentedString(commitment)).append("\n");
    sb.append("    upfrontPaymentAmount: ").append(toIndentedString(upfrontPaymentAmount)).append("\n");
    sb.append("    purchaseTime: ").append(toIndentedString(purchaseTime)).append("\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("savingsPlanOfferingId");
    openapiFields.add("commitment");
    openapiFields.add("upfrontPaymentAmount");
    openapiFields.add("purchaseTime");
    openapiFields.add("clientToken");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("savingsPlanOfferingId");
    openapiRequiredFields.add("commitment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSavingsPlanRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSavingsPlanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSavingsPlanRequest is not found in the empty JSON string", CreateSavingsPlanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSavingsPlanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSavingsPlanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSavingsPlanRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("savingsPlanOfferingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `savingsPlanOfferingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("savingsPlanOfferingId").toString()));
      }
      if (!jsonObj.get("commitment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitment").toString()));
      }
      if ((jsonObj.get("upfrontPaymentAmount") != null && !jsonObj.get("upfrontPaymentAmount").isJsonNull()) && !jsonObj.get("upfrontPaymentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upfrontPaymentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upfrontPaymentAmount").toString()));
      }
      if ((jsonObj.get("clientToken") != null && !jsonObj.get("clientToken").isJsonNull()) && !jsonObj.get("clientToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSavingsPlanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSavingsPlanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSavingsPlanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSavingsPlanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSavingsPlanRequest>() {
           @Override
           public void write(JsonWriter out, CreateSavingsPlanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSavingsPlanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSavingsPlanRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSavingsPlanRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSavingsPlanRequest
   */
  public static CreateSavingsPlanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSavingsPlanRequest.class);
  }

  /**
   * Convert an instance of CreateSavingsPlanRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

